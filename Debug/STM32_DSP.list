
STM32_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08009028  08009028  00019028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009164  08009164  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800916c  0800916c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c60  200001e4  08009358  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e44  08009358  00020e44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0dc  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038c9  00000000  00000000  0003a2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001268  00000000  00000000  0003dbc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e8  00000000  00000000  0003ee28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024907  00000000  00000000  0003ff10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012618  00000000  00000000  00064817  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca74b  00000000  00000000  00076e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014157a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005068  00000000  00000000  001415f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009010 	.word	0x08009010

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009010 	.word	0x08009010

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b0c0      	sub	sp, #256	; 0x100
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fd43 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f8a1 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f9dd 	bl	800094c <MX_GPIO_Init>
  MX_DMA_Init();
 8000592:	f000 f9b3 	bl	80008fc <MX_DMA_Init>
  MX_I2C1_Init();
 8000596:	f000 f91d 	bl	80007d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800059a:	f000 f979 	bl	8000890 <MX_SPI1_Init>
  MX_I2S2_Init();
 800059e:	f000 f947 	bl	8000830 <MX_I2S2_Init>
  MX_USB_DEVICE_Init();
 80005a2:	f007 fae1 	bl	8007b68 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */
  HAL_I2SEx_TransmitReceive_DMA(&hi2s2, txBuf, rxBuf, 4);
 80005a6:	2304      	movs	r3, #4
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <main+0x7c>)
 80005aa:	4915      	ldr	r1, [pc, #84]	; (8000600 <main+0x80>)
 80005ac:	4815      	ldr	r0, [pc, #84]	; (8000604 <main+0x84>)
 80005ae:	f001 ff75 	bl	800249c <HAL_I2SEx_TransmitReceive_DMA>
  HAL_Delay(1500);
 80005b2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005b6:	f000 fd9d 	bl	80010f4 <HAL_Delay>
  CDC_Printf("\r\n ================");
 80005ba:	4813      	ldr	r0, [pc, #76]	; (8000608 <main+0x88>)
 80005bc:	f007 fca4 	bl	8007f08 <CDC_Printf>
  CDC_Printf("\r\n *** DSP V0.0 ***");
 80005c0:	4812      	ldr	r0, [pc, #72]	; (800060c <main+0x8c>)
 80005c2:	f007 fca1 	bl	8007f08 <CDC_Printf>
  CDC_Printf("\r\n ================\r\n");
 80005c6:	4812      	ldr	r0, [pc, #72]	; (8000610 <main+0x90>)
 80005c8:	f007 fc9e 	bl	8007f08 <CDC_Printf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char cmd[256];
  cmd[0] = '\0';
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */
	/* USER CODE BEGIN 3 */
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d8:	480e      	ldr	r0, [pc, #56]	; (8000614 <main+0x94>)
 80005da:	f001 fbc7 	bl	8001d6c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80005de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e2:	f000 fd87 	bl	80010f4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	4809      	ldr	r0, [pc, #36]	; (8000614 <main+0x94>)
 80005ee:	f001 fbbd 	bl	8001d6c <HAL_GPIO_WritePin>
        HAL_Delay(500);
 80005f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f6:	f000 fd7d 	bl	80010f4 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80005fa:	e7ea      	b.n	80005d2 <main+0x52>
 80005fc:	200002f4 	.word	0x200002f4
 8000600:	200002e4 	.word	0x200002e4
 8000604:	2000041c 	.word	0x2000041c
 8000608:	08009028 	.word	0x08009028
 800060c:	0800903c 	.word	0x0800903c
 8000610:	08009050 	.word	0x08009050
 8000614:	40020c00 	.word	0x40020c00

08000618 <HAL_I2SEx_TxRxHalfCpltCallback>:
	/* USER CODE END 3 */
  }

}

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

	// restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[0]<<16)|rxBuf[1];
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_I2SEx_TxRxHalfCpltCallback+0x54>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	041b      	lsls	r3, r3, #16
 8000626:	4a11      	ldr	r2, [pc, #68]	; (800066c <HAL_I2SEx_TxRxHalfCpltCallback+0x54>)
 8000628:	8852      	ldrh	r2, [r2, #2]
 800062a:	4313      	orrs	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (rxBuf[2]<<16)|rxBuf[3];
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_I2SEx_TxRxHalfCpltCallback+0x54>)
 8000630:	889b      	ldrh	r3, [r3, #4]
 8000632:	041b      	lsls	r3, r3, #16
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <HAL_I2SEx_TxRxHalfCpltCallback+0x54>)
 8000636:	88d2      	ldrh	r2, [r2, #6]
 8000638:	4313      	orrs	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]

	// restore to buffer
	txBuf[0] = (lSample>>16)&0xFFFF;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	0c1b      	lsrs	r3, r3, #16
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <HAL_I2SEx_TxRxHalfCpltCallback+0x58>)
 8000644:	801a      	strh	r2, [r3, #0]
	txBuf[1] = lSample&0xFFFF;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	b29a      	uxth	r2, r3
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <HAL_I2SEx_TxRxHalfCpltCallback+0x58>)
 800064c:	805a      	strh	r2, [r3, #2]
	txBuf[2] = (rSample>>16)&0xFFFF;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	0c1b      	lsrs	r3, r3, #16
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_I2SEx_TxRxHalfCpltCallback+0x58>)
 8000656:	809a      	strh	r2, [r3, #4]
	txBuf[3] = rSample&0xFFFF;
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	b29a      	uxth	r2, r3
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <HAL_I2SEx_TxRxHalfCpltCallback+0x58>)
 800065e:	80da      	strh	r2, [r3, #6]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	200002f4 	.word	0x200002f4
 8000670:	200002e4 	.word	0x200002e4

08000674 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

	// restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[4]<<16)|rxBuf[5];
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_I2SEx_TxRxCpltCallback+0x54>)
 800067e:	891b      	ldrh	r3, [r3, #8]
 8000680:	041b      	lsls	r3, r3, #16
 8000682:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <HAL_I2SEx_TxRxCpltCallback+0x54>)
 8000684:	8952      	ldrh	r2, [r2, #10]
 8000686:	4313      	orrs	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (rxBuf[6]<<16)|rxBuf[7];
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_I2SEx_TxRxCpltCallback+0x54>)
 800068c:	899b      	ldrh	r3, [r3, #12]
 800068e:	041b      	lsls	r3, r3, #16
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <HAL_I2SEx_TxRxCpltCallback+0x54>)
 8000692:	89d2      	ldrh	r2, [r2, #14]
 8000694:	4313      	orrs	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]

	// restore to buffer
	txBuf[4] = (lSample>>16)&0xFFFF;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	0c1b      	lsrs	r3, r3, #16
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <HAL_I2SEx_TxRxCpltCallback+0x58>)
 80006a0:	811a      	strh	r2, [r3, #8]
	txBuf[5] = lSample&0xFFFF;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <HAL_I2SEx_TxRxCpltCallback+0x58>)
 80006a8:	815a      	strh	r2, [r3, #10]
	txBuf[6] = (rSample>>16)&0xFFFF;
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	0c1b      	lsrs	r3, r3, #16
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_I2SEx_TxRxCpltCallback+0x58>)
 80006b2:	819a      	strh	r2, [r3, #12]
	txBuf[7] = rSample&0xFFFF;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <HAL_I2SEx_TxRxCpltCallback+0x58>)
 80006ba:	81da      	strh	r2, [r3, #14]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	200002f4 	.word	0x200002f4
 80006cc:	200002e4 	.word	0x200002e4

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b098      	sub	sp, #96	; 0x60
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f008 f891 	bl	8008806 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b31      	ldr	r3, [pc, #196]	; (80007cc <SystemClock_Config+0xfc>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	4a30      	ldr	r2, [pc, #192]	; (80007cc <SystemClock_Config+0xfc>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000710:	6413      	str	r3, [r2, #64]	; 0x40
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <SystemClock_Config+0xfc>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <SystemClock_Config+0x100>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <SystemClock_Config+0x100>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6013      	str	r3, [r2, #0]
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <SystemClock_Config+0x100>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073a:	2301      	movs	r3, #1
 800073c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000748:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800074e:	2308      	movs	r3, #8
 8000750:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000752:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000756:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800075c:	2307      	movs	r3, #7
 800075e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000764:	4618      	mov	r0, r3
 8000766:	f003 fcdd 	bl	8004124 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000770:	f000 f9ea 	bl	8000b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000780:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	2105      	movs	r1, #5
 8000792:	4618      	mov	r0, r3
 8000794:	f003 ff36 	bl	8004604 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800079e:	f000 f9d3 	bl	8000b48 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007a2:	2301      	movs	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80007a6:	23c0      	movs	r3, #192	; 0xc0
 80007a8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 f904 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007be:	f000 f9c3 	bl	8000b48 <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3760      	adds	r7, #96	; 0x60
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */
  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_I2C1_Init+0x50>)
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MX_I2C1_Init+0x54>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_I2C1_Init+0x50>)
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_I2C1_Init+0x58>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_I2C1_Init+0x50>)
 80007f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_I2C1_Init+0x50>)
 8000812:	f001 fac5 	bl	8001da0 <HAL_I2C_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800081c:	f000 f994 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000290 	.word	0x20000290
 8000828:	40005400 	.word	0x40005400
 800082c:	000186a0 	.word	0x000186a0

08000830 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2S2_Init 0 */
  /* USER CODE END I2S2_Init 0 */
  /* USER CODE BEGIN I2S2_Init 1 */
  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_I2S2_Init+0x54>)
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <MX_I2S2_Init+0x58>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2S2_Init+0x54>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_I2S2_Init+0x54>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_I2S2_Init+0x54>)
 800084a:	2203      	movs	r2, #3
 800084c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_I2S2_Init+0x54>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_I2S2_Init+0x54>)
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <MX_I2S2_Init+0x5c>)
 800085a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_I2S2_Init+0x54>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_I2S2_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_I2S2_Init+0x54>)
 800086a:	2201      	movs	r2, #1
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_I2S2_Init+0x54>)
 8000870:	f001 fbce 	bl	8002010 <HAL_I2S_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800087a:	f000 f965 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */
  /* USER CODE END I2S2_Init 2 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000041c 	.word	0x2000041c
 8000888:	40003800 	.word	0x40003800
 800088c:	00017700 	.word	0x00017700

08000890 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 0 */
  /* USER CODE END SPI1_Init 0 */
  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_SPI1_Init+0x64>)
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <MX_SPI1_Init+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_SPI1_Init+0x64>)
 800089c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008dc:	220a      	movs	r2, #10
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_SPI1_Init+0x64>)
 80008e2:	f004 f9ab 	bl	8004c3c <HAL_SPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008ec:	f000 f92c 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000304 	.word	0x20000304
 80008f8:	40013000 	.word	0x40013000

080008fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_DMA_Init+0x4c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <MX_DMA_Init+0x4c>)
 800090c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_DMA_Init+0x4c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	200e      	movs	r0, #14
 8000924:	f000 fce3 	bl	80012ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000928:	200e      	movs	r0, #14
 800092a:	f000 fcfc 	bl	8001326 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	200f      	movs	r0, #15
 8000934:	f000 fcdb 	bl	80012ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000938:	200f      	movs	r0, #15
 800093a:	f000 fcf4 	bl	8001326 <HAL_NVIC_EnableIRQ>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	; 0x30
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	4b71      	ldr	r3, [pc, #452]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a70      	ldr	r2, [pc, #448]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b6e      	ldr	r3, [pc, #440]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0310 	and.w	r3, r3, #16
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	4b6a      	ldr	r3, [pc, #424]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a69      	ldr	r2, [pc, #420]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b67      	ldr	r3, [pc, #412]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b63      	ldr	r3, [pc, #396]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a62      	ldr	r2, [pc, #392]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b60      	ldr	r3, [pc, #384]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b5c      	ldr	r3, [pc, #368]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a5b      	ldr	r2, [pc, #364]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b59      	ldr	r3, [pc, #356]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b55      	ldr	r3, [pc, #340]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a54      	ldr	r2, [pc, #336]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b52      	ldr	r3, [pc, #328]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b4e      	ldr	r3, [pc, #312]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a4d      	ldr	r2, [pc, #308]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b4b      	ldr	r3, [pc, #300]	; (8000b2c <MX_GPIO_Init+0x1e0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	4848      	ldr	r0, [pc, #288]	; (8000b30 <MX_GPIO_Init+0x1e4>)
 8000a10:	f001 f9ac 	bl	8001d6c <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2101      	movs	r1, #1
 8000a18:	4846      	ldr	r0, [pc, #280]	; (8000b34 <MX_GPIO_Init+0x1e8>)
 8000a1a:	f001 f9a7 	bl	8001d6c <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a24:	4844      	ldr	r0, [pc, #272]	; (8000b38 <MX_GPIO_Init+0x1ec>)
 8000a26:	f001 f9a1 	bl	8001d6c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);
  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	483b      	ldr	r0, [pc, #236]	; (8000b30 <MX_GPIO_Init+0x1e4>)
 8000a42:	f000 fff9 	bl	8001a38 <HAL_GPIO_Init>
  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4835      	ldr	r0, [pc, #212]	; (8000b34 <MX_GPIO_Init+0x1e8>)
 8000a5e:	f000 ffeb 	bl	8001a38 <HAL_GPIO_Init>
  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a66:	4b35      	ldr	r3, [pc, #212]	; (8000b3c <MX_GPIO_Init+0x1f0>)
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4832      	ldr	r0, [pc, #200]	; (8000b40 <MX_GPIO_Init+0x1f4>)
 8000a76:	f000 ffdf 	bl	8001a38 <HAL_GPIO_Init>
  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	482a      	ldr	r0, [pc, #168]	; (8000b40 <MX_GPIO_Init+0x1f4>)
 8000a96:	f000 ffcf 	bl	8001a38 <HAL_GPIO_Init>
  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4825      	ldr	r0, [pc, #148]	; (8000b44 <MX_GPIO_Init+0x1f8>)
 8000aae:	f000 ffc3 	bl	8001a38 <HAL_GPIO_Init>
  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ab2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ab6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	481b      	ldr	r0, [pc, #108]	; (8000b38 <MX_GPIO_Init+0x1ec>)
 8000acc:	f000 ffb4 	bl	8001a38 <HAL_GPIO_Init>
  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ad0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ae2:	2306      	movs	r3, #6
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4811      	ldr	r0, [pc, #68]	; (8000b34 <MX_GPIO_Init+0x1e8>)
 8000aee:	f000 ffa3 	bl	8001a38 <HAL_GPIO_Init>
  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000af2:	2320      	movs	r3, #32
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_GPIO_Init+0x1ec>)
 8000b06:	f000 ff97 	bl	8001a38 <HAL_GPIO_Init>
  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_GPIO_Init+0x1f0>)
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_GPIO_Init+0x1e4>)
 8000b1e:	f000 ff8b 	bl	8001a38 <HAL_GPIO_Init>
}
 8000b22:	bf00      	nop
 8000b24:	3730      	adds	r7, #48	; 0x30
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	10120000 	.word	0x10120000
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b52:	4802      	ldr	r0, [pc, #8]	; (8000b5c <Error_Handler+0x14>)
 8000b54:	f001 f90a 	bl	8001d6c <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40020c00 	.word	0x40020c00

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_MspInit+0x4c>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x4c>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b9e:	2007      	movs	r0, #7
 8000ba0:	f000 fb9a 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <HAL_I2C_MspInit+0x84>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12c      	bne.n	8000c2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_I2C_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_I2C_MspInit+0x88>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_I2C_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bee:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf4:	2312      	movs	r3, #18
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c00:	2304      	movs	r3, #4
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <HAL_I2C_MspInit+0x8c>)
 8000c0c:	f000 ff14 	bl	8001a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_I2C_MspInit+0x88>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_I2C_MspInit+0x88>)
 8000c1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_I2C_MspInit+0x88>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400

08000c40 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a5f      	ldr	r2, [pc, #380]	; (8000ddc <HAL_I2S_MspInit+0x19c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	f040 80b8 	bne.w	8000dd4 <HAL_I2S_MspInit+0x194>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	4b5d      	ldr	r3, [pc, #372]	; (8000de0 <HAL_I2S_MspInit+0x1a0>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	4a5c      	ldr	r2, [pc, #368]	; (8000de0 <HAL_I2S_MspInit+0x1a0>)
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c72:	6413      	str	r3, [r2, #64]	; 0x40
 8000c74:	4b5a      	ldr	r3, [pc, #360]	; (8000de0 <HAL_I2S_MspInit+0x1a0>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4b56      	ldr	r3, [pc, #344]	; (8000de0 <HAL_I2S_MspInit+0x1a0>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	4a55      	ldr	r2, [pc, #340]	; (8000de0 <HAL_I2S_MspInit+0x1a0>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c90:	4b53      	ldr	r3, [pc, #332]	; (8000de0 <HAL_I2S_MspInit+0x1a0>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	4b4f      	ldr	r3, [pc, #316]	; (8000de0 <HAL_I2S_MspInit+0x1a0>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	4a4e      	ldr	r2, [pc, #312]	; (8000de0 <HAL_I2S_MspInit+0x1a0>)
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cac:	4b4c      	ldr	r3, [pc, #304]	; (8000de0 <HAL_I2S_MspInit+0x1a0>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000cc8:	2306      	movs	r3, #6
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4844      	ldr	r0, [pc, #272]	; (8000de4 <HAL_I2S_MspInit+0x1a4>)
 8000cd4:	f000 feb0 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin|GPIO_PIN_6;
 8000cd8:	2348      	movs	r3, #72	; 0x48
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce8:	2305      	movs	r3, #5
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	483c      	ldr	r0, [pc, #240]	; (8000de4 <HAL_I2S_MspInit+0x1a4>)
 8000cf4:	f000 fea0 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000cf8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4834      	ldr	r0, [pc, #208]	; (8000de8 <HAL_I2S_MspInit+0x1a8>)
 8000d16:	f000 fe8f 	bl	8001a38 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000d1a:	4b34      	ldr	r3, [pc, #208]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000d1c:	4a34      	ldr	r2, [pc, #208]	; (8000df0 <HAL_I2S_MspInit+0x1b0>)
 8000d1e:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000d20:	4b32      	ldr	r3, [pc, #200]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000d22:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d26:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d28:	4b30      	ldr	r3, [pc, #192]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d34:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d3a:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d42:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4e:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d50:	4b26      	ldr	r3, [pc, #152]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d56:	4b25      	ldr	r3, [pc, #148]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000d5c:	4823      	ldr	r0, [pc, #140]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000d5e:	f000 fafd 	bl	800135c <HAL_DMA_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <HAL_I2S_MspInit+0x12c>
    {
      Error_Handler();
 8000d68:	f7ff feee 	bl	8000b48 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000d70:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d72:	4a1e      	ldr	r2, [pc, #120]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000d7a:	4a1f      	ldr	r2, [pc, #124]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d7c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000d86:	2240      	movs	r2, #64	; 0x40
 8000d88:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d96:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000daa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000db8:	480e      	ldr	r0, [pc, #56]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000dba:	f000 facf 	bl	800135c <HAL_DMA_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_I2S_MspInit+0x188>
    {
      Error_Handler();
 8000dc4:	f7ff fec0 	bl	8000b48 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000dcc:	639a      	str	r2, [r3, #56]	; 0x38
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40003800 	.word	0x40003800
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40020400 	.word	0x40020400
 8000dec:	2000035c 	.word	0x2000035c
 8000df0:	40026058 	.word	0x40026058
 8000df4:	200003bc 	.word	0x200003bc
 8000df8:	40026070 	.word	0x40026070

08000dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_SPI_MspInit+0x84>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d12b      	bne.n	8000e76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_SPI_MspInit+0x88>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e56:	23e0      	movs	r3, #224	; 0xe0
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e66:	2305      	movs	r3, #5
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_SPI_MspInit+0x8c>)
 8000e72:	f000 fde1 	bl	8001a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40013000 	.word	0x40013000
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f8e8 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <DMA1_Stream3_IRQHandler+0x10>)
 8000eee:	f000 fb3b 	bl	8001568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000035c 	.word	0x2000035c

08000efc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <DMA1_Stream4_IRQHandler+0x10>)
 8000f02:	f000 fb31 	bl	8001568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200003bc 	.word	0x200003bc

08000f10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <OTG_FS_IRQHandler+0x10>)
 8000f16:	f002 f8d1 	bl	80030bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000a38 	.word	0x20000a38

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f007 fc12 	bl	800877c <__errno>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20020000 	.word	0x20020000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	20000200 	.word	0x20000200
 8000f8c:	20000e48 	.word	0x20000e48

08000f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <SystemInit+0x28>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <SystemInit+0x28>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SystemInit+0x28>)
 8000fa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000faa:	609a      	str	r2, [r3, #8]
#endif
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fc2:	e003      	b.n	8000fcc <LoopCopyDataInit>

08000fc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fca:	3104      	adds	r1, #4

08000fcc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fcc:	480b      	ldr	r0, [pc, #44]	; (8000ffc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fd4:	d3f6      	bcc.n	8000fc4 <CopyDataInit>
  ldr  r2, =_sbss
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fd8:	e002      	b.n	8000fe0 <LoopFillZerobss>

08000fda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fdc:	f842 3b04 	str.w	r3, [r2], #4

08000fe0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fe2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fe4:	d3f9      	bcc.n	8000fda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fe6:	f7ff ffd3 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f007 fbcd 	bl	8008788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fac7 	bl	8000580 <main>
  bx  lr    
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ff4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ff8:	08009174 	.word	0x08009174
  ldr  r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001000:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001004:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001008:	20000e44 	.word	0x20000e44

0800100c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <HAL_Init+0x40>)
 800101a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_Init+0x40>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_Init+0x40>)
 8001032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f94d 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	2000      	movs	r0, #0
 8001040:	f000 f808 	bl	8001054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001044:	f7ff fd8c 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023c00 	.word	0x40023c00

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x54>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x58>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f965 	bl	8001342 <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00e      	b.n	80010a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b0f      	cmp	r3, #15
 8001086:	d80a      	bhi.n	800109e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001090:	f000 f92d 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_InitTick+0x5c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000464 	.word	0x20000464

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000464 	.word	0x20000464

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_Delay+0x40>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000008 	.word	0x20000008

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff29 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff3e 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff8e 	bl	800122c <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff31 	bl	800119c <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff feb8 	bl	80010dc <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e099      	b.n	80014ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2202      	movs	r2, #2
 8001384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0201 	bic.w	r2, r2, #1
 8001396:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001398:	e00f      	b.n	80013ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800139a:	f7ff fe9f 	bl	80010dc <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b05      	cmp	r3, #5
 80013a6:	d908      	bls.n	80013ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2220      	movs	r2, #32
 80013ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2203      	movs	r2, #3
 80013b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e078      	b.n	80014ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1e8      	bne.n	800139a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <HAL_DMA_Init+0x158>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4313      	orrs	r3, r2
 800140a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	2b04      	cmp	r3, #4
 8001412:	d107      	bne.n	8001424 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4313      	orrs	r3, r2
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4313      	orrs	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f023 0307 	bic.w	r3, r3, #7
 800143a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4313      	orrs	r3, r2
 8001444:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	2b04      	cmp	r3, #4
 800144c:	d117      	bne.n	800147e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4313      	orrs	r3, r2
 8001456:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00e      	beq.n	800147e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 fa6f 	bl	8001944 <DMA_CheckFifoParam>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2240      	movs	r2, #64	; 0x40
 8001470:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800147a:	2301      	movs	r3, #1
 800147c:	e016      	b.n	80014ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fa26 	bl	80018d8 <DMA_CalcBaseAndBitshift>
 800148c:	4603      	mov	r3, r0
 800148e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001494:	223f      	movs	r2, #63	; 0x3f
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	f010803f 	.word	0xf010803f

080014b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <HAL_DMA_Start_IT+0x26>
 80014da:	2302      	movs	r3, #2
 80014dc:	e040      	b.n	8001560 <HAL_DMA_Start_IT+0xa8>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d12f      	bne.n	8001552 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2202      	movs	r2, #2
 80014f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f9b8 	bl	800187c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001510:	223f      	movs	r2, #63	; 0x3f
 8001512:	409a      	lsls	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0216 	orr.w	r2, r2, #22
 8001526:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0208 	orr.w	r2, r2, #8
 800153e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	e005      	b.n	800155e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800155a:	2302      	movs	r3, #2
 800155c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800155e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001574:	4b92      	ldr	r3, [pc, #584]	; (80017c0 <HAL_DMA_IRQHandler+0x258>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a92      	ldr	r2, [pc, #584]	; (80017c4 <HAL_DMA_IRQHandler+0x25c>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	0a9b      	lsrs	r3, r3, #10
 8001580:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001592:	2208      	movs	r2, #8
 8001594:	409a      	lsls	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d01a      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d013      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0204 	bic.w	r2, r2, #4
 80015ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	2208      	movs	r2, #8
 80015c2:	409a      	lsls	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d8:	2201      	movs	r2, #1
 80015da:	409a      	lsls	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d012      	beq.n	800160a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f6:	2201      	movs	r2, #1
 80015f8:	409a      	lsls	r2, r3
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001602:	f043 0202 	orr.w	r2, r3, #2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	2204      	movs	r2, #4
 8001610:	409a      	lsls	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d012      	beq.n	8001640 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00b      	beq.n	8001640 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162c:	2204      	movs	r2, #4
 800162e:	409a      	lsls	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	f043 0204 	orr.w	r2, r3, #4
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001644:	2210      	movs	r2, #16
 8001646:	409a      	lsls	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d043      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d03c      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	2210      	movs	r2, #16
 8001664:	409a      	lsls	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d018      	beq.n	80016aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d108      	bne.n	8001698 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	2b00      	cmp	r3, #0
 800168c:	d024      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	4798      	blx	r3
 8001696:	e01f      	b.n	80016d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01b      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	4798      	blx	r3
 80016a8:	e016      	b.n	80016d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d107      	bne.n	80016c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0208 	bic.w	r2, r2, #8
 80016c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016dc:	2220      	movs	r2, #32
 80016de:	409a      	lsls	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 808e 	beq.w	8001806 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 8086 	beq.w	8001806 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	2220      	movs	r2, #32
 8001700:	409a      	lsls	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b05      	cmp	r3, #5
 8001710:	d136      	bne.n	8001780 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0216 	bic.w	r2, r2, #22
 8001720:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001730:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <HAL_DMA_IRQHandler+0x1da>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0208 	bic.w	r2, r2, #8
 8001750:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001756:	223f      	movs	r2, #63	; 0x3f
 8001758:	409a      	lsls	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001772:	2b00      	cmp	r3, #0
 8001774:	d07d      	beq.n	8001872 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	4798      	blx	r3
        }
        return;
 800177e:	e078      	b.n	8001872 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d01c      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d108      	bne.n	80017ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d030      	beq.n	8001806 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	4798      	blx	r3
 80017ac:	e02b      	b.n	8001806 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d027      	beq.n	8001806 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	4798      	blx	r3
 80017be:	e022      	b.n	8001806 <HAL_DMA_IRQHandler+0x29e>
 80017c0:	20000000 	.word	0x20000000
 80017c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10f      	bne.n	80017f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0210 	bic.w	r2, r2, #16
 80017e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180a:	2b00      	cmp	r3, #0
 800180c:	d032      	beq.n	8001874 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d022      	beq.n	8001860 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2205      	movs	r2, #5
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0201 	bic.w	r2, r2, #1
 8001830:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3301      	adds	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	429a      	cmp	r2, r3
 800183c:	d307      	bcc.n	800184e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f2      	bne.n	8001832 <HAL_DMA_IRQHandler+0x2ca>
 800184c:	e000      	b.n	8001850 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800184e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	4798      	blx	r3
 8001870:	e000      	b.n	8001874 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001872:	bf00      	nop
    }
  }
}
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop

0800187c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001898:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b40      	cmp	r3, #64	; 0x40
 80018a8:	d108      	bne.n	80018bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018ba:	e007      	b.n	80018cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	60da      	str	r2, [r3, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	3b10      	subs	r3, #16
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <DMA_CalcBaseAndBitshift+0x64>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018f2:	4a13      	ldr	r2, [pc, #76]	; (8001940 <DMA_CalcBaseAndBitshift+0x68>)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d909      	bls.n	800191a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	1d1a      	adds	r2, r3, #4
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	659a      	str	r2, [r3, #88]	; 0x58
 8001918:	e007      	b.n	800192a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001922:	f023 0303 	bic.w	r3, r3, #3
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	aaaaaaab 	.word	0xaaaaaaab
 8001940:	080090c8 	.word	0x080090c8

08001944 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d11f      	bne.n	800199e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d855      	bhi.n	8001a10 <DMA_CheckFifoParam+0xcc>
 8001964:	a201      	add	r2, pc, #4	; (adr r2, 800196c <DMA_CheckFifoParam+0x28>)
 8001966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196a:	bf00      	nop
 800196c:	0800197d 	.word	0x0800197d
 8001970:	0800198f 	.word	0x0800198f
 8001974:	0800197d 	.word	0x0800197d
 8001978:	08001a11 	.word	0x08001a11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d045      	beq.n	8001a14 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800198c:	e042      	b.n	8001a14 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001996:	d13f      	bne.n	8001a18 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800199c:	e03c      	b.n	8001a18 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a6:	d121      	bne.n	80019ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d836      	bhi.n	8001a1c <DMA_CheckFifoParam+0xd8>
 80019ae:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <DMA_CheckFifoParam+0x70>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	080019cb 	.word	0x080019cb
 80019bc:	080019c5 	.word	0x080019c5
 80019c0:	080019dd 	.word	0x080019dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
      break;
 80019c8:	e02f      	b.n	8001a2a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d024      	beq.n	8001a20 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019da:	e021      	b.n	8001a20 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019e4:	d11e      	bne.n	8001a24 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019ea:	e01b      	b.n	8001a24 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d902      	bls.n	80019f8 <DMA_CheckFifoParam+0xb4>
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d003      	beq.n	80019fe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019f6:	e018      	b.n	8001a2a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
      break;
 80019fc:	e015      	b.n	8001a2a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00e      	beq.n	8001a28 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a0e:	e00b      	b.n	8001a28 <DMA_CheckFifoParam+0xe4>
      break;
 8001a10:	bf00      	nop
 8001a12:	e00a      	b.n	8001a2a <DMA_CheckFifoParam+0xe6>
      break;
 8001a14:	bf00      	nop
 8001a16:	e008      	b.n	8001a2a <DMA_CheckFifoParam+0xe6>
      break;
 8001a18:	bf00      	nop
 8001a1a:	e006      	b.n	8001a2a <DMA_CheckFifoParam+0xe6>
      break;
 8001a1c:	bf00      	nop
 8001a1e:	e004      	b.n	8001a2a <DMA_CheckFifoParam+0xe6>
      break;
 8001a20:	bf00      	nop
 8001a22:	e002      	b.n	8001a2a <DMA_CheckFifoParam+0xe6>
      break;   
 8001a24:	bf00      	nop
 8001a26:	e000      	b.n	8001a2a <DMA_CheckFifoParam+0xe6>
      break;
 8001a28:	bf00      	nop
    }
  } 
  
  return status; 
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	e16b      	b.n	8001d2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 815a 	bne.w	8001d26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d00b      	beq.n	8001a92 <HAL_GPIO_Init+0x5a>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a86:	2b11      	cmp	r3, #17
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b12      	cmp	r3, #18
 8001a90:	d130      	bne.n	8001af4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 0201 	and.w	r2, r3, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0xfc>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b12      	cmp	r3, #18
 8001b32:	d123      	bne.n	8001b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	08da      	lsrs	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3208      	adds	r2, #8
 8001b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	69b9      	ldr	r1, [r7, #24]
 8001b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80b4 	beq.w	8001d26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b5f      	ldr	r3, [pc, #380]	; (8001d40 <HAL_GPIO_Init+0x308>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a5e      	ldr	r2, [pc, #376]	; (8001d40 <HAL_GPIO_Init+0x308>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b5c      	ldr	r3, [pc, #368]	; (8001d40 <HAL_GPIO_Init+0x308>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bda:	4a5a      	ldr	r2, [pc, #360]	; (8001d44 <HAL_GPIO_Init+0x30c>)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a51      	ldr	r2, [pc, #324]	; (8001d48 <HAL_GPIO_Init+0x310>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d02b      	beq.n	8001c5e <HAL_GPIO_Init+0x226>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a50      	ldr	r2, [pc, #320]	; (8001d4c <HAL_GPIO_Init+0x314>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d025      	beq.n	8001c5a <HAL_GPIO_Init+0x222>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4f      	ldr	r2, [pc, #316]	; (8001d50 <HAL_GPIO_Init+0x318>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01f      	beq.n	8001c56 <HAL_GPIO_Init+0x21e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4e      	ldr	r2, [pc, #312]	; (8001d54 <HAL_GPIO_Init+0x31c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d019      	beq.n	8001c52 <HAL_GPIO_Init+0x21a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4d      	ldr	r2, [pc, #308]	; (8001d58 <HAL_GPIO_Init+0x320>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0x216>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4c      	ldr	r2, [pc, #304]	; (8001d5c <HAL_GPIO_Init+0x324>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00d      	beq.n	8001c4a <HAL_GPIO_Init+0x212>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4b      	ldr	r2, [pc, #300]	; (8001d60 <HAL_GPIO_Init+0x328>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x20e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4a      	ldr	r2, [pc, #296]	; (8001d64 <HAL_GPIO_Init+0x32c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_Init+0x20a>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e00e      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c42:	2308      	movs	r3, #8
 8001c44:	e00c      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c46:	2306      	movs	r3, #6
 8001c48:	e00a      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	e008      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c4e:	2304      	movs	r3, #4
 8001c50:	e006      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c52:	2303      	movs	r3, #3
 8001c54:	e004      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <HAL_GPIO_Init+0x228>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f002 0203 	and.w	r2, r2, #3
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	4093      	lsls	r3, r2
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c70:	4934      	ldr	r1, [pc, #208]	; (8001d44 <HAL_GPIO_Init+0x30c>)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca2:	4a31      	ldr	r2, [pc, #196]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ccc:	4a26      	ldr	r2, [pc, #152]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b0f      	cmp	r3, #15
 8001d30:	f67f ae90 	bls.w	8001a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	3724      	adds	r7, #36	; 0x24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40021c00 	.word	0x40021c00
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e11f      	b.n	8001ff2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe fef2 	bl	8000bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2224      	movs	r2, #36	; 0x24
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e04:	f002 fdc8 	bl	8004998 <HAL_RCC_GetPCLK1Freq>
 8001e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4a7b      	ldr	r2, [pc, #492]	; (8001ffc <HAL_I2C_Init+0x25c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d807      	bhi.n	8001e24 <HAL_I2C_Init+0x84>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4a7a      	ldr	r2, [pc, #488]	; (8002000 <HAL_I2C_Init+0x260>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	bf94      	ite	ls
 8001e1c:	2301      	movls	r3, #1
 8001e1e:	2300      	movhi	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	e006      	b.n	8001e32 <HAL_I2C_Init+0x92>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a77      	ldr	r2, [pc, #476]	; (8002004 <HAL_I2C_Init+0x264>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	bf94      	ite	ls
 8001e2c:	2301      	movls	r3, #1
 8001e2e:	2300      	movhi	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0db      	b.n	8001ff2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4a72      	ldr	r2, [pc, #456]	; (8002008 <HAL_I2C_Init+0x268>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	0c9b      	lsrs	r3, r3, #18
 8001e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a64      	ldr	r2, [pc, #400]	; (8001ffc <HAL_I2C_Init+0x25c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d802      	bhi.n	8001e74 <HAL_I2C_Init+0xd4>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3301      	adds	r3, #1
 8001e72:	e009      	b.n	8001e88 <HAL_I2C_Init+0xe8>
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e7a:	fb02 f303 	mul.w	r3, r2, r3
 8001e7e:	4a63      	ldr	r2, [pc, #396]	; (800200c <HAL_I2C_Init+0x26c>)
 8001e80:	fba2 2303 	umull	r2, r3, r2, r3
 8001e84:	099b      	lsrs	r3, r3, #6
 8001e86:	3301      	adds	r3, #1
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4956      	ldr	r1, [pc, #344]	; (8001ffc <HAL_I2C_Init+0x25c>)
 8001ea4:	428b      	cmp	r3, r1
 8001ea6:	d80d      	bhi.n	8001ec4 <HAL_I2C_Init+0x124>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e59      	subs	r1, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	bf38      	it	cc
 8001ec0:	2304      	movcc	r3, #4
 8001ec2:	e04f      	b.n	8001f64 <HAL_I2C_Init+0x1c4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d111      	bne.n	8001ef0 <HAL_I2C_Init+0x150>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e58      	subs	r0, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	e012      	b.n	8001f16 <HAL_I2C_Init+0x176>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1e58      	subs	r0, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	0099      	lsls	r1, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Init+0x17e>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e022      	b.n	8001f64 <HAL_I2C_Init+0x1c4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10e      	bne.n	8001f44 <HAL_I2C_Init+0x1a4>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1e58      	subs	r0, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	440b      	add	r3, r1
 8001f34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f38:	3301      	adds	r3, #1
 8001f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f42:	e00f      	b.n	8001f64 <HAL_I2C_Init+0x1c4>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1e58      	subs	r0, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	0099      	lsls	r1, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	6809      	ldr	r1, [r1, #0]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6911      	ldr	r1, [r2, #16]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68d2      	ldr	r2, [r2, #12]
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	000186a0 	.word	0x000186a0
 8002000:	001e847f 	.word	0x001e847f
 8002004:	003d08ff 	.word	0x003d08ff
 8002008:	431bde83 	.word	0x431bde83
 800200c:	10624dd3 	.word	0x10624dd3

08002010 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e128      	b.n	8002274 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a90      	ldr	r2, [pc, #576]	; (800227c <HAL_I2S_Init+0x26c>)
 800203a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7fe fdff 	bl	8000c40 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2202      	movs	r2, #2
 8002046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002058:	f023 030f 	bic.w	r3, r3, #15
 800205c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2202      	movs	r2, #2
 8002064:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d060      	beq.n	8002130 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002076:	2310      	movs	r3, #16
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e001      	b.n	8002080 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800207c:	2320      	movs	r3, #32
 800207e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b20      	cmp	r3, #32
 8002086:	d802      	bhi.n	800208e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800208e:	2001      	movs	r0, #1
 8002090:	f002 fd78 	bl	8004b84 <HAL_RCCEx_GetPeriphCLKFreq>
 8002094:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800209e:	d125      	bne.n	80020ec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d010      	beq.n	80020ca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	461a      	mov	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	3305      	adds	r3, #5
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	e01f      	b.n	800210a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	461a      	mov	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	3305      	adds	r3, #5
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e00e      	b.n	800210a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	461a      	mov	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	fbb2 f3f3 	udiv	r3, r2, r3
 8002106:	3305      	adds	r3, #5
 8002108:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4a5c      	ldr	r2, [pc, #368]	; (8002280 <HAL_I2S_Init+0x270>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	08db      	lsrs	r3, r3, #3
 8002114:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	e003      	b.n	8002138 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002130:	2302      	movs	r3, #2
 8002132:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d902      	bls.n	8002144 <HAL_I2S_Init+0x134>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	2bff      	cmp	r3, #255	; 0xff
 8002142:	d907      	bls.n	8002154 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002148:	f043 0210 	orr.w	r2, r3, #16
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e08f      	b.n	8002274 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	ea42 0103 	orr.w	r1, r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	430a      	orrs	r2, r1
 8002166:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002172:	f023 030f 	bic.w	r3, r3, #15
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6851      	ldr	r1, [r2, #4]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6892      	ldr	r2, [r2, #8]
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68d2      	ldr	r2, [r2, #12]
 8002184:	4311      	orrs	r1, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6992      	ldr	r2, [r2, #24]
 800218a:	430a      	orrs	r2, r1
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002196:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d161      	bne.n	8002264 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a38      	ldr	r2, [pc, #224]	; (8002284 <HAL_I2S_Init+0x274>)
 80021a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a37      	ldr	r2, [pc, #220]	; (8002288 <HAL_I2S_Init+0x278>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_I2S_Init+0x1a4>
 80021b0:	4b36      	ldr	r3, [pc, #216]	; (800228c <HAL_I2S_Init+0x27c>)
 80021b2:	e001      	b.n	80021b8 <HAL_I2S_Init+0x1a8>
 80021b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	4932      	ldr	r1, [pc, #200]	; (8002288 <HAL_I2S_Init+0x278>)
 80021c0:	428a      	cmp	r2, r1
 80021c2:	d101      	bne.n	80021c8 <HAL_I2S_Init+0x1b8>
 80021c4:	4a31      	ldr	r2, [pc, #196]	; (800228c <HAL_I2S_Init+0x27c>)
 80021c6:	e001      	b.n	80021cc <HAL_I2S_Init+0x1bc>
 80021c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80021cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80021d0:	f023 030f 	bic.w	r3, r3, #15
 80021d4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a2b      	ldr	r2, [pc, #172]	; (8002288 <HAL_I2S_Init+0x278>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d101      	bne.n	80021e4 <HAL_I2S_Init+0x1d4>
 80021e0:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_I2S_Init+0x27c>)
 80021e2:	e001      	b.n	80021e8 <HAL_I2S_Init+0x1d8>
 80021e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021e8:	2202      	movs	r2, #2
 80021ea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a25      	ldr	r2, [pc, #148]	; (8002288 <HAL_I2S_Init+0x278>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_I2S_Init+0x1ea>
 80021f6:	4b25      	ldr	r3, [pc, #148]	; (800228c <HAL_I2S_Init+0x27c>)
 80021f8:	e001      	b.n	80021fe <HAL_I2S_Init+0x1ee>
 80021fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800220a:	d003      	beq.n	8002214 <HAL_I2S_Init+0x204>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d103      	bne.n	800221c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	e001      	b.n	8002220 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	b299      	uxth	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002236:	4303      	orrs	r3, r0
 8002238:	b29b      	uxth	r3, r3
 800223a:	430b      	orrs	r3, r1
 800223c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800223e:	4313      	orrs	r3, r2
 8002240:	b29a      	uxth	r2, r3
 8002242:	897b      	ldrh	r3, [r7, #10]
 8002244:	4313      	orrs	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800224c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a0d      	ldr	r2, [pc, #52]	; (8002288 <HAL_I2S_Init+0x278>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d101      	bne.n	800225c <HAL_I2S_Init+0x24c>
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_I2S_Init+0x27c>)
 800225a:	e001      	b.n	8002260 <HAL_I2S_Init+0x250>
 800225c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002260:	897a      	ldrh	r2, [r7, #10]
 8002262:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	08002387 	.word	0x08002387
 8002280:	cccccccd 	.word	0xcccccccd
 8002284:	080027b1 	.word	0x080027b1
 8002288:	40003800 	.word	0x40003800
 800228c:	40003400 	.word	0x40003400

08002290 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	881a      	ldrh	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	1c9a      	adds	r2, r3, #2
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10e      	bne.n	8002320 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002310:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ffb8 	bl	8002290 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	b292      	uxth	r2, r2
 800233c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	1c9a      	adds	r2, r3, #2
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10e      	bne.n	800237e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800236e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff93 	bl	80022a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d13a      	bne.n	8002418 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d109      	bne.n	80023c0 <I2S_IRQHandler+0x3a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b40      	cmp	r3, #64	; 0x40
 80023b8:	d102      	bne.n	80023c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ffb4 	bl	8002328 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	2b40      	cmp	r3, #64	; 0x40
 80023c8:	d126      	bne.n	8002418 <I2S_IRQHandler+0x92>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d11f      	bne.n	8002418 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f043 0202 	orr.w	r2, r3, #2
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff50 	bl	80022b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b03      	cmp	r3, #3
 8002422:	d136      	bne.n	8002492 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	d109      	bne.n	8002442 <I2S_IRQHandler+0xbc>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002438:	2b80      	cmp	r3, #128	; 0x80
 800243a:	d102      	bne.n	8002442 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff45 	bl	80022cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b08      	cmp	r3, #8
 800244a:	d122      	bne.n	8002492 <I2S_IRQHandler+0x10c>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b20      	cmp	r3, #32
 8002458:	d11b      	bne.n	8002492 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002468:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	f043 0204 	orr.w	r2, r3, #4
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff13 	bl	80022b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002492:	bf00      	nop
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d002      	beq.n	80024c8 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
 80024c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024c6:	e160      	b.n	800278a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80024d4:	887b      	ldrh	r3, [r7, #2]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e15a      	b.n	8002794 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_I2SEx_TransmitReceive_DMA+0x52>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e152      	b.n	8002794 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d002      	beq.n	800251a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b05      	cmp	r3, #5
 8002518:	d114      	bne.n	8002544 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800251a:	887b      	ldrh	r3, [r7, #2]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002524:	887b      	ldrh	r3, [r7, #2]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800252e:	887b      	ldrh	r3, [r7, #2]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002538:	887b      	ldrh	r3, [r7, #2]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	865a      	strh	r2, [r3, #50]	; 0x32
 8002542:	e00b      	b.n	800255c <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	887a      	ldrh	r2, [r7, #2]
 800254e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	887a      	ldrh	r2, [r7, #2]
 800255a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2205      	movs	r2, #5
 8002566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	4a8b      	ldr	r2, [pc, #556]	; (800279c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002570:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002576:	4a8a      	ldr	r2, [pc, #552]	; (80027a0 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002578:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257e:	4a89      	ldr	r2, [pc, #548]	; (80027a4 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002580:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	4a85      	ldr	r2, [pc, #532]	; (800279c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002588:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	4a84      	ldr	r2, [pc, #528]	; (80027a0 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002590:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	4a83      	ldr	r2, [pc, #524]	; (80027a4 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002598:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a4:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ac:	d002      	beq.n	80025b4 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d16b      	bne.n	800268c <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a79      	ldr	r2, [pc, #484]	; (80027a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80025c6:	4b79      	ldr	r3, [pc, #484]	; (80027ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80025c8:	e001      	b.n	80025ce <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80025ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025ce:	330c      	adds	r3, #12
 80025d0:	4619      	mov	r1, r3
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80025da:	b29b      	uxth	r3, r3
 80025dc:	f7fe ff6c 	bl	80014b8 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a70      	ldr	r2, [pc, #448]	; (80027a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d101      	bne.n	80025ee <HAL_I2SEx_TransmitReceive_DMA+0x152>
 80025ea:	4b70      	ldr	r3, [pc, #448]	; (80027ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80025ec:	e001      	b.n	80025f2 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 80025ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	496b      	ldr	r1, [pc, #428]	; (80027a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80025fa:	428b      	cmp	r3, r1
 80025fc:	d101      	bne.n	8002602 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 80025fe:	4b6b      	ldr	r3, [pc, #428]	; (80027ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002600:	e001      	b.n	8002606 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002602:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800260c:	f107 0308 	add.w	r3, r7, #8
 8002610:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	330c      	adds	r3, #12
 8002620:	461a      	mov	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	b29b      	uxth	r3, r3
 8002628:	f7fe ff46 	bl	80014b8 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0202 	orr.w	r2, r2, #2
 800263a:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264a:	f000 809e 	beq.w	800278a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a55      	ldr	r2, [pc, #340]	; (80027a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d101      	bne.n	800265c <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002658:	4b54      	ldr	r3, [pc, #336]	; (80027ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800265a:	e001      	b.n	8002660 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 800265c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4950      	ldr	r1, [pc, #320]	; (80027a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002668:	428b      	cmp	r3, r1
 800266a:	d101      	bne.n	8002670 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 800266c:	4b4f      	ldr	r3, [pc, #316]	; (80027ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800266e:	e001      	b.n	8002674 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002674:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002678:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69da      	ldr	r2, [r3, #28]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002688:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800268a:	e07e      	b.n	800278a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800269a:	d10a      	bne.n	80026b2 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800269c:	2300      	movs	r3, #0
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6819      	ldr	r1, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a38      	ldr	r2, [pc, #224]	; (80027a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80026ca:	4b38      	ldr	r3, [pc, #224]	; (80027ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80026cc:	e001      	b.n	80026d2 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80026ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026d2:	330c      	adds	r3, #12
 80026d4:	461a      	mov	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f7fe feec 	bl	80014b8 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a30      	ldr	r2, [pc, #192]	; (80027a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_I2SEx_TransmitReceive_DMA+0x252>
 80026ea:	4b30      	ldr	r3, [pc, #192]	; (80027ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80026ec:	e001      	b.n	80026f2 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 80026ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	492b      	ldr	r1, [pc, #172]	; (80027a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80026fa:	428b      	cmp	r3, r1
 80026fc:	d101      	bne.n	8002702 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002700:	e001      	b.n	8002706 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002702:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002706:	f042 0202 	orr.w	r2, r2, #2
 800270a:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	330c      	adds	r3, #12
 800271a:	4619      	mov	r1, r3
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002724:	b29b      	uxth	r3, r3
 8002726:	f7fe fec7 	bl	80014b8 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0201 	orr.w	r2, r2, #1
 8002738:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002748:	d01e      	beq.n	8002788 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a16      	ldr	r2, [pc, #88]	; (80027a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d101      	bne.n	8002758 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002754:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002756:	e001      	b.n	800275c <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002758:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4911      	ldr	r1, [pc, #68]	; (80027a8 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002764:	428b      	cmp	r3, r1
 8002766:	d101      	bne.n	800276c <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002768:	4b10      	ldr	r3, [pc, #64]	; (80027ac <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800276a:	e001      	b.n	8002770 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 800276c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002774:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69da      	ldr	r2, [r3, #28]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002784:	61da      	str	r2, [r3, #28]
 8002786:	e000      	b.n	800278a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002788:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002792:	7ffb      	ldrb	r3, [r7, #31]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	08002a59 	.word	0x08002a59
 80027a0:	08002a75 	.word	0x08002a75
 80027a4:	08002ba5 	.word	0x08002ba5
 80027a8:	40003800 	.word	0x40003800
 80027ac:	40003400 	.word	0x40003400

080027b0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4aa2      	ldr	r2, [pc, #648]	; (8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80027ca:	4ba2      	ldr	r3, [pc, #648]	; (8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027cc:	e001      	b.n	80027d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80027ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a9b      	ldr	r2, [pc, #620]	; (8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d101      	bne.n	80027ec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80027e8:	4b9a      	ldr	r3, [pc, #616]	; (8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027ea:	e001      	b.n	80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80027ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027fc:	d004      	beq.n	8002808 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 8099 	bne.w	800293a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b02      	cmp	r3, #2
 8002810:	d107      	bne.n	8002822 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fa01 	bl	8002c24 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b01      	cmp	r3, #1
 800282a:	d107      	bne.n	800283c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 faa4 	bl	8002d84 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	2b40      	cmp	r3, #64	; 0x40
 8002844:	d13a      	bne.n	80028bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d035      	beq.n	80028bc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a7e      	ldr	r2, [pc, #504]	; (8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800285a:	4b7e      	ldr	r3, [pc, #504]	; (8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800285c:	e001      	b.n	8002862 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800285e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4979      	ldr	r1, [pc, #484]	; (8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800286a:	428b      	cmp	r3, r1
 800286c:	d101      	bne.n	8002872 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800286e:	4b79      	ldr	r3, [pc, #484]	; (8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002870:	e001      	b.n	8002876 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002876:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800287a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800288a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f043 0202 	orr.w	r2, r3, #2
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff fcfe 	bl	80022b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	f040 80be 	bne.w	8002a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80b8 	beq.w	8002a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028e2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a59      	ldr	r2, [pc, #356]	; (8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80028ee:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80028f0:	e001      	b.n	80028f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80028f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4954      	ldr	r1, [pc, #336]	; (8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80028fe:	428b      	cmp	r3, r1
 8002900:	d101      	bne.n	8002906 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002902:	4b54      	ldr	r3, [pc, #336]	; (8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002904:	e001      	b.n	800290a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800290a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800290e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002910:	2300      	movs	r3, #0
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f043 0204 	orr.w	r2, r3, #4
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff fcc0 	bl	80022b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002938:	e084      	b.n	8002a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b02      	cmp	r3, #2
 8002942:	d107      	bne.n	8002954 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f99a 	bl	8002c88 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f9d9 	bl	8002d20 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d12f      	bne.n	80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02a      	beq.n	80029d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002990:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a2e      	ldr	r2, [pc, #184]	; (8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d101      	bne.n	80029a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800299c:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800299e:	e001      	b.n	80029a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80029a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4929      	ldr	r1, [pc, #164]	; (8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029ac:	428b      	cmp	r3, r1
 80029ae:	d101      	bne.n	80029b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80029b0:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029b2:	e001      	b.n	80029b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80029b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	f043 0202 	orr.w	r2, r3, #2
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff fc70 	bl	80022b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d131      	bne.n	8002a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d02c      	beq.n	8002a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80029f6:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029f8:	e001      	b.n	80029fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80029fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4912      	ldr	r1, [pc, #72]	; (8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a06:	428b      	cmp	r3, r1
 8002a08:	d101      	bne.n	8002a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a0c:	e001      	b.n	8002a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002a0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a16:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a26:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	f043 0204 	orr.w	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff fc3b 	bl	80022b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a42:	e000      	b.n	8002a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a44:	bf00      	nop
}
 8002a46:	bf00      	nop
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40003800 	.word	0x40003800
 8002a54:	40003400 	.word	0x40003400

08002a58 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f7fd fdd6 	bl	8000618 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 8084 	bne.w	8002b94 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d13c      	bne.n	8002b10 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa4:	d006      	beq.n	8002ab4 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d116      	bne.n	8002ae2 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a38      	ldr	r2, [pc, #224]	; (8002b9c <I2SEx_TxRxDMACplt+0x128>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d101      	bne.n	8002ac2 <I2SEx_TxRxDMACplt+0x4e>
 8002abe:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <I2SEx_TxRxDMACplt+0x12c>)
 8002ac0:	e001      	b.n	8002ac6 <I2SEx_TxRxDMACplt+0x52>
 8002ac2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4933      	ldr	r1, [pc, #204]	; (8002b9c <I2SEx_TxRxDMACplt+0x128>)
 8002ace:	428b      	cmp	r3, r1
 8002ad0:	d101      	bne.n	8002ad6 <I2SEx_TxRxDMACplt+0x62>
 8002ad2:	4b33      	ldr	r3, [pc, #204]	; (8002ba0 <I2SEx_TxRxDMACplt+0x12c>)
 8002ad4:	e001      	b.n	8002ada <I2SEx_TxRxDMACplt+0x66>
 8002ad6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ada:	f022 0201 	bic.w	r2, r2, #1
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	e007      	b.n	8002af2 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0201 	bic.w	r2, r2, #1
 8002af0:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f7fd fdb2 	bl	8000674 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d13c      	bne.n	8002b94 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b28:	d006      	beq.n	8002b38 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d108      	bne.n	8002b4a <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0202 	bic.w	r2, r2, #2
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	e015      	b.n	8002b76 <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <I2SEx_TxRxDMACplt+0x128>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d101      	bne.n	8002b58 <I2SEx_TxRxDMACplt+0xe4>
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <I2SEx_TxRxDMACplt+0x12c>)
 8002b56:	e001      	b.n	8002b5c <I2SEx_TxRxDMACplt+0xe8>
 8002b58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	490e      	ldr	r1, [pc, #56]	; (8002b9c <I2SEx_TxRxDMACplt+0x128>)
 8002b64:	428b      	cmp	r3, r1
 8002b66:	d101      	bne.n	8002b6c <I2SEx_TxRxDMACplt+0xf8>
 8002b68:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <I2SEx_TxRxDMACplt+0x12c>)
 8002b6a:	e001      	b.n	8002b70 <I2SEx_TxRxDMACplt+0xfc>
 8002b6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b70:	f022 0202 	bic.w	r2, r2, #2
 8002b74:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7fd fd70 	bl	8000674 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40003800 	.word	0x40003800
 8002ba0:	40003400 	.word	0x40003400

08002ba4 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0203 	bic.w	r2, r2, #3
 8002bc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <I2SEx_TxRxDMAError+0x78>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <I2SEx_TxRxDMAError+0x2c>
 8002bcc:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <I2SEx_TxRxDMAError+0x7c>)
 8002bce:	e001      	b.n	8002bd4 <I2SEx_TxRxDMAError+0x30>
 8002bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4910      	ldr	r1, [pc, #64]	; (8002c1c <I2SEx_TxRxDMAError+0x78>)
 8002bdc:	428b      	cmp	r3, r1
 8002bde:	d101      	bne.n	8002be4 <I2SEx_TxRxDMAError+0x40>
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <I2SEx_TxRxDMAError+0x7c>)
 8002be2:	e001      	b.n	8002be8 <I2SEx_TxRxDMAError+0x44>
 8002be4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002be8:	f022 0203 	bic.w	r2, r2, #3
 8002bec:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f043 0208 	orr.w	r2, r3, #8
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f7ff fb52 	bl	80022b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40003800 	.word	0x40003800
 8002c20:	40003400 	.word	0x40003400

08002c24 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	1c99      	adds	r1, r3, #2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6251      	str	r1, [r2, #36]	; 0x24
 8002c36:	881a      	ldrh	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d113      	bne.n	8002c7e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d106      	bne.n	8002c7e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7fd fcfb 	bl	8000674 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	1c99      	adds	r1, r3, #2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6251      	str	r1, [r2, #36]	; 0x24
 8002c9a:	8819      	ldrh	r1, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1d      	ldr	r2, [pc, #116]	; (8002d18 <I2SEx_TxISR_I2SExt+0x90>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <I2SEx_TxISR_I2SExt+0x22>
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <I2SEx_TxISR_I2SExt+0x94>)
 8002ca8:	e001      	b.n	8002cae <I2SEx_TxISR_I2SExt+0x26>
 8002caa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cae:	460a      	mov	r2, r1
 8002cb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d121      	bne.n	8002d0e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <I2SEx_TxISR_I2SExt+0x90>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <I2SEx_TxISR_I2SExt+0x50>
 8002cd4:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <I2SEx_TxISR_I2SExt+0x94>)
 8002cd6:	e001      	b.n	8002cdc <I2SEx_TxISR_I2SExt+0x54>
 8002cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	490d      	ldr	r1, [pc, #52]	; (8002d18 <I2SEx_TxISR_I2SExt+0x90>)
 8002ce4:	428b      	cmp	r3, r1
 8002ce6:	d101      	bne.n	8002cec <I2SEx_TxISR_I2SExt+0x64>
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <I2SEx_TxISR_I2SExt+0x94>)
 8002cea:	e001      	b.n	8002cf0 <I2SEx_TxISR_I2SExt+0x68>
 8002cec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cf4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d106      	bne.n	8002d0e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7fd fcb3 	bl	8000674 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40003800 	.word	0x40003800
 8002d1c:	40003400 	.word	0x40003400

08002d20 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68d8      	ldr	r0, [r3, #12]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	1c99      	adds	r1, r3, #2
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002d38:	b282      	uxth	r2, r0
 8002d3a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d113      	bne.n	8002d7c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d62:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fd fc7c 	bl	8000674 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a20      	ldr	r2, [pc, #128]	; (8002e14 <I2SEx_RxISR_I2SExt+0x90>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <I2SEx_RxISR_I2SExt+0x16>
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <I2SEx_RxISR_I2SExt+0x94>)
 8002d98:	e001      	b.n	8002d9e <I2SEx_RxISR_I2SExt+0x1a>
 8002d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d9e:	68d8      	ldr	r0, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	1c99      	adds	r1, r3, #2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002daa:	b282      	uxth	r2, r0
 8002dac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d121      	bne.n	8002e0a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <I2SEx_RxISR_I2SExt+0x90>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d101      	bne.n	8002dd4 <I2SEx_RxISR_I2SExt+0x50>
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <I2SEx_RxISR_I2SExt+0x94>)
 8002dd2:	e001      	b.n	8002dd8 <I2SEx_RxISR_I2SExt+0x54>
 8002dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	490d      	ldr	r1, [pc, #52]	; (8002e14 <I2SEx_RxISR_I2SExt+0x90>)
 8002de0:	428b      	cmp	r3, r1
 8002de2:	d101      	bne.n	8002de8 <I2SEx_RxISR_I2SExt+0x64>
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <I2SEx_RxISR_I2SExt+0x94>)
 8002de6:	e001      	b.n	8002dec <I2SEx_RxISR_I2SExt+0x68>
 8002de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002df0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d106      	bne.n	8002e0a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7fd fc35 	bl	8000674 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40003800 	.word	0x40003800
 8002e18:	40003400 	.word	0x40003400

08002e1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1e:	b08f      	sub	sp, #60	; 0x3c
 8002e20:	af0a      	add	r7, sp, #40	; 0x28
 8002e22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e10f      	b.n	800304e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d106      	bne.n	8002e4e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f005 f98d 	bl	8008168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2203      	movs	r2, #3
 8002e52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 f85e 	bl	8004f2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	687e      	ldr	r6, [r7, #4]
 8002e7a:	466d      	mov	r5, sp
 8002e7c:	f106 0410 	add.w	r4, r6, #16
 8002e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e90:	1d33      	adds	r3, r6, #4
 8002e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e94:	6838      	ldr	r0, [r7, #0]
 8002e96:	f001 ff35 	bl	8004d04 <USB_CoreInit>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0d0      	b.n	800304e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 f84c 	bl	8004f50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	73fb      	strb	r3, [r7, #15]
 8002ebc:	e04a      	b.n	8002f54 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	333d      	adds	r3, #61	; 0x3d
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	333c      	adds	r3, #60	; 0x3c
 8002ee2:	7bfa      	ldrb	r2, [r7, #15]
 8002ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	b298      	uxth	r0, r3
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3342      	adds	r3, #66	; 0x42
 8002efa:	4602      	mov	r2, r0
 8002efc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	333f      	adds	r3, #63	; 0x3f
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	3344      	adds	r3, #68	; 0x44
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3348      	adds	r3, #72	; 0x48
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	3350      	adds	r3, #80	; 0x50
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	3301      	adds	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d3af      	bcc.n	8002ebe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]
 8002f62:	e044      	b.n	8002fee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f90:	7bfa      	ldrb	r2, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fd2:	7bfa      	ldrb	r2, [r7, #15]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	3301      	adds	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d3b5      	bcc.n	8002f64 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	687e      	ldr	r6, [r7, #4]
 8003000:	466d      	mov	r5, sp
 8003002:	f106 0410 	add.w	r4, r6, #16
 8003006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800300a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800300e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003012:	e885 0003 	stmia.w	r5, {r0, r1}
 8003016:	1d33      	adds	r3, r6, #4
 8003018:	cb0e      	ldmia	r3, {r1, r2, r3}
 800301a:	6838      	ldr	r0, [r7, #0]
 800301c:	f001 ffc2 	bl	8004fa4 <USB_DevInit>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e00d      	b.n	800304e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f003 f80a 	bl	8006060 <USB_DevDisconnect>

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003056 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_PCD_Start+0x1c>
 800306e:	2302      	movs	r3, #2
 8003070:	e020      	b.n	80030b4 <HAL_PCD_Start+0x5e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	2b01      	cmp	r3, #1
 8003080:	d109      	bne.n	8003096 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003086:	2b01      	cmp	r3, #1
 8003088:	d005      	beq.n	8003096 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f001 ff36 	bl	8004f0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 ffba 	bl	800601e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b08d      	sub	sp, #52	; 0x34
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 f878 	bl	80061c8 <USB_GetMode>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 839d 	bne.w	800381a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f002 ffdc 	bl	80060a2 <USB_ReadInterrupts>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8393 	beq.w	8003818 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f002 ffd3 	bl	80060a2 <USB_ReadInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b02      	cmp	r3, #2
 8003104:	d107      	bne.n	8003116 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f002 0202 	and.w	r2, r2, #2
 8003114:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f002 ffc1 	bl	80060a2 <USB_ReadInterrupts>
 8003120:	4603      	mov	r3, r0
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b10      	cmp	r3, #16
 8003128:	d161      	bne.n	80031ee <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0210 	bic.w	r2, r2, #16
 8003138:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f003 020f 	and.w	r2, r3, #15
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	3304      	adds	r3, #4
 8003158:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	0c5b      	lsrs	r3, r3, #17
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	2b02      	cmp	r3, #2
 8003164:	d124      	bne.n	80031b0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d035      	beq.n	80031de <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800317c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003180:	b29b      	uxth	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	6a38      	ldr	r0, [r7, #32]
 8003186:	f002 fe27 	bl	8005dd8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003196:	441a      	add	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	699a      	ldr	r2, [r3, #24]
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031a8:	441a      	add	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	619a      	str	r2, [r3, #24]
 80031ae:	e016      	b.n	80031de <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	0c5b      	lsrs	r3, r3, #17
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	2b06      	cmp	r3, #6
 80031ba:	d110      	bne.n	80031de <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031c2:	2208      	movs	r2, #8
 80031c4:	4619      	mov	r1, r3
 80031c6:	6a38      	ldr	r0, [r7, #32]
 80031c8:	f002 fe06 	bl	8005dd8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031d8:	441a      	add	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699a      	ldr	r2, [r3, #24]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0210 	orr.w	r2, r2, #16
 80031ec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f002 ff55 	bl	80060a2 <USB_ReadInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003202:	d16e      	bne.n	80032e2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f002 ff5b 	bl	80060c8 <USB_ReadDevAllOutEpInterrupt>
 8003212:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003214:	e062      	b.n	80032dc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d057      	beq.n	80032d0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f002 ff80 	bl	8006130 <USB_ReadDevOutEPInterrupt>
 8003230:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00c      	beq.n	8003256 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003248:	461a      	mov	r2, r3
 800324a:	2301      	movs	r3, #1
 800324c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800324e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fdb1 	bl	8003db8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00c      	beq.n	800327a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326c:	461a      	mov	r2, r3
 800326e:	2308      	movs	r3, #8
 8003270:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003272:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 feab 	bl	8003fd0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003290:	461a      	mov	r2, r3
 8003292:	2310      	movs	r3, #16
 8003294:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ac:	461a      	mov	r2, r3
 80032ae:	2320      	movs	r3, #32
 80032b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d009      	beq.n	80032d0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c8:	461a      	mov	r2, r3
 80032ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	3301      	adds	r3, #1
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d199      	bne.n	8003216 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f002 fedb 	bl	80060a2 <USB_ReadInterrupts>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032f6:	f040 80c0 	bne.w	800347a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f002 fefc 	bl	80060fc <USB_ReadDevAllInEpInterrupt>
 8003304:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800330a:	e0b2      	b.n	8003472 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80a7 	beq.w	8003466 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f002 ff22 	bl	800616c <USB_ReadDevInEPInterrupt>
 8003328:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d057      	beq.n	80033e4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	2201      	movs	r2, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	43db      	mvns	r3, r3
 800334e:	69f9      	ldr	r1, [r7, #28]
 8003350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003354:	4013      	ands	r3, r2
 8003356:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003364:	461a      	mov	r2, r3
 8003366:	2301      	movs	r3, #1
 8003368:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d132      	bne.n	80033d8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3348      	adds	r3, #72	; 0x48
 8003382:	6819      	ldr	r1, [r3, #0]
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4403      	add	r3, r0
 8003392:	3344      	adds	r3, #68	; 0x44
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4419      	add	r1, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4403      	add	r3, r0
 80033a6:	3348      	adds	r3, #72	; 0x48
 80033a8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d113      	bne.n	80033d8 <HAL_PCD_IRQHandler+0x31c>
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	3350      	adds	r3, #80	; 0x50
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d108      	bne.n	80033d8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033d0:	461a      	mov	r2, r3
 80033d2:	2101      	movs	r1, #1
 80033d4:	f002 ff2a 	bl	800622c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	4619      	mov	r1, r3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f004 ff51 	bl	8008286 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d008      	beq.n	8003400 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fa:	461a      	mov	r2, r3
 80033fc:	2308      	movs	r3, #8
 80033fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003416:	461a      	mov	r2, r3
 8003418:	2310      	movs	r3, #16
 800341a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003432:	461a      	mov	r2, r3
 8003434:	2340      	movs	r3, #64	; 0x40
 8003436:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344e:	461a      	mov	r2, r3
 8003450:	2302      	movs	r3, #2
 8003452:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800345e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fc1b 	bl	8003c9c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	3301      	adds	r3, #1
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	2b00      	cmp	r3, #0
 8003476:	f47f af49 	bne.w	800330c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f002 fe0f 	bl	80060a2 <USB_ReadInterrupts>
 8003484:	4603      	mov	r3, r0
 8003486:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800348a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800348e:	d122      	bne.n	80034d6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d108      	bne.n	80034c0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034b6:	2100      	movs	r1, #0
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fe27 	bl	800410c <HAL_PCDEx_LPM_Callback>
 80034be:	e002      	b.n	80034c6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f004 ff57 	bl	8008374 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f002 fde1 	bl	80060a2 <USB_ReadInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ea:	d112      	bne.n	8003512 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d102      	bne.n	8003502 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f004 ff13 	bl	8008328 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003510:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f002 fdc3 	bl	80060a2 <USB_ReadInterrupts>
 800351c:	4603      	mov	r3, r0
 800351e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003526:	f040 80c7 	bne.w	80036b8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2110      	movs	r1, #16
 8003544:	4618      	mov	r0, r3
 8003546:	f001 fe91 	bl	800526c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800354a:	2300      	movs	r3, #0
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800354e:	e056      	b.n	80035fe <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355c:	461a      	mov	r2, r3
 800355e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003562:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003574:	0151      	lsls	r1, r2, #5
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	440a      	add	r2, r1
 800357a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800357e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003582:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003594:	0151      	lsls	r1, r2, #5
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	440a      	add	r2, r1
 800359a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800359e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b0:	461a      	mov	r2, r3
 80035b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035b6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c8:	0151      	lsls	r1, r2, #5
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	440a      	add	r2, r1
 80035ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e8:	0151      	lsls	r1, r2, #5
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	440a      	add	r2, r1
 80035ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035f6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	3301      	adds	r3, #1
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003604:	429a      	cmp	r2, r3
 8003606:	d3a3      	bcc.n	8003550 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003616:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800361a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	2b00      	cmp	r3, #0
 8003622:	d016      	beq.n	8003652 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003634:	f043 030b 	orr.w	r3, r3, #11
 8003638:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800364a:	f043 030b 	orr.w	r3, r3, #11
 800364e:	6453      	str	r3, [r2, #68]	; 0x44
 8003650:	e015      	b.n	800367e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003660:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003664:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003668:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003678:	f043 030b 	orr.w	r3, r3, #11
 800367c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003690:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036a2:	461a      	mov	r2, r3
 80036a4:	f002 fdc2 	bl	800622c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f002 fcf0 	bl	80060a2 <USB_ReadInterrupts>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036cc:	d124      	bne.n	8003718 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f002 fd86 	bl	80061e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f001 fe26 	bl	800532e <USB_GetDevSpeed>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681c      	ldr	r4, [r3, #0]
 80036ee:	f001 f947 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 80036f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	4620      	mov	r0, r4
 80036fe:	f001 fb63 	bl	8004dc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f004 fde7 	bl	80082d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003716:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f002 fcc0 	bl	80060a2 <USB_ReadInterrupts>
 8003722:	4603      	mov	r3, r0
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b08      	cmp	r3, #8
 800372a:	d10a      	bne.n	8003742 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f004 fdc4 	bl	80082ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695a      	ldr	r2, [r3, #20]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f002 0208 	and.w	r2, r2, #8
 8003740:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f002 fcab 	bl	80060a2 <USB_ReadInterrupts>
 800374c:	4603      	mov	r3, r0
 800374e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003756:	d10f      	bne.n	8003778 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	b2db      	uxtb	r3, r3
 8003760:	4619      	mov	r1, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f004 fe26 	bl	80083b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003776:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f002 fc90 	bl	80060a2 <USB_ReadInterrupts>
 8003782:	4603      	mov	r3, r0
 8003784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800378c:	d10f      	bne.n	80037ae <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	b2db      	uxtb	r3, r3
 8003796:	4619      	mov	r1, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f004 fdf9 	bl	8008390 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80037ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f002 fc75 	bl	80060a2 <USB_ReadInterrupts>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c2:	d10a      	bne.n	80037da <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f004 fe07 	bl	80083d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f002 fc5f 	bl	80060a2 <USB_ReadInterrupts>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d115      	bne.n	800381a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f004 fdf7 	bl	80083f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	e000      	b.n	800381a <HAL_PCD_IRQHandler+0x75e>
      return;
 8003818:	bf00      	nop
    }
  }
}
 800381a:	3734      	adds	r7, #52	; 0x34
 800381c:	46bd      	mov	sp, r7
 800381e:	bd90      	pop	{r4, r7, pc}

08003820 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_PCD_SetAddress+0x1a>
 8003836:	2302      	movs	r3, #2
 8003838:	e013      	b.n	8003862 <HAL_PCD_SetAddress+0x42>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	78fa      	ldrb	r2, [r7, #3]
 8003846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f002 fbbd 	bl	8005fd2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	4608      	mov	r0, r1
 8003874:	4611      	mov	r1, r2
 8003876:	461a      	mov	r2, r3
 8003878:	4603      	mov	r3, r0
 800387a:	70fb      	strb	r3, [r7, #3]
 800387c:	460b      	mov	r3, r1
 800387e:	803b      	strh	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003888:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800388c:	2b00      	cmp	r3, #0
 800388e:	da0f      	bge.n	80038b0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	f003 020f 	and.w	r2, r3, #15
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	3338      	adds	r3, #56	; 0x38
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	705a      	strb	r2, [r3, #1]
 80038ae:	e00f      	b.n	80038d0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	f003 020f 	and.w	r2, r3, #15
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	3304      	adds	r3, #4
 80038c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038dc:	883a      	ldrh	r2, [r7, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	78ba      	ldrb	r2, [r7, #2]
 80038e6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	785b      	ldrb	r3, [r3, #1]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038fa:	78bb      	ldrb	r3, [r7, #2]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d102      	bne.n	8003906 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_PCD_EP_Open+0xaa>
 8003910:	2302      	movs	r3, #2
 8003912:	e00e      	b.n	8003932 <HAL_PCD_EP_Open+0xc8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68f9      	ldr	r1, [r7, #12]
 8003922:	4618      	mov	r0, r3
 8003924:	f001 fd28 	bl	8005378 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003930:	7afb      	ldrb	r3, [r7, #11]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	460b      	mov	r3, r1
 8003944:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003946:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800394a:	2b00      	cmp	r3, #0
 800394c:	da0f      	bge.n	800396e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 020f 	and.w	r2, r3, #15
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	3338      	adds	r3, #56	; 0x38
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	3304      	adds	r3, #4
 8003964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	705a      	strb	r2, [r3, #1]
 800396c:	e00f      	b.n	800398e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	f003 020f 	and.w	r2, r3, #15
 8003974:	4613      	mov	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	3304      	adds	r3, #4
 8003986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_PCD_EP_Close+0x6e>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e00e      	b.n	80039c6 <HAL_PCD_EP_Close+0x8c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68f9      	ldr	r1, [r7, #12]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f001 fd66 	bl	8005488 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b086      	sub	sp, #24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	460b      	mov	r3, r1
 80039dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039de:	7afb      	ldrb	r3, [r7, #11]
 80039e0:	f003 020f 	and.w	r2, r3, #15
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	3304      	adds	r3, #4
 80039f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2200      	movs	r2, #0
 8003a08:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a10:	7afb      	ldrb	r3, [r7, #11]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a2a:	7afb      	ldrb	r3, [r7, #11]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6979      	ldr	r1, [r7, #20]
 8003a42:	f002 f841 	bl	8005ac8 <USB_EP0StartXfer>
 8003a46:	e008      	b.n	8003a5a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	6979      	ldr	r1, [r7, #20]
 8003a56:	f001 fdf3 	bl	8005640 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 020f 	and.w	r2, r3, #15
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aa4:	7afb      	ldrb	r3, [r7, #11]
 8003aa6:	f003 020f 	and.w	r2, r3, #15
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	3338      	adds	r3, #56	; 0x38
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3304      	adds	r3, #4
 8003aba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2200      	movs	r2, #0
 8003acc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad4:	7afb      	ldrb	r3, [r7, #11]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d102      	bne.n	8003aee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aee:	7afb      	ldrb	r3, [r7, #11]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d109      	bne.n	8003b0c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	6979      	ldr	r1, [r7, #20]
 8003b06:	f001 ffdf 	bl	8005ac8 <USB_EP0StartXfer>
 8003b0a:	e008      	b.n	8003b1e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	6979      	ldr	r1, [r7, #20]
 8003b1a:	f001 fd91 	bl	8005640 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	f003 020f 	and.w	r2, r3, #15
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d901      	bls.n	8003b46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e050      	b.n	8003be8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	da0f      	bge.n	8003b6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b4e:	78fb      	ldrb	r3, [r7, #3]
 8003b50:	f003 020f 	and.w	r2, r3, #15
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	3338      	adds	r3, #56	; 0x38
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	3304      	adds	r3, #4
 8003b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	705a      	strb	r2, [r3, #1]
 8003b6c:	e00d      	b.n	8003b8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	3304      	adds	r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_PCD_EP_SetStall+0x82>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e01e      	b.n	8003be8 <HAL_PCD_EP_SetStall+0xc0>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68f9      	ldr	r1, [r7, #12]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f002 f936 	bl	8005e2a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	b2d9      	uxtb	r1, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f002 fb27 	bl	800622c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	f003 020f 	and.w	r2, r3, #15
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d901      	bls.n	8003c0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e042      	b.n	8003c94 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	da0f      	bge.n	8003c36 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 020f 	and.w	r2, r3, #15
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	3338      	adds	r3, #56	; 0x38
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	705a      	strb	r2, [r3, #1]
 8003c34:	e00f      	b.n	8003c56 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 020f 	and.w	r2, r3, #15
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_PCD_EP_ClrStall+0x86>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e00e      	b.n	8003c94 <HAL_PCD_EP_ClrStall+0xa4>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f002 f93e 	bl	8005f06 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	3338      	adds	r3, #56	; 0x38
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	699a      	ldr	r2, [r3, #24]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d901      	bls.n	8003cd4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e06c      	b.n	8003dae <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d902      	bls.n	8003cf0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	3303      	adds	r3, #3
 8003cf4:	089b      	lsrs	r3, r3, #2
 8003cf6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cf8:	e02b      	b.n	8003d52 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d902      	bls.n	8003d16 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3303      	adds	r3, #3
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	68d9      	ldr	r1, [r3, #12]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	4603      	mov	r3, r0
 8003d34:	6978      	ldr	r0, [r7, #20]
 8003d36:	f002 f81a 	bl	8005d6e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	441a      	add	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	441a      	add	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d809      	bhi.n	8003d7c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	699a      	ldr	r2, [r3, #24]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d203      	bcs.n	8003d7c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1be      	bne.n	8003cfa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	695a      	ldr	r2, [r3, #20]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d811      	bhi.n	8003dac <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	2201      	movs	r2, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	6939      	ldr	r1, [r7, #16]
 8003da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003da8:	4013      	ands	r3, r2
 8003daa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	333c      	adds	r3, #60	; 0x3c
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	f040 80a0 	bne.w	8003f30 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d015      	beq.n	8003e26 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4a72      	ldr	r2, [pc, #456]	; (8003fc8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	f240 80dd 	bls.w	8003fbe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80d7 	beq.w	8003fbe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e22:	6093      	str	r3, [r2, #8]
 8003e24:	e0cb      	b.n	8003fbe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	2320      	movs	r3, #32
 8003e40:	6093      	str	r3, [r2, #8]
 8003e42:	e0bc      	b.n	8003fbe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f040 80b7 	bne.w	8003fbe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a5d      	ldr	r2, [pc, #372]	; (8003fc8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d90f      	bls.n	8003e78 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e74:	6093      	str	r3, [r2, #8]
 8003e76:	e0a2      	b.n	8003fbe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e8a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	0159      	lsls	r1, r3, #5
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	440b      	add	r3, r1
 8003e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003e9e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4403      	add	r3, r0
 8003eae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003eb2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ec6:	6819      	ldr	r1, [r3, #0]
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4403      	add	r3, r0
 8003ed6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4419      	add	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4403      	add	r3, r0
 8003eec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ef0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d114      	bne.n	8003f22 <PCD_EP_OutXfrComplete_int+0x16a>
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d108      	bne.n	8003f22 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	f002 f985 	bl	800622c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	4619      	mov	r1, r3
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f004 f991 	bl	8008250 <HAL_PCD_DataOutStageCallback>
 8003f2e:	e046      	b.n	8003fbe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <PCD_EP_OutXfrComplete_int+0x214>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d124      	bne.n	8003f82 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f54:	6093      	str	r3, [r2, #8]
 8003f56:	e032      	b.n	8003fbe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2320      	movs	r3, #32
 8003f72:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f004 f968 	bl	8008250 <HAL_PCD_DataOutStageCallback>
 8003f80:	e01d      	b.n	8003fbe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d114      	bne.n	8003fb2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d108      	bne.n	8003fb2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003faa:	461a      	mov	r2, r3
 8003fac:	2100      	movs	r1, #0
 8003fae:	f002 f93d 	bl	800622c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f004 f949 	bl	8008250 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	4f54300a 	.word	0x4f54300a
 8003fcc:	4f54310a 	.word	0x4f54310a

08003fd0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	333c      	adds	r3, #60	; 0x3c
 8003fe8:	3304      	adds	r3, #4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4a15      	ldr	r2, [pc, #84]	; (8004058 <PCD_EP_OutSetupPacket_int+0x88>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d90e      	bls.n	8004024 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800400c:	2b00      	cmp	r3, #0
 800400e:	d009      	beq.n	8004024 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401c:	461a      	mov	r2, r3
 800401e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004022:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f004 f901 	bl	800822c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a0a      	ldr	r2, [pc, #40]	; (8004058 <PCD_EP_OutSetupPacket_int+0x88>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d90c      	bls.n	800404c <PCD_EP_OutSetupPacket_int+0x7c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d108      	bne.n	800404c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004044:	461a      	mov	r2, r3
 8004046:	2101      	movs	r1, #1
 8004048:	f002 f8f0 	bl	800622c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	4f54300a 	.word	0x4f54300a

0800405c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	70fb      	strb	r3, [r7, #3]
 8004068:	4613      	mov	r3, r2
 800406a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d107      	bne.n	800408a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800407a:	883b      	ldrh	r3, [r7, #0]
 800407c:	0419      	lsls	r1, r3, #16
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	430a      	orrs	r2, r1
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
 8004088:	e028      	b.n	80040dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	4413      	add	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004098:	2300      	movs	r3, #0
 800409a:	73fb      	strb	r3, [r7, #15]
 800409c:	e00d      	b.n	80040ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	3340      	adds	r3, #64	; 0x40
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	0c1b      	lsrs	r3, r3, #16
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	4413      	add	r3, r2
 80040b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	3301      	adds	r3, #1
 80040b8:	73fb      	strb	r3, [r7, #15]
 80040ba:	7bfa      	ldrb	r2, [r7, #15]
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	3b01      	subs	r3, #1
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d3ec      	bcc.n	800409e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040c4:	883b      	ldrh	r3, [r7, #0]
 80040c6:	0418      	lsls	r0, r3, #16
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6819      	ldr	r1, [r3, #0]
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	4302      	orrs	r2, r0
 80040d4:	3340      	adds	r3, #64	; 0x40
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	460b      	mov	r3, r1
 80040f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	887a      	ldrh	r2, [r7, #2]
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e25b      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d075      	beq.n	800422e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004142:	4ba3      	ldr	r3, [pc, #652]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b04      	cmp	r3, #4
 800414c:	d00c      	beq.n	8004168 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414e:	4ba0      	ldr	r3, [pc, #640]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004156:	2b08      	cmp	r3, #8
 8004158:	d112      	bne.n	8004180 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800415a:	4b9d      	ldr	r3, [pc, #628]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004162:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004166:	d10b      	bne.n	8004180 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004168:	4b99      	ldr	r3, [pc, #612]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d05b      	beq.n	800422c <HAL_RCC_OscConfig+0x108>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d157      	bne.n	800422c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e236      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004188:	d106      	bne.n	8004198 <HAL_RCC_OscConfig+0x74>
 800418a:	4b91      	ldr	r3, [pc, #580]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a90      	ldr	r2, [pc, #576]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e01d      	b.n	80041d4 <HAL_RCC_OscConfig+0xb0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041a0:	d10c      	bne.n	80041bc <HAL_RCC_OscConfig+0x98>
 80041a2:	4b8b      	ldr	r3, [pc, #556]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a8a      	ldr	r2, [pc, #552]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	4b88      	ldr	r3, [pc, #544]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a87      	ldr	r2, [pc, #540]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e00b      	b.n	80041d4 <HAL_RCC_OscConfig+0xb0>
 80041bc:	4b84      	ldr	r3, [pc, #528]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a83      	ldr	r2, [pc, #524]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80041c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	4b81      	ldr	r3, [pc, #516]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a80      	ldr	r2, [pc, #512]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80041ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d013      	beq.n	8004204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fc ff7e 	bl	80010dc <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fc ff7a 	bl	80010dc <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e1fb      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f6:	4b76      	ldr	r3, [pc, #472]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0xc0>
 8004202:	e014      	b.n	800422e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fc ff6a 	bl	80010dc <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800420c:	f7fc ff66 	bl	80010dc <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e1e7      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800421e:	4b6c      	ldr	r3, [pc, #432]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0xe8>
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d063      	beq.n	8004302 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800423a:	4b65      	ldr	r3, [pc, #404]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004246:	4b62      	ldr	r3, [pc, #392]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800424e:	2b08      	cmp	r3, #8
 8004250:	d11c      	bne.n	800428c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004252:	4b5f      	ldr	r3, [pc, #380]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d116      	bne.n	800428c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425e:	4b5c      	ldr	r3, [pc, #368]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d005      	beq.n	8004276 <HAL_RCC_OscConfig+0x152>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d001      	beq.n	8004276 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e1bb      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004276:	4b56      	ldr	r3, [pc, #344]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4952      	ldr	r1, [pc, #328]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004286:	4313      	orrs	r3, r2
 8004288:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800428a:	e03a      	b.n	8004302 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d020      	beq.n	80042d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004294:	4b4f      	ldr	r3, [pc, #316]	; (80043d4 <HAL_RCC_OscConfig+0x2b0>)
 8004296:	2201      	movs	r2, #1
 8004298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429a:	f7fc ff1f 	bl	80010dc <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042a2:	f7fc ff1b 	bl	80010dc <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e19c      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b4:	4b46      	ldr	r3, [pc, #280]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c0:	4b43      	ldr	r3, [pc, #268]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4940      	ldr	r1, [pc, #256]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	600b      	str	r3, [r1, #0]
 80042d4:	e015      	b.n	8004302 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042d6:	4b3f      	ldr	r3, [pc, #252]	; (80043d4 <HAL_RCC_OscConfig+0x2b0>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fc fefe 	bl	80010dc <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e4:	f7fc fefa 	bl	80010dc <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e17b      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042f6:	4b36      	ldr	r3, [pc, #216]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d030      	beq.n	8004370 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d016      	beq.n	8004344 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004316:	4b30      	ldr	r3, [pc, #192]	; (80043d8 <HAL_RCC_OscConfig+0x2b4>)
 8004318:	2201      	movs	r2, #1
 800431a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431c:	f7fc fede 	bl	80010dc <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004324:	f7fc feda 	bl	80010dc <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e15b      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004336:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0x200>
 8004342:	e015      	b.n	8004370 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004344:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCC_OscConfig+0x2b4>)
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434a:	f7fc fec7 	bl	80010dc <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004352:	f7fc fec3 	bl	80010dc <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e144      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004364:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f0      	bne.n	8004352 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80a0 	beq.w	80044be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10f      	bne.n	80043ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	4a0e      	ldr	r2, [pc, #56]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439c:	6413      	str	r3, [r2, #64]	; 0x40
 800439e:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_OscConfig+0x2b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d121      	bne.n	80043fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ba:	4b08      	ldr	r3, [pc, #32]	; (80043dc <HAL_RCC_OscConfig+0x2b8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a07      	ldr	r2, [pc, #28]	; (80043dc <HAL_RCC_OscConfig+0x2b8>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c6:	f7fc fe89 	bl	80010dc <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043cc:	e011      	b.n	80043f2 <HAL_RCC_OscConfig+0x2ce>
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800
 80043d4:	42470000 	.word	0x42470000
 80043d8:	42470e80 	.word	0x42470e80
 80043dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e0:	f7fc fe7c 	bl	80010dc <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e0fd      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	4b81      	ldr	r3, [pc, #516]	; (80045f8 <HAL_RCC_OscConfig+0x4d4>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d106      	bne.n	8004414 <HAL_RCC_OscConfig+0x2f0>
 8004406:	4b7d      	ldr	r3, [pc, #500]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	4a7c      	ldr	r2, [pc, #496]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6713      	str	r3, [r2, #112]	; 0x70
 8004412:	e01c      	b.n	800444e <HAL_RCC_OscConfig+0x32a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b05      	cmp	r3, #5
 800441a:	d10c      	bne.n	8004436 <HAL_RCC_OscConfig+0x312>
 800441c:	4b77      	ldr	r3, [pc, #476]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	4a76      	ldr	r2, [pc, #472]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 8004422:	f043 0304 	orr.w	r3, r3, #4
 8004426:	6713      	str	r3, [r2, #112]	; 0x70
 8004428:	4b74      	ldr	r3, [pc, #464]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442c:	4a73      	ldr	r2, [pc, #460]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6713      	str	r3, [r2, #112]	; 0x70
 8004434:	e00b      	b.n	800444e <HAL_RCC_OscConfig+0x32a>
 8004436:	4b71      	ldr	r3, [pc, #452]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	4a70      	ldr	r2, [pc, #448]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	6713      	str	r3, [r2, #112]	; 0x70
 8004442:	4b6e      	ldr	r3, [pc, #440]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004446:	4a6d      	ldr	r2, [pc, #436]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 8004448:	f023 0304 	bic.w	r3, r3, #4
 800444c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d015      	beq.n	8004482 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004456:	f7fc fe41 	bl	80010dc <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445c:	e00a      	b.n	8004474 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800445e:	f7fc fe3d 	bl	80010dc <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	f241 3288 	movw	r2, #5000	; 0x1388
 800446c:	4293      	cmp	r3, r2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e0bc      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	4b61      	ldr	r3, [pc, #388]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0ee      	beq.n	800445e <HAL_RCC_OscConfig+0x33a>
 8004480:	e014      	b.n	80044ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004482:	f7fc fe2b 	bl	80010dc <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004488:	e00a      	b.n	80044a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800448a:	f7fc fe27 	bl	80010dc <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	f241 3288 	movw	r2, #5000	; 0x1388
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e0a6      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a0:	4b56      	ldr	r3, [pc, #344]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1ee      	bne.n	800448a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d105      	bne.n	80044be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b2:	4b52      	ldr	r3, [pc, #328]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	4a51      	ldr	r2, [pc, #324]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 80044b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 8092 	beq.w	80045ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044c8:	4b4c      	ldr	r3, [pc, #304]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 030c 	and.w	r3, r3, #12
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d05c      	beq.n	800458e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d141      	bne.n	8004560 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044dc:	4b48      	ldr	r3, [pc, #288]	; (8004600 <HAL_RCC_OscConfig+0x4dc>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e2:	f7fc fdfb 	bl	80010dc <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ea:	f7fc fdf7 	bl	80010dc <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e078      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fc:	4b3f      	ldr	r3, [pc, #252]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1f0      	bne.n	80044ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69da      	ldr	r2, [r3, #28]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	019b      	lsls	r3, r3, #6
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	3b01      	subs	r3, #1
 8004522:	041b      	lsls	r3, r3, #16
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	061b      	lsls	r3, r3, #24
 800452c:	4933      	ldr	r1, [pc, #204]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 800452e:	4313      	orrs	r3, r2
 8004530:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004532:	4b33      	ldr	r3, [pc, #204]	; (8004600 <HAL_RCC_OscConfig+0x4dc>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004538:	f7fc fdd0 	bl	80010dc <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004540:	f7fc fdcc 	bl	80010dc <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e04d      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004552:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x41c>
 800455e:	e045      	b.n	80045ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004560:	4b27      	ldr	r3, [pc, #156]	; (8004600 <HAL_RCC_OscConfig+0x4dc>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004566:	f7fc fdb9 	bl	80010dc <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800456e:	f7fc fdb5 	bl	80010dc <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e036      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004580:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f0      	bne.n	800456e <HAL_RCC_OscConfig+0x44a>
 800458c:	e02e      	b.n	80045ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e029      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800459a:	4b18      	ldr	r3, [pc, #96]	; (80045fc <HAL_RCC_OscConfig+0x4d8>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d11c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d115      	bne.n	80045e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045c2:	4013      	ands	r3, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d10d      	bne.n	80045e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d106      	bne.n	80045e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40007000 	.word	0x40007000
 80045fc:	40023800 	.word	0x40023800
 8004600:	42470060 	.word	0x42470060

08004604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0cc      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004618:	4b68      	ldr	r3, [pc, #416]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d90c      	bls.n	8004640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004626:	4b65      	ldr	r3, [pc, #404]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800462e:	4b63      	ldr	r3, [pc, #396]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0b8      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d020      	beq.n	800468e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004658:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004670:	4b53      	ldr	r3, [pc, #332]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4a52      	ldr	r2, [pc, #328]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800467a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800467c:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	494d      	ldr	r1, [pc, #308]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d044      	beq.n	8004724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b47      	ldr	r3, [pc, #284]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d119      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e07f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d003      	beq.n	80046c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d107      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	4b3f      	ldr	r3, [pc, #252]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e06f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d2:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e067      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e2:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f023 0203 	bic.w	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4934      	ldr	r1, [pc, #208]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f4:	f7fc fcf2 	bl	80010dc <HAL_GetTick>
 80046f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046fc:	f7fc fcee 	bl	80010dc <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	; 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e04f      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 020c 	and.w	r2, r3, #12
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	429a      	cmp	r2, r3
 8004722:	d1eb      	bne.n	80046fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004724:	4b25      	ldr	r3, [pc, #148]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 030f 	and.w	r3, r3, #15
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d20c      	bcs.n	800474c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	4b22      	ldr	r3, [pc, #136]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473a:	4b20      	ldr	r3, [pc, #128]	; (80047bc <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e032      	b.n	80047b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4916      	ldr	r1, [pc, #88]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004776:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	490e      	ldr	r1, [pc, #56]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800478a:	f000 f821 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 800478e:	4601      	mov	r1, r0
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <HAL_RCC_ClockConfig+0x1c0>)
 800479c:	5cd3      	ldrb	r3, [r2, r3]
 800479e:	fa21 f303 	lsr.w	r3, r1, r3
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <HAL_RCC_ClockConfig+0x1c8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fc fc52 	bl	8001054 <HAL_InitTick>

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40023c00 	.word	0x40023c00
 80047c0:	40023800 	.word	0x40023800
 80047c4:	080090b0 	.word	0x080090b0
 80047c8:	20000000 	.word	0x20000000
 80047cc:	20000004 	.word	0x20000004

080047d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	607b      	str	r3, [r7, #4]
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	2300      	movs	r3, #0
 80047e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047e6:	4b63      	ldr	r3, [pc, #396]	; (8004974 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d007      	beq.n	8004802 <HAL_RCC_GetSysClockFreq+0x32>
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d008      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x38>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f040 80b4 	bne.w	8004964 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047fc:	4b5e      	ldr	r3, [pc, #376]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047fe:	60bb      	str	r3, [r7, #8]
       break;
 8004800:	e0b3      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004802:	4b5e      	ldr	r3, [pc, #376]	; (800497c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004804:	60bb      	str	r3, [r7, #8]
      break;
 8004806:	e0b0      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004808:	4b5a      	ldr	r3, [pc, #360]	; (8004974 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004810:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004812:	4b58      	ldr	r3, [pc, #352]	; (8004974 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d04a      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800481e:	4b55      	ldr	r3, [pc, #340]	; (8004974 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	f04f 0400 	mov.w	r4, #0
 8004828:	f240 11ff 	movw	r1, #511	; 0x1ff
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	ea03 0501 	and.w	r5, r3, r1
 8004834:	ea04 0602 	and.w	r6, r4, r2
 8004838:	4629      	mov	r1, r5
 800483a:	4632      	mov	r2, r6
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	f04f 0400 	mov.w	r4, #0
 8004844:	0154      	lsls	r4, r2, #5
 8004846:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800484a:	014b      	lsls	r3, r1, #5
 800484c:	4619      	mov	r1, r3
 800484e:	4622      	mov	r2, r4
 8004850:	1b49      	subs	r1, r1, r5
 8004852:	eb62 0206 	sbc.w	r2, r2, r6
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	f04f 0400 	mov.w	r4, #0
 800485e:	0194      	lsls	r4, r2, #6
 8004860:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004864:	018b      	lsls	r3, r1, #6
 8004866:	1a5b      	subs	r3, r3, r1
 8004868:	eb64 0402 	sbc.w	r4, r4, r2
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	00e2      	lsls	r2, r4, #3
 8004876:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800487a:	00d9      	lsls	r1, r3, #3
 800487c:	460b      	mov	r3, r1
 800487e:	4614      	mov	r4, r2
 8004880:	195b      	adds	r3, r3, r5
 8004882:	eb44 0406 	adc.w	r4, r4, r6
 8004886:	f04f 0100 	mov.w	r1, #0
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	0262      	lsls	r2, r4, #9
 8004890:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004894:	0259      	lsls	r1, r3, #9
 8004896:	460b      	mov	r3, r1
 8004898:	4614      	mov	r4, r2
 800489a:	4618      	mov	r0, r3
 800489c:	4621      	mov	r1, r4
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f04f 0400 	mov.w	r4, #0
 80048a4:	461a      	mov	r2, r3
 80048a6:	4623      	mov	r3, r4
 80048a8:	f7fb fcea 	bl	8000280 <__aeabi_uldivmod>
 80048ac:	4603      	mov	r3, r0
 80048ae:	460c      	mov	r4, r1
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	e049      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b4:	4b2f      	ldr	r3, [pc, #188]	; (8004974 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	099b      	lsrs	r3, r3, #6
 80048ba:	f04f 0400 	mov.w	r4, #0
 80048be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	ea03 0501 	and.w	r5, r3, r1
 80048ca:	ea04 0602 	and.w	r6, r4, r2
 80048ce:	4629      	mov	r1, r5
 80048d0:	4632      	mov	r2, r6
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	f04f 0400 	mov.w	r4, #0
 80048da:	0154      	lsls	r4, r2, #5
 80048dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048e0:	014b      	lsls	r3, r1, #5
 80048e2:	4619      	mov	r1, r3
 80048e4:	4622      	mov	r2, r4
 80048e6:	1b49      	subs	r1, r1, r5
 80048e8:	eb62 0206 	sbc.w	r2, r2, r6
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	f04f 0400 	mov.w	r4, #0
 80048f4:	0194      	lsls	r4, r2, #6
 80048f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80048fa:	018b      	lsls	r3, r1, #6
 80048fc:	1a5b      	subs	r3, r3, r1
 80048fe:	eb64 0402 	sbc.w	r4, r4, r2
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	00e2      	lsls	r2, r4, #3
 800490c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004910:	00d9      	lsls	r1, r3, #3
 8004912:	460b      	mov	r3, r1
 8004914:	4614      	mov	r4, r2
 8004916:	195b      	adds	r3, r3, r5
 8004918:	eb44 0406 	adc.w	r4, r4, r6
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	02a2      	lsls	r2, r4, #10
 8004926:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800492a:	0299      	lsls	r1, r3, #10
 800492c:	460b      	mov	r3, r1
 800492e:	4614      	mov	r4, r2
 8004930:	4618      	mov	r0, r3
 8004932:	4621      	mov	r1, r4
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f04f 0400 	mov.w	r4, #0
 800493a:	461a      	mov	r2, r3
 800493c:	4623      	mov	r3, r4
 800493e:	f7fb fc9f 	bl	8000280 <__aeabi_uldivmod>
 8004942:	4603      	mov	r3, r0
 8004944:	460c      	mov	r4, r1
 8004946:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	3301      	adds	r3, #1
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	60bb      	str	r3, [r7, #8]
      break;
 8004962:	e002      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004964:	4b04      	ldr	r3, [pc, #16]	; (8004978 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004966:	60bb      	str	r3, [r7, #8]
      break;
 8004968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800496a:	68bb      	ldr	r3, [r7, #8]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004974:	40023800 	.word	0x40023800
 8004978:	00f42400 	.word	0x00f42400
 800497c:	007a1200 	.word	0x007a1200

08004980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004984:	4b03      	ldr	r3, [pc, #12]	; (8004994 <HAL_RCC_GetHCLKFreq+0x14>)
 8004986:	681b      	ldr	r3, [r3, #0]
}
 8004988:	4618      	mov	r0, r3
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000000 	.word	0x20000000

08004998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800499c:	f7ff fff0 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 80049a0:	4601      	mov	r1, r0
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	0a9b      	lsrs	r3, r3, #10
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	4a03      	ldr	r2, [pc, #12]	; (80049bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ae:	5cd3      	ldrb	r3, [r2, r3]
 80049b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40023800 	.word	0x40023800
 80049bc:	080090c0 	.word	0x080090c0

080049c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d105      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d035      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049e8:	4b62      	ldr	r3, [pc, #392]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049ee:	f7fc fb75 	bl	80010dc <HAL_GetTick>
 80049f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049f6:	f7fc fb71 	bl	80010dc <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e0b0      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a08:	4b5b      	ldr	r3, [pc, #364]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f0      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	019a      	lsls	r2, r3, #6
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	071b      	lsls	r3, r3, #28
 8004a20:	4955      	ldr	r1, [pc, #340]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a28:	4b52      	ldr	r3, [pc, #328]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a2e:	f7fc fb55 	bl	80010dc <HAL_GetTick>
 8004a32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a34:	e008      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a36:	f7fc fb51 	bl	80010dc <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e090      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a48:	4b4b      	ldr	r3, [pc, #300]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f0      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8083 	beq.w	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	4b44      	ldr	r3, [pc, #272]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	4a43      	ldr	r2, [pc, #268]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a70:	6413      	str	r3, [r2, #64]	; 0x40
 8004a72:	4b41      	ldr	r3, [pc, #260]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a7e:	4b3f      	ldr	r3, [pc, #252]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a3e      	ldr	r2, [pc, #248]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a8a:	f7fc fb27 	bl	80010dc <HAL_GetTick>
 8004a8e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a92:	f7fc fb23 	bl	80010dc <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e062      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004aa4:	4b35      	ldr	r3, [pc, #212]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ab0:	4b31      	ldr	r3, [pc, #196]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02f      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d028      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ace:	4b2a      	ldr	r3, [pc, #168]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ad8:	4b29      	ldr	r3, [pc, #164]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ade:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ae4:	4a24      	ldr	r2, [pc, #144]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004aea:	4b23      	ldr	r3, [pc, #140]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d114      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004af6:	f7fc faf1 	bl	80010dc <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afc:	e00a      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004afe:	f7fc faed 	bl	80010dc <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e02a      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b14:	4b18      	ldr	r3, [pc, #96]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0ee      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b2c:	d10d      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b2e:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b42:	490d      	ldr	r1, [pc, #52]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	608b      	str	r3, [r1, #8]
 8004b48:	e005      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	4a0a      	ldr	r2, [pc, #40]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b54:	6093      	str	r3, [r2, #8]
 8004b56:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b62:	4905      	ldr	r1, [pc, #20]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	42470068 	.word	0x42470068
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40007000 	.word	0x40007000
 8004b80:	42470e40 	.word	0x42470e40

08004b84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d13d      	bne.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ba2:	4b22      	ldr	r3, [pc, #136]	; (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004baa:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d004      	beq.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d12f      	bne.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004bb8:	617b      	str	r3, [r7, #20]
          break;
 8004bba:	e02f      	b.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004bbc:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc8:	d108      	bne.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bca:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bd2:	4a18      	ldr	r2, [pc, #96]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd8:	613b      	str	r3, [r7, #16]
 8004bda:	e007      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004bdc:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be4:	4a14      	ldr	r2, [pc, #80]	; (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004bec:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf2:	099b      	lsrs	r3, r3, #6
 8004bf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	fb02 f303 	mul.w	r3, r2, r3
 8004bfe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c06:	0f1b      	lsrs	r3, r3, #28
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	617b      	str	r3, [r7, #20]
          break;
 8004c14:	e002      	b.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
          break;
 8004c1a:	bf00      	nop
        }
      }
      break;
 8004c1c:	bf00      	nop
    }
  }
  return frequency;
 8004c1e:	697b      	ldr	r3, [r7, #20]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	00bb8000 	.word	0x00bb8000
 8004c34:	007a1200 	.word	0x007a1200
 8004c38:	00f42400 	.word	0x00f42400

08004c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e056      	b.n	8004cfc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d106      	bne.n	8004c6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7fc f8c7 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2202      	movs	r2, #2
 8004c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	ea42 0103 	orr.w	r1, r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	0c1b      	lsrs	r3, r3, #16
 8004ccc:	f003 0104 	and.w	r1, r3, #4
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69da      	ldr	r2, [r3, #28]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d04:	b084      	sub	sp, #16
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	f107 001c 	add.w	r0, r7, #28
 8004d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d122      	bne.n	8004d62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d105      	bne.n	8004d56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f001 fac6 	bl	80062e8 <USB_CoreReset>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	73fb      	strb	r3, [r7, #15]
 8004d60:	e01a      	b.n	8004d98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f001 faba 	bl	80062e8 <USB_CoreReset>
 8004d74:	4603      	mov	r3, r0
 8004d76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	639a      	str	r2, [r3, #56]	; 0x38
 8004d8a:	e005      	b.n	8004d98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d10b      	bne.n	8004db6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f043 0206 	orr.w	r2, r3, #6
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dc2:	b004      	add	sp, #16
 8004dc4:	4770      	bx	lr
	...

08004dc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d165      	bne.n	8004ea8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4a41      	ldr	r2, [pc, #260]	; (8004ee4 <USB_SetTurnaroundTime+0x11c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d906      	bls.n	8004df2 <USB_SetTurnaroundTime+0x2a>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4a40      	ldr	r2, [pc, #256]	; (8004ee8 <USB_SetTurnaroundTime+0x120>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d802      	bhi.n	8004df2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004dec:	230f      	movs	r3, #15
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e062      	b.n	8004eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4a3c      	ldr	r2, [pc, #240]	; (8004ee8 <USB_SetTurnaroundTime+0x120>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d906      	bls.n	8004e08 <USB_SetTurnaroundTime+0x40>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4a3b      	ldr	r2, [pc, #236]	; (8004eec <USB_SetTurnaroundTime+0x124>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d802      	bhi.n	8004e08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e02:	230e      	movs	r3, #14
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	e057      	b.n	8004eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4a38      	ldr	r2, [pc, #224]	; (8004eec <USB_SetTurnaroundTime+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d906      	bls.n	8004e1e <USB_SetTurnaroundTime+0x56>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4a37      	ldr	r2, [pc, #220]	; (8004ef0 <USB_SetTurnaroundTime+0x128>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d802      	bhi.n	8004e1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e18:	230d      	movs	r3, #13
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	e04c      	b.n	8004eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4a33      	ldr	r2, [pc, #204]	; (8004ef0 <USB_SetTurnaroundTime+0x128>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d906      	bls.n	8004e34 <USB_SetTurnaroundTime+0x6c>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4a32      	ldr	r2, [pc, #200]	; (8004ef4 <USB_SetTurnaroundTime+0x12c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d802      	bhi.n	8004e34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e2e:	230c      	movs	r3, #12
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e041      	b.n	8004eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4a2f      	ldr	r2, [pc, #188]	; (8004ef4 <USB_SetTurnaroundTime+0x12c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d906      	bls.n	8004e4a <USB_SetTurnaroundTime+0x82>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4a2e      	ldr	r2, [pc, #184]	; (8004ef8 <USB_SetTurnaroundTime+0x130>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d802      	bhi.n	8004e4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e44:	230b      	movs	r3, #11
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	e036      	b.n	8004eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	; (8004ef8 <USB_SetTurnaroundTime+0x130>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d906      	bls.n	8004e60 <USB_SetTurnaroundTime+0x98>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4a29      	ldr	r2, [pc, #164]	; (8004efc <USB_SetTurnaroundTime+0x134>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d802      	bhi.n	8004e60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e5a:	230a      	movs	r3, #10
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e02b      	b.n	8004eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4a26      	ldr	r2, [pc, #152]	; (8004efc <USB_SetTurnaroundTime+0x134>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d906      	bls.n	8004e76 <USB_SetTurnaroundTime+0xae>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4a25      	ldr	r2, [pc, #148]	; (8004f00 <USB_SetTurnaroundTime+0x138>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d802      	bhi.n	8004e76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e70:	2309      	movs	r3, #9
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	e020      	b.n	8004eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a21      	ldr	r2, [pc, #132]	; (8004f00 <USB_SetTurnaroundTime+0x138>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d906      	bls.n	8004e8c <USB_SetTurnaroundTime+0xc4>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4a20      	ldr	r2, [pc, #128]	; (8004f04 <USB_SetTurnaroundTime+0x13c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d802      	bhi.n	8004e8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e86:	2308      	movs	r3, #8
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e015      	b.n	8004eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4a1d      	ldr	r2, [pc, #116]	; (8004f04 <USB_SetTurnaroundTime+0x13c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d906      	bls.n	8004ea2 <USB_SetTurnaroundTime+0xda>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <USB_SetTurnaroundTime+0x140>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d802      	bhi.n	8004ea2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e9c:	2307      	movs	r3, #7
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e00a      	b.n	8004eb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ea2:	2306      	movs	r3, #6
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e007      	b.n	8004eb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004eae:	2309      	movs	r3, #9
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	e001      	b.n	8004eb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004eb4:	2309      	movs	r3, #9
 8004eb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	029b      	lsls	r3, r3, #10
 8004ecc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	00d8acbf 	.word	0x00d8acbf
 8004ee8:	00e4e1bf 	.word	0x00e4e1bf
 8004eec:	00f423ff 	.word	0x00f423ff
 8004ef0:	0106737f 	.word	0x0106737f
 8004ef4:	011a499f 	.word	0x011a499f
 8004ef8:	01312cff 	.word	0x01312cff
 8004efc:	014ca43f 	.word	0x014ca43f
 8004f00:	016e35ff 	.word	0x016e35ff
 8004f04:	01a6ab1f 	.word	0x01a6ab1f
 8004f08:	01e847ff 	.word	0x01e847ff

08004f0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f043 0201 	orr.w	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f023 0201 	bic.w	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d106      	bne.n	8004f7c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	60da      	str	r2, [r3, #12]
 8004f7a:	e00b      	b.n	8004f94 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60da      	str	r2, [r3, #12]
 8004f8e:	e001      	b.n	8004f94 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e003      	b.n	8004f9c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f94:	2032      	movs	r0, #50	; 0x32
 8004f96:	f7fc f8ad 	bl	80010f4 <HAL_Delay>

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b086      	sub	sp, #24
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	e009      	b.n	8004fd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	3340      	adds	r3, #64	; 0x40
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	2200      	movs	r2, #0
 8004fd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2b0e      	cmp	r3, #14
 8004fdc:	d9f2      	bls.n	8004fc4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d11c      	bne.n	800501e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ff2:	f043 0302 	orr.w	r3, r3, #2
 8004ff6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	639a      	str	r2, [r3, #56]	; 0x38
 800501c:	e00b      	b.n	8005036 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800503c:	461a      	mov	r2, r3
 800503e:	2300      	movs	r3, #0
 8005040:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005048:	4619      	mov	r1, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005050:	461a      	mov	r2, r3
 8005052:	680b      	ldr	r3, [r1, #0]
 8005054:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	2b01      	cmp	r3, #1
 800505a:	d10c      	bne.n	8005076 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005062:	2100      	movs	r1, #0
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f949 	bl	80052fc <USB_SetDevSpeed>
 800506a:	e008      	b.n	800507e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800506c:	2101      	movs	r1, #1
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f944 	bl	80052fc <USB_SetDevSpeed>
 8005074:	e003      	b.n	800507e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005076:	2103      	movs	r1, #3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f93f 	bl	80052fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800507e:	2110      	movs	r1, #16
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f8f3 	bl	800526c <USB_FlushTxFifo>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f911 	bl	80052b8 <USB_FlushRxFifo>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a6:	461a      	mov	r2, r3
 80050a8:	2300      	movs	r3, #0
 80050aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	461a      	mov	r2, r3
 80050b4:	2300      	movs	r3, #0
 80050b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050be:	461a      	mov	r2, r3
 80050c0:	2300      	movs	r3, #0
 80050c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	e043      	b.n	8005152 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050e0:	d118      	bne.n	8005114 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10a      	bne.n	80050fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f4:	461a      	mov	r2, r3
 80050f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	e013      	b.n	8005126 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510a:	461a      	mov	r2, r3
 800510c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	e008      	b.n	8005126 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005120:	461a      	mov	r2, r3
 8005122:	2300      	movs	r3, #0
 8005124:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	461a      	mov	r2, r3
 8005134:	2300      	movs	r3, #0
 8005136:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	461a      	mov	r2, r3
 8005146:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800514a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	3301      	adds	r3, #1
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	429a      	cmp	r2, r3
 8005158:	d3b7      	bcc.n	80050ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800515a:	2300      	movs	r3, #0
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	e043      	b.n	80051e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005176:	d118      	bne.n	80051aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10a      	bne.n	8005194 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518a:	461a      	mov	r2, r3
 800518c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e013      	b.n	80051bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a0:	461a      	mov	r2, r3
 80051a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	e008      	b.n	80051bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	461a      	mov	r2, r3
 80051b8:	2300      	movs	r3, #0
 80051ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c8:	461a      	mov	r2, r3
 80051ca:	2300      	movs	r3, #0
 80051cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051da:	461a      	mov	r2, r3
 80051dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	3301      	adds	r3, #1
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d3b7      	bcc.n	8005160 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005202:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005210:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	2b00      	cmp	r3, #0
 8005216:	d105      	bne.n	8005224 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f043 0210 	orr.w	r2, r3, #16
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <USB_DevInit+0x2c4>)
 800522a:	4313      	orrs	r3, r2
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f043 0208 	orr.w	r2, r3, #8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d107      	bne.n	8005258 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005250:	f043 0304 	orr.w	r3, r3, #4
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005258:	7dfb      	ldrb	r3, [r7, #23]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005264:	b004      	add	sp, #16
 8005266:	4770      	bx	lr
 8005268:	803c3800 	.word	0x803c3800

0800526c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	f043 0220 	orr.w	r2, r3, #32
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3301      	adds	r3, #1
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4a09      	ldr	r2, [pc, #36]	; (80052b4 <USB_FlushTxFifo+0x48>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d901      	bls.n	8005298 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e006      	b.n	80052a6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d0f0      	beq.n	8005286 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	00030d40 	.word	0x00030d40

080052b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2210      	movs	r2, #16
 80052c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3301      	adds	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a09      	ldr	r2, [pc, #36]	; (80052f8 <USB_FlushRxFifo+0x40>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d901      	bls.n	80052dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e006      	b.n	80052ea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b10      	cmp	r3, #16
 80052e6:	d0f0      	beq.n	80052ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	00030d40 	.word	0x00030d40

080052fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800531c:	4313      	orrs	r3, r2
 800531e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800532e:	b480      	push	{r7}
 8005330:	b087      	sub	sp, #28
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 0306 	and.w	r3, r3, #6
 8005346:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]
 8005352:	e00a      	b.n	800536a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d002      	beq.n	8005360 <USB_GetDevSpeed+0x32>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b06      	cmp	r3, #6
 800535e:	d102      	bne.n	8005366 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005360:	2302      	movs	r3, #2
 8005362:	75fb      	strb	r3, [r7, #23]
 8005364:	e001      	b.n	800536a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005366:	230f      	movs	r3, #15
 8005368:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800536a:	7dfb      	ldrb	r3, [r7, #23]
}
 800536c:	4618      	mov	r0, r3
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d13a      	bne.n	800540a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539a:	69da      	ldr	r2, [r3, #28]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	f003 030f 	and.w	r3, r3, #15
 80053a4:	2101      	movs	r1, #1
 80053a6:	fa01 f303 	lsl.w	r3, r1, r3
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	68f9      	ldr	r1, [r7, #12]
 80053ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053b2:	4313      	orrs	r3, r2
 80053b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d155      	bne.n	8005478 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	78db      	ldrb	r3, [r3, #3]
 80053e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	059b      	lsls	r3, r3, #22
 80053ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053f0:	4313      	orrs	r3, r2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	0151      	lsls	r1, r2, #5
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	440a      	add	r2, r1
 80053fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	e036      	b.n	8005478 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005410:	69da      	ldr	r2, [r3, #28]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	2101      	movs	r1, #1
 800541c:	fa01 f303 	lsl.w	r3, r1, r3
 8005420:	041b      	lsls	r3, r3, #16
 8005422:	68f9      	ldr	r1, [r7, #12]
 8005424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005428:	4313      	orrs	r3, r2
 800542a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d11a      	bne.n	8005478 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	78db      	ldrb	r3, [r3, #3]
 800545c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800545e:	430b      	orrs	r3, r1
 8005460:	4313      	orrs	r3, r2
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005476:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d161      	bne.n	8005568 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ba:	d11f      	bne.n	80054fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	2101      	movs	r1, #1
 800550e:	fa01 f303 	lsl.w	r3, r1, r3
 8005512:	b29b      	uxth	r3, r3
 8005514:	43db      	mvns	r3, r3
 8005516:	68f9      	ldr	r1, [r7, #12]
 8005518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800551c:	4013      	ands	r3, r2
 800551e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	2101      	movs	r1, #1
 8005532:	fa01 f303 	lsl.w	r3, r1, r3
 8005536:	b29b      	uxth	r3, r3
 8005538:	43db      	mvns	r3, r3
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005540:	4013      	ands	r3, r2
 8005542:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	0159      	lsls	r1, r3, #5
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	440b      	add	r3, r1
 800555a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555e:	4619      	mov	r1, r3
 8005560:	4b35      	ldr	r3, [pc, #212]	; (8005638 <USB_DeactivateEndpoint+0x1b0>)
 8005562:	4013      	ands	r3, r2
 8005564:	600b      	str	r3, [r1, #0]
 8005566:	e060      	b.n	800562a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800557a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800557e:	d11f      	bne.n	80055c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	440a      	add	r2, r1
 8005596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800559e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	2101      	movs	r1, #1
 80055d2:	fa01 f303 	lsl.w	r3, r1, r3
 80055d6:	041b      	lsls	r3, r3, #16
 80055d8:	43db      	mvns	r3, r3
 80055da:	68f9      	ldr	r1, [r7, #12]
 80055dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055e0:	4013      	ands	r3, r2
 80055e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	f003 030f 	and.w	r3, r3, #15
 80055f4:	2101      	movs	r1, #1
 80055f6:	fa01 f303 	lsl.w	r3, r1, r3
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	43db      	mvns	r3, r3
 80055fe:	68f9      	ldr	r1, [r7, #12]
 8005600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005604:	4013      	ands	r3, r2
 8005606:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	0159      	lsls	r1, r3, #5
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	440b      	add	r3, r1
 800561e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005622:	4619      	mov	r1, r3
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <USB_DeactivateEndpoint+0x1b4>)
 8005626:	4013      	ands	r3, r2
 8005628:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	ec337800 	.word	0xec337800
 800563c:	eff37800 	.word	0xeff37800

08005640 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08a      	sub	sp, #40	; 0x28
 8005644:	af02      	add	r7, sp, #8
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	4613      	mov	r3, r2
 800564c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	785b      	ldrb	r3, [r3, #1]
 800565c:	2b01      	cmp	r3, #1
 800565e:	f040 815c 	bne.w	800591a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d132      	bne.n	80056d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	0151      	lsls	r1, r2, #5
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	440a      	add	r2, r1
 8005680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005684:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005688:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800568c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	69fa      	ldr	r2, [r7, #28]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c8:	0cdb      	lsrs	r3, r3, #19
 80056ca:	04db      	lsls	r3, r3, #19
 80056cc:	6113      	str	r3, [r2, #16]
 80056ce:	e074      	b.n	80057ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ea:	0cdb      	lsrs	r3, r3, #19
 80056ec:	04db      	lsls	r3, r3, #19
 80056ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800570e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6959      	ldr	r1, [r3, #20]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	440b      	add	r3, r1
 800572c:	1e59      	subs	r1, r3, #1
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	fbb1 f3f3 	udiv	r3, r1, r3
 8005736:	04d9      	lsls	r1, r3, #19
 8005738:	4b9d      	ldr	r3, [pc, #628]	; (80059b0 <USB_EPStartXfer+0x370>)
 800573a:	400b      	ands	r3, r1
 800573c:	69b9      	ldr	r1, [r7, #24]
 800573e:	0148      	lsls	r0, r1, #5
 8005740:	69f9      	ldr	r1, [r7, #28]
 8005742:	4401      	add	r1, r0
 8005744:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005748:	4313      	orrs	r3, r2
 800574a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005762:	69b9      	ldr	r1, [r7, #24]
 8005764:	0148      	lsls	r0, r1, #5
 8005766:	69f9      	ldr	r1, [r7, #28]
 8005768:	4401      	add	r1, r0
 800576a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800576e:	4313      	orrs	r3, r2
 8005770:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	78db      	ldrb	r3, [r3, #3]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d11f      	bne.n	80057ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	69fa      	ldr	r2, [r7, #28]
 800578e:	440a      	add	r2, r1
 8005790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005794:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005798:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d14b      	bne.n	8005858 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d009      	beq.n	80057dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d4:	461a      	mov	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	78db      	ldrb	r3, [r3, #3]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d128      	bne.n	8005836 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d110      	bne.n	8005816 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	0151      	lsls	r1, r2, #5
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	440a      	add	r2, r1
 800580a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	e00f      	b.n	8005836 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	440a      	add	r2, r1
 800582c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005834:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005850:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	e12f      	b.n	8005ab8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005872:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005876:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	78db      	ldrb	r3, [r3, #3]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d015      	beq.n	80058ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 8117 	beq.w	8005ab8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	2101      	movs	r1, #1
 800589c:	fa01 f303 	lsl.w	r3, r1, r3
 80058a0:	69f9      	ldr	r1, [r7, #28]
 80058a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058a6:	4313      	orrs	r3, r2
 80058a8:	634b      	str	r3, [r1, #52]	; 0x34
 80058aa:	e105      	b.n	8005ab8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d110      	bne.n	80058de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	e00f      	b.n	80058fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	69fa      	ldr	r2, [r7, #28]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	68d9      	ldr	r1, [r3, #12]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	781a      	ldrb	r2, [r3, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	b298      	uxth	r0, r3
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	4603      	mov	r3, r0
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fa2b 	bl	8005d6e <USB_WritePacket>
 8005918:	e0ce      	b.n	8005ab8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005934:	0cdb      	lsrs	r3, r3, #19
 8005936:	04db      	lsls	r3, r3, #19
 8005938:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005954:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005958:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800595c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d126      	bne.n	80059b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800597c:	69b9      	ldr	r1, [r7, #24]
 800597e:	0148      	lsls	r0, r1, #5
 8005980:	69f9      	ldr	r1, [r7, #28]
 8005982:	4401      	add	r1, r0
 8005984:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005988:	4313      	orrs	r3, r2
 800598a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	0151      	lsls	r1, r2, #5
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	440a      	add	r2, r1
 80059a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059aa:	6113      	str	r3, [r2, #16]
 80059ac:	e036      	b.n	8005a1c <USB_EPStartXfer+0x3dc>
 80059ae:	bf00      	nop
 80059b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	695a      	ldr	r2, [r3, #20]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4413      	add	r3, r2
 80059be:	1e5a      	subs	r2, r3, #1
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	8afb      	ldrh	r3, [r7, #22]
 80059da:	04d9      	lsls	r1, r3, #19
 80059dc:	4b39      	ldr	r3, [pc, #228]	; (8005ac4 <USB_EPStartXfer+0x484>)
 80059de:	400b      	ands	r3, r1
 80059e0:	69b9      	ldr	r1, [r7, #24]
 80059e2:	0148      	lsls	r0, r1, #5
 80059e4:	69f9      	ldr	r1, [r7, #28]
 80059e6:	4401      	add	r1, r0
 80059e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059ec:	4313      	orrs	r3, r2
 80059ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	8af9      	ldrh	r1, [r7, #22]
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a0c:	69b9      	ldr	r1, [r7, #24]
 8005a0e:	0148      	lsls	r0, r1, #5
 8005a10:	69f9      	ldr	r1, [r7, #28]
 8005a12:	4401      	add	r1, r0
 8005a14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d10d      	bne.n	8005a3e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	68d9      	ldr	r1, [r3, #12]
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	460a      	mov	r2, r1
 8005a3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	78db      	ldrb	r3, [r3, #3]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d128      	bne.n	8005a98 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d110      	bne.n	8005a78 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	0151      	lsls	r1, r2, #5
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	440a      	add	r2, r1
 8005a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	e00f      	b.n	8005a98 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	0151      	lsls	r1, r2, #5
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ab6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3720      	adds	r7, #32
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	1ff80000 	.word	0x1ff80000

08005ac8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	f040 80cd 	bne.w	8005c84 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d132      	bne.n	8005b58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	0151      	lsls	r1, r2, #5
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	440a      	add	r2, r1
 8005b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b50:	0cdb      	lsrs	r3, r3, #19
 8005b52:	04db      	lsls	r3, r3, #19
 8005b54:	6113      	str	r3, [r2, #16]
 8005b56:	e04e      	b.n	8005bf6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b72:	0cdb      	lsrs	r3, r3, #19
 8005b74:	04db      	lsls	r3, r3, #19
 8005b76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b9a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	695a      	ldr	r2, [r3, #20]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d903      	bls.n	8005bb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005be6:	6939      	ldr	r1, [r7, #16]
 8005be8:	0148      	lsls	r0, r1, #5
 8005bea:	6979      	ldr	r1, [r7, #20]
 8005bec:	4401      	add	r1, r0
 8005bee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d11e      	bne.n	8005c3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d009      	beq.n	8005c18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	461a      	mov	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	e092      	b.n	8005d60 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d07e      	beq.n	8005d60 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	2101      	movs	r1, #1
 8005c74:	fa01 f303 	lsl.w	r3, r1, r3
 8005c78:	6979      	ldr	r1, [r7, #20]
 8005c7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	634b      	str	r3, [r1, #52]	; 0x34
 8005c82:	e06d      	b.n	8005d60 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9e:	0cdb      	lsrs	r3, r3, #19
 8005ca0:	04db      	lsls	r3, r3, #19
 8005ca2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	0151      	lsls	r1, r2, #5
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	440a      	add	r2, r1
 8005cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cbe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cc2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cc6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cf6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d04:	691a      	ldr	r2, [r3, #16]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d0e:	6939      	ldr	r1, [r7, #16]
 8005d10:	0148      	lsls	r0, r1, #5
 8005d12:	6979      	ldr	r1, [r7, #20]
 8005d14:	4401      	add	r1, r0
 8005d16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d10d      	bne.n	8005d40 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d009      	beq.n	8005d40 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	68d9      	ldr	r1, [r3, #12]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3c:	460a      	mov	r2, r1
 8005d3e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b089      	sub	sp, #36	; 0x24
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	4611      	mov	r1, r2
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	71fb      	strb	r3, [r7, #7]
 8005d80:	4613      	mov	r3, r2
 8005d82:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005d8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d11a      	bne.n	8005dca <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d94:	88bb      	ldrh	r3, [r7, #4]
 8005d96:	3303      	adds	r3, #3
 8005d98:	089b      	lsrs	r3, r3, #2
 8005d9a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
 8005da0:	e00f      	b.n	8005dc2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	031a      	lsls	r2, r3, #12
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dae:	461a      	mov	r2, r3
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	3304      	adds	r3, #4
 8005dba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d3eb      	bcc.n	8005da2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3724      	adds	r7, #36	; 0x24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b089      	sub	sp, #36	; 0x24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	4613      	mov	r3, r2
 8005de4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	3303      	adds	r3, #3
 8005df2:	089b      	lsrs	r3, r3, #2
 8005df4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005df6:	2300      	movs	r3, #0
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	e00b      	b.n	8005e14 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	3301      	adds	r3, #1
 8005e12:	61bb      	str	r3, [r7, #24]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d3ef      	bcc.n	8005dfc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005e1c:	69fb      	ldr	r3, [r7, #28]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3724      	adds	r7, #36	; 0x24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	785b      	ldrb	r3, [r3, #1]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d12c      	bne.n	8005ea0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	db12      	blt.n	8005e7e <USB_EPSetStall+0x54>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00f      	beq.n	8005e7e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e7c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	e02b      	b.n	8005ef8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	db12      	blt.n	8005ed8 <USB_EPSetStall+0xae>
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00f      	beq.n	8005ed8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ed6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	0151      	lsls	r1, r2, #5
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	440a      	add	r2, r1
 8005eee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ef6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d128      	bne.n	8005f74 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	78db      	ldrb	r3, [r3, #3]
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d003      	beq.n	8005f52 <USB_EPClearStall+0x4c>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	78db      	ldrb	r3, [r3, #3]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d138      	bne.n	8005fc4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	e027      	b.n	8005fc4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	78db      	ldrb	r3, [r3, #3]
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d003      	beq.n	8005fa4 <USB_EPClearStall+0x9e>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	78db      	ldrb	r3, [r3, #3]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d10f      	bne.n	8005fc4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ff4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	78fb      	ldrb	r3, [r7, #3]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800600c:	4313      	orrs	r3, r2
 800600e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006038:	f023 0303 	bic.w	r3, r3, #3
 800603c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800604c:	f023 0302 	bic.w	r3, r3, #2
 8006050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800608e:	f043 0302 	orr.w	r3, r3, #2
 8006092:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b085      	sub	sp, #20
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4013      	ands	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060ba:	68fb      	ldr	r3, [r7, #12]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	4013      	ands	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	0c1b      	lsrs	r3, r3, #16
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4013      	ands	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	b29b      	uxth	r3, r3
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	4013      	ands	r3, r2
 800615c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800615e:	68bb      	ldr	r3, [r7, #8]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	fa22 f303 	lsr.w	r3, r2, r3
 800619c:	01db      	lsls	r3, r3, #7
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4013      	ands	r3, r2
 80061b8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061ba:	68bb      	ldr	r3, [r7, #8]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	f003 0301 	and.w	r3, r3, #1
}
 80061d8:	4618      	mov	r0, r3
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006202:	f023 0307 	bic.w	r3, r3, #7
 8006206:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	460b      	mov	r3, r1
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	333c      	adds	r3, #60	; 0x3c
 8006242:	3304      	adds	r3, #4
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	4a26      	ldr	r2, [pc, #152]	; (80062e4 <USB_EP0_OutStart+0xb8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d90a      	bls.n	8006266 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800625c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006260:	d101      	bne.n	8006266 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	e037      	b.n	80062d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626c:	461a      	mov	r2, r3
 800626e:	2300      	movs	r3, #0
 8006270:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006280:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006284:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006294:	f043 0318 	orr.w	r3, r3, #24
 8006298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80062ae:	7afb      	ldrb	r3, [r7, #11]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d10f      	bne.n	80062d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ba:	461a      	mov	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80062d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	4f54300a 	.word	0x4f54300a

080062e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3301      	adds	r3, #1
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4a13      	ldr	r2, [pc, #76]	; (800634c <USB_CoreReset+0x64>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e01b      	b.n	800633e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	daf2      	bge.n	80062f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f043 0201 	orr.w	r2, r3, #1
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3301      	adds	r3, #1
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <USB_CoreReset+0x64>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d901      	bls.n	8006330 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e006      	b.n	800633e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b01      	cmp	r3, #1
 800633a:	d0f0      	beq.n	800631e <USB_CoreReset+0x36>

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	00030d40 	.word	0x00030d40

08006350 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800635c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006360:	f002 fa36 	bl	80087d0 <malloc>
 8006364:	4603      	mov	r3, r0
 8006366:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d105      	bne.n	800637a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006376:	2302      	movs	r3, #2
 8006378:	e066      	b.n	8006448 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	7c1b      	ldrb	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d119      	bne.n	80063be <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800638a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800638e:	2202      	movs	r2, #2
 8006390:	2181      	movs	r1, #129	; 0x81
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f002 f8a3 	bl	80084de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800639e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063a2:	2202      	movs	r2, #2
 80063a4:	2101      	movs	r1, #1
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f002 f899 	bl	80084de <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2210      	movs	r2, #16
 80063b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80063bc:	e016      	b.n	80063ec <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063be:	2340      	movs	r3, #64	; 0x40
 80063c0:	2202      	movs	r2, #2
 80063c2:	2181      	movs	r1, #129	; 0x81
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f002 f88a 	bl	80084de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063d0:	2340      	movs	r3, #64	; 0x40
 80063d2:	2202      	movs	r2, #2
 80063d4:	2101      	movs	r1, #1
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f002 f881 	bl	80084de <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2210      	movs	r2, #16
 80063e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063ec:	2308      	movs	r3, #8
 80063ee:	2203      	movs	r2, #3
 80063f0:	2182      	movs	r1, #130	; 0x82
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f002 f873 	bl	80084de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	7c1b      	ldrb	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d109      	bne.n	8006436 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800642c:	2101      	movs	r1, #1
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f002 f944 	bl	80086bc <USBD_LL_PrepareReceive>
 8006434:	e007      	b.n	8006446 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800643c:	2340      	movs	r3, #64	; 0x40
 800643e:	2101      	movs	r1, #1
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f002 f93b 	bl	80086bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006460:	2181      	movs	r1, #129	; 0x81
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f002 f861 	bl	800852a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800646e:	2101      	movs	r1, #1
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f002 f85a 	bl	800852a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800647e:	2182      	movs	r1, #130	; 0x82
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f002 f852 	bl	800852a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00e      	beq.n	80064be <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064b0:	4618      	mov	r0, r3
 80064b2:	f002 f995 	bl	80087e0 <free>
    pdev->pClassData = NULL;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80064be:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064d8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d03a      	beq.n	8006568 <USBD_CDC_Setup+0xa0>
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	f040 8097 	bne.w	8006626 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	88db      	ldrh	r3, [r3, #6]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d029      	beq.n	8006554 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	b25b      	sxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	da11      	bge.n	800652e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006516:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	88d2      	ldrh	r2, [r2, #6]
 800651c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800651e:	6939      	ldr	r1, [r7, #16]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	88db      	ldrh	r3, [r3, #6]
 8006524:	461a      	mov	r2, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 fa9d 	bl	8007a66 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800652c:	e082      	b.n	8006634 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	785a      	ldrb	r2, [r3, #1]
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	88db      	ldrh	r3, [r3, #6]
 800653c:	b2da      	uxtb	r2, r3
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006544:	6939      	ldr	r1, [r7, #16]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	88db      	ldrh	r3, [r3, #6]
 800654a:	461a      	mov	r2, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 fab6 	bl	8007abe <USBD_CtlPrepareRx>
    break;
 8006552:	e06f      	b.n	8006634 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	7850      	ldrb	r0, [r2, #1]
 8006560:	2200      	movs	r2, #0
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	4798      	blx	r3
    break;
 8006566:	e065      	b.n	8006634 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	2b0b      	cmp	r3, #11
 800656e:	d84f      	bhi.n	8006610 <USBD_CDC_Setup+0x148>
 8006570:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <USBD_CDC_Setup+0xb0>)
 8006572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006576:	bf00      	nop
 8006578:	080065a9 	.word	0x080065a9
 800657c:	0800661f 	.word	0x0800661f
 8006580:	08006611 	.word	0x08006611
 8006584:	08006611 	.word	0x08006611
 8006588:	08006611 	.word	0x08006611
 800658c:	08006611 	.word	0x08006611
 8006590:	08006611 	.word	0x08006611
 8006594:	08006611 	.word	0x08006611
 8006598:	08006611 	.word	0x08006611
 800659c:	08006611 	.word	0x08006611
 80065a0:	080065d1 	.word	0x080065d1
 80065a4:	080065f9 	.word	0x080065f9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d107      	bne.n	80065c2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065b2:	f107 030c 	add.w	r3, r7, #12
 80065b6:	2202      	movs	r2, #2
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f001 fa53 	bl	8007a66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80065c0:	e030      	b.n	8006624 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 f9dd 	bl	8007984 <USBD_CtlError>
        ret = USBD_FAIL;
 80065ca:	2303      	movs	r3, #3
 80065cc:	75fb      	strb	r3, [r7, #23]
      break;
 80065ce:	e029      	b.n	8006624 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d107      	bne.n	80065ea <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80065da:	f107 030f 	add.w	r3, r7, #15
 80065de:	2201      	movs	r2, #1
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 fa3f 	bl	8007a66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80065e8:	e01c      	b.n	8006624 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 f9c9 	bl	8007984 <USBD_CtlError>
        ret = USBD_FAIL;
 80065f2:	2303      	movs	r3, #3
 80065f4:	75fb      	strb	r3, [r7, #23]
      break;
 80065f6:	e015      	b.n	8006624 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d00f      	beq.n	8006622 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 f9bd 	bl	8007984 <USBD_CtlError>
        ret = USBD_FAIL;
 800660a:	2303      	movs	r3, #3
 800660c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800660e:	e008      	b.n	8006622 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 f9b6 	bl	8007984 <USBD_CtlError>
      ret = USBD_FAIL;
 8006618:	2303      	movs	r3, #3
 800661a:	75fb      	strb	r3, [r7, #23]
      break;
 800661c:	e002      	b.n	8006624 <USBD_CDC_Setup+0x15c>
      break;
 800661e:	bf00      	nop
 8006620:	e008      	b.n	8006634 <USBD_CDC_Setup+0x16c>
      break;
 8006622:	bf00      	nop
    }
    break;
 8006624:	e006      	b.n	8006634 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006626:	6839      	ldr	r1, [r7, #0]
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 f9ab 	bl	8007984 <USBD_CtlError>
    ret = USBD_FAIL;
 800662e:	2303      	movs	r3, #3
 8006630:	75fb      	strb	r3, [r7, #23]
    break;
 8006632:	bf00      	nop
  }

  return (uint8_t)ret;
 8006634:	7dfb      	ldrb	r3, [r7, #23]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop

08006640 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006652:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800665e:	2303      	movs	r3, #3
 8006660:	e049      	b.n	80066f6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006668:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800666a:	78fa      	ldrb	r2, [r7, #3]
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	3318      	adds	r3, #24
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d029      	beq.n	80066d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006680:	78fa      	ldrb	r2, [r7, #3]
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	3318      	adds	r3, #24
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	78f9      	ldrb	r1, [r7, #3]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	460b      	mov	r3, r1
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	1a5b      	subs	r3, r3, r1
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4403      	add	r3, r0
 80066a0:	3344      	adds	r3, #68	; 0x44
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80066a8:	fb03 f301 	mul.w	r3, r3, r1
 80066ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d110      	bne.n	80066d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	6879      	ldr	r1, [r7, #4]
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	440b      	add	r3, r1
 80066c0:	3318      	adds	r3, #24
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80066c6:	78f9      	ldrb	r1, [r7, #3]
 80066c8:	2300      	movs	r3, #0
 80066ca:	2200      	movs	r2, #0
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 ffd4 	bl	800867a <USBD_LL_Transmit>
 80066d2:	e00f      	b.n	80066f4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80066f0:	78fa      	ldrb	r2, [r7, #3]
 80066f2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b084      	sub	sp, #16
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006710:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800671c:	2303      	movs	r3, #3
 800671e:	e015      	b.n	800674c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 ffea 	bl	80086fe <USBD_LL_GetRxDataSize>
 800672a:	4602      	mov	r2, r0
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006746:	4611      	mov	r1, r2
 8006748:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006762:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d015      	beq.n	800679a <USBD_CDC_EP0_RxReady+0x46>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006774:	2bff      	cmp	r3, #255	; 0xff
 8006776:	d010      	beq.n	800679a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006786:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800678e:	b292      	uxth	r2, r2
 8006790:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	22ff      	movs	r2, #255	; 0xff
 8006796:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2243      	movs	r2, #67	; 0x43
 80067b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80067b2:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	20000094 	.word	0x20000094

080067c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2243      	movs	r2, #67	; 0x43
 80067d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80067d2:	4b03      	ldr	r3, [pc, #12]	; (80067e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	20000050 	.word	0x20000050

080067e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2243      	movs	r2, #67	; 0x43
 80067f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80067f2:	4b03      	ldr	r3, [pc, #12]	; (8006800 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	200000d8 	.word	0x200000d8

08006804 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	220a      	movs	r2, #10
 8006810:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006812:	4b03      	ldr	r3, [pc, #12]	; (8006820 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	2000000c 	.word	0x2000000c

08006824 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006834:	2303      	movs	r3, #3
 8006836:	e004      	b.n	8006842 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800684e:	b480      	push	{r7}
 8006850:	b087      	sub	sp, #28
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006860:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006890:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068b6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80068b8:	2301      	movs	r3, #1
 80068ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e01a      	b.n	8006900 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d114      	bne.n	80068fe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80068f2:	2181      	movs	r1, #129	; 0x81
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fec0 	bl	800867a <USBD_LL_Transmit>

    ret = USBD_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006916:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006922:	2303      	movs	r3, #3
 8006924:	e016      	b.n	8006954 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	7c1b      	ldrb	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006938:	2101      	movs	r1, #1
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 febe 	bl	80086bc <USBD_LL_PrepareReceive>
 8006940:	e007      	b.n	8006952 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006948:	2340      	movs	r3, #64	; 0x40
 800694a:	2101      	movs	r1, #1
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 feb5 	bl	80086bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4613      	mov	r3, r2
 8006968:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006970:	2303      	movs	r3, #3
 8006972:	e025      	b.n	80069c0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	79fa      	ldrb	r2, [r7, #7]
 80069b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f001 fd2b 	bl	8008410 <USBD_LL_Init>
 80069ba:	4603      	mov	r3, r0
 80069bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80069dc:	2303      	movs	r3, #3
 80069de:	e010      	b.n	8006a02 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	f107 020e 	add.w	r2, r7, #14
 80069f4:	4610      	mov	r0, r2
 80069f6:	4798      	blx	r3
 80069f8:	4602      	mov	r2, r0
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fd48 	bl	80084a8 <USBD_LL_Start>
 8006a18:	4603      	mov	r3, r0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a44:	2303      	movs	r3, #3
 8006a46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d009      	beq.n	8006a66 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	78fa      	ldrb	r2, [r7, #3]
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	4798      	blx	r3
 8006a62:	4603      	mov	r3, r0
 8006a64:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	78fa      	ldrb	r2, [r7, #3]
 8006a90:	4611      	mov	r1, r2
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
  }

  return USBD_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 ff2c 	bl	8007910 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d00e      	beq.n	8006afa <USBD_LL_SetupStage+0x5a>
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d302      	bcc.n	8006ae6 <USBD_LL_SetupStage+0x46>
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d014      	beq.n	8006b0e <USBD_LL_SetupStage+0x6e>
 8006ae4:	e01d      	b.n	8006b22 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fa18 	bl	8006f24 <USBD_StdDevReq>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]
      break;
 8006af8:	e020      	b.n	8006b3c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa7c 	bl	8007000 <USBD_StdItfReq>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b0c:	e016      	b.n	8006b3c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fab8 	bl	800708c <USBD_StdEPReq>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b20:	e00c      	b.n	8006b3c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 fd19 	bl	8008568 <USBD_LL_StallEP>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73fb      	strb	r3, [r7, #15]
      break;
 8006b3a:	bf00      	nop
  }

  return ret;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b086      	sub	sp, #24
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	607a      	str	r2, [r7, #4]
 8006b52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d137      	bne.n	8006bca <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b68:	2b03      	cmp	r3, #3
 8006b6a:	d14a      	bne.n	8006c02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d913      	bls.n	8006ba0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	1ad2      	subs	r2, r2, r3
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	bf28      	it	cs
 8006b92:	4613      	movcs	r3, r2
 8006b94:	461a      	mov	r2, r3
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 ffad 	bl	8007af8 <USBD_CtlContinueRx>
 8006b9e:	e030      	b.n	8006c02 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d105      	bne.n	8006bc2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 ffa9 	bl	8007b1a <USBD_CtlSendStatus>
 8006bc8:	e01b      	b.n	8006c02 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d013      	beq.n	8006bfe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d10e      	bne.n	8006bfe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	7afa      	ldrb	r2, [r7, #11]
 8006bea:	4611      	mov	r1, r2
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	4798      	blx	r3
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
 8006bfc:	e002      	b.n	8006c04 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e000      	b.n	8006c04 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	460b      	mov	r3, r1
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c1a:	7afb      	ldrb	r3, [r7, #11]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d16a      	bne.n	8006cf6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3314      	adds	r3, #20
 8006c24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d155      	bne.n	8006cdc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d914      	bls.n	8006c66 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	1ad2      	subs	r2, r2, r3
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 ff22 	bl	8007a9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c58:	2300      	movs	r3, #0
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f001 fd2c 	bl	80086bc <USBD_LL_PrepareReceive>
 8006c64:	e03a      	b.n	8006cdc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d11c      	bne.n	8006cac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d316      	bcc.n	8006cac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d20f      	bcs.n	8006cac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2100      	movs	r1, #0
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 ff03 	bl	8007a9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f001 fd09 	bl	80086bc <USBD_LL_PrepareReceive>
 8006caa:	e017      	b.n	8006cdc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d105      	bne.n	8006cce <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cce:	2180      	movs	r1, #128	; 0x80
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f001 fc49 	bl	8008568 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 ff32 	bl	8007b40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d123      	bne.n	8006d2e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f7ff fe9b 	bl	8006a22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006cf4:	e01b      	b.n	8006d2e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d013      	beq.n	8006d2a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d10e      	bne.n	8006d2a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	7afa      	ldrb	r2, [r7, #11]
 8006d16:	4611      	mov	r1, r2
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	4798      	blx	r3
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	e002      	b.n	8006d30 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e000      	b.n	8006d30 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6852      	ldr	r2, [r2, #4]
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	4611      	mov	r1, r2
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d7c:	2340      	movs	r3, #64	; 0x40
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2100      	movs	r1, #0
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 fbab 	bl	80084de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2240      	movs	r2, #64	; 0x40
 8006d94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d98:	2340      	movs	r3, #64	; 0x40
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2180      	movs	r1, #128	; 0x80
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 fb9d 	bl	80084de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2240      	movs	r2, #64	; 0x40
 8006dae:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	78fa      	ldrb	r2, [r7, #3]
 8006dca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2204      	movs	r2, #4
 8006df2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d105      	bne.n	8006e22 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d10b      	bne.n	8006e5a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	460b      	mov	r3, r1
 8006e88:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d009      	beq.n	8006edc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	6852      	ldr	r2, [r2, #4]
 8006ed4:	b2d2      	uxtb	r2, r2
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
  }

  return USBD_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b087      	sub	sp, #28
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	3301      	adds	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f04:	8a3b      	ldrh	r3, [r7, #16]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	b21a      	sxth	r2, r3
 8006f0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	b21b      	sxth	r3, r3
 8006f12:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f14:	89fb      	ldrh	r3, [r7, #14]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
	...

08006f24 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d004      	beq.n	8006f48 <USBD_StdDevReq+0x24>
 8006f3e:	2b40      	cmp	r3, #64	; 0x40
 8006f40:	d002      	beq.n	8006f48 <USBD_StdDevReq+0x24>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <USBD_StdDevReq+0x38>
 8006f46:	e050      	b.n	8006fea <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
 8006f56:	4603      	mov	r3, r0
 8006f58:	73fb      	strb	r3, [r7, #15]
    break;
 8006f5a:	e04b      	b.n	8006ff4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	785b      	ldrb	r3, [r3, #1]
 8006f60:	2b09      	cmp	r3, #9
 8006f62:	d83c      	bhi.n	8006fde <USBD_StdDevReq+0xba>
 8006f64:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <USBD_StdDevReq+0x48>)
 8006f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6a:	bf00      	nop
 8006f6c:	08006fc1 	.word	0x08006fc1
 8006f70:	08006fd5 	.word	0x08006fd5
 8006f74:	08006fdf 	.word	0x08006fdf
 8006f78:	08006fcb 	.word	0x08006fcb
 8006f7c:	08006fdf 	.word	0x08006fdf
 8006f80:	08006f9f 	.word	0x08006f9f
 8006f84:	08006f95 	.word	0x08006f95
 8006f88:	08006fdf 	.word	0x08006fdf
 8006f8c:	08006fb7 	.word	0x08006fb7
 8006f90:	08006fa9 	.word	0x08006fa9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f9ce 	bl	8007338 <USBD_GetDescriptor>
      break;
 8006f9c:	e024      	b.n	8006fe8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fb33 	bl	800760c <USBD_SetAddress>
      break;
 8006fa6:	e01f      	b.n	8006fe8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fb70 	bl	8007690 <USBD_SetConfig>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb4:	e018      	b.n	8006fe8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fc0d 	bl	80077d8 <USBD_GetConfig>
      break;
 8006fbe:	e013      	b.n	8006fe8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fc3c 	bl	8007840 <USBD_GetStatus>
      break;
 8006fc8:	e00e      	b.n	8006fe8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fc6a 	bl	80078a6 <USBD_SetFeature>
      break;
 8006fd2:	e009      	b.n	8006fe8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fc79 	bl	80078ce <USBD_ClrFeature>
      break;
 8006fdc:	e004      	b.n	8006fe8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fccf 	bl	8007984 <USBD_CtlError>
      break;
 8006fe6:	bf00      	nop
    }
    break;
 8006fe8:	e004      	b.n	8006ff4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fcc9 	bl	8007984 <USBD_CtlError>
    break;
 8006ff2:	bf00      	nop
  }

  return ret;
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop

08007000 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007016:	2b20      	cmp	r3, #32
 8007018:	d003      	beq.n	8007022 <USBD_StdItfReq+0x22>
 800701a:	2b40      	cmp	r3, #64	; 0x40
 800701c:	d001      	beq.n	8007022 <USBD_StdItfReq+0x22>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d12a      	bne.n	8007078 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007028:	3b01      	subs	r3, #1
 800702a:	2b02      	cmp	r3, #2
 800702c:	d81d      	bhi.n	800706a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	889b      	ldrh	r3, [r3, #4]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b01      	cmp	r3, #1
 8007036:	d813      	bhi.n	8007060 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4798      	blx	r3
 8007046:	4603      	mov	r3, r0
 8007048:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	88db      	ldrh	r3, [r3, #6]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d110      	bne.n	8007074 <USBD_StdItfReq+0x74>
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10d      	bne.n	8007074 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fd5e 	bl	8007b1a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800705e:	e009      	b.n	8007074 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fc8e 	bl	8007984 <USBD_CtlError>
      break;
 8007068:	e004      	b.n	8007074 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fc89 	bl	8007984 <USBD_CtlError>
      break;
 8007072:	e000      	b.n	8007076 <USBD_StdItfReq+0x76>
      break;
 8007074:	bf00      	nop
    }
    break;
 8007076:	e004      	b.n	8007082 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fc82 	bl	8007984 <USBD_CtlError>
    break;
 8007080:	bf00      	nop
  }

  return ret;
 8007082:	7bfb      	ldrb	r3, [r7, #15]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	889b      	ldrh	r3, [r3, #4]
 800709e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d004      	beq.n	80070b6 <USBD_StdEPReq+0x2a>
 80070ac:	2b40      	cmp	r3, #64	; 0x40
 80070ae:	d002      	beq.n	80070b6 <USBD_StdEPReq+0x2a>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00a      	beq.n	80070ca <USBD_StdEPReq+0x3e>
 80070b4:	e135      	b.n	8007322 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	4798      	blx	r3
 80070c4:	4603      	mov	r3, r0
 80070c6:	73fb      	strb	r3, [r7, #15]
    break;
 80070c8:	e130      	b.n	800732c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	785b      	ldrb	r3, [r3, #1]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d03e      	beq.n	8007150 <USBD_StdEPReq+0xc4>
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d002      	beq.n	80070dc <USBD_StdEPReq+0x50>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d077      	beq.n	80071ca <USBD_StdEPReq+0x13e>
 80070da:	e11c      	b.n	8007316 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d002      	beq.n	80070ec <USBD_StdEPReq+0x60>
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d015      	beq.n	8007116 <USBD_StdEPReq+0x8a>
 80070ea:	e02b      	b.n	8007144 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00c      	beq.n	800710c <USBD_StdEPReq+0x80>
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	2b80      	cmp	r3, #128	; 0x80
 80070f6:	d009      	beq.n	800710c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 fa33 	bl	8008568 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007102:	2180      	movs	r1, #128	; 0x80
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 fa2f 	bl	8008568 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800710a:	e020      	b.n	800714e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fc38 	bl	8007984 <USBD_CtlError>
        break;
 8007114:	e01b      	b.n	800714e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	885b      	ldrh	r3, [r3, #2]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10e      	bne.n	800713c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00b      	beq.n	800713c <USBD_StdEPReq+0xb0>
 8007124:	7bbb      	ldrb	r3, [r7, #14]
 8007126:	2b80      	cmp	r3, #128	; 0x80
 8007128:	d008      	beq.n	800713c <USBD_StdEPReq+0xb0>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	88db      	ldrh	r3, [r3, #6]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d104      	bne.n	800713c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 fa16 	bl	8008568 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fcec 	bl	8007b1a <USBD_CtlSendStatus>

        break;
 8007142:	e004      	b.n	800714e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fc1c 	bl	8007984 <USBD_CtlError>
        break;
 800714c:	bf00      	nop
      }
      break;
 800714e:	e0e7      	b.n	8007320 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007156:	2b02      	cmp	r3, #2
 8007158:	d002      	beq.n	8007160 <USBD_StdEPReq+0xd4>
 800715a:	2b03      	cmp	r3, #3
 800715c:	d015      	beq.n	800718a <USBD_StdEPReq+0xfe>
 800715e:	e02d      	b.n	80071bc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00c      	beq.n	8007180 <USBD_StdEPReq+0xf4>
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	2b80      	cmp	r3, #128	; 0x80
 800716a:	d009      	beq.n	8007180 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f001 f9f9 	bl	8008568 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007176:	2180      	movs	r1, #128	; 0x80
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 f9f5 	bl	8008568 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800717e:	e023      	b.n	80071c8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fbfe 	bl	8007984 <USBD_CtlError>
        break;
 8007188:	e01e      	b.n	80071c8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	885b      	ldrh	r3, [r3, #2]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d119      	bne.n	80071c6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007192:	7bbb      	ldrb	r3, [r7, #14]
 8007194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007198:	2b00      	cmp	r3, #0
 800719a:	d004      	beq.n	80071a6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 fa00 	bl	80085a6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fcb7 	bl	8007b1a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
        }
        break;
 80071ba:	e004      	b.n	80071c6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fbe0 	bl	8007984 <USBD_CtlError>
        break;
 80071c4:	e000      	b.n	80071c8 <USBD_StdEPReq+0x13c>
        break;
 80071c6:	bf00      	nop
      }
      break;
 80071c8:	e0aa      	b.n	8007320 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d002      	beq.n	80071da <USBD_StdEPReq+0x14e>
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d032      	beq.n	800723e <USBD_StdEPReq+0x1b2>
 80071d8:	e097      	b.n	800730a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <USBD_StdEPReq+0x164>
 80071e0:	7bbb      	ldrb	r3, [r7, #14]
 80071e2:	2b80      	cmp	r3, #128	; 0x80
 80071e4:	d004      	beq.n	80071f0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fbcb 	bl	8007984 <USBD_CtlError>
          break;
 80071ee:	e091      	b.n	8007314 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	da0b      	bge.n	8007210 <USBD_StdEPReq+0x184>
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	3310      	adds	r3, #16
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	4413      	add	r3, r2
 800720c:	3304      	adds	r3, #4
 800720e:	e00b      	b.n	8007228 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4413      	add	r3, r2
 8007226:	3304      	adds	r3, #4
 8007228:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2200      	movs	r2, #0
 800722e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2202      	movs	r2, #2
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fc15 	bl	8007a66 <USBD_CtlSendData>
        break;
 800723c:	e06a      	b.n	8007314 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800723e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007242:	2b00      	cmp	r3, #0
 8007244:	da11      	bge.n	800726a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	f003 020f 	and.w	r2, r3, #15
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	440b      	add	r3, r1
 8007258:	3324      	adds	r3, #36	; 0x24
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d117      	bne.n	8007290 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fb8e 	bl	8007984 <USBD_CtlError>
            break;
 8007268:	e054      	b.n	8007314 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	f003 020f 	and.w	r2, r3, #15
 8007270:	6879      	ldr	r1, [r7, #4]
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	440b      	add	r3, r1
 800727c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d104      	bne.n	8007290 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fb7b 	bl	8007984 <USBD_CtlError>
            break;
 800728e:	e041      	b.n	8007314 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007290:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007294:	2b00      	cmp	r3, #0
 8007296:	da0b      	bge.n	80072b0 <USBD_StdEPReq+0x224>
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	3310      	adds	r3, #16
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	4413      	add	r3, r2
 80072ac:	3304      	adds	r3, #4
 80072ae:	e00b      	b.n	80072c8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072b6:	4613      	mov	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	4413      	add	r3, r2
 80072c6:	3304      	adds	r3, #4
 80072c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <USBD_StdEPReq+0x24a>
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	2b80      	cmp	r3, #128	; 0x80
 80072d4:	d103      	bne.n	80072de <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	e00e      	b.n	80072fc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 f97e 	bl	80085e4 <USBD_LL_IsStallEP>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2201      	movs	r2, #1
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e002      	b.n	80072fc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2202      	movs	r2, #2
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fbaf 	bl	8007a66 <USBD_CtlSendData>
          break;
 8007308:	e004      	b.n	8007314 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fb39 	bl	8007984 <USBD_CtlError>
        break;
 8007312:	bf00      	nop
      }
      break;
 8007314:	e004      	b.n	8007320 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fb33 	bl	8007984 <USBD_CtlError>
      break;
 800731e:	bf00      	nop
    }
    break;
 8007320:	e004      	b.n	800732c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fb2d 	bl	8007984 <USBD_CtlError>
    break;
 800732a:	bf00      	nop
  }

  return ret;
 800732c:	7bfb      	ldrb	r3, [r7, #15]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	885b      	ldrh	r3, [r3, #2]
 8007352:	0a1b      	lsrs	r3, r3, #8
 8007354:	b29b      	uxth	r3, r3
 8007356:	3b01      	subs	r3, #1
 8007358:	2b06      	cmp	r3, #6
 800735a:	f200 8128 	bhi.w	80075ae <USBD_GetDescriptor+0x276>
 800735e:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <USBD_GetDescriptor+0x2c>)
 8007360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007364:	08007381 	.word	0x08007381
 8007368:	08007399 	.word	0x08007399
 800736c:	080073d9 	.word	0x080073d9
 8007370:	080075af 	.word	0x080075af
 8007374:	080075af 	.word	0x080075af
 8007378:	0800754f 	.word	0x0800754f
 800737c:	0800757b 	.word	0x0800757b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	7c12      	ldrb	r2, [r2, #16]
 800738c:	f107 0108 	add.w	r1, r7, #8
 8007390:	4610      	mov	r0, r2
 8007392:	4798      	blx	r3
 8007394:	60f8      	str	r0, [r7, #12]
    break;
 8007396:	e112      	b.n	80075be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	7c1b      	ldrb	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10d      	bne.n	80073bc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a8:	f107 0208 	add.w	r2, r7, #8
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	2202      	movs	r2, #2
 80073b8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80073ba:	e100      	b.n	80075be <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	f107 0208 	add.w	r2, r7, #8
 80073c8:	4610      	mov	r0, r2
 80073ca:	4798      	blx	r3
 80073cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3301      	adds	r3, #1
 80073d2:	2202      	movs	r2, #2
 80073d4:	701a      	strb	r2, [r3, #0]
    break;
 80073d6:	e0f2      	b.n	80075be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	885b      	ldrh	r3, [r3, #2]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b05      	cmp	r3, #5
 80073e0:	f200 80ac 	bhi.w	800753c <USBD_GetDescriptor+0x204>
 80073e4:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <USBD_GetDescriptor+0xb4>)
 80073e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ea:	bf00      	nop
 80073ec:	08007405 	.word	0x08007405
 80073f0:	08007439 	.word	0x08007439
 80073f4:	0800746d 	.word	0x0800746d
 80073f8:	080074a1 	.word	0x080074a1
 80073fc:	080074d5 	.word	0x080074d5
 8007400:	08007509 	.word	0x08007509
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00b      	beq.n	8007428 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	7c12      	ldrb	r2, [r2, #16]
 800741c:	f107 0108 	add.w	r1, r7, #8
 8007420:	4610      	mov	r0, r2
 8007422:	4798      	blx	r3
 8007424:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007426:	e091      	b.n	800754c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007428:	6839      	ldr	r1, [r7, #0]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 faaa 	bl	8007984 <USBD_CtlError>
        err++;
 8007430:	7afb      	ldrb	r3, [r7, #11]
 8007432:	3301      	adds	r3, #1
 8007434:	72fb      	strb	r3, [r7, #11]
      break;
 8007436:	e089      	b.n	800754c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00b      	beq.n	800745c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	7c12      	ldrb	r2, [r2, #16]
 8007450:	f107 0108 	add.w	r1, r7, #8
 8007454:	4610      	mov	r0, r2
 8007456:	4798      	blx	r3
 8007458:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800745a:	e077      	b.n	800754c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fa90 	bl	8007984 <USBD_CtlError>
        err++;
 8007464:	7afb      	ldrb	r3, [r7, #11]
 8007466:	3301      	adds	r3, #1
 8007468:	72fb      	strb	r3, [r7, #11]
      break;
 800746a:	e06f      	b.n	800754c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	7c12      	ldrb	r2, [r2, #16]
 8007484:	f107 0108 	add.w	r1, r7, #8
 8007488:	4610      	mov	r0, r2
 800748a:	4798      	blx	r3
 800748c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800748e:	e05d      	b.n	800754c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fa76 	bl	8007984 <USBD_CtlError>
        err++;
 8007498:	7afb      	ldrb	r3, [r7, #11]
 800749a:	3301      	adds	r3, #1
 800749c:	72fb      	strb	r3, [r7, #11]
      break;
 800749e:	e055      	b.n	800754c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	7c12      	ldrb	r2, [r2, #16]
 80074b8:	f107 0108 	add.w	r1, r7, #8
 80074bc:	4610      	mov	r0, r2
 80074be:	4798      	blx	r3
 80074c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074c2:	e043      	b.n	800754c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fa5c 	bl	8007984 <USBD_CtlError>
        err++;
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	3301      	adds	r3, #1
 80074d0:	72fb      	strb	r3, [r7, #11]
      break;
 80074d2:	e03b      	b.n	800754c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	7c12      	ldrb	r2, [r2, #16]
 80074ec:	f107 0108 	add.w	r1, r7, #8
 80074f0:	4610      	mov	r0, r2
 80074f2:	4798      	blx	r3
 80074f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074f6:	e029      	b.n	800754c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fa42 	bl	8007984 <USBD_CtlError>
        err++;
 8007500:	7afb      	ldrb	r3, [r7, #11]
 8007502:	3301      	adds	r3, #1
 8007504:	72fb      	strb	r3, [r7, #11]
      break;
 8007506:	e021      	b.n	800754c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	7c12      	ldrb	r2, [r2, #16]
 8007520:	f107 0108 	add.w	r1, r7, #8
 8007524:	4610      	mov	r0, r2
 8007526:	4798      	blx	r3
 8007528:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800752a:	e00f      	b.n	800754c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fa28 	bl	8007984 <USBD_CtlError>
        err++;
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	3301      	adds	r3, #1
 8007538:	72fb      	strb	r3, [r7, #11]
      break;
 800753a:	e007      	b.n	800754c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fa20 	bl	8007984 <USBD_CtlError>
      err++;
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	3301      	adds	r3, #1
 8007548:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800754a:	bf00      	nop
    }
    break;
 800754c:	e037      	b.n	80075be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	7c1b      	ldrb	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755e:	f107 0208 	add.w	r2, r7, #8
 8007562:	4610      	mov	r0, r2
 8007564:	4798      	blx	r3
 8007566:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007568:	e029      	b.n	80075be <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fa09 	bl	8007984 <USBD_CtlError>
      err++;
 8007572:	7afb      	ldrb	r3, [r7, #11]
 8007574:	3301      	adds	r3, #1
 8007576:	72fb      	strb	r3, [r7, #11]
    break;
 8007578:	e021      	b.n	80075be <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	7c1b      	ldrb	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10d      	bne.n	800759e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	f107 0208 	add.w	r2, r7, #8
 800758e:	4610      	mov	r0, r2
 8007590:	4798      	blx	r3
 8007592:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3301      	adds	r3, #1
 8007598:	2207      	movs	r2, #7
 800759a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800759c:	e00f      	b.n	80075be <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f9ef 	bl	8007984 <USBD_CtlError>
      err++;
 80075a6:	7afb      	ldrb	r3, [r7, #11]
 80075a8:	3301      	adds	r3, #1
 80075aa:	72fb      	strb	r3, [r7, #11]
    break;
 80075ac:	e007      	b.n	80075be <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f9e7 	bl	8007984 <USBD_CtlError>
    err++;
 80075b6:	7afb      	ldrb	r3, [r7, #11]
 80075b8:	3301      	adds	r3, #1
 80075ba:	72fb      	strb	r3, [r7, #11]
    break;
 80075bc:	bf00      	nop
  }

  if (err != 0U)
 80075be:	7afb      	ldrb	r3, [r7, #11]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d11e      	bne.n	8007602 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	88db      	ldrh	r3, [r3, #6]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d016      	beq.n	80075fa <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80075cc:	893b      	ldrh	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00e      	beq.n	80075f0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	88da      	ldrh	r2, [r3, #6]
 80075d6:	893b      	ldrh	r3, [r7, #8]
 80075d8:	4293      	cmp	r3, r2
 80075da:	bf28      	it	cs
 80075dc:	4613      	movcs	r3, r2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80075e2:	893b      	ldrh	r3, [r7, #8]
 80075e4:	461a      	mov	r2, r3
 80075e6:	68f9      	ldr	r1, [r7, #12]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fa3c 	bl	8007a66 <USBD_CtlSendData>
 80075ee:	e009      	b.n	8007604 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f9c6 	bl	8007984 <USBD_CtlError>
 80075f8:	e004      	b.n	8007604 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fa8d 	bl	8007b1a <USBD_CtlSendStatus>
 8007600:	e000      	b.n	8007604 <USBD_GetDescriptor+0x2cc>
    return;
 8007602:	bf00      	nop
    }
  }
}
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop

0800760c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	889b      	ldrh	r3, [r3, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d130      	bne.n	8007680 <USBD_SetAddress+0x74>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	88db      	ldrh	r3, [r3, #6]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d12c      	bne.n	8007680 <USBD_SetAddress+0x74>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	885b      	ldrh	r3, [r3, #2]
 800762a:	2b7f      	cmp	r3, #127	; 0x7f
 800762c:	d828      	bhi.n	8007680 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	885b      	ldrh	r3, [r3, #2]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007638:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007640:	2b03      	cmp	r3, #3
 8007642:	d104      	bne.n	800764e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f99c 	bl	8007984 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764c:	e01c      	b.n	8007688 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	7bfa      	ldrb	r2, [r7, #15]
 8007652:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 ffee 	bl	800863c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fa5a 	bl	8007b1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d004      	beq.n	8007676 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007674:	e008      	b.n	8007688 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767e:	e003      	b.n	8007688 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f97e 	bl	8007984 <USBD_CtlError>
  }
}
 8007688:	bf00      	nop
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	885b      	ldrh	r3, [r3, #2]
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	4b4b      	ldr	r3, [pc, #300]	; (80077d4 <USBD_SetConfig+0x144>)
 80076a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076a8:	4b4a      	ldr	r3, [pc, #296]	; (80077d4 <USBD_SetConfig+0x144>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d905      	bls.n	80076bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f966 	bl	8007984 <USBD_CtlError>
    return USBD_FAIL;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e087      	b.n	80077cc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d002      	beq.n	80076cc <USBD_SetConfig+0x3c>
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d025      	beq.n	8007716 <USBD_SetConfig+0x86>
 80076ca:	e071      	b.n	80077b0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80076cc:	4b41      	ldr	r3, [pc, #260]	; (80077d4 <USBD_SetConfig+0x144>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01c      	beq.n	800770e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80076d4:	4b3f      	ldr	r3, [pc, #252]	; (80077d4 <USBD_SetConfig+0x144>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80076de:	4b3d      	ldr	r3, [pc, #244]	; (80077d4 <USBD_SetConfig+0x144>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff f9a7 	bl	8006a38 <USBD_SetClassConfig>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d004      	beq.n	80076fe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f944 	bl	8007984 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80076fc:	e065      	b.n	80077ca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa0b 	bl	8007b1a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2203      	movs	r2, #3
 8007708:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800770c:	e05d      	b.n	80077ca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa03 	bl	8007b1a <USBD_CtlSendStatus>
    break;
 8007714:	e059      	b.n	80077ca <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007716:	4b2f      	ldr	r3, [pc, #188]	; (80077d4 <USBD_SetConfig+0x144>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d112      	bne.n	8007744 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2202      	movs	r2, #2
 8007722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007726:	4b2b      	ldr	r3, [pc, #172]	; (80077d4 <USBD_SetConfig+0x144>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007730:	4b28      	ldr	r3, [pc, #160]	; (80077d4 <USBD_SetConfig+0x144>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7ff f99a 	bl	8006a70 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f9ec 	bl	8007b1a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007742:	e042      	b.n	80077ca <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007744:	4b23      	ldr	r3, [pc, #140]	; (80077d4 <USBD_SetConfig+0x144>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	429a      	cmp	r2, r3
 8007750:	d02a      	beq.n	80077a8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7ff f988 	bl	8006a70 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007760:	4b1c      	ldr	r3, [pc, #112]	; (80077d4 <USBD_SetConfig+0x144>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800776a:	4b1a      	ldr	r3, [pc, #104]	; (80077d4 <USBD_SetConfig+0x144>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff f961 	bl	8006a38 <USBD_SetClassConfig>
 8007776:	4603      	mov	r3, r0
 8007778:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00f      	beq.n	80077a0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f8fe 	bl	8007984 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff f96d 	bl	8006a70 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2202      	movs	r2, #2
 800779a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800779e:	e014      	b.n	80077ca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f9ba 	bl	8007b1a <USBD_CtlSendStatus>
    break;
 80077a6:	e010      	b.n	80077ca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f9b6 	bl	8007b1a <USBD_CtlSendStatus>
    break;
 80077ae:	e00c      	b.n	80077ca <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f8e6 	bl	8007984 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077b8:	4b06      	ldr	r3, [pc, #24]	; (80077d4 <USBD_SetConfig+0x144>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff f956 	bl	8006a70 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80077c4:	2303      	movs	r3, #3
 80077c6:	73fb      	strb	r3, [r7, #15]
    break;
 80077c8:	bf00      	nop
  }

  return ret;
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20000204 	.word	0x20000204

080077d8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	88db      	ldrh	r3, [r3, #6]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d004      	beq.n	80077f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f8c9 	bl	8007984 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80077f2:	e021      	b.n	8007838 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	db17      	blt.n	800782e <USBD_GetConfig+0x56>
 80077fe:	2b02      	cmp	r3, #2
 8007800:	dd02      	ble.n	8007808 <USBD_GetConfig+0x30>
 8007802:	2b03      	cmp	r3, #3
 8007804:	d00b      	beq.n	800781e <USBD_GetConfig+0x46>
 8007806:	e012      	b.n	800782e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3308      	adds	r3, #8
 8007812:	2201      	movs	r2, #1
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f925 	bl	8007a66 <USBD_CtlSendData>
      break;
 800781c:	e00c      	b.n	8007838 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3304      	adds	r3, #4
 8007822:	2201      	movs	r2, #1
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f91d 	bl	8007a66 <USBD_CtlSendData>
      break;
 800782c:	e004      	b.n	8007838 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f8a7 	bl	8007984 <USBD_CtlError>
      break;
 8007836:	bf00      	nop
}
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007850:	3b01      	subs	r3, #1
 8007852:	2b02      	cmp	r3, #2
 8007854:	d81e      	bhi.n	8007894 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	88db      	ldrh	r3, [r3, #6]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d004      	beq.n	8007868 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f88f 	bl	8007984 <USBD_CtlError>
      break;
 8007866:	e01a      	b.n	800789e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f043 0202 	orr.w	r2, r3, #2
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	330c      	adds	r3, #12
 8007888:	2202      	movs	r2, #2
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f8ea 	bl	8007a66 <USBD_CtlSendData>
    break;
 8007892:	e004      	b.n	800789e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f874 	bl	8007984 <USBD_CtlError>
    break;
 800789c:	bf00      	nop
  }
}
 800789e:	bf00      	nop
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	885b      	ldrh	r3, [r3, #2]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d106      	bne.n	80078c6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f92a 	bl	8007b1a <USBD_CtlSendStatus>
  }
}
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078de:	3b01      	subs	r3, #1
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d80b      	bhi.n	80078fc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	885b      	ldrh	r3, [r3, #2]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d10c      	bne.n	8007906 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f910 	bl	8007b1a <USBD_CtlSendStatus>
      }
      break;
 80078fa:	e004      	b.n	8007906 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f840 	bl	8007984 <USBD_CtlError>
      break;
 8007904:	e000      	b.n	8007908 <USBD_ClrFeature+0x3a>
      break;
 8007906:	bf00      	nop
  }
}
 8007908:	bf00      	nop
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	781a      	ldrb	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3301      	adds	r3, #1
 800792a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	781a      	ldrb	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	3301      	adds	r3, #1
 8007938:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f7ff fad3 	bl	8006ee6 <SWAPBYTE>
 8007940:	4603      	mov	r3, r0
 8007942:	461a      	mov	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3301      	adds	r3, #1
 800794c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3301      	adds	r3, #1
 8007952:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f7ff fac6 	bl	8006ee6 <SWAPBYTE>
 800795a:	4603      	mov	r3, r0
 800795c:	461a      	mov	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3301      	adds	r3, #1
 8007966:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f7ff fab9 	bl	8006ee6 <SWAPBYTE>
 8007974:	4603      	mov	r3, r0
 8007976:	461a      	mov	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	80da      	strh	r2, [r3, #6]
}
 800797c:	bf00      	nop
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800798e:	2180      	movs	r1, #128	; 0x80
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fde9 	bl	8008568 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007996:	2100      	movs	r1, #0
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fde5 	bl	8008568 <USBD_LL_StallEP>
}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b086      	sub	sp, #24
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d036      	beq.n	8007a2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80079c0:	6938      	ldr	r0, [r7, #16]
 80079c2:	f000 f836 	bl	8007a32 <USBD_GetLen>
 80079c6:	4603      	mov	r3, r0
 80079c8:	3301      	adds	r3, #1
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	4413      	add	r3, r2
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	7812      	ldrb	r2, [r2, #0]
 80079de:	701a      	strb	r2, [r3, #0]
  idx++;
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	3301      	adds	r3, #1
 80079e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	4413      	add	r3, r2
 80079ec:	2203      	movs	r2, #3
 80079ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
 80079f2:	3301      	adds	r3, #1
 80079f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80079f6:	e013      	b.n	8007a20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	4413      	add	r3, r2
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	7812      	ldrb	r2, [r2, #0]
 8007a02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	3301      	adds	r3, #1
 8007a08:	613b      	str	r3, [r7, #16]
    idx++;
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a10:	7dfb      	ldrb	r3, [r7, #23]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	4413      	add	r3, r2
 8007a16:	2200      	movs	r2, #0
 8007a18:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e7      	bne.n	80079f8 <USBD_GetString+0x52>
 8007a28:	e000      	b.n	8007a2c <USBD_GetString+0x86>
    return;
 8007a2a:	bf00      	nop
  }
}
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a42:	e005      	b.n	8007a50 <USBD_GetLen+0x1e>
  {
    len++;
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	3301      	adds	r3, #1
 8007a48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1f5      	bne.n	8007a44 <USBD_GetLen+0x12>
  }

  return len;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b084      	sub	sp, #16
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2202      	movs	r2, #2
 8007a76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 fdf4 	bl	800867a <USBD_LL_Transmit>

  return USBD_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	2100      	movs	r1, #0
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 fde3 	bl	800867a <USBD_LL_Transmit>

  return USBD_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2203      	movs	r2, #3
 8007ace:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 fde7 	bl	80086bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	2100      	movs	r1, #0
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 fdd6 	bl	80086bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2204      	movs	r2, #4
 8007b26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2100      	movs	r1, #0
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fda2 	bl	800867a <USBD_LL_Transmit>

  return USBD_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2205      	movs	r2, #5
 8007b4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b50:	2300      	movs	r3, #0
 8007b52:	2200      	movs	r2, #0
 8007b54:	2100      	movs	r1, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fdb0 	bl	80086bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4912      	ldr	r1, [pc, #72]	; (8007bb8 <MX_USB_DEVICE_Init+0x50>)
 8007b70:	4812      	ldr	r0, [pc, #72]	; (8007bbc <MX_USB_DEVICE_Init+0x54>)
 8007b72:	f7fe fef3 	bl	800695c <USBD_Init>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b7c:	f7f8 ffe4 	bl	8000b48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b80:	490f      	ldr	r1, [pc, #60]	; (8007bc0 <MX_USB_DEVICE_Init+0x58>)
 8007b82:	480e      	ldr	r0, [pc, #56]	; (8007bbc <MX_USB_DEVICE_Init+0x54>)
 8007b84:	f7fe ff20 	bl	80069c8 <USBD_RegisterClass>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b8e:	f7f8 ffdb 	bl	8000b48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b92:	490c      	ldr	r1, [pc, #48]	; (8007bc4 <MX_USB_DEVICE_Init+0x5c>)
 8007b94:	4809      	ldr	r0, [pc, #36]	; (8007bbc <MX_USB_DEVICE_Init+0x54>)
 8007b96:	f7fe fe45 	bl	8006824 <USBD_CDC_RegisterInterface>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ba0:	f7f8 ffd2 	bl	8000b48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ba4:	4805      	ldr	r0, [pc, #20]	; (8007bbc <MX_USB_DEVICE_Init+0x54>)
 8007ba6:	f7fe ff30 	bl	8006a0a <USBD_Start>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007bb0:	f7f8 ffca 	bl	8000b48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007bb4:	bf00      	nop
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	20000130 	.word	0x20000130
 8007bbc:	20000468 	.word	0x20000468
 8007bc0:	20000018 	.word	0x20000018
 8007bc4:	2000011c 	.word	0x2000011c

08007bc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007bcc:	2200      	movs	r2, #0
 8007bce:	4905      	ldr	r1, [pc, #20]	; (8007be4 <CDC_Init_FS+0x1c>)
 8007bd0:	4805      	ldr	r0, [pc, #20]	; (8007be8 <CDC_Init_FS+0x20>)
 8007bd2:	f7fe fe3c 	bl	800684e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007bd6:	4905      	ldr	r1, [pc, #20]	; (8007bec <CDC_Init_FS+0x24>)
 8007bd8:	4803      	ldr	r0, [pc, #12]	; (8007be8 <CDC_Init_FS+0x20>)
 8007bda:	f7fe fe51 	bl	8006880 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007bde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	200007b8 	.word	0x200007b8
 8007be8:	20000468 	.word	0x20000468
 8007bec:	20000738 	.word	0x20000738

08007bf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007bf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	6039      	str	r1, [r7, #0]
 8007c0a:	71fb      	strb	r3, [r7, #7]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	2b23      	cmp	r3, #35	; 0x23
 8007c14:	d84a      	bhi.n	8007cac <CDC_Control_FS+0xac>
 8007c16:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <CDC_Control_FS+0x1c>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007cad 	.word	0x08007cad
 8007c20:	08007cad 	.word	0x08007cad
 8007c24:	08007cad 	.word	0x08007cad
 8007c28:	08007cad 	.word	0x08007cad
 8007c2c:	08007cad 	.word	0x08007cad
 8007c30:	08007cad 	.word	0x08007cad
 8007c34:	08007cad 	.word	0x08007cad
 8007c38:	08007cad 	.word	0x08007cad
 8007c3c:	08007cad 	.word	0x08007cad
 8007c40:	08007cad 	.word	0x08007cad
 8007c44:	08007cad 	.word	0x08007cad
 8007c48:	08007cad 	.word	0x08007cad
 8007c4c:	08007cad 	.word	0x08007cad
 8007c50:	08007cad 	.word	0x08007cad
 8007c54:	08007cad 	.word	0x08007cad
 8007c58:	08007cad 	.word	0x08007cad
 8007c5c:	08007cad 	.word	0x08007cad
 8007c60:	08007cad 	.word	0x08007cad
 8007c64:	08007cad 	.word	0x08007cad
 8007c68:	08007cad 	.word	0x08007cad
 8007c6c:	08007cad 	.word	0x08007cad
 8007c70:	08007cad 	.word	0x08007cad
 8007c74:	08007cad 	.word	0x08007cad
 8007c78:	08007cad 	.word	0x08007cad
 8007c7c:	08007cad 	.word	0x08007cad
 8007c80:	08007cad 	.word	0x08007cad
 8007c84:	08007cad 	.word	0x08007cad
 8007c88:	08007cad 	.word	0x08007cad
 8007c8c:	08007cad 	.word	0x08007cad
 8007c90:	08007cad 	.word	0x08007cad
 8007c94:	08007cad 	.word	0x08007cad
 8007c98:	08007cad 	.word	0x08007cad
 8007c9c:	08007cad 	.word	0x08007cad
 8007ca0:	08007cad 	.word	0x08007cad
 8007ca4:	08007cad 	.word	0x08007cad
 8007ca8:	08007cad 	.word	0x08007cad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007cac:	bf00      	nop
  }

  return (USBD_OK);
 8007cae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ccc:	485d      	ldr	r0, [pc, #372]	; (8007e44 <CDC_Receive_FS+0x188>)
 8007cce:	f7fa f84d 	bl	8001d6c <HAL_GPIO_WritePin>
  static uint8_t txLen;
  static uint8_t rxLen;
  static uint8_t RX_Buf_Temp[APP_RX_DATA_SIZE];

  /* Get data from serial com */
  if(USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf) != USBD_OK || USBD_CDC_ReceivePacket(&hUsbDeviceFS) != USBD_OK)
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	485c      	ldr	r0, [pc, #368]	; (8007e48 <CDC_Receive_FS+0x18c>)
 8007cd6:	f7fe fdd3 	bl	8006880 <USBD_CDC_SetRxBuffer>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d105      	bne.n	8007cec <CDC_Receive_FS+0x30>
 8007ce0:	4859      	ldr	r0, [pc, #356]	; (8007e48 <CDC_Receive_FS+0x18c>)
 8007ce2:	f7fe fe11 	bl	8006908 <USBD_CDC_ReceivePacket>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d007      	beq.n	8007cfc <CDC_Receive_FS+0x40>
  {
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8007cec:	2200      	movs	r2, #0
 8007cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cf2:	4854      	ldr	r0, [pc, #336]	; (8007e44 <CDC_Receive_FS+0x188>)
 8007cf4:	f7fa f83a 	bl	8001d6c <HAL_GPIO_WritePin>
	  return(USBD_BUSY);
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e09f      	b.n	8007e3c <CDC_Receive_FS+0x180>
  }

  for(uint8_t i = 0; i < (*Len); i++){
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	73fb      	strb	r3, [r7, #15]
 8007d00:	e07a      	b.n	8007df8 <CDC_Receive_FS+0x13c>

	  /* Avoid buffer overflow */
	  if(txLen == APP_TX_DATA_SIZE)
 8007d02:	4b52      	ldr	r3, [pc, #328]	; (8007e4c <CDC_Receive_FS+0x190>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b80      	cmp	r3, #128	; 0x80
 8007d08:	d102      	bne.n	8007d10 <CDC_Receive_FS+0x54>
	  {
		  txLen = 0;
 8007d0a:	4b50      	ldr	r3, [pc, #320]	; (8007e4c <CDC_Receive_FS+0x190>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	701a      	strb	r2, [r3, #0]
	  }
	  if(rxLen == APP_RX_DATA_SIZE)
 8007d10:	4b4f      	ldr	r3, [pc, #316]	; (8007e50 <CDC_Receive_FS+0x194>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b80      	cmp	r3, #128	; 0x80
 8007d16:	d102      	bne.n	8007d1e <CDC_Receive_FS+0x62>
	  {
 		  rxLen = 0;
 8007d18:	4b4d      	ldr	r3, [pc, #308]	; (8007e50 <CDC_Receive_FS+0x194>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	701a      	strb	r2, [r3, #0]
 	  }

	  /* If Backspace key: clear the last char */
	  if((UserTxBufferFS[txLen++] = Buf[i]) == '\b'){
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	441a      	add	r2, r3
 8007d24:	4b49      	ldr	r3, [pc, #292]	; (8007e4c <CDC_Receive_FS+0x190>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	1c59      	adds	r1, r3, #1
 8007d2a:	b2c8      	uxtb	r0, r1
 8007d2c:	4947      	ldr	r1, [pc, #284]	; (8007e4c <CDC_Receive_FS+0x190>)
 8007d2e:	7008      	strb	r0, [r1, #0]
 8007d30:	7811      	ldrb	r1, [r2, #0]
 8007d32:	4a48      	ldr	r2, [pc, #288]	; (8007e54 <CDC_Receive_FS+0x198>)
 8007d34:	54d1      	strb	r1, [r2, r3]
 8007d36:	4a47      	ldr	r2, [pc, #284]	; (8007e54 <CDC_Receive_FS+0x198>)
 8007d38:	5cd3      	ldrb	r3, [r2, r3]
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d11e      	bne.n	8007d7c <CDC_Receive_FS+0xc0>
		  UserTxBufferFS[txLen++] = ' ';
 8007d3e:	4b43      	ldr	r3, [pc, #268]	; (8007e4c <CDC_Receive_FS+0x190>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	b2d1      	uxtb	r1, r2
 8007d46:	4a41      	ldr	r2, [pc, #260]	; (8007e4c <CDC_Receive_FS+0x190>)
 8007d48:	7011      	strb	r1, [r2, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	4b41      	ldr	r3, [pc, #260]	; (8007e54 <CDC_Receive_FS+0x198>)
 8007d4e:	2120      	movs	r1, #32
 8007d50:	5499      	strb	r1, [r3, r2]
		  UserTxBufferFS[txLen++] = '\b';
 8007d52:	4b3e      	ldr	r3, [pc, #248]	; (8007e4c <CDC_Receive_FS+0x190>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	b2d1      	uxtb	r1, r2
 8007d5a:	4a3c      	ldr	r2, [pc, #240]	; (8007e4c <CDC_Receive_FS+0x190>)
 8007d5c:	7011      	strb	r1, [r2, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	4b3c      	ldr	r3, [pc, #240]	; (8007e54 <CDC_Receive_FS+0x198>)
 8007d62:	2108      	movs	r1, #8
 8007d64:	5499      	strb	r1, [r3, r2]
		  if(rxLen){
 8007d66:	4b3a      	ldr	r3, [pc, #232]	; (8007e50 <CDC_Receive_FS+0x194>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d041      	beq.n	8007df2 <CDC_Receive_FS+0x136>
			  rxLen--;
 8007d6e:	4b38      	ldr	r3, [pc, #224]	; (8007e50 <CDC_Receive_FS+0x194>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	4b36      	ldr	r3, [pc, #216]	; (8007e50 <CDC_Receive_FS+0x194>)
 8007d78:	701a      	strb	r2, [r3, #0]
 8007d7a:	e03a      	b.n	8007df2 <CDC_Receive_FS+0x136>
		  }
	  }
	  /* Else if Enter key: add a \n to terminal and extract output buffer */
	  else if(Buf[i] == '\r' || Buf[i] == '\0'){
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	4413      	add	r3, r2
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b0d      	cmp	r3, #13
 8007d86:	d005      	beq.n	8007d94 <CDC_Receive_FS+0xd8>
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d121      	bne.n	8007dd8 <CDC_Receive_FS+0x11c>
		  UserTxBufferFS[txLen++] = '\n';
 8007d94:	4b2d      	ldr	r3, [pc, #180]	; (8007e4c <CDC_Receive_FS+0x190>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	1c5a      	adds	r2, r3, #1
 8007d9a:	b2d1      	uxtb	r1, r2
 8007d9c:	4a2b      	ldr	r2, [pc, #172]	; (8007e4c <CDC_Receive_FS+0x190>)
 8007d9e:	7011      	strb	r1, [r2, #0]
 8007da0:	461a      	mov	r2, r3
 8007da2:	4b2c      	ldr	r3, [pc, #176]	; (8007e54 <CDC_Receive_FS+0x198>)
 8007da4:	210a      	movs	r1, #10
 8007da6:	5499      	strb	r1, [r3, r2]
		  RX_Buf_Temp[rxLen++] = '\0';
 8007da8:	4b29      	ldr	r3, [pc, #164]	; (8007e50 <CDC_Receive_FS+0x194>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	b2d1      	uxtb	r1, r2
 8007db0:	4a27      	ldr	r2, [pc, #156]	; (8007e50 <CDC_Receive_FS+0x194>)
 8007db2:	7011      	strb	r1, [r2, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	4b28      	ldr	r3, [pc, #160]	; (8007e58 <CDC_Receive_FS+0x19c>)
 8007db8:	2100      	movs	r1, #0
 8007dba:	5499      	strb	r1, [r3, r2]
		  memcpy(UserRxBufferFS, RX_Buf_Temp, rxLen);
 8007dbc:	4b24      	ldr	r3, [pc, #144]	; (8007e50 <CDC_Receive_FS+0x194>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	4925      	ldr	r1, [pc, #148]	; (8007e58 <CDC_Receive_FS+0x19c>)
 8007dc4:	4825      	ldr	r0, [pc, #148]	; (8007e5c <CDC_Receive_FS+0x1a0>)
 8007dc6:	f000 fd13 	bl	80087f0 <memcpy>
		  CDC_RX_DATA_WAIT = 1;
 8007dca:	4b25      	ldr	r3, [pc, #148]	; (8007e60 <CDC_Receive_FS+0x1a4>)
 8007dcc:	2201      	movs	r2, #1
 8007dce:	701a      	strb	r2, [r3, #0]
		  rxLen = 0;
 8007dd0:	4b1f      	ldr	r3, [pc, #124]	; (8007e50 <CDC_Receive_FS+0x194>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	e00c      	b.n	8007df2 <CDC_Receive_FS+0x136>
	  }
	  /* Else only copy data */
	  else{
		  RX_Buf_Temp[rxLen++] = Buf[i];
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	441a      	add	r2, r3
 8007dde:	4b1c      	ldr	r3, [pc, #112]	; (8007e50 <CDC_Receive_FS+0x194>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	1c59      	adds	r1, r3, #1
 8007de4:	b2c8      	uxtb	r0, r1
 8007de6:	491a      	ldr	r1, [pc, #104]	; (8007e50 <CDC_Receive_FS+0x194>)
 8007de8:	7008      	strb	r0, [r1, #0]
 8007dea:	4619      	mov	r1, r3
 8007dec:	7812      	ldrb	r2, [r2, #0]
 8007dee:	4b1a      	ldr	r3, [pc, #104]	; (8007e58 <CDC_Receive_FS+0x19c>)
 8007df0:	545a      	strb	r2, [r3, r1]
  for(uint8_t i = 0; i < (*Len); i++){
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	3301      	adds	r3, #1
 8007df6:	73fb      	strb	r3, [r7, #15]
 8007df8:	7bfa      	ldrb	r2, [r7, #15]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	f4ff af7f 	bcc.w	8007d02 <CDC_Receive_FS+0x46>
	  }
  }

  /* Send result to terminal */
  if(CDC_Transmit_FS(UserTxBufferFS, txLen) == USBD_OK){
 8007e04:	4b11      	ldr	r3, [pc, #68]	; (8007e4c <CDC_Receive_FS+0x190>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4811      	ldr	r0, [pc, #68]	; (8007e54 <CDC_Receive_FS+0x198>)
 8007e0e:	f000 f829 	bl	8007e64 <CDC_Transmit_FS>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10a      	bne.n	8007e2e <CDC_Receive_FS+0x172>
	  txLen = 0;
 8007e18:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <CDC_Receive_FS+0x190>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	701a      	strb	r2, [r3, #0]
  else
  {
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	  return(USBD_BUSY);
  }
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e24:	4807      	ldr	r0, [pc, #28]	; (8007e44 <CDC_Receive_FS+0x188>)
 8007e26:	f7f9 ffa1 	bl	8001d6c <HAL_GPIO_WritePin>
  return (USBD_OK);
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	e006      	b.n	8007e3c <CDC_Receive_FS+0x180>
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e34:	4803      	ldr	r0, [pc, #12]	; (8007e44 <CDC_Receive_FS+0x188>)
 8007e36:	f7f9 ff99 	bl	8001d6c <HAL_GPIO_WritePin>
	  return(USBD_BUSY);
 8007e3a:	2301      	movs	r3, #1
  /* USER CODE END 6 */
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	40020c00 	.word	0x40020c00
 8007e48:	20000468 	.word	0x20000468
 8007e4c:	20000206 	.word	0x20000206
 8007e50:	20000207 	.word	0x20000207
 8007e54:	200007b8 	.word	0x200007b8
 8007e58:	20000208 	.word	0x20000208
 8007e5c:	20000738 	.word	0x20000738
 8007e60:	20000205 	.word	0x20000205

08007e64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	807b      	strh	r3, [r7, #2]

	/* USER CODE BEGIN 7 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8007e70:	2201      	movs	r2, #1
 8007e72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e76:	4819      	ldr	r0, [pc, #100]	; (8007edc <CDC_Transmit_FS+0x78>)
 8007e78:	f7f9 ff78 	bl	8001d6c <HAL_GPIO_WritePin>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007e7c:	4b18      	ldr	r3, [pc, #96]	; (8007ee0 <CDC_Transmit_FS+0x7c>)
 8007e7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e82:	60fb      	str	r3, [r7, #12]
  if (hcdc->TxState != 0)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d007      	beq.n	8007e9e <CDC_Transmit_FS+0x3a>
  {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e94:	4811      	ldr	r0, [pc, #68]	; (8007edc <CDC_Transmit_FS+0x78>)
 8007e96:	f7f9 ff69 	bl	8001d6c <HAL_GPIO_WritePin>
	return USBD_BUSY;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e01a      	b.n	8007ed4 <CDC_Transmit_FS+0x70>
  }

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e9e:	887b      	ldrh	r3, [r7, #2]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	480e      	ldr	r0, [pc, #56]	; (8007ee0 <CDC_Transmit_FS+0x7c>)
 8007ea6:	f7fe fcd2 	bl	800684e <USBD_CDC_SetTxBuffer>

  if(USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK)
 8007eaa:	480d      	ldr	r0, [pc, #52]	; (8007ee0 <CDC_Transmit_FS+0x7c>)
 8007eac:	f7fe fcfc 	bl	80068a8 <USBD_CDC_TransmitPacket>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d107      	bne.n	8007ec6 <CDC_Transmit_FS+0x62>
  {
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ebc:	4807      	ldr	r0, [pc, #28]	; (8007edc <CDC_Transmit_FS+0x78>)
 8007ebe:	f7f9 ff55 	bl	8001d6c <HAL_GPIO_WritePin>
	  return USBD_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e006      	b.n	8007ed4 <CDC_Transmit_FS+0x70>
  }
  else
  {
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ecc:	4803      	ldr	r0, [pc, #12]	; (8007edc <CDC_Transmit_FS+0x78>)
 8007ece:	f7f9 ff4d 	bl	8001d6c <HAL_GPIO_WritePin>
	  return USBD_BUSY;
 8007ed2:	2301      	movs	r3, #1
  }

  /* USER CODE END 7 */
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	40020c00 	.word	0x40020c00
 8007ee0:	20000468 	.word	0x20000468

08007ee4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	371c      	adds	r7, #28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
	...

08007f08 <CDC_Printf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_Printf(const char *format, ...)
{
 8007f08:	b40f      	push	{r0, r1, r2, r3}
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
  /* Format the string */
  va_list arg;
  va_start(arg, format);
 8007f10:	f107 0314 	add.w	r3, r7, #20
 8007f14:	607b      	str	r3, [r7, #4]
  vsprintf((char*)UserTxBufferFS, format, arg);
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	6939      	ldr	r1, [r7, #16]
 8007f1a:	480b      	ldr	r0, [pc, #44]	; (8007f48 <CDC_Printf+0x40>)
 8007f1c:	f000 fd4a 	bl	80089b4 <vsiprintf>
  va_end(arg);

  /* Transmit the buffer through serial communication */
  CDC_Transmit_FS(UserTxBufferFS, strlen((char *)UserTxBufferFS));
 8007f20:	4809      	ldr	r0, [pc, #36]	; (8007f48 <CDC_Printf+0x40>)
 8007f22:	f7f8 f955 	bl	80001d0 <strlen>
 8007f26:	4603      	mov	r3, r0
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4806      	ldr	r0, [pc, #24]	; (8007f48 <CDC_Printf+0x40>)
 8007f2e:	f7ff ff99 	bl	8007e64 <CDC_Transmit_FS>
  HAL_Delay(1);
 8007f32:	2001      	movs	r0, #1
 8007f34:	f7f9 f8de 	bl	80010f4 <HAL_Delay>
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f42:	b004      	add	sp, #16
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	200007b8 	.word	0x200007b8

08007f4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	4603      	mov	r3, r0
 8007f54:	6039      	str	r1, [r7, #0]
 8007f56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2212      	movs	r2, #18
 8007f5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f5e:	4b03      	ldr	r3, [pc, #12]	; (8007f6c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	2000014c 	.word	0x2000014c

08007f70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	6039      	str	r1, [r7, #0]
 8007f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2204      	movs	r2, #4
 8007f80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f82:	4b03      	ldr	r3, [pc, #12]	; (8007f90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	20000160 	.word	0x20000160

08007f94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	6039      	str	r1, [r7, #0]
 8007f9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d105      	bne.n	8007fb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	4907      	ldr	r1, [pc, #28]	; (8007fc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007faa:	4808      	ldr	r0, [pc, #32]	; (8007fcc <USBD_FS_ProductStrDescriptor+0x38>)
 8007fac:	f7ff fcfb 	bl	80079a6 <USBD_GetString>
 8007fb0:	e004      	b.n	8007fbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	4904      	ldr	r1, [pc, #16]	; (8007fc8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fb6:	4805      	ldr	r0, [pc, #20]	; (8007fcc <USBD_FS_ProductStrDescriptor+0x38>)
 8007fb8:	f7ff fcf5 	bl	80079a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fbc:	4b02      	ldr	r3, [pc, #8]	; (8007fc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000838 	.word	0x20000838
 8007fcc:	08009068 	.word	0x08009068

08007fd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	6039      	str	r1, [r7, #0]
 8007fda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	4904      	ldr	r1, [pc, #16]	; (8007ff0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fe0:	4804      	ldr	r0, [pc, #16]	; (8007ff4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fe2:	f7ff fce0 	bl	80079a6 <USBD_GetString>
  return USBD_StrDesc;
 8007fe6:	4b02      	ldr	r3, [pc, #8]	; (8007ff0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	20000838 	.word	0x20000838
 8007ff4:	08009080 	.word	0x08009080

08007ff8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	6039      	str	r1, [r7, #0]
 8008002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	221a      	movs	r2, #26
 8008008:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800800a:	f000 f843 	bl	8008094 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800800e:	4b02      	ldr	r3, [pc, #8]	; (8008018 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	20000164 	.word	0x20000164

0800801c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	6039      	str	r1, [r7, #0]
 8008026:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d105      	bne.n	800803a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	4907      	ldr	r1, [pc, #28]	; (8008050 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008032:	4808      	ldr	r0, [pc, #32]	; (8008054 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008034:	f7ff fcb7 	bl	80079a6 <USBD_GetString>
 8008038:	e004      	b.n	8008044 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	4904      	ldr	r1, [pc, #16]	; (8008050 <USBD_FS_ConfigStrDescriptor+0x34>)
 800803e:	4805      	ldr	r0, [pc, #20]	; (8008054 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008040:	f7ff fcb1 	bl	80079a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008044:	4b02      	ldr	r3, [pc, #8]	; (8008050 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	20000838 	.word	0x20000838
 8008054:	08009094 	.word	0x08009094

08008058 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	6039      	str	r1, [r7, #0]
 8008062:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d105      	bne.n	8008076 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	4907      	ldr	r1, [pc, #28]	; (800808c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800806e:	4808      	ldr	r0, [pc, #32]	; (8008090 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008070:	f7ff fc99 	bl	80079a6 <USBD_GetString>
 8008074:	e004      	b.n	8008080 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	4904      	ldr	r1, [pc, #16]	; (800808c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800807a:	4805      	ldr	r0, [pc, #20]	; (8008090 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800807c:	f7ff fc93 	bl	80079a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008080:	4b02      	ldr	r3, [pc, #8]	; (800808c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000838 	.word	0x20000838
 8008090:	080090a0 	.word	0x080090a0

08008094 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800809a:	4b0f      	ldr	r3, [pc, #60]	; (80080d8 <Get_SerialNum+0x44>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080a0:	4b0e      	ldr	r3, [pc, #56]	; (80080dc <Get_SerialNum+0x48>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080a6:	4b0e      	ldr	r3, [pc, #56]	; (80080e0 <Get_SerialNum+0x4c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d009      	beq.n	80080ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080ba:	2208      	movs	r2, #8
 80080bc:	4909      	ldr	r1, [pc, #36]	; (80080e4 <Get_SerialNum+0x50>)
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 f814 	bl	80080ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080c4:	2204      	movs	r2, #4
 80080c6:	4908      	ldr	r1, [pc, #32]	; (80080e8 <Get_SerialNum+0x54>)
 80080c8:	68b8      	ldr	r0, [r7, #8]
 80080ca:	f000 f80f 	bl	80080ec <IntToUnicode>
  }
}
 80080ce:	bf00      	nop
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	1fff7a10 	.word	0x1fff7a10
 80080dc:	1fff7a14 	.word	0x1fff7a14
 80080e0:	1fff7a18 	.word	0x1fff7a18
 80080e4:	20000166 	.word	0x20000166
 80080e8:	20000176 	.word	0x20000176

080080ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	4613      	mov	r3, r2
 80080f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080fe:	2300      	movs	r3, #0
 8008100:	75fb      	strb	r3, [r7, #23]
 8008102:	e027      	b.n	8008154 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	0f1b      	lsrs	r3, r3, #28
 8008108:	2b09      	cmp	r3, #9
 800810a:	d80b      	bhi.n	8008124 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	0f1b      	lsrs	r3, r3, #28
 8008110:	b2da      	uxtb	r2, r3
 8008112:	7dfb      	ldrb	r3, [r7, #23]
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	4619      	mov	r1, r3
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	440b      	add	r3, r1
 800811c:	3230      	adds	r2, #48	; 0x30
 800811e:	b2d2      	uxtb	r2, r2
 8008120:	701a      	strb	r2, [r3, #0]
 8008122:	e00a      	b.n	800813a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	0f1b      	lsrs	r3, r3, #28
 8008128:	b2da      	uxtb	r2, r3
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	4619      	mov	r1, r3
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	440b      	add	r3, r1
 8008134:	3237      	adds	r2, #55	; 0x37
 8008136:	b2d2      	uxtb	r2, r2
 8008138:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008140:	7dfb      	ldrb	r3, [r7, #23]
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	3301      	adds	r3, #1
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	4413      	add	r3, r2
 800814a:	2200      	movs	r2, #0
 800814c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800814e:	7dfb      	ldrb	r3, [r7, #23]
 8008150:	3301      	adds	r3, #1
 8008152:	75fb      	strb	r3, [r7, #23]
 8008154:	7dfa      	ldrb	r2, [r7, #23]
 8008156:	79fb      	ldrb	r3, [r7, #7]
 8008158:	429a      	cmp	r2, r3
 800815a:	d3d3      	bcc.n	8008104 <IntToUnicode+0x18>
  }
}
 800815c:	bf00      	nop
 800815e:	371c      	adds	r7, #28
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08a      	sub	sp, #40	; 0x28
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008170:	f107 0314 	add.w	r3, r7, #20
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	605a      	str	r2, [r3, #4]
 800817a:	609a      	str	r2, [r3, #8]
 800817c:	60da      	str	r2, [r3, #12]
 800817e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008188:	d147      	bne.n	800821a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800818a:	2300      	movs	r3, #0
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	4b25      	ldr	r3, [pc, #148]	; (8008224 <HAL_PCD_MspInit+0xbc>)
 8008190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008192:	4a24      	ldr	r2, [pc, #144]	; (8008224 <HAL_PCD_MspInit+0xbc>)
 8008194:	f043 0301 	orr.w	r3, r3, #1
 8008198:	6313      	str	r3, [r2, #48]	; 0x30
 800819a:	4b22      	ldr	r3, [pc, #136]	; (8008224 <HAL_PCD_MspInit+0xbc>)
 800819c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	613b      	str	r3, [r7, #16]
 80081a4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80081a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081ac:	2300      	movs	r3, #0
 80081ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80081b4:	f107 0314 	add.w	r3, r7, #20
 80081b8:	4619      	mov	r1, r3
 80081ba:	481b      	ldr	r0, [pc, #108]	; (8008228 <HAL_PCD_MspInit+0xc0>)
 80081bc:	f7f9 fc3c 	bl	8001a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80081c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80081c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081c6:	2302      	movs	r3, #2
 80081c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081ce:	2300      	movs	r3, #0
 80081d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80081d2:	230a      	movs	r3, #10
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081d6:	f107 0314 	add.w	r3, r7, #20
 80081da:	4619      	mov	r1, r3
 80081dc:	4812      	ldr	r0, [pc, #72]	; (8008228 <HAL_PCD_MspInit+0xc0>)
 80081de:	f7f9 fc2b 	bl	8001a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081e2:	4b10      	ldr	r3, [pc, #64]	; (8008224 <HAL_PCD_MspInit+0xbc>)
 80081e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e6:	4a0f      	ldr	r2, [pc, #60]	; (8008224 <HAL_PCD_MspInit+0xbc>)
 80081e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ec:	6353      	str	r3, [r2, #52]	; 0x34
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <HAL_PCD_MspInit+0xbc>)
 80081f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f6:	4a0b      	ldr	r2, [pc, #44]	; (8008224 <HAL_PCD_MspInit+0xbc>)
 80081f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081fc:	6453      	str	r3, [r2, #68]	; 0x44
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <HAL_PCD_MspInit+0xbc>)
 8008200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800820a:	2200      	movs	r2, #0
 800820c:	2100      	movs	r1, #0
 800820e:	2043      	movs	r0, #67	; 0x43
 8008210:	f7f9 f86d 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008214:	2043      	movs	r0, #67	; 0x43
 8008216:	f7f9 f886 	bl	8001326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800821a:	bf00      	nop
 800821c:	3728      	adds	r7, #40	; 0x28
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	40023800 	.word	0x40023800
 8008228:	40020000 	.word	0x40020000

0800822c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008240:	4619      	mov	r1, r3
 8008242:	4610      	mov	r0, r2
 8008244:	f7fe fc2c 	bl	8006aa0 <USBD_LL_SetupStage>
}
 8008248:	bf00      	nop
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	6879      	ldr	r1, [r7, #4]
 8008266:	4613      	mov	r3, r2
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	1a9b      	subs	r3, r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	440b      	add	r3, r1
 8008270:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	78fb      	ldrb	r3, [r7, #3]
 8008278:	4619      	mov	r1, r3
 800827a:	f7fe fc64 	bl	8006b46 <USBD_LL_DataOutStage>
}
 800827e:	bf00      	nop
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b082      	sub	sp, #8
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	460b      	mov	r3, r1
 8008290:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008298:	78fa      	ldrb	r2, [r7, #3]
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	4613      	mov	r3, r2
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	1a9b      	subs	r3, r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	440b      	add	r3, r1
 80082a6:	3348      	adds	r3, #72	; 0x48
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	4619      	mov	r1, r3
 80082ae:	f7fe fcad 	bl	8006c0c <USBD_LL_DataInStage>
}
 80082b2:	bf00      	nop
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fe fdb1 	bl	8006e30 <USBD_LL_SOF>
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082de:	2301      	movs	r3, #1
 80082e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d102      	bne.n	80082f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80082ea:	2300      	movs	r3, #0
 80082ec:	73fb      	strb	r3, [r7, #15]
 80082ee:	e008      	b.n	8008302 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d102      	bne.n	80082fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80082f8:	2301      	movs	r3, #1
 80082fa:	73fb      	strb	r3, [r7, #15]
 80082fc:	e001      	b.n	8008302 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80082fe:	f7f8 fc23 	bl	8000b48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008308:	7bfa      	ldrb	r2, [r7, #15]
 800830a:	4611      	mov	r1, r2
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe fd54 	bl	8006dba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe fd0d 	bl	8006d38 <USBD_LL_Reset>
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe fd4f 	bl	8006dda <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	6812      	ldr	r2, [r2, #0]
 800834a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800834e:	f043 0301 	orr.w	r3, r3, #1
 8008352:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a1b      	ldr	r3, [r3, #32]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800835c:	4b04      	ldr	r3, [pc, #16]	; (8008370 <HAL_PCD_SuspendCallback+0x48>)
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	4a03      	ldr	r2, [pc, #12]	; (8008370 <HAL_PCD_SuspendCallback+0x48>)
 8008362:	f043 0306 	orr.w	r3, r3, #6
 8008366:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	e000ed00 	.word	0xe000ed00

08008374 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe fd3e 	bl	8006e04 <USBD_LL_Resume>
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083a2:	78fa      	ldrb	r2, [r7, #3]
 80083a4:	4611      	mov	r1, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fe fd69 	bl	8006e7e <USBD_LL_IsoOUTIncomplete>
}
 80083ac:	bf00      	nop
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083c6:	78fa      	ldrb	r2, [r7, #3]
 80083c8:	4611      	mov	r1, r2
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe fd4a 	bl	8006e64 <USBD_LL_IsoINIncomplete>
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fd56 	bl	8006e98 <USBD_LL_DevConnected>
}
 80083ec:	bf00      	nop
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fd53 	bl	8006eae <USBD_LL_DevDisconnected>
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d13c      	bne.n	800849a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008420:	4a20      	ldr	r2, [pc, #128]	; (80084a4 <USBD_LL_Init+0x94>)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a1e      	ldr	r2, [pc, #120]	; (80084a4 <USBD_LL_Init+0x94>)
 800842c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008430:	4b1c      	ldr	r3, [pc, #112]	; (80084a4 <USBD_LL_Init+0x94>)
 8008432:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008436:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008438:	4b1a      	ldr	r3, [pc, #104]	; (80084a4 <USBD_LL_Init+0x94>)
 800843a:	2204      	movs	r2, #4
 800843c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800843e:	4b19      	ldr	r3, [pc, #100]	; (80084a4 <USBD_LL_Init+0x94>)
 8008440:	2202      	movs	r2, #2
 8008442:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008444:	4b17      	ldr	r3, [pc, #92]	; (80084a4 <USBD_LL_Init+0x94>)
 8008446:	2200      	movs	r2, #0
 8008448:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800844a:	4b16      	ldr	r3, [pc, #88]	; (80084a4 <USBD_LL_Init+0x94>)
 800844c:	2202      	movs	r2, #2
 800844e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008450:	4b14      	ldr	r3, [pc, #80]	; (80084a4 <USBD_LL_Init+0x94>)
 8008452:	2200      	movs	r2, #0
 8008454:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008456:	4b13      	ldr	r3, [pc, #76]	; (80084a4 <USBD_LL_Init+0x94>)
 8008458:	2200      	movs	r2, #0
 800845a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800845c:	4b11      	ldr	r3, [pc, #68]	; (80084a4 <USBD_LL_Init+0x94>)
 800845e:	2200      	movs	r2, #0
 8008460:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008462:	4b10      	ldr	r3, [pc, #64]	; (80084a4 <USBD_LL_Init+0x94>)
 8008464:	2200      	movs	r2, #0
 8008466:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008468:	4b0e      	ldr	r3, [pc, #56]	; (80084a4 <USBD_LL_Init+0x94>)
 800846a:	2200      	movs	r2, #0
 800846c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800846e:	480d      	ldr	r0, [pc, #52]	; (80084a4 <USBD_LL_Init+0x94>)
 8008470:	f7fa fcd4 	bl	8002e1c <HAL_PCD_Init>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800847a:	f7f8 fb65 	bl	8000b48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800847e:	2180      	movs	r1, #128	; 0x80
 8008480:	4808      	ldr	r0, [pc, #32]	; (80084a4 <USBD_LL_Init+0x94>)
 8008482:	f7fb fe32 	bl	80040ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008486:	2240      	movs	r2, #64	; 0x40
 8008488:	2100      	movs	r1, #0
 800848a:	4806      	ldr	r0, [pc, #24]	; (80084a4 <USBD_LL_Init+0x94>)
 800848c:	f7fb fde6 	bl	800405c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008490:	2280      	movs	r2, #128	; 0x80
 8008492:	2101      	movs	r1, #1
 8008494:	4803      	ldr	r0, [pc, #12]	; (80084a4 <USBD_LL_Init+0x94>)
 8008496:	f7fb fde1 	bl	800405c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	20000a38 	.word	0x20000a38

080084a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fa fdc9 	bl	8003056 <HAL_PCD_Start>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f92a 	bl	8008724 <USBD_Get_USB_Status>
 80084d0:	4603      	mov	r3, r0
 80084d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	4608      	mov	r0, r1
 80084e8:	4611      	mov	r1, r2
 80084ea:	461a      	mov	r2, r3
 80084ec:	4603      	mov	r3, r0
 80084ee:	70fb      	strb	r3, [r7, #3]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70bb      	strb	r3, [r7, #2]
 80084f4:	4613      	mov	r3, r2
 80084f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008506:	78bb      	ldrb	r3, [r7, #2]
 8008508:	883a      	ldrh	r2, [r7, #0]
 800850a:	78f9      	ldrb	r1, [r7, #3]
 800850c:	f7fb f9ad 	bl	800386a <HAL_PCD_EP_Open>
 8008510:	4603      	mov	r3, r0
 8008512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	4618      	mov	r0, r3
 8008518:	f000 f904 	bl	8008724 <USBD_Get_USB_Status>
 800851c:	4603      	mov	r3, r0
 800851e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008520:	7bbb      	ldrb	r3, [r7, #14]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	460b      	mov	r3, r1
 8008534:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008544:	78fa      	ldrb	r2, [r7, #3]
 8008546:	4611      	mov	r1, r2
 8008548:	4618      	mov	r0, r3
 800854a:	f7fb f9f6 	bl	800393a <HAL_PCD_EP_Close>
 800854e:	4603      	mov	r3, r0
 8008550:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008552:	7bfb      	ldrb	r3, [r7, #15]
 8008554:	4618      	mov	r0, r3
 8008556:	f000 f8e5 	bl	8008724 <USBD_Get_USB_Status>
 800855a:	4603      	mov	r3, r0
 800855c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800855e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008578:	2300      	movs	r3, #0
 800857a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008582:	78fa      	ldrb	r2, [r7, #3]
 8008584:	4611      	mov	r1, r2
 8008586:	4618      	mov	r0, r3
 8008588:	f7fb face 	bl	8003b28 <HAL_PCD_EP_SetStall>
 800858c:	4603      	mov	r3, r0
 800858e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008590:	7bfb      	ldrb	r3, [r7, #15]
 8008592:	4618      	mov	r0, r3
 8008594:	f000 f8c6 	bl	8008724 <USBD_Get_USB_Status>
 8008598:	4603      	mov	r3, r0
 800859a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800859c:	7bbb      	ldrb	r3, [r7, #14]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b084      	sub	sp, #16
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	460b      	mov	r3, r1
 80085b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085c0:	78fa      	ldrb	r2, [r7, #3]
 80085c2:	4611      	mov	r1, r2
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fb fb13 	bl	8003bf0 <HAL_PCD_EP_ClrStall>
 80085ca:	4603      	mov	r3, r0
 80085cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 f8a7 	bl	8008724 <USBD_Get_USB_Status>
 80085d6:	4603      	mov	r3, r0
 80085d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085da:	7bbb      	ldrb	r3, [r7, #14]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	da0b      	bge.n	8008618 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008606:	68f9      	ldr	r1, [r7, #12]
 8008608:	4613      	mov	r3, r2
 800860a:	00db      	lsls	r3, r3, #3
 800860c:	1a9b      	subs	r3, r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	440b      	add	r3, r1
 8008612:	333e      	adds	r3, #62	; 0x3e
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	e00b      	b.n	8008630 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800861e:	68f9      	ldr	r1, [r7, #12]
 8008620:	4613      	mov	r3, r2
 8008622:	00db      	lsls	r3, r3, #3
 8008624:	1a9b      	subs	r3, r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	440b      	add	r3, r1
 800862a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800862e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008656:	78fa      	ldrb	r2, [r7, #3]
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f7fb f8e0 	bl	8003820 <HAL_PCD_SetAddress>
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	4618      	mov	r0, r3
 8008668:	f000 f85c 	bl	8008724 <USBD_Get_USB_Status>
 800866c:	4603      	mov	r3, r0
 800866e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008670:	7bbb      	ldrb	r3, [r7, #14]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b086      	sub	sp, #24
 800867e:	af00      	add	r7, sp, #0
 8008680:	60f8      	str	r0, [r7, #12]
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	603b      	str	r3, [r7, #0]
 8008686:	460b      	mov	r3, r1
 8008688:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008698:	7af9      	ldrb	r1, [r7, #11]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	f7fb f9f9 	bl	8003a94 <HAL_PCD_EP_Transmit>
 80086a2:	4603      	mov	r3, r0
 80086a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 f83b 	bl	8008724 <USBD_Get_USB_Status>
 80086ae:	4603      	mov	r3, r0
 80086b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	607a      	str	r2, [r7, #4]
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	460b      	mov	r3, r1
 80086ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80086da:	7af9      	ldrb	r1, [r7, #11]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	f7fb f975 	bl	80039ce <HAL_PCD_EP_Receive>
 80086e4:	4603      	mov	r3, r0
 80086e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 f81a 	bl	8008724 <USBD_Get_USB_Status>
 80086f0:	4603      	mov	r3, r0
 80086f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008710:	78fa      	ldrb	r2, [r7, #3]
 8008712:	4611      	mov	r1, r2
 8008714:	4618      	mov	r0, r3
 8008716:	f7fb f9a5 	bl	8003a64 <HAL_PCD_EP_GetRxCount>
 800871a:	4603      	mov	r3, r0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	2b03      	cmp	r3, #3
 8008736:	d817      	bhi.n	8008768 <USBD_Get_USB_Status+0x44>
 8008738:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <USBD_Get_USB_Status+0x1c>)
 800873a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873e:	bf00      	nop
 8008740:	08008751 	.word	0x08008751
 8008744:	08008757 	.word	0x08008757
 8008748:	0800875d 	.word	0x0800875d
 800874c:	08008763 	.word	0x08008763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	e00b      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008756:	2303      	movs	r3, #3
 8008758:	73fb      	strb	r3, [r7, #15]
    break;
 800875a:	e008      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
    break;
 8008760:	e005      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008762:	2303      	movs	r3, #3
 8008764:	73fb      	strb	r3, [r7, #15]
    break;
 8008766:	e002      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008768:	2303      	movs	r3, #3
 800876a:	73fb      	strb	r3, [r7, #15]
    break;
 800876c:	bf00      	nop
  }
  return usb_status;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <__errno>:
 800877c:	4b01      	ldr	r3, [pc, #4]	; (8008784 <__errno+0x8>)
 800877e:	6818      	ldr	r0, [r3, #0]
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20000180 	.word	0x20000180

08008788 <__libc_init_array>:
 8008788:	b570      	push	{r4, r5, r6, lr}
 800878a:	4e0d      	ldr	r6, [pc, #52]	; (80087c0 <__libc_init_array+0x38>)
 800878c:	4c0d      	ldr	r4, [pc, #52]	; (80087c4 <__libc_init_array+0x3c>)
 800878e:	1ba4      	subs	r4, r4, r6
 8008790:	10a4      	asrs	r4, r4, #2
 8008792:	2500      	movs	r5, #0
 8008794:	42a5      	cmp	r5, r4
 8008796:	d109      	bne.n	80087ac <__libc_init_array+0x24>
 8008798:	4e0b      	ldr	r6, [pc, #44]	; (80087c8 <__libc_init_array+0x40>)
 800879a:	4c0c      	ldr	r4, [pc, #48]	; (80087cc <__libc_init_array+0x44>)
 800879c:	f000 fc38 	bl	8009010 <_init>
 80087a0:	1ba4      	subs	r4, r4, r6
 80087a2:	10a4      	asrs	r4, r4, #2
 80087a4:	2500      	movs	r5, #0
 80087a6:	42a5      	cmp	r5, r4
 80087a8:	d105      	bne.n	80087b6 <__libc_init_array+0x2e>
 80087aa:	bd70      	pop	{r4, r5, r6, pc}
 80087ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087b0:	4798      	blx	r3
 80087b2:	3501      	adds	r5, #1
 80087b4:	e7ee      	b.n	8008794 <__libc_init_array+0xc>
 80087b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087ba:	4798      	blx	r3
 80087bc:	3501      	adds	r5, #1
 80087be:	e7f2      	b.n	80087a6 <__libc_init_array+0x1e>
 80087c0:	0800916c 	.word	0x0800916c
 80087c4:	0800916c 	.word	0x0800916c
 80087c8:	0800916c 	.word	0x0800916c
 80087cc:	08009170 	.word	0x08009170

080087d0 <malloc>:
 80087d0:	4b02      	ldr	r3, [pc, #8]	; (80087dc <malloc+0xc>)
 80087d2:	4601      	mov	r1, r0
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	f000 b86d 	b.w	80088b4 <_malloc_r>
 80087da:	bf00      	nop
 80087dc:	20000180 	.word	0x20000180

080087e0 <free>:
 80087e0:	4b02      	ldr	r3, [pc, #8]	; (80087ec <free+0xc>)
 80087e2:	4601      	mov	r1, r0
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	f000 b817 	b.w	8008818 <_free_r>
 80087ea:	bf00      	nop
 80087ec:	20000180 	.word	0x20000180

080087f0 <memcpy>:
 80087f0:	b510      	push	{r4, lr}
 80087f2:	1e43      	subs	r3, r0, #1
 80087f4:	440a      	add	r2, r1
 80087f6:	4291      	cmp	r1, r2
 80087f8:	d100      	bne.n	80087fc <memcpy+0xc>
 80087fa:	bd10      	pop	{r4, pc}
 80087fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008800:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008804:	e7f7      	b.n	80087f6 <memcpy+0x6>

08008806 <memset>:
 8008806:	4402      	add	r2, r0
 8008808:	4603      	mov	r3, r0
 800880a:	4293      	cmp	r3, r2
 800880c:	d100      	bne.n	8008810 <memset+0xa>
 800880e:	4770      	bx	lr
 8008810:	f803 1b01 	strb.w	r1, [r3], #1
 8008814:	e7f9      	b.n	800880a <memset+0x4>
	...

08008818 <_free_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4605      	mov	r5, r0
 800881c:	2900      	cmp	r1, #0
 800881e:	d045      	beq.n	80088ac <_free_r+0x94>
 8008820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008824:	1f0c      	subs	r4, r1, #4
 8008826:	2b00      	cmp	r3, #0
 8008828:	bfb8      	it	lt
 800882a:	18e4      	addlt	r4, r4, r3
 800882c:	f000 f8cc 	bl	80089c8 <__malloc_lock>
 8008830:	4a1f      	ldr	r2, [pc, #124]	; (80088b0 <_free_r+0x98>)
 8008832:	6813      	ldr	r3, [r2, #0]
 8008834:	4610      	mov	r0, r2
 8008836:	b933      	cbnz	r3, 8008846 <_free_r+0x2e>
 8008838:	6063      	str	r3, [r4, #4]
 800883a:	6014      	str	r4, [r2, #0]
 800883c:	4628      	mov	r0, r5
 800883e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008842:	f000 b8c2 	b.w	80089ca <__malloc_unlock>
 8008846:	42a3      	cmp	r3, r4
 8008848:	d90c      	bls.n	8008864 <_free_r+0x4c>
 800884a:	6821      	ldr	r1, [r4, #0]
 800884c:	1862      	adds	r2, r4, r1
 800884e:	4293      	cmp	r3, r2
 8008850:	bf04      	itt	eq
 8008852:	681a      	ldreq	r2, [r3, #0]
 8008854:	685b      	ldreq	r3, [r3, #4]
 8008856:	6063      	str	r3, [r4, #4]
 8008858:	bf04      	itt	eq
 800885a:	1852      	addeq	r2, r2, r1
 800885c:	6022      	streq	r2, [r4, #0]
 800885e:	6004      	str	r4, [r0, #0]
 8008860:	e7ec      	b.n	800883c <_free_r+0x24>
 8008862:	4613      	mov	r3, r2
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	b10a      	cbz	r2, 800886c <_free_r+0x54>
 8008868:	42a2      	cmp	r2, r4
 800886a:	d9fa      	bls.n	8008862 <_free_r+0x4a>
 800886c:	6819      	ldr	r1, [r3, #0]
 800886e:	1858      	adds	r0, r3, r1
 8008870:	42a0      	cmp	r0, r4
 8008872:	d10b      	bne.n	800888c <_free_r+0x74>
 8008874:	6820      	ldr	r0, [r4, #0]
 8008876:	4401      	add	r1, r0
 8008878:	1858      	adds	r0, r3, r1
 800887a:	4282      	cmp	r2, r0
 800887c:	6019      	str	r1, [r3, #0]
 800887e:	d1dd      	bne.n	800883c <_free_r+0x24>
 8008880:	6810      	ldr	r0, [r2, #0]
 8008882:	6852      	ldr	r2, [r2, #4]
 8008884:	605a      	str	r2, [r3, #4]
 8008886:	4401      	add	r1, r0
 8008888:	6019      	str	r1, [r3, #0]
 800888a:	e7d7      	b.n	800883c <_free_r+0x24>
 800888c:	d902      	bls.n	8008894 <_free_r+0x7c>
 800888e:	230c      	movs	r3, #12
 8008890:	602b      	str	r3, [r5, #0]
 8008892:	e7d3      	b.n	800883c <_free_r+0x24>
 8008894:	6820      	ldr	r0, [r4, #0]
 8008896:	1821      	adds	r1, r4, r0
 8008898:	428a      	cmp	r2, r1
 800889a:	bf04      	itt	eq
 800889c:	6811      	ldreq	r1, [r2, #0]
 800889e:	6852      	ldreq	r2, [r2, #4]
 80088a0:	6062      	str	r2, [r4, #4]
 80088a2:	bf04      	itt	eq
 80088a4:	1809      	addeq	r1, r1, r0
 80088a6:	6021      	streq	r1, [r4, #0]
 80088a8:	605c      	str	r4, [r3, #4]
 80088aa:	e7c7      	b.n	800883c <_free_r+0x24>
 80088ac:	bd38      	pop	{r3, r4, r5, pc}
 80088ae:	bf00      	nop
 80088b0:	20000288 	.word	0x20000288

080088b4 <_malloc_r>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	1ccd      	adds	r5, r1, #3
 80088b8:	f025 0503 	bic.w	r5, r5, #3
 80088bc:	3508      	adds	r5, #8
 80088be:	2d0c      	cmp	r5, #12
 80088c0:	bf38      	it	cc
 80088c2:	250c      	movcc	r5, #12
 80088c4:	2d00      	cmp	r5, #0
 80088c6:	4606      	mov	r6, r0
 80088c8:	db01      	blt.n	80088ce <_malloc_r+0x1a>
 80088ca:	42a9      	cmp	r1, r5
 80088cc:	d903      	bls.n	80088d6 <_malloc_r+0x22>
 80088ce:	230c      	movs	r3, #12
 80088d0:	6033      	str	r3, [r6, #0]
 80088d2:	2000      	movs	r0, #0
 80088d4:	bd70      	pop	{r4, r5, r6, pc}
 80088d6:	f000 f877 	bl	80089c8 <__malloc_lock>
 80088da:	4a21      	ldr	r2, [pc, #132]	; (8008960 <_malloc_r+0xac>)
 80088dc:	6814      	ldr	r4, [r2, #0]
 80088de:	4621      	mov	r1, r4
 80088e0:	b991      	cbnz	r1, 8008908 <_malloc_r+0x54>
 80088e2:	4c20      	ldr	r4, [pc, #128]	; (8008964 <_malloc_r+0xb0>)
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	b91b      	cbnz	r3, 80088f0 <_malloc_r+0x3c>
 80088e8:	4630      	mov	r0, r6
 80088ea:	f000 f83d 	bl	8008968 <_sbrk_r>
 80088ee:	6020      	str	r0, [r4, #0]
 80088f0:	4629      	mov	r1, r5
 80088f2:	4630      	mov	r0, r6
 80088f4:	f000 f838 	bl	8008968 <_sbrk_r>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	d124      	bne.n	8008946 <_malloc_r+0x92>
 80088fc:	230c      	movs	r3, #12
 80088fe:	6033      	str	r3, [r6, #0]
 8008900:	4630      	mov	r0, r6
 8008902:	f000 f862 	bl	80089ca <__malloc_unlock>
 8008906:	e7e4      	b.n	80088d2 <_malloc_r+0x1e>
 8008908:	680b      	ldr	r3, [r1, #0]
 800890a:	1b5b      	subs	r3, r3, r5
 800890c:	d418      	bmi.n	8008940 <_malloc_r+0x8c>
 800890e:	2b0b      	cmp	r3, #11
 8008910:	d90f      	bls.n	8008932 <_malloc_r+0x7e>
 8008912:	600b      	str	r3, [r1, #0]
 8008914:	50cd      	str	r5, [r1, r3]
 8008916:	18cc      	adds	r4, r1, r3
 8008918:	4630      	mov	r0, r6
 800891a:	f000 f856 	bl	80089ca <__malloc_unlock>
 800891e:	f104 000b 	add.w	r0, r4, #11
 8008922:	1d23      	adds	r3, r4, #4
 8008924:	f020 0007 	bic.w	r0, r0, #7
 8008928:	1ac3      	subs	r3, r0, r3
 800892a:	d0d3      	beq.n	80088d4 <_malloc_r+0x20>
 800892c:	425a      	negs	r2, r3
 800892e:	50e2      	str	r2, [r4, r3]
 8008930:	e7d0      	b.n	80088d4 <_malloc_r+0x20>
 8008932:	428c      	cmp	r4, r1
 8008934:	684b      	ldr	r3, [r1, #4]
 8008936:	bf16      	itet	ne
 8008938:	6063      	strne	r3, [r4, #4]
 800893a:	6013      	streq	r3, [r2, #0]
 800893c:	460c      	movne	r4, r1
 800893e:	e7eb      	b.n	8008918 <_malloc_r+0x64>
 8008940:	460c      	mov	r4, r1
 8008942:	6849      	ldr	r1, [r1, #4]
 8008944:	e7cc      	b.n	80088e0 <_malloc_r+0x2c>
 8008946:	1cc4      	adds	r4, r0, #3
 8008948:	f024 0403 	bic.w	r4, r4, #3
 800894c:	42a0      	cmp	r0, r4
 800894e:	d005      	beq.n	800895c <_malloc_r+0xa8>
 8008950:	1a21      	subs	r1, r4, r0
 8008952:	4630      	mov	r0, r6
 8008954:	f000 f808 	bl	8008968 <_sbrk_r>
 8008958:	3001      	adds	r0, #1
 800895a:	d0cf      	beq.n	80088fc <_malloc_r+0x48>
 800895c:	6025      	str	r5, [r4, #0]
 800895e:	e7db      	b.n	8008918 <_malloc_r+0x64>
 8008960:	20000288 	.word	0x20000288
 8008964:	2000028c 	.word	0x2000028c

08008968 <_sbrk_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4c06      	ldr	r4, [pc, #24]	; (8008984 <_sbrk_r+0x1c>)
 800896c:	2300      	movs	r3, #0
 800896e:	4605      	mov	r5, r0
 8008970:	4608      	mov	r0, r1
 8008972:	6023      	str	r3, [r4, #0]
 8008974:	f7f8 fad6 	bl	8000f24 <_sbrk>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	d102      	bne.n	8008982 <_sbrk_r+0x1a>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	b103      	cbz	r3, 8008982 <_sbrk_r+0x1a>
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	20000e40 	.word	0x20000e40

08008988 <_vsiprintf_r>:
 8008988:	b500      	push	{lr}
 800898a:	b09b      	sub	sp, #108	; 0x6c
 800898c:	9100      	str	r1, [sp, #0]
 800898e:	9104      	str	r1, [sp, #16]
 8008990:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008994:	9105      	str	r1, [sp, #20]
 8008996:	9102      	str	r1, [sp, #8]
 8008998:	4905      	ldr	r1, [pc, #20]	; (80089b0 <_vsiprintf_r+0x28>)
 800899a:	9103      	str	r1, [sp, #12]
 800899c:	4669      	mov	r1, sp
 800899e:	f000 f86f 	bl	8008a80 <_svfiprintf_r>
 80089a2:	9b00      	ldr	r3, [sp, #0]
 80089a4:	2200      	movs	r2, #0
 80089a6:	701a      	strb	r2, [r3, #0]
 80089a8:	b01b      	add	sp, #108	; 0x6c
 80089aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80089ae:	bf00      	nop
 80089b0:	ffff0208 	.word	0xffff0208

080089b4 <vsiprintf>:
 80089b4:	4613      	mov	r3, r2
 80089b6:	460a      	mov	r2, r1
 80089b8:	4601      	mov	r1, r0
 80089ba:	4802      	ldr	r0, [pc, #8]	; (80089c4 <vsiprintf+0x10>)
 80089bc:	6800      	ldr	r0, [r0, #0]
 80089be:	f7ff bfe3 	b.w	8008988 <_vsiprintf_r>
 80089c2:	bf00      	nop
 80089c4:	20000180 	.word	0x20000180

080089c8 <__malloc_lock>:
 80089c8:	4770      	bx	lr

080089ca <__malloc_unlock>:
 80089ca:	4770      	bx	lr

080089cc <__ssputs_r>:
 80089cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d0:	688e      	ldr	r6, [r1, #8]
 80089d2:	429e      	cmp	r6, r3
 80089d4:	4682      	mov	sl, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	4690      	mov	r8, r2
 80089da:	4699      	mov	r9, r3
 80089dc:	d837      	bhi.n	8008a4e <__ssputs_r+0x82>
 80089de:	898a      	ldrh	r2, [r1, #12]
 80089e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089e4:	d031      	beq.n	8008a4a <__ssputs_r+0x7e>
 80089e6:	6825      	ldr	r5, [r4, #0]
 80089e8:	6909      	ldr	r1, [r1, #16]
 80089ea:	1a6f      	subs	r7, r5, r1
 80089ec:	6965      	ldr	r5, [r4, #20]
 80089ee:	2302      	movs	r3, #2
 80089f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80089f8:	f109 0301 	add.w	r3, r9, #1
 80089fc:	443b      	add	r3, r7
 80089fe:	429d      	cmp	r5, r3
 8008a00:	bf38      	it	cc
 8008a02:	461d      	movcc	r5, r3
 8008a04:	0553      	lsls	r3, r2, #21
 8008a06:	d530      	bpl.n	8008a6a <__ssputs_r+0x9e>
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f7ff ff53 	bl	80088b4 <_malloc_r>
 8008a0e:	4606      	mov	r6, r0
 8008a10:	b950      	cbnz	r0, 8008a28 <__ssputs_r+0x5c>
 8008a12:	230c      	movs	r3, #12
 8008a14:	f8ca 3000 	str.w	r3, [sl]
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a28:	463a      	mov	r2, r7
 8008a2a:	6921      	ldr	r1, [r4, #16]
 8008a2c:	f7ff fee0 	bl	80087f0 <memcpy>
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	6126      	str	r6, [r4, #16]
 8008a3e:	6165      	str	r5, [r4, #20]
 8008a40:	443e      	add	r6, r7
 8008a42:	1bed      	subs	r5, r5, r7
 8008a44:	6026      	str	r6, [r4, #0]
 8008a46:	60a5      	str	r5, [r4, #8]
 8008a48:	464e      	mov	r6, r9
 8008a4a:	454e      	cmp	r6, r9
 8008a4c:	d900      	bls.n	8008a50 <__ssputs_r+0x84>
 8008a4e:	464e      	mov	r6, r9
 8008a50:	4632      	mov	r2, r6
 8008a52:	4641      	mov	r1, r8
 8008a54:	6820      	ldr	r0, [r4, #0]
 8008a56:	f000 fa93 	bl	8008f80 <memmove>
 8008a5a:	68a3      	ldr	r3, [r4, #8]
 8008a5c:	1b9b      	subs	r3, r3, r6
 8008a5e:	60a3      	str	r3, [r4, #8]
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	441e      	add	r6, r3
 8008a64:	6026      	str	r6, [r4, #0]
 8008a66:	2000      	movs	r0, #0
 8008a68:	e7dc      	b.n	8008a24 <__ssputs_r+0x58>
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	f000 faa1 	bl	8008fb2 <_realloc_r>
 8008a70:	4606      	mov	r6, r0
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d1e2      	bne.n	8008a3c <__ssputs_r+0x70>
 8008a76:	6921      	ldr	r1, [r4, #16]
 8008a78:	4650      	mov	r0, sl
 8008a7a:	f7ff fecd 	bl	8008818 <_free_r>
 8008a7e:	e7c8      	b.n	8008a12 <__ssputs_r+0x46>

08008a80 <_svfiprintf_r>:
 8008a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	461d      	mov	r5, r3
 8008a86:	898b      	ldrh	r3, [r1, #12]
 8008a88:	061f      	lsls	r7, r3, #24
 8008a8a:	b09d      	sub	sp, #116	; 0x74
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	460c      	mov	r4, r1
 8008a90:	4616      	mov	r6, r2
 8008a92:	d50f      	bpl.n	8008ab4 <_svfiprintf_r+0x34>
 8008a94:	690b      	ldr	r3, [r1, #16]
 8008a96:	b96b      	cbnz	r3, 8008ab4 <_svfiprintf_r+0x34>
 8008a98:	2140      	movs	r1, #64	; 0x40
 8008a9a:	f7ff ff0b 	bl	80088b4 <_malloc_r>
 8008a9e:	6020      	str	r0, [r4, #0]
 8008aa0:	6120      	str	r0, [r4, #16]
 8008aa2:	b928      	cbnz	r0, 8008ab0 <_svfiprintf_r+0x30>
 8008aa4:	230c      	movs	r3, #12
 8008aa6:	f8c8 3000 	str.w	r3, [r8]
 8008aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aae:	e0c8      	b.n	8008c42 <_svfiprintf_r+0x1c2>
 8008ab0:	2340      	movs	r3, #64	; 0x40
 8008ab2:	6163      	str	r3, [r4, #20]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab8:	2320      	movs	r3, #32
 8008aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008abe:	2330      	movs	r3, #48	; 0x30
 8008ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ac4:	9503      	str	r5, [sp, #12]
 8008ac6:	f04f 0b01 	mov.w	fp, #1
 8008aca:	4637      	mov	r7, r6
 8008acc:	463d      	mov	r5, r7
 8008ace:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ad2:	b10b      	cbz	r3, 8008ad8 <_svfiprintf_r+0x58>
 8008ad4:	2b25      	cmp	r3, #37	; 0x25
 8008ad6:	d13e      	bne.n	8008b56 <_svfiprintf_r+0xd6>
 8008ad8:	ebb7 0a06 	subs.w	sl, r7, r6
 8008adc:	d00b      	beq.n	8008af6 <_svfiprintf_r+0x76>
 8008ade:	4653      	mov	r3, sl
 8008ae0:	4632      	mov	r2, r6
 8008ae2:	4621      	mov	r1, r4
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	f7ff ff71 	bl	80089cc <__ssputs_r>
 8008aea:	3001      	adds	r0, #1
 8008aec:	f000 80a4 	beq.w	8008c38 <_svfiprintf_r+0x1b8>
 8008af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af2:	4453      	add	r3, sl
 8008af4:	9309      	str	r3, [sp, #36]	; 0x24
 8008af6:	783b      	ldrb	r3, [r7, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 809d 	beq.w	8008c38 <_svfiprintf_r+0x1b8>
 8008afe:	2300      	movs	r3, #0
 8008b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b08:	9304      	str	r3, [sp, #16]
 8008b0a:	9307      	str	r3, [sp, #28]
 8008b0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b10:	931a      	str	r3, [sp, #104]	; 0x68
 8008b12:	462f      	mov	r7, r5
 8008b14:	2205      	movs	r2, #5
 8008b16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008b1a:	4850      	ldr	r0, [pc, #320]	; (8008c5c <_svfiprintf_r+0x1dc>)
 8008b1c:	f7f7 fb60 	bl	80001e0 <memchr>
 8008b20:	9b04      	ldr	r3, [sp, #16]
 8008b22:	b9d0      	cbnz	r0, 8008b5a <_svfiprintf_r+0xda>
 8008b24:	06d9      	lsls	r1, r3, #27
 8008b26:	bf44      	itt	mi
 8008b28:	2220      	movmi	r2, #32
 8008b2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b2e:	071a      	lsls	r2, r3, #28
 8008b30:	bf44      	itt	mi
 8008b32:	222b      	movmi	r2, #43	; 0x2b
 8008b34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b38:	782a      	ldrb	r2, [r5, #0]
 8008b3a:	2a2a      	cmp	r2, #42	; 0x2a
 8008b3c:	d015      	beq.n	8008b6a <_svfiprintf_r+0xea>
 8008b3e:	9a07      	ldr	r2, [sp, #28]
 8008b40:	462f      	mov	r7, r5
 8008b42:	2000      	movs	r0, #0
 8008b44:	250a      	movs	r5, #10
 8008b46:	4639      	mov	r1, r7
 8008b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b4c:	3b30      	subs	r3, #48	; 0x30
 8008b4e:	2b09      	cmp	r3, #9
 8008b50:	d94d      	bls.n	8008bee <_svfiprintf_r+0x16e>
 8008b52:	b1b8      	cbz	r0, 8008b84 <_svfiprintf_r+0x104>
 8008b54:	e00f      	b.n	8008b76 <_svfiprintf_r+0xf6>
 8008b56:	462f      	mov	r7, r5
 8008b58:	e7b8      	b.n	8008acc <_svfiprintf_r+0x4c>
 8008b5a:	4a40      	ldr	r2, [pc, #256]	; (8008c5c <_svfiprintf_r+0x1dc>)
 8008b5c:	1a80      	subs	r0, r0, r2
 8008b5e:	fa0b f000 	lsl.w	r0, fp, r0
 8008b62:	4318      	orrs	r0, r3
 8008b64:	9004      	str	r0, [sp, #16]
 8008b66:	463d      	mov	r5, r7
 8008b68:	e7d3      	b.n	8008b12 <_svfiprintf_r+0x92>
 8008b6a:	9a03      	ldr	r2, [sp, #12]
 8008b6c:	1d11      	adds	r1, r2, #4
 8008b6e:	6812      	ldr	r2, [r2, #0]
 8008b70:	9103      	str	r1, [sp, #12]
 8008b72:	2a00      	cmp	r2, #0
 8008b74:	db01      	blt.n	8008b7a <_svfiprintf_r+0xfa>
 8008b76:	9207      	str	r2, [sp, #28]
 8008b78:	e004      	b.n	8008b84 <_svfiprintf_r+0x104>
 8008b7a:	4252      	negs	r2, r2
 8008b7c:	f043 0302 	orr.w	r3, r3, #2
 8008b80:	9207      	str	r2, [sp, #28]
 8008b82:	9304      	str	r3, [sp, #16]
 8008b84:	783b      	ldrb	r3, [r7, #0]
 8008b86:	2b2e      	cmp	r3, #46	; 0x2e
 8008b88:	d10c      	bne.n	8008ba4 <_svfiprintf_r+0x124>
 8008b8a:	787b      	ldrb	r3, [r7, #1]
 8008b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b8e:	d133      	bne.n	8008bf8 <_svfiprintf_r+0x178>
 8008b90:	9b03      	ldr	r3, [sp, #12]
 8008b92:	1d1a      	adds	r2, r3, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	9203      	str	r2, [sp, #12]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	bfb8      	it	lt
 8008b9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ba0:	3702      	adds	r7, #2
 8008ba2:	9305      	str	r3, [sp, #20]
 8008ba4:	4d2e      	ldr	r5, [pc, #184]	; (8008c60 <_svfiprintf_r+0x1e0>)
 8008ba6:	7839      	ldrb	r1, [r7, #0]
 8008ba8:	2203      	movs	r2, #3
 8008baa:	4628      	mov	r0, r5
 8008bac:	f7f7 fb18 	bl	80001e0 <memchr>
 8008bb0:	b138      	cbz	r0, 8008bc2 <_svfiprintf_r+0x142>
 8008bb2:	2340      	movs	r3, #64	; 0x40
 8008bb4:	1b40      	subs	r0, r0, r5
 8008bb6:	fa03 f000 	lsl.w	r0, r3, r0
 8008bba:	9b04      	ldr	r3, [sp, #16]
 8008bbc:	4303      	orrs	r3, r0
 8008bbe:	3701      	adds	r7, #1
 8008bc0:	9304      	str	r3, [sp, #16]
 8008bc2:	7839      	ldrb	r1, [r7, #0]
 8008bc4:	4827      	ldr	r0, [pc, #156]	; (8008c64 <_svfiprintf_r+0x1e4>)
 8008bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bca:	2206      	movs	r2, #6
 8008bcc:	1c7e      	adds	r6, r7, #1
 8008bce:	f7f7 fb07 	bl	80001e0 <memchr>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	d038      	beq.n	8008c48 <_svfiprintf_r+0x1c8>
 8008bd6:	4b24      	ldr	r3, [pc, #144]	; (8008c68 <_svfiprintf_r+0x1e8>)
 8008bd8:	bb13      	cbnz	r3, 8008c20 <_svfiprintf_r+0x1a0>
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	3307      	adds	r3, #7
 8008bde:	f023 0307 	bic.w	r3, r3, #7
 8008be2:	3308      	adds	r3, #8
 8008be4:	9303      	str	r3, [sp, #12]
 8008be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be8:	444b      	add	r3, r9
 8008bea:	9309      	str	r3, [sp, #36]	; 0x24
 8008bec:	e76d      	b.n	8008aca <_svfiprintf_r+0x4a>
 8008bee:	fb05 3202 	mla	r2, r5, r2, r3
 8008bf2:	2001      	movs	r0, #1
 8008bf4:	460f      	mov	r7, r1
 8008bf6:	e7a6      	b.n	8008b46 <_svfiprintf_r+0xc6>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	3701      	adds	r7, #1
 8008bfc:	9305      	str	r3, [sp, #20]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	250a      	movs	r5, #10
 8008c02:	4638      	mov	r0, r7
 8008c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c08:	3a30      	subs	r2, #48	; 0x30
 8008c0a:	2a09      	cmp	r2, #9
 8008c0c:	d903      	bls.n	8008c16 <_svfiprintf_r+0x196>
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d0c8      	beq.n	8008ba4 <_svfiprintf_r+0x124>
 8008c12:	9105      	str	r1, [sp, #20]
 8008c14:	e7c6      	b.n	8008ba4 <_svfiprintf_r+0x124>
 8008c16:	fb05 2101 	mla	r1, r5, r1, r2
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	4607      	mov	r7, r0
 8008c1e:	e7f0      	b.n	8008c02 <_svfiprintf_r+0x182>
 8008c20:	ab03      	add	r3, sp, #12
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	4622      	mov	r2, r4
 8008c26:	4b11      	ldr	r3, [pc, #68]	; (8008c6c <_svfiprintf_r+0x1ec>)
 8008c28:	a904      	add	r1, sp, #16
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	f3af 8000 	nop.w
 8008c30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008c34:	4681      	mov	r9, r0
 8008c36:	d1d6      	bne.n	8008be6 <_svfiprintf_r+0x166>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	065b      	lsls	r3, r3, #25
 8008c3c:	f53f af35 	bmi.w	8008aaa <_svfiprintf_r+0x2a>
 8008c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c42:	b01d      	add	sp, #116	; 0x74
 8008c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c48:	ab03      	add	r3, sp, #12
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <_svfiprintf_r+0x1ec>)
 8008c50:	a904      	add	r1, sp, #16
 8008c52:	4640      	mov	r0, r8
 8008c54:	f000 f882 	bl	8008d5c <_printf_i>
 8008c58:	e7ea      	b.n	8008c30 <_svfiprintf_r+0x1b0>
 8008c5a:	bf00      	nop
 8008c5c:	080090d0 	.word	0x080090d0
 8008c60:	080090d6 	.word	0x080090d6
 8008c64:	080090da 	.word	0x080090da
 8008c68:	00000000 	.word	0x00000000
 8008c6c:	080089cd 	.word	0x080089cd

08008c70 <_printf_common>:
 8008c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c74:	4691      	mov	r9, r2
 8008c76:	461f      	mov	r7, r3
 8008c78:	688a      	ldr	r2, [r1, #8]
 8008c7a:	690b      	ldr	r3, [r1, #16]
 8008c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c80:	4293      	cmp	r3, r2
 8008c82:	bfb8      	it	lt
 8008c84:	4613      	movlt	r3, r2
 8008c86:	f8c9 3000 	str.w	r3, [r9]
 8008c8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c8e:	4606      	mov	r6, r0
 8008c90:	460c      	mov	r4, r1
 8008c92:	b112      	cbz	r2, 8008c9a <_printf_common+0x2a>
 8008c94:	3301      	adds	r3, #1
 8008c96:	f8c9 3000 	str.w	r3, [r9]
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	0699      	lsls	r1, r3, #26
 8008c9e:	bf42      	ittt	mi
 8008ca0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ca4:	3302      	addmi	r3, #2
 8008ca6:	f8c9 3000 	strmi.w	r3, [r9]
 8008caa:	6825      	ldr	r5, [r4, #0]
 8008cac:	f015 0506 	ands.w	r5, r5, #6
 8008cb0:	d107      	bne.n	8008cc2 <_printf_common+0x52>
 8008cb2:	f104 0a19 	add.w	sl, r4, #25
 8008cb6:	68e3      	ldr	r3, [r4, #12]
 8008cb8:	f8d9 2000 	ldr.w	r2, [r9]
 8008cbc:	1a9b      	subs	r3, r3, r2
 8008cbe:	42ab      	cmp	r3, r5
 8008cc0:	dc28      	bgt.n	8008d14 <_printf_common+0xa4>
 8008cc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	3300      	adds	r3, #0
 8008cca:	bf18      	it	ne
 8008ccc:	2301      	movne	r3, #1
 8008cce:	0692      	lsls	r2, r2, #26
 8008cd0:	d42d      	bmi.n	8008d2e <_printf_common+0xbe>
 8008cd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cd6:	4639      	mov	r1, r7
 8008cd8:	4630      	mov	r0, r6
 8008cda:	47c0      	blx	r8
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d020      	beq.n	8008d22 <_printf_common+0xb2>
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	68e5      	ldr	r5, [r4, #12]
 8008ce4:	f8d9 2000 	ldr.w	r2, [r9]
 8008ce8:	f003 0306 	and.w	r3, r3, #6
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	bf08      	it	eq
 8008cf0:	1aad      	subeq	r5, r5, r2
 8008cf2:	68a3      	ldr	r3, [r4, #8]
 8008cf4:	6922      	ldr	r2, [r4, #16]
 8008cf6:	bf0c      	ite	eq
 8008cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cfc:	2500      	movne	r5, #0
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	bfc4      	itt	gt
 8008d02:	1a9b      	subgt	r3, r3, r2
 8008d04:	18ed      	addgt	r5, r5, r3
 8008d06:	f04f 0900 	mov.w	r9, #0
 8008d0a:	341a      	adds	r4, #26
 8008d0c:	454d      	cmp	r5, r9
 8008d0e:	d11a      	bne.n	8008d46 <_printf_common+0xd6>
 8008d10:	2000      	movs	r0, #0
 8008d12:	e008      	b.n	8008d26 <_printf_common+0xb6>
 8008d14:	2301      	movs	r3, #1
 8008d16:	4652      	mov	r2, sl
 8008d18:	4639      	mov	r1, r7
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	47c0      	blx	r8
 8008d1e:	3001      	adds	r0, #1
 8008d20:	d103      	bne.n	8008d2a <_printf_common+0xba>
 8008d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2a:	3501      	adds	r5, #1
 8008d2c:	e7c3      	b.n	8008cb6 <_printf_common+0x46>
 8008d2e:	18e1      	adds	r1, r4, r3
 8008d30:	1c5a      	adds	r2, r3, #1
 8008d32:	2030      	movs	r0, #48	; 0x30
 8008d34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d38:	4422      	add	r2, r4
 8008d3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d42:	3302      	adds	r3, #2
 8008d44:	e7c5      	b.n	8008cd2 <_printf_common+0x62>
 8008d46:	2301      	movs	r3, #1
 8008d48:	4622      	mov	r2, r4
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	47c0      	blx	r8
 8008d50:	3001      	adds	r0, #1
 8008d52:	d0e6      	beq.n	8008d22 <_printf_common+0xb2>
 8008d54:	f109 0901 	add.w	r9, r9, #1
 8008d58:	e7d8      	b.n	8008d0c <_printf_common+0x9c>
	...

08008d5c <_printf_i>:
 8008d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008d64:	460c      	mov	r4, r1
 8008d66:	7e09      	ldrb	r1, [r1, #24]
 8008d68:	b085      	sub	sp, #20
 8008d6a:	296e      	cmp	r1, #110	; 0x6e
 8008d6c:	4617      	mov	r7, r2
 8008d6e:	4606      	mov	r6, r0
 8008d70:	4698      	mov	r8, r3
 8008d72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d74:	f000 80b3 	beq.w	8008ede <_printf_i+0x182>
 8008d78:	d822      	bhi.n	8008dc0 <_printf_i+0x64>
 8008d7a:	2963      	cmp	r1, #99	; 0x63
 8008d7c:	d036      	beq.n	8008dec <_printf_i+0x90>
 8008d7e:	d80a      	bhi.n	8008d96 <_printf_i+0x3a>
 8008d80:	2900      	cmp	r1, #0
 8008d82:	f000 80b9 	beq.w	8008ef8 <_printf_i+0x19c>
 8008d86:	2958      	cmp	r1, #88	; 0x58
 8008d88:	f000 8083 	beq.w	8008e92 <_printf_i+0x136>
 8008d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008d94:	e032      	b.n	8008dfc <_printf_i+0xa0>
 8008d96:	2964      	cmp	r1, #100	; 0x64
 8008d98:	d001      	beq.n	8008d9e <_printf_i+0x42>
 8008d9a:	2969      	cmp	r1, #105	; 0x69
 8008d9c:	d1f6      	bne.n	8008d8c <_printf_i+0x30>
 8008d9e:	6820      	ldr	r0, [r4, #0]
 8008da0:	6813      	ldr	r3, [r2, #0]
 8008da2:	0605      	lsls	r5, r0, #24
 8008da4:	f103 0104 	add.w	r1, r3, #4
 8008da8:	d52a      	bpl.n	8008e00 <_printf_i+0xa4>
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6011      	str	r1, [r2, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	da03      	bge.n	8008dba <_printf_i+0x5e>
 8008db2:	222d      	movs	r2, #45	; 0x2d
 8008db4:	425b      	negs	r3, r3
 8008db6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008dba:	486f      	ldr	r0, [pc, #444]	; (8008f78 <_printf_i+0x21c>)
 8008dbc:	220a      	movs	r2, #10
 8008dbe:	e039      	b.n	8008e34 <_printf_i+0xd8>
 8008dc0:	2973      	cmp	r1, #115	; 0x73
 8008dc2:	f000 809d 	beq.w	8008f00 <_printf_i+0x1a4>
 8008dc6:	d808      	bhi.n	8008dda <_printf_i+0x7e>
 8008dc8:	296f      	cmp	r1, #111	; 0x6f
 8008dca:	d020      	beq.n	8008e0e <_printf_i+0xb2>
 8008dcc:	2970      	cmp	r1, #112	; 0x70
 8008dce:	d1dd      	bne.n	8008d8c <_printf_i+0x30>
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	f043 0320 	orr.w	r3, r3, #32
 8008dd6:	6023      	str	r3, [r4, #0]
 8008dd8:	e003      	b.n	8008de2 <_printf_i+0x86>
 8008dda:	2975      	cmp	r1, #117	; 0x75
 8008ddc:	d017      	beq.n	8008e0e <_printf_i+0xb2>
 8008dde:	2978      	cmp	r1, #120	; 0x78
 8008de0:	d1d4      	bne.n	8008d8c <_printf_i+0x30>
 8008de2:	2378      	movs	r3, #120	; 0x78
 8008de4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008de8:	4864      	ldr	r0, [pc, #400]	; (8008f7c <_printf_i+0x220>)
 8008dea:	e055      	b.n	8008e98 <_printf_i+0x13c>
 8008dec:	6813      	ldr	r3, [r2, #0]
 8008dee:	1d19      	adds	r1, r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6011      	str	r1, [r2, #0]
 8008df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e08c      	b.n	8008f1a <_printf_i+0x1be>
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6011      	str	r1, [r2, #0]
 8008e04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e08:	bf18      	it	ne
 8008e0a:	b21b      	sxthne	r3, r3
 8008e0c:	e7cf      	b.n	8008dae <_printf_i+0x52>
 8008e0e:	6813      	ldr	r3, [r2, #0]
 8008e10:	6825      	ldr	r5, [r4, #0]
 8008e12:	1d18      	adds	r0, r3, #4
 8008e14:	6010      	str	r0, [r2, #0]
 8008e16:	0628      	lsls	r0, r5, #24
 8008e18:	d501      	bpl.n	8008e1e <_printf_i+0xc2>
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	e002      	b.n	8008e24 <_printf_i+0xc8>
 8008e1e:	0668      	lsls	r0, r5, #25
 8008e20:	d5fb      	bpl.n	8008e1a <_printf_i+0xbe>
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	4854      	ldr	r0, [pc, #336]	; (8008f78 <_printf_i+0x21c>)
 8008e26:	296f      	cmp	r1, #111	; 0x6f
 8008e28:	bf14      	ite	ne
 8008e2a:	220a      	movne	r2, #10
 8008e2c:	2208      	moveq	r2, #8
 8008e2e:	2100      	movs	r1, #0
 8008e30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e34:	6865      	ldr	r5, [r4, #4]
 8008e36:	60a5      	str	r5, [r4, #8]
 8008e38:	2d00      	cmp	r5, #0
 8008e3a:	f2c0 8095 	blt.w	8008f68 <_printf_i+0x20c>
 8008e3e:	6821      	ldr	r1, [r4, #0]
 8008e40:	f021 0104 	bic.w	r1, r1, #4
 8008e44:	6021      	str	r1, [r4, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d13d      	bne.n	8008ec6 <_printf_i+0x16a>
 8008e4a:	2d00      	cmp	r5, #0
 8008e4c:	f040 808e 	bne.w	8008f6c <_printf_i+0x210>
 8008e50:	4665      	mov	r5, ip
 8008e52:	2a08      	cmp	r2, #8
 8008e54:	d10b      	bne.n	8008e6e <_printf_i+0x112>
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	07db      	lsls	r3, r3, #31
 8008e5a:	d508      	bpl.n	8008e6e <_printf_i+0x112>
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	6862      	ldr	r2, [r4, #4]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	bfde      	ittt	le
 8008e64:	2330      	movle	r3, #48	; 0x30
 8008e66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e6a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008e6e:	ebac 0305 	sub.w	r3, ip, r5
 8008e72:	6123      	str	r3, [r4, #16]
 8008e74:	f8cd 8000 	str.w	r8, [sp]
 8008e78:	463b      	mov	r3, r7
 8008e7a:	aa03      	add	r2, sp, #12
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f7ff fef6 	bl	8008c70 <_printf_common>
 8008e84:	3001      	adds	r0, #1
 8008e86:	d14d      	bne.n	8008f24 <_printf_i+0x1c8>
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e8c:	b005      	add	sp, #20
 8008e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e92:	4839      	ldr	r0, [pc, #228]	; (8008f78 <_printf_i+0x21c>)
 8008e94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008e98:	6813      	ldr	r3, [r2, #0]
 8008e9a:	6821      	ldr	r1, [r4, #0]
 8008e9c:	1d1d      	adds	r5, r3, #4
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6015      	str	r5, [r2, #0]
 8008ea2:	060a      	lsls	r2, r1, #24
 8008ea4:	d50b      	bpl.n	8008ebe <_printf_i+0x162>
 8008ea6:	07ca      	lsls	r2, r1, #31
 8008ea8:	bf44      	itt	mi
 8008eaa:	f041 0120 	orrmi.w	r1, r1, #32
 8008eae:	6021      	strmi	r1, [r4, #0]
 8008eb0:	b91b      	cbnz	r3, 8008eba <_printf_i+0x15e>
 8008eb2:	6822      	ldr	r2, [r4, #0]
 8008eb4:	f022 0220 	bic.w	r2, r2, #32
 8008eb8:	6022      	str	r2, [r4, #0]
 8008eba:	2210      	movs	r2, #16
 8008ebc:	e7b7      	b.n	8008e2e <_printf_i+0xd2>
 8008ebe:	064d      	lsls	r5, r1, #25
 8008ec0:	bf48      	it	mi
 8008ec2:	b29b      	uxthmi	r3, r3
 8008ec4:	e7ef      	b.n	8008ea6 <_printf_i+0x14a>
 8008ec6:	4665      	mov	r5, ip
 8008ec8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ecc:	fb02 3311 	mls	r3, r2, r1, r3
 8008ed0:	5cc3      	ldrb	r3, [r0, r3]
 8008ed2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	d1f5      	bne.n	8008ec8 <_printf_i+0x16c>
 8008edc:	e7b9      	b.n	8008e52 <_printf_i+0xf6>
 8008ede:	6813      	ldr	r3, [r2, #0]
 8008ee0:	6825      	ldr	r5, [r4, #0]
 8008ee2:	6961      	ldr	r1, [r4, #20]
 8008ee4:	1d18      	adds	r0, r3, #4
 8008ee6:	6010      	str	r0, [r2, #0]
 8008ee8:	0628      	lsls	r0, r5, #24
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	d501      	bpl.n	8008ef2 <_printf_i+0x196>
 8008eee:	6019      	str	r1, [r3, #0]
 8008ef0:	e002      	b.n	8008ef8 <_printf_i+0x19c>
 8008ef2:	066a      	lsls	r2, r5, #25
 8008ef4:	d5fb      	bpl.n	8008eee <_printf_i+0x192>
 8008ef6:	8019      	strh	r1, [r3, #0]
 8008ef8:	2300      	movs	r3, #0
 8008efa:	6123      	str	r3, [r4, #16]
 8008efc:	4665      	mov	r5, ip
 8008efe:	e7b9      	b.n	8008e74 <_printf_i+0x118>
 8008f00:	6813      	ldr	r3, [r2, #0]
 8008f02:	1d19      	adds	r1, r3, #4
 8008f04:	6011      	str	r1, [r2, #0]
 8008f06:	681d      	ldr	r5, [r3, #0]
 8008f08:	6862      	ldr	r2, [r4, #4]
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	f7f7 f967 	bl	80001e0 <memchr>
 8008f12:	b108      	cbz	r0, 8008f18 <_printf_i+0x1bc>
 8008f14:	1b40      	subs	r0, r0, r5
 8008f16:	6060      	str	r0, [r4, #4]
 8008f18:	6863      	ldr	r3, [r4, #4]
 8008f1a:	6123      	str	r3, [r4, #16]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f22:	e7a7      	b.n	8008e74 <_printf_i+0x118>
 8008f24:	6923      	ldr	r3, [r4, #16]
 8008f26:	462a      	mov	r2, r5
 8008f28:	4639      	mov	r1, r7
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	47c0      	blx	r8
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d0aa      	beq.n	8008e88 <_printf_i+0x12c>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	079b      	lsls	r3, r3, #30
 8008f36:	d413      	bmi.n	8008f60 <_printf_i+0x204>
 8008f38:	68e0      	ldr	r0, [r4, #12]
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	4298      	cmp	r0, r3
 8008f3e:	bfb8      	it	lt
 8008f40:	4618      	movlt	r0, r3
 8008f42:	e7a3      	b.n	8008e8c <_printf_i+0x130>
 8008f44:	2301      	movs	r3, #1
 8008f46:	464a      	mov	r2, r9
 8008f48:	4639      	mov	r1, r7
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	47c0      	blx	r8
 8008f4e:	3001      	adds	r0, #1
 8008f50:	d09a      	beq.n	8008e88 <_printf_i+0x12c>
 8008f52:	3501      	adds	r5, #1
 8008f54:	68e3      	ldr	r3, [r4, #12]
 8008f56:	9a03      	ldr	r2, [sp, #12]
 8008f58:	1a9b      	subs	r3, r3, r2
 8008f5a:	42ab      	cmp	r3, r5
 8008f5c:	dcf2      	bgt.n	8008f44 <_printf_i+0x1e8>
 8008f5e:	e7eb      	b.n	8008f38 <_printf_i+0x1dc>
 8008f60:	2500      	movs	r5, #0
 8008f62:	f104 0919 	add.w	r9, r4, #25
 8008f66:	e7f5      	b.n	8008f54 <_printf_i+0x1f8>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1ac      	bne.n	8008ec6 <_printf_i+0x16a>
 8008f6c:	7803      	ldrb	r3, [r0, #0]
 8008f6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f76:	e76c      	b.n	8008e52 <_printf_i+0xf6>
 8008f78:	080090e1 	.word	0x080090e1
 8008f7c:	080090f2 	.word	0x080090f2

08008f80 <memmove>:
 8008f80:	4288      	cmp	r0, r1
 8008f82:	b510      	push	{r4, lr}
 8008f84:	eb01 0302 	add.w	r3, r1, r2
 8008f88:	d807      	bhi.n	8008f9a <memmove+0x1a>
 8008f8a:	1e42      	subs	r2, r0, #1
 8008f8c:	4299      	cmp	r1, r3
 8008f8e:	d00a      	beq.n	8008fa6 <memmove+0x26>
 8008f90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f94:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008f98:	e7f8      	b.n	8008f8c <memmove+0xc>
 8008f9a:	4283      	cmp	r3, r0
 8008f9c:	d9f5      	bls.n	8008f8a <memmove+0xa>
 8008f9e:	1881      	adds	r1, r0, r2
 8008fa0:	1ad2      	subs	r2, r2, r3
 8008fa2:	42d3      	cmn	r3, r2
 8008fa4:	d100      	bne.n	8008fa8 <memmove+0x28>
 8008fa6:	bd10      	pop	{r4, pc}
 8008fa8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008fb0:	e7f7      	b.n	8008fa2 <memmove+0x22>

08008fb2 <_realloc_r>:
 8008fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb4:	4607      	mov	r7, r0
 8008fb6:	4614      	mov	r4, r2
 8008fb8:	460e      	mov	r6, r1
 8008fba:	b921      	cbnz	r1, 8008fc6 <_realloc_r+0x14>
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008fc2:	f7ff bc77 	b.w	80088b4 <_malloc_r>
 8008fc6:	b922      	cbnz	r2, 8008fd2 <_realloc_r+0x20>
 8008fc8:	f7ff fc26 	bl	8008818 <_free_r>
 8008fcc:	4625      	mov	r5, r4
 8008fce:	4628      	mov	r0, r5
 8008fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd2:	f000 f814 	bl	8008ffe <_malloc_usable_size_r>
 8008fd6:	42a0      	cmp	r0, r4
 8008fd8:	d20f      	bcs.n	8008ffa <_realloc_r+0x48>
 8008fda:	4621      	mov	r1, r4
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f7ff fc69 	bl	80088b4 <_malloc_r>
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d0f2      	beq.n	8008fce <_realloc_r+0x1c>
 8008fe8:	4631      	mov	r1, r6
 8008fea:	4622      	mov	r2, r4
 8008fec:	f7ff fc00 	bl	80087f0 <memcpy>
 8008ff0:	4631      	mov	r1, r6
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	f7ff fc10 	bl	8008818 <_free_r>
 8008ff8:	e7e9      	b.n	8008fce <_realloc_r+0x1c>
 8008ffa:	4635      	mov	r5, r6
 8008ffc:	e7e7      	b.n	8008fce <_realloc_r+0x1c>

08008ffe <_malloc_usable_size_r>:
 8008ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009002:	1f18      	subs	r0, r3, #4
 8009004:	2b00      	cmp	r3, #0
 8009006:	bfbc      	itt	lt
 8009008:	580b      	ldrlt	r3, [r1, r0]
 800900a:	18c0      	addlt	r0, r0, r3
 800900c:	4770      	bx	lr
	...

08009010 <_init>:
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	bf00      	nop
 8009014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009016:	bc08      	pop	{r3}
 8009018:	469e      	mov	lr, r3
 800901a:	4770      	bx	lr

0800901c <_fini>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	bf00      	nop
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr
