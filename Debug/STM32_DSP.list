
STM32_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  08009944  08009944  00019944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c98  08009c98  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  08009c98  08009c98  00019c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ca0  08009ca0  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ca0  08009ca0  00019ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ca4  08009ca4  00019ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08009ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b9c  20000350  08009ff8  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008eec  08009ff8  00028eec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f1a  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000347d  00000000  00000000  0003629a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df8  00000000  00000000  00039718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  0003a510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023c97  00000000  00000000  0003b180  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f334  00000000  00000000  0005ee17  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c65bd  00000000  00000000  0006e14b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004050  00000000  00000000  00134784  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800992c 	.word	0x0800992c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800992c 	.word	0x0800992c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0a0      	sub	sp, #128	; 0x80
 80005a4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a6:	f000 fd3d 	bl	8001024 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005aa:	f000 f887 	bl	80006bc <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ae:	f000 f95f 	bl	8000870 <MX_GPIO_Init>
	MX_DMA_Init();
 80005b2:	f000 f935 	bl	8000820 <MX_DMA_Init>
	MX_I2S2_Init();
 80005b6:	f000 f903 	bl	80007c0 <MX_I2S2_Init>
	MX_USB_DEVICE_Init();
 80005ba:	f007 f965 	bl	8007888 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	HAL_I2SEx_TransmitReceive_DMA(&hi2s2, I2S2_txBuffer, I2S2_rxBuffer, I2S2_BUFFER_LENGTH/2);
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	4a2f      	ldr	r2, [pc, #188]	; (8000680 <main+0xe0>)
 80005c4:	492f      	ldr	r1, [pc, #188]	; (8000684 <main+0xe4>)
 80005c6:	4830      	ldr	r0, [pc, #192]	; (8000688 <main+0xe8>)
 80005c8:	f001 fe6c 	bl	80022a4 <HAL_I2SEx_TransmitReceive_DMA>
	HAL_Delay(1500);
 80005cc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005d0:	f000 fd9a 	bl	8001108 <HAL_Delay>
	CDC_Clear();
 80005d4:	f007 fbfa 	bl	8007dcc <CDC_Clear>
	CDC_Printf("\r\n       ================");
 80005d8:	482c      	ldr	r0, [pc, #176]	; (800068c <main+0xec>)
 80005da:	f007 fb45 	bl	8007c68 <CDC_Printf>
	CDC_Printf("\r\n       *** DSP V0.0 ***");
 80005de:	482c      	ldr	r0, [pc, #176]	; (8000690 <main+0xf0>)
 80005e0:	f007 fb42 	bl	8007c68 <CDC_Printf>
	CDC_Printf("\r\n       ================\r\n\n");
 80005e4:	482b      	ldr	r0, [pc, #172]	; (8000694 <main+0xf4>)
 80005e6:	f007 fb3f 	bl	8007c68 <CDC_Printf>
	if(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14))
 80005ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ee:	482a      	ldr	r0, [pc, #168]	; (8000698 <main+0xf8>)
 80005f0:	f001 fbc6 	bl	8001d80 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d103      	bne.n	8000602 <main+0x62>
	{CDC_Printf("[ OK ] Hardware initialization\r\n");}
 80005fa:	4828      	ldr	r0, [pc, #160]	; (800069c <main+0xfc>)
 80005fc:	f007 fb34 	bl	8007c68 <CDC_Printf>
 8000600:	e002      	b.n	8000608 <main+0x68>
	else{CDC_Printf("[ ER ] Hardware initialization\r\n");}
 8000602:	4827      	ldr	r0, [pc, #156]	; (80006a0 <main+0x100>)
 8000604:	f007 fb30 	bl	8007c68 <CDC_Printf>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	char cmd[APP_RX_DATA_SIZE];
	cmd[0] = '\0';
 8000608:	2300      	movs	r3, #0
 800060a:	703b      	strb	r3, [r7, #0]

	CDC_Printf("[    ] Press ENTER");
 800060c:	4825      	ldr	r0, [pc, #148]	; (80006a4 <main+0x104>)
 800060e:	f007 fb2b 	bl	8007c68 <CDC_Printf>
	CDC_Scanf("%s", cmd);
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	4824      	ldr	r0, [pc, #144]	; (80006a8 <main+0x108>)
 8000618:	f007 fb60 	bl	8007cdc <CDC_Scanf>
	if (cmd[0] == '\0')
 800061c:	783b      	ldrb	r3, [r7, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d107      	bne.n	8000632 <main+0x92>
	{
		CDC_Move(0,-1);
 8000622:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000626:	2000      	movs	r0, #0
 8000628:	f007 fbf2 	bl	8007e10 <CDC_Move>
		CDC_Printf("\r[ OK ]\r\n");
 800062c:	481f      	ldr	r0, [pc, #124]	; (80006ac <main+0x10c>)
 800062e:	f007 fb1b 	bl	8007c68 <CDC_Printf>
	{
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */

		//CDC_Scanf("%s", cmd);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000636:	4818      	ldr	r0, [pc, #96]	; (8000698 <main+0xf8>)
 8000638:	f001 fbd3 	bl	8001de2 <HAL_GPIO_TogglePin>
		CDC_Spin("Processing (%d ms)", HAL_GetTick());
 800063c:	f000 fd58 	bl	80010f0 <HAL_GetTick>
 8000640:	4603      	mov	r3, r0
 8000642:	4619      	mov	r1, r3
 8000644:	481a      	ldr	r0, [pc, #104]	; (80006b0 <main+0x110>)
 8000646:	f007 fb75 	bl	8007d34 <CDC_Spin>
		HAL_Delay(250);
 800064a:	20fa      	movs	r0, #250	; 0xfa
 800064c:	f000 fd5c 	bl	8001108 <HAL_Delay>
	    // Read PRIMASK register, check interrupt status before you disable them
	    // Returns 0 if they are enabled, or non-zero if disabled
	    prim = __get_PRIMASK();
	    __disable_irq();
	 */   ////////////////////////////////////////////////////////////////////////////
		if (CDC_RX_DATA_PENDING)
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <main+0x114>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0eb      	beq.n	8000632 <main+0x92>
		{
			CDC_Scanf("%s", cmd);
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	4812      	ldr	r0, [pc, #72]	; (80006a8 <main+0x108>)
 8000660:	f007 fb3c 	bl	8007cdc <CDC_Scanf>

			if (!strcmp(cmd, "clear"))
 8000664:	463b      	mov	r3, r7
 8000666:	4914      	ldr	r1, [pc, #80]	; (80006b8 <main+0x118>)
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff fdb1 	bl	80001d0 <strcmp>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d101      	bne.n	8000678 <main+0xd8>
			{
				CDC_Clear();
 8000674:	f007 fbaa 	bl	8007dcc <CDC_Clear>
			}

			cmd[0] = '\0';
 8000678:	2300      	movs	r3, #0
 800067a:	703b      	strb	r3, [r7, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800067c:	e7d9      	b.n	8000632 <main+0x92>
 800067e:	bf00      	nop
 8000680:	20004404 	.word	0x20004404
 8000684:	20000404 	.word	0x20000404
 8000688:	200084c4 	.word	0x200084c4
 800068c:	08009944 	.word	0x08009944
 8000690:	08009960 	.word	0x08009960
 8000694:	0800997c 	.word	0x0800997c
 8000698:	40020c00 	.word	0x40020c00
 800069c:	0800999c 	.word	0x0800999c
 80006a0:	080099c0 	.word	0x080099c0
 80006a4:	080099e4 	.word	0x080099e4
 80006a8:	080099f8 	.word	0x080099f8
 80006ac:	080099fc 	.word	0x080099fc
 80006b0:	08009a08 	.word	0x08009a08
 80006b4:	20000372 	.word	0x20000372
 80006b8:	08009a1c 	.word	0x08009a1c

080006bc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b098      	sub	sp, #96	; 0x60
 80006c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80006c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f008 f841 	bl	8008752 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <SystemClock_Config+0xfc>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	4a30      	ldr	r2, [pc, #192]	; (80007b8 <SystemClock_Config+0xfc>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6413      	str	r3, [r2, #64]	; 0x40
 80006fe:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <SystemClock_Config+0xfc>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <SystemClock_Config+0x100>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <SystemClock_Config+0x100>)
 8000714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000718:	6013      	str	r3, [r2, #0]
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <SystemClock_Config+0x100>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000726:	2301      	movs	r3, #1
 8000728:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800072e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000734:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000738:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800073a:	2308      	movs	r3, #8
 800073c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 800073e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000742:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000748:	2307      	movs	r3, #7
 800074a:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000750:	4618      	mov	r0, r3
 8000752:	f003 fbef 	bl	8003f34 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 800075c:	f000 fa88 	bl	8000c70 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8000760:	230f      	movs	r3, #15
 8000762:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	2105      	movs	r1, #5
 800077e:	4618      	mov	r0, r3
 8000780:	f003 fe48 	bl	8004414 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xd2>
	{
		Error_Handler();
 800078a:	f000 fa71 	bl	8000c70 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800078e:	2301      	movs	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000792:	23c0      	movs	r3, #192	; 0xc0
 8000794:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4618      	mov	r0, r3
 80007a0:	f004 f802 	bl	80047a8 <HAL_RCCEx_PeriphCLKConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xf2>
	{
		Error_Handler();
 80007aa:	f000 fa61 	bl	8000c70 <Error_Handler>
	}
}
 80007ae:	bf00      	nop
 80007b0:	3760      	adds	r7, #96	; 0x60
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_I2S2_Init>:
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2S2_Init 0 */
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */
	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_I2S2_Init+0x54>)
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <MX_I2S2_Init+0x58>)
 80007c8:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2S2_Init+0x54>)
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_I2S2_Init+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_I2S2_Init+0x54>)
 80007da:	2203      	movs	r2, #3
 80007dc:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_I2S2_Init+0x54>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_I2S2_Init+0x54>)
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <MX_I2S2_Init+0x5c>)
 80007ea:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_I2S2_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_I2S2_Init+0x54>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_I2S2_Init+0x54>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_I2S2_Init+0x54>)
 8000800:	f001 fb0a 	bl	8001e18 <HAL_I2S_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2S2_Init+0x4e>
	{
		Error_Handler();
 800080a:	f000 fa31 	bl	8000c70 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */
	/* USER CODE END I2S2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200084c4 	.word	0x200084c4
 8000818:	40003800 	.word	0x40003800
 800081c:	00017700 	.word	0x00017700

08000820 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_DMA_Init+0x4c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <MX_DMA_Init+0x4c>)
 8000830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_DMA_Init+0x4c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	200e      	movs	r0, #14
 8000848:	f000 fd5b 	bl	8001302 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800084c:	200e      	movs	r0, #14
 800084e:	f000 fd74 	bl	800133a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	200f      	movs	r0, #15
 8000858:	f000 fd53 	bl	8001302 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800085c:	200f      	movs	r0, #15
 800085e:	f000 fd6c 	bl	800133a <HAL_NVIC_EnableIRQ>

}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	; 0x30
 8000874:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	4b81      	ldr	r3, [pc, #516]	; (8000a90 <MX_GPIO_Init+0x220>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a80      	ldr	r2, [pc, #512]	; (8000a90 <MX_GPIO_Init+0x220>)
 8000890:	f043 0310 	orr.w	r3, r3, #16
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b7e      	ldr	r3, [pc, #504]	; (8000a90 <MX_GPIO_Init+0x220>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0310 	and.w	r3, r3, #16
 800089e:	61bb      	str	r3, [r7, #24]
 80008a0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	4b7a      	ldr	r3, [pc, #488]	; (8000a90 <MX_GPIO_Init+0x220>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a79      	ldr	r2, [pc, #484]	; (8000a90 <MX_GPIO_Init+0x220>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b77      	ldr	r3, [pc, #476]	; (8000a90 <MX_GPIO_Init+0x220>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b73      	ldr	r3, [pc, #460]	; (8000a90 <MX_GPIO_Init+0x220>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a72      	ldr	r2, [pc, #456]	; (8000a90 <MX_GPIO_Init+0x220>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b70      	ldr	r3, [pc, #448]	; (8000a90 <MX_GPIO_Init+0x220>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b6c      	ldr	r3, [pc, #432]	; (8000a90 <MX_GPIO_Init+0x220>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a6b      	ldr	r2, [pc, #428]	; (8000a90 <MX_GPIO_Init+0x220>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b69      	ldr	r3, [pc, #420]	; (8000a90 <MX_GPIO_Init+0x220>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b65      	ldr	r3, [pc, #404]	; (8000a90 <MX_GPIO_Init+0x220>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a64      	ldr	r2, [pc, #400]	; (8000a90 <MX_GPIO_Init+0x220>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b62      	ldr	r3, [pc, #392]	; (8000a90 <MX_GPIO_Init+0x220>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b5e      	ldr	r3, [pc, #376]	; (8000a90 <MX_GPIO_Init+0x220>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a5d      	ldr	r2, [pc, #372]	; (8000a90 <MX_GPIO_Init+0x220>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b5b      	ldr	r3, [pc, #364]	; (8000a90 <MX_GPIO_Init+0x220>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2108      	movs	r1, #8
 8000932:	4858      	ldr	r0, [pc, #352]	; (8000a94 <MX_GPIO_Init+0x224>)
 8000934:	f001 fa3c 	bl	8001db0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2101      	movs	r1, #1
 800093c:	4856      	ldr	r0, [pc, #344]	; (8000a98 <MX_GPIO_Init+0x228>)
 800093e:	f001 fa37 	bl	8001db0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000948:	4854      	ldr	r0, [pc, #336]	; (8000a9c <MX_GPIO_Init+0x22c>)
 800094a:	f001 fa31 	bl	8001db0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800094e:	2308      	movs	r3, #8
 8000950:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	484b      	ldr	r0, [pc, #300]	; (8000a94 <MX_GPIO_Init+0x224>)
 8000966:	f001 f871 	bl	8001a4c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800096a:	2301      	movs	r3, #1
 800096c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4845      	ldr	r0, [pc, #276]	; (8000a98 <MX_GPIO_Init+0x228>)
 8000982:	f001 f863 	bl	8001a4c <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000986:	2301      	movs	r3, #1
 8000988:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <MX_GPIO_Init+0x230>)
 800098c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4842      	ldr	r0, [pc, #264]	; (8000aa4 <MX_GPIO_Init+0x234>)
 800099a:	f001 f857 	bl	8001a4c <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800099e:	2310      	movs	r3, #16
 80009a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ae:	2306      	movs	r3, #6
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	483a      	ldr	r0, [pc, #232]	; (8000aa4 <MX_GPIO_Init+0x234>)
 80009ba:	f001 f847 	bl	8001a4c <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 80009be:	23e0      	movs	r3, #224	; 0xe0
 80009c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ce:	2305      	movs	r3, #5
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4832      	ldr	r0, [pc, #200]	; (8000aa4 <MX_GPIO_Init+0x234>)
 80009da:	f001 f837 	bl	8001a4c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80009de:	2304      	movs	r3, #4
 80009e0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	482d      	ldr	r0, [pc, #180]	; (8000aa8 <MX_GPIO_Init+0x238>)
 80009f2:	f001 f82b 	bl	8001a4c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 80009f6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4823      	ldr	r0, [pc, #140]	; (8000a9c <MX_GPIO_Init+0x22c>)
 8000a10:	f001 f81c 	bl	8001a4c <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 8000a14:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a26:	2306      	movs	r3, #6
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4819      	ldr	r0, [pc, #100]	; (8000a98 <MX_GPIO_Init+0x228>)
 8000a32:	f001 f80b 	bl	8001a4c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a36:	2320      	movs	r3, #32
 8000a38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4814      	ldr	r0, [pc, #80]	; (8000a9c <MX_GPIO_Init+0x22c>)
 8000a4a:	f000 ffff 	bl	8001a4c <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 8000a4e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a52:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a54:	2312      	movs	r3, #18
 8000a56:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a60:	2304      	movs	r3, #4
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <MX_GPIO_Init+0x238>)
 8000a6c:	f000 ffee 	bl	8001a4c <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_GPIO_Init+0x230>)
 8000a76:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_GPIO_Init+0x224>)
 8000a84:	f000 ffe2 	bl	8001a4c <HAL_GPIO_Init>

}
 8000a88:	bf00      	nop
 8000a8a:	3730      	adds	r7, #48	; 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	10120000 	.word	0x10120000
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400

08000aac <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	3b04      	subs	r3, #4
 8000abc:	6018      	str	r0, [r3, #0]
	int32_t L_Channel[I2S2_BUFFER_LENGTH/8];
	int32_t R_Channel[I2S2_BUFFER_LENGTH/8];
	PmodI2S2_AudioRead_24b(I2S2_rxBuffer, L_Channel, R_Channel, I2S2_BUFFER_LENGTH/2);
 8000abe:	f107 0208 	add.w	r2, r7, #8
 8000ac2:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000ac6:	f101 0108 	add.w	r1, r1, #8
 8000aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 8000ad0:	f000 f840 	bl	8000b54 <PmodI2S2_AudioRead_24b>
	/*
	 * PROCESS HERE
	 */
	PmodI2S2_AudioWrite_24b(I2S2_txBuffer, L_Channel, R_Channel, I2S2_BUFFER_LENGTH/2);
 8000ad4:	f107 0208 	add.w	r2, r7, #8
 8000ad8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000adc:	f101 0108 	add.w	r1, r1, #8
 8000ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <HAL_I2SEx_TxRxHalfCpltCallback+0x50>)
 8000ae6:	f000 f876 	bl	8000bd6 <PmodI2S2_AudioWrite_24b>
}
 8000aea:	bf00      	nop
 8000aec:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20004404 	.word	0x20004404
 8000afc:	20000404 	.word	0x20000404

08000b00 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	6018      	str	r0, [r3, #0]
	int32_t L_Channel[I2S2_BUFFER_LENGTH/8];
	int32_t R_Channel[I2S2_BUFFER_LENGTH/8];
	PmodI2S2_AudioRead_24b(&I2S2_rxBuffer[I2S2_BUFFER_LENGTH/2], L_Channel, R_Channel, I2S2_BUFFER_LENGTH/2);
 8000b12:	f107 0208 	add.w	r2, r7, #8
 8000b16:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000b1a:	f101 0108 	add.w	r1, r1, #8
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	480a      	ldr	r0, [pc, #40]	; (8000b4c <HAL_I2SEx_TxRxCpltCallback+0x4c>)
 8000b24:	f000 f816 	bl	8000b54 <PmodI2S2_AudioRead_24b>
	/*
	 * PROCESS HERE
	 */
	PmodI2S2_AudioWrite_24b(&I2S2_txBuffer[I2S2_BUFFER_LENGTH/2], L_Channel, R_Channel, I2S2_BUFFER_LENGTH/2);
 8000b28:	f107 0208 	add.w	r2, r7, #8
 8000b2c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000b30:	f101 0108 	add.w	r1, r1, #8
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_I2SEx_TxRxCpltCallback+0x50>)
 8000b3a:	f000 f84c 	bl	8000bd6 <PmodI2S2_AudioWrite_24b>
}
 8000b3e:	bf00      	nop
 8000b40:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20006404 	.word	0x20006404
 8000b50:	20002404 	.word	0x20002404

08000b54 <PmodI2S2_AudioRead_24b>:

void PmodI2S2_AudioRead_24b(uint16_t * rxBuf, int32_t * L_Channel, int32_t * R_Channel, uint32_t Len)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b087      	sub	sp, #28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	603b      	str	r3, [r7, #0]
	for (uint32_t i = 0; i+3 < Len; i+=4)
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e02b      	b.n	8000bc0 <PmodI2S2_AudioRead_24b+0x6c>
	{
		L_Channel[i/4] = (int32_t) (rxBuf[i]   << 16) | rxBuf[i+1];
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	041a      	lsls	r2, r3, #16
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3301      	adds	r3, #1
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	68f9      	ldr	r1, [r7, #12]
 8000b7c:	440b      	add	r3, r1
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f023 0303 	bic.w	r3, r3, #3
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	440b      	add	r3, r1
 8000b8c:	4302      	orrs	r2, r0
 8000b8e:	601a      	str	r2, [r3, #0]
		R_Channel[i/4] = (int32_t) (rxBuf[i+2] << 16) | rxBuf[i+3];
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3302      	adds	r3, #2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	041a      	lsls	r2, r3, #16
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3303      	adds	r3, #3
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	68f9      	ldr	r1, [r7, #12]
 8000ba6:	440b      	add	r3, r1
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f023 0303 	bic.w	r3, r3, #3
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	440b      	add	r3, r1
 8000bb6:	4302      	orrs	r2, r0
 8000bb8:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i+3 < Len; i+=4)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	3303      	adds	r3, #3
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d8ce      	bhi.n	8000b68 <PmodI2S2_AudioRead_24b+0x14>
	}
}
 8000bca:	bf00      	nop
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <PmodI2S2_AudioWrite_24b>:
void PmodI2S2_AudioWrite_24b(uint16_t * txBuf, int32_t * L_Channel, int32_t * R_Channel, uint32_t Len)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b087      	sub	sp, #28
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	60f8      	str	r0, [r7, #12]
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	603b      	str	r3, [r7, #0]
	for (uint32_t i = 0; i+3 < Len; i+=4)
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e037      	b.n	8000c5a <PmodI2S2_AudioWrite_24b+0x84>
	{
		txBuf[i]   = (L_Channel[i/4] >> 16) & 0xFFFF;
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	f023 0303 	bic.w	r3, r3, #3
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	0c19      	lsrs	r1, r3, #16
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	b28a      	uxth	r2, r1
 8000c02:	801a      	strh	r2, [r3, #0]
	    txBuf[i+1] =  L_Channel[i/4] & 0xFFFF;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	f023 0303 	bic.w	r3, r3, #3
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	6819      	ldr	r1, [r3, #0]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	3301      	adds	r3, #1
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	b28a      	uxth	r2, r1
 8000c1c:	801a      	strh	r2, [r3, #0]
	    txBuf[i+2] = (R_Channel[i/4] >> 16) & 0xFFFF;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f023 0303 	bic.w	r3, r3, #3
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	0c19      	lsrs	r1, r3, #16
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3302      	adds	r3, #2
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	4413      	add	r3, r2
 8000c36:	b28a      	uxth	r2, r1
 8000c38:	801a      	strh	r2, [r3, #0]
	    txBuf[i+3] =  R_Channel[i/4] & 0xFFFF;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f023 0303 	bic.w	r3, r3, #3
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	4413      	add	r3, r2
 8000c44:	6819      	ldr	r1, [r3, #0]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3303      	adds	r3, #3
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	b28a      	uxth	r2, r1
 8000c52:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i+3 < Len; i+=4)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3304      	adds	r3, #4
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3303      	adds	r3, #3
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d8c2      	bhi.n	8000bea <PmodI2S2_AudioWrite_24b+0x14>
	}
}
 8000c64:	bf00      	nop
 8000c66:	371c      	adds	r7, #28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7a:	4802      	ldr	r0, [pc, #8]	; (8000c84 <Error_Handler+0x14>)
 8000c7c:	f001 f898 	bl	8001db0 <HAL_GPIO_WritePin>
	/* USER CODE END Error_Handler_Debug */
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40020c00 	.word	0x40020c00

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cc6:	2007      	movs	r0, #7
 8000cc8:	f000 fb10 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a62      	ldr	r2, [pc, #392]	; (8000e80 <HAL_I2S_MspInit+0x1a8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	f040 80be 	bne.w	8000e78 <HAL_I2S_MspInit+0x1a0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	4b60      	ldr	r3, [pc, #384]	; (8000e84 <HAL_I2S_MspInit+0x1ac>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	4a5f      	ldr	r2, [pc, #380]	; (8000e84 <HAL_I2S_MspInit+0x1ac>)
 8000d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0c:	4b5d      	ldr	r3, [pc, #372]	; (8000e84 <HAL_I2S_MspInit+0x1ac>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b59      	ldr	r3, [pc, #356]	; (8000e84 <HAL_I2S_MspInit+0x1ac>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a58      	ldr	r2, [pc, #352]	; (8000e84 <HAL_I2S_MspInit+0x1ac>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b56      	ldr	r3, [pc, #344]	; (8000e84 <HAL_I2S_MspInit+0x1ac>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	4b52      	ldr	r3, [pc, #328]	; (8000e84 <HAL_I2S_MspInit+0x1ac>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a51      	ldr	r2, [pc, #324]	; (8000e84 <HAL_I2S_MspInit+0x1ac>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
 8000d44:	4b4f      	ldr	r3, [pc, #316]	; (8000e84 <HAL_I2S_MspInit+0x1ac>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d50:	2304      	movs	r3, #4
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000d60:	2306      	movs	r3, #6
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4847      	ldr	r0, [pc, #284]	; (8000e88 <HAL_I2S_MspInit+0x1b0>)
 8000d6c:	f000 fe6e 	bl	8001a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin|GPIO_PIN_6;
 8000d70:	2348      	movs	r3, #72	; 0x48
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d80:	2305      	movs	r3, #5
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	483f      	ldr	r0, [pc, #252]	; (8000e88 <HAL_I2S_MspInit+0x1b0>)
 8000d8c:	f000 fe5e 	bl	8001a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000da2:	2305      	movs	r3, #5
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4837      	ldr	r0, [pc, #220]	; (8000e8c <HAL_I2S_MspInit+0x1b4>)
 8000dae:	f000 fe4d 	bl	8001a4c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000db2:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <HAL_I2S_MspInit+0x1b8>)
 8000db4:	4a37      	ldr	r2, [pc, #220]	; (8000e94 <HAL_I2S_MspInit+0x1bc>)
 8000db6:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000db8:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <HAL_I2S_MspInit+0x1b8>)
 8000dba:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000dbe:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc0:	4b33      	ldr	r3, [pc, #204]	; (8000e90 <HAL_I2S_MspInit+0x1b8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <HAL_I2S_MspInit+0x1b8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dcc:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <HAL_I2S_MspInit+0x1b8>)
 8000dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd2:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd4:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <HAL_I2S_MspInit+0x1b8>)
 8000dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dda:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ddc:	4b2c      	ldr	r3, [pc, #176]	; (8000e90 <HAL_I2S_MspInit+0x1b8>)
 8000dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de2:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000de4:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <HAL_I2S_MspInit+0x1b8>)
 8000de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dea:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000dec:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <HAL_I2S_MspInit+0x1b8>)
 8000dee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000df2:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df4:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <HAL_I2S_MspInit+0x1b8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000dfa:	4825      	ldr	r0, [pc, #148]	; (8000e90 <HAL_I2S_MspInit+0x1b8>)
 8000dfc:	f000 fab8 	bl	8001370 <HAL_DMA_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8000e06:	f7ff ff33 	bl	8000c70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <HAL_I2S_MspInit+0x1b8>)
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e10:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <HAL_I2S_MspInit+0x1b8>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <HAL_I2S_MspInit+0x1c0>)
 8000e18:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <HAL_I2S_MspInit+0x1c4>)
 8000e1a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <HAL_I2S_MspInit+0x1c0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_I2S_MspInit+0x1c0>)
 8000e24:	2240      	movs	r2, #64	; 0x40
 8000e26:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <HAL_I2S_MspInit+0x1c0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_I2S_MspInit+0x1c0>)
 8000e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e34:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_I2S_MspInit+0x1c0>)
 8000e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e3c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_I2S_MspInit+0x1c0>)
 8000e40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e44:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_I2S_MspInit+0x1c0>)
 8000e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_I2S_MspInit+0x1c0>)
 8000e50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e54:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_I2S_MspInit+0x1c0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000e5c:	480e      	ldr	r0, [pc, #56]	; (8000e98 <HAL_I2S_MspInit+0x1c0>)
 8000e5e:	f000 fa87 	bl	8001370 <HAL_DMA_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 8000e68:	f7ff ff02 	bl	8000c70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_I2S_MspInit+0x1c0>)
 8000e70:	639a      	str	r2, [r3, #56]	; 0x38
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <HAL_I2S_MspInit+0x1c0>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40003800 	.word	0x40003800
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020800 	.word	0x40020800
 8000e8c:	40020400 	.word	0x40020400
 8000e90:	20008404 	.word	0x20008404
 8000e94:	40026058 	.word	0x40026058
 8000e98:	20008464 	.word	0x20008464
 8000e9c:	40026070 	.word	0x40026070

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f8e8 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <DMA1_Stream3_IRQHandler+0x10>)
 8000f02:	f000 fb3b 	bl	800157c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20008404 	.word	0x20008404

08000f10 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <DMA1_Stream4_IRQHandler+0x10>)
 8000f16:	f000 fb31 	bl	800157c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20008464 	.word	0x20008464

08000f24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <OTG_FS_IRQHandler+0x10>)
 8000f2a:	f001 ffcf 	bl	8002ecc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20008ae0 	.word	0x20008ae0

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f007 fbae 	bl	80086c8 <__errno>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	230c      	movs	r3, #12
 8000f70:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20020000 	.word	0x20020000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	2000036c 	.word	0x2000036c
 8000fa0:	20008ef0 	.word	0x20008ef0

08000fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <SystemInit+0x28>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <SystemInit+0x28>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SystemInit+0x28>)
 8000fba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fbe:	609a      	str	r2, [r3, #8]
#endif
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fd6:	e003      	b.n	8000fe0 <LoopCopyDataInit>

08000fd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fde:	3104      	adds	r1, #4

08000fe0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fe4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fe6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fe8:	d3f6      	bcc.n	8000fd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fec:	e002      	b.n	8000ff4 <LoopFillZerobss>

08000fee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ff0:	f842 3b04 	str.w	r3, [r2], #4

08000ff4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ff6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ff8:	d3f9      	bcc.n	8000fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ffa:	f7ff ffd3 	bl	8000fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f007 fb69 	bl	80086d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff facd 	bl	80005a0 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001008:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800100c:	08009ca8 	.word	0x08009ca8
  ldr  r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001014:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 8001018:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 800101c:	20008eec 	.word	0x20008eec

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_Init+0x40>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_Init+0x40>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x40>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f94d 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fe16 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f965 	bl	8001356 <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a4:	f000 f92d 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000004 	.word	0x20000004

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008
 80010ec:	2000850c 	.word	0x2000850c

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000850c 	.word	0x2000850c

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_Delay+0x40>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffde 	bl	80010f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000008 	.word	0x20000008

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117e:	4a04      	ldr	r2, [pc, #16]	; (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	60d3      	str	r3, [r2, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff29 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff3e 	bl	8001194 <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff8e 	bl	8001240 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5d 	bl	80011ec <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff31 	bl	80011b0 <__NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffa2 	bl	80012a8 <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff feb8 	bl	80010f0 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e099      	b.n	80014c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2202      	movs	r2, #2
 8001398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ac:	e00f      	b.n	80013ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ae:	f7ff fe9f 	bl	80010f0 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	d908      	bls.n	80013ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2220      	movs	r2, #32
 80013c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2203      	movs	r2, #3
 80013c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e078      	b.n	80014c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1e8      	bne.n	80013ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <HAL_DMA_Init+0x158>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	2b04      	cmp	r3, #4
 8001426:	d107      	bne.n	8001438 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	4313      	orrs	r3, r2
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4313      	orrs	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f023 0307 	bic.w	r3, r3, #7
 800144e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	4313      	orrs	r3, r2
 8001458:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	2b04      	cmp	r3, #4
 8001460:	d117      	bne.n	8001492 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	4313      	orrs	r3, r2
 800146a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00e      	beq.n	8001492 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 fa6f 	bl	8001958 <DMA_CheckFifoParam>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2240      	movs	r2, #64	; 0x40
 8001484:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800148e:	2301      	movs	r3, #1
 8001490:	e016      	b.n	80014c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fa26 	bl	80018ec <DMA_CalcBaseAndBitshift>
 80014a0:	4603      	mov	r3, r0
 80014a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a8:	223f      	movs	r2, #63	; 0x3f
 80014aa:	409a      	lsls	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	f010803f 	.word	0xf010803f

080014cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_DMA_Start_IT+0x26>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e040      	b.n	8001574 <HAL_DMA_Start_IT+0xa8>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d12f      	bne.n	8001566 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2202      	movs	r2, #2
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 f9b8 	bl	8001890 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	223f      	movs	r2, #63	; 0x3f
 8001526:	409a      	lsls	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0216 	orr.w	r2, r2, #22
 800153a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0208 	orr.w	r2, r2, #8
 8001552:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e005      	b.n	8001572 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800156e:	2302      	movs	r3, #2
 8001570:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001572:	7dfb      	ldrb	r3, [r7, #23]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001588:	4b92      	ldr	r3, [pc, #584]	; (80017d4 <HAL_DMA_IRQHandler+0x258>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a92      	ldr	r2, [pc, #584]	; (80017d8 <HAL_DMA_IRQHandler+0x25c>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0a9b      	lsrs	r3, r3, #10
 8001594:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a6:	2208      	movs	r2, #8
 80015a8:	409a      	lsls	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d01a      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0204 	bic.w	r2, r2, #4
 80015ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	2208      	movs	r2, #8
 80015d6:	409a      	lsls	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ec:	2201      	movs	r2, #1
 80015ee:	409a      	lsls	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d012      	beq.n	800161e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	2201      	movs	r2, #1
 800160c:	409a      	lsls	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001616:	f043 0202 	orr.w	r2, r3, #2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	2204      	movs	r2, #4
 8001624:	409a      	lsls	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d012      	beq.n	8001654 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00b      	beq.n	8001654 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	2204      	movs	r2, #4
 8001642:	409a      	lsls	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164c:	f043 0204 	orr.w	r2, r3, #4
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001658:	2210      	movs	r2, #16
 800165a:	409a      	lsls	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d043      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d03c      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001676:	2210      	movs	r2, #16
 8001678:	409a      	lsls	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d018      	beq.n	80016be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d108      	bne.n	80016ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d024      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	4798      	blx	r3
 80016aa:	e01f      	b.n	80016ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d01b      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	4798      	blx	r3
 80016bc:	e016      	b.n	80016ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0208 	bic.w	r2, r2, #8
 80016da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f0:	2220      	movs	r2, #32
 80016f2:	409a      	lsls	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 808e 	beq.w	800181a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8086 	beq.w	800181a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001712:	2220      	movs	r2, #32
 8001714:	409a      	lsls	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b05      	cmp	r3, #5
 8001724:	d136      	bne.n	8001794 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0216 	bic.w	r2, r2, #22
 8001734:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001744:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d103      	bne.n	8001756 <HAL_DMA_IRQHandler+0x1da>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0208 	bic.w	r2, r2, #8
 8001764:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	223f      	movs	r2, #63	; 0x3f
 800176c:	409a      	lsls	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001786:	2b00      	cmp	r3, #0
 8001788:	d07d      	beq.n	8001886 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	4798      	blx	r3
        }
        return;
 8001792:	e078      	b.n	8001886 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d01c      	beq.n	80017dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d108      	bne.n	80017c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d030      	beq.n	800181a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	4798      	blx	r3
 80017c0:	e02b      	b.n	800181a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d027      	beq.n	800181a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	4798      	blx	r3
 80017d2:	e022      	b.n	800181a <HAL_DMA_IRQHandler+0x29e>
 80017d4:	20000000 	.word	0x20000000
 80017d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10f      	bne.n	800180a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0210 	bic.w	r2, r2, #16
 80017f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	2b00      	cmp	r3, #0
 8001820:	d032      	beq.n	8001888 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d022      	beq.n	8001874 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2205      	movs	r2, #5
 8001832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0201 	bic.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	3301      	adds	r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	429a      	cmp	r2, r3
 8001850:	d307      	bcc.n	8001862 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f2      	bne.n	8001846 <HAL_DMA_IRQHandler+0x2ca>
 8001860:	e000      	b.n	8001864 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001862:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	4798      	blx	r3
 8001884:	e000      	b.n	8001888 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001886:	bf00      	nop
    }
  }
}
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop

08001890 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b40      	cmp	r3, #64	; 0x40
 80018bc:	d108      	bne.n	80018d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018ce:	e007      	b.n	80018e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	60da      	str	r2, [r3, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3b10      	subs	r3, #16
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <DMA_CalcBaseAndBitshift+0x64>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001906:	4a13      	ldr	r2, [pc, #76]	; (8001954 <DMA_CalcBaseAndBitshift+0x68>)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b03      	cmp	r3, #3
 8001918:	d909      	bls.n	800192e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001922:	f023 0303 	bic.w	r3, r3, #3
 8001926:	1d1a      	adds	r2, r3, #4
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	659a      	str	r2, [r3, #88]	; 0x58
 800192c:	e007      	b.n	800193e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001936:	f023 0303 	bic.w	r3, r3, #3
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	aaaaaaab 	.word	0xaaaaaaab
 8001954:	08009ad4 	.word	0x08009ad4

08001958 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d11f      	bne.n	80019b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d855      	bhi.n	8001a24 <DMA_CheckFifoParam+0xcc>
 8001978:	a201      	add	r2, pc, #4	; (adr r2, 8001980 <DMA_CheckFifoParam+0x28>)
 800197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197e:	bf00      	nop
 8001980:	08001991 	.word	0x08001991
 8001984:	080019a3 	.word	0x080019a3
 8001988:	08001991 	.word	0x08001991
 800198c:	08001a25 	.word	0x08001a25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d045      	beq.n	8001a28 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a0:	e042      	b.n	8001a28 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019aa:	d13f      	bne.n	8001a2c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b0:	e03c      	b.n	8001a2c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ba:	d121      	bne.n	8001a00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d836      	bhi.n	8001a30 <DMA_CheckFifoParam+0xd8>
 80019c2:	a201      	add	r2, pc, #4	; (adr r2, 80019c8 <DMA_CheckFifoParam+0x70>)
 80019c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c8:	080019d9 	.word	0x080019d9
 80019cc:	080019df 	.word	0x080019df
 80019d0:	080019d9 	.word	0x080019d9
 80019d4:	080019f1 	.word	0x080019f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
      break;
 80019dc:	e02f      	b.n	8001a3e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d024      	beq.n	8001a34 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ee:	e021      	b.n	8001a34 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019f8:	d11e      	bne.n	8001a38 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019fe:	e01b      	b.n	8001a38 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d902      	bls.n	8001a0c <DMA_CheckFifoParam+0xb4>
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d003      	beq.n	8001a12 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a0a:	e018      	b.n	8001a3e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a10:	e015      	b.n	8001a3e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00e      	beq.n	8001a3c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
      break;
 8001a22:	e00b      	b.n	8001a3c <DMA_CheckFifoParam+0xe4>
      break;
 8001a24:	bf00      	nop
 8001a26:	e00a      	b.n	8001a3e <DMA_CheckFifoParam+0xe6>
      break;
 8001a28:	bf00      	nop
 8001a2a:	e008      	b.n	8001a3e <DMA_CheckFifoParam+0xe6>
      break;
 8001a2c:	bf00      	nop
 8001a2e:	e006      	b.n	8001a3e <DMA_CheckFifoParam+0xe6>
      break;
 8001a30:	bf00      	nop
 8001a32:	e004      	b.n	8001a3e <DMA_CheckFifoParam+0xe6>
      break;
 8001a34:	bf00      	nop
 8001a36:	e002      	b.n	8001a3e <DMA_CheckFifoParam+0xe6>
      break;   
 8001a38:	bf00      	nop
 8001a3a:	e000      	b.n	8001a3e <DMA_CheckFifoParam+0xe6>
      break;
 8001a3c:	bf00      	nop
    }
  } 
  
  return status; 
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	e16b      	b.n	8001d40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	f040 815a 	bne.w	8001d3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_GPIO_Init+0x5a>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a9a:	2b11      	cmp	r3, #17
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b12      	cmp	r3, #18
 8001aa4:	d130      	bne.n	8001b08 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001adc:	2201      	movs	r2, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 0201 	and.w	r2, r3, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0xfc>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b12      	cmp	r3, #18
 8001b46:	d123      	bne.n	8001b90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	220f      	movs	r2, #15
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	08da      	lsrs	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3208      	adds	r2, #8
 8001b8a:	69b9      	ldr	r1, [r7, #24]
 8001b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0203 	and.w	r2, r3, #3
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80b4 	beq.w	8001d3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	; (8001d54 <HAL_GPIO_Init+0x308>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a5e      	ldr	r2, [pc, #376]	; (8001d54 <HAL_GPIO_Init+0x308>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <HAL_GPIO_Init+0x308>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bee:	4a5a      	ldr	r2, [pc, #360]	; (8001d58 <HAL_GPIO_Init+0x30c>)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	220f      	movs	r2, #15
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a51      	ldr	r2, [pc, #324]	; (8001d5c <HAL_GPIO_Init+0x310>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d02b      	beq.n	8001c72 <HAL_GPIO_Init+0x226>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a50      	ldr	r2, [pc, #320]	; (8001d60 <HAL_GPIO_Init+0x314>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d025      	beq.n	8001c6e <HAL_GPIO_Init+0x222>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4f      	ldr	r2, [pc, #316]	; (8001d64 <HAL_GPIO_Init+0x318>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01f      	beq.n	8001c6a <HAL_GPIO_Init+0x21e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4e      	ldr	r2, [pc, #312]	; (8001d68 <HAL_GPIO_Init+0x31c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d019      	beq.n	8001c66 <HAL_GPIO_Init+0x21a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4d      	ldr	r2, [pc, #308]	; (8001d6c <HAL_GPIO_Init+0x320>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d013      	beq.n	8001c62 <HAL_GPIO_Init+0x216>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4c      	ldr	r2, [pc, #304]	; (8001d70 <HAL_GPIO_Init+0x324>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d00d      	beq.n	8001c5e <HAL_GPIO_Init+0x212>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4b      	ldr	r2, [pc, #300]	; (8001d74 <HAL_GPIO_Init+0x328>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d007      	beq.n	8001c5a <HAL_GPIO_Init+0x20e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4a      	ldr	r2, [pc, #296]	; (8001d78 <HAL_GPIO_Init+0x32c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_GPIO_Init+0x20a>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e00e      	b.n	8001c74 <HAL_GPIO_Init+0x228>
 8001c56:	2308      	movs	r3, #8
 8001c58:	e00c      	b.n	8001c74 <HAL_GPIO_Init+0x228>
 8001c5a:	2306      	movs	r3, #6
 8001c5c:	e00a      	b.n	8001c74 <HAL_GPIO_Init+0x228>
 8001c5e:	2305      	movs	r3, #5
 8001c60:	e008      	b.n	8001c74 <HAL_GPIO_Init+0x228>
 8001c62:	2304      	movs	r3, #4
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x228>
 8001c66:	2303      	movs	r3, #3
 8001c68:	e004      	b.n	8001c74 <HAL_GPIO_Init+0x228>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e002      	b.n	8001c74 <HAL_GPIO_Init+0x228>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_GPIO_Init+0x228>
 8001c72:	2300      	movs	r3, #0
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	f002 0203 	and.w	r2, r2, #3
 8001c7a:	0092      	lsls	r2, r2, #2
 8001c7c:	4093      	lsls	r3, r2
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c84:	4934      	ldr	r1, [pc, #208]	; (8001d58 <HAL_GPIO_Init+0x30c>)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c92:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <HAL_GPIO_Init+0x330>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb6:	4a31      	ldr	r2, [pc, #196]	; (8001d7c <HAL_GPIO_Init+0x330>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <HAL_GPIO_Init+0x330>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce0:	4a26      	ldr	r2, [pc, #152]	; (8001d7c <HAL_GPIO_Init+0x330>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <HAL_GPIO_Init+0x330>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <HAL_GPIO_Init+0x330>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_GPIO_Init+0x330>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <HAL_GPIO_Init+0x330>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b0f      	cmp	r3, #15
 8001d44:	f67f ae90 	bls.w	8001a68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3724      	adds	r7, #36	; 0x24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40013800 	.word	0x40013800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020400 	.word	0x40020400
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020c00 	.word	0x40020c00
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40021400 	.word	0x40021400
 8001d74:	40021800 	.word	0x40021800
 8001d78:	40021c00 	.word	0x40021c00
 8001d7c:	40013c00 	.word	0x40013c00

08001d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	887b      	ldrh	r3, [r7, #2]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e001      	b.n	8001da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc0:	787b      	ldrb	r3, [r7, #1]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dcc:	e003      	b.n	8001dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	041a      	lsls	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	619a      	str	r2, [r3, #24]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695a      	ldr	r2, [r3, #20]
 8001df2:	887b      	ldrh	r3, [r7, #2]
 8001df4:	401a      	ands	r2, r3
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d104      	bne.n	8001e06 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	041a      	lsls	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e128      	b.n	800207c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a90      	ldr	r2, [pc, #576]	; (8002084 <HAL_I2S_Init+0x26c>)
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7fe ff47 	bl	8000cd8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e60:	f023 030f 	bic.w	r3, r3, #15
 8001e64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d060      	beq.n	8001f38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001e7e:	2310      	movs	r3, #16
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e001      	b.n	8001e88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001e84:	2320      	movs	r3, #32
 8001e86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d802      	bhi.n	8001e96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f002 fd68 	bl	800496c <HAL_RCCEx_GetPeriphCLKFreq>
 8001e9c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea6:	d125      	bne.n	8001ef4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d010      	beq.n	8001ed2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	3305      	adds	r3, #5
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e01f      	b.n	8001f12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	3305      	adds	r3, #5
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	e00e      	b.n	8001f12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	461a      	mov	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0e:	3305      	adds	r3, #5
 8001f10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4a5c      	ldr	r2, [pc, #368]	; (8002088 <HAL_I2S_Init+0x270>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	08db      	lsrs	r3, r3, #3
 8001f1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	e003      	b.n	8001f40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d902      	bls.n	8001f4c <HAL_I2S_Init+0x134>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	2bff      	cmp	r3, #255	; 0xff
 8001f4a:	d907      	bls.n	8001f5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f50:	f043 0210 	orr.w	r2, r3, #16
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e08f      	b.n	800207c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	ea42 0103 	orr.w	r1, r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f7a:	f023 030f 	bic.w	r3, r3, #15
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6851      	ldr	r1, [r2, #4]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6892      	ldr	r2, [r2, #8]
 8001f86:	4311      	orrs	r1, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68d2      	ldr	r2, [r2, #12]
 8001f8c:	4311      	orrs	r1, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6992      	ldr	r2, [r2, #24]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d161      	bne.n	800206c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a38      	ldr	r2, [pc, #224]	; (800208c <HAL_I2S_Init+0x274>)
 8001fac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a37      	ldr	r2, [pc, #220]	; (8002090 <HAL_I2S_Init+0x278>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_I2S_Init+0x1a4>
 8001fb8:	4b36      	ldr	r3, [pc, #216]	; (8002094 <HAL_I2S_Init+0x27c>)
 8001fba:	e001      	b.n	8001fc0 <HAL_I2S_Init+0x1a8>
 8001fbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	4932      	ldr	r1, [pc, #200]	; (8002090 <HAL_I2S_Init+0x278>)
 8001fc8:	428a      	cmp	r2, r1
 8001fca:	d101      	bne.n	8001fd0 <HAL_I2S_Init+0x1b8>
 8001fcc:	4a31      	ldr	r2, [pc, #196]	; (8002094 <HAL_I2S_Init+0x27c>)
 8001fce:	e001      	b.n	8001fd4 <HAL_I2S_Init+0x1bc>
 8001fd0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001fd4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001fd8:	f023 030f 	bic.w	r3, r3, #15
 8001fdc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a2b      	ldr	r2, [pc, #172]	; (8002090 <HAL_I2S_Init+0x278>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_I2S_Init+0x1d4>
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_I2S_Init+0x27c>)
 8001fea:	e001      	b.n	8001ff0 <HAL_I2S_Init+0x1d8>
 8001fec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a25      	ldr	r2, [pc, #148]	; (8002090 <HAL_I2S_Init+0x278>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d101      	bne.n	8002002 <HAL_I2S_Init+0x1ea>
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_I2S_Init+0x27c>)
 8002000:	e001      	b.n	8002006 <HAL_I2S_Init+0x1ee>
 8002002:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002012:	d003      	beq.n	800201c <HAL_I2S_Init+0x204>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d103      	bne.n	8002024 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800201c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e001      	b.n	8002028 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	b299      	uxth	r1, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800203e:	4303      	orrs	r3, r0
 8002040:	b29b      	uxth	r3, r3
 8002042:	430b      	orrs	r3, r1
 8002044:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002046:	4313      	orrs	r3, r2
 8002048:	b29a      	uxth	r2, r3
 800204a:	897b      	ldrh	r3, [r7, #10]
 800204c:	4313      	orrs	r3, r2
 800204e:	b29b      	uxth	r3, r3
 8002050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002054:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <HAL_I2S_Init+0x278>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_I2S_Init+0x24c>
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_I2S_Init+0x27c>)
 8002062:	e001      	b.n	8002068 <HAL_I2S_Init+0x250>
 8002064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002068:	897a      	ldrh	r2, [r7, #10]
 800206a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	0800218f 	.word	0x0800218f
 8002088:	cccccccd 	.word	0xcccccccd
 800208c:	080025b9 	.word	0x080025b9
 8002090:	40003800 	.word	0x40003800
 8002094:	40003400 	.word	0x40003400

08002098 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	881a      	ldrh	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	1c9a      	adds	r2, r3, #2
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10e      	bne.n	8002128 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002118:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffb8 	bl	8002098 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	b292      	uxth	r2, r2
 8002144:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	1c9a      	adds	r2, r3, #2
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002162:	b29b      	uxth	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10e      	bne.n	8002186 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002176:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ff93 	bl	80020ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d13a      	bne.n	8002220 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d109      	bne.n	80021c8 <I2S_IRQHandler+0x3a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021be:	2b40      	cmp	r3, #64	; 0x40
 80021c0:	d102      	bne.n	80021c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffb4 	bl	8002130 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d126      	bne.n	8002220 <I2S_IRQHandler+0x92>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d11f      	bne.n	8002220 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f043 0202 	orr.w	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ff50 	bl	80020c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b03      	cmp	r3, #3
 800222a:	d136      	bne.n	800229a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b02      	cmp	r3, #2
 8002234:	d109      	bne.n	800224a <I2S_IRQHandler+0xbc>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	2b80      	cmp	r3, #128	; 0x80
 8002242:	d102      	bne.n	800224a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff45 	bl	80020d4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b08      	cmp	r3, #8
 8002252:	d122      	bne.n	800229a <I2S_IRQHandler+0x10c>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b20      	cmp	r3, #32
 8002260:	d11b      	bne.n	800229a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002270:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	f043 0204 	orr.w	r2, r3, #4
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff13 	bl	80020c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d002      	beq.n	80022d0 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
 80022cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80022ce:	e160      	b.n	8002592 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e15a      	b.n	800259c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e152      	b.n	800259c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d002      	beq.n	8002322 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2b05      	cmp	r3, #5
 8002320:	d114      	bne.n	800234c <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002336:	887b      	ldrh	r3, [r7, #2]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002340:	887b      	ldrh	r3, [r7, #2]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	865a      	strh	r2, [r3, #50]	; 0x32
 800234a:	e00b      	b.n	8002364 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	887a      	ldrh	r2, [r7, #2]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	887a      	ldrh	r2, [r7, #2]
 800235c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	887a      	ldrh	r2, [r7, #2]
 8002362:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2205      	movs	r2, #5
 800236e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	4a8b      	ldr	r2, [pc, #556]	; (80025a4 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002378:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	4a8a      	ldr	r2, [pc, #552]	; (80025a8 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	4a89      	ldr	r2, [pc, #548]	; (80025ac <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002388:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	4a85      	ldr	r2, [pc, #532]	; (80025a4 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	4a84      	ldr	r2, [pc, #528]	; (80025a8 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	4a83      	ldr	r2, [pc, #524]	; (80025ac <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80023a0:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ac:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b4:	d002      	beq.n	80023bc <HAL_I2SEx_TransmitReceive_DMA+0x118>
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d16b      	bne.n	8002494 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a79      	ldr	r2, [pc, #484]	; (80025b0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d101      	bne.n	80023d2 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80023ce:	4b79      	ldr	r3, [pc, #484]	; (80025b4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80023d0:	e001      	b.n	80023d6 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80023d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023d6:	330c      	adds	r3, #12
 80023d8:	4619      	mov	r1, r3
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f7ff f872 	bl	80014cc <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a70      	ldr	r2, [pc, #448]	; (80025b0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 80023f2:	4b70      	ldr	r3, [pc, #448]	; (80025b4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80023f4:	e001      	b.n	80023fa <HAL_I2SEx_TransmitReceive_DMA+0x156>
 80023f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	496b      	ldr	r1, [pc, #428]	; (80025b0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002402:	428b      	cmp	r3, r1
 8002404:	d101      	bne.n	800240a <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002406:	4b6b      	ldr	r3, [pc, #428]	; (80025b4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002408:	e001      	b.n	800240e <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 800240a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800240e:	f042 0201 	orr.w	r2, r2, #1
 8002412:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002414:	f107 0308 	add.w	r3, r7, #8
 8002418:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	6819      	ldr	r1, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	330c      	adds	r3, #12
 8002428:	461a      	mov	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242e:	b29b      	uxth	r3, r3
 8002430:	f7ff f84c 	bl	80014cc <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0202 	orr.w	r2, r2, #2
 8002442:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002452:	f000 809e 	beq.w	8002592 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a55      	ldr	r2, [pc, #340]	; (80025b0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d101      	bne.n	8002464 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002460:	4b54      	ldr	r3, [pc, #336]	; (80025b4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002462:	e001      	b.n	8002468 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002464:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4950      	ldr	r1, [pc, #320]	; (80025b0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002470:	428b      	cmp	r3, r1
 8002472:	d101      	bne.n	8002478 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002474:	4b4f      	ldr	r3, [pc, #316]	; (80025b4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002476:	e001      	b.n	800247c <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002478:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800247c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002480:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69da      	ldr	r2, [r3, #28]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002490:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002492:	e07e      	b.n	8002592 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024a2:	d10a      	bne.n	80024ba <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80024ba:	f107 0308 	add.w	r3, r7, #8
 80024be:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6819      	ldr	r1, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a38      	ldr	r2, [pc, #224]	; (80025b0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80024d4:	e001      	b.n	80024da <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80024d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024da:	330c      	adds	r3, #12
 80024dc:	461a      	mov	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f7fe fff2 	bl	80014cc <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a30      	ldr	r2, [pc, #192]	; (80025b0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d101      	bne.n	80024f6 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80024f4:	e001      	b.n	80024fa <HAL_I2SEx_TransmitReceive_DMA+0x256>
 80024f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	492b      	ldr	r1, [pc, #172]	; (80025b0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002502:	428b      	cmp	r3, r1
 8002504:	d101      	bne.n	800250a <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002506:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002508:	e001      	b.n	800250e <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 800250a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800250e:	f042 0202 	orr.w	r2, r2, #2
 8002512:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	330c      	adds	r3, #12
 8002522:	4619      	mov	r1, r3
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800252c:	b29b      	uxth	r3, r3
 800252e:	f7fe ffcd 	bl	80014cc <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002550:	d01e      	beq.n	8002590 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800255e:	e001      	b.n	8002564 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4911      	ldr	r1, [pc, #68]	; (80025b0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800256c:	428b      	cmp	r3, r1
 800256e:	d101      	bne.n	8002574 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002570:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002572:	e001      	b.n	8002578 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800257c:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800258c:	61da      	str	r2, [r3, #28]
 800258e:	e000      	b.n	8002592 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002590:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 800259a:	7ffb      	ldrb	r3, [r7, #31]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3720      	adds	r7, #32
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	08002861 	.word	0x08002861
 80025a8:	0800287d 	.word	0x0800287d
 80025ac:	080029b5 	.word	0x080029b5
 80025b0:	40003800 	.word	0x40003800
 80025b4:	40003400 	.word	0x40003400

080025b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4aa2      	ldr	r2, [pc, #648]	; (8002858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80025d2:	4ba2      	ldr	r3, [pc, #648]	; (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80025d4:	e001      	b.n	80025da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80025d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a9b      	ldr	r2, [pc, #620]	; (8002858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80025f0:	4b9a      	ldr	r3, [pc, #616]	; (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80025f2:	e001      	b.n	80025f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80025f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002604:	d004      	beq.n	8002610 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f040 8099 	bne.w	8002742 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b02      	cmp	r3, #2
 8002618:	d107      	bne.n	800262a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fa05 	bl	8002a34 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d107      	bne.n	8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 faa8 	bl	8002b94 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d13a      	bne.n	80026c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b00      	cmp	r3, #0
 8002656:	d035      	beq.n	80026c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a7e      	ldr	r2, [pc, #504]	; (8002858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002662:	4b7e      	ldr	r3, [pc, #504]	; (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002664:	e001      	b.n	800266a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002666:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4979      	ldr	r1, [pc, #484]	; (8002858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002672:	428b      	cmp	r3, r1
 8002674:	d101      	bne.n	800267a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002676:	4b79      	ldr	r3, [pc, #484]	; (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002678:	e001      	b.n	800267e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800267a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800267e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002682:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002692:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f043 0202 	orr.w	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff fcfe 	bl	80020c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	f040 80be 	bne.w	800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80b8 	beq.w	800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a59      	ldr	r2, [pc, #356]	; (8002858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80026f6:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80026f8:	e001      	b.n	80026fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80026fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4954      	ldr	r1, [pc, #336]	; (8002858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002706:	428b      	cmp	r3, r1
 8002708:	d101      	bne.n	800270e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800270a:	4b54      	ldr	r3, [pc, #336]	; (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800270c:	e001      	b.n	8002712 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800270e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002712:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002716:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f043 0204 	orr.w	r2, r3, #4
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fcc0 	bl	80020c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002740:	e084      	b.n	800284c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b02      	cmp	r3, #2
 800274a:	d107      	bne.n	800275c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f99e 	bl	8002a98 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f9dd 	bl	8002b30 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d12f      	bne.n	80027e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d02a      	beq.n	80027e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002798:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2e      	ldr	r2, [pc, #184]	; (8002858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80027a4:	4b2d      	ldr	r3, [pc, #180]	; (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027a6:	e001      	b.n	80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80027a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4929      	ldr	r1, [pc, #164]	; (8002858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027b4:	428b      	cmp	r3, r1
 80027b6:	d101      	bne.n	80027bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027ba:	e001      	b.n	80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80027bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f043 0202 	orr.w	r2, r3, #2
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff fc70 	bl	80020c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d131      	bne.n	800284e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d02c      	beq.n	800284e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80027fe:	4b17      	ldr	r3, [pc, #92]	; (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002800:	e001      	b.n	8002806 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002802:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4912      	ldr	r1, [pc, #72]	; (8002858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800280e:	428b      	cmp	r3, r1
 8002810:	d101      	bne.n	8002816 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002812:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002814:	e001      	b.n	800281a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800281a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800281e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800282e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	f043 0204 	orr.w	r2, r3, #4
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff fc3b 	bl	80020c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800284a:	e000      	b.n	800284e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800284c:	bf00      	nop
}
 800284e:	bf00      	nop
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40003800 	.word	0x40003800
 800285c:	40003400 	.word	0x40003400

08002860 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f7fe f91c 	bl	8000aac <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 8084 	bne.w	800299c <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	429a      	cmp	r2, r3
 800289c:	d13c      	bne.n	8002918 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ac:	d006      	beq.n	80028bc <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d116      	bne.n	80028ea <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a3a      	ldr	r2, [pc, #232]	; (80029ac <I2SEx_TxRxDMACplt+0x130>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <I2SEx_TxRxDMACplt+0x4e>
 80028c6:	4b3a      	ldr	r3, [pc, #232]	; (80029b0 <I2SEx_TxRxDMACplt+0x134>)
 80028c8:	e001      	b.n	80028ce <I2SEx_TxRxDMACplt+0x52>
 80028ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4935      	ldr	r1, [pc, #212]	; (80029ac <I2SEx_TxRxDMACplt+0x130>)
 80028d6:	428b      	cmp	r3, r1
 80028d8:	d101      	bne.n	80028de <I2SEx_TxRxDMACplt+0x62>
 80028da:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <I2SEx_TxRxDMACplt+0x134>)
 80028dc:	e001      	b.n	80028e2 <I2SEx_TxRxDMACplt+0x66>
 80028de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	e007      	b.n	80028fa <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0201 	bic.w	r2, r2, #1
 80028f8:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7fe f8f4 	bl	8000b00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	429a      	cmp	r2, r3
 8002920:	d13c      	bne.n	800299c <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002930:	d006      	beq.n	8002940 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800293c:	2b00      	cmp	r3, #0
 800293e:	d108      	bne.n	8002952 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0202 	bic.w	r2, r2, #2
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	e015      	b.n	800297e <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a15      	ldr	r2, [pc, #84]	; (80029ac <I2SEx_TxRxDMACplt+0x130>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <I2SEx_TxRxDMACplt+0xe4>
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <I2SEx_TxRxDMACplt+0x134>)
 800295e:	e001      	b.n	8002964 <I2SEx_TxRxDMACplt+0xe8>
 8002960:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4910      	ldr	r1, [pc, #64]	; (80029ac <I2SEx_TxRxDMACplt+0x130>)
 800296c:	428b      	cmp	r3, r1
 800296e:	d101      	bne.n	8002974 <I2SEx_TxRxDMACplt+0xf8>
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <I2SEx_TxRxDMACplt+0x134>)
 8002972:	e001      	b.n	8002978 <I2SEx_TxRxDMACplt+0xfc>
 8002974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002978:	f022 0202 	bic.w	r2, r2, #2
 800297c:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f7fe f8b2 	bl	8000b00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7fe f8af 	bl	8000b00 <HAL_I2SEx_TxRxCpltCallback>
}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40003800 	.word	0x40003800
 80029b0:	40003400 	.word	0x40003400

080029b4 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0203 	bic.w	r2, r2, #3
 80029d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <I2SEx_TxRxDMAError+0x78>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d101      	bne.n	80029e0 <I2SEx_TxRxDMAError+0x2c>
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <I2SEx_TxRxDMAError+0x7c>)
 80029de:	e001      	b.n	80029e4 <I2SEx_TxRxDMAError+0x30>
 80029e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4910      	ldr	r1, [pc, #64]	; (8002a2c <I2SEx_TxRxDMAError+0x78>)
 80029ec:	428b      	cmp	r3, r1
 80029ee:	d101      	bne.n	80029f4 <I2SEx_TxRxDMAError+0x40>
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <I2SEx_TxRxDMAError+0x7c>)
 80029f2:	e001      	b.n	80029f8 <I2SEx_TxRxDMAError+0x44>
 80029f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029f8:	f022 0203 	bic.w	r2, r2, #3
 80029fc:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f043 0208 	orr.w	r2, r3, #8
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f7ff fb4e 	bl	80020c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40003800 	.word	0x40003800
 8002a30:	40003400 	.word	0x40003400

08002a34 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c99      	adds	r1, r3, #2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6251      	str	r1, [r2, #36]	; 0x24
 8002a46:	881a      	ldrh	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d113      	bne.n	8002a8e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d106      	bne.n	8002a8e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fe f839 	bl	8000b00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	1c99      	adds	r1, r3, #2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6251      	str	r1, [r2, #36]	; 0x24
 8002aaa:	8819      	ldrh	r1, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <I2SEx_TxISR_I2SExt+0x90>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d101      	bne.n	8002aba <I2SEx_TxISR_I2SExt+0x22>
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <I2SEx_TxISR_I2SExt+0x94>)
 8002ab8:	e001      	b.n	8002abe <I2SEx_TxISR_I2SExt+0x26>
 8002aba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002abe:	460a      	mov	r2, r1
 8002ac0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d121      	bne.n	8002b1e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <I2SEx_TxISR_I2SExt+0x90>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <I2SEx_TxISR_I2SExt+0x50>
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <I2SEx_TxISR_I2SExt+0x94>)
 8002ae6:	e001      	b.n	8002aec <I2SEx_TxISR_I2SExt+0x54>
 8002ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	490d      	ldr	r1, [pc, #52]	; (8002b28 <I2SEx_TxISR_I2SExt+0x90>)
 8002af4:	428b      	cmp	r3, r1
 8002af6:	d101      	bne.n	8002afc <I2SEx_TxISR_I2SExt+0x64>
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <I2SEx_TxISR_I2SExt+0x94>)
 8002afa:	e001      	b.n	8002b00 <I2SEx_TxISR_I2SExt+0x68>
 8002afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d106      	bne.n	8002b1e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7fd fff1 	bl	8000b00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40003800 	.word	0x40003800
 8002b2c:	40003400 	.word	0x40003400

08002b30 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68d8      	ldr	r0, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	1c99      	adds	r1, r3, #2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002b48:	b282      	uxth	r2, r0
 8002b4a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d113      	bne.n	8002b8c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b72:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fd ffba 	bl	8000b00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a20      	ldr	r2, [pc, #128]	; (8002c24 <I2SEx_RxISR_I2SExt+0x90>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <I2SEx_RxISR_I2SExt+0x16>
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <I2SEx_RxISR_I2SExt+0x94>)
 8002ba8:	e001      	b.n	8002bae <I2SEx_RxISR_I2SExt+0x1a>
 8002baa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bae:	68d8      	ldr	r0, [r3, #12]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	1c99      	adds	r1, r3, #2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002bba:	b282      	uxth	r2, r0
 8002bbc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d121      	bne.n	8002c1a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <I2SEx_RxISR_I2SExt+0x90>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d101      	bne.n	8002be4 <I2SEx_RxISR_I2SExt+0x50>
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <I2SEx_RxISR_I2SExt+0x94>)
 8002be2:	e001      	b.n	8002be8 <I2SEx_RxISR_I2SExt+0x54>
 8002be4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	490d      	ldr	r1, [pc, #52]	; (8002c24 <I2SEx_RxISR_I2SExt+0x90>)
 8002bf0:	428b      	cmp	r3, r1
 8002bf2:	d101      	bne.n	8002bf8 <I2SEx_RxISR_I2SExt+0x64>
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <I2SEx_RxISR_I2SExt+0x94>)
 8002bf6:	e001      	b.n	8002bfc <I2SEx_RxISR_I2SExt+0x68>
 8002bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bfc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c00:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d106      	bne.n	8002c1a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7fd ff73 	bl	8000b00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40003800 	.word	0x40003800
 8002c28:	40003400 	.word	0x40003400

08002c2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2e:	b08f      	sub	sp, #60	; 0x3c
 8002c30:	af0a      	add	r7, sp, #40	; 0x28
 8002c32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e10f      	b.n	8002e5e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f005 fa2b 	bl	80080b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2203      	movs	r2, #3
 8002c62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f001 ffe6 	bl	8004c4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	687e      	ldr	r6, [r7, #4]
 8002c8a:	466d      	mov	r5, sp
 8002c8c:	f106 0410 	add.w	r4, r6, #16
 8002c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ca0:	1d33      	adds	r3, r6, #4
 8002ca2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca4:	6838      	ldr	r0, [r7, #0]
 8002ca6:	f001 febd 	bl	8004a24 <USB_CoreInit>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0d0      	b.n	8002e5e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 ffd4 	bl	8004c70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	e04a      	b.n	8002d64 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	333d      	adds	r3, #61	; 0x3d
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ce2:	7bfa      	ldrb	r2, [r7, #15]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	333c      	adds	r3, #60	; 0x3c
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	b298      	uxth	r0, r3
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3342      	adds	r3, #66	; 0x42
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	333f      	adds	r3, #63	; 0x3f
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3344      	adds	r3, #68	; 0x44
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	3348      	adds	r3, #72	; 0x48
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	3350      	adds	r3, #80	; 0x50
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	3301      	adds	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d3af      	bcc.n	8002cce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e044      	b.n	8002dfe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d3b5      	bcc.n	8002d74 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	687e      	ldr	r6, [r7, #4]
 8002e10:	466d      	mov	r5, sp
 8002e12:	f106 0410 	add.w	r4, r6, #16
 8002e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e22:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e26:	1d33      	adds	r3, r6, #4
 8002e28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e2a:	6838      	ldr	r0, [r7, #0]
 8002e2c:	f001 ff4a 	bl	8004cc4 <USB_DevInit>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e00d      	b.n	8002e5e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 ff92 	bl	8005d80 <USB_DevDisconnect>

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_PCD_Start+0x1c>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e020      	b.n	8002ec4 <HAL_PCD_Start+0x5e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d109      	bne.n	8002ea6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d005      	beq.n	8002ea6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 febe 	bl	8004c2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f002 ff42 	bl	8005d3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b08d      	sub	sp, #52	; 0x34
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f003 f800 	bl	8005ee8 <USB_GetMode>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f040 839d 	bne.w	800362a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 ff64 	bl	8005dc2 <USB_ReadInterrupts>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8393 	beq.w	8003628 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 ff5b 	bl	8005dc2 <USB_ReadInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d107      	bne.n	8002f26 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f002 0202 	and.w	r2, r2, #2
 8002f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 ff49 	bl	8005dc2 <USB_ReadInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d161      	bne.n	8002ffe <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699a      	ldr	r2, [r3, #24]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0210 	bic.w	r2, r2, #16
 8002f48:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	f003 020f 	and.w	r2, r3, #15
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	3304      	adds	r3, #4
 8002f68:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	0c5b      	lsrs	r3, r3, #17
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d124      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d035      	beq.n	8002fee <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	6a38      	ldr	r0, [r7, #32]
 8002f96:	f002 fdaf 	bl	8005af8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fa6:	441a      	add	r2, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fb8:	441a      	add	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	619a      	str	r2, [r3, #24]
 8002fbe:	e016      	b.n	8002fee <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	0c5b      	lsrs	r3, r3, #17
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	2b06      	cmp	r3, #6
 8002fca:	d110      	bne.n	8002fee <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6a38      	ldr	r0, [r7, #32]
 8002fd8:	f002 fd8e 	bl	8005af8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	699a      	ldr	r2, [r3, #24]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fe8:	441a      	add	r2, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699a      	ldr	r2, [r3, #24]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0210 	orr.w	r2, r2, #16
 8002ffc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f002 fedd 	bl	8005dc2 <USB_ReadInterrupts>
 8003008:	4603      	mov	r3, r0
 800300a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003012:	d16e      	bne.n	80030f2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f002 fee3 	bl	8005de8 <USB_ReadDevAllOutEpInterrupt>
 8003022:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003024:	e062      	b.n	80030ec <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d057      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f002 ff08 	bl	8005e50 <USB_ReadDevOutEPInterrupt>
 8003040:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00c      	beq.n	8003066 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003058:	461a      	mov	r2, r3
 800305a:	2301      	movs	r3, #1
 800305c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800305e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fdb1 	bl	8003bc8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00c      	beq.n	800308a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	4413      	add	r3, r2
 8003078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307c:	461a      	mov	r2, r3
 800307e:	2308      	movs	r3, #8
 8003080:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 feab 	bl	8003de0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a0:	461a      	mov	r2, r3
 80030a2:	2310      	movs	r3, #16
 80030a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030bc:	461a      	mov	r2, r3
 80030be:	2320      	movs	r3, #32
 80030c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d8:	461a      	mov	r2, r3
 80030da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	3301      	adds	r3, #1
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d199      	bne.n	8003026 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f002 fe63 	bl	8005dc2 <USB_ReadInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003102:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003106:	f040 80c0 	bne.w	800328a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f002 fe84 	bl	8005e1c <USB_ReadDevAllInEpInterrupt>
 8003114:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800311a:	e0b2      	b.n	8003282 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 80a7 	beq.w	8003276 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f002 feaa 	bl	8005e8c <USB_ReadDevInEPInterrupt>
 8003138:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d057      	beq.n	80031f4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	2201      	movs	r2, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	43db      	mvns	r3, r3
 800315e:	69f9      	ldr	r1, [r7, #28]
 8003160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003164:	4013      	ands	r3, r2
 8003166:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003174:	461a      	mov	r2, r3
 8003176:	2301      	movs	r3, #1
 8003178:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d132      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	3348      	adds	r3, #72	; 0x48
 8003192:	6819      	ldr	r1, [r3, #0]
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4403      	add	r3, r0
 80031a2:	3344      	adds	r3, #68	; 0x44
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4419      	add	r1, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4403      	add	r3, r0
 80031b6:	3348      	adds	r3, #72	; 0x48
 80031b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d113      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x31c>
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	3350      	adds	r3, #80	; 0x50
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d108      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031e0:	461a      	mov	r2, r3
 80031e2:	2101      	movs	r1, #1
 80031e4:	f002 feb2 	bl	8005f4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	4619      	mov	r1, r3
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f004 ffef 	bl	80081d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320a:	461a      	mov	r2, r3
 800320c:	2308      	movs	r3, #8
 800320e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003226:	461a      	mov	r2, r3
 8003228:	2310      	movs	r3, #16
 800322a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d008      	beq.n	8003248 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003242:	461a      	mov	r2, r3
 8003244:	2340      	movs	r3, #64	; 0x40
 8003246:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325e:	461a      	mov	r2, r3
 8003260:	2302      	movs	r3, #2
 8003262:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800326e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fc1b 	bl	8003aac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	3301      	adds	r3, #1
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	f47f af49 	bne.w	800311c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f002 fd97 	bl	8005dc2 <USB_ReadInterrupts>
 8003294:	4603      	mov	r3, r0
 8003296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800329a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800329e:	d122      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d108      	bne.n	80032d0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032c6:	2100      	movs	r1, #0
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 fe27 	bl	8003f1c <HAL_PCDEx_LPM_Callback>
 80032ce:	e002      	b.n	80032d6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f004 fff5 	bl	80082c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f002 fd69 	bl	8005dc2 <USB_ReadInterrupts>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032fa:	d112      	bne.n	8003322 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d102      	bne.n	8003312 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f004 ffb1 	bl	8008274 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003320:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f002 fd4b 	bl	8005dc2 <USB_ReadInterrupts>
 800332c:	4603      	mov	r3, r0
 800332e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003336:	f040 80c7 	bne.w	80034c8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2110      	movs	r1, #16
 8003354:	4618      	mov	r0, r3
 8003356:	f001 fe19 	bl	8004f8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335a:	2300      	movs	r3, #0
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800335e:	e056      	b.n	800340e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336c:	461a      	mov	r2, r3
 800336e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003372:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003384:	0151      	lsls	r1, r2, #5
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	440a      	add	r2, r1
 800338a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800338e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003392:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a4:	0151      	lsls	r1, r2, #5
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	440a      	add	r2, r1
 80033aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c0:	461a      	mov	r2, r3
 80033c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d8:	0151      	lsls	r1, r2, #5
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	440a      	add	r2, r1
 80033de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f8:	0151      	lsls	r1, r2, #5
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	440a      	add	r2, r1
 80033fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003402:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003406:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340a:	3301      	adds	r3, #1
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003414:	429a      	cmp	r2, r3
 8003416:	d3a3      	bcc.n	8003360 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003426:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800342a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	2b00      	cmp	r3, #0
 8003432:	d016      	beq.n	8003462 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003444:	f043 030b 	orr.w	r3, r3, #11
 8003448:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800345a:	f043 030b 	orr.w	r3, r3, #11
 800345e:	6453      	str	r3, [r2, #68]	; 0x44
 8003460:	e015      	b.n	800348e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003470:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003474:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003478:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003488:	f043 030b 	orr.w	r3, r3, #11
 800348c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800349c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034b2:	461a      	mov	r2, r3
 80034b4:	f002 fd4a 	bl	8005f4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80034c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f002 fc78 	bl	8005dc2 <USB_ReadInterrupts>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034dc:	d124      	bne.n	8003528 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f002 fd0e 	bl	8005f04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 fdae 	bl	800504e <USB_GetDevSpeed>
 80034f2:	4603      	mov	r3, r0
 80034f4:	461a      	mov	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681c      	ldr	r4, [r3, #0]
 80034fe:	f001 f947 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 8003502:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	4620      	mov	r0, r4
 800350e:	f001 faeb 	bl	8004ae8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f004 fe85 	bl	8008222 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003526:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f002 fc48 	bl	8005dc2 <USB_ReadInterrupts>
 8003532:	4603      	mov	r3, r0
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b08      	cmp	r3, #8
 800353a:	d10a      	bne.n	8003552 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f004 fe62 	bl	8008206 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f002 0208 	and.w	r2, r2, #8
 8003550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f002 fc33 	bl	8005dc2 <USB_ReadInterrupts>
 800355c:	4603      	mov	r3, r0
 800355e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003566:	d10f      	bne.n	8003588 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	b2db      	uxtb	r3, r3
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f004 fec4 	bl	8008300 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003586:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f002 fc18 	bl	8005dc2 <USB_ReadInterrupts>
 8003592:	4603      	mov	r3, r0
 8003594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003598:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800359c:	d10f      	bne.n	80035be <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	4619      	mov	r1, r3
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f004 fe97 	bl	80082dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f002 fbfd 	bl	8005dc2 <USB_ReadInterrupts>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d2:	d10a      	bne.n	80035ea <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f004 fea5 	bl	8008324 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f002 fbe7 	bl	8005dc2 <USB_ReadInterrupts>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d115      	bne.n	800362a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f004 fe95 	bl	8008340 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	e000      	b.n	800362a <HAL_PCD_IRQHandler+0x75e>
      return;
 8003628:	bf00      	nop
    }
  }
}
 800362a:	3734      	adds	r7, #52	; 0x34
 800362c:	46bd      	mov	sp, r7
 800362e:	bd90      	pop	{r4, r7, pc}

08003630 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_PCD_SetAddress+0x1a>
 8003646:	2302      	movs	r3, #2
 8003648:	e013      	b.n	8003672 <HAL_PCD_SetAddress+0x42>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f002 fb45 	bl	8005cf2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	4608      	mov	r0, r1
 8003684:	4611      	mov	r1, r2
 8003686:	461a      	mov	r2, r3
 8003688:	4603      	mov	r3, r0
 800368a:	70fb      	strb	r3, [r7, #3]
 800368c:	460b      	mov	r3, r1
 800368e:	803b      	strh	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800369c:	2b00      	cmp	r3, #0
 800369e:	da0f      	bge.n	80036c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 020f 	and.w	r2, r3, #15
 80036a6:	4613      	mov	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	3338      	adds	r3, #56	; 0x38
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	3304      	adds	r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	705a      	strb	r2, [r3, #1]
 80036be:	e00f      	b.n	80036e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	f003 020f 	and.w	r2, r3, #15
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	4413      	add	r3, r2
 80036d6:	3304      	adds	r3, #4
 80036d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036ec:	883a      	ldrh	r2, [r7, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	78ba      	ldrb	r2, [r7, #2]
 80036f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	785b      	ldrb	r3, [r3, #1]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d004      	beq.n	800370a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800370a:	78bb      	ldrb	r3, [r7, #2]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d102      	bne.n	8003716 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_PCD_EP_Open+0xaa>
 8003720:	2302      	movs	r3, #2
 8003722:	e00e      	b.n	8003742 <HAL_PCD_EP_Open+0xc8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68f9      	ldr	r1, [r7, #12]
 8003732:	4618      	mov	r0, r3
 8003734:	f001 fcb0 	bl	8005098 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003740:	7afb      	ldrb	r3, [r7, #11]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b084      	sub	sp, #16
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003756:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800375a:	2b00      	cmp	r3, #0
 800375c:	da0f      	bge.n	800377e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	f003 020f 	and.w	r2, r3, #15
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	3338      	adds	r3, #56	; 0x38
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	3304      	adds	r3, #4
 8003774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	705a      	strb	r2, [r3, #1]
 800377c:	e00f      	b.n	800379e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	f003 020f 	and.w	r2, r3, #15
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4413      	add	r3, r2
 8003794:	3304      	adds	r3, #4
 8003796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_PCD_EP_Close+0x6e>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e00e      	b.n	80037d6 <HAL_PCD_EP_Close+0x8c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68f9      	ldr	r1, [r7, #12]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f001 fcee 	bl	80051a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	460b      	mov	r3, r1
 80037ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ee:	7afb      	ldrb	r3, [r7, #11]
 80037f0:	f003 020f 	and.w	r2, r3, #15
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	3304      	adds	r3, #4
 8003806:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2200      	movs	r2, #0
 8003818:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003820:	7afb      	ldrb	r3, [r7, #11]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	b2da      	uxtb	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d102      	bne.n	800383a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800383a:	7afb      	ldrb	r3, [r7, #11]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	6979      	ldr	r1, [r7, #20]
 8003852:	f001 ffc9 	bl	80057e8 <USB_EP0StartXfer>
 8003856:	e008      	b.n	800386a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	6979      	ldr	r1, [r7, #20]
 8003866:	f001 fd7b 	bl	8005360 <USB_EPStartXfer>
  }

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	f003 020f 	and.w	r2, r3, #15
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	460b      	mov	r3, r1
 80038b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b4:	7afb      	ldrb	r3, [r7, #11]
 80038b6:	f003 020f 	and.w	r2, r3, #15
 80038ba:	4613      	mov	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	3338      	adds	r3, #56	; 0x38
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	3304      	adds	r3, #4
 80038ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2200      	movs	r2, #0
 80038dc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2201      	movs	r2, #1
 80038e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e4:	7afb      	ldrb	r3, [r7, #11]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d102      	bne.n	80038fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038fe:	7afb      	ldrb	r3, [r7, #11]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	2b00      	cmp	r3, #0
 8003906:	d109      	bne.n	800391c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	461a      	mov	r2, r3
 8003914:	6979      	ldr	r1, [r7, #20]
 8003916:	f001 ff67 	bl	80057e8 <USB_EP0StartXfer>
 800391a:	e008      	b.n	800392e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	6979      	ldr	r1, [r7, #20]
 800392a:	f001 fd19 	bl	8005360 <USB_EPStartXfer>
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	f003 020f 	and.w	r2, r3, #15
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	429a      	cmp	r2, r3
 8003950:	d901      	bls.n	8003956 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e050      	b.n	80039f8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800395a:	2b00      	cmp	r3, #0
 800395c:	da0f      	bge.n	800397e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	f003 020f 	and.w	r2, r3, #15
 8003964:	4613      	mov	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	3338      	adds	r3, #56	; 0x38
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	4413      	add	r3, r2
 8003972:	3304      	adds	r3, #4
 8003974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	705a      	strb	r2, [r3, #1]
 800397c:	e00d      	b.n	800399a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	4413      	add	r3, r2
 8003990:	3304      	adds	r3, #4
 8003992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_PCD_EP_SetStall+0x82>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e01e      	b.n	80039f8 <HAL_PCD_EP_SetStall+0xc0>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68f9      	ldr	r1, [r7, #12]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 f8be 	bl	8005b4a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	b2d9      	uxtb	r1, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039e8:	461a      	mov	r2, r3
 80039ea:	f002 faaf 	bl	8005f4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	f003 020f 	and.w	r2, r3, #15
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d901      	bls.n	8003a1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e042      	b.n	8003aa4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da0f      	bge.n	8003a46 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	f003 020f 	and.w	r2, r3, #15
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	3338      	adds	r3, #56	; 0x38
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	705a      	strb	r2, [r3, #1]
 8003a44:	e00f      	b.n	8003a66 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_PCD_EP_ClrStall+0x86>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e00e      	b.n	8003aa4 <HAL_PCD_EP_ClrStall+0xa4>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68f9      	ldr	r1, [r7, #12]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f002 f8c6 	bl	8005c26 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	3338      	adds	r3, #56	; 0x38
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	4413      	add	r3, r2
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d901      	bls.n	8003ae4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e06c      	b.n	8003bbe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d902      	bls.n	8003b00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3303      	adds	r3, #3
 8003b04:	089b      	lsrs	r3, r3, #2
 8003b06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b08:	e02b      	b.n	8003b62 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d902      	bls.n	8003b26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3303      	adds	r3, #3
 8003b2a:	089b      	lsrs	r3, r3, #2
 8003b2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	68d9      	ldr	r1, [r3, #12]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	4603      	mov	r3, r0
 8003b44:	6978      	ldr	r0, [r7, #20]
 8003b46:	f001 ffa2 	bl	8005a8e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	441a      	add	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	441a      	add	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d809      	bhi.n	8003b8c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	699a      	ldr	r2, [r3, #24]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d203      	bcs.n	8003b8c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1be      	bne.n	8003b0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d811      	bhi.n	8003bbc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	6939      	ldr	r1, [r7, #16]
 8003bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bb8:	4013      	ands	r3, r2
 8003bba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	333c      	adds	r3, #60	; 0x3c
 8003be0:	3304      	adds	r3, #4
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	f040 80a0 	bne.w	8003d40 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d015      	beq.n	8003c36 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4a72      	ldr	r2, [pc, #456]	; (8003dd8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	f240 80dd 	bls.w	8003dce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80d7 	beq.w	8003dce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c32:	6093      	str	r3, [r2, #8]
 8003c34:	e0cb      	b.n	8003dce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d009      	beq.n	8003c54 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	2320      	movs	r3, #32
 8003c50:	6093      	str	r3, [r2, #8]
 8003c52:	e0bc      	b.n	8003dce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f040 80b7 	bne.w	8003dce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a5d      	ldr	r2, [pc, #372]	; (8003dd8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d90f      	bls.n	8003c88 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c84:	6093      	str	r3, [r2, #8]
 8003c86:	e0a2      	b.n	8003dce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c9a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	0159      	lsls	r1, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	440b      	add	r3, r1
 8003ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003cae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4403      	add	r3, r0
 8003cbe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003cc2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4403      	add	r3, r0
 8003ce6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4419      	add	r1, r3
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4403      	add	r3, r0
 8003cfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d00:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d114      	bne.n	8003d32 <PCD_EP_OutXfrComplete_int+0x16a>
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d108      	bne.n	8003d32 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	f002 f90d 	bl	8005f4c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	4619      	mov	r1, r3
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f004 fa2f 	bl	800819c <HAL_PCD_DataOutStageCallback>
 8003d3e:	e046      	b.n	8003dce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <PCD_EP_OutXfrComplete_int+0x214>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d124      	bne.n	8003d92 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d64:	6093      	str	r3, [r2, #8]
 8003d66:	e032      	b.n	8003dce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2320      	movs	r3, #32
 8003d82:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f004 fa06 	bl	800819c <HAL_PCD_DataOutStageCallback>
 8003d90:	e01d      	b.n	8003dce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d114      	bne.n	8003dc2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d108      	bne.n	8003dc2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	f002 f8c5 	bl	8005f4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f004 f9e7 	bl	800819c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	4f54300a 	.word	0x4f54300a
 8003ddc:	4f54310a 	.word	0x4f54310a

08003de0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	333c      	adds	r3, #60	; 0x3c
 8003df8:	3304      	adds	r3, #4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a15      	ldr	r2, [pc, #84]	; (8003e68 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d90e      	bls.n	8003e34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f004 f99f 	bl	8008178 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d90c      	bls.n	8003e5c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d108      	bne.n	8003e5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e54:	461a      	mov	r2, r3
 8003e56:	2101      	movs	r1, #1
 8003e58:	f002 f878 	bl	8005f4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	4f54300a 	.word	0x4f54300a

08003e6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d107      	bne.n	8003e9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e8a:	883b      	ldrh	r3, [r7, #0]
 8003e8c:	0419      	lsls	r1, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	629a      	str	r2, [r3, #40]	; 0x28
 8003e98:	e028      	b.n	8003eec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	e00d      	b.n	8003eca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	3340      	adds	r3, #64	; 0x40
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d3ec      	bcc.n	8003eae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ed4:	883b      	ldrh	r3, [r7, #0]
 8003ed6:	0418      	lsls	r0, r3, #16
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6819      	ldr	r1, [r3, #0]
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	4302      	orrs	r2, r0
 8003ee4:	3340      	adds	r3, #64	; 0x40
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e25b      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d075      	beq.n	800403e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f52:	4ba3      	ldr	r3, [pc, #652]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d00c      	beq.n	8003f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5e:	4ba0      	ldr	r3, [pc, #640]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d112      	bne.n	8003f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6a:	4b9d      	ldr	r3, [pc, #628]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f76:	d10b      	bne.n	8003f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	4b99      	ldr	r3, [pc, #612]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d05b      	beq.n	800403c <HAL_RCC_OscConfig+0x108>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d157      	bne.n	800403c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e236      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x74>
 8003f9a:	4b91      	ldr	r3, [pc, #580]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a90      	ldr	r2, [pc, #576]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e01d      	b.n	8003fe4 <HAL_RCC_OscConfig+0xb0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x98>
 8003fb2:	4b8b      	ldr	r3, [pc, #556]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a8a      	ldr	r2, [pc, #552]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a87      	ldr	r2, [pc, #540]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0xb0>
 8003fcc:	4b84      	ldr	r3, [pc, #528]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a83      	ldr	r2, [pc, #524]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	4b81      	ldr	r3, [pc, #516]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a80      	ldr	r2, [pc, #512]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8003fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d013      	beq.n	8004014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fd f880 	bl	80010f0 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fd f87c 	bl	80010f0 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1fb      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xc0>
 8004012:	e014      	b.n	800403e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7fd f86c 	bl	80010f0 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800401c:	f7fd f868 	bl	80010f0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	; 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e1e7      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402e:	4b6c      	ldr	r3, [pc, #432]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0xe8>
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d063      	beq.n	8004112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800404a:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00b      	beq.n	800406e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004056:	4b62      	ldr	r3, [pc, #392]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800405e:	2b08      	cmp	r3, #8
 8004060:	d11c      	bne.n	800409c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004062:	4b5f      	ldr	r3, [pc, #380]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d116      	bne.n	800409c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406e:	4b5c      	ldr	r3, [pc, #368]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_RCC_OscConfig+0x152>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e1bb      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004086:	4b56      	ldr	r3, [pc, #344]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4952      	ldr	r1, [pc, #328]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	e03a      	b.n	8004112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a4:	4b4f      	ldr	r3, [pc, #316]	; (80041e4 <HAL_RCC_OscConfig+0x2b0>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fd f821 	bl	80010f0 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b2:	f7fd f81d 	bl	80010f0 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e19c      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c4:	4b46      	ldr	r3, [pc, #280]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d0:	4b43      	ldr	r3, [pc, #268]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4940      	ldr	r1, [pc, #256]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]
 80040e4:	e015      	b.n	8004112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e6:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <HAL_RCC_OscConfig+0x2b0>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd f800 	bl	80010f0 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f4:	f7fc fffc 	bl	80010f0 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e17b      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004106:	4b36      	ldr	r3, [pc, #216]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d030      	beq.n	8004180 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004126:	4b30      	ldr	r3, [pc, #192]	; (80041e8 <HAL_RCC_OscConfig+0x2b4>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fc ffe0 	bl	80010f0 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004134:	f7fc ffdc 	bl	80010f0 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e15b      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004146:	4b26      	ldr	r3, [pc, #152]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x200>
 8004152:	e015      	b.n	8004180 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004154:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <HAL_RCC_OscConfig+0x2b4>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415a:	f7fc ffc9 	bl	80010f0 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004162:	f7fc ffc5 	bl	80010f0 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e144      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80a0 	beq.w	80042ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800418e:	2300      	movs	r3, #0
 8004190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10f      	bne.n	80041be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	4a0e      	ldr	r2, [pc, #56]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ac:	6413      	str	r3, [r2, #64]	; 0x40
 80041ae:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_OscConfig+0x2b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d121      	bne.n	800420e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ca:	4b08      	ldr	r3, [pc, #32]	; (80041ec <HAL_RCC_OscConfig+0x2b8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a07      	ldr	r2, [pc, #28]	; (80041ec <HAL_RCC_OscConfig+0x2b8>)
 80041d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d6:	f7fc ff8b 	bl	80010f0 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041dc:	e011      	b.n	8004202 <HAL_RCC_OscConfig+0x2ce>
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800
 80041e4:	42470000 	.word	0x42470000
 80041e8:	42470e80 	.word	0x42470e80
 80041ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f0:	f7fc ff7e 	bl	80010f0 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e0fd      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004202:	4b81      	ldr	r3, [pc, #516]	; (8004408 <HAL_RCC_OscConfig+0x4d4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d106      	bne.n	8004224 <HAL_RCC_OscConfig+0x2f0>
 8004216:	4b7d      	ldr	r3, [pc, #500]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	4a7c      	ldr	r2, [pc, #496]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6713      	str	r3, [r2, #112]	; 0x70
 8004222:	e01c      	b.n	800425e <HAL_RCC_OscConfig+0x32a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b05      	cmp	r3, #5
 800422a:	d10c      	bne.n	8004246 <HAL_RCC_OscConfig+0x312>
 800422c:	4b77      	ldr	r3, [pc, #476]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a76      	ldr	r2, [pc, #472]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004232:	f043 0304 	orr.w	r3, r3, #4
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
 8004238:	4b74      	ldr	r3, [pc, #464]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	4a73      	ldr	r2, [pc, #460]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	6713      	str	r3, [r2, #112]	; 0x70
 8004244:	e00b      	b.n	800425e <HAL_RCC_OscConfig+0x32a>
 8004246:	4b71      	ldr	r3, [pc, #452]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a70      	ldr	r2, [pc, #448]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	6713      	str	r3, [r2, #112]	; 0x70
 8004252:	4b6e      	ldr	r3, [pc, #440]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	4a6d      	ldr	r2, [pc, #436]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004258:	f023 0304 	bic.w	r3, r3, #4
 800425c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d015      	beq.n	8004292 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004266:	f7fc ff43 	bl	80010f0 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426c:	e00a      	b.n	8004284 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426e:	f7fc ff3f 	bl	80010f0 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	f241 3288 	movw	r2, #5000	; 0x1388
 800427c:	4293      	cmp	r3, r2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e0bc      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	4b61      	ldr	r3, [pc, #388]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0ee      	beq.n	800426e <HAL_RCC_OscConfig+0x33a>
 8004290:	e014      	b.n	80042bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004292:	f7fc ff2d 	bl	80010f0 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429a:	f7fc ff29 	bl	80010f0 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e0a6      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b0:	4b56      	ldr	r3, [pc, #344]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1ee      	bne.n	800429a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d105      	bne.n	80042ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c2:	4b52      	ldr	r3, [pc, #328]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	4a51      	ldr	r2, [pc, #324]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 80042c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8092 	beq.w	80043fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d8:	4b4c      	ldr	r3, [pc, #304]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 030c 	and.w	r3, r3, #12
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d05c      	beq.n	800439e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d141      	bne.n	8004370 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ec:	4b48      	ldr	r3, [pc, #288]	; (8004410 <HAL_RCC_OscConfig+0x4dc>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f2:	f7fc fefd 	bl	80010f0 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042fa:	f7fc fef9 	bl	80010f0 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e078      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430c:	4b3f      	ldr	r3, [pc, #252]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	019b      	lsls	r3, r3, #6
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	085b      	lsrs	r3, r3, #1
 8004330:	3b01      	subs	r3, #1
 8004332:	041b      	lsls	r3, r3, #16
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	4933      	ldr	r1, [pc, #204]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004342:	4b33      	ldr	r3, [pc, #204]	; (8004410 <HAL_RCC_OscConfig+0x4dc>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fc fed2 	bl	80010f0 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004350:	f7fc fece 	bl	80010f0 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e04d      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004362:	4b2a      	ldr	r3, [pc, #168]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x41c>
 800436e:	e045      	b.n	80043fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004370:	4b27      	ldr	r3, [pc, #156]	; (8004410 <HAL_RCC_OscConfig+0x4dc>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004376:	f7fc febb 	bl	80010f0 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437e:	f7fc feb7 	bl	80010f0 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e036      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004390:	4b1e      	ldr	r3, [pc, #120]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f0      	bne.n	800437e <HAL_RCC_OscConfig+0x44a>
 800439c:	e02e      	b.n	80043fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e029      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043aa:	4b18      	ldr	r3, [pc, #96]	; (800440c <HAL_RCC_OscConfig+0x4d8>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d11c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d115      	bne.n	80043f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043d2:	4013      	ands	r3, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043d8:	4293      	cmp	r3, r2
 80043da:	d10d      	bne.n	80043f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d106      	bne.n	80043f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40007000 	.word	0x40007000
 800440c:	40023800 	.word	0x40023800
 8004410:	42470060 	.word	0x42470060

08004414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0cc      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004428:	4b68      	ldr	r3, [pc, #416]	; (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d90c      	bls.n	8004450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004436:	4b65      	ldr	r3, [pc, #404]	; (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443e:	4b63      	ldr	r3, [pc, #396]	; (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0b8      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d020      	beq.n	800449e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004468:	4b59      	ldr	r3, [pc, #356]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	4a58      	ldr	r2, [pc, #352]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004480:	4b53      	ldr	r3, [pc, #332]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4a52      	ldr	r2, [pc, #328]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800448a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800448c:	4b50      	ldr	r3, [pc, #320]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	494d      	ldr	r1, [pc, #308]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	4313      	orrs	r3, r2
 800449c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d044      	beq.n	8004534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d107      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	4b47      	ldr	r3, [pc, #284]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d119      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e07f      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d003      	beq.n	80044d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d2:	4b3f      	ldr	r3, [pc, #252]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e06f      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e2:	4b3b      	ldr	r3, [pc, #236]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e067      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044f2:	4b37      	ldr	r3, [pc, #220]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f023 0203 	bic.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4934      	ldr	r1, [pc, #208]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	4313      	orrs	r3, r2
 8004502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004504:	f7fc fdf4 	bl	80010f0 <HAL_GetTick>
 8004508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	e00a      	b.n	8004522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450c:	f7fc fdf0 	bl	80010f0 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	; 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e04f      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	4b2b      	ldr	r3, [pc, #172]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 020c 	and.w	r2, r3, #12
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	429a      	cmp	r2, r3
 8004532:	d1eb      	bne.n	800450c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004534:	4b25      	ldr	r3, [pc, #148]	; (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d20c      	bcs.n	800455c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004542:	4b22      	ldr	r3, [pc, #136]	; (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e032      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004568:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4916      	ldr	r1, [pc, #88]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	490e      	ldr	r1, [pc, #56]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800459a:	f000 f821 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 800459e:	4601      	mov	r1, r0
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <HAL_RCC_ClockConfig+0x1c0>)
 80045ac:	5cd3      	ldrb	r3, [r2, r3]
 80045ae:	fa21 f303 	lsr.w	r3, r1, r3
 80045b2:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x1c4>)
 80045b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_RCC_ClockConfig+0x1c8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fc fd54 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40023c00 	.word	0x40023c00
 80045d0:	40023800 	.word	0x40023800
 80045d4:	08009ac4 	.word	0x08009ac4
 80045d8:	20000000 	.word	0x20000000
 80045dc:	20000004 	.word	0x20000004

080045e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	2300      	movs	r3, #0
 80045f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f6:	4b63      	ldr	r3, [pc, #396]	; (8004784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d007      	beq.n	8004612 <HAL_RCC_GetSysClockFreq+0x32>
 8004602:	2b08      	cmp	r3, #8
 8004604:	d008      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x38>
 8004606:	2b00      	cmp	r3, #0
 8004608:	f040 80b4 	bne.w	8004774 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800460c:	4b5e      	ldr	r3, [pc, #376]	; (8004788 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800460e:	60bb      	str	r3, [r7, #8]
       break;
 8004610:	e0b3      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004612:	4b5e      	ldr	r3, [pc, #376]	; (800478c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004614:	60bb      	str	r3, [r7, #8]
      break;
 8004616:	e0b0      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004618:	4b5a      	ldr	r3, [pc, #360]	; (8004784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004620:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004622:	4b58      	ldr	r3, [pc, #352]	; (8004784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d04a      	beq.n	80046c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462e:	4b55      	ldr	r3, [pc, #340]	; (8004784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	099b      	lsrs	r3, r3, #6
 8004634:	f04f 0400 	mov.w	r4, #0
 8004638:	f240 11ff 	movw	r1, #511	; 0x1ff
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	ea03 0501 	and.w	r5, r3, r1
 8004644:	ea04 0602 	and.w	r6, r4, r2
 8004648:	4629      	mov	r1, r5
 800464a:	4632      	mov	r2, r6
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	f04f 0400 	mov.w	r4, #0
 8004654:	0154      	lsls	r4, r2, #5
 8004656:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800465a:	014b      	lsls	r3, r1, #5
 800465c:	4619      	mov	r1, r3
 800465e:	4622      	mov	r2, r4
 8004660:	1b49      	subs	r1, r1, r5
 8004662:	eb62 0206 	sbc.w	r2, r2, r6
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	f04f 0400 	mov.w	r4, #0
 800466e:	0194      	lsls	r4, r2, #6
 8004670:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004674:	018b      	lsls	r3, r1, #6
 8004676:	1a5b      	subs	r3, r3, r1
 8004678:	eb64 0402 	sbc.w	r4, r4, r2
 800467c:	f04f 0100 	mov.w	r1, #0
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	00e2      	lsls	r2, r4, #3
 8004686:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800468a:	00d9      	lsls	r1, r3, #3
 800468c:	460b      	mov	r3, r1
 800468e:	4614      	mov	r4, r2
 8004690:	195b      	adds	r3, r3, r5
 8004692:	eb44 0406 	adc.w	r4, r4, r6
 8004696:	f04f 0100 	mov.w	r1, #0
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	0262      	lsls	r2, r4, #9
 80046a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80046a4:	0259      	lsls	r1, r3, #9
 80046a6:	460b      	mov	r3, r1
 80046a8:	4614      	mov	r4, r2
 80046aa:	4618      	mov	r0, r3
 80046ac:	4621      	mov	r1, r4
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f04f 0400 	mov.w	r4, #0
 80046b4:	461a      	mov	r2, r3
 80046b6:	4623      	mov	r3, r4
 80046b8:	f7fb fdf2 	bl	80002a0 <__aeabi_uldivmod>
 80046bc:	4603      	mov	r3, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	e049      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c4:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	099b      	lsrs	r3, r3, #6
 80046ca:	f04f 0400 	mov.w	r4, #0
 80046ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	ea03 0501 	and.w	r5, r3, r1
 80046da:	ea04 0602 	and.w	r6, r4, r2
 80046de:	4629      	mov	r1, r5
 80046e0:	4632      	mov	r2, r6
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	f04f 0400 	mov.w	r4, #0
 80046ea:	0154      	lsls	r4, r2, #5
 80046ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046f0:	014b      	lsls	r3, r1, #5
 80046f2:	4619      	mov	r1, r3
 80046f4:	4622      	mov	r2, r4
 80046f6:	1b49      	subs	r1, r1, r5
 80046f8:	eb62 0206 	sbc.w	r2, r2, r6
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	f04f 0400 	mov.w	r4, #0
 8004704:	0194      	lsls	r4, r2, #6
 8004706:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800470a:	018b      	lsls	r3, r1, #6
 800470c:	1a5b      	subs	r3, r3, r1
 800470e:	eb64 0402 	sbc.w	r4, r4, r2
 8004712:	f04f 0100 	mov.w	r1, #0
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	00e2      	lsls	r2, r4, #3
 800471c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004720:	00d9      	lsls	r1, r3, #3
 8004722:	460b      	mov	r3, r1
 8004724:	4614      	mov	r4, r2
 8004726:	195b      	adds	r3, r3, r5
 8004728:	eb44 0406 	adc.w	r4, r4, r6
 800472c:	f04f 0100 	mov.w	r1, #0
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	02a2      	lsls	r2, r4, #10
 8004736:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800473a:	0299      	lsls	r1, r3, #10
 800473c:	460b      	mov	r3, r1
 800473e:	4614      	mov	r4, r2
 8004740:	4618      	mov	r0, r3
 8004742:	4621      	mov	r1, r4
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f04f 0400 	mov.w	r4, #0
 800474a:	461a      	mov	r2, r3
 800474c:	4623      	mov	r3, r4
 800474e:	f7fb fda7 	bl	80002a0 <__aeabi_uldivmod>
 8004752:	4603      	mov	r3, r0
 8004754:	460c      	mov	r4, r1
 8004756:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	0c1b      	lsrs	r3, r3, #16
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	3301      	adds	r3, #1
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	60bb      	str	r3, [r7, #8]
      break;
 8004772:	e002      	b.n	800477a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004776:	60bb      	str	r3, [r7, #8]
      break;
 8004778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800477a:	68bb      	ldr	r3, [r7, #8]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004784:	40023800 	.word	0x40023800
 8004788:	00f42400 	.word	0x00f42400
 800478c:	007a1200 	.word	0x007a1200

08004790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004794:	4b03      	ldr	r3, [pc, #12]	; (80047a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004796:	681b      	ldr	r3, [r3, #0]
}
 8004798:	4618      	mov	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000000 	.word	0x20000000

080047a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d035      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047d0:	4b62      	ldr	r3, [pc, #392]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047d6:	f7fc fc8b 	bl	80010f0 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047de:	f7fc fc87 	bl	80010f0 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e0b0      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047f0:	4b5b      	ldr	r3, [pc, #364]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f0      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	019a      	lsls	r2, r3, #6
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	071b      	lsls	r3, r3, #28
 8004808:	4955      	ldr	r1, [pc, #340]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004810:	4b52      	ldr	r3, [pc, #328]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004816:	f7fc fc6b 	bl	80010f0 <HAL_GetTick>
 800481a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800481e:	f7fc fc67 	bl	80010f0 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e090      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004830:	4b4b      	ldr	r3, [pc, #300]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f0      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8083 	beq.w	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	4b44      	ldr	r3, [pc, #272]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	4a43      	ldr	r2, [pc, #268]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004858:	6413      	str	r3, [r2, #64]	; 0x40
 800485a:	4b41      	ldr	r3, [pc, #260]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004866:	4b3f      	ldr	r3, [pc, #252]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a3e      	ldr	r2, [pc, #248]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800486c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004870:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004872:	f7fc fc3d 	bl	80010f0 <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004878:	e008      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800487a:	f7fc fc39 	bl	80010f0 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e062      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800488c:	4b35      	ldr	r3, [pc, #212]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004898:	4b31      	ldr	r3, [pc, #196]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d02f      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d028      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048b6:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048c0:	4b29      	ldr	r3, [pc, #164]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048c6:	4b28      	ldr	r3, [pc, #160]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80048cc:	4a24      	ldr	r2, [pc, #144]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048d2:	4b23      	ldr	r3, [pc, #140]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d114      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80048de:	f7fc fc07 	bl	80010f0 <HAL_GetTick>
 80048e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	e00a      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7fc fc03 	bl	80010f0 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d901      	bls.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e02a      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fc:	4b18      	ldr	r3, [pc, #96]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ee      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004914:	d10d      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492a:	490d      	ldr	r1, [pc, #52]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800492c:	4313      	orrs	r3, r2
 800492e:	608b      	str	r3, [r1, #8]
 8004930:	e005      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004938:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800493c:	6093      	str	r3, [r2, #8]
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004940:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800494a:	4905      	ldr	r1, [pc, #20]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800494c:	4313      	orrs	r3, r2
 800494e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	42470068 	.word	0x42470068
 8004960:	40023800 	.word	0x40023800
 8004964:	40007000 	.word	0x40007000
 8004968:	42470e40 	.word	0x42470e40

0800496c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d13d      	bne.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800498a:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004992:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d004      	beq.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800499a:	2b01      	cmp	r3, #1
 800499c:	d12f      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800499e:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049a0:	617b      	str	r3, [r7, #20]
          break;
 80049a2:	e02f      	b.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80049a4:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b0:	d108      	bne.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80049b2:	4b18      	ldr	r3, [pc, #96]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ba:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	e007      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049cc:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80049d4:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80049d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	fb02 f303 	mul.w	r3, r2, r3
 80049e6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80049ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ee:	0f1b      	lsrs	r3, r3, #28
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fa:	617b      	str	r3, [r7, #20]
          break;
 80049fc:	e002      	b.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
          break;
 8004a02:	bf00      	nop
        }
      }
      break;
 8004a04:	bf00      	nop
    }
  }
  return frequency;
 8004a06:	697b      	ldr	r3, [r7, #20]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	40023800 	.word	0x40023800
 8004a18:	00bb8000 	.word	0x00bb8000
 8004a1c:	007a1200 	.word	0x007a1200
 8004a20:	00f42400 	.word	0x00f42400

08004a24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a24:	b084      	sub	sp, #16
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	f107 001c 	add.w	r0, r7, #28
 8004a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d122      	bne.n	8004a82 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d105      	bne.n	8004a76 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f001 fac6 	bl	8006008 <USB_CoreReset>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	73fb      	strb	r3, [r7, #15]
 8004a80:	e01a      	b.n	8004ab8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f001 faba 	bl	8006008 <USB_CoreReset>
 8004a94:	4603      	mov	r3, r0
 8004a96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8004aaa:	e005      	b.n	8004ab8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d10b      	bne.n	8004ad6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f043 0206 	orr.w	r2, r3, #6
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ae2:	b004      	add	sp, #16
 8004ae4:	4770      	bx	lr
	...

08004ae8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	4613      	mov	r3, r2
 8004af4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d165      	bne.n	8004bc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4a41      	ldr	r2, [pc, #260]	; (8004c04 <USB_SetTurnaroundTime+0x11c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d906      	bls.n	8004b12 <USB_SetTurnaroundTime+0x2a>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4a40      	ldr	r2, [pc, #256]	; (8004c08 <USB_SetTurnaroundTime+0x120>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d802      	bhi.n	8004b12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b0c:	230f      	movs	r3, #15
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e062      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4a3c      	ldr	r2, [pc, #240]	; (8004c08 <USB_SetTurnaroundTime+0x120>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d906      	bls.n	8004b28 <USB_SetTurnaroundTime+0x40>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4a3b      	ldr	r2, [pc, #236]	; (8004c0c <USB_SetTurnaroundTime+0x124>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d802      	bhi.n	8004b28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b22:	230e      	movs	r3, #14
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	e057      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4a38      	ldr	r2, [pc, #224]	; (8004c0c <USB_SetTurnaroundTime+0x124>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d906      	bls.n	8004b3e <USB_SetTurnaroundTime+0x56>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4a37      	ldr	r2, [pc, #220]	; (8004c10 <USB_SetTurnaroundTime+0x128>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d802      	bhi.n	8004b3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b38:	230d      	movs	r3, #13
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	e04c      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4a33      	ldr	r2, [pc, #204]	; (8004c10 <USB_SetTurnaroundTime+0x128>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d906      	bls.n	8004b54 <USB_SetTurnaroundTime+0x6c>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4a32      	ldr	r2, [pc, #200]	; (8004c14 <USB_SetTurnaroundTime+0x12c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d802      	bhi.n	8004b54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b4e:	230c      	movs	r3, #12
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	e041      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4a2f      	ldr	r2, [pc, #188]	; (8004c14 <USB_SetTurnaroundTime+0x12c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d906      	bls.n	8004b6a <USB_SetTurnaroundTime+0x82>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4a2e      	ldr	r2, [pc, #184]	; (8004c18 <USB_SetTurnaroundTime+0x130>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d802      	bhi.n	8004b6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b64:	230b      	movs	r3, #11
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e036      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4a2a      	ldr	r2, [pc, #168]	; (8004c18 <USB_SetTurnaroundTime+0x130>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d906      	bls.n	8004b80 <USB_SetTurnaroundTime+0x98>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4a29      	ldr	r2, [pc, #164]	; (8004c1c <USB_SetTurnaroundTime+0x134>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d802      	bhi.n	8004b80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b7a:	230a      	movs	r3, #10
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	e02b      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4a26      	ldr	r2, [pc, #152]	; (8004c1c <USB_SetTurnaroundTime+0x134>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d906      	bls.n	8004b96 <USB_SetTurnaroundTime+0xae>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4a25      	ldr	r2, [pc, #148]	; (8004c20 <USB_SetTurnaroundTime+0x138>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d802      	bhi.n	8004b96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b90:	2309      	movs	r3, #9
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e020      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4a21      	ldr	r2, [pc, #132]	; (8004c20 <USB_SetTurnaroundTime+0x138>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d906      	bls.n	8004bac <USB_SetTurnaroundTime+0xc4>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4a20      	ldr	r2, [pc, #128]	; (8004c24 <USB_SetTurnaroundTime+0x13c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d802      	bhi.n	8004bac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	e015      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4a1d      	ldr	r2, [pc, #116]	; (8004c24 <USB_SetTurnaroundTime+0x13c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d906      	bls.n	8004bc2 <USB_SetTurnaroundTime+0xda>
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4a1c      	ldr	r2, [pc, #112]	; (8004c28 <USB_SetTurnaroundTime+0x140>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d802      	bhi.n	8004bc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004bbc:	2307      	movs	r3, #7
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e00a      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004bc2:	2306      	movs	r3, #6
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	e007      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004bce:	2309      	movs	r3, #9
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	e001      	b.n	8004bd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004bd4:	2309      	movs	r3, #9
 8004bd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	029b      	lsls	r3, r3, #10
 8004bec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	00d8acbf 	.word	0x00d8acbf
 8004c08:	00e4e1bf 	.word	0x00e4e1bf
 8004c0c:	00f423ff 	.word	0x00f423ff
 8004c10:	0106737f 	.word	0x0106737f
 8004c14:	011a499f 	.word	0x011a499f
 8004c18:	01312cff 	.word	0x01312cff
 8004c1c:	014ca43f 	.word	0x014ca43f
 8004c20:	016e35ff 	.word	0x016e35ff
 8004c24:	01a6ab1f 	.word	0x01a6ab1f
 8004c28:	01e847ff 	.word	0x01e847ff

08004c2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f043 0201 	orr.w	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f023 0201 	bic.w	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d106      	bne.n	8004c9c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60da      	str	r2, [r3, #12]
 8004c9a:	e00b      	b.n	8004cb4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60da      	str	r2, [r3, #12]
 8004cae:	e001      	b.n	8004cb4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e003      	b.n	8004cbc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004cb4:	2032      	movs	r0, #50	; 0x32
 8004cb6:	f7fc fa27 	bl	8001108 <HAL_Delay>

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b086      	sub	sp, #24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	e009      	b.n	8004cf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	3340      	adds	r3, #64	; 0x40
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	2200      	movs	r2, #0
 8004cf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b0e      	cmp	r3, #14
 8004cfc:	d9f2      	bls.n	8004ce4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11c      	bne.n	8004d3e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d12:	f043 0302 	orr.w	r3, r3, #2
 8004d16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
 8004d3c:	e00b      	b.n	8004d56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2300      	movs	r3, #0
 8004d60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d68:	4619      	mov	r1, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d70:	461a      	mov	r2, r3
 8004d72:	680b      	ldr	r3, [r1, #0]
 8004d74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10c      	bne.n	8004d96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d104      	bne.n	8004d8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d82:	2100      	movs	r1, #0
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f949 	bl	800501c <USB_SetDevSpeed>
 8004d8a:	e008      	b.n	8004d9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f944 	bl	800501c <USB_SetDevSpeed>
 8004d94:	e003      	b.n	8004d9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d96:	2103      	movs	r1, #3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f93f 	bl	800501c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d9e:	2110      	movs	r1, #16
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f8f3 	bl	8004f8c <USB_FlushTxFifo>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f911 	bl	8004fd8 <USB_FlushRxFifo>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2300      	movs	r3, #0
 8004dca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dde:	461a      	mov	r2, r3
 8004de0:	2300      	movs	r3, #0
 8004de2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e043      	b.n	8004e72 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e00:	d118      	bne.n	8004e34 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e14:	461a      	mov	r2, r3
 8004e16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	e013      	b.n	8004e46 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e008      	b.n	8004e46 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e40:	461a      	mov	r2, r3
 8004e42:	2300      	movs	r3, #0
 8004e44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	461a      	mov	r2, r3
 8004e54:	2300      	movs	r3, #0
 8004e56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	461a      	mov	r2, r3
 8004e66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d3b7      	bcc.n	8004dea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	e043      	b.n	8004f08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e96:	d118      	bne.n	8004eca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e013      	b.n	8004edc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	e008      	b.n	8004edc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee8:	461a      	mov	r2, r3
 8004eea:	2300      	movs	r3, #0
 8004eec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efa:	461a      	mov	r2, r3
 8004efc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	3301      	adds	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d3b7      	bcc.n	8004e80 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f043 0210 	orr.w	r2, r3, #16
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699a      	ldr	r2, [r3, #24]
 8004f48:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <USB_DevInit+0x2c4>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f043 0208 	orr.w	r2, r3, #8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d107      	bne.n	8004f78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f70:	f043 0304 	orr.w	r3, r3, #4
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f84:	b004      	add	sp, #16
 8004f86:	4770      	bx	lr
 8004f88:	803c3800 	.word	0x803c3800

08004f8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	019b      	lsls	r3, r3, #6
 8004f9e:	f043 0220 	orr.w	r2, r3, #32
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <USB_FlushTxFifo+0x48>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e006      	b.n	8004fc6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d0f0      	beq.n	8004fa6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	00030d40 	.word	0x00030d40

08004fd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3301      	adds	r3, #1
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a09      	ldr	r2, [pc, #36]	; (8005018 <USB_FlushRxFifo+0x40>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e006      	b.n	800500a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b10      	cmp	r3, #16
 8005006:	d0f0      	beq.n	8004fea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	00030d40 	.word	0x00030d40

0800501c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	68f9      	ldr	r1, [r7, #12]
 8005038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800504e:	b480      	push	{r7}
 8005050:	b087      	sub	sp, #28
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0306 	and.w	r3, r3, #6
 8005066:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d102      	bne.n	8005074 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800506e:	2300      	movs	r3, #0
 8005070:	75fb      	strb	r3, [r7, #23]
 8005072:	e00a      	b.n	800508a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d002      	beq.n	8005080 <USB_GetDevSpeed+0x32>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b06      	cmp	r3, #6
 800507e:	d102      	bne.n	8005086 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005080:	2302      	movs	r3, #2
 8005082:	75fb      	strb	r3, [r7, #23]
 8005084:	e001      	b.n	800508a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005086:	230f      	movs	r3, #15
 8005088:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800508a:	7dfb      	ldrb	r3, [r7, #23]
}
 800508c:	4618      	mov	r0, r3
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	785b      	ldrb	r3, [r3, #1]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d13a      	bne.n	800512a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	2101      	movs	r1, #1
 80050c6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	68f9      	ldr	r1, [r7, #12]
 80050ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d2:	4313      	orrs	r3, r2
 80050d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d155      	bne.n	8005198 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	78db      	ldrb	r3, [r3, #3]
 8005106:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005108:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	059b      	lsls	r3, r3, #22
 800510e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005110:	4313      	orrs	r3, r2
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	0151      	lsls	r1, r2, #5
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	440a      	add	r2, r1
 800511a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	e036      	b.n	8005198 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005130:	69da      	ldr	r2, [r3, #28]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	2101      	movs	r1, #1
 800513c:	fa01 f303 	lsl.w	r3, r1, r3
 8005140:	041b      	lsls	r3, r3, #16
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005148:	4313      	orrs	r3, r2
 800514a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d11a      	bne.n	8005198 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	78db      	ldrb	r3, [r3, #3]
 800517c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800517e:	430b      	orrs	r3, r1
 8005180:	4313      	orrs	r3, r2
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	0151      	lsls	r1, r2, #5
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	440a      	add	r2, r1
 800518a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005196:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
	...

080051a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d161      	bne.n	8005288 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051da:	d11f      	bne.n	800521c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005216:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800521a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	2101      	movs	r1, #1
 800522e:	fa01 f303 	lsl.w	r3, r1, r3
 8005232:	b29b      	uxth	r3, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800523c:	4013      	ands	r3, r2
 800523e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	2101      	movs	r1, #1
 8005252:	fa01 f303 	lsl.w	r3, r1, r3
 8005256:	b29b      	uxth	r3, r3
 8005258:	43db      	mvns	r3, r3
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005260:	4013      	ands	r3, r2
 8005262:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	0159      	lsls	r1, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	440b      	add	r3, r1
 800527a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527e:	4619      	mov	r1, r3
 8005280:	4b35      	ldr	r3, [pc, #212]	; (8005358 <USB_DeactivateEndpoint+0x1b0>)
 8005282:	4013      	ands	r3, r2
 8005284:	600b      	str	r3, [r1, #0]
 8005286:	e060      	b.n	800534a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800529a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800529e:	d11f      	bne.n	80052e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	2101      	movs	r1, #1
 80052f2:	fa01 f303 	lsl.w	r3, r1, r3
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	43db      	mvns	r3, r3
 80052fa:	68f9      	ldr	r1, [r7, #12]
 80052fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005300:	4013      	ands	r3, r2
 8005302:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	2101      	movs	r1, #1
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
 800531a:	041b      	lsls	r3, r3, #16
 800531c:	43db      	mvns	r3, r3
 800531e:	68f9      	ldr	r1, [r7, #12]
 8005320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005324:	4013      	ands	r3, r2
 8005326:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	0159      	lsls	r1, r3, #5
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	440b      	add	r3, r1
 800533e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005342:	4619      	mov	r1, r3
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <USB_DeactivateEndpoint+0x1b4>)
 8005346:	4013      	ands	r3, r2
 8005348:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	ec337800 	.word	0xec337800
 800535c:	eff37800 	.word	0xeff37800

08005360 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	; 0x28
 8005364:	af02      	add	r7, sp, #8
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	4613      	mov	r3, r2
 800536c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	2b01      	cmp	r3, #1
 800537e:	f040 815c 	bne.w	800563a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d132      	bne.n	80053f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	0151      	lsls	r1, r2, #5
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	440a      	add	r2, r1
 80053a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	0151      	lsls	r1, r2, #5
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	440a      	add	r2, r1
 80053e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e8:	0cdb      	lsrs	r3, r3, #19
 80053ea:	04db      	lsls	r3, r3, #19
 80053ec:	6113      	str	r3, [r2, #16]
 80053ee:	e074      	b.n	80054da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	440a      	add	r2, r1
 8005406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540a:	0cdb      	lsrs	r3, r3, #19
 800540c:	04db      	lsls	r3, r3, #19
 800540e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	440a      	add	r2, r1
 8005426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800542e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6959      	ldr	r1, [r3, #20]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	440b      	add	r3, r1
 800544c:	1e59      	subs	r1, r3, #1
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	fbb1 f3f3 	udiv	r3, r1, r3
 8005456:	04d9      	lsls	r1, r3, #19
 8005458:	4b9d      	ldr	r3, [pc, #628]	; (80056d0 <USB_EPStartXfer+0x370>)
 800545a:	400b      	ands	r3, r1
 800545c:	69b9      	ldr	r1, [r7, #24]
 800545e:	0148      	lsls	r0, r1, #5
 8005460:	69f9      	ldr	r1, [r7, #28]
 8005462:	4401      	add	r1, r0
 8005464:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005468:	4313      	orrs	r3, r2
 800546a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005482:	69b9      	ldr	r1, [r7, #24]
 8005484:	0148      	lsls	r0, r1, #5
 8005486:	69f9      	ldr	r1, [r7, #28]
 8005488:	4401      	add	r1, r0
 800548a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800548e:	4313      	orrs	r3, r2
 8005490:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	78db      	ldrb	r3, [r3, #3]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d11f      	bne.n	80054da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d14b      	bne.n	8005578 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d009      	beq.n	80054fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f4:	461a      	mov	r2, r3
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	78db      	ldrb	r3, [r3, #3]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d128      	bne.n	8005556 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005510:	2b00      	cmp	r3, #0
 8005512:	d110      	bne.n	8005536 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	e00f      	b.n	8005556 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	440a      	add	r2, r1
 800554c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005554:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e12f      	b.n	80057d8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005596:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	78db      	ldrb	r3, [r3, #3]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d015      	beq.n	80055cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8117 	beq.w	80057d8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	2101      	movs	r1, #1
 80055bc:	fa01 f303 	lsl.w	r3, r1, r3
 80055c0:	69f9      	ldr	r1, [r7, #28]
 80055c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055c6:	4313      	orrs	r3, r2
 80055c8:	634b      	str	r3, [r1, #52]	; 0x34
 80055ca:	e105      	b.n	80057d8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d110      	bne.n	80055fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	e00f      	b.n	800561e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	0151      	lsls	r1, r2, #5
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	440a      	add	r2, r1
 8005614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	68d9      	ldr	r1, [r3, #12]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	b298      	uxth	r0, r3
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	4603      	mov	r3, r0
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fa2b 	bl	8005a8e <USB_WritePacket>
 8005638:	e0ce      	b.n	80057d8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005654:	0cdb      	lsrs	r3, r3, #19
 8005656:	04db      	lsls	r3, r3, #19
 8005658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005674:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005678:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800567c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d126      	bne.n	80056d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800569c:	69b9      	ldr	r1, [r7, #24]
 800569e:	0148      	lsls	r0, r1, #5
 80056a0:	69f9      	ldr	r1, [r7, #28]
 80056a2:	4401      	add	r1, r0
 80056a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056a8:	4313      	orrs	r3, r2
 80056aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ca:	6113      	str	r3, [r2, #16]
 80056cc:	e036      	b.n	800573c <USB_EPStartXfer+0x3dc>
 80056ce:	bf00      	nop
 80056d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	4413      	add	r3, r2
 80056de:	1e5a      	subs	r2, r3, #1
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	8afb      	ldrh	r3, [r7, #22]
 80056fa:	04d9      	lsls	r1, r3, #19
 80056fc:	4b39      	ldr	r3, [pc, #228]	; (80057e4 <USB_EPStartXfer+0x484>)
 80056fe:	400b      	ands	r3, r1
 8005700:	69b9      	ldr	r1, [r7, #24]
 8005702:	0148      	lsls	r0, r1, #5
 8005704:	69f9      	ldr	r1, [r7, #28]
 8005706:	4401      	add	r1, r0
 8005708:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800570c:	4313      	orrs	r3, r2
 800570e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	8af9      	ldrh	r1, [r7, #22]
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572c:	69b9      	ldr	r1, [r7, #24]
 800572e:	0148      	lsls	r0, r1, #5
 8005730:	69f9      	ldr	r1, [r7, #28]
 8005732:	4401      	add	r1, r0
 8005734:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005738:	4313      	orrs	r3, r2
 800573a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d10d      	bne.n	800575e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	68d9      	ldr	r1, [r3, #12]
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575a:	460a      	mov	r2, r1
 800575c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	78db      	ldrb	r3, [r3, #3]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d128      	bne.n	80057b8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005772:	2b00      	cmp	r3, #0
 8005774:	d110      	bne.n	8005798 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	0151      	lsls	r1, r2, #5
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	440a      	add	r2, r1
 800578c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e00f      	b.n	80057b8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	0151      	lsls	r1, r2, #5
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	440a      	add	r2, r1
 80057ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	1ff80000 	.word	0x1ff80000

080057e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	785b      	ldrb	r3, [r3, #1]
 8005804:	2b01      	cmp	r3, #1
 8005806:	f040 80cd 	bne.w	80059a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d132      	bne.n	8005878 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	440a      	add	r2, r1
 8005828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005830:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005854:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005870:	0cdb      	lsrs	r3, r3, #19
 8005872:	04db      	lsls	r3, r3, #19
 8005874:	6113      	str	r3, [r2, #16]
 8005876:	e04e      	b.n	8005916 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005892:	0cdb      	lsrs	r3, r3, #19
 8005894:	04db      	lsls	r3, r3, #19
 8005896:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d903      	bls.n	80058d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005906:	6939      	ldr	r1, [r7, #16]
 8005908:	0148      	lsls	r0, r1, #5
 800590a:	6979      	ldr	r1, [r7, #20]
 800590c:	4401      	add	r1, r0
 800590e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005912:	4313      	orrs	r3, r2
 8005914:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d11e      	bne.n	800595a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d009      	beq.n	8005938 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	461a      	mov	r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	e092      	b.n	8005a80 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005974:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005978:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d07e      	beq.n	8005a80 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	2101      	movs	r1, #1
 8005994:	fa01 f303 	lsl.w	r3, r1, r3
 8005998:	6979      	ldr	r1, [r7, #20]
 800599a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800599e:	4313      	orrs	r3, r2
 80059a0:	634b      	str	r3, [r1, #52]	; 0x34
 80059a2:	e06d      	b.n	8005a80 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059be:	0cdb      	lsrs	r3, r3, #19
 80059c0:	04db      	lsls	r3, r3, #19
 80059c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a2e:	6939      	ldr	r1, [r7, #16]
 8005a30:	0148      	lsls	r0, r1, #5
 8005a32:	6979      	ldr	r1, [r7, #20]
 8005a34:	4401      	add	r1, r0
 8005a36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d10d      	bne.n	8005a60 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d009      	beq.n	8005a60 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	68d9      	ldr	r1, [r3, #12]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	460a      	mov	r2, r1
 8005a5e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b089      	sub	sp, #36	; 0x24
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	4611      	mov	r1, r2
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	71fb      	strb	r3, [r7, #7]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005aac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11a      	bne.n	8005aea <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ab4:	88bb      	ldrh	r3, [r7, #4]
 8005ab6:	3303      	adds	r3, #3
 8005ab8:	089b      	lsrs	r3, r3, #2
 8005aba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005abc:	2300      	movs	r3, #0
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	e00f      	b.n	8005ae2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	031a      	lsls	r2, r3, #12
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ace:	461a      	mov	r2, r3
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d3eb      	bcc.n	8005ac2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3724      	adds	r7, #36	; 0x24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b089      	sub	sp, #36	; 0x24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	4613      	mov	r3, r2
 8005b04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	3303      	adds	r3, #3
 8005b12:	089b      	lsrs	r3, r3, #2
 8005b14:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	e00b      	b.n	8005b34 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	3301      	adds	r3, #1
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d3ef      	bcc.n	8005b1c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005b3c:	69fb      	ldr	r3, [r7, #28]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3724      	adds	r7, #36	; 0x24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	785b      	ldrb	r3, [r3, #1]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d12c      	bne.n	8005bc0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	db12      	blt.n	8005b9e <USB_EPSetStall+0x54>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00f      	beq.n	8005b9e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b9c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	0151      	lsls	r1, r2, #5
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	440a      	add	r2, r1
 8005bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e02b      	b.n	8005c18 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	db12      	blt.n	8005bf8 <USB_EPSetStall+0xae>
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00f      	beq.n	8005bf8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bf6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d128      	bne.n	8005c94 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	78db      	ldrb	r3, [r3, #3]
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d003      	beq.n	8005c72 <USB_EPClearStall+0x4c>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	78db      	ldrb	r3, [r3, #3]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d138      	bne.n	8005ce4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	e027      	b.n	8005ce4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	78db      	ldrb	r3, [r3, #3]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d003      	beq.n	8005cc4 <USB_EPClearStall+0x9e>
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	78db      	ldrb	r3, [r3, #3]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d10f      	bne.n	8005ce4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ce2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d14:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d26:	68f9      	ldr	r1, [r7, #12]
 8005d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d58:	f023 0303 	bic.w	r3, r3, #3
 8005d5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d6c:	f023 0302 	bic.w	r3, r3, #2
 8005d70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d9a:	f023 0303 	bic.w	r3, r3, #3
 8005d9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dae:	f043 0302 	orr.w	r3, r3, #2
 8005db2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005dda:	68fb      	ldr	r3, [r7, #12]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	0c1b      	lsrs	r3, r3, #16
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	b29b      	uxth	r3, r3
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebc:	01db      	lsls	r3, r3, #7
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005eda:	68bb      	ldr	r3, [r7, #8]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f22:	f023 0307 	bic.w	r3, r3, #7
 8005f26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	460b      	mov	r3, r1
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	333c      	adds	r3, #60	; 0x3c
 8005f62:	3304      	adds	r3, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	4a26      	ldr	r2, [pc, #152]	; (8006004 <USB_EP0_OutStart+0xb8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d90a      	bls.n	8005f86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f80:	d101      	bne.n	8005f86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	e037      	b.n	8005ff6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	2300      	movs	r3, #0
 8005f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb4:	f043 0318 	orr.w	r3, r3, #24
 8005fb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005fcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005fce:	7afb      	ldrb	r3, [r7, #11]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d10f      	bne.n	8005ff4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ff2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	4f54300a 	.word	0x4f54300a

08006008 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4a13      	ldr	r2, [pc, #76]	; (800606c <USB_CoreReset+0x64>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e01b      	b.n	800605e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	daf2      	bge.n	8006014 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f043 0201 	orr.w	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4a09      	ldr	r2, [pc, #36]	; (800606c <USB_CoreReset+0x64>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d901      	bls.n	8006050 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e006      	b.n	800605e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b01      	cmp	r3, #1
 800605a:	d0f0      	beq.n	800603e <USB_CoreReset+0x36>

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	00030d40 	.word	0x00030d40

08006070 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800607c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006080:	f002 fb4c 	bl	800871c <malloc>
 8006084:	4603      	mov	r3, r0
 8006086:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d105      	bne.n	800609a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006096:	2302      	movs	r3, #2
 8006098:	e066      	b.n	8006168 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7c1b      	ldrb	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d119      	bne.n	80060de <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ae:	2202      	movs	r2, #2
 80060b0:	2181      	movs	r1, #129	; 0x81
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f002 f9b9 	bl	800842a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060c2:	2202      	movs	r2, #2
 80060c4:	2101      	movs	r1, #1
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f002 f9af 	bl	800842a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2210      	movs	r2, #16
 80060d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80060dc:	e016      	b.n	800610c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80060de:	2340      	movs	r3, #64	; 0x40
 80060e0:	2202      	movs	r2, #2
 80060e2:	2181      	movs	r1, #129	; 0x81
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f002 f9a0 	bl	800842a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80060f0:	2340      	movs	r3, #64	; 0x40
 80060f2:	2202      	movs	r2, #2
 80060f4:	2101      	movs	r1, #1
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f002 f997 	bl	800842a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2210      	movs	r2, #16
 8006108:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800610c:	2308      	movs	r3, #8
 800610e:	2203      	movs	r2, #3
 8006110:	2182      	movs	r1, #130	; 0x82
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f002 f989 	bl	800842a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	7c1b      	ldrb	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d109      	bne.n	8006156 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800614c:	2101      	movs	r1, #1
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f002 fa5a 	bl	8008608 <USBD_LL_PrepareReceive>
 8006154:	e007      	b.n	8006166 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800615c:	2340      	movs	r3, #64	; 0x40
 800615e:	2101      	movs	r1, #1
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f002 fa51 	bl	8008608 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006180:	2181      	movs	r1, #129	; 0x81
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f002 f977 	bl	8008476 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800618e:	2101      	movs	r1, #1
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f002 f970 	bl	8008476 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800619e:	2182      	movs	r1, #130	; 0x82
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f002 f968 	bl	8008476 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00e      	beq.n	80061de <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061d0:	4618      	mov	r0, r3
 80061d2:	f002 faab 	bl	800872c <free>
    pdev->pClassData = NULL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061f8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800620e:	2b00      	cmp	r3, #0
 8006210:	d03a      	beq.n	8006288 <USBD_CDC_Setup+0xa0>
 8006212:	2b20      	cmp	r3, #32
 8006214:	f040 8097 	bne.w	8006346 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	88db      	ldrh	r3, [r3, #6]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d029      	beq.n	8006274 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	b25b      	sxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	da11      	bge.n	800624e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006236:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	88d2      	ldrh	r2, [r2, #6]
 800623c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800623e:	6939      	ldr	r1, [r7, #16]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	88db      	ldrh	r3, [r3, #6]
 8006244:	461a      	mov	r2, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 fa9d 	bl	8007786 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800624c:	e082      	b.n	8006354 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	785a      	ldrb	r2, [r3, #1]
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	88db      	ldrh	r3, [r3, #6]
 800625c:	b2da      	uxtb	r2, r3
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006264:	6939      	ldr	r1, [r7, #16]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	88db      	ldrh	r3, [r3, #6]
 800626a:	461a      	mov	r2, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f001 fab6 	bl	80077de <USBD_CtlPrepareRx>
    break;
 8006272:	e06f      	b.n	8006354 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	7850      	ldrb	r0, [r2, #1]
 8006280:	2200      	movs	r2, #0
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	4798      	blx	r3
    break;
 8006286:	e065      	b.n	8006354 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b0b      	cmp	r3, #11
 800628e:	d84f      	bhi.n	8006330 <USBD_CDC_Setup+0x148>
 8006290:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <USBD_CDC_Setup+0xb0>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062c9 	.word	0x080062c9
 800629c:	0800633f 	.word	0x0800633f
 80062a0:	08006331 	.word	0x08006331
 80062a4:	08006331 	.word	0x08006331
 80062a8:	08006331 	.word	0x08006331
 80062ac:	08006331 	.word	0x08006331
 80062b0:	08006331 	.word	0x08006331
 80062b4:	08006331 	.word	0x08006331
 80062b8:	08006331 	.word	0x08006331
 80062bc:	08006331 	.word	0x08006331
 80062c0:	080062f1 	.word	0x080062f1
 80062c4:	08006319 	.word	0x08006319
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d107      	bne.n	80062e2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062d2:	f107 030c 	add.w	r3, r7, #12
 80062d6:	2202      	movs	r2, #2
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f001 fa53 	bl	8007786 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80062e0:	e030      	b.n	8006344 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 f9dd 	bl	80076a4 <USBD_CtlError>
        ret = USBD_FAIL;
 80062ea:	2303      	movs	r3, #3
 80062ec:	75fb      	strb	r3, [r7, #23]
      break;
 80062ee:	e029      	b.n	8006344 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d107      	bne.n	800630a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062fa:	f107 030f 	add.w	r3, r7, #15
 80062fe:	2201      	movs	r2, #1
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fa3f 	bl	8007786 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006308:	e01c      	b.n	8006344 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 f9c9 	bl	80076a4 <USBD_CtlError>
        ret = USBD_FAIL;
 8006312:	2303      	movs	r3, #3
 8006314:	75fb      	strb	r3, [r7, #23]
      break;
 8006316:	e015      	b.n	8006344 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631e:	2b03      	cmp	r3, #3
 8006320:	d00f      	beq.n	8006342 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 f9bd 	bl	80076a4 <USBD_CtlError>
        ret = USBD_FAIL;
 800632a:	2303      	movs	r3, #3
 800632c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800632e:	e008      	b.n	8006342 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 f9b6 	bl	80076a4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006338:	2303      	movs	r3, #3
 800633a:	75fb      	strb	r3, [r7, #23]
      break;
 800633c:	e002      	b.n	8006344 <USBD_CDC_Setup+0x15c>
      break;
 800633e:	bf00      	nop
 8006340:	e008      	b.n	8006354 <USBD_CDC_Setup+0x16c>
      break;
 8006342:	bf00      	nop
    }
    break;
 8006344:	e006      	b.n	8006354 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 f9ab 	bl	80076a4 <USBD_CtlError>
    ret = USBD_FAIL;
 800634e:	2303      	movs	r3, #3
 8006350:	75fb      	strb	r3, [r7, #23]
    break;
 8006352:	bf00      	nop
  }

  return (uint8_t)ret;
 8006354:	7dfb      	ldrb	r3, [r7, #23]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop

08006360 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800637e:	2303      	movs	r3, #3
 8006380:	e049      	b.n	8006416 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006388:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800638a:	78fa      	ldrb	r2, [r7, #3]
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	440b      	add	r3, r1
 8006398:	3318      	adds	r3, #24
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d029      	beq.n	80063f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80063a0:	78fa      	ldrb	r2, [r7, #3]
 80063a2:	6879      	ldr	r1, [r7, #4]
 80063a4:	4613      	mov	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	3318      	adds	r3, #24
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	78f9      	ldrb	r1, [r7, #3]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	460b      	mov	r3, r1
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	1a5b      	subs	r3, r3, r1
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4403      	add	r3, r0
 80063c0:	3344      	adds	r3, #68	; 0x44
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80063c8:	fb03 f301 	mul.w	r3, r3, r1
 80063cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d110      	bne.n	80063f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	3318      	adds	r3, #24
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063e6:	78f9      	ldrb	r1, [r7, #3]
 80063e8:	2300      	movs	r3, #0
 80063ea:	2200      	movs	r2, #0
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f002 f8ea 	bl	80085c6 <USBD_LL_Transmit>
 80063f2:	e00f      	b.n	8006414 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006410:	78fa      	ldrb	r2, [r7, #3]
 8006412:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	460b      	mov	r3, r1
 8006428:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006430:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	e015      	b.n	800646c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f002 f900 	bl	800864a <USBD_LL_GetRxDataSize>
 800644a:	4602      	mov	r2, r0
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006466:	4611      	mov	r1, r2
 8006468:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006482:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d015      	beq.n	80064ba <USBD_CDC_EP0_RxReady+0x46>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006494:	2bff      	cmp	r3, #255	; 0xff
 8006496:	d010      	beq.n	80064ba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80064a6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064ae:	b292      	uxth	r2, r2
 80064b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	22ff      	movs	r2, #255	; 0xff
 80064b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2243      	movs	r2, #67	; 0x43
 80064d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80064d2:	4b03      	ldr	r3, [pc, #12]	; (80064e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	20000094 	.word	0x20000094

080064e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2243      	movs	r2, #67	; 0x43
 80064f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80064f2:	4b03      	ldr	r3, [pc, #12]	; (8006500 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	20000050 	.word	0x20000050

08006504 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2243      	movs	r2, #67	; 0x43
 8006510:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006512:	4b03      	ldr	r3, [pc, #12]	; (8006520 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	200000d8 	.word	0x200000d8

08006524 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	220a      	movs	r2, #10
 8006530:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006532:	4b03      	ldr	r3, [pc, #12]	; (8006540 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	2000000c 	.word	0x2000000c

08006544 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006554:	2303      	movs	r3, #3
 8006556:	e004      	b.n	8006562 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800656e:	b480      	push	{r7}
 8006570:	b087      	sub	sp, #28
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006580:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	371c      	adds	r7, #28
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065b0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80065d8:	2301      	movs	r3, #1
 80065da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e01a      	b.n	8006620 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d114      	bne.n	800661e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006612:	2181      	movs	r1, #129	; 0x81
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 ffd6 	bl	80085c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800661e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006636:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006642:	2303      	movs	r3, #3
 8006644:	e016      	b.n	8006674 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	7c1b      	ldrb	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d109      	bne.n	8006662 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006658:	2101      	movs	r1, #1
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 ffd4 	bl	8008608 <USBD_LL_PrepareReceive>
 8006660:	e007      	b.n	8006672 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006668:	2340      	movs	r3, #64	; 0x40
 800666a:	2101      	movs	r1, #1
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 ffcb 	bl	8008608 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006690:	2303      	movs	r3, #3
 8006692:	e025      	b.n	80066e0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	79fa      	ldrb	r2, [r7, #7]
 80066d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f001 fe41 	bl	800835c <USBD_LL_Init>
 80066da:	4603      	mov	r3, r0
 80066dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80066de:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e010      	b.n	8006722 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	f107 020e 	add.w	r2, r7, #14
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	4602      	mov	r2, r0
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 fe5e 	bl	80083f4 <USBD_LL_Start>
 8006738:	4603      	mov	r3, r0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006764:	2303      	movs	r3, #3
 8006766:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	78fa      	ldrb	r2, [r7, #3]
 800677c:	4611      	mov	r1, r2
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
 8006782:	4603      	mov	r3, r0
 8006784:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006786:	7bfb      	ldrb	r3, [r7, #15]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	4611      	mov	r1, r2
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
  }

  return USBD_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 ff2c 	bl	8007630 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80067e6:	461a      	mov	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067f4:	f003 031f 	and.w	r3, r3, #31
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d00e      	beq.n	800681a <USBD_LL_SetupStage+0x5a>
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d302      	bcc.n	8006806 <USBD_LL_SetupStage+0x46>
 8006800:	2b02      	cmp	r3, #2
 8006802:	d014      	beq.n	800682e <USBD_LL_SetupStage+0x6e>
 8006804:	e01d      	b.n	8006842 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa18 	bl	8006c44 <USBD_StdDevReq>
 8006814:	4603      	mov	r3, r0
 8006816:	73fb      	strb	r3, [r7, #15]
      break;
 8006818:	e020      	b.n	800685c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fa7c 	bl	8006d20 <USBD_StdItfReq>
 8006828:	4603      	mov	r3, r0
 800682a:	73fb      	strb	r3, [r7, #15]
      break;
 800682c:	e016      	b.n	800685c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fab8 	bl	8006dac <USBD_StdEPReq>
 800683c:	4603      	mov	r3, r0
 800683e:	73fb      	strb	r3, [r7, #15]
      break;
 8006840:	e00c      	b.n	800685c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006848:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800684c:	b2db      	uxtb	r3, r3
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 fe2f 	bl	80084b4 <USBD_LL_StallEP>
 8006856:	4603      	mov	r3, r0
 8006858:	73fb      	strb	r3, [r7, #15]
      break;
 800685a:	bf00      	nop
  }

  return ret;
 800685c:	7bfb      	ldrb	r3, [r7, #15]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af00      	add	r7, sp, #0
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	460b      	mov	r3, r1
 8006870:	607a      	str	r2, [r7, #4]
 8006872:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006874:	7afb      	ldrb	r3, [r7, #11]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d137      	bne.n	80068ea <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006880:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006888:	2b03      	cmp	r3, #3
 800688a:	d14a      	bne.n	8006922 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	429a      	cmp	r2, r3
 8006896:	d913      	bls.n	80068c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	1ad2      	subs	r2, r2, r3
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	4293      	cmp	r3, r2
 80068b0:	bf28      	it	cs
 80068b2:	4613      	movcs	r3, r2
 80068b4:	461a      	mov	r2, r3
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 ffad 	bl	8007818 <USBD_CtlContinueRx>
 80068be:	e030      	b.n	8006922 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d105      	bne.n	80068e2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 ffa9 	bl	800783a <USBD_CtlSendStatus>
 80068e8:	e01b      	b.n	8006922 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d013      	beq.n	800691e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d10e      	bne.n	800691e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	7afa      	ldrb	r2, [r7, #11]
 800690a:	4611      	mov	r1, r2
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	4798      	blx	r3
 8006910:	4603      	mov	r3, r0
 8006912:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006914:	7dfb      	ldrb	r3, [r7, #23]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	e002      	b.n	8006924 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800691e:	2303      	movs	r3, #3
 8006920:	e000      	b.n	8006924 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	460b      	mov	r3, r1
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800693a:	7afb      	ldrb	r3, [r7, #11]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d16a      	bne.n	8006a16 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3314      	adds	r3, #20
 8006944:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800694c:	2b02      	cmp	r3, #2
 800694e:	d155      	bne.n	80069fc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	429a      	cmp	r2, r3
 800695a:	d914      	bls.n	8006986 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	1ad2      	subs	r2, r2, r3
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	461a      	mov	r2, r3
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 ff22 	bl	80077bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006978:	2300      	movs	r3, #0
 800697a:	2200      	movs	r2, #0
 800697c:	2100      	movs	r1, #0
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f001 fe42 	bl	8008608 <USBD_LL_PrepareReceive>
 8006984:	e03a      	b.n	80069fc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	429a      	cmp	r2, r3
 8006990:	d11c      	bne.n	80069cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800699a:	429a      	cmp	r2, r3
 800699c:	d316      	bcc.n	80069cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d20f      	bcs.n	80069cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80069ac:	2200      	movs	r2, #0
 80069ae:	2100      	movs	r1, #0
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 ff03 	bl	80077bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069be:	2300      	movs	r3, #0
 80069c0:	2200      	movs	r2, #0
 80069c2:	2100      	movs	r1, #0
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f001 fe1f 	bl	8008608 <USBD_LL_PrepareReceive>
 80069ca:	e017      	b.n	80069fc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d105      	bne.n	80069ee <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ee:	2180      	movs	r1, #128	; 0x80
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f001 fd5f 	bl	80084b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 ff32 	bl	8007860 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d123      	bne.n	8006a4e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff fe9b 	bl	8006742 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a14:	e01b      	b.n	8006a4e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d013      	beq.n	8006a4a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d10e      	bne.n	8006a4a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	7afa      	ldrb	r2, [r7, #11]
 8006a36:	4611      	mov	r1, r2
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	4798      	blx	r3
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
 8006a48:	e002      	b.n	8006a50 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e000      	b.n	8006a50 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d009      	beq.n	8006a9c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6852      	ldr	r2, [r2, #4]
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	4611      	mov	r1, r2
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a9c:	2340      	movs	r3, #64	; 0x40
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f001 fcc1 	bl	800842a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2240      	movs	r2, #64	; 0x40
 8006ab4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ab8:	2340      	movs	r3, #64	; 0x40
 8006aba:	2200      	movs	r2, #0
 8006abc:	2180      	movs	r1, #128	; 0x80
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 fcb3 	bl	800842a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2240      	movs	r2, #64	; 0x40
 8006ace:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	78fa      	ldrb	r2, [r7, #3]
 8006aea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2204      	movs	r2, #4
 8006b12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d105      	bne.n	8006b42 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d10b      	bne.n	8006b7a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6852      	ldr	r2, [r2, #4]
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	4798      	blx	r3
  }

  return USBD_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b087      	sub	sp, #28
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c24:	8a3b      	ldrh	r3, [r7, #16]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	b21a      	sxth	r2, r3
 8006c2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	b21b      	sxth	r3, r3
 8006c32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c34:	89fb      	ldrh	r3, [r7, #14]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	d004      	beq.n	8006c68 <USBD_StdDevReq+0x24>
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	d002      	beq.n	8006c68 <USBD_StdDevReq+0x24>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <USBD_StdDevReq+0x38>
 8006c66:	e050      	b.n	8006d0a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	73fb      	strb	r3, [r7, #15]
    break;
 8006c7a:	e04b      	b.n	8006d14 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b09      	cmp	r3, #9
 8006c82:	d83c      	bhi.n	8006cfe <USBD_StdDevReq+0xba>
 8006c84:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <USBD_StdDevReq+0x48>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006ce1 	.word	0x08006ce1
 8006c90:	08006cf5 	.word	0x08006cf5
 8006c94:	08006cff 	.word	0x08006cff
 8006c98:	08006ceb 	.word	0x08006ceb
 8006c9c:	08006cff 	.word	0x08006cff
 8006ca0:	08006cbf 	.word	0x08006cbf
 8006ca4:	08006cb5 	.word	0x08006cb5
 8006ca8:	08006cff 	.word	0x08006cff
 8006cac:	08006cd7 	.word	0x08006cd7
 8006cb0:	08006cc9 	.word	0x08006cc9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f9ce 	bl	8007058 <USBD_GetDescriptor>
      break;
 8006cbc:	e024      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fb33 	bl	800732c <USBD_SetAddress>
      break;
 8006cc6:	e01f      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fb70 	bl	80073b0 <USBD_SetConfig>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd4:	e018      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fc0d 	bl	80074f8 <USBD_GetConfig>
      break;
 8006cde:	e013      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fc3c 	bl	8007560 <USBD_GetStatus>
      break;
 8006ce8:	e00e      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fc6a 	bl	80075c6 <USBD_SetFeature>
      break;
 8006cf2:	e009      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006cf4:	6839      	ldr	r1, [r7, #0]
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fc79 	bl	80075ee <USBD_ClrFeature>
      break;
 8006cfc:	e004      	b.n	8006d08 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fccf 	bl	80076a4 <USBD_CtlError>
      break;
 8006d06:	bf00      	nop
    }
    break;
 8006d08:	e004      	b.n	8006d14 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fcc9 	bl	80076a4 <USBD_CtlError>
    break;
 8006d12:	bf00      	nop
  }

  return ret;
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop

08006d20 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d003      	beq.n	8006d42 <USBD_StdItfReq+0x22>
 8006d3a:	2b40      	cmp	r3, #64	; 0x40
 8006d3c:	d001      	beq.n	8006d42 <USBD_StdItfReq+0x22>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d12a      	bne.n	8006d98 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d81d      	bhi.n	8006d8a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	889b      	ldrh	r3, [r3, #4]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d813      	bhi.n	8006d80 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	4798      	blx	r3
 8006d66:	4603      	mov	r3, r0
 8006d68:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	88db      	ldrh	r3, [r3, #6]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d110      	bne.n	8006d94 <USBD_StdItfReq+0x74>
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10d      	bne.n	8006d94 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fd5e 	bl	800783a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006d7e:	e009      	b.n	8006d94 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fc8e 	bl	80076a4 <USBD_CtlError>
      break;
 8006d88:	e004      	b.n	8006d94 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fc89 	bl	80076a4 <USBD_CtlError>
      break;
 8006d92:	e000      	b.n	8006d96 <USBD_StdItfReq+0x76>
      break;
 8006d94:	bf00      	nop
    }
    break;
 8006d96:	e004      	b.n	8006da2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fc82 	bl	80076a4 <USBD_CtlError>
    break;
 8006da0:	bf00      	nop
  }

  return ret;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	889b      	ldrh	r3, [r3, #4]
 8006dbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d004      	beq.n	8006dd6 <USBD_StdEPReq+0x2a>
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	d002      	beq.n	8006dd6 <USBD_StdEPReq+0x2a>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00a      	beq.n	8006dea <USBD_StdEPReq+0x3e>
 8006dd4:	e135      	b.n	8007042 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
 8006de4:	4603      	mov	r3, r0
 8006de6:	73fb      	strb	r3, [r7, #15]
    break;
 8006de8:	e130      	b.n	800704c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	785b      	ldrb	r3, [r3, #1]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d03e      	beq.n	8006e70 <USBD_StdEPReq+0xc4>
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d002      	beq.n	8006dfc <USBD_StdEPReq+0x50>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d077      	beq.n	8006eea <USBD_StdEPReq+0x13e>
 8006dfa:	e11c      	b.n	8007036 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d002      	beq.n	8006e0c <USBD_StdEPReq+0x60>
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d015      	beq.n	8006e36 <USBD_StdEPReq+0x8a>
 8006e0a:	e02b      	b.n	8006e64 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00c      	beq.n	8006e2c <USBD_StdEPReq+0x80>
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b80      	cmp	r3, #128	; 0x80
 8006e16:	d009      	beq.n	8006e2c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 fb49 	bl	80084b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e22:	2180      	movs	r1, #128	; 0x80
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 fb45 	bl	80084b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e2a:	e020      	b.n	8006e6e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fc38 	bl	80076a4 <USBD_CtlError>
        break;
 8006e34:	e01b      	b.n	8006e6e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	885b      	ldrh	r3, [r3, #2]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10e      	bne.n	8006e5c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <USBD_StdEPReq+0xb0>
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	2b80      	cmp	r3, #128	; 0x80
 8006e48:	d008      	beq.n	8006e5c <USBD_StdEPReq+0xb0>
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	88db      	ldrh	r3, [r3, #6]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d104      	bne.n	8006e5c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 fb2c 	bl	80084b4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fcec 	bl	800783a <USBD_CtlSendStatus>

        break;
 8006e62:	e004      	b.n	8006e6e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fc1c 	bl	80076a4 <USBD_CtlError>
        break;
 8006e6c:	bf00      	nop
      }
      break;
 8006e6e:	e0e7      	b.n	8007040 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d002      	beq.n	8006e80 <USBD_StdEPReq+0xd4>
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d015      	beq.n	8006eaa <USBD_StdEPReq+0xfe>
 8006e7e:	e02d      	b.n	8006edc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00c      	beq.n	8006ea0 <USBD_StdEPReq+0xf4>
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	2b80      	cmp	r3, #128	; 0x80
 8006e8a:	d009      	beq.n	8006ea0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 fb0f 	bl	80084b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e96:	2180      	movs	r1, #128	; 0x80
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 fb0b 	bl	80084b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e9e:	e023      	b.n	8006ee8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fbfe 	bl	80076a4 <USBD_CtlError>
        break;
 8006ea8:	e01e      	b.n	8006ee8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	885b      	ldrh	r3, [r3, #2]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d119      	bne.n	8006ee6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d004      	beq.n	8006ec6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 fb16 	bl	80084f2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fcb7 	bl	800783a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	4798      	blx	r3
        }
        break;
 8006eda:	e004      	b.n	8006ee6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fbe0 	bl	80076a4 <USBD_CtlError>
        break;
 8006ee4:	e000      	b.n	8006ee8 <USBD_StdEPReq+0x13c>
        break;
 8006ee6:	bf00      	nop
      }
      break;
 8006ee8:	e0aa      	b.n	8007040 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d002      	beq.n	8006efa <USBD_StdEPReq+0x14e>
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d032      	beq.n	8006f5e <USBD_StdEPReq+0x1b2>
 8006ef8:	e097      	b.n	800702a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d007      	beq.n	8006f10 <USBD_StdEPReq+0x164>
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2b80      	cmp	r3, #128	; 0x80
 8006f04:	d004      	beq.n	8006f10 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fbcb 	bl	80076a4 <USBD_CtlError>
          break;
 8006f0e:	e091      	b.n	8007034 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	da0b      	bge.n	8006f30 <USBD_StdEPReq+0x184>
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	3310      	adds	r3, #16
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	e00b      	b.n	8006f48 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4413      	add	r3, r2
 8006f46:	3304      	adds	r3, #4
 8006f48:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2202      	movs	r2, #2
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fc15 	bl	8007786 <USBD_CtlSendData>
        break;
 8006f5c:	e06a      	b.n	8007034 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	da11      	bge.n	8006f8a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f66:	7bbb      	ldrb	r3, [r7, #14]
 8006f68:	f003 020f 	and.w	r2, r3, #15
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	3324      	adds	r3, #36	; 0x24
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d117      	bne.n	8006fb0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fb8e 	bl	80076a4 <USBD_CtlError>
            break;
 8006f88:	e054      	b.n	8007034 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	f003 020f 	and.w	r2, r3, #15
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d104      	bne.n	8006fb0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fb7b 	bl	80076a4 <USBD_CtlError>
            break;
 8006fae:	e041      	b.n	8007034 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	da0b      	bge.n	8006fd0 <USBD_StdEPReq+0x224>
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	3310      	adds	r3, #16
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	4413      	add	r3, r2
 8006fcc:	3304      	adds	r3, #4
 8006fce:	e00b      	b.n	8006fe8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <USBD_StdEPReq+0x24a>
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	2b80      	cmp	r3, #128	; 0x80
 8006ff4:	d103      	bne.n	8006ffe <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	e00e      	b.n	800701c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 fa94 	bl	8008530 <USBD_LL_IsStallEP>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2201      	movs	r2, #1
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	e002      	b.n	800701c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2202      	movs	r2, #2
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fbaf 	bl	8007786 <USBD_CtlSendData>
          break;
 8007028:	e004      	b.n	8007034 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fb39 	bl	80076a4 <USBD_CtlError>
        break;
 8007032:	bf00      	nop
      }
      break;
 8007034:	e004      	b.n	8007040 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007036:	6839      	ldr	r1, [r7, #0]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fb33 	bl	80076a4 <USBD_CtlError>
      break;
 800703e:	bf00      	nop
    }
    break;
 8007040:	e004      	b.n	800704c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fb2d 	bl	80076a4 <USBD_CtlError>
    break;
 800704a:	bf00      	nop
  }

  return ret;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	885b      	ldrh	r3, [r3, #2]
 8007072:	0a1b      	lsrs	r3, r3, #8
 8007074:	b29b      	uxth	r3, r3
 8007076:	3b01      	subs	r3, #1
 8007078:	2b06      	cmp	r3, #6
 800707a:	f200 8128 	bhi.w	80072ce <USBD_GetDescriptor+0x276>
 800707e:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <USBD_GetDescriptor+0x2c>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	080070a1 	.word	0x080070a1
 8007088:	080070b9 	.word	0x080070b9
 800708c:	080070f9 	.word	0x080070f9
 8007090:	080072cf 	.word	0x080072cf
 8007094:	080072cf 	.word	0x080072cf
 8007098:	0800726f 	.word	0x0800726f
 800709c:	0800729b 	.word	0x0800729b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	7c12      	ldrb	r2, [r2, #16]
 80070ac:	f107 0108 	add.w	r1, r7, #8
 80070b0:	4610      	mov	r0, r2
 80070b2:	4798      	blx	r3
 80070b4:	60f8      	str	r0, [r7, #12]
    break;
 80070b6:	e112      	b.n	80072de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	7c1b      	ldrb	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10d      	bne.n	80070dc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c8:	f107 0208 	add.w	r2, r7, #8
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3
 80070d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3301      	adds	r3, #1
 80070d6:	2202      	movs	r2, #2
 80070d8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80070da:	e100      	b.n	80072de <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e4:	f107 0208 	add.w	r2, r7, #8
 80070e8:	4610      	mov	r0, r2
 80070ea:	4798      	blx	r3
 80070ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3301      	adds	r3, #1
 80070f2:	2202      	movs	r2, #2
 80070f4:	701a      	strb	r2, [r3, #0]
    break;
 80070f6:	e0f2      	b.n	80072de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	885b      	ldrh	r3, [r3, #2]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b05      	cmp	r3, #5
 8007100:	f200 80ac 	bhi.w	800725c <USBD_GetDescriptor+0x204>
 8007104:	a201      	add	r2, pc, #4	; (adr r2, 800710c <USBD_GetDescriptor+0xb4>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	08007125 	.word	0x08007125
 8007110:	08007159 	.word	0x08007159
 8007114:	0800718d 	.word	0x0800718d
 8007118:	080071c1 	.word	0x080071c1
 800711c:	080071f5 	.word	0x080071f5
 8007120:	08007229 	.word	0x08007229
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00b      	beq.n	8007148 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	7c12      	ldrb	r2, [r2, #16]
 800713c:	f107 0108 	add.w	r1, r7, #8
 8007140:	4610      	mov	r0, r2
 8007142:	4798      	blx	r3
 8007144:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007146:	e091      	b.n	800726c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 faaa 	bl	80076a4 <USBD_CtlError>
        err++;
 8007150:	7afb      	ldrb	r3, [r7, #11]
 8007152:	3301      	adds	r3, #1
 8007154:	72fb      	strb	r3, [r7, #11]
      break;
 8007156:	e089      	b.n	800726c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00b      	beq.n	800717c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	7c12      	ldrb	r2, [r2, #16]
 8007170:	f107 0108 	add.w	r1, r7, #8
 8007174:	4610      	mov	r0, r2
 8007176:	4798      	blx	r3
 8007178:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800717a:	e077      	b.n	800726c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fa90 	bl	80076a4 <USBD_CtlError>
        err++;
 8007184:	7afb      	ldrb	r3, [r7, #11]
 8007186:	3301      	adds	r3, #1
 8007188:	72fb      	strb	r3, [r7, #11]
      break;
 800718a:	e06f      	b.n	800726c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00b      	beq.n	80071b0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	7c12      	ldrb	r2, [r2, #16]
 80071a4:	f107 0108 	add.w	r1, r7, #8
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
 80071ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071ae:	e05d      	b.n	800726c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fa76 	bl	80076a4 <USBD_CtlError>
        err++;
 80071b8:	7afb      	ldrb	r3, [r7, #11]
 80071ba:	3301      	adds	r3, #1
 80071bc:	72fb      	strb	r3, [r7, #11]
      break;
 80071be:	e055      	b.n	800726c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	7c12      	ldrb	r2, [r2, #16]
 80071d8:	f107 0108 	add.w	r1, r7, #8
 80071dc:	4610      	mov	r0, r2
 80071de:	4798      	blx	r3
 80071e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071e2:	e043      	b.n	800726c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa5c 	bl	80076a4 <USBD_CtlError>
        err++;
 80071ec:	7afb      	ldrb	r3, [r7, #11]
 80071ee:	3301      	adds	r3, #1
 80071f0:	72fb      	strb	r3, [r7, #11]
      break;
 80071f2:	e03b      	b.n	800726c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00b      	beq.n	8007218 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	7c12      	ldrb	r2, [r2, #16]
 800720c:	f107 0108 	add.w	r1, r7, #8
 8007210:	4610      	mov	r0, r2
 8007212:	4798      	blx	r3
 8007214:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007216:	e029      	b.n	800726c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa42 	bl	80076a4 <USBD_CtlError>
        err++;
 8007220:	7afb      	ldrb	r3, [r7, #11]
 8007222:	3301      	adds	r3, #1
 8007224:	72fb      	strb	r3, [r7, #11]
      break;
 8007226:	e021      	b.n	800726c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00b      	beq.n	800724c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	7c12      	ldrb	r2, [r2, #16]
 8007240:	f107 0108 	add.w	r1, r7, #8
 8007244:	4610      	mov	r0, r2
 8007246:	4798      	blx	r3
 8007248:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800724a:	e00f      	b.n	800726c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa28 	bl	80076a4 <USBD_CtlError>
        err++;
 8007254:	7afb      	ldrb	r3, [r7, #11]
 8007256:	3301      	adds	r3, #1
 8007258:	72fb      	strb	r3, [r7, #11]
      break;
 800725a:	e007      	b.n	800726c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa20 	bl	80076a4 <USBD_CtlError>
      err++;
 8007264:	7afb      	ldrb	r3, [r7, #11]
 8007266:	3301      	adds	r3, #1
 8007268:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800726a:	bf00      	nop
    }
    break;
 800726c:	e037      	b.n	80072de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	7c1b      	ldrb	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d109      	bne.n	800728a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727e:	f107 0208 	add.w	r2, r7, #8
 8007282:	4610      	mov	r0, r2
 8007284:	4798      	blx	r3
 8007286:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007288:	e029      	b.n	80072de <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fa09 	bl	80076a4 <USBD_CtlError>
      err++;
 8007292:	7afb      	ldrb	r3, [r7, #11]
 8007294:	3301      	adds	r3, #1
 8007296:	72fb      	strb	r3, [r7, #11]
    break;
 8007298:	e021      	b.n	80072de <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	7c1b      	ldrb	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10d      	bne.n	80072be <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	f107 0208 	add.w	r2, r7, #8
 80072ae:	4610      	mov	r0, r2
 80072b0:	4798      	blx	r3
 80072b2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3301      	adds	r3, #1
 80072b8:	2207      	movs	r2, #7
 80072ba:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80072bc:	e00f      	b.n	80072de <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f9ef 	bl	80076a4 <USBD_CtlError>
      err++;
 80072c6:	7afb      	ldrb	r3, [r7, #11]
 80072c8:	3301      	adds	r3, #1
 80072ca:	72fb      	strb	r3, [r7, #11]
    break;
 80072cc:	e007      	b.n	80072de <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f9e7 	bl	80076a4 <USBD_CtlError>
    err++;
 80072d6:	7afb      	ldrb	r3, [r7, #11]
 80072d8:	3301      	adds	r3, #1
 80072da:	72fb      	strb	r3, [r7, #11]
    break;
 80072dc:	bf00      	nop
  }

  if (err != 0U)
 80072de:	7afb      	ldrb	r3, [r7, #11]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d11e      	bne.n	8007322 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	88db      	ldrh	r3, [r3, #6]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d016      	beq.n	800731a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80072ec:	893b      	ldrh	r3, [r7, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00e      	beq.n	8007310 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	88da      	ldrh	r2, [r3, #6]
 80072f6:	893b      	ldrh	r3, [r7, #8]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	bf28      	it	cs
 80072fc:	4613      	movcs	r3, r2
 80072fe:	b29b      	uxth	r3, r3
 8007300:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007302:	893b      	ldrh	r3, [r7, #8]
 8007304:	461a      	mov	r2, r3
 8007306:	68f9      	ldr	r1, [r7, #12]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fa3c 	bl	8007786 <USBD_CtlSendData>
 800730e:	e009      	b.n	8007324 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f9c6 	bl	80076a4 <USBD_CtlError>
 8007318:	e004      	b.n	8007324 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fa8d 	bl	800783a <USBD_CtlSendStatus>
 8007320:	e000      	b.n	8007324 <USBD_GetDescriptor+0x2cc>
    return;
 8007322:	bf00      	nop
    }
  }
}
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop

0800732c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	889b      	ldrh	r3, [r3, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d130      	bne.n	80073a0 <USBD_SetAddress+0x74>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	88db      	ldrh	r3, [r3, #6]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d12c      	bne.n	80073a0 <USBD_SetAddress+0x74>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	885b      	ldrh	r3, [r3, #2]
 800734a:	2b7f      	cmp	r3, #127	; 0x7f
 800734c:	d828      	bhi.n	80073a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	885b      	ldrh	r3, [r3, #2]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007358:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007360:	2b03      	cmp	r3, #3
 8007362:	d104      	bne.n	800736e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f99c 	bl	80076a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800736c:	e01c      	b.n	80073a8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	7bfa      	ldrb	r2, [r7, #15]
 8007372:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 f904 	bl	8008588 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fa5a 	bl	800783a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d004      	beq.n	8007396 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007394:	e008      	b.n	80073a8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739e:	e003      	b.n	80073a8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f97e 	bl	80076a4 <USBD_CtlError>
  }
}
 80073a8:	bf00      	nop
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	885b      	ldrh	r3, [r3, #2]
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	4b4b      	ldr	r3, [pc, #300]	; (80074f4 <USBD_SetConfig+0x144>)
 80073c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073c8:	4b4a      	ldr	r3, [pc, #296]	; (80074f4 <USBD_SetConfig+0x144>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d905      	bls.n	80073dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f966 	bl	80076a4 <USBD_CtlError>
    return USBD_FAIL;
 80073d8:	2303      	movs	r3, #3
 80073da:	e087      	b.n	80074ec <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d002      	beq.n	80073ec <USBD_SetConfig+0x3c>
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d025      	beq.n	8007436 <USBD_SetConfig+0x86>
 80073ea:	e071      	b.n	80074d0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80073ec:	4b41      	ldr	r3, [pc, #260]	; (80074f4 <USBD_SetConfig+0x144>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01c      	beq.n	800742e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80073f4:	4b3f      	ldr	r3, [pc, #252]	; (80074f4 <USBD_SetConfig+0x144>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	461a      	mov	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80073fe:	4b3d      	ldr	r3, [pc, #244]	; (80074f4 <USBD_SetConfig+0x144>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff f9a7 	bl	8006758 <USBD_SetClassConfig>
 800740a:	4603      	mov	r3, r0
 800740c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d004      	beq.n	800741e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f944 	bl	80076a4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800741c:	e065      	b.n	80074ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa0b 	bl	800783a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2203      	movs	r2, #3
 8007428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800742c:	e05d      	b.n	80074ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fa03 	bl	800783a <USBD_CtlSendStatus>
    break;
 8007434:	e059      	b.n	80074ea <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007436:	4b2f      	ldr	r3, [pc, #188]	; (80074f4 <USBD_SetConfig+0x144>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d112      	bne.n	8007464 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2202      	movs	r2, #2
 8007442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007446:	4b2b      	ldr	r3, [pc, #172]	; (80074f4 <USBD_SetConfig+0x144>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007450:	4b28      	ldr	r3, [pc, #160]	; (80074f4 <USBD_SetConfig+0x144>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff f99a 	bl	8006790 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f9ec 	bl	800783a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007462:	e042      	b.n	80074ea <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007464:	4b23      	ldr	r3, [pc, #140]	; (80074f4 <USBD_SetConfig+0x144>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	429a      	cmp	r2, r3
 8007470:	d02a      	beq.n	80074c8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7ff f988 	bl	8006790 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007480:	4b1c      	ldr	r3, [pc, #112]	; (80074f4 <USBD_SetConfig+0x144>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800748a:	4b1a      	ldr	r3, [pc, #104]	; (80074f4 <USBD_SetConfig+0x144>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7ff f961 	bl	8006758 <USBD_SetClassConfig>
 8007496:	4603      	mov	r3, r0
 8007498:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00f      	beq.n	80074c0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f8fe 	bl	80076a4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff f96d 	bl	8006790 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2202      	movs	r2, #2
 80074ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80074be:	e014      	b.n	80074ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f9ba 	bl	800783a <USBD_CtlSendStatus>
    break;
 80074c6:	e010      	b.n	80074ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f9b6 	bl	800783a <USBD_CtlSendStatus>
    break;
 80074ce:	e00c      	b.n	80074ea <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f8e6 	bl	80076a4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074d8:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <USBD_SetConfig+0x144>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff f956 	bl	8006790 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80074e4:	2303      	movs	r3, #3
 80074e6:	73fb      	strb	r3, [r7, #15]
    break;
 80074e8:	bf00      	nop
  }

  return ret;
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20000370 	.word	0x20000370

080074f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	88db      	ldrh	r3, [r3, #6]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d004      	beq.n	8007514 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f8c9 	bl	80076a4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007512:	e021      	b.n	8007558 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751a:	2b01      	cmp	r3, #1
 800751c:	db17      	blt.n	800754e <USBD_GetConfig+0x56>
 800751e:	2b02      	cmp	r3, #2
 8007520:	dd02      	ble.n	8007528 <USBD_GetConfig+0x30>
 8007522:	2b03      	cmp	r3, #3
 8007524:	d00b      	beq.n	800753e <USBD_GetConfig+0x46>
 8007526:	e012      	b.n	800754e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3308      	adds	r3, #8
 8007532:	2201      	movs	r2, #1
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f925 	bl	8007786 <USBD_CtlSendData>
      break;
 800753c:	e00c      	b.n	8007558 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3304      	adds	r3, #4
 8007542:	2201      	movs	r2, #1
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f91d 	bl	8007786 <USBD_CtlSendData>
      break;
 800754c:	e004      	b.n	8007558 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f8a7 	bl	80076a4 <USBD_CtlError>
      break;
 8007556:	bf00      	nop
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007570:	3b01      	subs	r3, #1
 8007572:	2b02      	cmp	r3, #2
 8007574:	d81e      	bhi.n	80075b4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	88db      	ldrh	r3, [r3, #6]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d004      	beq.n	8007588 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f88f 	bl	80076a4 <USBD_CtlError>
      break;
 8007586:	e01a      	b.n	80075be <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	f043 0202 	orr.w	r2, r3, #2
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	330c      	adds	r3, #12
 80075a8:	2202      	movs	r2, #2
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f8ea 	bl	8007786 <USBD_CtlSendData>
    break;
 80075b2:	e004      	b.n	80075be <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f874 	bl	80076a4 <USBD_CtlError>
    break;
 80075bc:	bf00      	nop
  }
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	885b      	ldrh	r3, [r3, #2]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d106      	bne.n	80075e6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f92a 	bl	800783a <USBD_CtlSendStatus>
  }
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fe:	3b01      	subs	r3, #1
 8007600:	2b02      	cmp	r3, #2
 8007602:	d80b      	bhi.n	800761c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	885b      	ldrh	r3, [r3, #2]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d10c      	bne.n	8007626 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f910 	bl	800783a <USBD_CtlSendStatus>
      }
      break;
 800761a:	e004      	b.n	8007626 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f840 	bl	80076a4 <USBD_CtlError>
      break;
 8007624:	e000      	b.n	8007628 <USBD_ClrFeature+0x3a>
      break;
 8007626:	bf00      	nop
  }
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	781a      	ldrb	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	3301      	adds	r3, #1
 800764a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	781a      	ldrb	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3301      	adds	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f7ff fad3 	bl	8006c06 <SWAPBYTE>
 8007660:	4603      	mov	r3, r0
 8007662:	461a      	mov	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3301      	adds	r3, #1
 8007672:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff fac6 	bl	8006c06 <SWAPBYTE>
 800767a:	4603      	mov	r3, r0
 800767c:	461a      	mov	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3301      	adds	r3, #1
 8007686:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3301      	adds	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff fab9 	bl	8006c06 <SWAPBYTE>
 8007694:	4603      	mov	r3, r0
 8007696:	461a      	mov	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	80da      	strh	r2, [r3, #6]
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ae:	2180      	movs	r1, #128	; 0x80
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 feff 	bl	80084b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076b6:	2100      	movs	r1, #0
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fefb 	bl	80084b4 <USBD_LL_StallEP>
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b086      	sub	sp, #24
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d036      	beq.n	800774a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80076e0:	6938      	ldr	r0, [r7, #16]
 80076e2:	f000 f836 	bl	8007752 <USBD_GetLen>
 80076e6:	4603      	mov	r3, r0
 80076e8:	3301      	adds	r3, #1
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	4413      	add	r3, r2
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	7812      	ldrb	r2, [r2, #0]
 80076fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	3301      	adds	r3, #1
 8007704:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	4413      	add	r3, r2
 800770c:	2203      	movs	r2, #3
 800770e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	3301      	adds	r3, #1
 8007714:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007716:	e013      	b.n	8007740 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	4413      	add	r3, r2
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	7812      	ldrb	r2, [r2, #0]
 8007722:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	3301      	adds	r3, #1
 8007728:	613b      	str	r3, [r7, #16]
    idx++;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	3301      	adds	r3, #1
 800772e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	2200      	movs	r2, #0
 8007738:	701a      	strb	r2, [r3, #0]
    idx++;
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	3301      	adds	r3, #1
 800773e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e7      	bne.n	8007718 <USBD_GetString+0x52>
 8007748:	e000      	b.n	800774c <USBD_GetString+0x86>
    return;
 800774a:	bf00      	nop
  }
}
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007762:	e005      	b.n	8007770 <USBD_GetLen+0x1e>
  {
    len++;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	3301      	adds	r3, #1
 8007768:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	3301      	adds	r3, #1
 800776e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1f5      	bne.n	8007764 <USBD_GetLen+0x12>
  }

  return len;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2202      	movs	r2, #2
 8007796:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	2100      	movs	r1, #0
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 ff0a 	bl	80085c6 <USBD_LL_Transmit>

  return USBD_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	2100      	movs	r1, #0
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 fef9 	bl	80085c6 <USBD_LL_Transmit>

  return USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2203      	movs	r2, #3
 80077ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	2100      	movs	r1, #0
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 fefd 	bl	8008608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	2100      	movs	r1, #0
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 feec 	bl	8008608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2204      	movs	r2, #4
 8007846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800784a:	2300      	movs	r3, #0
 800784c:	2200      	movs	r2, #0
 800784e:	2100      	movs	r1, #0
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 feb8 	bl	80085c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2205      	movs	r2, #5
 800786c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007870:	2300      	movs	r3, #0
 8007872:	2200      	movs	r2, #0
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fec6 	bl	8008608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800788c:	2200      	movs	r2, #0
 800788e:	4912      	ldr	r1, [pc, #72]	; (80078d8 <MX_USB_DEVICE_Init+0x50>)
 8007890:	4812      	ldr	r0, [pc, #72]	; (80078dc <MX_USB_DEVICE_Init+0x54>)
 8007892:	f7fe fef3 	bl	800667c <USBD_Init>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800789c:	f7f9 f9e8 	bl	8000c70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078a0:	490f      	ldr	r1, [pc, #60]	; (80078e0 <MX_USB_DEVICE_Init+0x58>)
 80078a2:	480e      	ldr	r0, [pc, #56]	; (80078dc <MX_USB_DEVICE_Init+0x54>)
 80078a4:	f7fe ff20 	bl	80066e8 <USBD_RegisterClass>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80078ae:	f7f9 f9df 	bl	8000c70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078b2:	490c      	ldr	r1, [pc, #48]	; (80078e4 <MX_USB_DEVICE_Init+0x5c>)
 80078b4:	4809      	ldr	r0, [pc, #36]	; (80078dc <MX_USB_DEVICE_Init+0x54>)
 80078b6:	f7fe fe45 	bl	8006544 <USBD_CDC_RegisterInterface>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078c0:	f7f9 f9d6 	bl	8000c70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078c4:	4805      	ldr	r0, [pc, #20]	; (80078dc <MX_USB_DEVICE_Init+0x54>)
 80078c6:	f7fe ff30 	bl	800672a <USBD_Start>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80078d0:	f7f9 f9ce 	bl	8000c70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078d4:	bf00      	nop
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	20000130 	.word	0x20000130
 80078dc:	20008510 	.word	0x20008510
 80078e0:	20000018 	.word	0x20000018
 80078e4:	2000011c 	.word	0x2000011c

080078e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078ec:	2200      	movs	r2, #0
 80078ee:	4905      	ldr	r1, [pc, #20]	; (8007904 <CDC_Init_FS+0x1c>)
 80078f0:	4805      	ldr	r0, [pc, #20]	; (8007908 <CDC_Init_FS+0x20>)
 80078f2:	f7fe fe3c 	bl	800656e <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078f6:	4905      	ldr	r1, [pc, #20]	; (800790c <CDC_Init_FS+0x24>)
 80078f8:	4803      	ldr	r0, [pc, #12]	; (8007908 <CDC_Init_FS+0x20>)
 80078fa:	f7fe fe51 	bl	80065a0 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80078fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007900:	4618      	mov	r0, r3
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20008860 	.word	0x20008860
 8007908:	20008510 	.word	0x20008510
 800790c:	200087e0 	.word	0x200087e0

08007910 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007910:	b480      	push	{r7}
 8007912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8007914:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007916:	4618      	mov	r0, r3
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	6039      	str	r1, [r7, #0]
 800792a:	71fb      	strb	r3, [r7, #7]
 800792c:	4613      	mov	r3, r2
 800792e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	2b23      	cmp	r3, #35	; 0x23
 8007934:	d866      	bhi.n	8007a04 <CDC_Control_FS+0xe4>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <CDC_Control_FS+0x1c>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	08007a05 	.word	0x08007a05
 8007940:	08007a05 	.word	0x08007a05
 8007944:	08007a05 	.word	0x08007a05
 8007948:	08007a05 	.word	0x08007a05
 800794c:	08007a05 	.word	0x08007a05
 8007950:	08007a05 	.word	0x08007a05
 8007954:	08007a05 	.word	0x08007a05
 8007958:	08007a05 	.word	0x08007a05
 800795c:	08007a05 	.word	0x08007a05
 8007960:	08007a05 	.word	0x08007a05
 8007964:	08007a05 	.word	0x08007a05
 8007968:	08007a05 	.word	0x08007a05
 800796c:	08007a05 	.word	0x08007a05
 8007970:	08007a05 	.word	0x08007a05
 8007974:	08007a05 	.word	0x08007a05
 8007978:	08007a05 	.word	0x08007a05
 800797c:	08007a05 	.word	0x08007a05
 8007980:	08007a05 	.word	0x08007a05
 8007984:	08007a05 	.word	0x08007a05
 8007988:	08007a05 	.word	0x08007a05
 800798c:	08007a05 	.word	0x08007a05
 8007990:	08007a05 	.word	0x08007a05
 8007994:	08007a05 	.word	0x08007a05
 8007998:	08007a05 	.word	0x08007a05
 800799c:	08007a05 	.word	0x08007a05
 80079a0:	08007a05 	.word	0x08007a05
 80079a4:	08007a05 	.word	0x08007a05
 80079a8:	08007a05 	.word	0x08007a05
 80079ac:	08007a05 	.word	0x08007a05
 80079b0:	08007a05 	.word	0x08007a05
 80079b4:	08007a05 	.word	0x08007a05
 80079b8:	08007a05 	.word	0x08007a05
 80079bc:	08007a05 	.word	0x08007a05
 80079c0:	08007a05 	.word	0x08007a05
 80079c4:	080079cd 	.word	0x080079cd
 80079c8:	08007a05 	.word	0x08007a05

		break;

	case CDC_SET_CONTROL_LINE_STATE:
	{
		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	60fb      	str	r3, [r7, #12]
		if ((req->wValue & 0x0001) != 0)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	885b      	ldrh	r3, [r3, #2]
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d009      	beq.n	80079f0 <CDC_Control_FS+0xd0>
		{
			HOST_PORT_COM_OPEN = 1;
 80079dc:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <CDC_Control_FS+0xf0>)
 80079de:	2201      	movs	r2, #1
 80079e0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80079e2:	2201      	movs	r2, #1
 80079e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079e8:	480a      	ldr	r0, [pc, #40]	; (8007a14 <CDC_Control_FS+0xf4>)
 80079ea:	f7fa f9e1 	bl	8001db0 <HAL_GPIO_WritePin>
		else
		{
			HOST_PORT_COM_OPEN = 0;
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
		}
		break;
 80079ee:	e00a      	b.n	8007a06 <CDC_Control_FS+0xe6>
			HOST_PORT_COM_OPEN = 0;
 80079f0:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <CDC_Control_FS+0xf0>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80079f6:	2200      	movs	r2, #0
 80079f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079fc:	4805      	ldr	r0, [pc, #20]	; (8007a14 <CDC_Control_FS+0xf4>)
 80079fe:	f7fa f9d7 	bl	8001db0 <HAL_GPIO_WritePin>
		break;
 8007a02:	e000      	b.n	8007a06 <CDC_Control_FS+0xe6>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8007a04:	bf00      	nop
	}

	return (USBD_OK);
 8007a06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20000371 	.word	0x20000371
 8007a14:	40020c00 	.word	0x40020c00

08007a18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t result = USBD_OK;;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73bb      	strb	r3, [r7, #14]
	static uint8_t txLen;
	static uint8_t rxLen;
	static uint8_t RX_Buf_Temp[APP_RX_DATA_SIZE];
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8007a26:	2201      	movs	r2, #1
 8007a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a2c:	486a      	ldr	r0, [pc, #424]	; (8007bd8 <CDC_Receive_FS+0x1c0>)
 8007a2e:	f7fa f9bf 	bl	8001db0 <HAL_GPIO_WritePin>

	/* Get data from serial com */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	4869      	ldr	r0, [pc, #420]	; (8007bdc <CDC_Receive_FS+0x1c4>)
 8007a36:	f7fe fdb3 	bl	80065a0 <USBD_CDC_SetRxBuffer>
	if ((result = USBD_CDC_ReceivePacket(&hUsbDeviceFS)) != USBD_OK)
 8007a3a:	4868      	ldr	r0, [pc, #416]	; (8007bdc <CDC_Receive_FS+0x1c4>)
 8007a3c:	f7fe fdf4 	bl	8006628 <USBD_CDC_ReceivePacket>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73bb      	strb	r3, [r7, #14]
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d008      	beq.n	8007a5c <CDC_Receive_FS+0x44>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a50:	4861      	ldr	r0, [pc, #388]	; (8007bd8 <CDC_Receive_FS+0x1c0>)
 8007a52:	f7fa f9ad 	bl	8001db0 <HAL_GPIO_WritePin>
		return result;
 8007a56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a5a:	e0b8      	b.n	8007bce <CDC_Receive_FS+0x1b6>
	}

	for (uint8_t i = 0; i < (*Len); i++)
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]
 8007a60:	e098      	b.n	8007b94 <CDC_Receive_FS+0x17c>
	{

		/* Avoid buffer overflow */
		if (txLen == APP_TX_DATA_SIZE)
 8007a62:	4b5f      	ldr	r3, [pc, #380]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	2b80      	cmp	r3, #128	; 0x80
 8007a68:	d102      	bne.n	8007a70 <CDC_Receive_FS+0x58>
		{
			txLen = 0;
 8007a6a:	4b5d      	ldr	r3, [pc, #372]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	701a      	strb	r2, [r3, #0]
		}
		if (rxLen == APP_RX_DATA_SIZE)
 8007a70:	4b5c      	ldr	r3, [pc, #368]	; (8007be4 <CDC_Receive_FS+0x1cc>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b80      	cmp	r3, #128	; 0x80
 8007a76:	d102      	bne.n	8007a7e <CDC_Receive_FS+0x66>
		{
			rxLen = 0;
 8007a78:	4b5a      	ldr	r3, [pc, #360]	; (8007be4 <CDC_Receive_FS+0x1cc>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
		}

		/* VT100 escape sequences must be 16 bits packets */
		if(Buf[0] == '\033' && Buf[1] == '\0')
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b1b      	cmp	r3, #27
 8007a84:	d119      	bne.n	8007aba <CDC_Receive_FS+0xa2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d114      	bne.n	8007aba <CDC_Receive_FS+0xa2>
		{
			UserTxBufferFS[txLen++] = Buf[i];
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	441a      	add	r2, r3
 8007a96:	4b52      	ldr	r3, [pc, #328]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	1c59      	adds	r1, r3, #1
 8007a9c:	b2c8      	uxtb	r0, r1
 8007a9e:	4950      	ldr	r1, [pc, #320]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007aa0:	7008      	strb	r0, [r1, #0]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	7812      	ldrb	r2, [r2, #0]
 8007aa6:	4b50      	ldr	r3, [pc, #320]	; (8007be8 <CDC_Receive_FS+0x1d0>)
 8007aa8:	545a      	strb	r2, [r3, r1]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007ab0:	4849      	ldr	r0, [pc, #292]	; (8007bd8 <CDC_Receive_FS+0x1c0>)
 8007ab2:	f7fa f97d 	bl	8001db0 <HAL_GPIO_WritePin>
			return USBD_BUSY;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e089      	b.n	8007bce <CDC_Receive_FS+0x1b6>
		}

		/* If Backspace key: clear the last char */
		if ((UserTxBufferFS[txLen++] = Buf[i]) == '\b')
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	441a      	add	r2, r3
 8007ac0:	4b47      	ldr	r3, [pc, #284]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	1c59      	adds	r1, r3, #1
 8007ac6:	b2c8      	uxtb	r0, r1
 8007ac8:	4945      	ldr	r1, [pc, #276]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007aca:	7008      	strb	r0, [r1, #0]
 8007acc:	7811      	ldrb	r1, [r2, #0]
 8007ace:	4a46      	ldr	r2, [pc, #280]	; (8007be8 <CDC_Receive_FS+0x1d0>)
 8007ad0:	54d1      	strb	r1, [r2, r3]
 8007ad2:	4a45      	ldr	r2, [pc, #276]	; (8007be8 <CDC_Receive_FS+0x1d0>)
 8007ad4:	5cd3      	ldrb	r3, [r2, r3]
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d11e      	bne.n	8007b18 <CDC_Receive_FS+0x100>
		{
			UserTxBufferFS[txLen++] = ' ';
 8007ada:	4b41      	ldr	r3, [pc, #260]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	b2d1      	uxtb	r1, r2
 8007ae2:	4a3f      	ldr	r2, [pc, #252]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007ae4:	7011      	strb	r1, [r2, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4b3f      	ldr	r3, [pc, #252]	; (8007be8 <CDC_Receive_FS+0x1d0>)
 8007aea:	2120      	movs	r1, #32
 8007aec:	5499      	strb	r1, [r3, r2]
			UserTxBufferFS[txLen++] = '\b';
 8007aee:	4b3c      	ldr	r3, [pc, #240]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	b2d1      	uxtb	r1, r2
 8007af6:	4a3a      	ldr	r2, [pc, #232]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007af8:	7011      	strb	r1, [r2, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	4b3a      	ldr	r3, [pc, #232]	; (8007be8 <CDC_Receive_FS+0x1d0>)
 8007afe:	2108      	movs	r1, #8
 8007b00:	5499      	strb	r1, [r3, r2]
			if (rxLen)
 8007b02:	4b38      	ldr	r3, [pc, #224]	; (8007be4 <CDC_Receive_FS+0x1cc>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d041      	beq.n	8007b8e <CDC_Receive_FS+0x176>
			{
				rxLen--;
 8007b0a:	4b36      	ldr	r3, [pc, #216]	; (8007be4 <CDC_Receive_FS+0x1cc>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	4b34      	ldr	r3, [pc, #208]	; (8007be4 <CDC_Receive_FS+0x1cc>)
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	e03a      	b.n	8007b8e <CDC_Receive_FS+0x176>
			}
		}
		/* Else if Enter key: add a \n to terminal and extract output buffer */
		else if (Buf[i] == '\r' || Buf[i] == '\0')
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b0d      	cmp	r3, #13
 8007b22:	d005      	beq.n	8007b30 <CDC_Receive_FS+0x118>
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	4413      	add	r3, r2
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d121      	bne.n	8007b74 <CDC_Receive_FS+0x15c>
		{
			UserTxBufferFS[txLen++] = '\n';
 8007b30:	4b2b      	ldr	r3, [pc, #172]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	b2d1      	uxtb	r1, r2
 8007b38:	4a29      	ldr	r2, [pc, #164]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007b3a:	7011      	strb	r1, [r2, #0]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4b2a      	ldr	r3, [pc, #168]	; (8007be8 <CDC_Receive_FS+0x1d0>)
 8007b40:	210a      	movs	r1, #10
 8007b42:	5499      	strb	r1, [r3, r2]
			RX_Buf_Temp[rxLen++] = '\0';
 8007b44:	4b27      	ldr	r3, [pc, #156]	; (8007be4 <CDC_Receive_FS+0x1cc>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	b2d1      	uxtb	r1, r2
 8007b4c:	4a25      	ldr	r2, [pc, #148]	; (8007be4 <CDC_Receive_FS+0x1cc>)
 8007b4e:	7011      	strb	r1, [r2, #0]
 8007b50:	461a      	mov	r2, r3
 8007b52:	4b26      	ldr	r3, [pc, #152]	; (8007bec <CDC_Receive_FS+0x1d4>)
 8007b54:	2100      	movs	r1, #0
 8007b56:	5499      	strb	r1, [r3, r2]
			memcpy(UserRxBufferFS, RX_Buf_Temp, rxLen);
 8007b58:	4b22      	ldr	r3, [pc, #136]	; (8007be4 <CDC_Receive_FS+0x1cc>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	4923      	ldr	r1, [pc, #140]	; (8007bec <CDC_Receive_FS+0x1d4>)
 8007b60:	4823      	ldr	r0, [pc, #140]	; (8007bf0 <CDC_Receive_FS+0x1d8>)
 8007b62:	f000 fdeb 	bl	800873c <memcpy>
			CDC_RX_DATA_PENDING = 1;
 8007b66:	4b23      	ldr	r3, [pc, #140]	; (8007bf4 <CDC_Receive_FS+0x1dc>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	701a      	strb	r2, [r3, #0]
			rxLen = 0;
 8007b6c:	4b1d      	ldr	r3, [pc, #116]	; (8007be4 <CDC_Receive_FS+0x1cc>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	e00c      	b.n	8007b8e <CDC_Receive_FS+0x176>
		}
		/* Else only copy data */
		else
		{
			RX_Buf_Temp[rxLen++] = Buf[i];
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	441a      	add	r2, r3
 8007b7a:	4b1a      	ldr	r3, [pc, #104]	; (8007be4 <CDC_Receive_FS+0x1cc>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	1c59      	adds	r1, r3, #1
 8007b80:	b2c8      	uxtb	r0, r1
 8007b82:	4918      	ldr	r1, [pc, #96]	; (8007be4 <CDC_Receive_FS+0x1cc>)
 8007b84:	7008      	strb	r0, [r1, #0]
 8007b86:	4619      	mov	r1, r3
 8007b88:	7812      	ldrb	r2, [r2, #0]
 8007b8a:	4b18      	ldr	r3, [pc, #96]	; (8007bec <CDC_Receive_FS+0x1d4>)
 8007b8c:	545a      	strb	r2, [r3, r1]
	for (uint8_t i = 0; i < (*Len); i++)
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	3301      	adds	r3, #1
 8007b92:	73fb      	strb	r3, [r7, #15]
 8007b94:	7bfa      	ldrb	r2, [r7, #15]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	f4ff af61 	bcc.w	8007a62 <CDC_Receive_FS+0x4a>
		}
	}

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007ba6:	480c      	ldr	r0, [pc, #48]	; (8007bd8 <CDC_Receive_FS+0x1c0>)
 8007ba8:	f7fa f902 	bl	8001db0 <HAL_GPIO_WritePin>
	/* Send result to terminal */
	if ((result = CDC_Transmit_FS(UserTxBufferFS, txLen)) == USBD_OK)
 8007bac:	4b0c      	ldr	r3, [pc, #48]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	480c      	ldr	r0, [pc, #48]	; (8007be8 <CDC_Receive_FS+0x1d0>)
 8007bb6:	f000 f81f 	bl	8007bf8 <CDC_Transmit_FS>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73bb      	strb	r3, [r7, #14]
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d102      	bne.n	8007bca <CDC_Receive_FS+0x1b2>
	{
		txLen = 0;
 8007bc4:	4b06      	ldr	r3, [pc, #24]	; (8007be0 <CDC_Receive_FS+0x1c8>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8007bca:	f997 300e 	ldrsb.w	r3, [r7, #14]
  /* USER CODE END 6 */
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	40020c00 	.word	0x40020c00
 8007bdc:	20008510 	.word	0x20008510
 8007be0:	20000373 	.word	0x20000373
 8007be4:	20000374 	.word	0x20000374
 8007be8:	20008860 	.word	0x20008860
 8007bec:	20000378 	.word	0x20000378
 8007bf0:	200087e0 	.word	0x200087e0
 8007bf4:	20000372 	.word	0x20000372

08007bf8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8007c08:	4b0d      	ldr	r3, [pc, #52]	; (8007c40 <CDC_Transmit_FS+0x48>)
 8007c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c0e:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0U)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e00b      	b.n	8007c36 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007c1e:	887b      	ldrh	r3, [r7, #2]
 8007c20:	461a      	mov	r2, r3
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	4806      	ldr	r0, [pc, #24]	; (8007c40 <CDC_Transmit_FS+0x48>)
 8007c26:	f7fe fca2 	bl	800656e <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007c2a:	4805      	ldr	r0, [pc, #20]	; (8007c40 <CDC_Transmit_FS+0x48>)
 8007c2c:	f7fe fccc 	bl	80065c8 <USBD_CDC_TransmitPacket>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20008510 	.word	0x20008510

08007c44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
	...

08007c68 <CDC_Printf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_Printf(const char *format, ...)
{
 8007c68:	b40f      	push	{r0, r1, r2, r3}
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
	if (HOST_PORT_COM_OPEN)
 8007c70:	4b17      	ldr	r3, [pc, #92]	; (8007cd0 <CDC_Printf+0x68>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d024      	beq.n	8007cc2 <CDC_Printf+0x5a>
	{
		va_list arg;
		va_start(arg, format);
 8007c78:	f107 0314 	add.w	r3, r7, #20
 8007c7c:	607b      	str	r3, [r7, #4]
		vsprintf((char*) UserTxBufferFS, format, arg);
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6939      	ldr	r1, [r7, #16]
 8007c82:	4814      	ldr	r0, [pc, #80]	; (8007cd4 <CDC_Printf+0x6c>)
 8007c84:	f000 fe3c 	bl	8008900 <vsiprintf>
		va_end(arg);
		while(CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY && HOST_PORT_COM_OPEN)
 8007c88:	e005      	b.n	8007c96 <CDC_Printf+0x2e>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007c90:	4811      	ldr	r0, [pc, #68]	; (8007cd8 <CDC_Printf+0x70>)
 8007c92:	f7fa f88d 	bl	8001db0 <HAL_GPIO_WritePin>
		while(CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY && HOST_PORT_COM_OPEN)
 8007c96:	480f      	ldr	r0, [pc, #60]	; (8007cd4 <CDC_Printf+0x6c>)
 8007c98:	f7f8 faa4 	bl	80001e4 <strlen>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	480c      	ldr	r0, [pc, #48]	; (8007cd4 <CDC_Printf+0x6c>)
 8007ca4:	f7ff ffa8 	bl	8007bf8 <CDC_Transmit_FS>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d103      	bne.n	8007cb6 <CDC_Printf+0x4e>
 8007cae:	4b08      	ldr	r3, [pc, #32]	; (8007cd0 <CDC_Printf+0x68>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e9      	bne.n	8007c8a <CDC_Printf+0x22>
		}
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007cbc:	4806      	ldr	r0, [pc, #24]	; (8007cd8 <CDC_Printf+0x70>)
 8007cbe:	f7fa f877 	bl	8001db0 <HAL_GPIO_WritePin>
	}
}
 8007cc2:	bf00      	nop
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ccc:	b004      	add	sp, #16
 8007cce:	4770      	bx	lr
 8007cd0:	20000371 	.word	0x20000371
 8007cd4:	20008860 	.word	0x20008860
 8007cd8:	40020c00 	.word	0x40020c00

08007cdc <CDC_Scanf>:

void CDC_Scanf(const char *format, ...)
{
 8007cdc:	b40f      	push	{r0, r1, r2, r3}
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	af00      	add	r7, sp, #0
	while (!CDC_RX_DATA_PENDING && HOST_PORT_COM_OPEN)
 8007ce4:	bf00      	nop
 8007ce6:	4b10      	ldr	r3, [pc, #64]	; (8007d28 <CDC_Scanf+0x4c>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	f083 0301 	eor.w	r3, r3, #1
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <CDC_Scanf+0x20>
 8007cf4:	4b0d      	ldr	r3, [pc, #52]	; (8007d2c <CDC_Scanf+0x50>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1f4      	bne.n	8007ce6 <CDC_Scanf+0xa>
	{
	}
	if (CDC_RX_DATA_PENDING)
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <CDC_Scanf+0x4c>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <CDC_Scanf+0x3e>
	{
		va_list arg;
		va_start(arg, format);
 8007d04:	f107 0314 	add.w	r3, r7, #20
 8007d08:	607b      	str	r3, [r7, #4]
		vsscanf((char*) UserRxBufferFS, format, arg);
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	6939      	ldr	r1, [r7, #16]
 8007d0e:	4808      	ldr	r0, [pc, #32]	; (8007d30 <CDC_Scanf+0x54>)
 8007d10:	f000 fe24 	bl	800895c <vsiscanf>
		va_end(arg);
		CDC_RX_DATA_PENDING = 0;
 8007d14:	4b04      	ldr	r3, [pc, #16]	; (8007d28 <CDC_Scanf+0x4c>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
	}
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d24:	b004      	add	sp, #16
 8007d26:	4770      	bx	lr
 8007d28:	20000372 	.word	0x20000372
 8007d2c:	20000371 	.word	0x20000371
 8007d30:	200087e0 	.word	0x200087e0

08007d34 <CDC_Spin>:

void CDC_Spin(const char *format, ...)
{
 8007d34:	b40f      	push	{r0, r1, r2, r3}
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b0a4      	sub	sp, #144	; 0x90
 8007d3a:	af00      	add	r7, sp, #0
	if (HOST_PORT_COM_OPEN)
 8007d3c:	4b1f      	ldr	r3, [pc, #124]	; (8007dbc <CDC_Spin+0x88>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d034      	beq.n	8007dae <CDC_Spin+0x7a>
	{
		static uint8_t i;
		char w[5] = "-\\|/";
 8007d44:	4a1e      	ldr	r2, [pc, #120]	; (8007dc0 <CDC_Spin+0x8c>)
 8007d46:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d4e:	6018      	str	r0, [r3, #0]
 8007d50:	3304      	adds	r3, #4
 8007d52:	7019      	strb	r1, [r3, #0]
		char str[APP_TX_DATA_SIZE];
		va_list arg;
		va_start(arg, format);
 8007d54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		vsprintf(str, format, arg);
 8007d5c:	1d3b      	adds	r3, r7, #4
 8007d5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007d62:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fdca 	bl	8008900 <vsiprintf>
		va_end(arg);
		CDC_Printf("\r[ %c%c ] %s ", w[i], w[i], str);
 8007d6c:	4b15      	ldr	r3, [pc, #84]	; (8007dc4 <CDC_Spin+0x90>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007d74:	4413      	add	r3, r2
 8007d76:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <CDC_Spin+0x90>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8007d84:	4413      	add	r3, r2
 8007d86:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	1d3b      	adds	r3, r7, #4
 8007d8e:	480e      	ldr	r0, [pc, #56]	; (8007dc8 <CDC_Spin+0x94>)
 8007d90:	f7ff ff6a 	bl	8007c68 <CDC_Printf>
		i++;
 8007d94:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <CDC_Spin+0x90>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	4b09      	ldr	r3, [pc, #36]	; (8007dc4 <CDC_Spin+0x90>)
 8007d9e:	701a      	strb	r2, [r3, #0]
		i = i%4;
 8007da0:	4b08      	ldr	r3, [pc, #32]	; (8007dc4 <CDC_Spin+0x90>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	f003 0303 	and.w	r3, r3, #3
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <CDC_Spin+0x90>)
 8007dac:	701a      	strb	r2, [r3, #0]
	}
}
 8007dae:	bf00      	nop
 8007db0:	3790      	adds	r7, #144	; 0x90
 8007db2:	46bd      	mov	sp, r7
 8007db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007db8:	b004      	add	sp, #16
 8007dba:	4770      	bx	lr
 8007dbc:	20000371 	.word	0x20000371
 8007dc0:	08009a34 	.word	0x08009a34
 8007dc4:	200003f8 	.word	0x200003f8
 8007dc8:	08009a24 	.word	0x08009a24

08007dcc <CDC_Clear>:

void CDC_Clear(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
	while(CDC_Transmit_FS((uint8_t *)"\033[2J", 4) == USBD_BUSY && HOST_PORT_COM_OPEN)
 8007dd0:	e005      	b.n	8007dde <CDC_Clear+0x12>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007dd8:	480a      	ldr	r0, [pc, #40]	; (8007e04 <CDC_Clear+0x38>)
 8007dda:	f7f9 ffe9 	bl	8001db0 <HAL_GPIO_WritePin>
	while(CDC_Transmit_FS((uint8_t *)"\033[2J", 4) == USBD_BUSY && HOST_PORT_COM_OPEN)
 8007dde:	2104      	movs	r1, #4
 8007de0:	4809      	ldr	r0, [pc, #36]	; (8007e08 <CDC_Clear+0x3c>)
 8007de2:	f7ff ff09 	bl	8007bf8 <CDC_Transmit_FS>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d103      	bne.n	8007df4 <CDC_Clear+0x28>
 8007dec:	4b07      	ldr	r3, [pc, #28]	; (8007e0c <CDC_Clear+0x40>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1ee      	bne.n	8007dd2 <CDC_Clear+0x6>
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007df4:	2200      	movs	r2, #0
 8007df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007dfa:	4802      	ldr	r0, [pc, #8]	; (8007e04 <CDC_Clear+0x38>)
 8007dfc:	f7f9 ffd8 	bl	8001db0 <HAL_GPIO_WritePin>
}
 8007e00:	bf00      	nop
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	40020c00 	.word	0x40020c00
 8007e08:	08009a3c 	.word	0x08009a3c
 8007e0c:	20000371 	.word	0x20000371

08007e10 <CDC_Move>:
{
	CDC_Printf("\033[%d;%dH", y, x);
}

void CDC_Move(int16_t x, int16_t y)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	460a      	mov	r2, r1
 8007e1a:	80fb      	strh	r3, [r7, #6]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	80bb      	strh	r3, [r7, #4]
		if (x < 0)
 8007e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	da09      	bge.n	8007e3c <CDC_Move+0x2c>
		{
			CDC_Printf("\033[%dD", abs(x));
 8007e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bfb8      	it	lt
 8007e30:	425b      	neglt	r3, r3
 8007e32:	4619      	mov	r1, r3
 8007e34:	4814      	ldr	r0, [pc, #80]	; (8007e88 <CDC_Move+0x78>)
 8007e36:	f7ff ff17 	bl	8007c68 <CDC_Printf>
 8007e3a:	e009      	b.n	8007e50 <CDC_Move+0x40>
		}
		else if (x > 0)
 8007e3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dd05      	ble.n	8007e50 <CDC_Move+0x40>
		{
			CDC_Printf("\033[%dC", x);
 8007e44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	4810      	ldr	r0, [pc, #64]	; (8007e8c <CDC_Move+0x7c>)
 8007e4c:	f7ff ff0c 	bl	8007c68 <CDC_Printf>
		}

		if (y < 0)
 8007e50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	da09      	bge.n	8007e6c <CDC_Move+0x5c>
		{
			CDC_Printf("\033[%dA", abs(y));
 8007e58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bfb8      	it	lt
 8007e60:	425b      	neglt	r3, r3
 8007e62:	4619      	mov	r1, r3
 8007e64:	480a      	ldr	r0, [pc, #40]	; (8007e90 <CDC_Move+0x80>)
 8007e66:	f7ff feff 	bl	8007c68 <CDC_Printf>
		}
		else if (y > 0)
		{
			CDC_Printf("\033[%dB", y);
		}
}
 8007e6a:	e009      	b.n	8007e80 <CDC_Move+0x70>
		else if (y > 0)
 8007e6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	dd05      	ble.n	8007e80 <CDC_Move+0x70>
			CDC_Printf("\033[%dB", y);
 8007e74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4806      	ldr	r0, [pc, #24]	; (8007e94 <CDC_Move+0x84>)
 8007e7c:	f7ff fef4 	bl	8007c68 <CDC_Printf>
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	08009a50 	.word	0x08009a50
 8007e8c:	08009a58 	.word	0x08009a58
 8007e90:	08009a60 	.word	0x08009a60
 8007e94:	08009a68 	.word	0x08009a68

08007e98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	6039      	str	r1, [r7, #0]
 8007ea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2212      	movs	r2, #18
 8007ea8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007eaa:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	2000014c 	.word	0x2000014c

08007ebc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	6039      	str	r1, [r7, #0]
 8007ec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2204      	movs	r2, #4
 8007ecc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ece:	4b03      	ldr	r3, [pc, #12]	; (8007edc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	20000160 	.word	0x20000160

08007ee0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	6039      	str	r1, [r7, #0]
 8007eea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d105      	bne.n	8007efe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	4907      	ldr	r1, [pc, #28]	; (8007f14 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ef6:	4808      	ldr	r0, [pc, #32]	; (8007f18 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ef8:	f7ff fbe5 	bl	80076c6 <USBD_GetString>
 8007efc:	e004      	b.n	8007f08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	4904      	ldr	r1, [pc, #16]	; (8007f14 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f02:	4805      	ldr	r0, [pc, #20]	; (8007f18 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f04:	f7ff fbdf 	bl	80076c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f08:	4b02      	ldr	r3, [pc, #8]	; (8007f14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	200088e0 	.word	0x200088e0
 8007f18:	08009a70 	.word	0x08009a70

08007f1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	4603      	mov	r3, r0
 8007f24:	6039      	str	r1, [r7, #0]
 8007f26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	4904      	ldr	r1, [pc, #16]	; (8007f3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f2c:	4804      	ldr	r0, [pc, #16]	; (8007f40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f2e:	f7ff fbca 	bl	80076c6 <USBD_GetString>
  return USBD_StrDesc;
 8007f32:	4b02      	ldr	r3, [pc, #8]	; (8007f3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	200088e0 	.word	0x200088e0
 8007f40:	08009a88 	.word	0x08009a88

08007f44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	6039      	str	r1, [r7, #0]
 8007f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	221a      	movs	r2, #26
 8007f54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f56:	f000 f843 	bl	8007fe0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f5a:	4b02      	ldr	r3, [pc, #8]	; (8007f64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000164 	.word	0x20000164

08007f68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	6039      	str	r1, [r7, #0]
 8007f72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d105      	bne.n	8007f86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	4907      	ldr	r1, [pc, #28]	; (8007f9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f7e:	4808      	ldr	r0, [pc, #32]	; (8007fa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f80:	f7ff fba1 	bl	80076c6 <USBD_GetString>
 8007f84:	e004      	b.n	8007f90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	4904      	ldr	r1, [pc, #16]	; (8007f9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f8a:	4805      	ldr	r0, [pc, #20]	; (8007fa0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f8c:	f7ff fb9b 	bl	80076c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f90:	4b02      	ldr	r3, [pc, #8]	; (8007f9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	200088e0 	.word	0x200088e0
 8007fa0:	08009a9c 	.word	0x08009a9c

08007fa4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	4603      	mov	r3, r0
 8007fac:	6039      	str	r1, [r7, #0]
 8007fae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fb0:	79fb      	ldrb	r3, [r7, #7]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d105      	bne.n	8007fc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	4907      	ldr	r1, [pc, #28]	; (8007fd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fba:	4808      	ldr	r0, [pc, #32]	; (8007fdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fbc:	f7ff fb83 	bl	80076c6 <USBD_GetString>
 8007fc0:	e004      	b.n	8007fcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	4904      	ldr	r1, [pc, #16]	; (8007fd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fc6:	4805      	ldr	r0, [pc, #20]	; (8007fdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fc8:	f7ff fb7d 	bl	80076c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fcc:	4b02      	ldr	r3, [pc, #8]	; (8007fd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	200088e0 	.word	0x200088e0
 8007fdc:	08009aa8 	.word	0x08009aa8

08007fe0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fe6:	4b0f      	ldr	r3, [pc, #60]	; (8008024 <Get_SerialNum+0x44>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fec:	4b0e      	ldr	r3, [pc, #56]	; (8008028 <Get_SerialNum+0x48>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ff2:	4b0e      	ldr	r3, [pc, #56]	; (800802c <Get_SerialNum+0x4c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d009      	beq.n	800801a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008006:	2208      	movs	r2, #8
 8008008:	4909      	ldr	r1, [pc, #36]	; (8008030 <Get_SerialNum+0x50>)
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 f814 	bl	8008038 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008010:	2204      	movs	r2, #4
 8008012:	4908      	ldr	r1, [pc, #32]	; (8008034 <Get_SerialNum+0x54>)
 8008014:	68b8      	ldr	r0, [r7, #8]
 8008016:	f000 f80f 	bl	8008038 <IntToUnicode>
  }
}
 800801a:	bf00      	nop
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	1fff7a10 	.word	0x1fff7a10
 8008028:	1fff7a14 	.word	0x1fff7a14
 800802c:	1fff7a18 	.word	0x1fff7a18
 8008030:	20000166 	.word	0x20000166
 8008034:	20000176 	.word	0x20000176

08008038 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	4613      	mov	r3, r2
 8008044:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008046:	2300      	movs	r3, #0
 8008048:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]
 800804e:	e027      	b.n	80080a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	0f1b      	lsrs	r3, r3, #28
 8008054:	2b09      	cmp	r3, #9
 8008056:	d80b      	bhi.n	8008070 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	0f1b      	lsrs	r3, r3, #28
 800805c:	b2da      	uxtb	r2, r3
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	4619      	mov	r1, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	440b      	add	r3, r1
 8008068:	3230      	adds	r2, #48	; 0x30
 800806a:	b2d2      	uxtb	r2, r2
 800806c:	701a      	strb	r2, [r3, #0]
 800806e:	e00a      	b.n	8008086 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	0f1b      	lsrs	r3, r3, #28
 8008074:	b2da      	uxtb	r2, r3
 8008076:	7dfb      	ldrb	r3, [r7, #23]
 8008078:	005b      	lsls	r3, r3, #1
 800807a:	4619      	mov	r1, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	440b      	add	r3, r1
 8008080:	3237      	adds	r2, #55	; 0x37
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	011b      	lsls	r3, r3, #4
 800808a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	3301      	adds	r3, #1
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	4413      	add	r3, r2
 8008096:	2200      	movs	r2, #0
 8008098:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	3301      	adds	r3, #1
 800809e:	75fb      	strb	r3, [r7, #23]
 80080a0:	7dfa      	ldrb	r2, [r7, #23]
 80080a2:	79fb      	ldrb	r3, [r7, #7]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d3d3      	bcc.n	8008050 <IntToUnicode+0x18>
  }
}
 80080a8:	bf00      	nop
 80080aa:	371c      	adds	r7, #28
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08a      	sub	sp, #40	; 0x28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080bc:	f107 0314 	add.w	r3, r7, #20
 80080c0:	2200      	movs	r2, #0
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	605a      	str	r2, [r3, #4]
 80080c6:	609a      	str	r2, [r3, #8]
 80080c8:	60da      	str	r2, [r3, #12]
 80080ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080d4:	d147      	bne.n	8008166 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080d6:	2300      	movs	r3, #0
 80080d8:	613b      	str	r3, [r7, #16]
 80080da:	4b25      	ldr	r3, [pc, #148]	; (8008170 <HAL_PCD_MspInit+0xbc>)
 80080dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080de:	4a24      	ldr	r2, [pc, #144]	; (8008170 <HAL_PCD_MspInit+0xbc>)
 80080e0:	f043 0301 	orr.w	r3, r3, #1
 80080e4:	6313      	str	r3, [r2, #48]	; 0x30
 80080e6:	4b22      	ldr	r3, [pc, #136]	; (8008170 <HAL_PCD_MspInit+0xbc>)
 80080e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	613b      	str	r3, [r7, #16]
 80080f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80080f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080f8:	2300      	movs	r3, #0
 80080fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008100:	f107 0314 	add.w	r3, r7, #20
 8008104:	4619      	mov	r1, r3
 8008106:	481b      	ldr	r0, [pc, #108]	; (8008174 <HAL_PCD_MspInit+0xc0>)
 8008108:	f7f9 fca0 	bl	8001a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800810c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008112:	2302      	movs	r3, #2
 8008114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008116:	2300      	movs	r3, #0
 8008118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800811a:	2300      	movs	r3, #0
 800811c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800811e:	230a      	movs	r3, #10
 8008120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008122:	f107 0314 	add.w	r3, r7, #20
 8008126:	4619      	mov	r1, r3
 8008128:	4812      	ldr	r0, [pc, #72]	; (8008174 <HAL_PCD_MspInit+0xc0>)
 800812a:	f7f9 fc8f 	bl	8001a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800812e:	4b10      	ldr	r3, [pc, #64]	; (8008170 <HAL_PCD_MspInit+0xbc>)
 8008130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008132:	4a0f      	ldr	r2, [pc, #60]	; (8008170 <HAL_PCD_MspInit+0xbc>)
 8008134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008138:	6353      	str	r3, [r2, #52]	; 0x34
 800813a:	2300      	movs	r3, #0
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <HAL_PCD_MspInit+0xbc>)
 8008140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008142:	4a0b      	ldr	r2, [pc, #44]	; (8008170 <HAL_PCD_MspInit+0xbc>)
 8008144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008148:	6453      	str	r3, [r2, #68]	; 0x44
 800814a:	4b09      	ldr	r3, [pc, #36]	; (8008170 <HAL_PCD_MspInit+0xbc>)
 800814c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008156:	2200      	movs	r2, #0
 8008158:	2100      	movs	r1, #0
 800815a:	2043      	movs	r0, #67	; 0x43
 800815c:	f7f9 f8d1 	bl	8001302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008160:	2043      	movs	r0, #67	; 0x43
 8008162:	f7f9 f8ea 	bl	800133a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008166:	bf00      	nop
 8008168:	3728      	adds	r7, #40	; 0x28
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	40023800 	.word	0x40023800
 8008174:	40020000 	.word	0x40020000

08008178 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800818c:	4619      	mov	r1, r3
 800818e:	4610      	mov	r0, r2
 8008190:	f7fe fb16 	bl	80067c0 <USBD_LL_SetupStage>
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80081ae:	78fa      	ldrb	r2, [r7, #3]
 80081b0:	6879      	ldr	r1, [r7, #4]
 80081b2:	4613      	mov	r3, r2
 80081b4:	00db      	lsls	r3, r3, #3
 80081b6:	1a9b      	subs	r3, r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	440b      	add	r3, r1
 80081bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	78fb      	ldrb	r3, [r7, #3]
 80081c4:	4619      	mov	r1, r3
 80081c6:	f7fe fb4e 	bl	8006866 <USBD_LL_DataOutStage>
}
 80081ca:	bf00      	nop
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	460b      	mov	r3, r1
 80081dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	1a9b      	subs	r3, r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	3348      	adds	r3, #72	; 0x48
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	4619      	mov	r1, r3
 80081fa:	f7fe fb97 	bl	800692c <USBD_LL_DataInStage>
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008214:	4618      	mov	r0, r3
 8008216:	f7fe fc9b 	bl	8006b50 <USBD_LL_SOF>
}
 800821a:	bf00      	nop
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800822a:	2301      	movs	r3, #1
 800822c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d102      	bne.n	800823c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008236:	2300      	movs	r3, #0
 8008238:	73fb      	strb	r3, [r7, #15]
 800823a:	e008      	b.n	800824e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	2b02      	cmp	r3, #2
 8008242:	d102      	bne.n	800824a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008244:	2301      	movs	r3, #1
 8008246:	73fb      	strb	r3, [r7, #15]
 8008248:	e001      	b.n	800824e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800824a:	f7f8 fd11 	bl	8000c70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008254:	7bfa      	ldrb	r2, [r7, #15]
 8008256:	4611      	mov	r1, r2
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe fc3e 	bl	8006ada <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008264:	4618      	mov	r0, r3
 8008266:	f7fe fbf7 	bl	8006a58 <USBD_LL_Reset>
}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008274 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008282:	4618      	mov	r0, r3
 8008284:	f7fe fc39 	bl	8006afa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	6812      	ldr	r2, [r2, #0]
 8008296:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d005      	beq.n	80082b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082a8:	4b04      	ldr	r3, [pc, #16]	; (80082bc <HAL_PCD_SuspendCallback+0x48>)
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	4a03      	ldr	r2, [pc, #12]	; (80082bc <HAL_PCD_SuspendCallback+0x48>)
 80082ae:	f043 0306 	orr.w	r3, r3, #6
 80082b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	e000ed00 	.word	0xe000ed00

080082c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe fc28 	bl	8006b24 <USBD_LL_Resume>
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80082ee:	78fa      	ldrb	r2, [r7, #3]
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe fc53 	bl	8006b9e <USBD_LL_IsoOUTIncomplete>
}
 80082f8:	bf00      	nop
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008312:	78fa      	ldrb	r2, [r7, #3]
 8008314:	4611      	mov	r1, r2
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fc34 	bl	8006b84 <USBD_LL_IsoINIncomplete>
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008332:	4618      	mov	r0, r3
 8008334:	f7fe fc40 	bl	8006bb8 <USBD_LL_DevConnected>
}
 8008338:	bf00      	nop
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fc3d 	bl	8006bce <USBD_LL_DevDisconnected>
}
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d13c      	bne.n	80083e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800836c:	4a20      	ldr	r2, [pc, #128]	; (80083f0 <USBD_LL_Init+0x94>)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a1e      	ldr	r2, [pc, #120]	; (80083f0 <USBD_LL_Init+0x94>)
 8008378:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800837c:	4b1c      	ldr	r3, [pc, #112]	; (80083f0 <USBD_LL_Init+0x94>)
 800837e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008382:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008384:	4b1a      	ldr	r3, [pc, #104]	; (80083f0 <USBD_LL_Init+0x94>)
 8008386:	2204      	movs	r2, #4
 8008388:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800838a:	4b19      	ldr	r3, [pc, #100]	; (80083f0 <USBD_LL_Init+0x94>)
 800838c:	2202      	movs	r2, #2
 800838e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008390:	4b17      	ldr	r3, [pc, #92]	; (80083f0 <USBD_LL_Init+0x94>)
 8008392:	2200      	movs	r2, #0
 8008394:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008396:	4b16      	ldr	r3, [pc, #88]	; (80083f0 <USBD_LL_Init+0x94>)
 8008398:	2202      	movs	r2, #2
 800839a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800839c:	4b14      	ldr	r3, [pc, #80]	; (80083f0 <USBD_LL_Init+0x94>)
 800839e:	2200      	movs	r2, #0
 80083a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <USBD_LL_Init+0x94>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80083a8:	4b11      	ldr	r3, [pc, #68]	; (80083f0 <USBD_LL_Init+0x94>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80083ae:	4b10      	ldr	r3, [pc, #64]	; (80083f0 <USBD_LL_Init+0x94>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083b4:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <USBD_LL_Init+0x94>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083ba:	480d      	ldr	r0, [pc, #52]	; (80083f0 <USBD_LL_Init+0x94>)
 80083bc:	f7fa fc36 	bl	8002c2c <HAL_PCD_Init>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80083c6:	f7f8 fc53 	bl	8000c70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083ca:	2180      	movs	r1, #128	; 0x80
 80083cc:	4808      	ldr	r0, [pc, #32]	; (80083f0 <USBD_LL_Init+0x94>)
 80083ce:	f7fb fd94 	bl	8003efa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083d2:	2240      	movs	r2, #64	; 0x40
 80083d4:	2100      	movs	r1, #0
 80083d6:	4806      	ldr	r0, [pc, #24]	; (80083f0 <USBD_LL_Init+0x94>)
 80083d8:	f7fb fd48 	bl	8003e6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083dc:	2280      	movs	r2, #128	; 0x80
 80083de:	2101      	movs	r1, #1
 80083e0:	4803      	ldr	r0, [pc, #12]	; (80083f0 <USBD_LL_Init+0x94>)
 80083e2:	f7fb fd43 	bl	8003e6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20008ae0 	.word	0x20008ae0

080083f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800840a:	4618      	mov	r0, r3
 800840c:	f7fa fd2b 	bl	8002e66 <HAL_PCD_Start>
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	4618      	mov	r0, r3
 8008418:	f000 f92a 	bl	8008670 <USBD_Get_USB_Status>
 800841c:	4603      	mov	r3, r0
 800841e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008420:	7bbb      	ldrb	r3, [r7, #14]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	4608      	mov	r0, r1
 8008434:	4611      	mov	r1, r2
 8008436:	461a      	mov	r2, r3
 8008438:	4603      	mov	r3, r0
 800843a:	70fb      	strb	r3, [r7, #3]
 800843c:	460b      	mov	r3, r1
 800843e:	70bb      	strb	r3, [r7, #2]
 8008440:	4613      	mov	r3, r2
 8008442:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008452:	78bb      	ldrb	r3, [r7, #2]
 8008454:	883a      	ldrh	r2, [r7, #0]
 8008456:	78f9      	ldrb	r1, [r7, #3]
 8008458:	f7fb f90f 	bl	800367a <HAL_PCD_EP_Open>
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008460:	7bfb      	ldrb	r3, [r7, #15]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 f904 	bl	8008670 <USBD_Get_USB_Status>
 8008468:	4603      	mov	r3, r0
 800846a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800846c:	7bbb      	ldrb	r3, [r7, #14]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	460b      	mov	r3, r1
 8008480:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008490:	78fa      	ldrb	r2, [r7, #3]
 8008492:	4611      	mov	r1, r2
 8008494:	4618      	mov	r0, r3
 8008496:	f7fb f958 	bl	800374a <HAL_PCD_EP_Close>
 800849a:	4603      	mov	r3, r0
 800849c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800849e:	7bfb      	ldrb	r3, [r7, #15]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 f8e5 	bl	8008670 <USBD_Get_USB_Status>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084ce:	78fa      	ldrb	r2, [r7, #3]
 80084d0:	4611      	mov	r1, r2
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fb fa30 	bl	8003938 <HAL_PCD_EP_SetStall>
 80084d8:	4603      	mov	r3, r0
 80084da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 f8c6 	bl	8008670 <USBD_Get_USB_Status>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800850c:	78fa      	ldrb	r2, [r7, #3]
 800850e:	4611      	mov	r1, r2
 8008510:	4618      	mov	r0, r3
 8008512:	f7fb fa75 	bl	8003a00 <HAL_PCD_EP_ClrStall>
 8008516:	4603      	mov	r3, r0
 8008518:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f8a7 	bl	8008670 <USBD_Get_USB_Status>
 8008522:	4603      	mov	r3, r0
 8008524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008526:	7bbb      	ldrb	r3, [r7, #14]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008542:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008548:	2b00      	cmp	r3, #0
 800854a:	da0b      	bge.n	8008564 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800854c:	78fb      	ldrb	r3, [r7, #3]
 800854e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008552:	68f9      	ldr	r1, [r7, #12]
 8008554:	4613      	mov	r3, r2
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	1a9b      	subs	r3, r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	440b      	add	r3, r1
 800855e:	333e      	adds	r3, #62	; 0x3e
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	e00b      	b.n	800857c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	4613      	mov	r3, r2
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	1a9b      	subs	r3, r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	440b      	add	r3, r1
 8008576:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800857a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085a2:	78fa      	ldrb	r2, [r7, #3]
 80085a4:	4611      	mov	r1, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fb f842 	bl	8003630 <HAL_PCD_SetAddress>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 f85c 	bl	8008670 <USBD_Get_USB_Status>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b086      	sub	sp, #24
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	603b      	str	r3, [r7, #0]
 80085d2:	460b      	mov	r3, r1
 80085d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80085e4:	7af9      	ldrb	r1, [r7, #11]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	f7fb f95b 	bl	80038a4 <HAL_PCD_EP_Transmit>
 80085ee:	4603      	mov	r3, r0
 80085f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f2:	7dfb      	ldrb	r3, [r7, #23]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 f83b 	bl	8008670 <USBD_Get_USB_Status>
 80085fa:	4603      	mov	r3, r0
 80085fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	603b      	str	r3, [r7, #0]
 8008614:	460b      	mov	r3, r1
 8008616:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008626:	7af9      	ldrb	r1, [r7, #11]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	f7fb f8d7 	bl	80037de <HAL_PCD_EP_Receive>
 8008630:	4603      	mov	r3, r0
 8008632:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008634:	7dfb      	ldrb	r3, [r7, #23]
 8008636:	4618      	mov	r0, r3
 8008638:	f000 f81a 	bl	8008670 <USBD_Get_USB_Status>
 800863c:	4603      	mov	r3, r0
 800863e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008640:	7dbb      	ldrb	r3, [r7, #22]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b082      	sub	sp, #8
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	460b      	mov	r3, r1
 8008654:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800865c:	78fa      	ldrb	r2, [r7, #3]
 800865e:	4611      	mov	r1, r2
 8008660:	4618      	mov	r0, r3
 8008662:	f7fb f907 	bl	8003874 <HAL_PCD_EP_GetRxCount>
 8008666:	4603      	mov	r3, r0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	2b03      	cmp	r3, #3
 8008682:	d817      	bhi.n	80086b4 <USBD_Get_USB_Status+0x44>
 8008684:	a201      	add	r2, pc, #4	; (adr r2, 800868c <USBD_Get_USB_Status+0x1c>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	0800869d 	.word	0x0800869d
 8008690:	080086a3 	.word	0x080086a3
 8008694:	080086a9 	.word	0x080086a9
 8008698:	080086af 	.word	0x080086af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73fb      	strb	r3, [r7, #15]
    break;
 80086a0:	e00b      	b.n	80086ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086a2:	2303      	movs	r3, #3
 80086a4:	73fb      	strb	r3, [r7, #15]
    break;
 80086a6:	e008      	b.n	80086ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
    break;
 80086ac:	e005      	b.n	80086ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086ae:	2303      	movs	r3, #3
 80086b0:	73fb      	strb	r3, [r7, #15]
    break;
 80086b2:	e002      	b.n	80086ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086b4:	2303      	movs	r3, #3
 80086b6:	73fb      	strb	r3, [r7, #15]
    break;
 80086b8:	bf00      	nop
  }
  return usb_status;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <__errno>:
 80086c8:	4b01      	ldr	r3, [pc, #4]	; (80086d0 <__errno+0x8>)
 80086ca:	6818      	ldr	r0, [r3, #0]
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	20000180 	.word	0x20000180

080086d4 <__libc_init_array>:
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	4e0d      	ldr	r6, [pc, #52]	; (800870c <__libc_init_array+0x38>)
 80086d8:	4c0d      	ldr	r4, [pc, #52]	; (8008710 <__libc_init_array+0x3c>)
 80086da:	1ba4      	subs	r4, r4, r6
 80086dc:	10a4      	asrs	r4, r4, #2
 80086de:	2500      	movs	r5, #0
 80086e0:	42a5      	cmp	r5, r4
 80086e2:	d109      	bne.n	80086f8 <__libc_init_array+0x24>
 80086e4:	4e0b      	ldr	r6, [pc, #44]	; (8008714 <__libc_init_array+0x40>)
 80086e6:	4c0c      	ldr	r4, [pc, #48]	; (8008718 <__libc_init_array+0x44>)
 80086e8:	f001 f920 	bl	800992c <_init>
 80086ec:	1ba4      	subs	r4, r4, r6
 80086ee:	10a4      	asrs	r4, r4, #2
 80086f0:	2500      	movs	r5, #0
 80086f2:	42a5      	cmp	r5, r4
 80086f4:	d105      	bne.n	8008702 <__libc_init_array+0x2e>
 80086f6:	bd70      	pop	{r4, r5, r6, pc}
 80086f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086fc:	4798      	blx	r3
 80086fe:	3501      	adds	r5, #1
 8008700:	e7ee      	b.n	80086e0 <__libc_init_array+0xc>
 8008702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008706:	4798      	blx	r3
 8008708:	3501      	adds	r5, #1
 800870a:	e7f2      	b.n	80086f2 <__libc_init_array+0x1e>
 800870c:	08009ca0 	.word	0x08009ca0
 8008710:	08009ca0 	.word	0x08009ca0
 8008714:	08009ca0 	.word	0x08009ca0
 8008718:	08009ca4 	.word	0x08009ca4

0800871c <malloc>:
 800871c:	4b02      	ldr	r3, [pc, #8]	; (8008728 <malloc+0xc>)
 800871e:	4601      	mov	r1, r0
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	f000 b86d 	b.w	8008800 <_malloc_r>
 8008726:	bf00      	nop
 8008728:	20000180 	.word	0x20000180

0800872c <free>:
 800872c:	4b02      	ldr	r3, [pc, #8]	; (8008738 <free+0xc>)
 800872e:	4601      	mov	r1, r0
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	f000 b817 	b.w	8008764 <_free_r>
 8008736:	bf00      	nop
 8008738:	20000180 	.word	0x20000180

0800873c <memcpy>:
 800873c:	b510      	push	{r4, lr}
 800873e:	1e43      	subs	r3, r0, #1
 8008740:	440a      	add	r2, r1
 8008742:	4291      	cmp	r1, r2
 8008744:	d100      	bne.n	8008748 <memcpy+0xc>
 8008746:	bd10      	pop	{r4, pc}
 8008748:	f811 4b01 	ldrb.w	r4, [r1], #1
 800874c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008750:	e7f7      	b.n	8008742 <memcpy+0x6>

08008752 <memset>:
 8008752:	4402      	add	r2, r0
 8008754:	4603      	mov	r3, r0
 8008756:	4293      	cmp	r3, r2
 8008758:	d100      	bne.n	800875c <memset+0xa>
 800875a:	4770      	bx	lr
 800875c:	f803 1b01 	strb.w	r1, [r3], #1
 8008760:	e7f9      	b.n	8008756 <memset+0x4>
	...

08008764 <_free_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4605      	mov	r5, r0
 8008768:	2900      	cmp	r1, #0
 800876a:	d045      	beq.n	80087f8 <_free_r+0x94>
 800876c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008770:	1f0c      	subs	r4, r1, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	bfb8      	it	lt
 8008776:	18e4      	addlt	r4, r4, r3
 8008778:	f000 f8fa 	bl	8008970 <__malloc_lock>
 800877c:	4a1f      	ldr	r2, [pc, #124]	; (80087fc <_free_r+0x98>)
 800877e:	6813      	ldr	r3, [r2, #0]
 8008780:	4610      	mov	r0, r2
 8008782:	b933      	cbnz	r3, 8008792 <_free_r+0x2e>
 8008784:	6063      	str	r3, [r4, #4]
 8008786:	6014      	str	r4, [r2, #0]
 8008788:	4628      	mov	r0, r5
 800878a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800878e:	f000 b8f0 	b.w	8008972 <__malloc_unlock>
 8008792:	42a3      	cmp	r3, r4
 8008794:	d90c      	bls.n	80087b0 <_free_r+0x4c>
 8008796:	6821      	ldr	r1, [r4, #0]
 8008798:	1862      	adds	r2, r4, r1
 800879a:	4293      	cmp	r3, r2
 800879c:	bf04      	itt	eq
 800879e:	681a      	ldreq	r2, [r3, #0]
 80087a0:	685b      	ldreq	r3, [r3, #4]
 80087a2:	6063      	str	r3, [r4, #4]
 80087a4:	bf04      	itt	eq
 80087a6:	1852      	addeq	r2, r2, r1
 80087a8:	6022      	streq	r2, [r4, #0]
 80087aa:	6004      	str	r4, [r0, #0]
 80087ac:	e7ec      	b.n	8008788 <_free_r+0x24>
 80087ae:	4613      	mov	r3, r2
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	b10a      	cbz	r2, 80087b8 <_free_r+0x54>
 80087b4:	42a2      	cmp	r2, r4
 80087b6:	d9fa      	bls.n	80087ae <_free_r+0x4a>
 80087b8:	6819      	ldr	r1, [r3, #0]
 80087ba:	1858      	adds	r0, r3, r1
 80087bc:	42a0      	cmp	r0, r4
 80087be:	d10b      	bne.n	80087d8 <_free_r+0x74>
 80087c0:	6820      	ldr	r0, [r4, #0]
 80087c2:	4401      	add	r1, r0
 80087c4:	1858      	adds	r0, r3, r1
 80087c6:	4282      	cmp	r2, r0
 80087c8:	6019      	str	r1, [r3, #0]
 80087ca:	d1dd      	bne.n	8008788 <_free_r+0x24>
 80087cc:	6810      	ldr	r0, [r2, #0]
 80087ce:	6852      	ldr	r2, [r2, #4]
 80087d0:	605a      	str	r2, [r3, #4]
 80087d2:	4401      	add	r1, r0
 80087d4:	6019      	str	r1, [r3, #0]
 80087d6:	e7d7      	b.n	8008788 <_free_r+0x24>
 80087d8:	d902      	bls.n	80087e0 <_free_r+0x7c>
 80087da:	230c      	movs	r3, #12
 80087dc:	602b      	str	r3, [r5, #0]
 80087de:	e7d3      	b.n	8008788 <_free_r+0x24>
 80087e0:	6820      	ldr	r0, [r4, #0]
 80087e2:	1821      	adds	r1, r4, r0
 80087e4:	428a      	cmp	r2, r1
 80087e6:	bf04      	itt	eq
 80087e8:	6811      	ldreq	r1, [r2, #0]
 80087ea:	6852      	ldreq	r2, [r2, #4]
 80087ec:	6062      	str	r2, [r4, #4]
 80087ee:	bf04      	itt	eq
 80087f0:	1809      	addeq	r1, r1, r0
 80087f2:	6021      	streq	r1, [r4, #0]
 80087f4:	605c      	str	r4, [r3, #4]
 80087f6:	e7c7      	b.n	8008788 <_free_r+0x24>
 80087f8:	bd38      	pop	{r3, r4, r5, pc}
 80087fa:	bf00      	nop
 80087fc:	200003fc 	.word	0x200003fc

08008800 <_malloc_r>:
 8008800:	b570      	push	{r4, r5, r6, lr}
 8008802:	1ccd      	adds	r5, r1, #3
 8008804:	f025 0503 	bic.w	r5, r5, #3
 8008808:	3508      	adds	r5, #8
 800880a:	2d0c      	cmp	r5, #12
 800880c:	bf38      	it	cc
 800880e:	250c      	movcc	r5, #12
 8008810:	2d00      	cmp	r5, #0
 8008812:	4606      	mov	r6, r0
 8008814:	db01      	blt.n	800881a <_malloc_r+0x1a>
 8008816:	42a9      	cmp	r1, r5
 8008818:	d903      	bls.n	8008822 <_malloc_r+0x22>
 800881a:	230c      	movs	r3, #12
 800881c:	6033      	str	r3, [r6, #0]
 800881e:	2000      	movs	r0, #0
 8008820:	bd70      	pop	{r4, r5, r6, pc}
 8008822:	f000 f8a5 	bl	8008970 <__malloc_lock>
 8008826:	4a21      	ldr	r2, [pc, #132]	; (80088ac <_malloc_r+0xac>)
 8008828:	6814      	ldr	r4, [r2, #0]
 800882a:	4621      	mov	r1, r4
 800882c:	b991      	cbnz	r1, 8008854 <_malloc_r+0x54>
 800882e:	4c20      	ldr	r4, [pc, #128]	; (80088b0 <_malloc_r+0xb0>)
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	b91b      	cbnz	r3, 800883c <_malloc_r+0x3c>
 8008834:	4630      	mov	r0, r6
 8008836:	f000 f83d 	bl	80088b4 <_sbrk_r>
 800883a:	6020      	str	r0, [r4, #0]
 800883c:	4629      	mov	r1, r5
 800883e:	4630      	mov	r0, r6
 8008840:	f000 f838 	bl	80088b4 <_sbrk_r>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d124      	bne.n	8008892 <_malloc_r+0x92>
 8008848:	230c      	movs	r3, #12
 800884a:	6033      	str	r3, [r6, #0]
 800884c:	4630      	mov	r0, r6
 800884e:	f000 f890 	bl	8008972 <__malloc_unlock>
 8008852:	e7e4      	b.n	800881e <_malloc_r+0x1e>
 8008854:	680b      	ldr	r3, [r1, #0]
 8008856:	1b5b      	subs	r3, r3, r5
 8008858:	d418      	bmi.n	800888c <_malloc_r+0x8c>
 800885a:	2b0b      	cmp	r3, #11
 800885c:	d90f      	bls.n	800887e <_malloc_r+0x7e>
 800885e:	600b      	str	r3, [r1, #0]
 8008860:	50cd      	str	r5, [r1, r3]
 8008862:	18cc      	adds	r4, r1, r3
 8008864:	4630      	mov	r0, r6
 8008866:	f000 f884 	bl	8008972 <__malloc_unlock>
 800886a:	f104 000b 	add.w	r0, r4, #11
 800886e:	1d23      	adds	r3, r4, #4
 8008870:	f020 0007 	bic.w	r0, r0, #7
 8008874:	1ac3      	subs	r3, r0, r3
 8008876:	d0d3      	beq.n	8008820 <_malloc_r+0x20>
 8008878:	425a      	negs	r2, r3
 800887a:	50e2      	str	r2, [r4, r3]
 800887c:	e7d0      	b.n	8008820 <_malloc_r+0x20>
 800887e:	428c      	cmp	r4, r1
 8008880:	684b      	ldr	r3, [r1, #4]
 8008882:	bf16      	itet	ne
 8008884:	6063      	strne	r3, [r4, #4]
 8008886:	6013      	streq	r3, [r2, #0]
 8008888:	460c      	movne	r4, r1
 800888a:	e7eb      	b.n	8008864 <_malloc_r+0x64>
 800888c:	460c      	mov	r4, r1
 800888e:	6849      	ldr	r1, [r1, #4]
 8008890:	e7cc      	b.n	800882c <_malloc_r+0x2c>
 8008892:	1cc4      	adds	r4, r0, #3
 8008894:	f024 0403 	bic.w	r4, r4, #3
 8008898:	42a0      	cmp	r0, r4
 800889a:	d005      	beq.n	80088a8 <_malloc_r+0xa8>
 800889c:	1a21      	subs	r1, r4, r0
 800889e:	4630      	mov	r0, r6
 80088a0:	f000 f808 	bl	80088b4 <_sbrk_r>
 80088a4:	3001      	adds	r0, #1
 80088a6:	d0cf      	beq.n	8008848 <_malloc_r+0x48>
 80088a8:	6025      	str	r5, [r4, #0]
 80088aa:	e7db      	b.n	8008864 <_malloc_r+0x64>
 80088ac:	200003fc 	.word	0x200003fc
 80088b0:	20000400 	.word	0x20000400

080088b4 <_sbrk_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4c06      	ldr	r4, [pc, #24]	; (80088d0 <_sbrk_r+0x1c>)
 80088b8:	2300      	movs	r3, #0
 80088ba:	4605      	mov	r5, r0
 80088bc:	4608      	mov	r0, r1
 80088be:	6023      	str	r3, [r4, #0]
 80088c0:	f7f8 fb3a 	bl	8000f38 <_sbrk>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_sbrk_r+0x1a>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_sbrk_r+0x1a>
 80088cc:	602b      	str	r3, [r5, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	20008ee8 	.word	0x20008ee8

080088d4 <_vsiprintf_r>:
 80088d4:	b500      	push	{lr}
 80088d6:	b09b      	sub	sp, #108	; 0x6c
 80088d8:	9100      	str	r1, [sp, #0]
 80088da:	9104      	str	r1, [sp, #16]
 80088dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088e0:	9105      	str	r1, [sp, #20]
 80088e2:	9102      	str	r1, [sp, #8]
 80088e4:	4905      	ldr	r1, [pc, #20]	; (80088fc <_vsiprintf_r+0x28>)
 80088e6:	9103      	str	r1, [sp, #12]
 80088e8:	4669      	mov	r1, sp
 80088ea:	f000 f89d 	bl	8008a28 <_svfiprintf_r>
 80088ee:	9b00      	ldr	r3, [sp, #0]
 80088f0:	2200      	movs	r2, #0
 80088f2:	701a      	strb	r2, [r3, #0]
 80088f4:	b01b      	add	sp, #108	; 0x6c
 80088f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80088fa:	bf00      	nop
 80088fc:	ffff0208 	.word	0xffff0208

08008900 <vsiprintf>:
 8008900:	4613      	mov	r3, r2
 8008902:	460a      	mov	r2, r1
 8008904:	4601      	mov	r1, r0
 8008906:	4802      	ldr	r0, [pc, #8]	; (8008910 <vsiprintf+0x10>)
 8008908:	6800      	ldr	r0, [r0, #0]
 800890a:	f7ff bfe3 	b.w	80088d4 <_vsiprintf_r>
 800890e:	bf00      	nop
 8008910:	20000180 	.word	0x20000180

08008914 <_vsiscanf_r>:
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	b09a      	sub	sp, #104	; 0x68
 8008918:	4604      	mov	r4, r0
 800891a:	461e      	mov	r6, r3
 800891c:	4608      	mov	r0, r1
 800891e:	f44f 7301 	mov.w	r3, #516	; 0x204
 8008922:	4615      	mov	r5, r2
 8008924:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008928:	9100      	str	r1, [sp, #0]
 800892a:	9104      	str	r1, [sp, #16]
 800892c:	f7f7 fc5a 	bl	80001e4 <strlen>
 8008930:	4b09      	ldr	r3, [pc, #36]	; (8008958 <_vsiscanf_r+0x44>)
 8008932:	9309      	str	r3, [sp, #36]	; 0x24
 8008934:	2100      	movs	r1, #0
 8008936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800893a:	9001      	str	r0, [sp, #4]
 800893c:	9005      	str	r0, [sp, #20]
 800893e:	910d      	str	r1, [sp, #52]	; 0x34
 8008940:	9112      	str	r1, [sp, #72]	; 0x48
 8008942:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008946:	462a      	mov	r2, r5
 8008948:	4633      	mov	r3, r6
 800894a:	4669      	mov	r1, sp
 800894c:	4620      	mov	r0, r4
 800894e:	f000 f9bd 	bl	8008ccc <__ssvfiscanf_r>
 8008952:	b01a      	add	sp, #104	; 0x68
 8008954:	bd70      	pop	{r4, r5, r6, pc}
 8008956:	bf00      	nop
 8008958:	08009591 	.word	0x08009591

0800895c <vsiscanf>:
 800895c:	4613      	mov	r3, r2
 800895e:	460a      	mov	r2, r1
 8008960:	4601      	mov	r1, r0
 8008962:	4802      	ldr	r0, [pc, #8]	; (800896c <vsiscanf+0x10>)
 8008964:	6800      	ldr	r0, [r0, #0]
 8008966:	f7ff bfd5 	b.w	8008914 <_vsiscanf_r>
 800896a:	bf00      	nop
 800896c:	20000180 	.word	0x20000180

08008970 <__malloc_lock>:
 8008970:	4770      	bx	lr

08008972 <__malloc_unlock>:
 8008972:	4770      	bx	lr

08008974 <__ssputs_r>:
 8008974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008978:	688e      	ldr	r6, [r1, #8]
 800897a:	429e      	cmp	r6, r3
 800897c:	4682      	mov	sl, r0
 800897e:	460c      	mov	r4, r1
 8008980:	4690      	mov	r8, r2
 8008982:	4699      	mov	r9, r3
 8008984:	d837      	bhi.n	80089f6 <__ssputs_r+0x82>
 8008986:	898a      	ldrh	r2, [r1, #12]
 8008988:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800898c:	d031      	beq.n	80089f2 <__ssputs_r+0x7e>
 800898e:	6825      	ldr	r5, [r4, #0]
 8008990:	6909      	ldr	r1, [r1, #16]
 8008992:	1a6f      	subs	r7, r5, r1
 8008994:	6965      	ldr	r5, [r4, #20]
 8008996:	2302      	movs	r3, #2
 8008998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800899c:	fb95 f5f3 	sdiv	r5, r5, r3
 80089a0:	f109 0301 	add.w	r3, r9, #1
 80089a4:	443b      	add	r3, r7
 80089a6:	429d      	cmp	r5, r3
 80089a8:	bf38      	it	cc
 80089aa:	461d      	movcc	r5, r3
 80089ac:	0553      	lsls	r3, r2, #21
 80089ae:	d530      	bpl.n	8008a12 <__ssputs_r+0x9e>
 80089b0:	4629      	mov	r1, r5
 80089b2:	f7ff ff25 	bl	8008800 <_malloc_r>
 80089b6:	4606      	mov	r6, r0
 80089b8:	b950      	cbnz	r0, 80089d0 <__ssputs_r+0x5c>
 80089ba:	230c      	movs	r3, #12
 80089bc:	f8ca 3000 	str.w	r3, [sl]
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d0:	463a      	mov	r2, r7
 80089d2:	6921      	ldr	r1, [r4, #16]
 80089d4:	f7ff feb2 	bl	800873c <memcpy>
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e2:	81a3      	strh	r3, [r4, #12]
 80089e4:	6126      	str	r6, [r4, #16]
 80089e6:	6165      	str	r5, [r4, #20]
 80089e8:	443e      	add	r6, r7
 80089ea:	1bed      	subs	r5, r5, r7
 80089ec:	6026      	str	r6, [r4, #0]
 80089ee:	60a5      	str	r5, [r4, #8]
 80089f0:	464e      	mov	r6, r9
 80089f2:	454e      	cmp	r6, r9
 80089f4:	d900      	bls.n	80089f8 <__ssputs_r+0x84>
 80089f6:	464e      	mov	r6, r9
 80089f8:	4632      	mov	r2, r6
 80089fa:	4641      	mov	r1, r8
 80089fc:	6820      	ldr	r0, [r4, #0]
 80089fe:	f000 ff41 	bl	8009884 <memmove>
 8008a02:	68a3      	ldr	r3, [r4, #8]
 8008a04:	1b9b      	subs	r3, r3, r6
 8008a06:	60a3      	str	r3, [r4, #8]
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	441e      	add	r6, r3
 8008a0c:	6026      	str	r6, [r4, #0]
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e7dc      	b.n	80089cc <__ssputs_r+0x58>
 8008a12:	462a      	mov	r2, r5
 8008a14:	f000 ff4f 	bl	80098b6 <_realloc_r>
 8008a18:	4606      	mov	r6, r0
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	d1e2      	bne.n	80089e4 <__ssputs_r+0x70>
 8008a1e:	6921      	ldr	r1, [r4, #16]
 8008a20:	4650      	mov	r0, sl
 8008a22:	f7ff fe9f 	bl	8008764 <_free_r>
 8008a26:	e7c8      	b.n	80089ba <__ssputs_r+0x46>

08008a28 <_svfiprintf_r>:
 8008a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2c:	461d      	mov	r5, r3
 8008a2e:	898b      	ldrh	r3, [r1, #12]
 8008a30:	061f      	lsls	r7, r3, #24
 8008a32:	b09d      	sub	sp, #116	; 0x74
 8008a34:	4680      	mov	r8, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	4616      	mov	r6, r2
 8008a3a:	d50f      	bpl.n	8008a5c <_svfiprintf_r+0x34>
 8008a3c:	690b      	ldr	r3, [r1, #16]
 8008a3e:	b96b      	cbnz	r3, 8008a5c <_svfiprintf_r+0x34>
 8008a40:	2140      	movs	r1, #64	; 0x40
 8008a42:	f7ff fedd 	bl	8008800 <_malloc_r>
 8008a46:	6020      	str	r0, [r4, #0]
 8008a48:	6120      	str	r0, [r4, #16]
 8008a4a:	b928      	cbnz	r0, 8008a58 <_svfiprintf_r+0x30>
 8008a4c:	230c      	movs	r3, #12
 8008a4e:	f8c8 3000 	str.w	r3, [r8]
 8008a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a56:	e0c8      	b.n	8008bea <_svfiprintf_r+0x1c2>
 8008a58:	2340      	movs	r3, #64	; 0x40
 8008a5a:	6163      	str	r3, [r4, #20]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a60:	2320      	movs	r3, #32
 8008a62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a66:	2330      	movs	r3, #48	; 0x30
 8008a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a6c:	9503      	str	r5, [sp, #12]
 8008a6e:	f04f 0b01 	mov.w	fp, #1
 8008a72:	4637      	mov	r7, r6
 8008a74:	463d      	mov	r5, r7
 8008a76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a7a:	b10b      	cbz	r3, 8008a80 <_svfiprintf_r+0x58>
 8008a7c:	2b25      	cmp	r3, #37	; 0x25
 8008a7e:	d13e      	bne.n	8008afe <_svfiprintf_r+0xd6>
 8008a80:	ebb7 0a06 	subs.w	sl, r7, r6
 8008a84:	d00b      	beq.n	8008a9e <_svfiprintf_r+0x76>
 8008a86:	4653      	mov	r3, sl
 8008a88:	4632      	mov	r2, r6
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	f7ff ff71 	bl	8008974 <__ssputs_r>
 8008a92:	3001      	adds	r0, #1
 8008a94:	f000 80a4 	beq.w	8008be0 <_svfiprintf_r+0x1b8>
 8008a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a9a:	4453      	add	r3, sl
 8008a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9e:	783b      	ldrb	r3, [r7, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 809d 	beq.w	8008be0 <_svfiprintf_r+0x1b8>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ab0:	9304      	str	r3, [sp, #16]
 8008ab2:	9307      	str	r3, [sp, #28]
 8008ab4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ab8:	931a      	str	r3, [sp, #104]	; 0x68
 8008aba:	462f      	mov	r7, r5
 8008abc:	2205      	movs	r2, #5
 8008abe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008ac2:	4850      	ldr	r0, [pc, #320]	; (8008c04 <_svfiprintf_r+0x1dc>)
 8008ac4:	f7f7 fb9c 	bl	8000200 <memchr>
 8008ac8:	9b04      	ldr	r3, [sp, #16]
 8008aca:	b9d0      	cbnz	r0, 8008b02 <_svfiprintf_r+0xda>
 8008acc:	06d9      	lsls	r1, r3, #27
 8008ace:	bf44      	itt	mi
 8008ad0:	2220      	movmi	r2, #32
 8008ad2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ad6:	071a      	lsls	r2, r3, #28
 8008ad8:	bf44      	itt	mi
 8008ada:	222b      	movmi	r2, #43	; 0x2b
 8008adc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ae0:	782a      	ldrb	r2, [r5, #0]
 8008ae2:	2a2a      	cmp	r2, #42	; 0x2a
 8008ae4:	d015      	beq.n	8008b12 <_svfiprintf_r+0xea>
 8008ae6:	9a07      	ldr	r2, [sp, #28]
 8008ae8:	462f      	mov	r7, r5
 8008aea:	2000      	movs	r0, #0
 8008aec:	250a      	movs	r5, #10
 8008aee:	4639      	mov	r1, r7
 8008af0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008af4:	3b30      	subs	r3, #48	; 0x30
 8008af6:	2b09      	cmp	r3, #9
 8008af8:	d94d      	bls.n	8008b96 <_svfiprintf_r+0x16e>
 8008afa:	b1b8      	cbz	r0, 8008b2c <_svfiprintf_r+0x104>
 8008afc:	e00f      	b.n	8008b1e <_svfiprintf_r+0xf6>
 8008afe:	462f      	mov	r7, r5
 8008b00:	e7b8      	b.n	8008a74 <_svfiprintf_r+0x4c>
 8008b02:	4a40      	ldr	r2, [pc, #256]	; (8008c04 <_svfiprintf_r+0x1dc>)
 8008b04:	1a80      	subs	r0, r0, r2
 8008b06:	fa0b f000 	lsl.w	r0, fp, r0
 8008b0a:	4318      	orrs	r0, r3
 8008b0c:	9004      	str	r0, [sp, #16]
 8008b0e:	463d      	mov	r5, r7
 8008b10:	e7d3      	b.n	8008aba <_svfiprintf_r+0x92>
 8008b12:	9a03      	ldr	r2, [sp, #12]
 8008b14:	1d11      	adds	r1, r2, #4
 8008b16:	6812      	ldr	r2, [r2, #0]
 8008b18:	9103      	str	r1, [sp, #12]
 8008b1a:	2a00      	cmp	r2, #0
 8008b1c:	db01      	blt.n	8008b22 <_svfiprintf_r+0xfa>
 8008b1e:	9207      	str	r2, [sp, #28]
 8008b20:	e004      	b.n	8008b2c <_svfiprintf_r+0x104>
 8008b22:	4252      	negs	r2, r2
 8008b24:	f043 0302 	orr.w	r3, r3, #2
 8008b28:	9207      	str	r2, [sp, #28]
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	783b      	ldrb	r3, [r7, #0]
 8008b2e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b30:	d10c      	bne.n	8008b4c <_svfiprintf_r+0x124>
 8008b32:	787b      	ldrb	r3, [r7, #1]
 8008b34:	2b2a      	cmp	r3, #42	; 0x2a
 8008b36:	d133      	bne.n	8008ba0 <_svfiprintf_r+0x178>
 8008b38:	9b03      	ldr	r3, [sp, #12]
 8008b3a:	1d1a      	adds	r2, r3, #4
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	9203      	str	r2, [sp, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	bfb8      	it	lt
 8008b44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b48:	3702      	adds	r7, #2
 8008b4a:	9305      	str	r3, [sp, #20]
 8008b4c:	4d2e      	ldr	r5, [pc, #184]	; (8008c08 <_svfiprintf_r+0x1e0>)
 8008b4e:	7839      	ldrb	r1, [r7, #0]
 8008b50:	2203      	movs	r2, #3
 8008b52:	4628      	mov	r0, r5
 8008b54:	f7f7 fb54 	bl	8000200 <memchr>
 8008b58:	b138      	cbz	r0, 8008b6a <_svfiprintf_r+0x142>
 8008b5a:	2340      	movs	r3, #64	; 0x40
 8008b5c:	1b40      	subs	r0, r0, r5
 8008b5e:	fa03 f000 	lsl.w	r0, r3, r0
 8008b62:	9b04      	ldr	r3, [sp, #16]
 8008b64:	4303      	orrs	r3, r0
 8008b66:	3701      	adds	r7, #1
 8008b68:	9304      	str	r3, [sp, #16]
 8008b6a:	7839      	ldrb	r1, [r7, #0]
 8008b6c:	4827      	ldr	r0, [pc, #156]	; (8008c0c <_svfiprintf_r+0x1e4>)
 8008b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b72:	2206      	movs	r2, #6
 8008b74:	1c7e      	adds	r6, r7, #1
 8008b76:	f7f7 fb43 	bl	8000200 <memchr>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d038      	beq.n	8008bf0 <_svfiprintf_r+0x1c8>
 8008b7e:	4b24      	ldr	r3, [pc, #144]	; (8008c10 <_svfiprintf_r+0x1e8>)
 8008b80:	bb13      	cbnz	r3, 8008bc8 <_svfiprintf_r+0x1a0>
 8008b82:	9b03      	ldr	r3, [sp, #12]
 8008b84:	3307      	adds	r3, #7
 8008b86:	f023 0307 	bic.w	r3, r3, #7
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	9303      	str	r3, [sp, #12]
 8008b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b90:	444b      	add	r3, r9
 8008b92:	9309      	str	r3, [sp, #36]	; 0x24
 8008b94:	e76d      	b.n	8008a72 <_svfiprintf_r+0x4a>
 8008b96:	fb05 3202 	mla	r2, r5, r2, r3
 8008b9a:	2001      	movs	r0, #1
 8008b9c:	460f      	mov	r7, r1
 8008b9e:	e7a6      	b.n	8008aee <_svfiprintf_r+0xc6>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	3701      	adds	r7, #1
 8008ba4:	9305      	str	r3, [sp, #20]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	250a      	movs	r5, #10
 8008baa:	4638      	mov	r0, r7
 8008bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bb0:	3a30      	subs	r2, #48	; 0x30
 8008bb2:	2a09      	cmp	r2, #9
 8008bb4:	d903      	bls.n	8008bbe <_svfiprintf_r+0x196>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0c8      	beq.n	8008b4c <_svfiprintf_r+0x124>
 8008bba:	9105      	str	r1, [sp, #20]
 8008bbc:	e7c6      	b.n	8008b4c <_svfiprintf_r+0x124>
 8008bbe:	fb05 2101 	mla	r1, r5, r1, r2
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4607      	mov	r7, r0
 8008bc6:	e7f0      	b.n	8008baa <_svfiprintf_r+0x182>
 8008bc8:	ab03      	add	r3, sp, #12
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	4622      	mov	r2, r4
 8008bce:	4b11      	ldr	r3, [pc, #68]	; (8008c14 <_svfiprintf_r+0x1ec>)
 8008bd0:	a904      	add	r1, sp, #16
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	f3af 8000 	nop.w
 8008bd8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008bdc:	4681      	mov	r9, r0
 8008bde:	d1d6      	bne.n	8008b8e <_svfiprintf_r+0x166>
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	065b      	lsls	r3, r3, #25
 8008be4:	f53f af35 	bmi.w	8008a52 <_svfiprintf_r+0x2a>
 8008be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bea:	b01d      	add	sp, #116	; 0x74
 8008bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf0:	ab03      	add	r3, sp, #12
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	4622      	mov	r2, r4
 8008bf6:	4b07      	ldr	r3, [pc, #28]	; (8008c14 <_svfiprintf_r+0x1ec>)
 8008bf8:	a904      	add	r1, sp, #16
 8008bfa:	4640      	mov	r0, r8
 8008bfc:	f000 fa2c 	bl	8009058 <_printf_i>
 8008c00:	e7ea      	b.n	8008bd8 <_svfiprintf_r+0x1b0>
 8008c02:	bf00      	nop
 8008c04:	08009adc 	.word	0x08009adc
 8008c08:	08009ae2 	.word	0x08009ae2
 8008c0c:	08009ae6 	.word	0x08009ae6
 8008c10:	00000000 	.word	0x00000000
 8008c14:	08008975 	.word	0x08008975

08008c18 <_sungetc_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	1c4b      	adds	r3, r1, #1
 8008c1c:	4614      	mov	r4, r2
 8008c1e:	d103      	bne.n	8008c28 <_sungetc_r+0x10>
 8008c20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008c24:	4628      	mov	r0, r5
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	8993      	ldrh	r3, [r2, #12]
 8008c2a:	f023 0320 	bic.w	r3, r3, #32
 8008c2e:	8193      	strh	r3, [r2, #12]
 8008c30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c32:	6852      	ldr	r2, [r2, #4]
 8008c34:	b2cd      	uxtb	r5, r1
 8008c36:	b18b      	cbz	r3, 8008c5c <_sungetc_r+0x44>
 8008c38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	dd08      	ble.n	8008c50 <_sungetc_r+0x38>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	1e5a      	subs	r2, r3, #1
 8008c42:	6022      	str	r2, [r4, #0]
 8008c44:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008c48:	6863      	ldr	r3, [r4, #4]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	6063      	str	r3, [r4, #4]
 8008c4e:	e7e9      	b.n	8008c24 <_sungetc_r+0xc>
 8008c50:	4621      	mov	r1, r4
 8008c52:	f000 fdb9 	bl	80097c8 <__submore>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d0f1      	beq.n	8008c3e <_sungetc_r+0x26>
 8008c5a:	e7e1      	b.n	8008c20 <_sungetc_r+0x8>
 8008c5c:	6921      	ldr	r1, [r4, #16]
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	b151      	cbz	r1, 8008c78 <_sungetc_r+0x60>
 8008c62:	4299      	cmp	r1, r3
 8008c64:	d208      	bcs.n	8008c78 <_sungetc_r+0x60>
 8008c66:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008c6a:	42a9      	cmp	r1, r5
 8008c6c:	d104      	bne.n	8008c78 <_sungetc_r+0x60>
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	3201      	adds	r2, #1
 8008c72:	6023      	str	r3, [r4, #0]
 8008c74:	6062      	str	r2, [r4, #4]
 8008c76:	e7d5      	b.n	8008c24 <_sungetc_r+0xc>
 8008c78:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c80:	6363      	str	r3, [r4, #52]	; 0x34
 8008c82:	2303      	movs	r3, #3
 8008c84:	63a3      	str	r3, [r4, #56]	; 0x38
 8008c86:	4623      	mov	r3, r4
 8008c88:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e7dc      	b.n	8008c4c <_sungetc_r+0x34>

08008c92 <__ssrefill_r>:
 8008c92:	b510      	push	{r4, lr}
 8008c94:	460c      	mov	r4, r1
 8008c96:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008c98:	b169      	cbz	r1, 8008cb6 <__ssrefill_r+0x24>
 8008c9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c9e:	4299      	cmp	r1, r3
 8008ca0:	d001      	beq.n	8008ca6 <__ssrefill_r+0x14>
 8008ca2:	f7ff fd5f 	bl	8008764 <_free_r>
 8008ca6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ca8:	6063      	str	r3, [r4, #4]
 8008caa:	2000      	movs	r0, #0
 8008cac:	6360      	str	r0, [r4, #52]	; 0x34
 8008cae:	b113      	cbz	r3, 8008cb6 <__ssrefill_r+0x24>
 8008cb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008cb2:	6023      	str	r3, [r4, #0]
 8008cb4:	bd10      	pop	{r4, pc}
 8008cb6:	6923      	ldr	r3, [r4, #16]
 8008cb8:	6023      	str	r3, [r4, #0]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	6063      	str	r3, [r4, #4]
 8008cbe:	89a3      	ldrh	r3, [r4, #12]
 8008cc0:	f043 0320 	orr.w	r3, r3, #32
 8008cc4:	81a3      	strh	r3, [r4, #12]
 8008cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cca:	e7f3      	b.n	8008cb4 <__ssrefill_r+0x22>

08008ccc <__ssvfiscanf_r>:
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	9144      	str	r1, [sp, #272]	; 0x110
 8008cda:	9145      	str	r1, [sp, #276]	; 0x114
 8008cdc:	499f      	ldr	r1, [pc, #636]	; (8008f5c <__ssvfiscanf_r+0x290>)
 8008cde:	91a0      	str	r1, [sp, #640]	; 0x280
 8008ce0:	f10d 0804 	add.w	r8, sp, #4
 8008ce4:	499e      	ldr	r1, [pc, #632]	; (8008f60 <__ssvfiscanf_r+0x294>)
 8008ce6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8008f64 <__ssvfiscanf_r+0x298>
 8008cea:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008cee:	4606      	mov	r6, r0
 8008cf0:	4692      	mov	sl, r2
 8008cf2:	91a1      	str	r1, [sp, #644]	; 0x284
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	270a      	movs	r7, #10
 8008cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f000 812a 	beq.w	8008f56 <__ssvfiscanf_r+0x28a>
 8008d02:	4655      	mov	r5, sl
 8008d04:	f000 fd9e 	bl	8009844 <__locale_ctype_ptr>
 8008d08:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008d0c:	4458      	add	r0, fp
 8008d0e:	7843      	ldrb	r3, [r0, #1]
 8008d10:	f013 0308 	ands.w	r3, r3, #8
 8008d14:	d01c      	beq.n	8008d50 <__ssvfiscanf_r+0x84>
 8008d16:	6863      	ldr	r3, [r4, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	dd12      	ble.n	8008d42 <__ssvfiscanf_r+0x76>
 8008d1c:	f000 fd92 	bl	8009844 <__locale_ctype_ptr>
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	781a      	ldrb	r2, [r3, #0]
 8008d24:	4410      	add	r0, r2
 8008d26:	7842      	ldrb	r2, [r0, #1]
 8008d28:	0712      	lsls	r2, r2, #28
 8008d2a:	d401      	bmi.n	8008d30 <__ssvfiscanf_r+0x64>
 8008d2c:	46aa      	mov	sl, r5
 8008d2e:	e7e3      	b.n	8008cf8 <__ssvfiscanf_r+0x2c>
 8008d30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008d32:	3201      	adds	r2, #1
 8008d34:	9245      	str	r2, [sp, #276]	; 0x114
 8008d36:	6862      	ldr	r2, [r4, #4]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	3a01      	subs	r2, #1
 8008d3c:	6062      	str	r2, [r4, #4]
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	e7e9      	b.n	8008d16 <__ssvfiscanf_r+0x4a>
 8008d42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008d44:	4621      	mov	r1, r4
 8008d46:	4630      	mov	r0, r6
 8008d48:	4798      	blx	r3
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d0e6      	beq.n	8008d1c <__ssvfiscanf_r+0x50>
 8008d4e:	e7ed      	b.n	8008d2c <__ssvfiscanf_r+0x60>
 8008d50:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008d54:	f040 8082 	bne.w	8008e5c <__ssvfiscanf_r+0x190>
 8008d58:	9343      	str	r3, [sp, #268]	; 0x10c
 8008d5a:	9341      	str	r3, [sp, #260]	; 0x104
 8008d5c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008d60:	2b2a      	cmp	r3, #42	; 0x2a
 8008d62:	d103      	bne.n	8008d6c <__ssvfiscanf_r+0xa0>
 8008d64:	2310      	movs	r3, #16
 8008d66:	9341      	str	r3, [sp, #260]	; 0x104
 8008d68:	f10a 0502 	add.w	r5, sl, #2
 8008d6c:	46aa      	mov	sl, r5
 8008d6e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008d72:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008d76:	2a09      	cmp	r2, #9
 8008d78:	d922      	bls.n	8008dc0 <__ssvfiscanf_r+0xf4>
 8008d7a:	2203      	movs	r2, #3
 8008d7c:	4879      	ldr	r0, [pc, #484]	; (8008f64 <__ssvfiscanf_r+0x298>)
 8008d7e:	f7f7 fa3f 	bl	8000200 <memchr>
 8008d82:	b138      	cbz	r0, 8008d94 <__ssvfiscanf_r+0xc8>
 8008d84:	eba0 0309 	sub.w	r3, r0, r9
 8008d88:	2001      	movs	r0, #1
 8008d8a:	4098      	lsls	r0, r3
 8008d8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008d8e:	4318      	orrs	r0, r3
 8008d90:	9041      	str	r0, [sp, #260]	; 0x104
 8008d92:	46aa      	mov	sl, r5
 8008d94:	f89a 3000 	ldrb.w	r3, [sl]
 8008d98:	2b67      	cmp	r3, #103	; 0x67
 8008d9a:	f10a 0501 	add.w	r5, sl, #1
 8008d9e:	d82b      	bhi.n	8008df8 <__ssvfiscanf_r+0x12c>
 8008da0:	2b65      	cmp	r3, #101	; 0x65
 8008da2:	f080 809f 	bcs.w	8008ee4 <__ssvfiscanf_r+0x218>
 8008da6:	2b47      	cmp	r3, #71	; 0x47
 8008da8:	d810      	bhi.n	8008dcc <__ssvfiscanf_r+0x100>
 8008daa:	2b45      	cmp	r3, #69	; 0x45
 8008dac:	f080 809a 	bcs.w	8008ee4 <__ssvfiscanf_r+0x218>
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d06c      	beq.n	8008e8e <__ssvfiscanf_r+0x1c2>
 8008db4:	2b25      	cmp	r3, #37	; 0x25
 8008db6:	d051      	beq.n	8008e5c <__ssvfiscanf_r+0x190>
 8008db8:	2303      	movs	r3, #3
 8008dba:	9347      	str	r3, [sp, #284]	; 0x11c
 8008dbc:	9742      	str	r7, [sp, #264]	; 0x108
 8008dbe:	e027      	b.n	8008e10 <__ssvfiscanf_r+0x144>
 8008dc0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008dc2:	fb07 1303 	mla	r3, r7, r3, r1
 8008dc6:	3b30      	subs	r3, #48	; 0x30
 8008dc8:	9343      	str	r3, [sp, #268]	; 0x10c
 8008dca:	e7cf      	b.n	8008d6c <__ssvfiscanf_r+0xa0>
 8008dcc:	2b5b      	cmp	r3, #91	; 0x5b
 8008dce:	d06a      	beq.n	8008ea6 <__ssvfiscanf_r+0x1da>
 8008dd0:	d80c      	bhi.n	8008dec <__ssvfiscanf_r+0x120>
 8008dd2:	2b58      	cmp	r3, #88	; 0x58
 8008dd4:	d1f0      	bne.n	8008db8 <__ssvfiscanf_r+0xec>
 8008dd6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ddc:	9241      	str	r2, [sp, #260]	; 0x104
 8008dde:	2210      	movs	r2, #16
 8008de0:	9242      	str	r2, [sp, #264]	; 0x108
 8008de2:	2b6e      	cmp	r3, #110	; 0x6e
 8008de4:	bf8c      	ite	hi
 8008de6:	2304      	movhi	r3, #4
 8008de8:	2303      	movls	r3, #3
 8008dea:	e010      	b.n	8008e0e <__ssvfiscanf_r+0x142>
 8008dec:	2b63      	cmp	r3, #99	; 0x63
 8008dee:	d065      	beq.n	8008ebc <__ssvfiscanf_r+0x1f0>
 8008df0:	2b64      	cmp	r3, #100	; 0x64
 8008df2:	d1e1      	bne.n	8008db8 <__ssvfiscanf_r+0xec>
 8008df4:	9742      	str	r7, [sp, #264]	; 0x108
 8008df6:	e7f4      	b.n	8008de2 <__ssvfiscanf_r+0x116>
 8008df8:	2b70      	cmp	r3, #112	; 0x70
 8008dfa:	d04b      	beq.n	8008e94 <__ssvfiscanf_r+0x1c8>
 8008dfc:	d826      	bhi.n	8008e4c <__ssvfiscanf_r+0x180>
 8008dfe:	2b6e      	cmp	r3, #110	; 0x6e
 8008e00:	d062      	beq.n	8008ec8 <__ssvfiscanf_r+0x1fc>
 8008e02:	d84c      	bhi.n	8008e9e <__ssvfiscanf_r+0x1d2>
 8008e04:	2b69      	cmp	r3, #105	; 0x69
 8008e06:	d1d7      	bne.n	8008db8 <__ssvfiscanf_r+0xec>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	9342      	str	r3, [sp, #264]	; 0x108
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008e10:	6863      	ldr	r3, [r4, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	dd68      	ble.n	8008ee8 <__ssvfiscanf_r+0x21c>
 8008e16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008e18:	0659      	lsls	r1, r3, #25
 8008e1a:	d407      	bmi.n	8008e2c <__ssvfiscanf_r+0x160>
 8008e1c:	f000 fd12 	bl	8009844 <__locale_ctype_ptr>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	781a      	ldrb	r2, [r3, #0]
 8008e24:	4410      	add	r0, r2
 8008e26:	7842      	ldrb	r2, [r0, #1]
 8008e28:	0712      	lsls	r2, r2, #28
 8008e2a:	d464      	bmi.n	8008ef6 <__ssvfiscanf_r+0x22a>
 8008e2c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	dc73      	bgt.n	8008f1a <__ssvfiscanf_r+0x24e>
 8008e32:	466b      	mov	r3, sp
 8008e34:	4622      	mov	r2, r4
 8008e36:	a941      	add	r1, sp, #260	; 0x104
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f000 fa1f 	bl	800927c <_scanf_chars>
 8008e3e:	2801      	cmp	r0, #1
 8008e40:	f000 8089 	beq.w	8008f56 <__ssvfiscanf_r+0x28a>
 8008e44:	2802      	cmp	r0, #2
 8008e46:	f47f af71 	bne.w	8008d2c <__ssvfiscanf_r+0x60>
 8008e4a:	e01d      	b.n	8008e88 <__ssvfiscanf_r+0x1bc>
 8008e4c:	2b75      	cmp	r3, #117	; 0x75
 8008e4e:	d0d1      	beq.n	8008df4 <__ssvfiscanf_r+0x128>
 8008e50:	2b78      	cmp	r3, #120	; 0x78
 8008e52:	d0c0      	beq.n	8008dd6 <__ssvfiscanf_r+0x10a>
 8008e54:	2b73      	cmp	r3, #115	; 0x73
 8008e56:	d1af      	bne.n	8008db8 <__ssvfiscanf_r+0xec>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	e7d8      	b.n	8008e0e <__ssvfiscanf_r+0x142>
 8008e5c:	6863      	ldr	r3, [r4, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	dd0c      	ble.n	8008e7c <__ssvfiscanf_r+0x1b0>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	781a      	ldrb	r2, [r3, #0]
 8008e66:	455a      	cmp	r2, fp
 8008e68:	d175      	bne.n	8008f56 <__ssvfiscanf_r+0x28a>
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	6862      	ldr	r2, [r4, #4]
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008e72:	3a01      	subs	r2, #1
 8008e74:	3301      	adds	r3, #1
 8008e76:	6062      	str	r2, [r4, #4]
 8008e78:	9345      	str	r3, [sp, #276]	; 0x114
 8008e7a:	e757      	b.n	8008d2c <__ssvfiscanf_r+0x60>
 8008e7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4630      	mov	r0, r6
 8008e82:	4798      	blx	r3
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d0ec      	beq.n	8008e62 <__ssvfiscanf_r+0x196>
 8008e88:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d159      	bne.n	8008f42 <__ssvfiscanf_r+0x276>
 8008e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e92:	e05c      	b.n	8008f4e <__ssvfiscanf_r+0x282>
 8008e94:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008e96:	f042 0220 	orr.w	r2, r2, #32
 8008e9a:	9241      	str	r2, [sp, #260]	; 0x104
 8008e9c:	e79b      	b.n	8008dd6 <__ssvfiscanf_r+0x10a>
 8008e9e:	2308      	movs	r3, #8
 8008ea0:	9342      	str	r3, [sp, #264]	; 0x108
 8008ea2:	2304      	movs	r3, #4
 8008ea4:	e7b3      	b.n	8008e0e <__ssvfiscanf_r+0x142>
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	4640      	mov	r0, r8
 8008eaa:	f000 fb3f 	bl	800952c <__sccl>
 8008eae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb4:	9341      	str	r3, [sp, #260]	; 0x104
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e7a8      	b.n	8008e0e <__ssvfiscanf_r+0x142>
 8008ebc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ec2:	9341      	str	r3, [sp, #260]	; 0x104
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	e7a2      	b.n	8008e0e <__ssvfiscanf_r+0x142>
 8008ec8:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008eca:	06c3      	lsls	r3, r0, #27
 8008ecc:	f53f af2e 	bmi.w	8008d2c <__ssvfiscanf_r+0x60>
 8008ed0:	9b00      	ldr	r3, [sp, #0]
 8008ed2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ed4:	1d19      	adds	r1, r3, #4
 8008ed6:	9100      	str	r1, [sp, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	07c0      	lsls	r0, r0, #31
 8008edc:	bf4c      	ite	mi
 8008ede:	801a      	strhmi	r2, [r3, #0]
 8008ee0:	601a      	strpl	r2, [r3, #0]
 8008ee2:	e723      	b.n	8008d2c <__ssvfiscanf_r+0x60>
 8008ee4:	2305      	movs	r3, #5
 8008ee6:	e792      	b.n	8008e0e <__ssvfiscanf_r+0x142>
 8008ee8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008eea:	4621      	mov	r1, r4
 8008eec:	4630      	mov	r0, r6
 8008eee:	4798      	blx	r3
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d090      	beq.n	8008e16 <__ssvfiscanf_r+0x14a>
 8008ef4:	e7c8      	b.n	8008e88 <__ssvfiscanf_r+0x1bc>
 8008ef6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ef8:	3201      	adds	r2, #1
 8008efa:	9245      	str	r2, [sp, #276]	; 0x114
 8008efc:	6862      	ldr	r2, [r4, #4]
 8008efe:	3a01      	subs	r2, #1
 8008f00:	2a00      	cmp	r2, #0
 8008f02:	6062      	str	r2, [r4, #4]
 8008f04:	dd02      	ble.n	8008f0c <__ssvfiscanf_r+0x240>
 8008f06:	3301      	adds	r3, #1
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	e787      	b.n	8008e1c <__ssvfiscanf_r+0x150>
 8008f0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4630      	mov	r0, r6
 8008f12:	4798      	blx	r3
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d081      	beq.n	8008e1c <__ssvfiscanf_r+0x150>
 8008f18:	e7b6      	b.n	8008e88 <__ssvfiscanf_r+0x1bc>
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	dc06      	bgt.n	8008f2c <__ssvfiscanf_r+0x260>
 8008f1e:	466b      	mov	r3, sp
 8008f20:	4622      	mov	r2, r4
 8008f22:	a941      	add	r1, sp, #260	; 0x104
 8008f24:	4630      	mov	r0, r6
 8008f26:	f000 fa0d 	bl	8009344 <_scanf_i>
 8008f2a:	e788      	b.n	8008e3e <__ssvfiscanf_r+0x172>
 8008f2c:	4b0e      	ldr	r3, [pc, #56]	; (8008f68 <__ssvfiscanf_r+0x29c>)
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f43f aefc 	beq.w	8008d2c <__ssvfiscanf_r+0x60>
 8008f34:	466b      	mov	r3, sp
 8008f36:	4622      	mov	r2, r4
 8008f38:	a941      	add	r1, sp, #260	; 0x104
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f3af 8000 	nop.w
 8008f40:	e77d      	b.n	8008e3e <__ssvfiscanf_r+0x172>
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008f48:	bf18      	it	ne
 8008f4a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008f4e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f56:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008f58:	e7f9      	b.n	8008f4e <__ssvfiscanf_r+0x282>
 8008f5a:	bf00      	nop
 8008f5c:	08008c19 	.word	0x08008c19
 8008f60:	08008c93 	.word	0x08008c93
 8008f64:	08009ae2 	.word	0x08009ae2
 8008f68:	00000000 	.word	0x00000000

08008f6c <_printf_common>:
 8008f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	4691      	mov	r9, r2
 8008f72:	461f      	mov	r7, r3
 8008f74:	688a      	ldr	r2, [r1, #8]
 8008f76:	690b      	ldr	r3, [r1, #16]
 8008f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	bfb8      	it	lt
 8008f80:	4613      	movlt	r3, r2
 8008f82:	f8c9 3000 	str.w	r3, [r9]
 8008f86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	b112      	cbz	r2, 8008f96 <_printf_common+0x2a>
 8008f90:	3301      	adds	r3, #1
 8008f92:	f8c9 3000 	str.w	r3, [r9]
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	0699      	lsls	r1, r3, #26
 8008f9a:	bf42      	ittt	mi
 8008f9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008fa0:	3302      	addmi	r3, #2
 8008fa2:	f8c9 3000 	strmi.w	r3, [r9]
 8008fa6:	6825      	ldr	r5, [r4, #0]
 8008fa8:	f015 0506 	ands.w	r5, r5, #6
 8008fac:	d107      	bne.n	8008fbe <_printf_common+0x52>
 8008fae:	f104 0a19 	add.w	sl, r4, #25
 8008fb2:	68e3      	ldr	r3, [r4, #12]
 8008fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8008fb8:	1a9b      	subs	r3, r3, r2
 8008fba:	42ab      	cmp	r3, r5
 8008fbc:	dc28      	bgt.n	8009010 <_printf_common+0xa4>
 8008fbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008fc2:	6822      	ldr	r2, [r4, #0]
 8008fc4:	3300      	adds	r3, #0
 8008fc6:	bf18      	it	ne
 8008fc8:	2301      	movne	r3, #1
 8008fca:	0692      	lsls	r2, r2, #26
 8008fcc:	d42d      	bmi.n	800902a <_printf_common+0xbe>
 8008fce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fd2:	4639      	mov	r1, r7
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	47c0      	blx	r8
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d020      	beq.n	800901e <_printf_common+0xb2>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	68e5      	ldr	r5, [r4, #12]
 8008fe0:	f8d9 2000 	ldr.w	r2, [r9]
 8008fe4:	f003 0306 	and.w	r3, r3, #6
 8008fe8:	2b04      	cmp	r3, #4
 8008fea:	bf08      	it	eq
 8008fec:	1aad      	subeq	r5, r5, r2
 8008fee:	68a3      	ldr	r3, [r4, #8]
 8008ff0:	6922      	ldr	r2, [r4, #16]
 8008ff2:	bf0c      	ite	eq
 8008ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ff8:	2500      	movne	r5, #0
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	bfc4      	itt	gt
 8008ffe:	1a9b      	subgt	r3, r3, r2
 8009000:	18ed      	addgt	r5, r5, r3
 8009002:	f04f 0900 	mov.w	r9, #0
 8009006:	341a      	adds	r4, #26
 8009008:	454d      	cmp	r5, r9
 800900a:	d11a      	bne.n	8009042 <_printf_common+0xd6>
 800900c:	2000      	movs	r0, #0
 800900e:	e008      	b.n	8009022 <_printf_common+0xb6>
 8009010:	2301      	movs	r3, #1
 8009012:	4652      	mov	r2, sl
 8009014:	4639      	mov	r1, r7
 8009016:	4630      	mov	r0, r6
 8009018:	47c0      	blx	r8
 800901a:	3001      	adds	r0, #1
 800901c:	d103      	bne.n	8009026 <_printf_common+0xba>
 800901e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009026:	3501      	adds	r5, #1
 8009028:	e7c3      	b.n	8008fb2 <_printf_common+0x46>
 800902a:	18e1      	adds	r1, r4, r3
 800902c:	1c5a      	adds	r2, r3, #1
 800902e:	2030      	movs	r0, #48	; 0x30
 8009030:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009034:	4422      	add	r2, r4
 8009036:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800903a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800903e:	3302      	adds	r3, #2
 8009040:	e7c5      	b.n	8008fce <_printf_common+0x62>
 8009042:	2301      	movs	r3, #1
 8009044:	4622      	mov	r2, r4
 8009046:	4639      	mov	r1, r7
 8009048:	4630      	mov	r0, r6
 800904a:	47c0      	blx	r8
 800904c:	3001      	adds	r0, #1
 800904e:	d0e6      	beq.n	800901e <_printf_common+0xb2>
 8009050:	f109 0901 	add.w	r9, r9, #1
 8009054:	e7d8      	b.n	8009008 <_printf_common+0x9c>
	...

08009058 <_printf_i>:
 8009058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800905c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009060:	460c      	mov	r4, r1
 8009062:	7e09      	ldrb	r1, [r1, #24]
 8009064:	b085      	sub	sp, #20
 8009066:	296e      	cmp	r1, #110	; 0x6e
 8009068:	4617      	mov	r7, r2
 800906a:	4606      	mov	r6, r0
 800906c:	4698      	mov	r8, r3
 800906e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009070:	f000 80b3 	beq.w	80091da <_printf_i+0x182>
 8009074:	d822      	bhi.n	80090bc <_printf_i+0x64>
 8009076:	2963      	cmp	r1, #99	; 0x63
 8009078:	d036      	beq.n	80090e8 <_printf_i+0x90>
 800907a:	d80a      	bhi.n	8009092 <_printf_i+0x3a>
 800907c:	2900      	cmp	r1, #0
 800907e:	f000 80b9 	beq.w	80091f4 <_printf_i+0x19c>
 8009082:	2958      	cmp	r1, #88	; 0x58
 8009084:	f000 8083 	beq.w	800918e <_printf_i+0x136>
 8009088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800908c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009090:	e032      	b.n	80090f8 <_printf_i+0xa0>
 8009092:	2964      	cmp	r1, #100	; 0x64
 8009094:	d001      	beq.n	800909a <_printf_i+0x42>
 8009096:	2969      	cmp	r1, #105	; 0x69
 8009098:	d1f6      	bne.n	8009088 <_printf_i+0x30>
 800909a:	6820      	ldr	r0, [r4, #0]
 800909c:	6813      	ldr	r3, [r2, #0]
 800909e:	0605      	lsls	r5, r0, #24
 80090a0:	f103 0104 	add.w	r1, r3, #4
 80090a4:	d52a      	bpl.n	80090fc <_printf_i+0xa4>
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6011      	str	r1, [r2, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	da03      	bge.n	80090b6 <_printf_i+0x5e>
 80090ae:	222d      	movs	r2, #45	; 0x2d
 80090b0:	425b      	negs	r3, r3
 80090b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80090b6:	486f      	ldr	r0, [pc, #444]	; (8009274 <_printf_i+0x21c>)
 80090b8:	220a      	movs	r2, #10
 80090ba:	e039      	b.n	8009130 <_printf_i+0xd8>
 80090bc:	2973      	cmp	r1, #115	; 0x73
 80090be:	f000 809d 	beq.w	80091fc <_printf_i+0x1a4>
 80090c2:	d808      	bhi.n	80090d6 <_printf_i+0x7e>
 80090c4:	296f      	cmp	r1, #111	; 0x6f
 80090c6:	d020      	beq.n	800910a <_printf_i+0xb2>
 80090c8:	2970      	cmp	r1, #112	; 0x70
 80090ca:	d1dd      	bne.n	8009088 <_printf_i+0x30>
 80090cc:	6823      	ldr	r3, [r4, #0]
 80090ce:	f043 0320 	orr.w	r3, r3, #32
 80090d2:	6023      	str	r3, [r4, #0]
 80090d4:	e003      	b.n	80090de <_printf_i+0x86>
 80090d6:	2975      	cmp	r1, #117	; 0x75
 80090d8:	d017      	beq.n	800910a <_printf_i+0xb2>
 80090da:	2978      	cmp	r1, #120	; 0x78
 80090dc:	d1d4      	bne.n	8009088 <_printf_i+0x30>
 80090de:	2378      	movs	r3, #120	; 0x78
 80090e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090e4:	4864      	ldr	r0, [pc, #400]	; (8009278 <_printf_i+0x220>)
 80090e6:	e055      	b.n	8009194 <_printf_i+0x13c>
 80090e8:	6813      	ldr	r3, [r2, #0]
 80090ea:	1d19      	adds	r1, r3, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	6011      	str	r1, [r2, #0]
 80090f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090f8:	2301      	movs	r3, #1
 80090fa:	e08c      	b.n	8009216 <_printf_i+0x1be>
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6011      	str	r1, [r2, #0]
 8009100:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009104:	bf18      	it	ne
 8009106:	b21b      	sxthne	r3, r3
 8009108:	e7cf      	b.n	80090aa <_printf_i+0x52>
 800910a:	6813      	ldr	r3, [r2, #0]
 800910c:	6825      	ldr	r5, [r4, #0]
 800910e:	1d18      	adds	r0, r3, #4
 8009110:	6010      	str	r0, [r2, #0]
 8009112:	0628      	lsls	r0, r5, #24
 8009114:	d501      	bpl.n	800911a <_printf_i+0xc2>
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	e002      	b.n	8009120 <_printf_i+0xc8>
 800911a:	0668      	lsls	r0, r5, #25
 800911c:	d5fb      	bpl.n	8009116 <_printf_i+0xbe>
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	4854      	ldr	r0, [pc, #336]	; (8009274 <_printf_i+0x21c>)
 8009122:	296f      	cmp	r1, #111	; 0x6f
 8009124:	bf14      	ite	ne
 8009126:	220a      	movne	r2, #10
 8009128:	2208      	moveq	r2, #8
 800912a:	2100      	movs	r1, #0
 800912c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009130:	6865      	ldr	r5, [r4, #4]
 8009132:	60a5      	str	r5, [r4, #8]
 8009134:	2d00      	cmp	r5, #0
 8009136:	f2c0 8095 	blt.w	8009264 <_printf_i+0x20c>
 800913a:	6821      	ldr	r1, [r4, #0]
 800913c:	f021 0104 	bic.w	r1, r1, #4
 8009140:	6021      	str	r1, [r4, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d13d      	bne.n	80091c2 <_printf_i+0x16a>
 8009146:	2d00      	cmp	r5, #0
 8009148:	f040 808e 	bne.w	8009268 <_printf_i+0x210>
 800914c:	4665      	mov	r5, ip
 800914e:	2a08      	cmp	r2, #8
 8009150:	d10b      	bne.n	800916a <_printf_i+0x112>
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	07db      	lsls	r3, r3, #31
 8009156:	d508      	bpl.n	800916a <_printf_i+0x112>
 8009158:	6923      	ldr	r3, [r4, #16]
 800915a:	6862      	ldr	r2, [r4, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	bfde      	ittt	le
 8009160:	2330      	movle	r3, #48	; 0x30
 8009162:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009166:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800916a:	ebac 0305 	sub.w	r3, ip, r5
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	f8cd 8000 	str.w	r8, [sp]
 8009174:	463b      	mov	r3, r7
 8009176:	aa03      	add	r2, sp, #12
 8009178:	4621      	mov	r1, r4
 800917a:	4630      	mov	r0, r6
 800917c:	f7ff fef6 	bl	8008f6c <_printf_common>
 8009180:	3001      	adds	r0, #1
 8009182:	d14d      	bne.n	8009220 <_printf_i+0x1c8>
 8009184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009188:	b005      	add	sp, #20
 800918a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800918e:	4839      	ldr	r0, [pc, #228]	; (8009274 <_printf_i+0x21c>)
 8009190:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009194:	6813      	ldr	r3, [r2, #0]
 8009196:	6821      	ldr	r1, [r4, #0]
 8009198:	1d1d      	adds	r5, r3, #4
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6015      	str	r5, [r2, #0]
 800919e:	060a      	lsls	r2, r1, #24
 80091a0:	d50b      	bpl.n	80091ba <_printf_i+0x162>
 80091a2:	07ca      	lsls	r2, r1, #31
 80091a4:	bf44      	itt	mi
 80091a6:	f041 0120 	orrmi.w	r1, r1, #32
 80091aa:	6021      	strmi	r1, [r4, #0]
 80091ac:	b91b      	cbnz	r3, 80091b6 <_printf_i+0x15e>
 80091ae:	6822      	ldr	r2, [r4, #0]
 80091b0:	f022 0220 	bic.w	r2, r2, #32
 80091b4:	6022      	str	r2, [r4, #0]
 80091b6:	2210      	movs	r2, #16
 80091b8:	e7b7      	b.n	800912a <_printf_i+0xd2>
 80091ba:	064d      	lsls	r5, r1, #25
 80091bc:	bf48      	it	mi
 80091be:	b29b      	uxthmi	r3, r3
 80091c0:	e7ef      	b.n	80091a2 <_printf_i+0x14a>
 80091c2:	4665      	mov	r5, ip
 80091c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80091c8:	fb02 3311 	mls	r3, r2, r1, r3
 80091cc:	5cc3      	ldrb	r3, [r0, r3]
 80091ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80091d2:	460b      	mov	r3, r1
 80091d4:	2900      	cmp	r1, #0
 80091d6:	d1f5      	bne.n	80091c4 <_printf_i+0x16c>
 80091d8:	e7b9      	b.n	800914e <_printf_i+0xf6>
 80091da:	6813      	ldr	r3, [r2, #0]
 80091dc:	6825      	ldr	r5, [r4, #0]
 80091de:	6961      	ldr	r1, [r4, #20]
 80091e0:	1d18      	adds	r0, r3, #4
 80091e2:	6010      	str	r0, [r2, #0]
 80091e4:	0628      	lsls	r0, r5, #24
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	d501      	bpl.n	80091ee <_printf_i+0x196>
 80091ea:	6019      	str	r1, [r3, #0]
 80091ec:	e002      	b.n	80091f4 <_printf_i+0x19c>
 80091ee:	066a      	lsls	r2, r5, #25
 80091f0:	d5fb      	bpl.n	80091ea <_printf_i+0x192>
 80091f2:	8019      	strh	r1, [r3, #0]
 80091f4:	2300      	movs	r3, #0
 80091f6:	6123      	str	r3, [r4, #16]
 80091f8:	4665      	mov	r5, ip
 80091fa:	e7b9      	b.n	8009170 <_printf_i+0x118>
 80091fc:	6813      	ldr	r3, [r2, #0]
 80091fe:	1d19      	adds	r1, r3, #4
 8009200:	6011      	str	r1, [r2, #0]
 8009202:	681d      	ldr	r5, [r3, #0]
 8009204:	6862      	ldr	r2, [r4, #4]
 8009206:	2100      	movs	r1, #0
 8009208:	4628      	mov	r0, r5
 800920a:	f7f6 fff9 	bl	8000200 <memchr>
 800920e:	b108      	cbz	r0, 8009214 <_printf_i+0x1bc>
 8009210:	1b40      	subs	r0, r0, r5
 8009212:	6060      	str	r0, [r4, #4]
 8009214:	6863      	ldr	r3, [r4, #4]
 8009216:	6123      	str	r3, [r4, #16]
 8009218:	2300      	movs	r3, #0
 800921a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800921e:	e7a7      	b.n	8009170 <_printf_i+0x118>
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	462a      	mov	r2, r5
 8009224:	4639      	mov	r1, r7
 8009226:	4630      	mov	r0, r6
 8009228:	47c0      	blx	r8
 800922a:	3001      	adds	r0, #1
 800922c:	d0aa      	beq.n	8009184 <_printf_i+0x12c>
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	079b      	lsls	r3, r3, #30
 8009232:	d413      	bmi.n	800925c <_printf_i+0x204>
 8009234:	68e0      	ldr	r0, [r4, #12]
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	4298      	cmp	r0, r3
 800923a:	bfb8      	it	lt
 800923c:	4618      	movlt	r0, r3
 800923e:	e7a3      	b.n	8009188 <_printf_i+0x130>
 8009240:	2301      	movs	r3, #1
 8009242:	464a      	mov	r2, r9
 8009244:	4639      	mov	r1, r7
 8009246:	4630      	mov	r0, r6
 8009248:	47c0      	blx	r8
 800924a:	3001      	adds	r0, #1
 800924c:	d09a      	beq.n	8009184 <_printf_i+0x12c>
 800924e:	3501      	adds	r5, #1
 8009250:	68e3      	ldr	r3, [r4, #12]
 8009252:	9a03      	ldr	r2, [sp, #12]
 8009254:	1a9b      	subs	r3, r3, r2
 8009256:	42ab      	cmp	r3, r5
 8009258:	dcf2      	bgt.n	8009240 <_printf_i+0x1e8>
 800925a:	e7eb      	b.n	8009234 <_printf_i+0x1dc>
 800925c:	2500      	movs	r5, #0
 800925e:	f104 0919 	add.w	r9, r4, #25
 8009262:	e7f5      	b.n	8009250 <_printf_i+0x1f8>
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1ac      	bne.n	80091c2 <_printf_i+0x16a>
 8009268:	7803      	ldrb	r3, [r0, #0]
 800926a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800926e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009272:	e76c      	b.n	800914e <_printf_i+0xf6>
 8009274:	08009aed 	.word	0x08009aed
 8009278:	08009afe 	.word	0x08009afe

0800927c <_scanf_chars>:
 800927c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009280:	4615      	mov	r5, r2
 8009282:	688a      	ldr	r2, [r1, #8]
 8009284:	4680      	mov	r8, r0
 8009286:	460c      	mov	r4, r1
 8009288:	b932      	cbnz	r2, 8009298 <_scanf_chars+0x1c>
 800928a:	698a      	ldr	r2, [r1, #24]
 800928c:	2a00      	cmp	r2, #0
 800928e:	bf14      	ite	ne
 8009290:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8009294:	2201      	moveq	r2, #1
 8009296:	608a      	str	r2, [r1, #8]
 8009298:	6822      	ldr	r2, [r4, #0]
 800929a:	06d1      	lsls	r1, r2, #27
 800929c:	bf5f      	itttt	pl
 800929e:	681a      	ldrpl	r2, [r3, #0]
 80092a0:	1d11      	addpl	r1, r2, #4
 80092a2:	6019      	strpl	r1, [r3, #0]
 80092a4:	6817      	ldrpl	r7, [r2, #0]
 80092a6:	2600      	movs	r6, #0
 80092a8:	69a3      	ldr	r3, [r4, #24]
 80092aa:	b1db      	cbz	r3, 80092e4 <_scanf_chars+0x68>
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d107      	bne.n	80092c0 <_scanf_chars+0x44>
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	6962      	ldr	r2, [r4, #20]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	5cd3      	ldrb	r3, [r2, r3]
 80092b8:	b9a3      	cbnz	r3, 80092e4 <_scanf_chars+0x68>
 80092ba:	2e00      	cmp	r6, #0
 80092bc:	d132      	bne.n	8009324 <_scanf_chars+0xa8>
 80092be:	e006      	b.n	80092ce <_scanf_chars+0x52>
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d007      	beq.n	80092d4 <_scanf_chars+0x58>
 80092c4:	2e00      	cmp	r6, #0
 80092c6:	d12d      	bne.n	8009324 <_scanf_chars+0xa8>
 80092c8:	69a3      	ldr	r3, [r4, #24]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d12a      	bne.n	8009324 <_scanf_chars+0xa8>
 80092ce:	2001      	movs	r0, #1
 80092d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d4:	f000 fab6 	bl	8009844 <__locale_ctype_ptr>
 80092d8:	682b      	ldr	r3, [r5, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	4418      	add	r0, r3
 80092de:	7843      	ldrb	r3, [r0, #1]
 80092e0:	071b      	lsls	r3, r3, #28
 80092e2:	d4ef      	bmi.n	80092c4 <_scanf_chars+0x48>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	06da      	lsls	r2, r3, #27
 80092e8:	bf5e      	ittt	pl
 80092ea:	682b      	ldrpl	r3, [r5, #0]
 80092ec:	781b      	ldrbpl	r3, [r3, #0]
 80092ee:	703b      	strbpl	r3, [r7, #0]
 80092f0:	682a      	ldr	r2, [r5, #0]
 80092f2:	686b      	ldr	r3, [r5, #4]
 80092f4:	f102 0201 	add.w	r2, r2, #1
 80092f8:	602a      	str	r2, [r5, #0]
 80092fa:	68a2      	ldr	r2, [r4, #8]
 80092fc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009300:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009304:	606b      	str	r3, [r5, #4]
 8009306:	f106 0601 	add.w	r6, r6, #1
 800930a:	bf58      	it	pl
 800930c:	3701      	addpl	r7, #1
 800930e:	60a2      	str	r2, [r4, #8]
 8009310:	b142      	cbz	r2, 8009324 <_scanf_chars+0xa8>
 8009312:	2b00      	cmp	r3, #0
 8009314:	dcc8      	bgt.n	80092a8 <_scanf_chars+0x2c>
 8009316:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800931a:	4629      	mov	r1, r5
 800931c:	4640      	mov	r0, r8
 800931e:	4798      	blx	r3
 8009320:	2800      	cmp	r0, #0
 8009322:	d0c1      	beq.n	80092a8 <_scanf_chars+0x2c>
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	f013 0310 	ands.w	r3, r3, #16
 800932a:	d105      	bne.n	8009338 <_scanf_chars+0xbc>
 800932c:	68e2      	ldr	r2, [r4, #12]
 800932e:	3201      	adds	r2, #1
 8009330:	60e2      	str	r2, [r4, #12]
 8009332:	69a2      	ldr	r2, [r4, #24]
 8009334:	b102      	cbz	r2, 8009338 <_scanf_chars+0xbc>
 8009336:	703b      	strb	r3, [r7, #0]
 8009338:	6923      	ldr	r3, [r4, #16]
 800933a:	441e      	add	r6, r3
 800933c:	6126      	str	r6, [r4, #16]
 800933e:	2000      	movs	r0, #0
 8009340:	e7c6      	b.n	80092d0 <_scanf_chars+0x54>
	...

08009344 <_scanf_i>:
 8009344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009348:	469a      	mov	sl, r3
 800934a:	4b74      	ldr	r3, [pc, #464]	; (800951c <_scanf_i+0x1d8>)
 800934c:	460c      	mov	r4, r1
 800934e:	4683      	mov	fp, r0
 8009350:	4616      	mov	r6, r2
 8009352:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009356:	b087      	sub	sp, #28
 8009358:	ab03      	add	r3, sp, #12
 800935a:	68a7      	ldr	r7, [r4, #8]
 800935c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009360:	4b6f      	ldr	r3, [pc, #444]	; (8009520 <_scanf_i+0x1dc>)
 8009362:	69a1      	ldr	r1, [r4, #24]
 8009364:	4a6f      	ldr	r2, [pc, #444]	; (8009524 <_scanf_i+0x1e0>)
 8009366:	2903      	cmp	r1, #3
 8009368:	bf08      	it	eq
 800936a:	461a      	moveq	r2, r3
 800936c:	1e7b      	subs	r3, r7, #1
 800936e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8009372:	bf84      	itt	hi
 8009374:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009378:	60a3      	strhi	r3, [r4, #8]
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	9200      	str	r2, [sp, #0]
 800937e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009382:	bf88      	it	hi
 8009384:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009388:	f104 091c 	add.w	r9, r4, #28
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	bf8c      	ite	hi
 8009390:	197f      	addhi	r7, r7, r5
 8009392:	2700      	movls	r7, #0
 8009394:	464b      	mov	r3, r9
 8009396:	f04f 0800 	mov.w	r8, #0
 800939a:	9301      	str	r3, [sp, #4]
 800939c:	6831      	ldr	r1, [r6, #0]
 800939e:	ab03      	add	r3, sp, #12
 80093a0:	2202      	movs	r2, #2
 80093a2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80093a6:	7809      	ldrb	r1, [r1, #0]
 80093a8:	f7f6 ff2a 	bl	8000200 <memchr>
 80093ac:	9b01      	ldr	r3, [sp, #4]
 80093ae:	b330      	cbz	r0, 80093fe <_scanf_i+0xba>
 80093b0:	f1b8 0f01 	cmp.w	r8, #1
 80093b4:	d15a      	bne.n	800946c <_scanf_i+0x128>
 80093b6:	6862      	ldr	r2, [r4, #4]
 80093b8:	b92a      	cbnz	r2, 80093c6 <_scanf_i+0x82>
 80093ba:	6822      	ldr	r2, [r4, #0]
 80093bc:	2108      	movs	r1, #8
 80093be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093c2:	6061      	str	r1, [r4, #4]
 80093c4:	6022      	str	r2, [r4, #0]
 80093c6:	6822      	ldr	r2, [r4, #0]
 80093c8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80093cc:	6022      	str	r2, [r4, #0]
 80093ce:	68a2      	ldr	r2, [r4, #8]
 80093d0:	1e51      	subs	r1, r2, #1
 80093d2:	60a1      	str	r1, [r4, #8]
 80093d4:	b19a      	cbz	r2, 80093fe <_scanf_i+0xba>
 80093d6:	6832      	ldr	r2, [r6, #0]
 80093d8:	1c51      	adds	r1, r2, #1
 80093da:	6031      	str	r1, [r6, #0]
 80093dc:	7812      	ldrb	r2, [r2, #0]
 80093de:	701a      	strb	r2, [r3, #0]
 80093e0:	1c5d      	adds	r5, r3, #1
 80093e2:	6873      	ldr	r3, [r6, #4]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	6073      	str	r3, [r6, #4]
 80093ea:	dc07      	bgt.n	80093fc <_scanf_i+0xb8>
 80093ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80093f0:	4631      	mov	r1, r6
 80093f2:	4658      	mov	r0, fp
 80093f4:	4798      	blx	r3
 80093f6:	2800      	cmp	r0, #0
 80093f8:	f040 8086 	bne.w	8009508 <_scanf_i+0x1c4>
 80093fc:	462b      	mov	r3, r5
 80093fe:	f108 0801 	add.w	r8, r8, #1
 8009402:	f1b8 0f03 	cmp.w	r8, #3
 8009406:	d1c8      	bne.n	800939a <_scanf_i+0x56>
 8009408:	6862      	ldr	r2, [r4, #4]
 800940a:	b90a      	cbnz	r2, 8009410 <_scanf_i+0xcc>
 800940c:	220a      	movs	r2, #10
 800940e:	6062      	str	r2, [r4, #4]
 8009410:	6862      	ldr	r2, [r4, #4]
 8009412:	4945      	ldr	r1, [pc, #276]	; (8009528 <_scanf_i+0x1e4>)
 8009414:	6960      	ldr	r0, [r4, #20]
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	1a89      	subs	r1, r1, r2
 800941a:	f000 f887 	bl	800952c <__sccl>
 800941e:	9b01      	ldr	r3, [sp, #4]
 8009420:	f04f 0800 	mov.w	r8, #0
 8009424:	461d      	mov	r5, r3
 8009426:	68a3      	ldr	r3, [r4, #8]
 8009428:	6822      	ldr	r2, [r4, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d03a      	beq.n	80094a4 <_scanf_i+0x160>
 800942e:	6831      	ldr	r1, [r6, #0]
 8009430:	6960      	ldr	r0, [r4, #20]
 8009432:	f891 c000 	ldrb.w	ip, [r1]
 8009436:	f810 000c 	ldrb.w	r0, [r0, ip]
 800943a:	2800      	cmp	r0, #0
 800943c:	d032      	beq.n	80094a4 <_scanf_i+0x160>
 800943e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009442:	d121      	bne.n	8009488 <_scanf_i+0x144>
 8009444:	0510      	lsls	r0, r2, #20
 8009446:	d51f      	bpl.n	8009488 <_scanf_i+0x144>
 8009448:	f108 0801 	add.w	r8, r8, #1
 800944c:	b117      	cbz	r7, 8009454 <_scanf_i+0x110>
 800944e:	3301      	adds	r3, #1
 8009450:	3f01      	subs	r7, #1
 8009452:	60a3      	str	r3, [r4, #8]
 8009454:	6873      	ldr	r3, [r6, #4]
 8009456:	3b01      	subs	r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	6073      	str	r3, [r6, #4]
 800945c:	dd1b      	ble.n	8009496 <_scanf_i+0x152>
 800945e:	6833      	ldr	r3, [r6, #0]
 8009460:	3301      	adds	r3, #1
 8009462:	6033      	str	r3, [r6, #0]
 8009464:	68a3      	ldr	r3, [r4, #8]
 8009466:	3b01      	subs	r3, #1
 8009468:	60a3      	str	r3, [r4, #8]
 800946a:	e7dc      	b.n	8009426 <_scanf_i+0xe2>
 800946c:	f1b8 0f02 	cmp.w	r8, #2
 8009470:	d1ad      	bne.n	80093ce <_scanf_i+0x8a>
 8009472:	6822      	ldr	r2, [r4, #0]
 8009474:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009478:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800947c:	d1bf      	bne.n	80093fe <_scanf_i+0xba>
 800947e:	2110      	movs	r1, #16
 8009480:	6061      	str	r1, [r4, #4]
 8009482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009486:	e7a1      	b.n	80093cc <_scanf_i+0x88>
 8009488:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800948c:	6022      	str	r2, [r4, #0]
 800948e:	780b      	ldrb	r3, [r1, #0]
 8009490:	702b      	strb	r3, [r5, #0]
 8009492:	3501      	adds	r5, #1
 8009494:	e7de      	b.n	8009454 <_scanf_i+0x110>
 8009496:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800949a:	4631      	mov	r1, r6
 800949c:	4658      	mov	r0, fp
 800949e:	4798      	blx	r3
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d0df      	beq.n	8009464 <_scanf_i+0x120>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	05d9      	lsls	r1, r3, #23
 80094a8:	d50c      	bpl.n	80094c4 <_scanf_i+0x180>
 80094aa:	454d      	cmp	r5, r9
 80094ac:	d908      	bls.n	80094c0 <_scanf_i+0x17c>
 80094ae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80094b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094b6:	4632      	mov	r2, r6
 80094b8:	4658      	mov	r0, fp
 80094ba:	4798      	blx	r3
 80094bc:	1e6f      	subs	r7, r5, #1
 80094be:	463d      	mov	r5, r7
 80094c0:	454d      	cmp	r5, r9
 80094c2:	d029      	beq.n	8009518 <_scanf_i+0x1d4>
 80094c4:	6822      	ldr	r2, [r4, #0]
 80094c6:	f012 0210 	ands.w	r2, r2, #16
 80094ca:	d113      	bne.n	80094f4 <_scanf_i+0x1b0>
 80094cc:	702a      	strb	r2, [r5, #0]
 80094ce:	6863      	ldr	r3, [r4, #4]
 80094d0:	9e00      	ldr	r6, [sp, #0]
 80094d2:	4649      	mov	r1, r9
 80094d4:	4658      	mov	r0, fp
 80094d6:	47b0      	blx	r6
 80094d8:	f8da 3000 	ldr.w	r3, [sl]
 80094dc:	6821      	ldr	r1, [r4, #0]
 80094de:	1d1a      	adds	r2, r3, #4
 80094e0:	f8ca 2000 	str.w	r2, [sl]
 80094e4:	f011 0f20 	tst.w	r1, #32
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	d010      	beq.n	800950e <_scanf_i+0x1ca>
 80094ec:	6018      	str	r0, [r3, #0]
 80094ee:	68e3      	ldr	r3, [r4, #12]
 80094f0:	3301      	adds	r3, #1
 80094f2:	60e3      	str	r3, [r4, #12]
 80094f4:	eba5 0509 	sub.w	r5, r5, r9
 80094f8:	44a8      	add	r8, r5
 80094fa:	6925      	ldr	r5, [r4, #16]
 80094fc:	4445      	add	r5, r8
 80094fe:	6125      	str	r5, [r4, #16]
 8009500:	2000      	movs	r0, #0
 8009502:	b007      	add	sp, #28
 8009504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009508:	f04f 0800 	mov.w	r8, #0
 800950c:	e7ca      	b.n	80094a4 <_scanf_i+0x160>
 800950e:	07ca      	lsls	r2, r1, #31
 8009510:	bf4c      	ite	mi
 8009512:	8018      	strhmi	r0, [r3, #0]
 8009514:	6018      	strpl	r0, [r3, #0]
 8009516:	e7ea      	b.n	80094ee <_scanf_i+0x1aa>
 8009518:	2001      	movs	r0, #1
 800951a:	e7f2      	b.n	8009502 <_scanf_i+0x1be>
 800951c:	08009ab8 	.word	0x08009ab8
 8009520:	0800968d 	.word	0x0800968d
 8009524:	080097a5 	.word	0x080097a5
 8009528:	08009b1f 	.word	0x08009b1f

0800952c <__sccl>:
 800952c:	b570      	push	{r4, r5, r6, lr}
 800952e:	780b      	ldrb	r3, [r1, #0]
 8009530:	2b5e      	cmp	r3, #94	; 0x5e
 8009532:	bf13      	iteet	ne
 8009534:	1c4a      	addne	r2, r1, #1
 8009536:	1c8a      	addeq	r2, r1, #2
 8009538:	784b      	ldrbeq	r3, [r1, #1]
 800953a:	2100      	movne	r1, #0
 800953c:	bf08      	it	eq
 800953e:	2101      	moveq	r1, #1
 8009540:	1e44      	subs	r4, r0, #1
 8009542:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8009546:	f804 1f01 	strb.w	r1, [r4, #1]!
 800954a:	42ac      	cmp	r4, r5
 800954c:	d1fb      	bne.n	8009546 <__sccl+0x1a>
 800954e:	b913      	cbnz	r3, 8009556 <__sccl+0x2a>
 8009550:	3a01      	subs	r2, #1
 8009552:	4610      	mov	r0, r2
 8009554:	bd70      	pop	{r4, r5, r6, pc}
 8009556:	f081 0401 	eor.w	r4, r1, #1
 800955a:	54c4      	strb	r4, [r0, r3]
 800955c:	1c51      	adds	r1, r2, #1
 800955e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8009562:	2d2d      	cmp	r5, #45	; 0x2d
 8009564:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 8009568:	460a      	mov	r2, r1
 800956a:	d006      	beq.n	800957a <__sccl+0x4e>
 800956c:	2d5d      	cmp	r5, #93	; 0x5d
 800956e:	d0f0      	beq.n	8009552 <__sccl+0x26>
 8009570:	b90d      	cbnz	r5, 8009576 <__sccl+0x4a>
 8009572:	4632      	mov	r2, r6
 8009574:	e7ed      	b.n	8009552 <__sccl+0x26>
 8009576:	462b      	mov	r3, r5
 8009578:	e7ef      	b.n	800955a <__sccl+0x2e>
 800957a:	780e      	ldrb	r6, [r1, #0]
 800957c:	2e5d      	cmp	r6, #93	; 0x5d
 800957e:	d0fa      	beq.n	8009576 <__sccl+0x4a>
 8009580:	42b3      	cmp	r3, r6
 8009582:	dcf8      	bgt.n	8009576 <__sccl+0x4a>
 8009584:	3301      	adds	r3, #1
 8009586:	429e      	cmp	r6, r3
 8009588:	54c4      	strb	r4, [r0, r3]
 800958a:	dcfb      	bgt.n	8009584 <__sccl+0x58>
 800958c:	3102      	adds	r1, #2
 800958e:	e7e6      	b.n	800955e <__sccl+0x32>

08009590 <__seofread>:
 8009590:	2000      	movs	r0, #0
 8009592:	4770      	bx	lr

08009594 <_strtol_l.isra.0>:
 8009594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009598:	4680      	mov	r8, r0
 800959a:	4689      	mov	r9, r1
 800959c:	4692      	mov	sl, r2
 800959e:	461e      	mov	r6, r3
 80095a0:	460f      	mov	r7, r1
 80095a2:	463d      	mov	r5, r7
 80095a4:	9808      	ldr	r0, [sp, #32]
 80095a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095aa:	f000 f947 	bl	800983c <__locale_ctype_ptr_l>
 80095ae:	4420      	add	r0, r4
 80095b0:	7843      	ldrb	r3, [r0, #1]
 80095b2:	f013 0308 	ands.w	r3, r3, #8
 80095b6:	d132      	bne.n	800961e <_strtol_l.isra.0+0x8a>
 80095b8:	2c2d      	cmp	r4, #45	; 0x2d
 80095ba:	d132      	bne.n	8009622 <_strtol_l.isra.0+0x8e>
 80095bc:	787c      	ldrb	r4, [r7, #1]
 80095be:	1cbd      	adds	r5, r7, #2
 80095c0:	2201      	movs	r2, #1
 80095c2:	2e00      	cmp	r6, #0
 80095c4:	d05d      	beq.n	8009682 <_strtol_l.isra.0+0xee>
 80095c6:	2e10      	cmp	r6, #16
 80095c8:	d109      	bne.n	80095de <_strtol_l.isra.0+0x4a>
 80095ca:	2c30      	cmp	r4, #48	; 0x30
 80095cc:	d107      	bne.n	80095de <_strtol_l.isra.0+0x4a>
 80095ce:	782b      	ldrb	r3, [r5, #0]
 80095d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095d4:	2b58      	cmp	r3, #88	; 0x58
 80095d6:	d14f      	bne.n	8009678 <_strtol_l.isra.0+0xe4>
 80095d8:	786c      	ldrb	r4, [r5, #1]
 80095da:	2610      	movs	r6, #16
 80095dc:	3502      	adds	r5, #2
 80095de:	2a00      	cmp	r2, #0
 80095e0:	bf14      	ite	ne
 80095e2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80095e6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80095ea:	2700      	movs	r7, #0
 80095ec:	fbb1 fcf6 	udiv	ip, r1, r6
 80095f0:	4638      	mov	r0, r7
 80095f2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80095f6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80095fa:	2b09      	cmp	r3, #9
 80095fc:	d817      	bhi.n	800962e <_strtol_l.isra.0+0x9a>
 80095fe:	461c      	mov	r4, r3
 8009600:	42a6      	cmp	r6, r4
 8009602:	dd23      	ble.n	800964c <_strtol_l.isra.0+0xb8>
 8009604:	1c7b      	adds	r3, r7, #1
 8009606:	d007      	beq.n	8009618 <_strtol_l.isra.0+0x84>
 8009608:	4584      	cmp	ip, r0
 800960a:	d31c      	bcc.n	8009646 <_strtol_l.isra.0+0xb2>
 800960c:	d101      	bne.n	8009612 <_strtol_l.isra.0+0x7e>
 800960e:	45a6      	cmp	lr, r4
 8009610:	db19      	blt.n	8009646 <_strtol_l.isra.0+0xb2>
 8009612:	fb00 4006 	mla	r0, r0, r6, r4
 8009616:	2701      	movs	r7, #1
 8009618:	f815 4b01 	ldrb.w	r4, [r5], #1
 800961c:	e7eb      	b.n	80095f6 <_strtol_l.isra.0+0x62>
 800961e:	462f      	mov	r7, r5
 8009620:	e7bf      	b.n	80095a2 <_strtol_l.isra.0+0xe>
 8009622:	2c2b      	cmp	r4, #43	; 0x2b
 8009624:	bf04      	itt	eq
 8009626:	1cbd      	addeq	r5, r7, #2
 8009628:	787c      	ldrbeq	r4, [r7, #1]
 800962a:	461a      	mov	r2, r3
 800962c:	e7c9      	b.n	80095c2 <_strtol_l.isra.0+0x2e>
 800962e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009632:	2b19      	cmp	r3, #25
 8009634:	d801      	bhi.n	800963a <_strtol_l.isra.0+0xa6>
 8009636:	3c37      	subs	r4, #55	; 0x37
 8009638:	e7e2      	b.n	8009600 <_strtol_l.isra.0+0x6c>
 800963a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800963e:	2b19      	cmp	r3, #25
 8009640:	d804      	bhi.n	800964c <_strtol_l.isra.0+0xb8>
 8009642:	3c57      	subs	r4, #87	; 0x57
 8009644:	e7dc      	b.n	8009600 <_strtol_l.isra.0+0x6c>
 8009646:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800964a:	e7e5      	b.n	8009618 <_strtol_l.isra.0+0x84>
 800964c:	1c7b      	adds	r3, r7, #1
 800964e:	d108      	bne.n	8009662 <_strtol_l.isra.0+0xce>
 8009650:	2322      	movs	r3, #34	; 0x22
 8009652:	f8c8 3000 	str.w	r3, [r8]
 8009656:	4608      	mov	r0, r1
 8009658:	f1ba 0f00 	cmp.w	sl, #0
 800965c:	d107      	bne.n	800966e <_strtol_l.isra.0+0xda>
 800965e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009662:	b102      	cbz	r2, 8009666 <_strtol_l.isra.0+0xd2>
 8009664:	4240      	negs	r0, r0
 8009666:	f1ba 0f00 	cmp.w	sl, #0
 800966a:	d0f8      	beq.n	800965e <_strtol_l.isra.0+0xca>
 800966c:	b10f      	cbz	r7, 8009672 <_strtol_l.isra.0+0xde>
 800966e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009672:	f8ca 9000 	str.w	r9, [sl]
 8009676:	e7f2      	b.n	800965e <_strtol_l.isra.0+0xca>
 8009678:	2430      	movs	r4, #48	; 0x30
 800967a:	2e00      	cmp	r6, #0
 800967c:	d1af      	bne.n	80095de <_strtol_l.isra.0+0x4a>
 800967e:	2608      	movs	r6, #8
 8009680:	e7ad      	b.n	80095de <_strtol_l.isra.0+0x4a>
 8009682:	2c30      	cmp	r4, #48	; 0x30
 8009684:	d0a3      	beq.n	80095ce <_strtol_l.isra.0+0x3a>
 8009686:	260a      	movs	r6, #10
 8009688:	e7a9      	b.n	80095de <_strtol_l.isra.0+0x4a>
	...

0800968c <_strtol_r>:
 800968c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800968e:	4c06      	ldr	r4, [pc, #24]	; (80096a8 <_strtol_r+0x1c>)
 8009690:	4d06      	ldr	r5, [pc, #24]	; (80096ac <_strtol_r+0x20>)
 8009692:	6824      	ldr	r4, [r4, #0]
 8009694:	6a24      	ldr	r4, [r4, #32]
 8009696:	2c00      	cmp	r4, #0
 8009698:	bf08      	it	eq
 800969a:	462c      	moveq	r4, r5
 800969c:	9400      	str	r4, [sp, #0]
 800969e:	f7ff ff79 	bl	8009594 <_strtol_l.isra.0>
 80096a2:	b003      	add	sp, #12
 80096a4:	bd30      	pop	{r4, r5, pc}
 80096a6:	bf00      	nop
 80096a8:	20000180 	.word	0x20000180
 80096ac:	200001e4 	.word	0x200001e4

080096b0 <_strtoul_l.isra.0>:
 80096b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b4:	4680      	mov	r8, r0
 80096b6:	4689      	mov	r9, r1
 80096b8:	4692      	mov	sl, r2
 80096ba:	461e      	mov	r6, r3
 80096bc:	460f      	mov	r7, r1
 80096be:	463d      	mov	r5, r7
 80096c0:	9808      	ldr	r0, [sp, #32]
 80096c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096c6:	f000 f8b9 	bl	800983c <__locale_ctype_ptr_l>
 80096ca:	4420      	add	r0, r4
 80096cc:	7843      	ldrb	r3, [r0, #1]
 80096ce:	f013 0308 	ands.w	r3, r3, #8
 80096d2:	d130      	bne.n	8009736 <_strtoul_l.isra.0+0x86>
 80096d4:	2c2d      	cmp	r4, #45	; 0x2d
 80096d6:	d130      	bne.n	800973a <_strtoul_l.isra.0+0x8a>
 80096d8:	787c      	ldrb	r4, [r7, #1]
 80096da:	1cbd      	adds	r5, r7, #2
 80096dc:	2101      	movs	r1, #1
 80096de:	2e00      	cmp	r6, #0
 80096e0:	d05c      	beq.n	800979c <_strtoul_l.isra.0+0xec>
 80096e2:	2e10      	cmp	r6, #16
 80096e4:	d109      	bne.n	80096fa <_strtoul_l.isra.0+0x4a>
 80096e6:	2c30      	cmp	r4, #48	; 0x30
 80096e8:	d107      	bne.n	80096fa <_strtoul_l.isra.0+0x4a>
 80096ea:	782b      	ldrb	r3, [r5, #0]
 80096ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80096f0:	2b58      	cmp	r3, #88	; 0x58
 80096f2:	d14e      	bne.n	8009792 <_strtoul_l.isra.0+0xe2>
 80096f4:	786c      	ldrb	r4, [r5, #1]
 80096f6:	2610      	movs	r6, #16
 80096f8:	3502      	adds	r5, #2
 80096fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096fe:	2300      	movs	r3, #0
 8009700:	fbb2 f2f6 	udiv	r2, r2, r6
 8009704:	fb06 fc02 	mul.w	ip, r6, r2
 8009708:	ea6f 0c0c 	mvn.w	ip, ip
 800970c:	4618      	mov	r0, r3
 800970e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009712:	2f09      	cmp	r7, #9
 8009714:	d817      	bhi.n	8009746 <_strtoul_l.isra.0+0x96>
 8009716:	463c      	mov	r4, r7
 8009718:	42a6      	cmp	r6, r4
 800971a:	dd23      	ble.n	8009764 <_strtoul_l.isra.0+0xb4>
 800971c:	2b00      	cmp	r3, #0
 800971e:	db1e      	blt.n	800975e <_strtoul_l.isra.0+0xae>
 8009720:	4282      	cmp	r2, r0
 8009722:	d31c      	bcc.n	800975e <_strtoul_l.isra.0+0xae>
 8009724:	d101      	bne.n	800972a <_strtoul_l.isra.0+0x7a>
 8009726:	45a4      	cmp	ip, r4
 8009728:	db19      	blt.n	800975e <_strtoul_l.isra.0+0xae>
 800972a:	fb00 4006 	mla	r0, r0, r6, r4
 800972e:	2301      	movs	r3, #1
 8009730:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009734:	e7eb      	b.n	800970e <_strtoul_l.isra.0+0x5e>
 8009736:	462f      	mov	r7, r5
 8009738:	e7c1      	b.n	80096be <_strtoul_l.isra.0+0xe>
 800973a:	2c2b      	cmp	r4, #43	; 0x2b
 800973c:	bf04      	itt	eq
 800973e:	1cbd      	addeq	r5, r7, #2
 8009740:	787c      	ldrbeq	r4, [r7, #1]
 8009742:	4619      	mov	r1, r3
 8009744:	e7cb      	b.n	80096de <_strtoul_l.isra.0+0x2e>
 8009746:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800974a:	2f19      	cmp	r7, #25
 800974c:	d801      	bhi.n	8009752 <_strtoul_l.isra.0+0xa2>
 800974e:	3c37      	subs	r4, #55	; 0x37
 8009750:	e7e2      	b.n	8009718 <_strtoul_l.isra.0+0x68>
 8009752:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009756:	2f19      	cmp	r7, #25
 8009758:	d804      	bhi.n	8009764 <_strtoul_l.isra.0+0xb4>
 800975a:	3c57      	subs	r4, #87	; 0x57
 800975c:	e7dc      	b.n	8009718 <_strtoul_l.isra.0+0x68>
 800975e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009762:	e7e5      	b.n	8009730 <_strtoul_l.isra.0+0x80>
 8009764:	2b00      	cmp	r3, #0
 8009766:	da09      	bge.n	800977c <_strtoul_l.isra.0+0xcc>
 8009768:	2322      	movs	r3, #34	; 0x22
 800976a:	f8c8 3000 	str.w	r3, [r8]
 800976e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009772:	f1ba 0f00 	cmp.w	sl, #0
 8009776:	d107      	bne.n	8009788 <_strtoul_l.isra.0+0xd8>
 8009778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977c:	b101      	cbz	r1, 8009780 <_strtoul_l.isra.0+0xd0>
 800977e:	4240      	negs	r0, r0
 8009780:	f1ba 0f00 	cmp.w	sl, #0
 8009784:	d0f8      	beq.n	8009778 <_strtoul_l.isra.0+0xc8>
 8009786:	b10b      	cbz	r3, 800978c <_strtoul_l.isra.0+0xdc>
 8009788:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800978c:	f8ca 9000 	str.w	r9, [sl]
 8009790:	e7f2      	b.n	8009778 <_strtoul_l.isra.0+0xc8>
 8009792:	2430      	movs	r4, #48	; 0x30
 8009794:	2e00      	cmp	r6, #0
 8009796:	d1b0      	bne.n	80096fa <_strtoul_l.isra.0+0x4a>
 8009798:	2608      	movs	r6, #8
 800979a:	e7ae      	b.n	80096fa <_strtoul_l.isra.0+0x4a>
 800979c:	2c30      	cmp	r4, #48	; 0x30
 800979e:	d0a4      	beq.n	80096ea <_strtoul_l.isra.0+0x3a>
 80097a0:	260a      	movs	r6, #10
 80097a2:	e7aa      	b.n	80096fa <_strtoul_l.isra.0+0x4a>

080097a4 <_strtoul_r>:
 80097a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097a6:	4c06      	ldr	r4, [pc, #24]	; (80097c0 <_strtoul_r+0x1c>)
 80097a8:	4d06      	ldr	r5, [pc, #24]	; (80097c4 <_strtoul_r+0x20>)
 80097aa:	6824      	ldr	r4, [r4, #0]
 80097ac:	6a24      	ldr	r4, [r4, #32]
 80097ae:	2c00      	cmp	r4, #0
 80097b0:	bf08      	it	eq
 80097b2:	462c      	moveq	r4, r5
 80097b4:	9400      	str	r4, [sp, #0]
 80097b6:	f7ff ff7b 	bl	80096b0 <_strtoul_l.isra.0>
 80097ba:	b003      	add	sp, #12
 80097bc:	bd30      	pop	{r4, r5, pc}
 80097be:	bf00      	nop
 80097c0:	20000180 	.word	0x20000180
 80097c4:	200001e4 	.word	0x200001e4

080097c8 <__submore>:
 80097c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097cc:	460c      	mov	r4, r1
 80097ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80097d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097d4:	4299      	cmp	r1, r3
 80097d6:	d11d      	bne.n	8009814 <__submore+0x4c>
 80097d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80097dc:	f7ff f810 	bl	8008800 <_malloc_r>
 80097e0:	b918      	cbnz	r0, 80097ea <__submore+0x22>
 80097e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80097f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80097f4:	6360      	str	r0, [r4, #52]	; 0x34
 80097f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80097fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80097fe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009802:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009806:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800980a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800980e:	6020      	str	r0, [r4, #0]
 8009810:	2000      	movs	r0, #0
 8009812:	e7e8      	b.n	80097e6 <__submore+0x1e>
 8009814:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009816:	0077      	lsls	r7, r6, #1
 8009818:	463a      	mov	r2, r7
 800981a:	f000 f84c 	bl	80098b6 <_realloc_r>
 800981e:	4605      	mov	r5, r0
 8009820:	2800      	cmp	r0, #0
 8009822:	d0de      	beq.n	80097e2 <__submore+0x1a>
 8009824:	eb00 0806 	add.w	r8, r0, r6
 8009828:	4601      	mov	r1, r0
 800982a:	4632      	mov	r2, r6
 800982c:	4640      	mov	r0, r8
 800982e:	f7fe ff85 	bl	800873c <memcpy>
 8009832:	f8c4 8000 	str.w	r8, [r4]
 8009836:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800983a:	e7e9      	b.n	8009810 <__submore+0x48>

0800983c <__locale_ctype_ptr_l>:
 800983c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009840:	4770      	bx	lr
	...

08009844 <__locale_ctype_ptr>:
 8009844:	4b04      	ldr	r3, [pc, #16]	; (8009858 <__locale_ctype_ptr+0x14>)
 8009846:	4a05      	ldr	r2, [pc, #20]	; (800985c <__locale_ctype_ptr+0x18>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6a1b      	ldr	r3, [r3, #32]
 800984c:	2b00      	cmp	r3, #0
 800984e:	bf08      	it	eq
 8009850:	4613      	moveq	r3, r2
 8009852:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009856:	4770      	bx	lr
 8009858:	20000180 	.word	0x20000180
 800985c:	200001e4 	.word	0x200001e4

08009860 <__ascii_mbtowc>:
 8009860:	b082      	sub	sp, #8
 8009862:	b901      	cbnz	r1, 8009866 <__ascii_mbtowc+0x6>
 8009864:	a901      	add	r1, sp, #4
 8009866:	b142      	cbz	r2, 800987a <__ascii_mbtowc+0x1a>
 8009868:	b14b      	cbz	r3, 800987e <__ascii_mbtowc+0x1e>
 800986a:	7813      	ldrb	r3, [r2, #0]
 800986c:	600b      	str	r3, [r1, #0]
 800986e:	7812      	ldrb	r2, [r2, #0]
 8009870:	1c10      	adds	r0, r2, #0
 8009872:	bf18      	it	ne
 8009874:	2001      	movne	r0, #1
 8009876:	b002      	add	sp, #8
 8009878:	4770      	bx	lr
 800987a:	4610      	mov	r0, r2
 800987c:	e7fb      	b.n	8009876 <__ascii_mbtowc+0x16>
 800987e:	f06f 0001 	mvn.w	r0, #1
 8009882:	e7f8      	b.n	8009876 <__ascii_mbtowc+0x16>

08009884 <memmove>:
 8009884:	4288      	cmp	r0, r1
 8009886:	b510      	push	{r4, lr}
 8009888:	eb01 0302 	add.w	r3, r1, r2
 800988c:	d807      	bhi.n	800989e <memmove+0x1a>
 800988e:	1e42      	subs	r2, r0, #1
 8009890:	4299      	cmp	r1, r3
 8009892:	d00a      	beq.n	80098aa <memmove+0x26>
 8009894:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009898:	f802 4f01 	strb.w	r4, [r2, #1]!
 800989c:	e7f8      	b.n	8009890 <memmove+0xc>
 800989e:	4283      	cmp	r3, r0
 80098a0:	d9f5      	bls.n	800988e <memmove+0xa>
 80098a2:	1881      	adds	r1, r0, r2
 80098a4:	1ad2      	subs	r2, r2, r3
 80098a6:	42d3      	cmn	r3, r2
 80098a8:	d100      	bne.n	80098ac <memmove+0x28>
 80098aa:	bd10      	pop	{r4, pc}
 80098ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098b0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80098b4:	e7f7      	b.n	80098a6 <memmove+0x22>

080098b6 <_realloc_r>:
 80098b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b8:	4607      	mov	r7, r0
 80098ba:	4614      	mov	r4, r2
 80098bc:	460e      	mov	r6, r1
 80098be:	b921      	cbnz	r1, 80098ca <_realloc_r+0x14>
 80098c0:	4611      	mov	r1, r2
 80098c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80098c6:	f7fe bf9b 	b.w	8008800 <_malloc_r>
 80098ca:	b922      	cbnz	r2, 80098d6 <_realloc_r+0x20>
 80098cc:	f7fe ff4a 	bl	8008764 <_free_r>
 80098d0:	4625      	mov	r5, r4
 80098d2:	4628      	mov	r0, r5
 80098d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d6:	f000 f821 	bl	800991c <_malloc_usable_size_r>
 80098da:	42a0      	cmp	r0, r4
 80098dc:	d20f      	bcs.n	80098fe <_realloc_r+0x48>
 80098de:	4621      	mov	r1, r4
 80098e0:	4638      	mov	r0, r7
 80098e2:	f7fe ff8d 	bl	8008800 <_malloc_r>
 80098e6:	4605      	mov	r5, r0
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d0f2      	beq.n	80098d2 <_realloc_r+0x1c>
 80098ec:	4631      	mov	r1, r6
 80098ee:	4622      	mov	r2, r4
 80098f0:	f7fe ff24 	bl	800873c <memcpy>
 80098f4:	4631      	mov	r1, r6
 80098f6:	4638      	mov	r0, r7
 80098f8:	f7fe ff34 	bl	8008764 <_free_r>
 80098fc:	e7e9      	b.n	80098d2 <_realloc_r+0x1c>
 80098fe:	4635      	mov	r5, r6
 8009900:	e7e7      	b.n	80098d2 <_realloc_r+0x1c>

08009902 <__ascii_wctomb>:
 8009902:	b149      	cbz	r1, 8009918 <__ascii_wctomb+0x16>
 8009904:	2aff      	cmp	r2, #255	; 0xff
 8009906:	bf85      	ittet	hi
 8009908:	238a      	movhi	r3, #138	; 0x8a
 800990a:	6003      	strhi	r3, [r0, #0]
 800990c:	700a      	strbls	r2, [r1, #0]
 800990e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009912:	bf98      	it	ls
 8009914:	2001      	movls	r0, #1
 8009916:	4770      	bx	lr
 8009918:	4608      	mov	r0, r1
 800991a:	4770      	bx	lr

0800991c <_malloc_usable_size_r>:
 800991c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009920:	1f18      	subs	r0, r3, #4
 8009922:	2b00      	cmp	r3, #0
 8009924:	bfbc      	itt	lt
 8009926:	580b      	ldrlt	r3, [r1, r0]
 8009928:	18c0      	addlt	r0, r0, r3
 800992a:	4770      	bx	lr

0800992c <_init>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	bf00      	nop
 8009930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009932:	bc08      	pop	{r3}
 8009934:	469e      	mov	lr, r3
 8009936:	4770      	bx	lr

08009938 <_fini>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	bf00      	nop
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr
