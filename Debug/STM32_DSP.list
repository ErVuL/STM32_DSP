
STM32_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800cc98  0800cc98  0001cc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0f8  0800d0f8  00020760  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0f8  0800d0f8  0001d0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d100  0800d100  00020760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d100  0800d100  0001d100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d104  0800d104  0001d104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  0800d108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011d0c  20000760  0800d868  00020760  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001246c  0800d868  0002246c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020760  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018604  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a39  00000000  00000000  00038d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  0003c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  0003d688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002487f  00000000  00000000  0003e398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010abb  00000000  00000000  00062c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7c1c  00000000  00000000  000736d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0013b2ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004650  00000000  00000000  0013b3e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000760 	.word	0x20000760
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc80 	.word	0x0800cc80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000764 	.word	0x20000764
 80001cc:	0800cc80 	.word	0x0800cc80

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_uldivmod>:
 80006b8:	b953      	cbnz	r3, 80006d0 <__aeabi_uldivmod+0x18>
 80006ba:	b94a      	cbnz	r2, 80006d0 <__aeabi_uldivmod+0x18>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bf08      	it	eq
 80006c0:	2800      	cmpeq	r0, #0
 80006c2:	bf1c      	itt	ne
 80006c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80006c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006cc:	f000 b972 	b.w	80009b4 <__aeabi_idiv0>
 80006d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d8:	f000 f806 	bl	80006e8 <__udivmoddi4>
 80006dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr

080006e8 <__udivmoddi4>:
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	9e08      	ldr	r6, [sp, #32]
 80006ee:	4604      	mov	r4, r0
 80006f0:	4688      	mov	r8, r1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d14b      	bne.n	800078e <__udivmoddi4+0xa6>
 80006f6:	428a      	cmp	r2, r1
 80006f8:	4615      	mov	r5, r2
 80006fa:	d967      	bls.n	80007cc <__udivmoddi4+0xe4>
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	b14a      	cbz	r2, 8000716 <__udivmoddi4+0x2e>
 8000702:	f1c2 0720 	rsb	r7, r2, #32
 8000706:	fa01 f302 	lsl.w	r3, r1, r2
 800070a:	fa20 f707 	lsr.w	r7, r0, r7
 800070e:	4095      	lsls	r5, r2
 8000710:	ea47 0803 	orr.w	r8, r7, r3
 8000714:	4094      	lsls	r4, r2
 8000716:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800071a:	0c23      	lsrs	r3, r4, #16
 800071c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000720:	fa1f fc85 	uxth.w	ip, r5
 8000724:	fb0e 8817 	mls	r8, lr, r7, r8
 8000728:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800072c:	fb07 f10c 	mul.w	r1, r7, ip
 8000730:	4299      	cmp	r1, r3
 8000732:	d909      	bls.n	8000748 <__udivmoddi4+0x60>
 8000734:	18eb      	adds	r3, r5, r3
 8000736:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800073a:	f080 811b 	bcs.w	8000974 <__udivmoddi4+0x28c>
 800073e:	4299      	cmp	r1, r3
 8000740:	f240 8118 	bls.w	8000974 <__udivmoddi4+0x28c>
 8000744:	3f02      	subs	r7, #2
 8000746:	442b      	add	r3, r5
 8000748:	1a5b      	subs	r3, r3, r1
 800074a:	b2a4      	uxth	r4, r4
 800074c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000750:	fb0e 3310 	mls	r3, lr, r0, r3
 8000754:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000758:	fb00 fc0c 	mul.w	ip, r0, ip
 800075c:	45a4      	cmp	ip, r4
 800075e:	d909      	bls.n	8000774 <__udivmoddi4+0x8c>
 8000760:	192c      	adds	r4, r5, r4
 8000762:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000766:	f080 8107 	bcs.w	8000978 <__udivmoddi4+0x290>
 800076a:	45a4      	cmp	ip, r4
 800076c:	f240 8104 	bls.w	8000978 <__udivmoddi4+0x290>
 8000770:	3802      	subs	r0, #2
 8000772:	442c      	add	r4, r5
 8000774:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000778:	eba4 040c 	sub.w	r4, r4, ip
 800077c:	2700      	movs	r7, #0
 800077e:	b11e      	cbz	r6, 8000788 <__udivmoddi4+0xa0>
 8000780:	40d4      	lsrs	r4, r2
 8000782:	2300      	movs	r3, #0
 8000784:	e9c6 4300 	strd	r4, r3, [r6]
 8000788:	4639      	mov	r1, r7
 800078a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078e:	428b      	cmp	r3, r1
 8000790:	d909      	bls.n	80007a6 <__udivmoddi4+0xbe>
 8000792:	2e00      	cmp	r6, #0
 8000794:	f000 80eb 	beq.w	800096e <__udivmoddi4+0x286>
 8000798:	2700      	movs	r7, #0
 800079a:	e9c6 0100 	strd	r0, r1, [r6]
 800079e:	4638      	mov	r0, r7
 80007a0:	4639      	mov	r1, r7
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f783 	clz	r7, r3
 80007aa:	2f00      	cmp	r7, #0
 80007ac:	d147      	bne.n	800083e <__udivmoddi4+0x156>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0xd0>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80fa 	bhi.w	80009ac <__udivmoddi4+0x2c4>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb61 0303 	sbc.w	r3, r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	4698      	mov	r8, r3
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d0e0      	beq.n	8000788 <__udivmoddi4+0xa0>
 80007c6:	e9c6 4800 	strd	r4, r8, [r6]
 80007ca:	e7dd      	b.n	8000788 <__udivmoddi4+0xa0>
 80007cc:	b902      	cbnz	r2, 80007d0 <__udivmoddi4+0xe8>
 80007ce:	deff      	udf	#255	; 0xff
 80007d0:	fab2 f282 	clz	r2, r2
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	f040 808f 	bne.w	80008f8 <__udivmoddi4+0x210>
 80007da:	1b49      	subs	r1, r1, r5
 80007dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007e0:	fa1f f885 	uxth.w	r8, r5
 80007e4:	2701      	movs	r7, #1
 80007e6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007ea:	0c23      	lsrs	r3, r4, #16
 80007ec:	fb0e 111c 	mls	r1, lr, ip, r1
 80007f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f4:	fb08 f10c 	mul.w	r1, r8, ip
 80007f8:	4299      	cmp	r1, r3
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0x124>
 80007fc:	18eb      	adds	r3, r5, r3
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0x122>
 8000804:	4299      	cmp	r1, r3
 8000806:	f200 80cd 	bhi.w	80009a4 <__udivmoddi4+0x2bc>
 800080a:	4684      	mov	ip, r0
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1410 	mls	r4, lr, r0, r1
 8000818:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x14c>
 8000824:	192c      	adds	r4, r5, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x14a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80b6 	bhi.w	800099e <__udivmoddi4+0x2b6>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e79f      	b.n	800077e <__udivmoddi4+0x96>
 800083e:	f1c7 0c20 	rsb	ip, r7, #32
 8000842:	40bb      	lsls	r3, r7
 8000844:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000848:	ea4e 0e03 	orr.w	lr, lr, r3
 800084c:	fa01 f407 	lsl.w	r4, r1, r7
 8000850:	fa20 f50c 	lsr.w	r5, r0, ip
 8000854:	fa21 f30c 	lsr.w	r3, r1, ip
 8000858:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800085c:	4325      	orrs	r5, r4
 800085e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000862:	0c2c      	lsrs	r4, r5, #16
 8000864:	fb08 3319 	mls	r3, r8, r9, r3
 8000868:	fa1f fa8e 	uxth.w	sl, lr
 800086c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000870:	fb09 f40a 	mul.w	r4, r9, sl
 8000874:	429c      	cmp	r4, r3
 8000876:	fa02 f207 	lsl.w	r2, r2, r7
 800087a:	fa00 f107 	lsl.w	r1, r0, r7
 800087e:	d90b      	bls.n	8000898 <__udivmoddi4+0x1b0>
 8000880:	eb1e 0303 	adds.w	r3, lr, r3
 8000884:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000888:	f080 8087 	bcs.w	800099a <__udivmoddi4+0x2b2>
 800088c:	429c      	cmp	r4, r3
 800088e:	f240 8084 	bls.w	800099a <__udivmoddi4+0x2b2>
 8000892:	f1a9 0902 	sub.w	r9, r9, #2
 8000896:	4473      	add	r3, lr
 8000898:	1b1b      	subs	r3, r3, r4
 800089a:	b2ad      	uxth	r5, r5
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3310 	mls	r3, r8, r0, r3
 80008a4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008a8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008ac:	45a2      	cmp	sl, r4
 80008ae:	d908      	bls.n	80008c2 <__udivmoddi4+0x1da>
 80008b0:	eb1e 0404 	adds.w	r4, lr, r4
 80008b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008b8:	d26b      	bcs.n	8000992 <__udivmoddi4+0x2aa>
 80008ba:	45a2      	cmp	sl, r4
 80008bc:	d969      	bls.n	8000992 <__udivmoddi4+0x2aa>
 80008be:	3802      	subs	r0, #2
 80008c0:	4474      	add	r4, lr
 80008c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008c6:	fba0 8902 	umull	r8, r9, r0, r2
 80008ca:	eba4 040a 	sub.w	r4, r4, sl
 80008ce:	454c      	cmp	r4, r9
 80008d0:	46c2      	mov	sl, r8
 80008d2:	464b      	mov	r3, r9
 80008d4:	d354      	bcc.n	8000980 <__udivmoddi4+0x298>
 80008d6:	d051      	beq.n	800097c <__udivmoddi4+0x294>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d069      	beq.n	80009b0 <__udivmoddi4+0x2c8>
 80008dc:	ebb1 050a 	subs.w	r5, r1, sl
 80008e0:	eb64 0403 	sbc.w	r4, r4, r3
 80008e4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008e8:	40fd      	lsrs	r5, r7
 80008ea:	40fc      	lsrs	r4, r7
 80008ec:	ea4c 0505 	orr.w	r5, ip, r5
 80008f0:	e9c6 5400 	strd	r5, r4, [r6]
 80008f4:	2700      	movs	r7, #0
 80008f6:	e747      	b.n	8000788 <__udivmoddi4+0xa0>
 80008f8:	f1c2 0320 	rsb	r3, r2, #32
 80008fc:	fa20 f703 	lsr.w	r7, r0, r3
 8000900:	4095      	lsls	r5, r2
 8000902:	fa01 f002 	lsl.w	r0, r1, r2
 8000906:	fa21 f303 	lsr.w	r3, r1, r3
 800090a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800090e:	4338      	orrs	r0, r7
 8000910:	0c01      	lsrs	r1, r0, #16
 8000912:	fbb3 f7fe 	udiv	r7, r3, lr
 8000916:	fa1f f885 	uxth.w	r8, r5
 800091a:	fb0e 3317 	mls	r3, lr, r7, r3
 800091e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000922:	fb07 f308 	mul.w	r3, r7, r8
 8000926:	428b      	cmp	r3, r1
 8000928:	fa04 f402 	lsl.w	r4, r4, r2
 800092c:	d907      	bls.n	800093e <__udivmoddi4+0x256>
 800092e:	1869      	adds	r1, r5, r1
 8000930:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000934:	d22f      	bcs.n	8000996 <__udivmoddi4+0x2ae>
 8000936:	428b      	cmp	r3, r1
 8000938:	d92d      	bls.n	8000996 <__udivmoddi4+0x2ae>
 800093a:	3f02      	subs	r7, #2
 800093c:	4429      	add	r1, r5
 800093e:	1acb      	subs	r3, r1, r3
 8000940:	b281      	uxth	r1, r0
 8000942:	fbb3 f0fe 	udiv	r0, r3, lr
 8000946:	fb0e 3310 	mls	r3, lr, r0, r3
 800094a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800094e:	fb00 f308 	mul.w	r3, r0, r8
 8000952:	428b      	cmp	r3, r1
 8000954:	d907      	bls.n	8000966 <__udivmoddi4+0x27e>
 8000956:	1869      	adds	r1, r5, r1
 8000958:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800095c:	d217      	bcs.n	800098e <__udivmoddi4+0x2a6>
 800095e:	428b      	cmp	r3, r1
 8000960:	d915      	bls.n	800098e <__udivmoddi4+0x2a6>
 8000962:	3802      	subs	r0, #2
 8000964:	4429      	add	r1, r5
 8000966:	1ac9      	subs	r1, r1, r3
 8000968:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800096c:	e73b      	b.n	80007e6 <__udivmoddi4+0xfe>
 800096e:	4637      	mov	r7, r6
 8000970:	4630      	mov	r0, r6
 8000972:	e709      	b.n	8000788 <__udivmoddi4+0xa0>
 8000974:	4607      	mov	r7, r0
 8000976:	e6e7      	b.n	8000748 <__udivmoddi4+0x60>
 8000978:	4618      	mov	r0, r3
 800097a:	e6fb      	b.n	8000774 <__udivmoddi4+0x8c>
 800097c:	4541      	cmp	r1, r8
 800097e:	d2ab      	bcs.n	80008d8 <__udivmoddi4+0x1f0>
 8000980:	ebb8 0a02 	subs.w	sl, r8, r2
 8000984:	eb69 020e 	sbc.w	r2, r9, lr
 8000988:	3801      	subs	r0, #1
 800098a:	4613      	mov	r3, r2
 800098c:	e7a4      	b.n	80008d8 <__udivmoddi4+0x1f0>
 800098e:	4660      	mov	r0, ip
 8000990:	e7e9      	b.n	8000966 <__udivmoddi4+0x27e>
 8000992:	4618      	mov	r0, r3
 8000994:	e795      	b.n	80008c2 <__udivmoddi4+0x1da>
 8000996:	4667      	mov	r7, ip
 8000998:	e7d1      	b.n	800093e <__udivmoddi4+0x256>
 800099a:	4681      	mov	r9, r0
 800099c:	e77c      	b.n	8000898 <__udivmoddi4+0x1b0>
 800099e:	3802      	subs	r0, #2
 80009a0:	442c      	add	r4, r5
 80009a2:	e747      	b.n	8000834 <__udivmoddi4+0x14c>
 80009a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009a8:	442b      	add	r3, r5
 80009aa:	e72f      	b.n	800080c <__udivmoddi4+0x124>
 80009ac:	4638      	mov	r0, r7
 80009ae:	e708      	b.n	80007c2 <__udivmoddi4+0xda>
 80009b0:	4637      	mov	r7, r6
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0xa0>

080009b4 <__aeabi_idiv0>:
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	f5ad 4d81 	sub.w	sp, sp, #16512	; 0x4080
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c0:	f000 fec2 	bl	8001748 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c4:	f000 f89a 	bl	8000afc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c8:	f000 fa08 	bl	8000ddc <MX_GPIO_Init>
  MX_DMA_Init();
 80009cc:	f000 f994 	bl	8000cf8 <MX_DMA_Init>
  MX_I2S2_Init();
 80009d0:	f000 f932 	bl	8000c38 <MX_I2S2_Init>
  MX_USB_DEVICE_Init();
 80009d4:	f007 fc36 	bl	8008244 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80009d8:	f000 f912 	bl	8000c00 <MX_CRC_Init>
  MX_I2S3_Init();
 80009dc:	f000 f95c 	bl	8000c98 <MX_I2S3_Init>
  MX_PDM2PCM_Init();
 80009e0:	f007 fc06 	bl	80081f0 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */
	char cmd[APP_RX_DATA_SIZE];
	HAL_Delay(1500);
 80009e4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80009e8:	f000 ff20 	bl	800182c <HAL_Delay>
	CDC_Clear();
 80009ec:	f007 ff94 	bl	8008918 <CDC_Clear>
	CDC_Printf("\r\n               ================");
 80009f0:	4831      	ldr	r0, [pc, #196]	; (8000ab8 <main+0x100>)
 80009f2:	f007 fe41 	bl	8008678 <CDC_Printf>
	CDC_Printf("\r\n               *** DSP V1.0 ***");
 80009f6:	4831      	ldr	r0, [pc, #196]	; (8000abc <main+0x104>)
 80009f8:	f007 fe3e 	bl	8008678 <CDC_Printf>
	CDC_Printf("\r\n               ================\r\n\n");
 80009fc:	4830      	ldr	r0, [pc, #192]	; (8000ac0 <main+0x108>)
 80009fe:	f007 fe3b 	bl	8008678 <CDC_Printf>
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET)
 8000a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a06:	482f      	ldr	r0, [pc, #188]	; (8000ac4 <main+0x10c>)
 8000a08:	f001 fd68 	bl	80024dc <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d103      	bne.n	8000a1a <main+0x62>
	{	d_print("/!\\ ERROR : Hardware initialization problem !\r\n");
 8000a12:	482d      	ldr	r0, [pc, #180]	; (8000ac8 <main+0x110>)
 8000a14:	f007 fe5c 	bl	80086d0 <d_print>
 8000a18:	e002      	b.n	8000a20 <main+0x68>
	}else
	{	d_print("Hardware initialization done\r\n");
 8000a1a:	482c      	ldr	r0, [pc, #176]	; (8000acc <main+0x114>)
 8000a1c:	f007 fe58 	bl	80086d0 <d_print>
	}

	/* Start I2S communiation */
	if((HAL_I2SEx_TransmitReceive_DMA(&hi2s2, I2S2_txBuf, I2S2_rxBuf, I2S2_BUFLEN / 2) != HAL_OK)
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	4a2a      	ldr	r2, [pc, #168]	; (8000ad0 <main+0x118>)
 8000a26:	492b      	ldr	r1, [pc, #172]	; (8000ad4 <main+0x11c>)
 8000a28:	482b      	ldr	r0, [pc, #172]	; (8000ad8 <main+0x120>)
 8000a2a:	f002 f8ef 	bl	8002c0c <HAL_I2SEx_TransmitReceive_DMA>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d108      	bne.n	8000a46 <main+0x8e>
			|| (HAL_I2S_Receive_DMA(&hi2s3, I2S3_rxBuf, I2S3_BUFLEN) != HAL_OK))
 8000a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a38:	4928      	ldr	r1, [pc, #160]	; (8000adc <main+0x124>)
 8000a3a:	4829      	ldr	r0, [pc, #164]	; (8000ae0 <main+0x128>)
 8000a3c:	f001 feda 	bl	80027f4 <HAL_I2S_Receive_DMA>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <main+0x96>
	{	d_print("/!\\ ERROR : Unable to launch I2S DMA transfert !\r\n");
 8000a46:	4827      	ldr	r0, [pc, #156]	; (8000ae4 <main+0x12c>)
 8000a48:	f007 fe42 	bl	80086d0 <d_print>
 8000a4c:	e002      	b.n	8000a54 <main+0x9c>
	}else
	{	d_print("I2S communication established\r\n");
 8000a4e:	4826      	ldr	r0, [pc, #152]	; (8000ae8 <main+0x130>)
 8000a50:	f007 fe3e 	bl	80086d0 <d_print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	d_print("Processing ..\r\n");
 8000a54:	4825      	ldr	r0, [pc, #148]	; (8000aec <main+0x134>)
 8000a56:	f007 fe3b 	bl	80086d0 <d_print>
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

		/* Read audio data */
	 // MP45DT02_monoRq31(M_Buffer); // do not work actually !
		PMODI2S2_stereoRq31(Lbuf, Rbuf);
 8000a5a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000a5e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fb27 	bl	80010b8 <PMODI2S2_stereoRq31>

		/* Signal Processing */
	 // arm_fir_q31(FIR_q31, L_Buf, L_Buf, BUFFER_LENGTH);

		/* Write audio data */
		PMODI2S2_stereoWq31(Lbuf, Rbuf);
 8000a6a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000a6e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fb71 	bl	800115c <PMODI2S2_stereoWq31>

		/* Command from Port COM available */
		if (CDC_RX_DATA_PENDING)
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <main+0x138>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d011      	beq.n	8000aa8 <main+0xf0>
		{
			/* Read command */
			CDC_Scanf("%s", cmd);
 8000a84:	463b      	mov	r3, r7
 8000a86:	4619      	mov	r1, r3
 8000a88:	481a      	ldr	r0, [pc, #104]	; (8000af4 <main+0x13c>)
 8000a8a:	f007 fe99 	bl	80087c0 <CDC_Scanf>
			CDC_RX_DATA_PENDING = 0;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <main+0x138>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]

			/* Execute command */
			if (!strcmp(cmd, "clear"))
 8000a94:	463b      	mov	r3, r7
 8000a96:	4918      	ldr	r1, [pc, #96]	; (8000af8 <main+0x140>)
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fb99 	bl	80001d0 <strcmp>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d101      	bne.n	8000aa8 <main+0xf0>
			{	CDC_Clear();
 8000aa4:	f007 ff38 	bl	8008918 <CDC_Clear>
			}
		}

		/* Toggle Led and update chrono on port COM */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000aa8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <main+0x10c>)
 8000aae:	f001 fd46 	bl	800253e <HAL_GPIO_TogglePin>
		d_spin();
 8000ab2:	f007 febf 	bl	8008834 <d_spin>
		PMODI2S2_stereoRq31(Lbuf, Rbuf);
 8000ab6:	e7d0      	b.n	8000a5a <main+0xa2>
 8000ab8:	0800cc98 	.word	0x0800cc98
 8000abc:	0800ccbc 	.word	0x0800ccbc
 8000ac0:	0800cce0 	.word	0x0800cce0
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	0800cd08 	.word	0x0800cd08
 8000acc:	0800cd38 	.word	0x0800cd38
 8000ad0:	20008880 	.word	0x20008880
 8000ad4:	20000880 	.word	0x20000880
 8000ad8:	200119a8 	.word	0x200119a8
 8000adc:	20010884 	.word	0x20010884
 8000ae0:	200119f0 	.word	0x200119f0
 8000ae4:	0800cd58 	.word	0x0800cd58
 8000ae8:	0800cd8c 	.word	0x0800cd8c
 8000aec:	0800cdac 	.word	0x0800cdac
 8000af0:	20000786 	.word	0x20000786
 8000af4:	0800cdbc 	.word	0x0800cdbc
 8000af8:	0800cdc0 	.word	0x0800cdc0

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b098      	sub	sp, #96	; 0x60
 8000b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b06:	2230      	movs	r2, #48	; 0x30
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f00a fa7f 	bl	800b00e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <SystemClock_Config+0xfc>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a30      	ldr	r2, [pc, #192]	; (8000bf8 <SystemClock_Config+0xfc>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <SystemClock_Config+0xfc>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <SystemClock_Config+0x100>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a2a      	ldr	r2, [pc, #168]	; (8000bfc <SystemClock_Config+0x100>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <SystemClock_Config+0x100>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b66:	2301      	movs	r3, #1
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b70:	2302      	movs	r3, #2
 8000b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b7a:	2308      	movs	r3, #8
 8000b7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b7e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b82:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b88:	2307      	movs	r3, #7
 8000b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b90:	4618      	mov	r0, r3
 8000b92:	f003 fe83 	bl	800489c <HAL_RCC_OscConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b9c:	f000 fb3e 	bl	800121c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2105      	movs	r1, #5
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f004 f8dc 	bl	8004d7c <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bca:	f000 fb27 	bl	800121c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bd2:	23c0      	movs	r3, #192	; 0xc0
 8000bd4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 fa96 	bl	8005110 <HAL_RCCEx_PeriphCLKConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000bea:	f000 fb17 	bl	800121c <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3760      	adds	r7, #96	; 0x60
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <MX_CRC_Init+0x30>)
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <MX_CRC_Init+0x34>)
 8000c08:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c0a:	4809      	ldr	r0, [pc, #36]	; (8000c30 <MX_CRC_Init+0x30>)
 8000c0c:	f000 ff41 	bl	8001a92 <HAL_CRC_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c16:	f000 fb01 	bl	800121c <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <MX_CRC_Init+0x30>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <MX_CRC_Init+0x30>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f042 0201 	orr.w	r2, r2, #1
 8000c28:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000878 	.word	0x20000878
 8000c34:	40023000 	.word	0x40023000

08000c38 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2S2_Init 0 */
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */
  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_I2S2_Init+0x54>)
 8000c3e:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <MX_I2S2_Init+0x58>)
 8000c40:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_I2S2_Init+0x54>)
 8000c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c48:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_I2S2_Init+0x54>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_I2S2_Init+0x54>)
 8000c52:	2203      	movs	r2, #3
 8000c54:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <MX_I2S2_Init+0x54>)
 8000c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_I2S2_Init+0x54>)
 8000c60:	4a0c      	ldr	r2, [pc, #48]	; (8000c94 <MX_I2S2_Init+0x5c>)
 8000c62:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_I2S2_Init+0x54>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_I2S2_Init+0x54>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_I2S2_Init+0x54>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_I2S2_Init+0x54>)
 8000c78:	f001 fc7c 	bl	8002574 <HAL_I2S_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000c82:	f000 facb 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */
  /* USER CODE END I2S2_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200119a8 	.word	0x200119a8
 8000c90:	40003800 	.word	0x40003800
 8000c94:	00017700 	.word	0x00017700

08000c98 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_I2S3_Init+0x54>)
 8000c9e:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <MX_I2S3_Init+0x58>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_I2S3_Init+0x54>)
 8000ca4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ca8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_MSB;
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <MX_I2S3_Init+0x54>)
 8000cac:	2210      	movs	r2, #16
 8000cae:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_I2S3_Init+0x54>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <MX_I2S3_Init+0x54>)
 8000cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_I2S3_Init+0x54>)
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <MX_I2S3_Init+0x5c>)
 8000cc2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_I2S3_Init+0x54>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_I2S3_Init+0x54>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_I2S3_Init+0x54>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_I2S3_Init+0x54>)
 8000cd8:	f001 fc4c 	bl	8002574 <HAL_I2S_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000ce2:	f000 fa9b 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200119f0 	.word	0x200119f0
 8000cf0:	40003c00 	.word	0x40003c00
 8000cf4:	00017700 	.word	0x00017700

08000cf8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <MX_DMA_Init+0xd8>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a32      	ldr	r2, [pc, #200]	; (8000dd0 <MX_DMA_Init+0xd8>)
 8000d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <MX_DMA_Init+0xd8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <MX_DMA_Init+0xd8>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a2b      	ldr	r2, [pc, #172]	; (8000dd0 <MX_DMA_Init+0xd8>)
 8000d24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MX_DMA_Init+0xd8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000d36:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d38:	4a27      	ldr	r2, [pc, #156]	; (8000dd8 <MX_DMA_Init+0xe0>)
 8000d3a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000d3c:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000d42:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d44:	2280      	movs	r2, #128	; 0x80
 8000d46:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d4e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000d50:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d56:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d72:	2204      	movs	r2, #4
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d78:	2203      	movs	r2, #3
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <MX_DMA_Init+0xdc>)
 8000d8a:	f000 fe9f 	bl	8001acc <HAL_DMA_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_DMA_Init+0xa0>
  {
    Error_Handler( );
 8000d94:	f000 fa42 	bl	800121c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	200b      	movs	r0, #11
 8000d9e:	f000 fe42 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000da2:	200b      	movs	r0, #11
 8000da4:	f000 fe5b 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2100      	movs	r1, #0
 8000dac:	200e      	movs	r0, #14
 8000dae:	f000 fe3a 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000db2:	200e      	movs	r0, #14
 8000db4:	f000 fe53 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	200f      	movs	r0, #15
 8000dbe:	f000 fe32 	bl	8001a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000dc2:	200f      	movs	r0, #15
 8000dc4:	f000 fe4b 	bl	8001a5e <HAL_NVIC_EnableIRQ>

}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	20000818 	.word	0x20000818
 8000dd8:	40026410 	.word	0x40026410

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	4b71      	ldr	r3, [pc, #452]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a70      	ldr	r2, [pc, #448]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000dfc:	f043 0310 	orr.w	r3, r3, #16
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b6e      	ldr	r3, [pc, #440]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	4b6a      	ldr	r3, [pc, #424]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a69      	ldr	r2, [pc, #420]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b67      	ldr	r3, [pc, #412]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b63      	ldr	r3, [pc, #396]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a62      	ldr	r2, [pc, #392]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b60      	ldr	r3, [pc, #384]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b5c      	ldr	r3, [pc, #368]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a5b      	ldr	r2, [pc, #364]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b59      	ldr	r3, [pc, #356]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4b55      	ldr	r3, [pc, #340]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a54      	ldr	r2, [pc, #336]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b52      	ldr	r3, [pc, #328]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b4e      	ldr	r3, [pc, #312]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a4d      	ldr	r2, [pc, #308]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b4b      	ldr	r3, [pc, #300]	; (8000fbc <MX_GPIO_Init+0x1e0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2108      	movs	r1, #8
 8000e9e:	4848      	ldr	r0, [pc, #288]	; (8000fc0 <MX_GPIO_Init+0x1e4>)
 8000ea0:	f001 fb34 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4846      	ldr	r0, [pc, #280]	; (8000fc4 <MX_GPIO_Init+0x1e8>)
 8000eaa:	f001 fb2f 	bl	800250c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000eb4:	4844      	ldr	r0, [pc, #272]	; (8000fc8 <MX_GPIO_Init+0x1ec>)
 8000eb6:	f001 fb29 	bl	800250c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000eba:	2308      	movs	r3, #8
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	483b      	ldr	r0, [pc, #236]	; (8000fc0 <MX_GPIO_Init+0x1e4>)
 8000ed2:	f001 f969 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	4835      	ldr	r0, [pc, #212]	; (8000fc4 <MX_GPIO_Init+0x1e8>)
 8000eee:	f001 f95b 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ef6:	4b35      	ldr	r3, [pc, #212]	; (8000fcc <MX_GPIO_Init+0x1f0>)
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	4832      	ldr	r0, [pc, #200]	; (8000fd0 <MX_GPIO_Init+0x1f4>)
 8000f06:	f001 f94f 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f0a:	23e0      	movs	r3, #224	; 0xe0
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4619      	mov	r1, r3
 8000f24:	482a      	ldr	r0, [pc, #168]	; (8000fd0 <MX_GPIO_Init+0x1f4>)
 8000f26:	f001 f93f 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4825      	ldr	r0, [pc, #148]	; (8000fd4 <MX_GPIO_Init+0x1f8>)
 8000f3e:	f001 f933 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f42:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000f46:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481b      	ldr	r0, [pc, #108]	; (8000fc8 <MX_GPIO_Init+0x1ec>)
 8000f5c:	f001 f924 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f60:	2320      	movs	r3, #32
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4815      	ldr	r0, [pc, #84]	; (8000fc8 <MX_GPIO_Init+0x1ec>)
 8000f74:	f001 f918 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f78:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7e:	2312      	movs	r3, #18
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <MX_GPIO_Init+0x1f8>)
 8000f96:	f001 f907 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_GPIO_Init+0x1f0>)
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_GPIO_Init+0x1e4>)
 8000fae:	f001 f8fb 	bl	80021a8 <HAL_GPIO_Init>

}
 8000fb2:	bf00      	nop
 8000fb4:	3730      	adds	r7, #48	; 0x30
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020c00 	.word	0x40020c00
 8000fcc:	10120000 	.word	0x10120000
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	40020400 	.word	0x40020400

08000fd8 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	pI2S2_txBuf = &I2S2_txBuf[0];
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 8000fe2:	4a09      	ldr	r2, [pc, #36]	; (8001008 <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 8000fe4:	601a      	str	r2, [r3, #0]
	pI2S2_rxBuf = &I2S2_rxBuf[0];
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 8000fe8:	4a09      	ldr	r2, [pc, #36]	; (8001010 <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 8000fea:	601a      	str	r2, [r3, #0]
	I2S2_rxState = HalfCplt;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_I2SEx_TxRxHalfCpltCallback+0x3c>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
	I2S2_txState = HalfCplt;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20000400 	.word	0x20000400
 8001008:	20000880 	.word	0x20000880
 800100c:	20000404 	.word	0x20000404
 8001010:	20008880 	.word	0x20008880
 8001014:	20010880 	.word	0x20010880
 8001018:	20011884 	.word	0x20011884

0800101c <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	pI2S2_txBuf = &I2S2_txBuf[I2S2_BUFLEN/2];
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 8001026:	4a09      	ldr	r2, [pc, #36]	; (800104c <HAL_I2SEx_TxRxCpltCallback+0x30>)
 8001028:	601a      	str	r2, [r3, #0]
	pI2S2_rxBuf = &I2S2_rxBuf[I2S2_BUFLEN/2];
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 800102e:	601a      	str	r2, [r3, #0]
	I2S2_rxState = Cplt;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_I2SEx_TxRxCpltCallback+0x3c>)
 8001032:	2202      	movs	r2, #2
 8001034:	701a      	strb	r2, [r3, #0]
	I2S2_txState = Cplt;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_I2SEx_TxRxCpltCallback+0x40>)
 8001038:	2202      	movs	r2, #2
 800103a:	701a      	strb	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	20000400 	.word	0x20000400
 800104c:	20004880 	.word	0x20004880
 8001050:	20000404 	.word	0x20000404
 8001054:	2000c880 	.word	0x2000c880
 8001058:	20010880 	.word	0x20010880
 800105c:	20011884 	.word	0x20011884

08001060 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	pI2S3_rxBuf = &I2S3_rxBuf[0];
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800106a:	4a06      	ldr	r2, [pc, #24]	; (8001084 <HAL_I2S_RxHalfCpltCallback+0x24>)
 800106c:	601a      	str	r2, [r3, #0]
	I2S3_rxState = HalfCplt;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_I2S_RxHalfCpltCallback+0x28>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	20000408 	.word	0x20000408
 8001084:	20010884 	.word	0x20010884
 8001088:	20011885 	.word	0x20011885

0800108c <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	pI2S3_rxBuf = &I2S3_rxBuf[I2S3_BUFLEN/2];
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_I2S_RxCpltCallback+0x20>)
 8001096:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_I2S_RxCpltCallback+0x24>)
 8001098:	601a      	str	r2, [r3, #0]
	I2S3_rxState = Cplt;
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_I2S_RxCpltCallback+0x28>)
 800109c:	2202      	movs	r2, #2
 800109e:	701a      	strb	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	20000408 	.word	0x20000408
 80010b0:	20011084 	.word	0x20011084
 80010b4:	20011885 	.word	0x20011885

080010b8 <PMODI2S2_stereoRq31>:
	CDC_Printf("Value = %d\r\n", pI2S3_rxBuf[12]);
	CDC_Printf("Value     = %d\r\n", pI2S3_rxBuf[11]);
}

void PMODI2S2_stereoRq31(q31_t *Lbuf, q31_t *Rbuf)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
	while(I2S2_rxState == Busy)
 80010c2:	bf00      	nop
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <PMODI2S2_stereoRq31+0x9c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0fb      	beq.n	80010c4 <PMODI2S2_stereoRq31+0xc>
	{
	}
	I2S2_rxState = Busy;
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <PMODI2S2_stereoRq31+0x9c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 80010d2:	2300      	movs	r3, #0
 80010d4:	81fb      	strh	r3, [r7, #14]
 80010d6:	e031      	b.n	800113c <PMODI2S2_stereoRq31+0x84>
	{
		Lbuf[i / 4] = (q31_t) ((pI2S2_rxBuf[i]     << 16) | pI2S2_rxBuf[i + 1]);
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <PMODI2S2_stereoRq31+0xa0>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	89fb      	ldrh	r3, [r7, #14]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	041a      	lsls	r2, r3, #16
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <PMODI2S2_stereoRq31+0xa0>)
 80010e8:	6819      	ldr	r1, [r3, #0]
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	3301      	adds	r3, #1
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	440b      	add	r3, r1
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	89fb      	ldrh	r3, [r7, #14]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	440b      	add	r3, r1
 8001102:	4302      	orrs	r2, r0
 8001104:	601a      	str	r2, [r3, #0]
		Rbuf[i / 4] = (q31_t) ((pI2S2_rxBuf[i + 2] << 16) | pI2S2_rxBuf[i + 3]);
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <PMODI2S2_stereoRq31+0xa0>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	3302      	adds	r3, #2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	041a      	lsls	r2, r3, #16
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <PMODI2S2_stereoRq31+0xa0>)
 8001118:	6819      	ldr	r1, [r3, #0]
 800111a:	89fb      	ldrh	r3, [r7, #14]
 800111c:	3303      	adds	r3, #3
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	440b      	add	r3, r1
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	89fb      	ldrh	r3, [r7, #14]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	b29b      	uxth	r3, r3
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	6839      	ldr	r1, [r7, #0]
 8001130:	440b      	add	r3, r1
 8001132:	4302      	orrs	r2, r0
 8001134:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 8001136:	89fb      	ldrh	r3, [r7, #14]
 8001138:	3304      	adds	r3, #4
 800113a:	81fb      	strh	r3, [r7, #14]
 800113c:	89fb      	ldrh	r3, [r7, #14]
 800113e:	3303      	adds	r3, #3
 8001140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001144:	dbc8      	blt.n	80010d8 <PMODI2S2_stereoRq31+0x20>
	}
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20010880 	.word	0x20010880
 8001158:	20000404 	.word	0x20000404

0800115c <PMODI2S2_stereoWq31>:

void PMODI2S2_stereoWq31(q31_t *Lbuf, q31_t *Rbuf)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	while(I2S2_txState == Busy)
 8001166:	bf00      	nop
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <PMODI2S2_stereoWq31+0xb8>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0fb      	beq.n	8001168 <PMODI2S2_stereoWq31+0xc>
	{
	}
	I2S2_txState = Busy;
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <PMODI2S2_stereoWq31+0xb8>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 8001176:	2300      	movs	r3, #0
 8001178:	81fb      	strh	r3, [r7, #14]
 800117a:	e03f      	b.n	80011fc <PMODI2S2_stereoWq31+0xa0>
	{
		pI2S2_txBuf[i]     = (Lbuf[i / 4] >> 16) & 0xFFFF;
 800117c:	89fb      	ldrh	r3, [r7, #14]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	b29b      	uxth	r3, r3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	0c19      	lsrs	r1, r3, #16
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <PMODI2S2_stereoWq31+0xbc>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	89fb      	ldrh	r3, [r7, #14]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	b28a      	uxth	r2, r1
 8001198:	801a      	strh	r2, [r3, #0]
		pI2S2_txBuf[i + 1] =  Lbuf[i / 4] & 0xFFFF;
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	b29b      	uxth	r3, r3
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	6819      	ldr	r1, [r3, #0]
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <PMODI2S2_stereoWq31+0xbc>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	3301      	adds	r3, #1
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	b28a      	uxth	r2, r1
 80011b6:	801a      	strh	r2, [r3, #0]
		pI2S2_txBuf[i + 2] = (Rbuf[i / 4] >> 16) & 0xFFFF;
 80011b8:	89fb      	ldrh	r3, [r7, #14]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	b29b      	uxth	r3, r3
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0c19      	lsrs	r1, r3, #16
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <PMODI2S2_stereoWq31+0xbc>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	3302      	adds	r3, #2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	b28a      	uxth	r2, r1
 80011d6:	801a      	strh	r2, [r3, #0]
		pI2S2_txBuf[i + 3] =  Rbuf[i / 4] & 0xFFFF;
 80011d8:	89fb      	ldrh	r3, [r7, #14]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	b29b      	uxth	r3, r3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	6819      	ldr	r1, [r3, #0]
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <PMODI2S2_stereoWq31+0xbc>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	3303      	adds	r3, #3
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	b28a      	uxth	r2, r1
 80011f4:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	3304      	adds	r3, #4
 80011fa:	81fb      	strh	r3, [r7, #14]
 80011fc:	89fb      	ldrh	r3, [r7, #14]
 80011fe:	3303      	adds	r3, #3
 8001200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001204:	dbba      	blt.n	800117c <PMODI2S2_stereoWq31+0x20>
	}
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20011884 	.word	0x20011884
 8001218:	20000400 	.word	0x20000400

0800121c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001226:	4804      	ldr	r0, [pc, #16]	; (8001238 <Error_Handler+0x1c>)
 8001228:	f001 f970 	bl	800250c <HAL_GPIO_WritePin>
	d_print("/!\\ FATAL ERROR !");
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <Error_Handler+0x20>)
 800122e:	f007 fa4f 	bl	80086d0 <d_print>
  /* USER CODE END Error_Handler_Debug */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020c00 	.word	0x40020c00
 800123c:	0800cdec 	.word	0x0800cdec

08001240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_MspInit+0x4c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a0f      	ldr	r2, [pc, #60]	; (800128c <HAL_MspInit+0x4c>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_MspInit+0x4c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_MspInit+0x4c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a08      	ldr	r2, [pc, #32]	; (800128c <HAL_MspInit+0x4c>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_MspInit+0x4c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800127e:	2007      	movs	r0, #7
 8001280:	f000 fbc6 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800

08001290 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <HAL_CRC_MspInit+0x3c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d10d      	bne.n	80012be <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_CRC_MspInit+0x40>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a09      	ldr	r2, [pc, #36]	; (80012d0 <HAL_CRC_MspInit+0x40>)
 80012ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <HAL_CRC_MspInit+0x40>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023000 	.word	0x40023000
 80012d0:	40023800 	.word	0x40023800

080012d4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	; 0x38
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4aa3      	ldr	r2, [pc, #652]	; (8001580 <HAL_I2S_MspInit+0x2ac>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	f040 80bf 	bne.w	8001476 <HAL_I2S_MspInit+0x1a2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
 80012fc:	4ba1      	ldr	r3, [pc, #644]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	4aa0      	ldr	r2, [pc, #640]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 8001302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001306:	6413      	str	r3, [r2, #64]	; 0x40
 8001308:	4b9e      	ldr	r3, [pc, #632]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001310:	623b      	str	r3, [r7, #32]
 8001312:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	4b9a      	ldr	r3, [pc, #616]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	4a99      	ldr	r2, [pc, #612]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6313      	str	r3, [r2, #48]	; 0x30
 8001324:	4b97      	ldr	r3, [pc, #604]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	4b93      	ldr	r3, [pc, #588]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a92      	ldr	r2, [pc, #584]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	6313      	str	r3, [r2, #48]	; 0x30
 8001340:	4b90      	ldr	r3, [pc, #576]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800134c:	2304      	movs	r3, #4
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800135c:	2306      	movs	r3, #6
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001364:	4619      	mov	r1, r3
 8001366:	4888      	ldr	r0, [pc, #544]	; (8001588 <HAL_I2S_MspInit+0x2b4>)
 8001368:	f000 ff1e 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin|GPIO_PIN_6;
 800136c:	2348      	movs	r3, #72	; 0x48
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800137c:	2305      	movs	r3, #5
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	4619      	mov	r1, r3
 8001386:	4880      	ldr	r0, [pc, #512]	; (8001588 <HAL_I2S_MspInit+0x2b4>)
 8001388:	f000 ff0e 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800138c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800139e:	2305      	movs	r3, #5
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	4878      	ldr	r0, [pc, #480]	; (800158c <HAL_I2S_MspInit+0x2b8>)
 80013aa:	f000 fefd 	bl	80021a8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80013ae:	4b78      	ldr	r3, [pc, #480]	; (8001590 <HAL_I2S_MspInit+0x2bc>)
 80013b0:	4a78      	ldr	r2, [pc, #480]	; (8001594 <HAL_I2S_MspInit+0x2c0>)
 80013b2:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 80013b4:	4b76      	ldr	r3, [pc, #472]	; (8001590 <HAL_I2S_MspInit+0x2bc>)
 80013b6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80013ba:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013bc:	4b74      	ldr	r3, [pc, #464]	; (8001590 <HAL_I2S_MspInit+0x2bc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c2:	4b73      	ldr	r3, [pc, #460]	; (8001590 <HAL_I2S_MspInit+0x2bc>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	4b71      	ldr	r3, [pc, #452]	; (8001590 <HAL_I2S_MspInit+0x2bc>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ce:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013d0:	4b6f      	ldr	r3, [pc, #444]	; (8001590 <HAL_I2S_MspInit+0x2bc>)
 80013d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d6:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013d8:	4b6d      	ldr	r3, [pc, #436]	; (8001590 <HAL_I2S_MspInit+0x2bc>)
 80013da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013de:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 80013e0:	4b6b      	ldr	r3, [pc, #428]	; (8001590 <HAL_I2S_MspInit+0x2bc>)
 80013e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e6:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80013e8:	4b69      	ldr	r3, [pc, #420]	; (8001590 <HAL_I2S_MspInit+0x2bc>)
 80013ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ee:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f0:	4b67      	ldr	r3, [pc, #412]	; (8001590 <HAL_I2S_MspInit+0x2bc>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 80013f6:	4866      	ldr	r0, [pc, #408]	; (8001590 <HAL_I2S_MspInit+0x2bc>)
 80013f8:	f000 fb68 	bl	8001acc <HAL_DMA_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8001402:	f7ff ff0b 	bl	800121c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a61      	ldr	r2, [pc, #388]	; (8001590 <HAL_I2S_MspInit+0x2bc>)
 800140a:	63da      	str	r2, [r3, #60]	; 0x3c
 800140c:	4a60      	ldr	r2, [pc, #384]	; (8001590 <HAL_I2S_MspInit+0x2bc>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001412:	4b61      	ldr	r3, [pc, #388]	; (8001598 <HAL_I2S_MspInit+0x2c4>)
 8001414:	4a61      	ldr	r2, [pc, #388]	; (800159c <HAL_I2S_MspInit+0x2c8>)
 8001416:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001418:	4b5f      	ldr	r3, [pc, #380]	; (8001598 <HAL_I2S_MspInit+0x2c4>)
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800141e:	4b5e      	ldr	r3, [pc, #376]	; (8001598 <HAL_I2S_MspInit+0x2c4>)
 8001420:	2240      	movs	r2, #64	; 0x40
 8001422:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001424:	4b5c      	ldr	r3, [pc, #368]	; (8001598 <HAL_I2S_MspInit+0x2c4>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800142a:	4b5b      	ldr	r3, [pc, #364]	; (8001598 <HAL_I2S_MspInit+0x2c4>)
 800142c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001430:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001432:	4b59      	ldr	r3, [pc, #356]	; (8001598 <HAL_I2S_MspInit+0x2c4>)
 8001434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001438:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800143a:	4b57      	ldr	r3, [pc, #348]	; (8001598 <HAL_I2S_MspInit+0x2c4>)
 800143c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001440:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001442:	4b55      	ldr	r3, [pc, #340]	; (8001598 <HAL_I2S_MspInit+0x2c4>)
 8001444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001448:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800144a:	4b53      	ldr	r3, [pc, #332]	; (8001598 <HAL_I2S_MspInit+0x2c4>)
 800144c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001450:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001452:	4b51      	ldr	r3, [pc, #324]	; (8001598 <HAL_I2S_MspInit+0x2c4>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001458:	484f      	ldr	r0, [pc, #316]	; (8001598 <HAL_I2S_MspInit+0x2c4>)
 800145a:	f000 fb37 	bl	8001acc <HAL_DMA_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 8001464:	f7ff feda 	bl	800121c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a4b      	ldr	r2, [pc, #300]	; (8001598 <HAL_I2S_MspInit+0x2c4>)
 800146c:	639a      	str	r2, [r3, #56]	; 0x38
 800146e:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <HAL_I2S_MspInit+0x2c4>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001474:	e080      	b.n	8001578 <HAL_I2S_MspInit+0x2a4>
  else if(hi2s->Instance==SPI3)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a49      	ldr	r2, [pc, #292]	; (80015a0 <HAL_I2S_MspInit+0x2cc>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d17b      	bne.n	8001578 <HAL_I2S_MspInit+0x2a4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	4a3e      	ldr	r2, [pc, #248]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 800148a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800148e:	6413      	str	r3, [r2, #64]	; 0x40
 8001490:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	4b38      	ldr	r3, [pc, #224]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4a37      	ldr	r2, [pc, #220]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
 80014ac:	4b35      	ldr	r3, [pc, #212]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	4a30      	ldr	r2, [pc, #192]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6313      	str	r3, [r2, #48]	; 0x30
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_I2S_MspInit+0x2b0>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014d4:	2310      	movs	r3, #16
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014e4:	2306      	movs	r3, #6
 80014e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	482d      	ldr	r0, [pc, #180]	; (80015a4 <HAL_I2S_MspInit+0x2d0>)
 80014f0:	f000 fe5a 	bl	80021a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80014f4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001506:	2306      	movs	r3, #6
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	481d      	ldr	r0, [pc, #116]	; (8001588 <HAL_I2S_MspInit+0x2b4>)
 8001512:	f000 fe49 	bl	80021a8 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_I2S_MspInit+0x2d4>)
 8001518:	4a24      	ldr	r2, [pc, #144]	; (80015ac <HAL_I2S_MspInit+0x2d8>)
 800151a:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <HAL_I2S_MspInit+0x2d4>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_I2S_MspInit+0x2d4>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <HAL_I2S_MspInit+0x2d4>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <HAL_I2S_MspInit+0x2d4>)
 8001530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001534:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <HAL_I2S_MspInit+0x2d4>)
 8001538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800153c:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_I2S_MspInit+0x2d4>)
 8001540:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001544:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_I2S_MspInit+0x2d4>)
 8001548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154c:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_I2S_MspInit+0x2d4>)
 8001550:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001554:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_I2S_MspInit+0x2d4>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800155c:	4812      	ldr	r0, [pc, #72]	; (80015a8 <HAL_I2S_MspInit+0x2d4>)
 800155e:	f000 fab5 	bl	8001acc <HAL_DMA_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_I2S_MspInit+0x298>
      Error_Handler();
 8001568:	f7ff fe58 	bl	800121c <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_I2S_MspInit+0x2d4>)
 8001570:	63da      	str	r2, [r3, #60]	; 0x3c
 8001572:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <HAL_I2S_MspInit+0x2d4>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001578:	bf00      	nop
 800157a:	3738      	adds	r7, #56	; 0x38
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40003800 	.word	0x40003800
 8001584:	40023800 	.word	0x40023800
 8001588:	40020800 	.word	0x40020800
 800158c:	40020400 	.word	0x40020400
 8001590:	20011888 	.word	0x20011888
 8001594:	40026058 	.word	0x40026058
 8001598:	200118e8 	.word	0x200118e8
 800159c:	40026070 	.word	0x40026070
 80015a0:	40003c00 	.word	0x40003c00
 80015a4:	40020000 	.word	0x40020000
 80015a8:	20011948 	.word	0x20011948
 80015ac:	40026010 	.word	0x40026010

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001604:	f000 f8f2 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <DMA1_Stream0_IRQHandler+0x10>)
 8001612:	f000 fb61 	bl	8001cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20011948 	.word	0x20011948

08001620 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <DMA1_Stream3_IRQHandler+0x10>)
 8001626:	f000 fb57 	bl	8001cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20011888 	.word	0x20011888

08001634 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <DMA1_Stream4_IRQHandler+0x10>)
 800163a:	f000 fb4d 	bl	8001cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200118e8 	.word	0x200118e8

08001648 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <OTG_FS_IRQHandler+0x10>)
 800164e:	f002 f8f1 	bl	8003834 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20012060 	.word	0x20012060

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f009 fc7a 	bl	800af84 <__errno>
 8001690:	4602      	mov	r2, r0
 8001692:	230c      	movs	r3, #12
 8001694:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20020000 	.word	0x20020000
 80016bc:	00000400 	.word	0x00000400
 80016c0:	20000780 	.word	0x20000780
 80016c4:	20012470 	.word	0x20012470

080016c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <SystemInit+0x28>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d2:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <SystemInit+0x28>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SystemInit+0x28>)
 80016de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016e2:	609a      	str	r2, [r3, #8]
#endif
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800172c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016fa:	e003      	b.n	8001704 <LoopCopyDataInit>

080016fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001700:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001702:	3104      	adds	r1, #4

08001704 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001704:	480b      	ldr	r0, [pc, #44]	; (8001734 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001708:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800170a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800170c:	d3f6      	bcc.n	80016fc <CopyDataInit>
  ldr  r2, =_sbss
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001710:	e002      	b.n	8001718 <LoopFillZerobss>

08001712 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001712:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001714:	f842 3b04 	str.w	r3, [r2], #4

08001718 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800171a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800171c:	d3f9      	bcc.n	8001712 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800171e:	f7ff ffd3 	bl	80016c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001722:	f009 fc35 	bl	800af90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001726:	f7ff f947 	bl	80009b8 <main>
  bx  lr    
 800172a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800172c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001730:	0800d108 	.word	0x0800d108
  ldr  r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001738:	20000760 	.word	0x20000760
  ldr  r2, =_sbss
 800173c:	20000760 	.word	0x20000760
  ldr  r3, = _ebss
 8001740:	2001246c 	.word	0x2001246c

08001744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC_IRQHandler>
	...

08001748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_Init+0x40>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_Init+0x40>)
 800175e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_Init+0x40>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f94d 	bl	8001a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f808 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800177c:	f7ff fd60 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x54>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x58>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f965 	bl	8001a7a <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017c8:	f000 f92d 	bl	8001a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_InitTick+0x5c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2000040c 	.word	0x2000040c
 80017e4:	20000414 	.word	0x20000414
 80017e8:	20000410 	.word	0x20000410

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000414 	.word	0x20000414
 8001810:	20011a38 	.word	0x20011a38

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20011a38 	.word	0x20011a38

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_Delay+0x40>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000414 	.word	0x20000414

08001870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800189c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <__NVIC_SetPriorityGrouping+0x44>)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	60d3      	str	r3, [r2, #12]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <__NVIC_GetPriorityGrouping+0x18>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	f003 0307 	and.w	r3, r3, #7
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	db0b      	blt.n	80018fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4907      	ldr	r1, [pc, #28]	; (800190c <__NVIC_EnableIRQ+0x38>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	2001      	movs	r0, #1
 80018f6:	fa00 f202 	lsl.w	r2, r0, r2
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e100 	.word	0xe000e100

08001910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	6039      	str	r1, [r7, #0]
 800191a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	db0a      	blt.n	800193a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <__NVIC_SetPriority+0x4c>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	0112      	lsls	r2, r2, #4
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	440b      	add	r3, r1
 8001934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001938:	e00a      	b.n	8001950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4908      	ldr	r1, [pc, #32]	; (8001960 <__NVIC_SetPriority+0x50>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	3b04      	subs	r3, #4
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	440b      	add	r3, r1
 800194e:	761a      	strb	r2, [r3, #24]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	f1c3 0307 	rsb	r3, r3, #7
 800197e:	2b04      	cmp	r3, #4
 8001980:	bf28      	it	cs
 8001982:	2304      	movcs	r3, #4
 8001984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3304      	adds	r3, #4
 800198a:	2b06      	cmp	r3, #6
 800198c:	d902      	bls.n	8001994 <NVIC_EncodePriority+0x30>
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b03      	subs	r3, #3
 8001992:	e000      	b.n	8001996 <NVIC_EncodePriority+0x32>
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	401a      	ands	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019bc:	4313      	orrs	r3, r2
         );
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019dc:	d301      	bcc.n	80019e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019de:	2301      	movs	r3, #1
 80019e0:	e00f      	b.n	8001a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <SysTick_Config+0x40>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ea:	210f      	movs	r1, #15
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f0:	f7ff ff8e 	bl	8001910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <SysTick_Config+0x40>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <SysTick_Config+0x40>)
 80019fc:	2207      	movs	r2, #7
 80019fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	e000e010 	.word	0xe000e010

08001a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff29 	bl	8001870 <__NVIC_SetPriorityGrouping>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a38:	f7ff ff3e 	bl	80018b8 <__NVIC_GetPriorityGrouping>
 8001a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	6978      	ldr	r0, [r7, #20]
 8001a44:	f7ff ff8e 	bl	8001964 <NVIC_EncodePriority>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff5d 	bl	8001910 <__NVIC_SetPriority>
}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff31 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffa2 	bl	80019cc <SysTick_Config>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e00e      	b.n	8001ac2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	795b      	ldrb	r3, [r3, #5]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d105      	bne.n	8001aba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff fbeb 	bl	8001290 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff fe9c 	bl	8001814 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e099      	b.n	8001c1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b08:	e00f      	b.n	8001b2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b0a:	f7ff fe83 	bl	8001814 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d908      	bls.n	8001b2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2203      	movs	r2, #3
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e078      	b.n	8001c1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e8      	bne.n	8001b0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_DMA_Init+0x158>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d107      	bne.n	8001b94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f023 0307 	bic.w	r3, r3, #7
 8001baa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d117      	bne.n	8001bee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 fa6f 	bl	80020b4 <DMA_CheckFifoParam>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bea:	2301      	movs	r3, #1
 8001bec:	e016      	b.n	8001c1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fa26 	bl	8002048 <DMA_CalcBaseAndBitshift>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c04:	223f      	movs	r2, #63	; 0x3f
 8001c06:	409a      	lsls	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	f010803f 	.word	0xf010803f

08001c28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_DMA_Start_IT+0x26>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e040      	b.n	8001cd0 <HAL_DMA_Start_IT+0xa8>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d12f      	bne.n	8001cc2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2202      	movs	r2, #2
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f9b8 	bl	8001fec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	223f      	movs	r2, #63	; 0x3f
 8001c82:	409a      	lsls	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0216 	orr.w	r2, r2, #22
 8001c96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0208 	orr.w	r2, r2, #8
 8001cae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e005      	b.n	8001cce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ce4:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_DMA_IRQHandler+0x258>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a92      	ldr	r2, [pc, #584]	; (8001f34 <HAL_DMA_IRQHandler+0x25c>)
 8001cea:	fba2 2303 	umull	r2, r3, r2, r3
 8001cee:	0a9b      	lsrs	r3, r3, #10
 8001cf0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	2208      	movs	r2, #8
 8001d04:	409a      	lsls	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01a      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0204 	bic.w	r2, r2, #4
 8001d2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d30:	2208      	movs	r2, #8
 8001d32:	409a      	lsls	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	f043 0201 	orr.w	r2, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2201      	movs	r2, #1
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d012      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	2201      	movs	r2, #1
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d72:	f043 0202 	orr.w	r2, r3, #2
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	2204      	movs	r2, #4
 8001d80:	409a      	lsls	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d012      	beq.n	8001db0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00b      	beq.n	8001db0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da8:	f043 0204 	orr.w	r2, r3, #4
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	2210      	movs	r2, #16
 8001db6:	409a      	lsls	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d043      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d03c      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd2:	2210      	movs	r2, #16
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d018      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d108      	bne.n	8001e08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d024      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
 8001e06:	e01f      	b.n	8001e48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01b      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
 8001e18:	e016      	b.n	8001e48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0208 	bic.w	r2, r2, #8
 8001e36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 808e 	beq.w	8001f76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 8086 	beq.w	8001f76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6e:	2220      	movs	r2, #32
 8001e70:	409a      	lsls	r2, r3
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d136      	bne.n	8001ef0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0216 	bic.w	r2, r2, #22
 8001e90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ea0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <HAL_DMA_IRQHandler+0x1da>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0208 	bic.w	r2, r2, #8
 8001ec0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	223f      	movs	r2, #63	; 0x3f
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d07d      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4798      	blx	r3
        }
        return;
 8001eee:	e078      	b.n	8001fe2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01c      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d108      	bne.n	8001f1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d030      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
 8001f1c:	e02b      	b.n	8001f76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d027      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	4798      	blx	r3
 8001f2e:	e022      	b.n	8001f76 <HAL_DMA_IRQHandler+0x29e>
 8001f30:	2000040c 	.word	0x2000040c
 8001f34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10f      	bne.n	8001f66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0210 	bic.w	r2, r2, #16
 8001f54:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d032      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d022      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d307      	bcc.n	8001fbe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f2      	bne.n	8001fa2 <HAL_DMA_IRQHandler+0x2ca>
 8001fbc:	e000      	b.n	8001fc0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001fbe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	4798      	blx	r3
 8001fe0:	e000      	b.n	8001fe4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fe2:	bf00      	nop
    }
  }
}
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop

08001fec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002008:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b40      	cmp	r3, #64	; 0x40
 8002018:	d108      	bne.n	800202c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800202a:	e007      	b.n	800203c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	60da      	str	r2, [r3, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	3b10      	subs	r3, #16
 8002058:	4a14      	ldr	r2, [pc, #80]	; (80020ac <DMA_CalcBaseAndBitshift+0x64>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	091b      	lsrs	r3, r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002062:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d909      	bls.n	800208a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800207e:	f023 0303 	bic.w	r3, r3, #3
 8002082:	1d1a      	adds	r2, r3, #4
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	659a      	str	r2, [r3, #88]	; 0x58
 8002088:	e007      	b.n	800209a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	aaaaaaab 	.word	0xaaaaaaab
 80020b0:	0800cf10 	.word	0x0800cf10

080020b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d11f      	bne.n	800210e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d855      	bhi.n	8002180 <DMA_CheckFifoParam+0xcc>
 80020d4:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <DMA_CheckFifoParam+0x28>)
 80020d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020da:	bf00      	nop
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020ff 	.word	0x080020ff
 80020e4:	080020ed 	.word	0x080020ed
 80020e8:	08002181 	.word	0x08002181
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d045      	beq.n	8002184 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020fc:	e042      	b.n	8002184 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002106:	d13f      	bne.n	8002188 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800210c:	e03c      	b.n	8002188 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002116:	d121      	bne.n	800215c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d836      	bhi.n	800218c <DMA_CheckFifoParam+0xd8>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <DMA_CheckFifoParam+0x70>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	08002135 	.word	0x08002135
 8002128:	0800213b 	.word	0x0800213b
 800212c:	08002135 	.word	0x08002135
 8002130:	0800214d 	.word	0x0800214d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
      break;
 8002138:	e02f      	b.n	800219a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d024      	beq.n	8002190 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800214a:	e021      	b.n	8002190 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002154:	d11e      	bne.n	8002194 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800215a:	e01b      	b.n	8002194 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d902      	bls.n	8002168 <DMA_CheckFifoParam+0xb4>
 8002162:	2b03      	cmp	r3, #3
 8002164:	d003      	beq.n	800216e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002166:	e018      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
      break;
 800216c:	e015      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00e      	beq.n	8002198 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
      break;
 800217e:	e00b      	b.n	8002198 <DMA_CheckFifoParam+0xe4>
      break;
 8002180:	bf00      	nop
 8002182:	e00a      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;
 8002184:	bf00      	nop
 8002186:	e008      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;
 8002188:	bf00      	nop
 800218a:	e006      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;
 800218c:	bf00      	nop
 800218e:	e004      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;
 8002190:	bf00      	nop
 8002192:	e002      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;   
 8002194:	bf00      	nop
 8002196:	e000      	b.n	800219a <DMA_CheckFifoParam+0xe6>
      break;
 8002198:	bf00      	nop
    }
  } 
  
  return status; 
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	e16b      	b.n	800249c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021c4:	2201      	movs	r2, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	429a      	cmp	r2, r3
 80021de:	f040 815a 	bne.w	8002496 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d00b      	beq.n	8002202 <HAL_GPIO_Init+0x5a>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d007      	beq.n	8002202 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f6:	2b11      	cmp	r3, #17
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b12      	cmp	r3, #18
 8002200:	d130      	bne.n	8002264 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	2203      	movs	r2, #3
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002238:	2201      	movs	r2, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 0201 	and.w	r2, r3, #1
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0xfc>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b12      	cmp	r3, #18
 80022a2:	d123      	bne.n	80022ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	08da      	lsrs	r2, r3, #3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3208      	adds	r2, #8
 80022ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	220f      	movs	r2, #15
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	08da      	lsrs	r2, r3, #3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3208      	adds	r2, #8
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0203 	and.w	r2, r3, #3
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80b4 	beq.w	8002496 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b5f      	ldr	r3, [pc, #380]	; (80024b0 <HAL_GPIO_Init+0x308>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	4a5e      	ldr	r2, [pc, #376]	; (80024b0 <HAL_GPIO_Init+0x308>)
 8002338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
 800233e:	4b5c      	ldr	r3, [pc, #368]	; (80024b0 <HAL_GPIO_Init+0x308>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800234a:	4a5a      	ldr	r2, [pc, #360]	; (80024b4 <HAL_GPIO_Init+0x30c>)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a51      	ldr	r2, [pc, #324]	; (80024b8 <HAL_GPIO_Init+0x310>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d02b      	beq.n	80023ce <HAL_GPIO_Init+0x226>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a50      	ldr	r2, [pc, #320]	; (80024bc <HAL_GPIO_Init+0x314>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d025      	beq.n	80023ca <HAL_GPIO_Init+0x222>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4f      	ldr	r2, [pc, #316]	; (80024c0 <HAL_GPIO_Init+0x318>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d01f      	beq.n	80023c6 <HAL_GPIO_Init+0x21e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4e      	ldr	r2, [pc, #312]	; (80024c4 <HAL_GPIO_Init+0x31c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d019      	beq.n	80023c2 <HAL_GPIO_Init+0x21a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4d      	ldr	r2, [pc, #308]	; (80024c8 <HAL_GPIO_Init+0x320>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_GPIO_Init+0x216>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4c      	ldr	r2, [pc, #304]	; (80024cc <HAL_GPIO_Init+0x324>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00d      	beq.n	80023ba <HAL_GPIO_Init+0x212>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4b      	ldr	r2, [pc, #300]	; (80024d0 <HAL_GPIO_Init+0x328>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d007      	beq.n	80023b6 <HAL_GPIO_Init+0x20e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4a      	ldr	r2, [pc, #296]	; (80024d4 <HAL_GPIO_Init+0x32c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_GPIO_Init+0x20a>
 80023ae:	2307      	movs	r3, #7
 80023b0:	e00e      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023b2:	2308      	movs	r3, #8
 80023b4:	e00c      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023b6:	2306      	movs	r3, #6
 80023b8:	e00a      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023ba:	2305      	movs	r3, #5
 80023bc:	e008      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023be:	2304      	movs	r3, #4
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023c2:	2303      	movs	r3, #3
 80023c4:	e004      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e002      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_GPIO_Init+0x228>
 80023ce:	2300      	movs	r3, #0
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	f002 0203 	and.w	r2, r2, #3
 80023d6:	0092      	lsls	r2, r2, #2
 80023d8:	4093      	lsls	r3, r2
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e0:	4934      	ldr	r1, [pc, #208]	; (80024b4 <HAL_GPIO_Init+0x30c>)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3302      	adds	r3, #2
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ee:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <HAL_GPIO_Init+0x330>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002412:	4a31      	ldr	r2, [pc, #196]	; (80024d8 <HAL_GPIO_Init+0x330>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002418:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <HAL_GPIO_Init+0x330>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800243c:	4a26      	ldr	r2, [pc, #152]	; (80024d8 <HAL_GPIO_Init+0x330>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002442:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <HAL_GPIO_Init+0x330>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002466:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <HAL_GPIO_Init+0x330>)
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_GPIO_Init+0x330>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002490:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <HAL_GPIO_Init+0x330>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3301      	adds	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b0f      	cmp	r3, #15
 80024a0:	f67f ae90 	bls.w	80021c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a4:	bf00      	nop
 80024a6:	3724      	adds	r7, #36	; 0x24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40013800 	.word	0x40013800
 80024b8:	40020000 	.word	0x40020000
 80024bc:	40020400 	.word	0x40020400
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40020c00 	.word	0x40020c00
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40021400 	.word	0x40021400
 80024d0:	40021800 	.word	0x40021800
 80024d4:	40021c00 	.word	0x40021c00
 80024d8:	40013c00 	.word	0x40013c00

080024dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	887b      	ldrh	r3, [r7, #2]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	e001      	b.n	80024fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800251c:	787b      	ldrb	r3, [r7, #1]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002528:	e003      	b.n	8002532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	041a      	lsls	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	619a      	str	r2, [r3, #24]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	401a      	ands	r2, r3
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	429a      	cmp	r2, r3
 8002556:	d104      	bne.n	8002562 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002558:	887b      	ldrh	r3, [r7, #2]
 800255a:	041a      	lsls	r2, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002560:	e002      	b.n	8002568 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002562:	887a      	ldrh	r2, [r7, #2]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	619a      	str	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e128      	b.n	80027d8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a90      	ldr	r2, [pc, #576]	; (80027e0 <HAL_I2S_Init+0x26c>)
 800259e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7fe fe97 	bl	80012d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2202      	movs	r2, #2
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80025bc:	f023 030f 	bic.w	r3, r3, #15
 80025c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2202      	movs	r2, #2
 80025c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d060      	beq.n	8002694 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80025da:	2310      	movs	r3, #16
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e001      	b.n	80025e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80025e0:	2320      	movs	r3, #32
 80025e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d802      	bhi.n	80025f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80025f2:	2001      	movs	r0, #1
 80025f4:	f002 fe6e 	bl	80052d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80025f8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002602:	d125      	bne.n	8002650 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d010      	beq.n	800262e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	fbb2 f2f3 	udiv	r2, r2, r3
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	461a      	mov	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	3305      	adds	r3, #5
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	e01f      	b.n	800266e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	fbb2 f2f3 	udiv	r2, r2, r3
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	461a      	mov	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	3305      	adds	r3, #5
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	e00e      	b.n	800266e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	fbb2 f2f3 	udiv	r2, r2, r3
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	461a      	mov	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	3305      	adds	r3, #5
 800266c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4a5c      	ldr	r2, [pc, #368]	; (80027e4 <HAL_I2S_Init+0x270>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	08db      	lsrs	r3, r3, #3
 8002678:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	e003      	b.n	800269c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002694:	2302      	movs	r3, #2
 8002696:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d902      	bls.n	80026a8 <HAL_I2S_Init+0x134>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	2bff      	cmp	r3, #255	; 0xff
 80026a6:	d907      	bls.n	80026b8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ac:	f043 0210 	orr.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e08f      	b.n	80027d8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	ea42 0103 	orr.w	r1, r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80026d6:	f023 030f 	bic.w	r3, r3, #15
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6851      	ldr	r1, [r2, #4]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6892      	ldr	r2, [r2, #8]
 80026e2:	4311      	orrs	r1, r2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	68d2      	ldr	r2, [r2, #12]
 80026e8:	4311      	orrs	r1, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6992      	ldr	r2, [r2, #24]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026fa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d161      	bne.n	80027c8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a38      	ldr	r2, [pc, #224]	; (80027e8 <HAL_I2S_Init+0x274>)
 8002708:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a37      	ldr	r2, [pc, #220]	; (80027ec <HAL_I2S_Init+0x278>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d101      	bne.n	8002718 <HAL_I2S_Init+0x1a4>
 8002714:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_I2S_Init+0x27c>)
 8002716:	e001      	b.n	800271c <HAL_I2S_Init+0x1a8>
 8002718:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	4932      	ldr	r1, [pc, #200]	; (80027ec <HAL_I2S_Init+0x278>)
 8002724:	428a      	cmp	r2, r1
 8002726:	d101      	bne.n	800272c <HAL_I2S_Init+0x1b8>
 8002728:	4a31      	ldr	r2, [pc, #196]	; (80027f0 <HAL_I2S_Init+0x27c>)
 800272a:	e001      	b.n	8002730 <HAL_I2S_Init+0x1bc>
 800272c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002730:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002734:	f023 030f 	bic.w	r3, r3, #15
 8002738:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2b      	ldr	r2, [pc, #172]	; (80027ec <HAL_I2S_Init+0x278>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d101      	bne.n	8002748 <HAL_I2S_Init+0x1d4>
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_I2S_Init+0x27c>)
 8002746:	e001      	b.n	800274c <HAL_I2S_Init+0x1d8>
 8002748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800274c:	2202      	movs	r2, #2
 800274e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <HAL_I2S_Init+0x278>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_I2S_Init+0x1ea>
 800275a:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <HAL_I2S_Init+0x27c>)
 800275c:	e001      	b.n	8002762 <HAL_I2S_Init+0x1ee>
 800275e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276e:	d003      	beq.n	8002778 <HAL_I2S_Init+0x204>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d103      	bne.n	8002780 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	e001      	b.n	8002784 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	b299      	uxth	r1, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800279a:	4303      	orrs	r3, r0
 800279c:	b29b      	uxth	r3, r3
 800279e:	430b      	orrs	r3, r1
 80027a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80027a2:	4313      	orrs	r3, r2
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	897b      	ldrh	r3, [r7, #10]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027b0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <HAL_I2S_Init+0x278>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_I2S_Init+0x24c>
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_I2S_Init+0x27c>)
 80027be:	e001      	b.n	80027c4 <HAL_I2S_Init+0x250>
 80027c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027c4:	897a      	ldrh	r2, [r7, #10]
 80027c6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	08002af9 	.word	0x08002af9
 80027e4:	cccccccd 	.word	0xcccccccd
 80027e8:	08002f21 	.word	0x08002f21
 80027ec:	40003800 	.word	0x40003800
 80027f0:	40003400 	.word	0x40003400

080027f4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_I2S_Receive_DMA+0x1a>
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e0a1      	b.n	8002956 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_I2S_Receive_DMA+0x2e>
 800281e:	2302      	movs	r3, #2
 8002820:	e099      	b.n	8002956 <HAL_I2S_Receive_DMA+0x162>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b01      	cmp	r3, #1
 8002834:	d005      	beq.n	8002842 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
 8002840:	e089      	b.n	8002956 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2204      	movs	r2, #4
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d002      	beq.n	800286e <HAL_I2S_Receive_DMA+0x7a>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b05      	cmp	r3, #5
 800286c:	d10a      	bne.n	8002884 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	865a      	strh	r2, [r3, #50]	; 0x32
 8002882:	e005      	b.n	8002890 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	88fa      	ldrh	r2, [r7, #6]
 8002888:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	88fa      	ldrh	r2, [r7, #6]
 800288e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002894:	4a32      	ldr	r2, [pc, #200]	; (8002960 <HAL_I2S_Receive_DMA+0x16c>)
 8002896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289c:	4a31      	ldr	r2, [pc, #196]	; (8002964 <HAL_I2S_Receive_DMA+0x170>)
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a4:	4a30      	ldr	r2, [pc, #192]	; (8002968 <HAL_I2S_Receive_DMA+0x174>)
 80028a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028b6:	d10a      	bne.n	80028ce <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	4619      	mov	r1, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80028e4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80028e6:	f7ff f99f 	bl	8001c28 <HAL_DMA_Start_IT>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00f      	beq.n	8002910 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f043 0208 	orr.w	r2, r3, #8
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e022      	b.n	8002956 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291a:	2b00      	cmp	r3, #0
 800291c:	d107      	bne.n	800292e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69da      	ldr	r2, [r3, #28]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800292c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d107      	bne.n	800294c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	080029d7 	.word	0x080029d7
 8002964:	08002995 	.word	0x08002995
 8002968:	080029f3 	.word	0x080029f3

0800296c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10e      	bne.n	80029c8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7fe fb5f 	bl	800108c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7fe fb3b 	bl	8001060 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0203 	bic.w	r2, r2, #3
 8002a0e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f043 0208 	orr.w	r2, r3, #8
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f7ff ffa5 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	881a      	ldrh	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	1c9a      	adds	r2, r3, #2
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10e      	bne.n	8002a92 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a82:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff6d 	bl	800296c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	b292      	uxth	r2, r2
 8002aae:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	1c9a      	adds	r2, r3, #2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10e      	bne.n	8002af0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ae0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe face 	bl	800108c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d13a      	bne.n	8002b8a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d109      	bne.n	8002b32 <I2S_IRQHandler+0x3a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d102      	bne.n	8002b32 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ffb4 	bl	8002a9a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b40      	cmp	r3, #64	; 0x40
 8002b3a:	d126      	bne.n	8002b8a <I2S_IRQHandler+0x92>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d11f      	bne.n	8002b8a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b58:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	f043 0202 	orr.w	r2, r3, #2
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff fefb 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d136      	bne.n	8002c04 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d109      	bne.n	8002bb4 <I2S_IRQHandler+0xbc>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	2b80      	cmp	r3, #128	; 0x80
 8002bac:	d102      	bne.n	8002bb4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ff45 	bl	8002a3e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d122      	bne.n	8002c04 <I2S_IRQHandler+0x10c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d11b      	bne.n	8002c04 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bda:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f043 0204 	orr.w	r2, r3, #4
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff febe 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c04:	bf00      	nop
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d002      	beq.n	8002c38 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002c32:	2302      	movs	r3, #2
 8002c34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c36:	e160      	b.n	8002efa <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002c44:	887b      	ldrh	r3, [r7, #2]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e15a      	b.n	8002f04 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e152      	b.n	8002f04 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d002      	beq.n	8002c8a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b05      	cmp	r3, #5
 8002c88:	d114      	bne.n	8002cb4 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002c8a:	887b      	ldrh	r3, [r7, #2]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002ca8:	887b      	ldrh	r3, [r7, #2]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	865a      	strh	r2, [r3, #50]	; 0x32
 8002cb2:	e00b      	b.n	8002ccc <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	887a      	ldrh	r2, [r7, #2]
 8002cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	887a      	ldrh	r2, [r7, #2]
 8002cca:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2205      	movs	r2, #5
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cde:	4a8b      	ldr	r2, [pc, #556]	; (8002f0c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	4a8a      	ldr	r2, [pc, #552]	; (8002f10 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002ce8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	4a89      	ldr	r2, [pc, #548]	; (8002f14 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002cf0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	4a85      	ldr	r2, [pc, #532]	; (8002f0c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	4a84      	ldr	r2, [pc, #528]	; (8002f10 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002d00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	4a83      	ldr	r2, [pc, #524]	; (8002f14 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002d08:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d14:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d1c:	d002      	beq.n	8002d24 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d16b      	bne.n	8002dfc <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a79      	ldr	r2, [pc, #484]	; (8002f18 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002d36:	4b79      	ldr	r3, [pc, #484]	; (8002f1c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002d38:	e001      	b.n	8002d3e <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002d3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d3e:	330c      	adds	r3, #12
 8002d40:	4619      	mov	r1, r3
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f7fe ff6c 	bl	8001c28 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a70      	ldr	r2, [pc, #448]	; (8002f18 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002d5a:	4b70      	ldr	r3, [pc, #448]	; (8002f1c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002d5c:	e001      	b.n	8002d62 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002d5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	496b      	ldr	r1, [pc, #428]	; (8002f18 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002d6a:	428b      	cmp	r3, r1
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002d6e:	4b6b      	ldr	r3, [pc, #428]	; (8002f1c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002d70:	e001      	b.n	8002d76 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002d7c:	f107 0308 	add.w	r3, r7, #8
 8002d80:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	6819      	ldr	r1, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	330c      	adds	r3, #12
 8002d90:	461a      	mov	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f7fe ff46 	bl	8001c28 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0202 	orr.w	r2, r2, #2
 8002daa:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dba:	f000 809e 	beq.w	8002efa <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a55      	ldr	r2, [pc, #340]	; (8002f18 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d101      	bne.n	8002dcc <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002dc8:	4b54      	ldr	r3, [pc, #336]	; (8002f1c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002dca:	e001      	b.n	8002dd0 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002dcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd0:	69da      	ldr	r2, [r3, #28]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4950      	ldr	r1, [pc, #320]	; (8002f18 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002dd8:	428b      	cmp	r3, r1
 8002dda:	d101      	bne.n	8002de0 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	; (8002f1c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002dde:	e001      	b.n	8002de4 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002de8:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69da      	ldr	r2, [r3, #28]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002df8:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002dfa:	e07e      	b.n	8002efa <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e0a:	d10a      	bne.n	8002e22 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002e22:	f107 0308 	add.w	r3, r7, #8
 8002e26:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	6819      	ldr	r1, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a38      	ldr	r2, [pc, #224]	; (8002f18 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002e3a:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e3c:	e001      	b.n	8002e42 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002e3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e42:	330c      	adds	r3, #12
 8002e44:	461a      	mov	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	f7fe feec 	bl	8001c28 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a30      	ldr	r2, [pc, #192]	; (8002f18 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002e5a:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e5c:	e001      	b.n	8002e62 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002e5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	492b      	ldr	r1, [pc, #172]	; (8002f18 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e6a:	428b      	cmp	r3, r1
 8002e6c:	d101      	bne.n	8002e72 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002e6e:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e70:	e001      	b.n	8002e76 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e76:	f042 0202 	orr.w	r2, r2, #2
 8002e7a:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002e7c:	1d3b      	adds	r3, r7, #4
 8002e7e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f7fe fec7 	bl	8001c28 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb8:	d01e      	beq.n	8002ef8 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a16      	ldr	r2, [pc, #88]	; (8002f18 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002ec4:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ec6:	e001      	b.n	8002ecc <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002ec8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4911      	ldr	r1, [pc, #68]	; (8002f18 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ed4:	428b      	cmp	r3, r1
 8002ed6:	d101      	bne.n	8002edc <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002eda:	e001      	b.n	8002ee0 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002edc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ee4:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ef4:	61da      	str	r2, [r3, #28]
 8002ef6:	e000      	b.n	8002efa <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002ef8:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002f02:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	080031c9 	.word	0x080031c9
 8002f10:	080031e5 	.word	0x080031e5
 8002f14:	0800331d 	.word	0x0800331d
 8002f18:	40003800 	.word	0x40003800
 8002f1c:	40003400 	.word	0x40003400

08002f20 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4aa2      	ldr	r2, [pc, #648]	; (80031c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002f3a:	4ba2      	ldr	r3, [pc, #648]	; (80031c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f3c:	e001      	b.n	8002f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002f3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a9b      	ldr	r2, [pc, #620]	; (80031c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002f58:	4b9a      	ldr	r3, [pc, #616]	; (80031c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f5a:	e001      	b.n	8002f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002f5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6c:	d004      	beq.n	8002f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 8099 	bne.w	80030aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d107      	bne.n	8002f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fa05 	bl	800339c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d107      	bne.n	8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 faa8 	bl	80034fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	2b40      	cmp	r3, #64	; 0x40
 8002fb4:	d13a      	bne.n	800302c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d035      	beq.n	800302c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a7e      	ldr	r2, [pc, #504]	; (80031c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d101      	bne.n	8002fce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002fca:	4b7e      	ldr	r3, [pc, #504]	; (80031c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fcc:	e001      	b.n	8002fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002fce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4979      	ldr	r1, [pc, #484]	; (80031c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fda:	428b      	cmp	r3, r1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002fde:	4b79      	ldr	r3, [pc, #484]	; (80031c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fe0:	e001      	b.n	8002fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002fe2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fe6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ffa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f043 0202 	orr.w	r2, r3, #2
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fcaa 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b08      	cmp	r3, #8
 8003034:	f040 80be 	bne.w	80031b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80b8 	beq.w	80031b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003052:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a59      	ldr	r2, [pc, #356]	; (80031c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d101      	bne.n	8003062 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800305e:	4b59      	ldr	r3, [pc, #356]	; (80031c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003060:	e001      	b.n	8003066 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003062:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4954      	ldr	r1, [pc, #336]	; (80031c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800306e:	428b      	cmp	r3, r1
 8003070:	d101      	bne.n	8003076 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003072:	4b54      	ldr	r3, [pc, #336]	; (80031c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003074:	e001      	b.n	800307a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800307a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800307e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003080:	2300      	movs	r3, #0
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f043 0204 	orr.w	r2, r3, #4
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff fc6c 	bl	8002980 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030a8:	e084      	b.n	80031b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d107      	bne.n	80030c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f99e 	bl	8003400 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d107      	bne.n	80030de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f9dd 	bl	8003498 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	d12f      	bne.n	8003148 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d02a      	beq.n	8003148 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003100:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2e      	ldr	r2, [pc, #184]	; (80031c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d101      	bne.n	8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800310c:	4b2d      	ldr	r3, [pc, #180]	; (80031c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800310e:	e001      	b.n	8003114 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003110:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4929      	ldr	r1, [pc, #164]	; (80031c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800311c:	428b      	cmp	r3, r1
 800311e:	d101      	bne.n	8003124 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003120:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003122:	e001      	b.n	8003128 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003124:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003128:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800312c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f043 0202 	orr.w	r2, r3, #2
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fc1c 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b08      	cmp	r3, #8
 8003150:	d131      	bne.n	80031b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d02c      	beq.n	80031b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003166:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003168:	e001      	b.n	800316e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800316a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4912      	ldr	r1, [pc, #72]	; (80031c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003176:	428b      	cmp	r3, r1
 8003178:	d101      	bne.n	800317e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800317c:	e001      	b.n	8003182 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800317e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003182:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003186:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003196:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	f043 0204 	orr.w	r2, r3, #4
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fbe7 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031b2:	e000      	b.n	80031b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031b4:	bf00      	nop
}
 80031b6:	bf00      	nop
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40003800 	.word	0x40003800
 80031c4:	40003400 	.word	0x40003400

080031c8 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f7fd fefe 	bl	8000fd8 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f040 8084 	bne.w	8003304 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	429a      	cmp	r2, r3
 8003204:	d13c      	bne.n	8003280 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003214:	d006      	beq.n	8003224 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003220:	2b00      	cmp	r3, #0
 8003222:	d116      	bne.n	8003252 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a3a      	ldr	r2, [pc, #232]	; (8003314 <I2SEx_TxRxDMACplt+0x130>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <I2SEx_TxRxDMACplt+0x4e>
 800322e:	4b3a      	ldr	r3, [pc, #232]	; (8003318 <I2SEx_TxRxDMACplt+0x134>)
 8003230:	e001      	b.n	8003236 <I2SEx_TxRxDMACplt+0x52>
 8003232:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4935      	ldr	r1, [pc, #212]	; (8003314 <I2SEx_TxRxDMACplt+0x130>)
 800323e:	428b      	cmp	r3, r1
 8003240:	d101      	bne.n	8003246 <I2SEx_TxRxDMACplt+0x62>
 8003242:	4b35      	ldr	r3, [pc, #212]	; (8003318 <I2SEx_TxRxDMACplt+0x134>)
 8003244:	e001      	b.n	800324a <I2SEx_TxRxDMACplt+0x66>
 8003246:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	605a      	str	r2, [r3, #4]
 8003250:	e007      	b.n	8003262 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f7fd fece 	bl	800101c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	d13c      	bne.n	8003304 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003298:	d006      	beq.n	80032a8 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d108      	bne.n	80032ba <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0202 	bic.w	r2, r2, #2
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	e015      	b.n	80032e6 <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a15      	ldr	r2, [pc, #84]	; (8003314 <I2SEx_TxRxDMACplt+0x130>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d101      	bne.n	80032c8 <I2SEx_TxRxDMACplt+0xe4>
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <I2SEx_TxRxDMACplt+0x134>)
 80032c6:	e001      	b.n	80032cc <I2SEx_TxRxDMACplt+0xe8>
 80032c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4910      	ldr	r1, [pc, #64]	; (8003314 <I2SEx_TxRxDMACplt+0x130>)
 80032d4:	428b      	cmp	r3, r1
 80032d6:	d101      	bne.n	80032dc <I2SEx_TxRxDMACplt+0xf8>
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <I2SEx_TxRxDMACplt+0x134>)
 80032da:	e001      	b.n	80032e0 <I2SEx_TxRxDMACplt+0xfc>
 80032dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032e0:	f022 0202 	bic.w	r2, r2, #2
 80032e4:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7fd fe8c 	bl	800101c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f7fd fe89 	bl	800101c <HAL_I2SEx_TxRxCpltCallback>
}
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40003800 	.word	0x40003800
 8003318:	40003400 	.word	0x40003400

0800331c <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0203 	bic.w	r2, r2, #3
 8003338:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a15      	ldr	r2, [pc, #84]	; (8003394 <I2SEx_TxRxDMAError+0x78>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d101      	bne.n	8003348 <I2SEx_TxRxDMAError+0x2c>
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <I2SEx_TxRxDMAError+0x7c>)
 8003346:	e001      	b.n	800334c <I2SEx_TxRxDMAError+0x30>
 8003348:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4910      	ldr	r1, [pc, #64]	; (8003394 <I2SEx_TxRxDMAError+0x78>)
 8003354:	428b      	cmp	r3, r1
 8003356:	d101      	bne.n	800335c <I2SEx_TxRxDMAError+0x40>
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <I2SEx_TxRxDMAError+0x7c>)
 800335a:	e001      	b.n	8003360 <I2SEx_TxRxDMAError+0x44>
 800335c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003360:	f022 0203 	bic.w	r2, r2, #3
 8003364:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f043 0208 	orr.w	r2, r3, #8
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f7ff fafa 	bl	8002980 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40003800 	.word	0x40003800
 8003398:	40003400 	.word	0x40003400

0800339c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	1c99      	adds	r1, r3, #2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6251      	str	r1, [r2, #36]	; 0x24
 80033ae:	881a      	ldrh	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d113      	bne.n	80033f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fd fe13 	bl	800101c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	1c99      	adds	r1, r3, #2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6251      	str	r1, [r2, #36]	; 0x24
 8003412:	8819      	ldrh	r1, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <I2SEx_TxISR_I2SExt+0x90>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <I2SEx_TxISR_I2SExt+0x22>
 800341e:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <I2SEx_TxISR_I2SExt+0x94>)
 8003420:	e001      	b.n	8003426 <I2SEx_TxISR_I2SExt+0x26>
 8003422:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003426:	460a      	mov	r2, r1
 8003428:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d121      	bne.n	8003486 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <I2SEx_TxISR_I2SExt+0x90>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <I2SEx_TxISR_I2SExt+0x50>
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <I2SEx_TxISR_I2SExt+0x94>)
 800344e:	e001      	b.n	8003454 <I2SEx_TxISR_I2SExt+0x54>
 8003450:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	490d      	ldr	r1, [pc, #52]	; (8003490 <I2SEx_TxISR_I2SExt+0x90>)
 800345c:	428b      	cmp	r3, r1
 800345e:	d101      	bne.n	8003464 <I2SEx_TxISR_I2SExt+0x64>
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <I2SEx_TxISR_I2SExt+0x94>)
 8003462:	e001      	b.n	8003468 <I2SEx_TxISR_I2SExt+0x68>
 8003464:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003468:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800346c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d106      	bne.n	8003486 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7fd fdcb 	bl	800101c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40003800 	.word	0x40003800
 8003494:	40003400 	.word	0x40003400

08003498 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68d8      	ldr	r0, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	1c99      	adds	r1, r3, #2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	62d1      	str	r1, [r2, #44]	; 0x2c
 80034b0:	b282      	uxth	r2, r0
 80034b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d113      	bne.n	80034f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd fd94 	bl	800101c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a20      	ldr	r2, [pc, #128]	; (800358c <I2SEx_RxISR_I2SExt+0x90>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d101      	bne.n	8003512 <I2SEx_RxISR_I2SExt+0x16>
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <I2SEx_RxISR_I2SExt+0x94>)
 8003510:	e001      	b.n	8003516 <I2SEx_RxISR_I2SExt+0x1a>
 8003512:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003516:	68d8      	ldr	r0, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	1c99      	adds	r1, r3, #2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003522:	b282      	uxth	r2, r0
 8003524:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d121      	bne.n	8003582 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a12      	ldr	r2, [pc, #72]	; (800358c <I2SEx_RxISR_I2SExt+0x90>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <I2SEx_RxISR_I2SExt+0x50>
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <I2SEx_RxISR_I2SExt+0x94>)
 800354a:	e001      	b.n	8003550 <I2SEx_RxISR_I2SExt+0x54>
 800354c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	490d      	ldr	r1, [pc, #52]	; (800358c <I2SEx_RxISR_I2SExt+0x90>)
 8003558:	428b      	cmp	r3, r1
 800355a:	d101      	bne.n	8003560 <I2SEx_RxISR_I2SExt+0x64>
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <I2SEx_RxISR_I2SExt+0x94>)
 800355e:	e001      	b.n	8003564 <I2SEx_RxISR_I2SExt+0x68>
 8003560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003564:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003568:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7fd fd4d 	bl	800101c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40003800 	.word	0x40003800
 8003590:	40003400 	.word	0x40003400

08003594 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003596:	b08f      	sub	sp, #60	; 0x3c
 8003598:	af0a      	add	r7, sp, #40	; 0x28
 800359a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e10f      	b.n	80037c6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d106      	bne.n	80035c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f005 facb 	bl	8008b5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2203      	movs	r2, #3
 80035ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f001 ffe6 	bl	80055b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	687e      	ldr	r6, [r7, #4]
 80035f2:	466d      	mov	r5, sp
 80035f4:	f106 0410 	add.w	r4, r6, #16
 80035f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003600:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003604:	e885 0003 	stmia.w	r5, {r0, r1}
 8003608:	1d33      	adds	r3, r6, #4
 800360a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800360c:	6838      	ldr	r0, [r7, #0]
 800360e:	f001 febd 	bl	800538c <USB_CoreInit>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0d0      	b.n	80037c6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2100      	movs	r1, #0
 800362a:	4618      	mov	r0, r3
 800362c:	f001 ffd4 	bl	80055d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003630:	2300      	movs	r3, #0
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	e04a      	b.n	80036cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	333d      	adds	r3, #61	; 0x3d
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	333c      	adds	r3, #60	; 0x3c
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800365e:	7bfa      	ldrb	r2, [r7, #15]
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	b298      	uxth	r0, r3
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	3342      	adds	r3, #66	; 0x42
 8003672:	4602      	mov	r2, r0
 8003674:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003676:	7bfa      	ldrb	r2, [r7, #15]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	333f      	adds	r3, #63	; 0x3f
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	3344      	adds	r3, #68	; 0x44
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800369e:	7bfa      	ldrb	r2, [r7, #15]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	3348      	adds	r3, #72	; 0x48
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036b2:	7bfa      	ldrb	r2, [r7, #15]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	3350      	adds	r3, #80	; 0x50
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	3301      	adds	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d3af      	bcc.n	8003636 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	e044      	b.n	8003766 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036dc:	7bfa      	ldrb	r2, [r7, #15]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036f2:	7bfa      	ldrb	r2, [r7, #15]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003708:	7bfa      	ldrb	r2, [r7, #15]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800371e:	7bfa      	ldrb	r2, [r7, #15]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003734:	7bfa      	ldrb	r2, [r7, #15]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	3301      	adds	r3, #1
 8003764:	73fb      	strb	r3, [r7, #15]
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	429a      	cmp	r2, r3
 800376e:	d3b5      	bcc.n	80036dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	687e      	ldr	r6, [r7, #4]
 8003778:	466d      	mov	r5, sp
 800377a:	f106 0410 	add.w	r4, r6, #16
 800377e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003786:	e894 0003 	ldmia.w	r4, {r0, r1}
 800378a:	e885 0003 	stmia.w	r5, {r0, r1}
 800378e:	1d33      	adds	r3, r6, #4
 8003790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003792:	6838      	ldr	r0, [r7, #0]
 8003794:	f001 ff4a 	bl	800562c <USB_DevInit>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e00d      	b.n	80037c6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f002 ff92 	bl	80066e8 <USB_DevDisconnect>

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_PCD_Start+0x1c>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e020      	b.n	800382c <HAL_PCD_Start+0x5e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d109      	bne.n	800380e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d005      	beq.n	800380e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f001 febe 	bl	8005594 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f002 ff42 	bl	80066a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b08d      	sub	sp, #52	; 0x34
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f003 f800 	bl	8006850 <USB_GetMode>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 839d 	bne.w	8003f92 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f002 ff64 	bl	800672a <USB_ReadInterrupts>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8393 	beq.w	8003f90 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f002 ff5b 	bl	800672a <USB_ReadInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b02      	cmp	r3, #2
 800387c:	d107      	bne.n	800388e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f002 0202 	and.w	r2, r2, #2
 800388c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f002 ff49 	bl	800672a <USB_ReadInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	2b10      	cmp	r3, #16
 80038a0:	d161      	bne.n	8003966 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699a      	ldr	r2, [r3, #24]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0210 	bic.w	r2, r2, #16
 80038b0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f003 020f 	and.w	r2, r3, #15
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	3304      	adds	r3, #4
 80038d0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	0c5b      	lsrs	r3, r3, #17
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d124      	bne.n	8003928 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d035      	beq.n	8003956 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	6a38      	ldr	r0, [r7, #32]
 80038fe:	f002 fdaf 	bl	8006460 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800390e:	441a      	add	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003920:	441a      	add	r2, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	619a      	str	r2, [r3, #24]
 8003926:	e016      	b.n	8003956 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	0c5b      	lsrs	r3, r3, #17
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	2b06      	cmp	r3, #6
 8003932:	d110      	bne.n	8003956 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800393a:	2208      	movs	r2, #8
 800393c:	4619      	mov	r1, r3
 800393e:	6a38      	ldr	r0, [r7, #32]
 8003940:	f002 fd8e 	bl	8006460 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003950:	441a      	add	r2, r3
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699a      	ldr	r2, [r3, #24]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0210 	orr.w	r2, r2, #16
 8003964:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f002 fedd 	bl	800672a <USB_ReadInterrupts>
 8003970:	4603      	mov	r3, r0
 8003972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003976:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800397a:	d16e      	bne.n	8003a5a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f002 fee3 	bl	8006750 <USB_ReadDevAllOutEpInterrupt>
 800398a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800398c:	e062      	b.n	8003a54 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d057      	beq.n	8003a48 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f002 ff08 	bl	80067b8 <USB_ReadDevOutEPInterrupt>
 80039a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00c      	beq.n	80039ce <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c0:	461a      	mov	r2, r3
 80039c2:	2301      	movs	r3, #1
 80039c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80039c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fdb1 	bl	8004530 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00c      	beq.n	80039f2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e4:	461a      	mov	r2, r3
 80039e6:	2308      	movs	r3, #8
 80039e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80039ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 feab 	bl	8004748 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2310      	movs	r3, #16
 8003a0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a24:	461a      	mov	r2, r3
 8003a26:	2320      	movs	r3, #32
 8003a28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d009      	beq.n	8003a48 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a40:	461a      	mov	r2, r3
 8003a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d199      	bne.n	800398e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f002 fe63 	bl	800672a <USB_ReadInterrupts>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a6e:	f040 80c0 	bne.w	8003bf2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f002 fe84 	bl	8006784 <USB_ReadDevAllInEpInterrupt>
 8003a7c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a82:	e0b2      	b.n	8003bea <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80a7 	beq.w	8003bde <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f002 feaa 	bl	80067f4 <USB_ReadDevInEPInterrupt>
 8003aa0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d057      	beq.n	8003b5c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69f9      	ldr	r1, [r7, #28]
 8003ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003acc:	4013      	ands	r3, r2
 8003ace:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003adc:	461a      	mov	r2, r3
 8003ade:	2301      	movs	r3, #1
 8003ae0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d132      	bne.n	8003b50 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aee:	4613      	mov	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	3348      	adds	r3, #72	; 0x48
 8003afa:	6819      	ldr	r1, [r3, #0]
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4403      	add	r3, r0
 8003b0a:	3344      	adds	r3, #68	; 0x44
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4419      	add	r1, r3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4403      	add	r3, r0
 8003b1e:	3348      	adds	r3, #72	; 0x48
 8003b20:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d113      	bne.n	8003b50 <HAL_PCD_IRQHandler+0x31c>
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	3350      	adds	r3, #80	; 0x50
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d108      	bne.n	8003b50 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	f002 feb2 	bl	80068b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f005 f88f 	bl	8008c7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b72:	461a      	mov	r2, r3
 8003b74:	2308      	movs	r3, #8
 8003b76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d008      	beq.n	8003b94 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2310      	movs	r3, #16
 8003b92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003baa:	461a      	mov	r2, r3
 8003bac:	2340      	movs	r3, #64	; 0x40
 8003bae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2302      	movs	r3, #2
 8003bca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fc1b 	bl	8004414 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	3301      	adds	r3, #1
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f47f af49 	bne.w	8003a84 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f002 fd97 	bl	800672a <USB_ReadInterrupts>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c06:	d122      	bne.n	8003c4e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c16:	f023 0301 	bic.w	r3, r3, #1
 8003c1a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d108      	bne.n	8003c38 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c2e:	2100      	movs	r1, #0
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fe27 	bl	8004884 <HAL_PCDEx_LPM_Callback>
 8003c36:	e002      	b.n	8003c3e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f005 f895 	bl	8008d68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695a      	ldr	r2, [r3, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f002 fd69 	bl	800672a <USB_ReadInterrupts>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c62:	d112      	bne.n	8003c8a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d102      	bne.n	8003c7a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f005 f851 	bl	8008d1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c88:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f002 fd4b 	bl	800672a <USB_ReadInterrupts>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9e:	f040 80c7 	bne.w	8003e30 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2110      	movs	r1, #16
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f001 fe19 	bl	80058f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc6:	e056      	b.n	8003d76 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cda:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cec:	0151      	lsls	r1, r2, #5
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	440a      	add	r2, r1
 8003cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cfa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d0c:	0151      	lsls	r1, r2, #5
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	440a      	add	r2, r1
 8003d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d2e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d60:	0151      	lsls	r1, r2, #5
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	440a      	add	r2, r1
 8003d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d6e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	3301      	adds	r3, #1
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d3a3      	bcc.n	8003cc8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d8e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d92:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d016      	beq.n	8003dca <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dac:	f043 030b 	orr.w	r3, r3, #11
 8003db0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc2:	f043 030b 	orr.w	r3, r3, #11
 8003dc6:	6453      	str	r3, [r2, #68]	; 0x44
 8003dc8:	e015      	b.n	8003df6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ddc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003de0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df0:	f043 030b 	orr.w	r3, r3, #11
 8003df4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e04:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e08:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f002 fd4a 	bl	80068b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f002 fc78 	bl	800672a <USB_ReadInterrupts>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e44:	d124      	bne.n	8003e90 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f002 fd0e 	bl	800686c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 fdae 	bl	80059b6 <USB_GetDevSpeed>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681c      	ldr	r4, [r3, #0]
 8003e66:	f001 f947 	bl	80050f8 <HAL_RCC_GetHCLKFreq>
 8003e6a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	4620      	mov	r0, r4
 8003e76:	f001 faeb 	bl	8005450 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f004 ff25 	bl	8008cca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f002 fc48 	bl	800672a <USB_ReadInterrupts>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d10a      	bne.n	8003eba <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f004 ff02 	bl	8008cae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f002 0208 	and.w	r2, r2, #8
 8003eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f002 fc33 	bl	800672a <USB_ReadInterrupts>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ece:	d10f      	bne.n	8003ef0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	4619      	mov	r1, r3
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f004 ff64 	bl	8008da8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f002 fc18 	bl	800672a <USB_ReadInterrupts>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f04:	d10f      	bne.n	8003f26 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f004 ff37 	bl	8008d84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f002 fbfd 	bl	800672a <USB_ReadInterrupts>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3a:	d10a      	bne.n	8003f52 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f004 ff45 	bl	8008dcc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f002 fbe7 	bl	800672a <USB_ReadInterrupts>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d115      	bne.n	8003f92 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f004 ff35 	bl	8008de8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	e000      	b.n	8003f92 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003f90:	bf00      	nop
    }
  }
}
 8003f92:	3734      	adds	r7, #52	; 0x34
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd90      	pop	{r4, r7, pc}

08003f98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_PCD_SetAddress+0x1a>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e013      	b.n	8003fda <HAL_PCD_SetAddress+0x42>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	4611      	mov	r1, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f002 fb45 	bl	800665a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	4608      	mov	r0, r1
 8003fec:	4611      	mov	r1, r2
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	70fb      	strb	r3, [r7, #3]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	803b      	strh	r3, [r7, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004000:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004004:	2b00      	cmp	r3, #0
 8004006:	da0f      	bge.n	8004028 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	f003 020f 	and.w	r2, r3, #15
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	3338      	adds	r3, #56	; 0x38
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	4413      	add	r3, r2
 800401c:	3304      	adds	r3, #4
 800401e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	705a      	strb	r2, [r3, #1]
 8004026:	e00f      	b.n	8004048 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	f003 020f 	and.w	r2, r3, #15
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	3304      	adds	r3, #4
 8004040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	b2da      	uxtb	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004054:	883a      	ldrh	r2, [r7, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	78ba      	ldrb	r2, [r7, #2]
 800405e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	785b      	ldrb	r3, [r3, #1]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d004      	beq.n	8004072 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004072:	78bb      	ldrb	r3, [r7, #2]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d102      	bne.n	800407e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_PCD_EP_Open+0xaa>
 8004088:	2302      	movs	r3, #2
 800408a:	e00e      	b.n	80040aa <HAL_PCD_EP_Open+0xc8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68f9      	ldr	r1, [r7, #12]
 800409a:	4618      	mov	r0, r3
 800409c:	f001 fcb0 	bl	8005a00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80040a8:	7afb      	ldrb	r3, [r7, #11]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	da0f      	bge.n	80040e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	f003 020f 	and.w	r2, r3, #15
 80040cc:	4613      	mov	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	3338      	adds	r3, #56	; 0x38
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	4413      	add	r3, r2
 80040da:	3304      	adds	r3, #4
 80040dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	705a      	strb	r2, [r3, #1]
 80040e4:	e00f      	b.n	8004106 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	f003 020f 	and.w	r2, r3, #15
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	4413      	add	r3, r2
 80040fc:	3304      	adds	r3, #4
 80040fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	b2da      	uxtb	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_PCD_EP_Close+0x6e>
 800411c:	2302      	movs	r3, #2
 800411e:	e00e      	b.n	800413e <HAL_PCD_EP_Close+0x8c>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68f9      	ldr	r1, [r7, #12]
 800412e:	4618      	mov	r0, r3
 8004130:	f001 fcee 	bl	8005b10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b086      	sub	sp, #24
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
 8004152:	460b      	mov	r3, r1
 8004154:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004156:	7afb      	ldrb	r3, [r7, #11]
 8004158:	f003 020f 	and.w	r2, r3, #15
 800415c:	4613      	mov	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	3304      	adds	r3, #4
 800416e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2200      	movs	r2, #0
 8004180:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2200      	movs	r2, #0
 8004186:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004188:	7afb      	ldrb	r3, [r7, #11]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	b2da      	uxtb	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d102      	bne.n	80041a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041a2:	7afb      	ldrb	r3, [r7, #11]
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d109      	bne.n	80041c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	6979      	ldr	r1, [r7, #20]
 80041ba:	f001 ffc9 	bl	8006150 <USB_EP0StartXfer>
 80041be:	e008      	b.n	80041d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	6979      	ldr	r1, [r7, #20]
 80041ce:	f001 fd7b 	bl	8005cc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	f003 020f 	and.w	r2, r3, #15
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	607a      	str	r2, [r7, #4]
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	460b      	mov	r3, r1
 800421a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800421c:	7afb      	ldrb	r3, [r7, #11]
 800421e:	f003 020f 	and.w	r2, r3, #15
 8004222:	4613      	mov	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	3338      	adds	r3, #56	; 0x38
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	3304      	adds	r3, #4
 8004232:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2200      	movs	r2, #0
 8004244:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2201      	movs	r2, #1
 800424a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800424c:	7afb      	ldrb	r3, [r7, #11]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	b2da      	uxtb	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d102      	bne.n	8004266 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004266:	7afb      	ldrb	r3, [r7, #11]
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	6979      	ldr	r1, [r7, #20]
 800427e:	f001 ff67 	bl	8006150 <USB_EP0StartXfer>
 8004282:	e008      	b.n	8004296 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	6979      	ldr	r1, [r7, #20]
 8004292:	f001 fd19 	bl	8005cc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	f003 020f 	and.w	r2, r3, #15
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d901      	bls.n	80042be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e050      	b.n	8004360 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da0f      	bge.n	80042e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	3338      	adds	r3, #56	; 0x38
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	4413      	add	r3, r2
 80042da:	3304      	adds	r3, #4
 80042dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	705a      	strb	r2, [r3, #1]
 80042e4:	e00d      	b.n	8004302 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042e6:	78fa      	ldrb	r2, [r7, #3]
 80042e8:	4613      	mov	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	4413      	add	r3, r2
 80042f8:	3304      	adds	r3, #4
 80042fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	b2da      	uxtb	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_PCD_EP_SetStall+0x82>
 800431e:	2302      	movs	r3, #2
 8004320:	e01e      	b.n	8004360 <HAL_PCD_EP_SetStall+0xc0>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68f9      	ldr	r1, [r7, #12]
 8004330:	4618      	mov	r0, r3
 8004332:	f002 f8be 	bl	80064b2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	b2d9      	uxtb	r1, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004350:	461a      	mov	r2, r3
 8004352:	f002 faaf 	bl	80068b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	f003 020f 	and.w	r2, r3, #15
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	429a      	cmp	r2, r3
 8004380:	d901      	bls.n	8004386 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e042      	b.n	800440c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004386:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800438a:	2b00      	cmp	r3, #0
 800438c:	da0f      	bge.n	80043ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	f003 020f 	and.w	r2, r3, #15
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	3338      	adds	r3, #56	; 0x38
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4413      	add	r3, r2
 80043a2:	3304      	adds	r3, #4
 80043a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	705a      	strb	r2, [r3, #1]
 80043ac:	e00f      	b.n	80043ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	4413      	add	r3, r2
 80043c4:	3304      	adds	r3, #4
 80043c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_PCD_EP_ClrStall+0x86>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e00e      	b.n	800440c <HAL_PCD_EP_ClrStall+0xa4>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68f9      	ldr	r1, [r7, #12]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f002 f8c6 	bl	800658e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af02      	add	r7, sp, #8
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	4613      	mov	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	3338      	adds	r3, #56	; 0x38
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4413      	add	r3, r2
 8004438:	3304      	adds	r3, #4
 800443a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	699a      	ldr	r2, [r3, #24]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	429a      	cmp	r2, r3
 8004446:	d901      	bls.n	800444c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e06c      	b.n	8004526 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	429a      	cmp	r2, r3
 8004460:	d902      	bls.n	8004468 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3303      	adds	r3, #3
 800446c:	089b      	lsrs	r3, r3, #2
 800446e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004470:	e02b      	b.n	80044ca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	429a      	cmp	r2, r3
 8004486:	d902      	bls.n	800448e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3303      	adds	r3, #3
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	68d9      	ldr	r1, [r3, #12]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	4603      	mov	r3, r0
 80044ac:	6978      	ldr	r0, [r7, #20]
 80044ae:	f001 ffa2 	bl	80063f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	441a      	add	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	441a      	add	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d809      	bhi.n	80044f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d203      	bcs.n	80044f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1be      	bne.n	8004472 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	695a      	ldr	r2, [r3, #20]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d811      	bhi.n	8004524 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	2201      	movs	r2, #1
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	43db      	mvns	r3, r3
 800451a:	6939      	ldr	r1, [r7, #16]
 800451c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004520:	4013      	ands	r3, r2
 8004522:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	333c      	adds	r3, #60	; 0x3c
 8004548:	3304      	adds	r3, #4
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2b01      	cmp	r3, #1
 8004564:	f040 80a0 	bne.w	80046a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d015      	beq.n	800459e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a72      	ldr	r2, [pc, #456]	; (8004740 <PCD_EP_OutXfrComplete_int+0x210>)
 8004576:	4293      	cmp	r3, r2
 8004578:	f240 80dd 	bls.w	8004736 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80d7 	beq.w	8004736 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004594:	461a      	mov	r2, r3
 8004596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800459a:	6093      	str	r3, [r2, #8]
 800459c:	e0cb      	b.n	8004736 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d009      	beq.n	80045bc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b4:	461a      	mov	r2, r3
 80045b6:	2320      	movs	r3, #32
 80045b8:	6093      	str	r3, [r2, #8]
 80045ba:	e0bc      	b.n	8004736 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f040 80b7 	bne.w	8004736 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4a5d      	ldr	r2, [pc, #372]	; (8004740 <PCD_EP_OutXfrComplete_int+0x210>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d90f      	bls.n	80045f0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e6:	461a      	mov	r2, r3
 80045e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ec:	6093      	str	r3, [r2, #8]
 80045ee:	e0a2      	b.n	8004736 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004602:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	0159      	lsls	r1, r3, #5
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	440b      	add	r3, r1
 800460c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004616:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	4613      	mov	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4403      	add	r3, r0
 8004626:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800462a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	1a9b      	subs	r3, r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800463e:	6819      	ldr	r1, [r3, #0]
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4403      	add	r3, r0
 800464e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4419      	add	r1, r3
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	4613      	mov	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4403      	add	r3, r0
 8004664:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004668:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d114      	bne.n	800469a <PCD_EP_OutXfrComplete_int+0x16a>
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d108      	bne.n	800469a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004692:	461a      	mov	r2, r3
 8004694:	2101      	movs	r1, #1
 8004696:	f002 f90d 	bl	80068b4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	4619      	mov	r1, r3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f004 facf 	bl	8008c44 <HAL_PCD_DataOutStageCallback>
 80046a6:	e046      	b.n	8004736 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a26      	ldr	r2, [pc, #152]	; (8004744 <PCD_EP_OutXfrComplete_int+0x214>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d124      	bne.n	80046fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c6:	461a      	mov	r2, r3
 80046c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046cc:	6093      	str	r3, [r2, #8]
 80046ce:	e032      	b.n	8004736 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d008      	beq.n	80046ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e6:	461a      	mov	r2, r3
 80046e8:	2320      	movs	r3, #32
 80046ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	4619      	mov	r1, r3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f004 faa6 	bl	8008c44 <HAL_PCD_DataOutStageCallback>
 80046f8:	e01d      	b.n	8004736 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d114      	bne.n	800472a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d108      	bne.n	800472a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004722:	461a      	mov	r2, r3
 8004724:	2100      	movs	r1, #0
 8004726:	f002 f8c5 	bl	80068b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f004 fa87 	bl	8008c44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	4f54300a 	.word	0x4f54300a
 8004744:	4f54310a 	.word	0x4f54310a

08004748 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	333c      	adds	r3, #60	; 0x3c
 8004760:	3304      	adds	r3, #4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d90e      	bls.n	800479c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004784:	2b00      	cmp	r3, #0
 8004786:	d009      	beq.n	800479c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004794:	461a      	mov	r2, r3
 8004796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800479a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f004 fa3f 	bl	8008c20 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d90c      	bls.n	80047c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d108      	bne.n	80047c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047bc:	461a      	mov	r2, r3
 80047be:	2101      	movs	r1, #1
 80047c0:	f002 f878 	bl	80068b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	4f54300a 	.word	0x4f54300a

080047d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	70fb      	strb	r3, [r7, #3]
 80047e0:	4613      	mov	r3, r2
 80047e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d107      	bne.n	8004802 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80047f2:	883b      	ldrh	r3, [r7, #0]
 80047f4:	0419      	lsls	r1, r3, #16
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004800:	e028      	b.n	8004854 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004808:	0c1b      	lsrs	r3, r3, #16
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	4413      	add	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]
 8004814:	e00d      	b.n	8004832 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	3340      	adds	r3, #64	; 0x40
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	4413      	add	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	3301      	adds	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	7bfa      	ldrb	r2, [r7, #15]
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	3b01      	subs	r3, #1
 8004838:	429a      	cmp	r2, r3
 800483a:	d3ec      	bcc.n	8004816 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800483c:	883b      	ldrh	r3, [r7, #0]
 800483e:	0418      	lsls	r0, r3, #16
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	3b01      	subs	r3, #1
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	4302      	orrs	r2, r0
 800484c:	3340      	adds	r3, #64	; 0x40
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	460b      	mov	r3, r1
 800486c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	887a      	ldrh	r2, [r7, #2]
 8004874:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e25b      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d075      	beq.n	80049a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ba:	4ba3      	ldr	r3, [pc, #652]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d00c      	beq.n	80048e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c6:	4ba0      	ldr	r3, [pc, #640]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d112      	bne.n	80048f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d2:	4b9d      	ldr	r3, [pc, #628]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048de:	d10b      	bne.n	80048f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e0:	4b99      	ldr	r3, [pc, #612]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d05b      	beq.n	80049a4 <HAL_RCC_OscConfig+0x108>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d157      	bne.n	80049a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e236      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004900:	d106      	bne.n	8004910 <HAL_RCC_OscConfig+0x74>
 8004902:	4b91      	ldr	r3, [pc, #580]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a90      	ldr	r2, [pc, #576]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e01d      	b.n	800494c <HAL_RCC_OscConfig+0xb0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004918:	d10c      	bne.n	8004934 <HAL_RCC_OscConfig+0x98>
 800491a:	4b8b      	ldr	r3, [pc, #556]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a8a      	ldr	r2, [pc, #552]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	4b88      	ldr	r3, [pc, #544]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a87      	ldr	r2, [pc, #540]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e00b      	b.n	800494c <HAL_RCC_OscConfig+0xb0>
 8004934:	4b84      	ldr	r3, [pc, #528]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a83      	ldr	r2, [pc, #524]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 800493a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	4b81      	ldr	r3, [pc, #516]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a80      	ldr	r2, [pc, #512]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800494a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004954:	f7fc ff5e 	bl	8001814 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800495c:	f7fc ff5a 	bl	8001814 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b64      	cmp	r3, #100	; 0x64
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e1fb      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	4b76      	ldr	r3, [pc, #472]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0xc0>
 800497a:	e014      	b.n	80049a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497c:	f7fc ff4a 	bl	8001814 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004984:	f7fc ff46 	bl	8001814 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	; 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e1e7      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004996:	4b6c      	ldr	r3, [pc, #432]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0xe8>
 80049a2:	e000      	b.n	80049a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d063      	beq.n	8004a7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049b2:	4b65      	ldr	r3, [pc, #404]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00b      	beq.n	80049d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049be:	4b62      	ldr	r3, [pc, #392]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d11c      	bne.n	8004a04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ca:	4b5f      	ldr	r3, [pc, #380]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d116      	bne.n	8004a04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d6:	4b5c      	ldr	r3, [pc, #368]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_RCC_OscConfig+0x152>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d001      	beq.n	80049ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e1bb      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ee:	4b56      	ldr	r3, [pc, #344]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4952      	ldr	r1, [pc, #328]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a02:	e03a      	b.n	8004a7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a0c:	4b4f      	ldr	r3, [pc, #316]	; (8004b4c <HAL_RCC_OscConfig+0x2b0>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fc feff 	bl	8001814 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a1a:	f7fc fefb 	bl	8001814 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e19c      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2c:	4b46      	ldr	r3, [pc, #280]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0f0      	beq.n	8004a1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a38:	4b43      	ldr	r3, [pc, #268]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4940      	ldr	r1, [pc, #256]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	600b      	str	r3, [r1, #0]
 8004a4c:	e015      	b.n	8004a7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a4e:	4b3f      	ldr	r3, [pc, #252]	; (8004b4c <HAL_RCC_OscConfig+0x2b0>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fc fede 	bl	8001814 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a5c:	f7fc feda 	bl	8001814 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e17b      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6e:	4b36      	ldr	r3, [pc, #216]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d030      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8e:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <HAL_RCC_OscConfig+0x2b4>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a94:	f7fc febe 	bl	8001814 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a9c:	f7fc feba 	bl	8001814 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e15b      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aae:	4b26      	ldr	r3, [pc, #152]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x200>
 8004aba:	e015      	b.n	8004ae8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004abc:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <HAL_RCC_OscConfig+0x2b4>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac2:	f7fc fea7 	bl	8001814 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aca:	f7fc fea3 	bl	8001814 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e144      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004adc:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1f0      	bne.n	8004aca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80a0 	beq.w	8004c36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004af6:	2300      	movs	r3, #0
 8004af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004afa:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10f      	bne.n	8004b26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	4a0e      	ldr	r2, [pc, #56]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b14:	6413      	str	r3, [r2, #64]	; 0x40
 8004b16:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <HAL_RCC_OscConfig+0x2ac>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b22:	2301      	movs	r3, #1
 8004b24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_RCC_OscConfig+0x2b8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d121      	bne.n	8004b76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b32:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <HAL_RCC_OscConfig+0x2b8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a07      	ldr	r2, [pc, #28]	; (8004b54 <HAL_RCC_OscConfig+0x2b8>)
 8004b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b3e:	f7fc fe69 	bl	8001814 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	e011      	b.n	8004b6a <HAL_RCC_OscConfig+0x2ce>
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	42470000 	.word	0x42470000
 8004b50:	42470e80 	.word	0x42470e80
 8004b54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b58:	f7fc fe5c 	bl	8001814 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e0fd      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6a:	4b81      	ldr	r3, [pc, #516]	; (8004d70 <HAL_RCC_OscConfig+0x4d4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d106      	bne.n	8004b8c <HAL_RCC_OscConfig+0x2f0>
 8004b7e:	4b7d      	ldr	r3, [pc, #500]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	4a7c      	ldr	r2, [pc, #496]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	6713      	str	r3, [r2, #112]	; 0x70
 8004b8a:	e01c      	b.n	8004bc6 <HAL_RCC_OscConfig+0x32a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b05      	cmp	r3, #5
 8004b92:	d10c      	bne.n	8004bae <HAL_RCC_OscConfig+0x312>
 8004b94:	4b77      	ldr	r3, [pc, #476]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b98:	4a76      	ldr	r2, [pc, #472]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004b9a:	f043 0304 	orr.w	r3, r3, #4
 8004b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba0:	4b74      	ldr	r3, [pc, #464]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba4:	4a73      	ldr	r2, [pc, #460]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	6713      	str	r3, [r2, #112]	; 0x70
 8004bac:	e00b      	b.n	8004bc6 <HAL_RCC_OscConfig+0x32a>
 8004bae:	4b71      	ldr	r3, [pc, #452]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	4a70      	ldr	r2, [pc, #448]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bba:	4b6e      	ldr	r3, [pc, #440]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	4a6d      	ldr	r2, [pc, #436]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004bc0:	f023 0304 	bic.w	r3, r3, #4
 8004bc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d015      	beq.n	8004bfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bce:	f7fc fe21 	bl	8001814 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd4:	e00a      	b.n	8004bec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd6:	f7fc fe1d 	bl	8001814 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0bc      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bec:	4b61      	ldr	r3, [pc, #388]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0ee      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x33a>
 8004bf8:	e014      	b.n	8004c24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfa:	f7fc fe0b 	bl	8001814 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c00:	e00a      	b.n	8004c18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c02:	f7fc fe07 	bl	8001814 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e0a6      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c18:	4b56      	ldr	r3, [pc, #344]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1ee      	bne.n	8004c02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d105      	bne.n	8004c36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c2a:	4b52      	ldr	r3, [pc, #328]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	4a51      	ldr	r2, [pc, #324]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8092 	beq.w	8004d64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c40:	4b4c      	ldr	r3, [pc, #304]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 030c 	and.w	r3, r3, #12
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d05c      	beq.n	8004d06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d141      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c54:	4b48      	ldr	r3, [pc, #288]	; (8004d78 <HAL_RCC_OscConfig+0x4dc>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5a:	f7fc fddb 	bl	8001814 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c62:	f7fc fdd7 	bl	8001814 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e078      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c74:	4b3f      	ldr	r3, [pc, #252]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f0      	bne.n	8004c62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69da      	ldr	r2, [r3, #28]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	019b      	lsls	r3, r3, #6
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	061b      	lsls	r3, r3, #24
 8004ca4:	4933      	ldr	r1, [pc, #204]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004caa:	4b33      	ldr	r3, [pc, #204]	; (8004d78 <HAL_RCC_OscConfig+0x4dc>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb0:	f7fc fdb0 	bl	8001814 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb8:	f7fc fdac 	bl	8001814 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e04d      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cca:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x41c>
 8004cd6:	e045      	b.n	8004d64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd8:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <HAL_RCC_OscConfig+0x4dc>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fc fd99 	bl	8001814 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce6:	f7fc fd95 	bl	8001814 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e036      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf8:	4b1e      	ldr	r3, [pc, #120]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1f0      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x44a>
 8004d04:	e02e      	b.n	8004d64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e029      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d12:	4b18      	ldr	r3, [pc, #96]	; (8004d74 <HAL_RCC_OscConfig+0x4d8>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d11c      	bne.n	8004d60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d115      	bne.n	8004d60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d10d      	bne.n	8004d60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d106      	bne.n	8004d60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40007000 	.word	0x40007000
 8004d74:	40023800 	.word	0x40023800
 8004d78:	42470060 	.word	0x42470060

08004d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0cc      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d90:	4b68      	ldr	r3, [pc, #416]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d90c      	bls.n	8004db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b65      	ldr	r3, [pc, #404]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da6:	4b63      	ldr	r3, [pc, #396]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d001      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0b8      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d020      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dd0:	4b59      	ldr	r3, [pc, #356]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4a58      	ldr	r2, [pc, #352]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de8:	4b53      	ldr	r3, [pc, #332]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	4a52      	ldr	r2, [pc, #328]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df4:	4b50      	ldr	r3, [pc, #320]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	494d      	ldr	r1, [pc, #308]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d044      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d107      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1a:	4b47      	ldr	r3, [pc, #284]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d119      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e07f      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d003      	beq.n	8004e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d107      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3a:	4b3f      	ldr	r3, [pc, #252]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e06f      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4a:	4b3b      	ldr	r3, [pc, #236]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e067      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e5a:	4b37      	ldr	r3, [pc, #220]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 0203 	bic.w	r2, r3, #3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	4934      	ldr	r1, [pc, #208]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e6c:	f7fc fcd2 	bl	8001814 <HAL_GetTick>
 8004e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e74:	f7fc fcce 	bl	8001814 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e04f      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8a:	4b2b      	ldr	r3, [pc, #172]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 020c 	and.w	r2, r3, #12
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d1eb      	bne.n	8004e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b25      	ldr	r3, [pc, #148]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 030f 	and.w	r3, r3, #15
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d20c      	bcs.n	8004ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b22      	ldr	r3, [pc, #136]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	4b20      	ldr	r3, [pc, #128]	; (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e032      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed0:	4b19      	ldr	r3, [pc, #100]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4916      	ldr	r1, [pc, #88]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eee:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	490e      	ldr	r1, [pc, #56]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f02:	f000 f821 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8004f06:	4601      	mov	r1, r0
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <HAL_RCC_ClockConfig+0x1c0>)
 8004f14:	5cd3      	ldrb	r3, [r2, r3]
 8004f16:	fa21 f303 	lsr.w	r3, r1, r3
 8004f1a:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f1e:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <HAL_RCC_ClockConfig+0x1c8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fc fc32 	bl	800178c <HAL_InitTick>

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40023c00 	.word	0x40023c00
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	0800cf00 	.word	0x0800cf00
 8004f40:	2000040c 	.word	0x2000040c
 8004f44:	20000410 	.word	0x20000410

08004f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	2300      	movs	r3, #0
 8004f58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f5e:	4b63      	ldr	r3, [pc, #396]	; (80050ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d007      	beq.n	8004f7a <HAL_RCC_GetSysClockFreq+0x32>
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d008      	beq.n	8004f80 <HAL_RCC_GetSysClockFreq+0x38>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f040 80b4 	bne.w	80050dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f74:	4b5e      	ldr	r3, [pc, #376]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f76:	60bb      	str	r3, [r7, #8]
       break;
 8004f78:	e0b3      	b.n	80050e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f7a:	4b5e      	ldr	r3, [pc, #376]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004f7c:	60bb      	str	r3, [r7, #8]
      break;
 8004f7e:	e0b0      	b.n	80050e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f80:	4b5a      	ldr	r3, [pc, #360]	; (80050ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f8a:	4b58      	ldr	r3, [pc, #352]	; (80050ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d04a      	beq.n	800502c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f96:	4b55      	ldr	r3, [pc, #340]	; (80050ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	099b      	lsrs	r3, r3, #6
 8004f9c:	f04f 0400 	mov.w	r4, #0
 8004fa0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	ea03 0501 	and.w	r5, r3, r1
 8004fac:	ea04 0602 	and.w	r6, r4, r2
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	4632      	mov	r2, r6
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	f04f 0400 	mov.w	r4, #0
 8004fbc:	0154      	lsls	r4, r2, #5
 8004fbe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fc2:	014b      	lsls	r3, r1, #5
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	1b49      	subs	r1, r1, r5
 8004fca:	eb62 0206 	sbc.w	r2, r2, r6
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	f04f 0400 	mov.w	r4, #0
 8004fd6:	0194      	lsls	r4, r2, #6
 8004fd8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fdc:	018b      	lsls	r3, r1, #6
 8004fde:	1a5b      	subs	r3, r3, r1
 8004fe0:	eb64 0402 	sbc.w	r4, r4, r2
 8004fe4:	f04f 0100 	mov.w	r1, #0
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	00e2      	lsls	r2, r4, #3
 8004fee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ff2:	00d9      	lsls	r1, r3, #3
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4614      	mov	r4, r2
 8004ff8:	195b      	adds	r3, r3, r5
 8004ffa:	eb44 0406 	adc.w	r4, r4, r6
 8004ffe:	f04f 0100 	mov.w	r1, #0
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	0262      	lsls	r2, r4, #9
 8005008:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800500c:	0259      	lsls	r1, r3, #9
 800500e:	460b      	mov	r3, r1
 8005010:	4614      	mov	r4, r2
 8005012:	4618      	mov	r0, r3
 8005014:	4621      	mov	r1, r4
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f04f 0400 	mov.w	r4, #0
 800501c:	461a      	mov	r2, r3
 800501e:	4623      	mov	r3, r4
 8005020:	f7fb fb4a 	bl	80006b8 <__aeabi_uldivmod>
 8005024:	4603      	mov	r3, r0
 8005026:	460c      	mov	r4, r1
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e049      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800502c:	4b2f      	ldr	r3, [pc, #188]	; (80050ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	099b      	lsrs	r3, r3, #6
 8005032:	f04f 0400 	mov.w	r4, #0
 8005036:	f240 11ff 	movw	r1, #511	; 0x1ff
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	ea03 0501 	and.w	r5, r3, r1
 8005042:	ea04 0602 	and.w	r6, r4, r2
 8005046:	4629      	mov	r1, r5
 8005048:	4632      	mov	r2, r6
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	f04f 0400 	mov.w	r4, #0
 8005052:	0154      	lsls	r4, r2, #5
 8005054:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005058:	014b      	lsls	r3, r1, #5
 800505a:	4619      	mov	r1, r3
 800505c:	4622      	mov	r2, r4
 800505e:	1b49      	subs	r1, r1, r5
 8005060:	eb62 0206 	sbc.w	r2, r2, r6
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	f04f 0400 	mov.w	r4, #0
 800506c:	0194      	lsls	r4, r2, #6
 800506e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005072:	018b      	lsls	r3, r1, #6
 8005074:	1a5b      	subs	r3, r3, r1
 8005076:	eb64 0402 	sbc.w	r4, r4, r2
 800507a:	f04f 0100 	mov.w	r1, #0
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	00e2      	lsls	r2, r4, #3
 8005084:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005088:	00d9      	lsls	r1, r3, #3
 800508a:	460b      	mov	r3, r1
 800508c:	4614      	mov	r4, r2
 800508e:	195b      	adds	r3, r3, r5
 8005090:	eb44 0406 	adc.w	r4, r4, r6
 8005094:	f04f 0100 	mov.w	r1, #0
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	02a2      	lsls	r2, r4, #10
 800509e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80050a2:	0299      	lsls	r1, r3, #10
 80050a4:	460b      	mov	r3, r1
 80050a6:	4614      	mov	r4, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	4621      	mov	r1, r4
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f04f 0400 	mov.w	r4, #0
 80050b2:	461a      	mov	r2, r3
 80050b4:	4623      	mov	r3, r4
 80050b6:	f7fb faff 	bl	80006b8 <__aeabi_uldivmod>
 80050ba:	4603      	mov	r3, r0
 80050bc:	460c      	mov	r4, r1
 80050be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	0c1b      	lsrs	r3, r3, #16
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	3301      	adds	r3, #1
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	60bb      	str	r3, [r7, #8]
      break;
 80050da:	e002      	b.n	80050e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80050de:	60bb      	str	r3, [r7, #8]
      break;
 80050e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050e2:	68bb      	ldr	r3, [r7, #8]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ec:	40023800 	.word	0x40023800
 80050f0:	00f42400 	.word	0x00f42400
 80050f4:	007a1200 	.word	0x007a1200

080050f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050fc:	4b03      	ldr	r3, [pc, #12]	; (800510c <HAL_RCC_GetHCLKFreq+0x14>)
 80050fe:	681b      	ldr	r3, [r3, #0]
}
 8005100:	4618      	mov	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	2000040c 	.word	0x2000040c

08005110 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d105      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005134:	2b00      	cmp	r3, #0
 8005136:	d035      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005138:	4b62      	ldr	r3, [pc, #392]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800513e:	f7fc fb69 	bl	8001814 <HAL_GetTick>
 8005142:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005144:	e008      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005146:	f7fc fb65 	bl	8001814 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e0b0      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005158:	4b5b      	ldr	r3, [pc, #364]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f0      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	019a      	lsls	r2, r3, #6
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	071b      	lsls	r3, r3, #28
 8005170:	4955      	ldr	r1, [pc, #340]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005178:	4b52      	ldr	r3, [pc, #328]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800517a:	2201      	movs	r2, #1
 800517c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800517e:	f7fc fb49 	bl	8001814 <HAL_GetTick>
 8005182:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005184:	e008      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005186:	f7fc fb45 	bl	8001814 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e090      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005198:	4b4b      	ldr	r3, [pc, #300]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0f0      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8083 	beq.w	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	4b44      	ldr	r3, [pc, #272]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	4a43      	ldr	r2, [pc, #268]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c0:	6413      	str	r3, [r2, #64]	; 0x40
 80051c2:	4b41      	ldr	r3, [pc, #260]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051ce:	4b3f      	ldr	r3, [pc, #252]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a3e      	ldr	r2, [pc, #248]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051da:	f7fc fb1b 	bl	8001814 <HAL_GetTick>
 80051de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051e0:	e008      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051e2:	f7fc fb17 	bl	8001814 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e062      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051f4:	4b35      	ldr	r3, [pc, #212]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005200:	4b31      	ldr	r3, [pc, #196]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005208:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d02f      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	429a      	cmp	r2, r3
 800521c:	d028      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800521e:	4b2a      	ldr	r3, [pc, #168]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005226:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005228:	4b29      	ldr	r3, [pc, #164]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800522e:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005234:	4a24      	ldr	r2, [pc, #144]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800523a:	4b23      	ldr	r3, [pc, #140]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b01      	cmp	r3, #1
 8005244:	d114      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005246:	f7fc fae5 	bl	8001814 <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524c:	e00a      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800524e:	f7fc fae1 	bl	8001814 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f241 3288 	movw	r2, #5000	; 0x1388
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e02a      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005264:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0ee      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527c:	d10d      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800528e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005292:	490d      	ldr	r1, [pc, #52]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005294:	4313      	orrs	r3, r2
 8005296:	608b      	str	r3, [r1, #8]
 8005298:	e005      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052a4:	6093      	str	r3, [r2, #8]
 80052a6:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b2:	4905      	ldr	r1, [pc, #20]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	42470068 	.word	0x42470068
 80052c8:	40023800 	.word	0x40023800
 80052cc:	40007000 	.word	0x40007000
 80052d0:	42470e40 	.word	0x42470e40

080052d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d13d      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80052f2:	4b22      	ldr	r3, [pc, #136]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052fa:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d004      	beq.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005302:	2b01      	cmp	r3, #1
 8005304:	d12f      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005306:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005308:	617b      	str	r3, [r7, #20]
          break;
 800530a:	e02f      	b.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800530c:	4b1b      	ldr	r3, [pc, #108]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005318:	d108      	bne.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800531a:	4b18      	ldr	r3, [pc, #96]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005322:	4a18      	ldr	r2, [pc, #96]	; (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	e007      	b.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800532c:	4b13      	ldr	r3, [pc, #76]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005334:	4a14      	ldr	r2, [pc, #80]	; (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005336:	fbb2 f3f3 	udiv	r3, r2, r3
 800533a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800533c:	4b0f      	ldr	r3, [pc, #60]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800533e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005342:	099b      	lsrs	r3, r3, #6
 8005344:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005350:	4b0a      	ldr	r3, [pc, #40]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005356:	0f1b      	lsrs	r3, r3, #28
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005362:	617b      	str	r3, [r7, #20]
          break;
 8005364:	e002      	b.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]
          break;
 800536a:	bf00      	nop
        }
      }
      break;
 800536c:	bf00      	nop
    }
  }
  return frequency;
 800536e:	697b      	ldr	r3, [r7, #20]
}
 8005370:	4618      	mov	r0, r3
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	40023800 	.word	0x40023800
 8005380:	00bb8000 	.word	0x00bb8000
 8005384:	007a1200 	.word	0x007a1200
 8005388:	00f42400 	.word	0x00f42400

0800538c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800538c:	b084      	sub	sp, #16
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	f107 001c 	add.w	r0, r7, #28
 800539a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d122      	bne.n	80053ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d105      	bne.n	80053de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f001 fac6 	bl	8006970 <USB_CoreReset>
 80053e4:	4603      	mov	r3, r0
 80053e6:	73fb      	strb	r3, [r7, #15]
 80053e8:	e01a      	b.n	8005420 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f001 faba 	bl	8006970 <USB_CoreReset>
 80053fc:	4603      	mov	r3, r0
 80053fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
 8005412:	e005      	b.n	8005420 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	2b01      	cmp	r3, #1
 8005424:	d10b      	bne.n	800543e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f043 0206 	orr.w	r2, r3, #6
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f043 0220 	orr.w	r2, r3, #32
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800543e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800544a:	b004      	add	sp, #16
 800544c:	4770      	bx	lr
	...

08005450 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	4613      	mov	r3, r2
 800545c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d165      	bne.n	8005530 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4a41      	ldr	r2, [pc, #260]	; (800556c <USB_SetTurnaroundTime+0x11c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d906      	bls.n	800547a <USB_SetTurnaroundTime+0x2a>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4a40      	ldr	r2, [pc, #256]	; (8005570 <USB_SetTurnaroundTime+0x120>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d802      	bhi.n	800547a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005474:	230f      	movs	r3, #15
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e062      	b.n	8005540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	4a3c      	ldr	r2, [pc, #240]	; (8005570 <USB_SetTurnaroundTime+0x120>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d906      	bls.n	8005490 <USB_SetTurnaroundTime+0x40>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4a3b      	ldr	r2, [pc, #236]	; (8005574 <USB_SetTurnaroundTime+0x124>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d802      	bhi.n	8005490 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800548a:	230e      	movs	r3, #14
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e057      	b.n	8005540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4a38      	ldr	r2, [pc, #224]	; (8005574 <USB_SetTurnaroundTime+0x124>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d906      	bls.n	80054a6 <USB_SetTurnaroundTime+0x56>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4a37      	ldr	r2, [pc, #220]	; (8005578 <USB_SetTurnaroundTime+0x128>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d802      	bhi.n	80054a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054a0:	230d      	movs	r3, #13
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e04c      	b.n	8005540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4a33      	ldr	r2, [pc, #204]	; (8005578 <USB_SetTurnaroundTime+0x128>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d906      	bls.n	80054bc <USB_SetTurnaroundTime+0x6c>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4a32      	ldr	r2, [pc, #200]	; (800557c <USB_SetTurnaroundTime+0x12c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d802      	bhi.n	80054bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054b6:	230c      	movs	r3, #12
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e041      	b.n	8005540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a2f      	ldr	r2, [pc, #188]	; (800557c <USB_SetTurnaroundTime+0x12c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d906      	bls.n	80054d2 <USB_SetTurnaroundTime+0x82>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4a2e      	ldr	r2, [pc, #184]	; (8005580 <USB_SetTurnaroundTime+0x130>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d802      	bhi.n	80054d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054cc:	230b      	movs	r3, #11
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e036      	b.n	8005540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4a2a      	ldr	r2, [pc, #168]	; (8005580 <USB_SetTurnaroundTime+0x130>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d906      	bls.n	80054e8 <USB_SetTurnaroundTime+0x98>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4a29      	ldr	r2, [pc, #164]	; (8005584 <USB_SetTurnaroundTime+0x134>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d802      	bhi.n	80054e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054e2:	230a      	movs	r3, #10
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	e02b      	b.n	8005540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4a26      	ldr	r2, [pc, #152]	; (8005584 <USB_SetTurnaroundTime+0x134>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d906      	bls.n	80054fe <USB_SetTurnaroundTime+0xae>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4a25      	ldr	r2, [pc, #148]	; (8005588 <USB_SetTurnaroundTime+0x138>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d802      	bhi.n	80054fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054f8:	2309      	movs	r3, #9
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e020      	b.n	8005540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4a21      	ldr	r2, [pc, #132]	; (8005588 <USB_SetTurnaroundTime+0x138>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d906      	bls.n	8005514 <USB_SetTurnaroundTime+0xc4>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4a20      	ldr	r2, [pc, #128]	; (800558c <USB_SetTurnaroundTime+0x13c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d802      	bhi.n	8005514 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800550e:	2308      	movs	r3, #8
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e015      	b.n	8005540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4a1d      	ldr	r2, [pc, #116]	; (800558c <USB_SetTurnaroundTime+0x13c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d906      	bls.n	800552a <USB_SetTurnaroundTime+0xda>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4a1c      	ldr	r2, [pc, #112]	; (8005590 <USB_SetTurnaroundTime+0x140>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d802      	bhi.n	800552a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005524:	2307      	movs	r3, #7
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e00a      	b.n	8005540 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800552a:	2306      	movs	r3, #6
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e007      	b.n	8005540 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d102      	bne.n	800553c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005536:	2309      	movs	r3, #9
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	e001      	b.n	8005540 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800553c:	2309      	movs	r3, #9
 800553e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	029b      	lsls	r3, r3, #10
 8005554:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005558:	431a      	orrs	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	371c      	adds	r7, #28
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	00d8acbf 	.word	0x00d8acbf
 8005570:	00e4e1bf 	.word	0x00e4e1bf
 8005574:	00f423ff 	.word	0x00f423ff
 8005578:	0106737f 	.word	0x0106737f
 800557c:	011a499f 	.word	0x011a499f
 8005580:	01312cff 	.word	0x01312cff
 8005584:	014ca43f 	.word	0x014ca43f
 8005588:	016e35ff 	.word	0x016e35ff
 800558c:	01a6ab1f 	.word	0x01a6ab1f
 8005590:	01e847ff 	.word	0x01e847ff

08005594 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f043 0201 	orr.w	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f023 0201 	bic.w	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d106      	bne.n	8005604 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60da      	str	r2, [r3, #12]
 8005602:	e00b      	b.n	800561c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60da      	str	r2, [r3, #12]
 8005616:	e001      	b.n	800561c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e003      	b.n	8005624 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800561c:	2032      	movs	r0, #50	; 0x32
 800561e:	f7fc f905 	bl	800182c <HAL_Delay>

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800562c:	b084      	sub	sp, #16
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800563a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005646:	2300      	movs	r3, #0
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	e009      	b.n	8005660 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	3340      	adds	r3, #64	; 0x40
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	2200      	movs	r2, #0
 8005658:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	3301      	adds	r3, #1
 800565e:	613b      	str	r3, [r7, #16]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	2b0e      	cmp	r3, #14
 8005664:	d9f2      	bls.n	800564c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d11c      	bne.n	80056a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800567a:	f043 0302 	orr.w	r3, r3, #2
 800567e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38
 80056a4:	e00b      	b.n	80056be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056c4:	461a      	mov	r2, r3
 80056c6:	2300      	movs	r3, #0
 80056c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d0:	4619      	mov	r1, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d8:	461a      	mov	r2, r3
 80056da:	680b      	ldr	r3, [r1, #0]
 80056dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d10c      	bne.n	80056fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d104      	bne.n	80056f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056ea:	2100      	movs	r1, #0
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f949 	bl	8005984 <USB_SetDevSpeed>
 80056f2:	e008      	b.n	8005706 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056f4:	2101      	movs	r1, #1
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f944 	bl	8005984 <USB_SetDevSpeed>
 80056fc:	e003      	b.n	8005706 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056fe:	2103      	movs	r1, #3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f93f 	bl	8005984 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005706:	2110      	movs	r1, #16
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f8f3 	bl	80058f4 <USB_FlushTxFifo>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f911 	bl	8005940 <USB_FlushRxFifo>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572e:	461a      	mov	r2, r3
 8005730:	2300      	movs	r3, #0
 8005732:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573a:	461a      	mov	r2, r3
 800573c:	2300      	movs	r3, #0
 800573e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005746:	461a      	mov	r2, r3
 8005748:	2300      	movs	r3, #0
 800574a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800574c:	2300      	movs	r3, #0
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	e043      	b.n	80057da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005768:	d118      	bne.n	800579c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10a      	bne.n	8005786 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	461a      	mov	r2, r3
 800577e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	e013      	b.n	80057ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	461a      	mov	r2, r3
 8005794:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e008      	b.n	80057ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	461a      	mov	r2, r3
 80057aa:	2300      	movs	r3, #0
 80057ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	461a      	mov	r2, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	461a      	mov	r2, r3
 80057ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	3301      	adds	r3, #1
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d3b7      	bcc.n	8005752 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057e2:	2300      	movs	r3, #0
 80057e4:	613b      	str	r3, [r7, #16]
 80057e6:	e043      	b.n	8005870 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057fe:	d118      	bne.n	8005832 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005812:	461a      	mov	r2, r3
 8005814:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	e013      	b.n	8005844 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005828:	461a      	mov	r2, r3
 800582a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	e008      	b.n	8005844 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	461a      	mov	r2, r3
 8005840:	2300      	movs	r3, #0
 8005842:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005850:	461a      	mov	r2, r3
 8005852:	2300      	movs	r3, #0
 8005854:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005862:	461a      	mov	r2, r3
 8005864:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005868:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	3301      	adds	r3, #1
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	429a      	cmp	r2, r3
 8005876:	d3b7      	bcc.n	80057e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800588a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005898:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	2b00      	cmp	r3, #0
 800589e:	d105      	bne.n	80058ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f043 0210 	orr.w	r2, r3, #16
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699a      	ldr	r2, [r3, #24]
 80058b0:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <USB_DevInit+0x2c4>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f043 0208 	orr.w	r2, r3, #8
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80058ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d107      	bne.n	80058e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058d8:	f043 0304 	orr.w	r3, r3, #4
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058ec:	b004      	add	sp, #16
 80058ee:	4770      	bx	lr
 80058f0:	803c3800 	.word	0x803c3800

080058f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	019b      	lsls	r3, r3, #6
 8005906:	f043 0220 	orr.w	r2, r3, #32
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3301      	adds	r3, #1
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4a09      	ldr	r2, [pc, #36]	; (800593c <USB_FlushTxFifo+0x48>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d901      	bls.n	8005920 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e006      	b.n	800592e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b20      	cmp	r3, #32
 800592a:	d0f0      	beq.n	800590e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	00030d40 	.word	0x00030d40

08005940 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2210      	movs	r2, #16
 8005950:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3301      	adds	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a09      	ldr	r2, [pc, #36]	; (8005980 <USB_FlushRxFifo+0x40>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d901      	bls.n	8005964 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e006      	b.n	8005972 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b10      	cmp	r3, #16
 800596e:	d0f0      	beq.n	8005952 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	00030d40 	.word	0x00030d40

08005984 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	68f9      	ldr	r1, [r7, #12]
 80059a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a4:	4313      	orrs	r3, r2
 80059a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b087      	sub	sp, #28
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0306 	and.w	r3, r3, #6
 80059ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d102      	bne.n	80059dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80059d6:	2300      	movs	r3, #0
 80059d8:	75fb      	strb	r3, [r7, #23]
 80059da:	e00a      	b.n	80059f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d002      	beq.n	80059e8 <USB_GetDevSpeed+0x32>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b06      	cmp	r3, #6
 80059e6:	d102      	bne.n	80059ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059e8:	2302      	movs	r3, #2
 80059ea:	75fb      	strb	r3, [r7, #23]
 80059ec:	e001      	b.n	80059f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059ee:	230f      	movs	r3, #15
 80059f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d13a      	bne.n	8005a92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	68f9      	ldr	r1, [r7, #12]
 8005a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d155      	bne.n	8005b00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	78db      	ldrb	r3, [r3, #3]
 8005a6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	059b      	lsls	r3, r3, #22
 8005a76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	0151      	lsls	r1, r2, #5
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	440a      	add	r2, r1
 8005a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e036      	b.n	8005b00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a98:	69da      	ldr	r2, [r3, #28]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d11a      	bne.n	8005b00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	78db      	ldrb	r3, [r3, #3]
 8005ae4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
	...

08005b10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	785b      	ldrb	r3, [r3, #1]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d161      	bne.n	8005bf0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b42:	d11f      	bne.n	8005b84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	2101      	movs	r1, #1
 8005b96:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	68f9      	ldr	r1, [r7, #12]
 8005ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bae:	69da      	ldr	r2, [r3, #28]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	2101      	movs	r1, #1
 8005bba:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	68f9      	ldr	r1, [r7, #12]
 8005bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc8:	4013      	ands	r3, r2
 8005bca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	0159      	lsls	r1, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	440b      	add	r3, r1
 8005be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be6:	4619      	mov	r1, r3
 8005be8:	4b35      	ldr	r3, [pc, #212]	; (8005cc0 <USB_DeactivateEndpoint+0x1b0>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	600b      	str	r3, [r1, #0]
 8005bee:	e060      	b.n	8005cb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c06:	d11f      	bne.n	8005c48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	2101      	movs	r1, #1
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	041b      	lsls	r3, r3, #16
 8005c60:	43db      	mvns	r3, r3
 8005c62:	68f9      	ldr	r1, [r7, #12]
 8005c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c68:	4013      	ands	r3, r2
 8005c6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	2101      	movs	r1, #1
 8005c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	43db      	mvns	r3, r3
 8005c86:	68f9      	ldr	r1, [r7, #12]
 8005c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	0159      	lsls	r1, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	440b      	add	r3, r1
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	4619      	mov	r1, r3
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <USB_DeactivateEndpoint+0x1b4>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	ec337800 	.word	0xec337800
 8005cc4:	eff37800 	.word	0xeff37800

08005cc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08a      	sub	sp, #40	; 0x28
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	f040 815c 	bne.w	8005fa2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d132      	bne.n	8005d58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d50:	0cdb      	lsrs	r3, r3, #19
 8005d52:	04db      	lsls	r3, r3, #19
 8005d54:	6113      	str	r3, [r2, #16]
 8005d56:	e074      	b.n	8005e42 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d72:	0cdb      	lsrs	r3, r3, #19
 8005d74:	04db      	lsls	r3, r3, #19
 8005d76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	6959      	ldr	r1, [r3, #20]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	440b      	add	r3, r1
 8005db4:	1e59      	subs	r1, r3, #1
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dbe:	04d9      	lsls	r1, r3, #19
 8005dc0:	4b9d      	ldr	r3, [pc, #628]	; (8006038 <USB_EPStartXfer+0x370>)
 8005dc2:	400b      	ands	r3, r1
 8005dc4:	69b9      	ldr	r1, [r7, #24]
 8005dc6:	0148      	lsls	r0, r1, #5
 8005dc8:	69f9      	ldr	r1, [r7, #28]
 8005dca:	4401      	add	r1, r0
 8005dcc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dea:	69b9      	ldr	r1, [r7, #24]
 8005dec:	0148      	lsls	r0, r1, #5
 8005dee:	69f9      	ldr	r1, [r7, #28]
 8005df0:	4401      	add	r1, r0
 8005df2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005df6:	4313      	orrs	r3, r2
 8005df8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	78db      	ldrb	r3, [r3, #3]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d11f      	bne.n	8005e42 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d14b      	bne.n	8005ee0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	78db      	ldrb	r3, [r3, #3]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d128      	bne.n	8005ebe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d110      	bne.n	8005e9e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	e00f      	b.n	8005ebe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	0151      	lsls	r1, r2, #5
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	440a      	add	r2, r1
 8005eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	0151      	lsls	r1, r2, #5
 8005ed0:	69fa      	ldr	r2, [r7, #28]
 8005ed2:	440a      	add	r2, r1
 8005ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	e12f      	b.n	8006140 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005efe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	78db      	ldrb	r3, [r3, #3]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d015      	beq.n	8005f34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8117 	beq.w	8006140 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	2101      	movs	r1, #1
 8005f24:	fa01 f303 	lsl.w	r3, r1, r3
 8005f28:	69f9      	ldr	r1, [r7, #28]
 8005f2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	634b      	str	r3, [r1, #52]	; 0x34
 8005f32:	e105      	b.n	8006140 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d110      	bne.n	8005f66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	e00f      	b.n	8005f86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	68d9      	ldr	r1, [r3, #12]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	781a      	ldrb	r2, [r3, #0]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	b298      	uxth	r0, r3
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	4603      	mov	r3, r0
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fa2b 	bl	80063f6 <USB_WritePacket>
 8005fa0:	e0ce      	b.n	8006140 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fbc:	0cdb      	lsrs	r3, r3, #19
 8005fbe:	04db      	lsls	r3, r3, #19
 8005fc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fe0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fe4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d126      	bne.n	800603c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006004:	69b9      	ldr	r1, [r7, #24]
 8006006:	0148      	lsls	r0, r1, #5
 8006008:	69f9      	ldr	r1, [r7, #28]
 800600a:	4401      	add	r1, r0
 800600c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006010:	4313      	orrs	r3, r2
 8006012:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	440a      	add	r2, r1
 800602a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006032:	6113      	str	r3, [r2, #16]
 8006034:	e036      	b.n	80060a4 <USB_EPStartXfer+0x3dc>
 8006036:	bf00      	nop
 8006038:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	4413      	add	r3, r2
 8006046:	1e5a      	subs	r2, r3, #1
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006050:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	8afb      	ldrh	r3, [r7, #22]
 8006062:	04d9      	lsls	r1, r3, #19
 8006064:	4b39      	ldr	r3, [pc, #228]	; (800614c <USB_EPStartXfer+0x484>)
 8006066:	400b      	ands	r3, r1
 8006068:	69b9      	ldr	r1, [r7, #24]
 800606a:	0148      	lsls	r0, r1, #5
 800606c:	69f9      	ldr	r1, [r7, #28]
 800606e:	4401      	add	r1, r0
 8006070:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006074:	4313      	orrs	r3, r2
 8006076:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	8af9      	ldrh	r1, [r7, #22]
 800608c:	fb01 f303 	mul.w	r3, r1, r3
 8006090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006094:	69b9      	ldr	r1, [r7, #24]
 8006096:	0148      	lsls	r0, r1, #5
 8006098:	69f9      	ldr	r1, [r7, #28]
 800609a:	4401      	add	r1, r0
 800609c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060a0:	4313      	orrs	r3, r2
 80060a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d10d      	bne.n	80060c6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d009      	beq.n	80060c6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	68d9      	ldr	r1, [r3, #12]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c2:	460a      	mov	r2, r1
 80060c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	78db      	ldrb	r3, [r3, #3]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d128      	bne.n	8006120 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d110      	bne.n	8006100 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	e00f      	b.n	8006120 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	69fa      	ldr	r2, [r7, #28]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800613e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	1ff80000 	.word	0x1ff80000

08006150 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b01      	cmp	r3, #1
 800616e:	f040 80cd 	bne.w	800630c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d132      	bne.n	80061e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	0151      	lsls	r1, r2, #5
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	440a      	add	r2, r1
 8006190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006194:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006198:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800619c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d8:	0cdb      	lsrs	r3, r3, #19
 80061da:	04db      	lsls	r3, r3, #19
 80061dc:	6113      	str	r3, [r2, #16]
 80061de:	e04e      	b.n	800627e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fa:	0cdb      	lsrs	r3, r3, #19
 80061fc:	04db      	lsls	r3, r3, #19
 80061fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800621e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006222:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	695a      	ldr	r2, [r3, #20]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	429a      	cmp	r2, r3
 800622e:	d903      	bls.n	8006238 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	440a      	add	r2, r1
 800624e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006252:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800626e:	6939      	ldr	r1, [r7, #16]
 8006270:	0148      	lsls	r0, r1, #5
 8006272:	6979      	ldr	r1, [r7, #20]
 8006274:	4401      	add	r1, r0
 8006276:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800627a:	4313      	orrs	r3, r2
 800627c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d11e      	bne.n	80062c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d009      	beq.n	80062a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006298:	461a      	mov	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	e092      	b.n	80063e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d07e      	beq.n	80063e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	2101      	movs	r1, #1
 80062fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006300:	6979      	ldr	r1, [r7, #20]
 8006302:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006306:	4313      	orrs	r3, r2
 8006308:	634b      	str	r3, [r1, #52]	; 0x34
 800630a:	e06d      	b.n	80063e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	440a      	add	r2, r1
 8006322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006326:	0cdb      	lsrs	r3, r3, #19
 8006328:	04db      	lsls	r3, r3, #19
 800632a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006346:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800634a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800634e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	440a      	add	r2, r1
 8006376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800637e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006396:	6939      	ldr	r1, [r7, #16]
 8006398:	0148      	lsls	r0, r1, #5
 800639a:	6979      	ldr	r1, [r7, #20]
 800639c:	4401      	add	r1, r0
 800639e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063a2:	4313      	orrs	r3, r2
 80063a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d10d      	bne.n	80063c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d009      	beq.n	80063c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	68d9      	ldr	r1, [r3, #12]
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c4:	460a      	mov	r2, r1
 80063c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b089      	sub	sp, #36	; 0x24
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	4611      	mov	r1, r2
 8006402:	461a      	mov	r2, r3
 8006404:	460b      	mov	r3, r1
 8006406:	71fb      	strb	r3, [r7, #7]
 8006408:	4613      	mov	r3, r2
 800640a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006414:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006418:	2b00      	cmp	r3, #0
 800641a:	d11a      	bne.n	8006452 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800641c:	88bb      	ldrh	r3, [r7, #4]
 800641e:	3303      	adds	r3, #3
 8006420:	089b      	lsrs	r3, r3, #2
 8006422:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	e00f      	b.n	800644a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800642a:	79fb      	ldrb	r3, [r7, #7]
 800642c:	031a      	lsls	r2, r3, #12
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	4413      	add	r3, r2
 8006432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006436:	461a      	mov	r2, r3
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3304      	adds	r3, #4
 8006442:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	3301      	adds	r3, #1
 8006448:	61bb      	str	r3, [r7, #24]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	429a      	cmp	r2, r3
 8006450:	d3eb      	bcc.n	800642a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3724      	adds	r7, #36	; 0x24
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006460:	b480      	push	{r7}
 8006462:	b089      	sub	sp, #36	; 0x24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	3303      	adds	r3, #3
 800647a:	089b      	lsrs	r3, r3, #2
 800647c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800647e:	2300      	movs	r3, #0
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	e00b      	b.n	800649c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	3304      	adds	r3, #4
 8006494:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	3301      	adds	r3, #1
 800649a:	61bb      	str	r3, [r7, #24]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d3ef      	bcc.n	8006484 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80064a4:	69fb      	ldr	r3, [r7, #28]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3724      	adds	r7, #36	; 0x24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b085      	sub	sp, #20
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	785b      	ldrb	r3, [r3, #1]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d12c      	bne.n	8006528 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	db12      	blt.n	8006506 <USB_EPSetStall+0x54>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00f      	beq.n	8006506 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006500:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006504:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	0151      	lsls	r1, r2, #5
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	440a      	add	r2, r1
 800651c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006520:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	e02b      	b.n	8006580 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	db12      	blt.n	8006560 <USB_EPSetStall+0xae>
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00f      	beq.n	8006560 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800655a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800655e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800657a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800657e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800658e:	b480      	push	{r7}
 8006590:	b085      	sub	sp, #20
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	785b      	ldrb	r3, [r3, #1]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d128      	bne.n	80065fc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	78db      	ldrb	r3, [r3, #3]
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d003      	beq.n	80065da <USB_EPClearStall+0x4c>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	78db      	ldrb	r3, [r3, #3]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d138      	bne.n	800664c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	0151      	lsls	r1, r2, #5
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	440a      	add	r2, r1
 80065f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	e027      	b.n	800664c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800661a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	78db      	ldrb	r3, [r3, #3]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d003      	beq.n	800662c <USB_EPClearStall+0x9e>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	78db      	ldrb	r3, [r3, #3]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d10f      	bne.n	800664c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800664a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006678:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800667c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	011b      	lsls	r3, r3, #4
 800668a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800668e:	68f9      	ldr	r1, [r7, #12]
 8006690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006694:	4313      	orrs	r3, r2
 8006696:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b085      	sub	sp, #20
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066c0:	f023 0303 	bic.w	r3, r3, #3
 80066c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066d4:	f023 0302 	bic.w	r3, r3, #2
 80066d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006702:	f023 0303 	bic.w	r3, r3, #3
 8006706:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006716:	f043 0302 	orr.w	r3, r3, #2
 800671a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4013      	ands	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006742:	68fb      	ldr	r3, [r7, #12]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	4013      	ands	r3, r2
 8006772:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	0c1b      	lsrs	r3, r3, #16
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	4013      	ands	r3, r2
 80067a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	b29b      	uxth	r3, r3
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4013      	ands	r3, r2
 80067e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067e6:	68bb      	ldr	r3, [r7, #8]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006816:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	fa22 f303 	lsr.w	r3, r2, r3
 8006824:	01db      	lsls	r3, r3, #7
 8006826:	b2db      	uxtb	r3, r3
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800682e:	78fb      	ldrb	r3, [r7, #3]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4013      	ands	r3, r2
 8006840:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006842:	68bb      	ldr	r3, [r7, #8]
}
 8006844:	4618      	mov	r0, r3
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	f003 0301 	and.w	r3, r3, #1
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006886:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800688a:	f023 0307 	bic.w	r3, r3, #7
 800688e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800689e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	460b      	mov	r3, r1
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	333c      	adds	r3, #60	; 0x3c
 80068ca:	3304      	adds	r3, #4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	4a26      	ldr	r2, [pc, #152]	; (800696c <USB_EP0_OutStart+0xb8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d90a      	bls.n	80068ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068e8:	d101      	bne.n	80068ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	e037      	b.n	800695e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f4:	461a      	mov	r2, r3
 80068f6:	2300      	movs	r3, #0
 80068f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800690c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800691c:	f043 0318 	orr.w	r3, r3, #24
 8006920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006930:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006934:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006936:	7afb      	ldrb	r3, [r7, #11]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d10f      	bne.n	800695c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006942:	461a      	mov	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006956:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800695a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	4f54300a 	.word	0x4f54300a

08006970 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3301      	adds	r3, #1
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4a13      	ldr	r2, [pc, #76]	; (80069d4 <USB_CoreReset+0x64>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d901      	bls.n	800698e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e01b      	b.n	80069c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	daf2      	bge.n	800697c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	f043 0201 	orr.w	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3301      	adds	r3, #1
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <USB_CoreReset+0x64>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d901      	bls.n	80069b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e006      	b.n	80069c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d0f0      	beq.n	80069a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	00030d40 	.word	0x00030d40

080069d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80069e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80069e8:	f004 faf6 	bl	800afd8 <malloc>
 80069ec:	4603      	mov	r3, r0
 80069ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d105      	bne.n	8006a02 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80069fe:	2302      	movs	r3, #2
 8006a00:	e066      	b.n	8006ad0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	7c1b      	ldrb	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d119      	bne.n	8006a46 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a16:	2202      	movs	r2, #2
 8006a18:	2181      	movs	r1, #129	; 0x81
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f002 fa59 	bl	8008ed2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f002 fa4f 	bl	8008ed2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2210      	movs	r2, #16
 8006a40:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006a44:	e016      	b.n	8006a74 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a46:	2340      	movs	r3, #64	; 0x40
 8006a48:	2202      	movs	r2, #2
 8006a4a:	2181      	movs	r1, #129	; 0x81
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f002 fa40 	bl	8008ed2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a58:	2340      	movs	r3, #64	; 0x40
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f002 fa37 	bl	8008ed2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2210      	movs	r2, #16
 8006a70:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a74:	2308      	movs	r3, #8
 8006a76:	2203      	movs	r2, #3
 8006a78:	2182      	movs	r1, #130	; 0x82
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f002 fa29 	bl	8008ed2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	7c1b      	ldrb	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d109      	bne.n	8006abe <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f002 fafa 	bl	80090b0 <USBD_LL_PrepareReceive>
 8006abc:	e007      	b.n	8006ace <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ac4:	2340      	movs	r3, #64	; 0x40
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f002 faf1 	bl	80090b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ae8:	2181      	movs	r1, #129	; 0x81
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f002 fa17 	bl	8008f1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006af6:	2101      	movs	r1, #1
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f002 fa10 	bl	8008f1e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b06:	2182      	movs	r1, #130	; 0x82
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f002 fa08 	bl	8008f1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00e      	beq.n	8006b46 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f004 fa55 	bl	800afe8 <free>
    pdev->pClassData = NULL;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b60:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d03a      	beq.n	8006bf0 <USBD_CDC_Setup+0xa0>
 8006b7a:	2b20      	cmp	r3, #32
 8006b7c:	f040 8097 	bne.w	8006cae <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	88db      	ldrh	r3, [r3, #6]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d029      	beq.n	8006bdc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	b25b      	sxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	da11      	bge.n	8006bb6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006b9e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	88d2      	ldrh	r2, [r2, #6]
 8006ba4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ba6:	6939      	ldr	r1, [r7, #16]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	88db      	ldrh	r3, [r3, #6]
 8006bac:	461a      	mov	r2, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 fa9d 	bl	80080ee <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006bb4:	e082      	b.n	8006cbc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	785a      	ldrb	r2, [r3, #1]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	88db      	ldrh	r3, [r3, #6]
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006bcc:	6939      	ldr	r1, [r7, #16]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	88db      	ldrh	r3, [r3, #6]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 fab6 	bl	8008146 <USBD_CtlPrepareRx>
    break;
 8006bda:	e06f      	b.n	8006cbc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	7850      	ldrb	r0, [r2, #1]
 8006be8:	2200      	movs	r2, #0
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	4798      	blx	r3
    break;
 8006bee:	e065      	b.n	8006cbc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	2b0b      	cmp	r3, #11
 8006bf6:	d84f      	bhi.n	8006c98 <USBD_CDC_Setup+0x148>
 8006bf8:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <USBD_CDC_Setup+0xb0>)
 8006bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfe:	bf00      	nop
 8006c00:	08006c31 	.word	0x08006c31
 8006c04:	08006ca7 	.word	0x08006ca7
 8006c08:	08006c99 	.word	0x08006c99
 8006c0c:	08006c99 	.word	0x08006c99
 8006c10:	08006c99 	.word	0x08006c99
 8006c14:	08006c99 	.word	0x08006c99
 8006c18:	08006c99 	.word	0x08006c99
 8006c1c:	08006c99 	.word	0x08006c99
 8006c20:	08006c99 	.word	0x08006c99
 8006c24:	08006c99 	.word	0x08006c99
 8006c28:	08006c59 	.word	0x08006c59
 8006c2c:	08006c81 	.word	0x08006c81
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d107      	bne.n	8006c4a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c3a:	f107 030c 	add.w	r3, r7, #12
 8006c3e:	2202      	movs	r2, #2
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fa53 	bl	80080ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006c48:	e030      	b.n	8006cac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 f9dd 	bl	800800c <USBD_CtlError>
        ret = USBD_FAIL;
 8006c52:	2303      	movs	r3, #3
 8006c54:	75fb      	strb	r3, [r7, #23]
      break;
 8006c56:	e029      	b.n	8006cac <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d107      	bne.n	8006c72 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c62:	f107 030f 	add.w	r3, r7, #15
 8006c66:	2201      	movs	r2, #1
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 fa3f 	bl	80080ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006c70:	e01c      	b.n	8006cac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 f9c9 	bl	800800c <USBD_CtlError>
        ret = USBD_FAIL;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c7e:	e015      	b.n	8006cac <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d00f      	beq.n	8006caa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 f9bd 	bl	800800c <USBD_CtlError>
        ret = USBD_FAIL;
 8006c92:	2303      	movs	r3, #3
 8006c94:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c96:	e008      	b.n	8006caa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 f9b6 	bl	800800c <USBD_CtlError>
      ret = USBD_FAIL;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca4:	e002      	b.n	8006cac <USBD_CDC_Setup+0x15c>
      break;
 8006ca6:	bf00      	nop
 8006ca8:	e008      	b.n	8006cbc <USBD_CDC_Setup+0x16c>
      break;
 8006caa:	bf00      	nop
    }
    break;
 8006cac:	e006      	b.n	8006cbc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 f9ab 	bl	800800c <USBD_CtlError>
    ret = USBD_FAIL;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	75fb      	strb	r3, [r7, #23]
    break;
 8006cba:	bf00      	nop
  }

  return (uint8_t)ret;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop

08006cc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e049      	b.n	8006d7e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cf0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006cf2:	78fa      	ldrb	r2, [r7, #3]
 8006cf4:	6879      	ldr	r1, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	3318      	adds	r3, #24
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d029      	beq.n	8006d5c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d08:	78fa      	ldrb	r2, [r7, #3]
 8006d0a:	6879      	ldr	r1, [r7, #4]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	3318      	adds	r3, #24
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	78f9      	ldrb	r1, [r7, #3]
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	1a5b      	subs	r3, r3, r1
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4403      	add	r3, r0
 8006d28:	3344      	adds	r3, #68	; 0x44
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d30:	fb03 f301 	mul.w	r3, r3, r1
 8006d34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d110      	bne.n	8006d5c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006d3a:	78fa      	ldrb	r2, [r7, #3]
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	3318      	adds	r3, #24
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d4e:	78f9      	ldrb	r1, [r7, #3]
 8006d50:	2300      	movs	r3, #0
 8006d52:	2200      	movs	r2, #0
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f002 f98a 	bl	800906e <USBD_LL_Transmit>
 8006d5a:	e00f      	b.n	8006d7c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006d78:	78fa      	ldrb	r2, [r7, #3]
 8006d7a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e015      	b.n	8006dd4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f002 f9a0 	bl	80090f2 <USBD_LL_GetRxDataSize>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006dce:	4611      	mov	r1, r2
 8006dd0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d015      	beq.n	8006e22 <USBD_CDC_EP0_RxReady+0x46>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006dfc:	2bff      	cmp	r3, #255	; 0xff
 8006dfe:	d010      	beq.n	8006e22 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006e0e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e16:	b292      	uxth	r2, r2
 8006e18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	22ff      	movs	r2, #255	; 0xff
 8006e1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2243      	movs	r2, #67	; 0x43
 8006e38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006e3a:	4b03      	ldr	r3, [pc, #12]	; (8006e48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	200004a0 	.word	0x200004a0

08006e4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2243      	movs	r2, #67	; 0x43
 8006e58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006e5a:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	2000045c 	.word	0x2000045c

08006e6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2243      	movs	r2, #67	; 0x43
 8006e78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006e7a:	4b03      	ldr	r3, [pc, #12]	; (8006e88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	200004e4 	.word	0x200004e4

08006e8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	220a      	movs	r2, #10
 8006e98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e9a:	4b03      	ldr	r3, [pc, #12]	; (8006ea8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	20000418 	.word	0x20000418

08006eac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e004      	b.n	8006eca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b087      	sub	sp, #28
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ee8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	371c      	adds	r7, #28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f18:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f3e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006f40:	2301      	movs	r3, #1
 8006f42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e01a      	b.n	8006f88 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d114      	bne.n	8006f86 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f7a:	2181      	movs	r1, #129	; 0x81
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f002 f876 	bl	800906e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e016      	b.n	8006fdc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	7c1b      	ldrb	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d109      	bne.n	8006fca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f002 f874 	bl	80090b0 <USBD_LL_PrepareReceive>
 8006fc8:	e007      	b.n	8006fda <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fd0:	2340      	movs	r3, #64	; 0x40
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f002 f86b 	bl	80090b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e025      	b.n	8007048 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	79fa      	ldrb	r2, [r7, #7]
 800703a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f001 fee1 	bl	8008e04 <USBD_LL_Init>
 8007042:	4603      	mov	r3, r0
 8007044:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007064:	2303      	movs	r3, #3
 8007066:	e010      	b.n	800708a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007078:	f107 020e 	add.w	r2, r7, #14
 800707c:	4610      	mov	r0, r2
 800707e:	4798      	blx	r3
 8007080:	4602      	mov	r2, r0
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 fefe 	bl	8008e9c <USBD_LL_Start>
 80070a0:	4603      	mov	r3, r0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b083      	sub	sp, #12
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80070cc:	2303      	movs	r3, #3
 80070ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	4611      	mov	r1, r2
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
 80070ea:	4603      	mov	r3, r0
 80070ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d007      	beq.n	800711e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	78fa      	ldrb	r2, [r7, #3]
 8007118:	4611      	mov	r1, r2
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
  }

  return USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 ff2c 	bl	8007f98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800714e:	461a      	mov	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800715c:	f003 031f 	and.w	r3, r3, #31
 8007160:	2b01      	cmp	r3, #1
 8007162:	d00e      	beq.n	8007182 <USBD_LL_SetupStage+0x5a>
 8007164:	2b01      	cmp	r3, #1
 8007166:	d302      	bcc.n	800716e <USBD_LL_SetupStage+0x46>
 8007168:	2b02      	cmp	r3, #2
 800716a:	d014      	beq.n	8007196 <USBD_LL_SetupStage+0x6e>
 800716c:	e01d      	b.n	80071aa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fa18 	bl	80075ac <USBD_StdDevReq>
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]
      break;
 8007180:	e020      	b.n	80071c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fa7c 	bl	8007688 <USBD_StdItfReq>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]
      break;
 8007194:	e016      	b.n	80071c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fab8 	bl	8007714 <USBD_StdEPReq>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]
      break;
 80071a8:	e00c      	b.n	80071c4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 fecf 	bl	8008f5c <USBD_LL_StallEP>
 80071be:	4603      	mov	r3, r0
 80071c0:	73fb      	strb	r3, [r7, #15]
      break;
 80071c2:	bf00      	nop
  }

  return ret;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b086      	sub	sp, #24
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	460b      	mov	r3, r1
 80071d8:	607a      	str	r2, [r7, #4]
 80071da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80071dc:	7afb      	ldrb	r3, [r7, #11]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d137      	bne.n	8007252 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d14a      	bne.n	800728a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d913      	bls.n	8007228 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	1ad2      	subs	r2, r2, r3
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	4293      	cmp	r3, r2
 8007218:	bf28      	it	cs
 800721a:	4613      	movcs	r3, r2
 800721c:	461a      	mov	r2, r3
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 ffad 	bl	8008180 <USBD_CtlContinueRx>
 8007226:	e030      	b.n	800728a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800723a:	2b03      	cmp	r3, #3
 800723c:	d105      	bne.n	800724a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 ffa9 	bl	80081a2 <USBD_CtlSendStatus>
 8007250:	e01b      	b.n	800728a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d013      	beq.n	8007286 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007264:	2b03      	cmp	r3, #3
 8007266:	d10e      	bne.n	8007286 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	7afa      	ldrb	r2, [r7, #11]
 8007272:	4611      	mov	r1, r2
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	4798      	blx	r3
 8007278:	4603      	mov	r3, r0
 800727a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800727c:	7dfb      	ldrb	r3, [r7, #23]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	e002      	b.n	800728c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007286:	2303      	movs	r3, #3
 8007288:	e000      	b.n	800728c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	460b      	mov	r3, r1
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072a2:	7afb      	ldrb	r3, [r7, #11]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d16a      	bne.n	800737e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3314      	adds	r3, #20
 80072ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d155      	bne.n	8007364 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d914      	bls.n	80072ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	1ad2      	subs	r2, r2, r3
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	461a      	mov	r2, r3
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 ff22 	bl	8008124 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072e0:	2300      	movs	r3, #0
 80072e2:	2200      	movs	r2, #0
 80072e4:	2100      	movs	r1, #0
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f001 fee2 	bl	80090b0 <USBD_LL_PrepareReceive>
 80072ec:	e03a      	b.n	8007364 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d11c      	bne.n	8007334 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007302:	429a      	cmp	r2, r3
 8007304:	d316      	bcc.n	8007334 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007310:	429a      	cmp	r2, r3
 8007312:	d20f      	bcs.n	8007334 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007314:	2200      	movs	r2, #0
 8007316:	2100      	movs	r1, #0
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 ff03 	bl	8008124 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007326:	2300      	movs	r3, #0
 8007328:	2200      	movs	r2, #0
 800732a:	2100      	movs	r1, #0
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f001 febf 	bl	80090b0 <USBD_LL_PrepareReceive>
 8007332:	e017      	b.n	8007364 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00a      	beq.n	8007356 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007346:	2b03      	cmp	r3, #3
 8007348:	d105      	bne.n	8007356 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007356:	2180      	movs	r1, #128	; 0x80
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f001 fdff 	bl	8008f5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 ff32 	bl	80081c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800736a:	2b01      	cmp	r3, #1
 800736c:	d123      	bne.n	80073b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f7ff fe9b 	bl	80070aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800737c:	e01b      	b.n	80073b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d013      	beq.n	80073b2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007390:	2b03      	cmp	r3, #3
 8007392:	d10e      	bne.n	80073b2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	7afa      	ldrb	r2, [r7, #11]
 800739e:	4611      	mov	r1, r2
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	4798      	blx	r3
 80073a4:	4603      	mov	r3, r0
 80073a6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	e002      	b.n	80073b8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e000      	b.n	80073b8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d009      	beq.n	8007404 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6852      	ldr	r2, [r2, #4]
 80073fc:	b2d2      	uxtb	r2, r2
 80073fe:	4611      	mov	r1, r2
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007404:	2340      	movs	r3, #64	; 0x40
 8007406:	2200      	movs	r2, #0
 8007408:	2100      	movs	r1, #0
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 fd61 	bl	8008ed2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2240      	movs	r2, #64	; 0x40
 800741c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007420:	2340      	movs	r3, #64	; 0x40
 8007422:	2200      	movs	r2, #0
 8007424:	2180      	movs	r1, #128	; 0x80
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 fd53 	bl	8008ed2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2240      	movs	r2, #64	; 0x40
 8007436:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	460b      	mov	r3, r1
 800744c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	78fa      	ldrb	r2, [r7, #3]
 8007452:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2204      	movs	r2, #4
 800747a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749a:	2b04      	cmp	r3, #4
 800749c:	d105      	bne.n	80074aa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d10b      	bne.n	80074e2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d005      	beq.n	80074e2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d009      	beq.n	8007564 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	6852      	ldr	r2, [r2, #4]
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	4611      	mov	r1, r2
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	4798      	blx	r3
  }

  return USBD_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800756e:	b480      	push	{r7}
 8007570:	b087      	sub	sp, #28
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	3301      	adds	r3, #1
 8007584:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800758c:	8a3b      	ldrh	r3, [r7, #16]
 800758e:	021b      	lsls	r3, r3, #8
 8007590:	b21a      	sxth	r2, r3
 8007592:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007596:	4313      	orrs	r3, r2
 8007598:	b21b      	sxth	r3, r3
 800759a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800759c:	89fb      	ldrh	r3, [r7, #14]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	371c      	adds	r7, #28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
	...

080075ac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	d004      	beq.n	80075d0 <USBD_StdDevReq+0x24>
 80075c6:	2b40      	cmp	r3, #64	; 0x40
 80075c8:	d002      	beq.n	80075d0 <USBD_StdDevReq+0x24>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <USBD_StdDevReq+0x38>
 80075ce:	e050      	b.n	8007672 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	4798      	blx	r3
 80075de:	4603      	mov	r3, r0
 80075e0:	73fb      	strb	r3, [r7, #15]
    break;
 80075e2:	e04b      	b.n	800767c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	785b      	ldrb	r3, [r3, #1]
 80075e8:	2b09      	cmp	r3, #9
 80075ea:	d83c      	bhi.n	8007666 <USBD_StdDevReq+0xba>
 80075ec:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <USBD_StdDevReq+0x48>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	08007649 	.word	0x08007649
 80075f8:	0800765d 	.word	0x0800765d
 80075fc:	08007667 	.word	0x08007667
 8007600:	08007653 	.word	0x08007653
 8007604:	08007667 	.word	0x08007667
 8007608:	08007627 	.word	0x08007627
 800760c:	0800761d 	.word	0x0800761d
 8007610:	08007667 	.word	0x08007667
 8007614:	0800763f 	.word	0x0800763f
 8007618:	08007631 	.word	0x08007631
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9ce 	bl	80079c0 <USBD_GetDescriptor>
      break;
 8007624:	e024      	b.n	8007670 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fb33 	bl	8007c94 <USBD_SetAddress>
      break;
 800762e:	e01f      	b.n	8007670 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fb70 	bl	8007d18 <USBD_SetConfig>
 8007638:	4603      	mov	r3, r0
 800763a:	73fb      	strb	r3, [r7, #15]
      break;
 800763c:	e018      	b.n	8007670 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fc0d 	bl	8007e60 <USBD_GetConfig>
      break;
 8007646:	e013      	b.n	8007670 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fc3c 	bl	8007ec8 <USBD_GetStatus>
      break;
 8007650:	e00e      	b.n	8007670 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007652:	6839      	ldr	r1, [r7, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fc6a 	bl	8007f2e <USBD_SetFeature>
      break;
 800765a:	e009      	b.n	8007670 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fc79 	bl	8007f56 <USBD_ClrFeature>
      break;
 8007664:	e004      	b.n	8007670 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fccf 	bl	800800c <USBD_CtlError>
      break;
 800766e:	bf00      	nop
    }
    break;
 8007670:	e004      	b.n	800767c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fcc9 	bl	800800c <USBD_CtlError>
    break;
 800767a:	bf00      	nop
  }

  return ret;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop

08007688 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d003      	beq.n	80076aa <USBD_StdItfReq+0x22>
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d001      	beq.n	80076aa <USBD_StdItfReq+0x22>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d12a      	bne.n	8007700 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b0:	3b01      	subs	r3, #1
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d81d      	bhi.n	80076f2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	889b      	ldrh	r3, [r3, #4]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d813      	bhi.n	80076e8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4798      	blx	r3
 80076ce:	4603      	mov	r3, r0
 80076d0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	88db      	ldrh	r3, [r3, #6]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d110      	bne.n	80076fc <USBD_StdItfReq+0x74>
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10d      	bne.n	80076fc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fd5e 	bl	80081a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80076e6:	e009      	b.n	80076fc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fc8e 	bl	800800c <USBD_CtlError>
      break;
 80076f0:	e004      	b.n	80076fc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fc89 	bl	800800c <USBD_CtlError>
      break;
 80076fa:	e000      	b.n	80076fe <USBD_StdItfReq+0x76>
      break;
 80076fc:	bf00      	nop
    }
    break;
 80076fe:	e004      	b.n	800770a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fc82 	bl	800800c <USBD_CtlError>
    break;
 8007708:	bf00      	nop
  }

  return ret;
 800770a:	7bfb      	ldrb	r3, [r7, #15]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	889b      	ldrh	r3, [r3, #4]
 8007726:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007730:	2b20      	cmp	r3, #32
 8007732:	d004      	beq.n	800773e <USBD_StdEPReq+0x2a>
 8007734:	2b40      	cmp	r3, #64	; 0x40
 8007736:	d002      	beq.n	800773e <USBD_StdEPReq+0x2a>
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <USBD_StdEPReq+0x3e>
 800773c:	e135      	b.n	80079aa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	4798      	blx	r3
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]
    break;
 8007750:	e130      	b.n	80079b4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	785b      	ldrb	r3, [r3, #1]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d03e      	beq.n	80077d8 <USBD_StdEPReq+0xc4>
 800775a:	2b03      	cmp	r3, #3
 800775c:	d002      	beq.n	8007764 <USBD_StdEPReq+0x50>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d077      	beq.n	8007852 <USBD_StdEPReq+0x13e>
 8007762:	e11c      	b.n	800799e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776a:	2b02      	cmp	r3, #2
 800776c:	d002      	beq.n	8007774 <USBD_StdEPReq+0x60>
 800776e:	2b03      	cmp	r3, #3
 8007770:	d015      	beq.n	800779e <USBD_StdEPReq+0x8a>
 8007772:	e02b      	b.n	80077cc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00c      	beq.n	8007794 <USBD_StdEPReq+0x80>
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	2b80      	cmp	r3, #128	; 0x80
 800777e:	d009      	beq.n	8007794 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	4619      	mov	r1, r3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 fbe9 	bl	8008f5c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800778a:	2180      	movs	r1, #128	; 0x80
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f001 fbe5 	bl	8008f5c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007792:	e020      	b.n	80077d6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fc38 	bl	800800c <USBD_CtlError>
        break;
 800779c:	e01b      	b.n	80077d6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	885b      	ldrh	r3, [r3, #2]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10e      	bne.n	80077c4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <USBD_StdEPReq+0xb0>
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	2b80      	cmp	r3, #128	; 0x80
 80077b0:	d008      	beq.n	80077c4 <USBD_StdEPReq+0xb0>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	88db      	ldrh	r3, [r3, #6]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d104      	bne.n	80077c4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f001 fbcc 	bl	8008f5c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fcec 	bl	80081a2 <USBD_CtlSendStatus>

        break;
 80077ca:	e004      	b.n	80077d6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fc1c 	bl	800800c <USBD_CtlError>
        break;
 80077d4:	bf00      	nop
      }
      break;
 80077d6:	e0e7      	b.n	80079a8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d002      	beq.n	80077e8 <USBD_StdEPReq+0xd4>
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d015      	beq.n	8007812 <USBD_StdEPReq+0xfe>
 80077e6:	e02d      	b.n	8007844 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00c      	beq.n	8007808 <USBD_StdEPReq+0xf4>
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	2b80      	cmp	r3, #128	; 0x80
 80077f2:	d009      	beq.n	8007808 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 fbaf 	bl	8008f5c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80077fe:	2180      	movs	r1, #128	; 0x80
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 fbab 	bl	8008f5c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007806:	e023      	b.n	8007850 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fbfe 	bl	800800c <USBD_CtlError>
        break;
 8007810:	e01e      	b.n	8007850 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	885b      	ldrh	r3, [r3, #2]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d119      	bne.n	800784e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007820:	2b00      	cmp	r3, #0
 8007822:	d004      	beq.n	800782e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f001 fbb6 	bl	8008f9a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fcb7 	bl	80081a2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	4798      	blx	r3
        }
        break;
 8007842:	e004      	b.n	800784e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fbe0 	bl	800800c <USBD_CtlError>
        break;
 800784c:	e000      	b.n	8007850 <USBD_StdEPReq+0x13c>
        break;
 800784e:	bf00      	nop
      }
      break;
 8007850:	e0aa      	b.n	80079a8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007858:	2b02      	cmp	r3, #2
 800785a:	d002      	beq.n	8007862 <USBD_StdEPReq+0x14e>
 800785c:	2b03      	cmp	r3, #3
 800785e:	d032      	beq.n	80078c6 <USBD_StdEPReq+0x1b2>
 8007860:	e097      	b.n	8007992 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d007      	beq.n	8007878 <USBD_StdEPReq+0x164>
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	2b80      	cmp	r3, #128	; 0x80
 800786c:	d004      	beq.n	8007878 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fbcb 	bl	800800c <USBD_CtlError>
          break;
 8007876:	e091      	b.n	800799c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800787c:	2b00      	cmp	r3, #0
 800787e:	da0b      	bge.n	8007898 <USBD_StdEPReq+0x184>
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007886:	4613      	mov	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	3310      	adds	r3, #16
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	4413      	add	r3, r2
 8007894:	3304      	adds	r3, #4
 8007896:	e00b      	b.n	80078b0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	3304      	adds	r3, #4
 80078b0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2202      	movs	r2, #2
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fc15 	bl	80080ee <USBD_CtlSendData>
        break;
 80078c4:	e06a      	b.n	800799c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80078c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	da11      	bge.n	80078f2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	f003 020f 	and.w	r2, r3, #15
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	440b      	add	r3, r1
 80078e0:	3324      	adds	r3, #36	; 0x24
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d117      	bne.n	8007918 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fb8e 	bl	800800c <USBD_CtlError>
            break;
 80078f0:	e054      	b.n	800799c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	f003 020f 	and.w	r2, r3, #15
 80078f8:	6879      	ldr	r1, [r7, #4]
 80078fa:	4613      	mov	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	440b      	add	r3, r1
 8007904:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d104      	bne.n	8007918 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fb7b 	bl	800800c <USBD_CtlError>
            break;
 8007916:	e041      	b.n	800799c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800791c:	2b00      	cmp	r3, #0
 800791e:	da0b      	bge.n	8007938 <USBD_StdEPReq+0x224>
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007926:	4613      	mov	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	3310      	adds	r3, #16
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	4413      	add	r3, r2
 8007934:	3304      	adds	r3, #4
 8007936:	e00b      	b.n	8007950 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	3304      	adds	r3, #4
 8007950:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <USBD_StdEPReq+0x24a>
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	2b80      	cmp	r3, #128	; 0x80
 800795c:	d103      	bne.n	8007966 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2200      	movs	r2, #0
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	e00e      	b.n	8007984 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007966:	7bbb      	ldrb	r3, [r7, #14]
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 fb34 	bl	8008fd8 <USBD_LL_IsStallEP>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2201      	movs	r2, #1
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	e002      	b.n	8007984 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2202      	movs	r2, #2
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fbaf 	bl	80080ee <USBD_CtlSendData>
          break;
 8007990:	e004      	b.n	800799c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fb39 	bl	800800c <USBD_CtlError>
        break;
 800799a:	bf00      	nop
      }
      break;
 800799c:	e004      	b.n	80079a8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fb33 	bl	800800c <USBD_CtlError>
      break;
 80079a6:	bf00      	nop
    }
    break;
 80079a8:	e004      	b.n	80079b4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fb2d 	bl	800800c <USBD_CtlError>
    break;
 80079b2:	bf00      	nop
  }

  return ret;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	885b      	ldrh	r3, [r3, #2]
 80079da:	0a1b      	lsrs	r3, r3, #8
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	2b06      	cmp	r3, #6
 80079e2:	f200 8128 	bhi.w	8007c36 <USBD_GetDescriptor+0x276>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <USBD_GetDescriptor+0x2c>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a09 	.word	0x08007a09
 80079f0:	08007a21 	.word	0x08007a21
 80079f4:	08007a61 	.word	0x08007a61
 80079f8:	08007c37 	.word	0x08007c37
 80079fc:	08007c37 	.word	0x08007c37
 8007a00:	08007bd7 	.word	0x08007bd7
 8007a04:	08007c03 	.word	0x08007c03
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	7c12      	ldrb	r2, [r2, #16]
 8007a14:	f107 0108 	add.w	r1, r7, #8
 8007a18:	4610      	mov	r0, r2
 8007a1a:	4798      	blx	r3
 8007a1c:	60f8      	str	r0, [r7, #12]
    break;
 8007a1e:	e112      	b.n	8007c46 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	7c1b      	ldrb	r3, [r3, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10d      	bne.n	8007a44 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	f107 0208 	add.w	r2, r7, #8
 8007a34:	4610      	mov	r0, r2
 8007a36:	4798      	blx	r3
 8007a38:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	2202      	movs	r2, #2
 8007a40:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007a42:	e100      	b.n	8007c46 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	f107 0208 	add.w	r2, r7, #8
 8007a50:	4610      	mov	r0, r2
 8007a52:	4798      	blx	r3
 8007a54:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	701a      	strb	r2, [r3, #0]
    break;
 8007a5e:	e0f2      	b.n	8007c46 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	885b      	ldrh	r3, [r3, #2]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b05      	cmp	r3, #5
 8007a68:	f200 80ac 	bhi.w	8007bc4 <USBD_GetDescriptor+0x204>
 8007a6c:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <USBD_GetDescriptor+0xb4>)
 8007a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a72:	bf00      	nop
 8007a74:	08007a8d 	.word	0x08007a8d
 8007a78:	08007ac1 	.word	0x08007ac1
 8007a7c:	08007af5 	.word	0x08007af5
 8007a80:	08007b29 	.word	0x08007b29
 8007a84:	08007b5d 	.word	0x08007b5d
 8007a88:	08007b91 	.word	0x08007b91
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	7c12      	ldrb	r2, [r2, #16]
 8007aa4:	f107 0108 	add.w	r1, r7, #8
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	4798      	blx	r3
 8007aac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aae:	e091      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 faaa 	bl	800800c <USBD_CtlError>
        err++;
 8007ab8:	7afb      	ldrb	r3, [r7, #11]
 8007aba:	3301      	adds	r3, #1
 8007abc:	72fb      	strb	r3, [r7, #11]
      break;
 8007abe:	e089      	b.n	8007bd4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	7c12      	ldrb	r2, [r2, #16]
 8007ad8:	f107 0108 	add.w	r1, r7, #8
 8007adc:	4610      	mov	r0, r2
 8007ade:	4798      	blx	r3
 8007ae0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ae2:	e077      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa90 	bl	800800c <USBD_CtlError>
        err++;
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	3301      	adds	r3, #1
 8007af0:	72fb      	strb	r3, [r7, #11]
      break;
 8007af2:	e06f      	b.n	8007bd4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	7c12      	ldrb	r2, [r2, #16]
 8007b0c:	f107 0108 	add.w	r1, r7, #8
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b16:	e05d      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fa76 	bl	800800c <USBD_CtlError>
        err++;
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	3301      	adds	r3, #1
 8007b24:	72fb      	strb	r3, [r7, #11]
      break;
 8007b26:	e055      	b.n	8007bd4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	7c12      	ldrb	r2, [r2, #16]
 8007b40:	f107 0108 	add.w	r1, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b4a:	e043      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fa5c 	bl	800800c <USBD_CtlError>
        err++;
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	3301      	adds	r3, #1
 8007b58:	72fb      	strb	r3, [r7, #11]
      break;
 8007b5a:	e03b      	b.n	8007bd4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b7e:	e029      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fa42 	bl	800800c <USBD_CtlError>
        err++;
 8007b88:	7afb      	ldrb	r3, [r7, #11]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	72fb      	strb	r3, [r7, #11]
      break;
 8007b8e:	e021      	b.n	8007bd4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00b      	beq.n	8007bb4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	7c12      	ldrb	r2, [r2, #16]
 8007ba8:	f107 0108 	add.w	r1, r7, #8
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bb2:	e00f      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa28 	bl	800800c <USBD_CtlError>
        err++;
 8007bbc:	7afb      	ldrb	r3, [r7, #11]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	72fb      	strb	r3, [r7, #11]
      break;
 8007bc2:	e007      	b.n	8007bd4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa20 	bl	800800c <USBD_CtlError>
      err++;
 8007bcc:	7afb      	ldrb	r3, [r7, #11]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007bd2:	bf00      	nop
    }
    break;
 8007bd4:	e037      	b.n	8007c46 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	7c1b      	ldrb	r3, [r3, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be6:	f107 0208 	add.w	r2, r7, #8
 8007bea:	4610      	mov	r0, r2
 8007bec:	4798      	blx	r3
 8007bee:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007bf0:	e029      	b.n	8007c46 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fa09 	bl	800800c <USBD_CtlError>
      err++;
 8007bfa:	7afb      	ldrb	r3, [r7, #11]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	72fb      	strb	r3, [r7, #11]
    break;
 8007c00:	e021      	b.n	8007c46 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	7c1b      	ldrb	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10d      	bne.n	8007c26 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	f107 0208 	add.w	r2, r7, #8
 8007c16:	4610      	mov	r0, r2
 8007c18:	4798      	blx	r3
 8007c1a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	2207      	movs	r2, #7
 8007c22:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007c24:	e00f      	b.n	8007c46 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f9ef 	bl	800800c <USBD_CtlError>
      err++;
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	3301      	adds	r3, #1
 8007c32:	72fb      	strb	r3, [r7, #11]
    break;
 8007c34:	e007      	b.n	8007c46 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f9e7 	bl	800800c <USBD_CtlError>
    err++;
 8007c3e:	7afb      	ldrb	r3, [r7, #11]
 8007c40:	3301      	adds	r3, #1
 8007c42:	72fb      	strb	r3, [r7, #11]
    break;
 8007c44:	bf00      	nop
  }

  if (err != 0U)
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d11e      	bne.n	8007c8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	88db      	ldrh	r3, [r3, #6]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d016      	beq.n	8007c82 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007c54:	893b      	ldrh	r3, [r7, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00e      	beq.n	8007c78 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	88da      	ldrh	r2, [r3, #6]
 8007c5e:	893b      	ldrh	r3, [r7, #8]
 8007c60:	4293      	cmp	r3, r2
 8007c62:	bf28      	it	cs
 8007c64:	4613      	movcs	r3, r2
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c6a:	893b      	ldrh	r3, [r7, #8]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 fa3c 	bl	80080ee <USBD_CtlSendData>
 8007c76:	e009      	b.n	8007c8c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f9c6 	bl	800800c <USBD_CtlError>
 8007c80:	e004      	b.n	8007c8c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fa8d 	bl	80081a2 <USBD_CtlSendStatus>
 8007c88:	e000      	b.n	8007c8c <USBD_GetDescriptor+0x2cc>
    return;
 8007c8a:	bf00      	nop
    }
  }
}
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop

08007c94 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	889b      	ldrh	r3, [r3, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d130      	bne.n	8007d08 <USBD_SetAddress+0x74>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	88db      	ldrh	r3, [r3, #6]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d12c      	bne.n	8007d08 <USBD_SetAddress+0x74>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	885b      	ldrh	r3, [r3, #2]
 8007cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8007cb4:	d828      	bhi.n	8007d08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	885b      	ldrh	r3, [r3, #2]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d104      	bne.n	8007cd6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f99c 	bl	800800c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd4:	e01c      	b.n	8007d10 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	7bfa      	ldrb	r2, [r7, #15]
 8007cda:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 f9a4 	bl	8009030 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fa5a 	bl	80081a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d004      	beq.n	8007cfe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfc:	e008      	b.n	8007d10 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d06:	e003      	b.n	8007d10 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f97e 	bl	800800c <USBD_CtlError>
  }
}
 8007d10:	bf00      	nop
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	885b      	ldrh	r3, [r3, #2]
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	4b4b      	ldr	r3, [pc, #300]	; (8007e5c <USBD_SetConfig+0x144>)
 8007d2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d30:	4b4a      	ldr	r3, [pc, #296]	; (8007e5c <USBD_SetConfig+0x144>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d905      	bls.n	8007d44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f966 	bl	800800c <USBD_CtlError>
    return USBD_FAIL;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e087      	b.n	8007e54 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d002      	beq.n	8007d54 <USBD_SetConfig+0x3c>
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d025      	beq.n	8007d9e <USBD_SetConfig+0x86>
 8007d52:	e071      	b.n	8007e38 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007d54:	4b41      	ldr	r3, [pc, #260]	; (8007e5c <USBD_SetConfig+0x144>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d01c      	beq.n	8007d96 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007d5c:	4b3f      	ldr	r3, [pc, #252]	; (8007e5c <USBD_SetConfig+0x144>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d66:	4b3d      	ldr	r3, [pc, #244]	; (8007e5c <USBD_SetConfig+0x144>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff f9a7 	bl	80070c0 <USBD_SetClassConfig>
 8007d72:	4603      	mov	r3, r0
 8007d74:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d004      	beq.n	8007d86 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f944 	bl	800800c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007d84:	e065      	b.n	8007e52 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa0b 	bl	80081a2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2203      	movs	r2, #3
 8007d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007d94:	e05d      	b.n	8007e52 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa03 	bl	80081a2 <USBD_CtlSendStatus>
    break;
 8007d9c:	e059      	b.n	8007e52 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007d9e:	4b2f      	ldr	r3, [pc, #188]	; (8007e5c <USBD_SetConfig+0x144>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d112      	bne.n	8007dcc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2202      	movs	r2, #2
 8007daa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007dae:	4b2b      	ldr	r3, [pc, #172]	; (8007e5c <USBD_SetConfig+0x144>)
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007db8:	4b28      	ldr	r3, [pc, #160]	; (8007e5c <USBD_SetConfig+0x144>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff f99a 	bl	80070f8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f9ec 	bl	80081a2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007dca:	e042      	b.n	8007e52 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007dcc:	4b23      	ldr	r3, [pc, #140]	; (8007e5c <USBD_SetConfig+0x144>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d02a      	beq.n	8007e30 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7ff f988 	bl	80070f8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007de8:	4b1c      	ldr	r3, [pc, #112]	; (8007e5c <USBD_SetConfig+0x144>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007df2:	4b1a      	ldr	r3, [pc, #104]	; (8007e5c <USBD_SetConfig+0x144>)
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7ff f961 	bl	80070c0 <USBD_SetClassConfig>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00f      	beq.n	8007e28 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f8fe 	bl	800800c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff f96d 	bl	80070f8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007e26:	e014      	b.n	8007e52 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f9ba 	bl	80081a2 <USBD_CtlSendStatus>
    break;
 8007e2e:	e010      	b.n	8007e52 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f9b6 	bl	80081a2 <USBD_CtlSendStatus>
    break;
 8007e36:	e00c      	b.n	8007e52 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f8e6 	bl	800800c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e40:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <USBD_SetConfig+0x144>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff f956 	bl	80070f8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e50:	bf00      	nop
  }

  return ret;
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20000784 	.word	0x20000784

08007e60 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	88db      	ldrh	r3, [r3, #6]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d004      	beq.n	8007e7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f8c9 	bl	800800c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007e7a:	e021      	b.n	8007ec0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	db17      	blt.n	8007eb6 <USBD_GetConfig+0x56>
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	dd02      	ble.n	8007e90 <USBD_GetConfig+0x30>
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d00b      	beq.n	8007ea6 <USBD_GetConfig+0x46>
 8007e8e:	e012      	b.n	8007eb6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3308      	adds	r3, #8
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f925 	bl	80080ee <USBD_CtlSendData>
      break;
 8007ea4:	e00c      	b.n	8007ec0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	2201      	movs	r2, #1
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f91d 	bl	80080ee <USBD_CtlSendData>
      break;
 8007eb4:	e004      	b.n	8007ec0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f8a7 	bl	800800c <USBD_CtlError>
      break;
 8007ebe:	bf00      	nop
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d81e      	bhi.n	8007f1c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	88db      	ldrh	r3, [r3, #6]
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d004      	beq.n	8007ef0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f88f 	bl	800800c <USBD_CtlError>
      break;
 8007eee:	e01a      	b.n	8007f26 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d005      	beq.n	8007f0c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f043 0202 	orr.w	r2, r3, #2
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	330c      	adds	r3, #12
 8007f10:	2202      	movs	r2, #2
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f8ea 	bl	80080ee <USBD_CtlSendData>
    break;
 8007f1a:	e004      	b.n	8007f26 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f874 	bl	800800c <USBD_CtlError>
    break;
 8007f24:	bf00      	nop
  }
}
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b082      	sub	sp, #8
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	885b      	ldrh	r3, [r3, #2]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d106      	bne.n	8007f4e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f92a 	bl	80081a2 <USBD_CtlSendStatus>
  }
}
 8007f4e:	bf00      	nop
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b082      	sub	sp, #8
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f66:	3b01      	subs	r3, #1
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d80b      	bhi.n	8007f84 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	885b      	ldrh	r3, [r3, #2]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d10c      	bne.n	8007f8e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f910 	bl	80081a2 <USBD_CtlSendStatus>
      }
      break;
 8007f82:	e004      	b.n	8007f8e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f840 	bl	800800c <USBD_CtlError>
      break;
 8007f8c:	e000      	b.n	8007f90 <USBD_ClrFeature+0x3a>
      break;
 8007f8e:	bf00      	nop
  }
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	781a      	ldrb	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	781a      	ldrb	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f7ff fad3 	bl	800756e <SWAPBYTE>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	461a      	mov	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff fac6 	bl	800756e <SWAPBYTE>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3301      	adds	r3, #1
 8007fee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f7ff fab9 	bl	800756e <SWAPBYTE>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	461a      	mov	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	80da      	strh	r2, [r3, #6]
}
 8008004:	bf00      	nop
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008016:	2180      	movs	r1, #128	; 0x80
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 ff9f 	bl	8008f5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800801e:	2100      	movs	r1, #0
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 ff9b 	bl	8008f5c <USBD_LL_StallEP>
}
 8008026:	bf00      	nop
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b086      	sub	sp, #24
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	60b9      	str	r1, [r7, #8]
 8008038:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d036      	beq.n	80080b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008048:	6938      	ldr	r0, [r7, #16]
 800804a:	f000 f836 	bl	80080ba <USBD_GetLen>
 800804e:	4603      	mov	r3, r0
 8008050:	3301      	adds	r3, #1
 8008052:	b29b      	uxth	r3, r3
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	4413      	add	r3, r2
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	7812      	ldrb	r2, [r2, #0]
 8008066:	701a      	strb	r2, [r3, #0]
  idx++;
 8008068:	7dfb      	ldrb	r3, [r7, #23]
 800806a:	3301      	adds	r3, #1
 800806c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	4413      	add	r3, r2
 8008074:	2203      	movs	r2, #3
 8008076:	701a      	strb	r2, [r3, #0]
  idx++;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	3301      	adds	r3, #1
 800807c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800807e:	e013      	b.n	80080a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008080:	7dfb      	ldrb	r3, [r7, #23]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	4413      	add	r3, r2
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	7812      	ldrb	r2, [r2, #0]
 800808a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	3301      	adds	r3, #1
 8008090:	613b      	str	r3, [r7, #16]
    idx++;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	3301      	adds	r3, #1
 8008096:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	4413      	add	r3, r2
 800809e:	2200      	movs	r2, #0
 80080a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
 80080a4:	3301      	adds	r3, #1
 80080a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e7      	bne.n	8008080 <USBD_GetString+0x52>
 80080b0:	e000      	b.n	80080b4 <USBD_GetString+0x86>
    return;
 80080b2:	bf00      	nop
  }
}
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b085      	sub	sp, #20
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80080ca:	e005      	b.n	80080d8 <USBD_GetLen+0x1e>
  {
    len++;
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	3301      	adds	r3, #1
 80080d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	3301      	adds	r3, #1
 80080d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1f5      	bne.n	80080cc <USBD_GetLen+0x12>
  }

  return len;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	60f8      	str	r0, [r7, #12]
 80080f6:	60b9      	str	r1, [r7, #8]
 80080f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2202      	movs	r2, #2
 80080fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	2100      	movs	r1, #0
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 ffaa 	bl	800906e <USBD_LL_Transmit>

  return USBD_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	2100      	movs	r1, #0
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 ff99 	bl	800906e <USBD_LL_Transmit>

  return USBD_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2203      	movs	r2, #3
 8008156:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	2100      	movs	r1, #0
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 ff9d 	bl	80090b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	2100      	movs	r1, #0
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 ff8c 	bl	80090b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b082      	sub	sp, #8
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2204      	movs	r2, #4
 80081ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081b2:	2300      	movs	r3, #0
 80081b4:	2200      	movs	r2, #0
 80081b6:	2100      	movs	r1, #0
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 ff58 	bl	800906e <USBD_LL_Transmit>

  return USBD_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2205      	movs	r2, #5
 80081d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081d8:	2300      	movs	r3, #0
 80081da:	2200      	movs	r2, #0
 80081dc:	2100      	movs	r1, #0
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 ff66 	bl	80090b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 80081f4:	4b10      	ldr	r3, [pc, #64]	; (8008238 <MX_PDM2PCM_Init+0x48>)
 80081f6:	2201      	movs	r2, #1
 80081f8:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 80081fa:	4b0f      	ldr	r3, [pc, #60]	; (8008238 <MX_PDM2PCM_Init+0x48>)
 80081fc:	2201      	movs	r2, #1
 80081fe:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8008200:	4b0d      	ldr	r3, [pc, #52]	; (8008238 <MX_PDM2PCM_Init+0x48>)
 8008202:	4a0e      	ldr	r2, [pc, #56]	; (800823c <MX_PDM2PCM_Init+0x4c>)
 8008204:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8008206:	4b0c      	ldr	r3, [pc, #48]	; (8008238 <MX_PDM2PCM_Init+0x48>)
 8008208:	2201      	movs	r2, #1
 800820a:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <MX_PDM2PCM_Init+0x48>)
 800820e:	2201      	movs	r2, #1
 8008210:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8008212:	4809      	ldr	r0, [pc, #36]	; (8008238 <MX_PDM2PCM_Init+0x48>)
 8008214:	f002 fcfc 	bl	800ac10 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_16;
 8008218:	4b09      	ldr	r3, [pc, #36]	; (8008240 <MX_PDM2PCM_Init+0x50>)
 800821a:	2205      	movs	r2, #5
 800821c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 1024;
 800821e:	4b08      	ldr	r3, [pc, #32]	; (8008240 <MX_PDM2PCM_Init+0x50>)
 8008220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008224:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8008226:	4b06      	ldr	r3, [pc, #24]	; (8008240 <MX_PDM2PCM_Init+0x50>)
 8008228:	2200      	movs	r2, #0
 800822a:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800822c:	4904      	ldr	r1, [pc, #16]	; (8008240 <MX_PDM2PCM_Init+0x50>)
 800822e:	4802      	ldr	r0, [pc, #8]	; (8008238 <MX_PDM2PCM_Init+0x48>)
 8008230:	f002 fd78 	bl	800ad24 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8008234:	bf00      	nop
 8008236:	bd80      	pop	{r7, pc}
 8008238:	20011a44 	.word	0x20011a44
 800823c:	7d70a3d6 	.word	0x7d70a3d6
 8008240:	20011a3c 	.word	0x20011a3c

08008244 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008248:	2200      	movs	r2, #0
 800824a:	4912      	ldr	r1, [pc, #72]	; (8008294 <MX_USB_DEVICE_Init+0x50>)
 800824c:	4812      	ldr	r0, [pc, #72]	; (8008298 <MX_USB_DEVICE_Init+0x54>)
 800824e:	f7fe fec9 	bl	8006fe4 <USBD_Init>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008258:	f7f8 ffe0 	bl	800121c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800825c:	490f      	ldr	r1, [pc, #60]	; (800829c <MX_USB_DEVICE_Init+0x58>)
 800825e:	480e      	ldr	r0, [pc, #56]	; (8008298 <MX_USB_DEVICE_Init+0x54>)
 8008260:	f7fe fef6 	bl	8007050 <USBD_RegisterClass>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800826a:	f7f8 ffd7 	bl	800121c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800826e:	490c      	ldr	r1, [pc, #48]	; (80082a0 <MX_USB_DEVICE_Init+0x5c>)
 8008270:	4809      	ldr	r0, [pc, #36]	; (8008298 <MX_USB_DEVICE_Init+0x54>)
 8008272:	f7fe fe1b 	bl	8006eac <USBD_CDC_RegisterInterface>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800827c:	f7f8 ffce 	bl	800121c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008280:	4805      	ldr	r0, [pc, #20]	; (8008298 <MX_USB_DEVICE_Init+0x54>)
 8008282:	f7fe ff06 	bl	8007092 <USBD_Start>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800828c:	f7f8 ffc6 	bl	800121c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008290:	bf00      	nop
 8008292:	bd80      	pop	{r7, pc}
 8008294:	2000053c 	.word	0x2000053c
 8008298:	20011a90 	.word	0x20011a90
 800829c:	20000424 	.word	0x20000424
 80082a0:	20000528 	.word	0x20000528

080082a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082a8:	2200      	movs	r2, #0
 80082aa:	4905      	ldr	r1, [pc, #20]	; (80082c0 <CDC_Init_FS+0x1c>)
 80082ac:	4805      	ldr	r0, [pc, #20]	; (80082c4 <CDC_Init_FS+0x20>)
 80082ae:	f7fe fe12 	bl	8006ed6 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082b2:	4905      	ldr	r1, [pc, #20]	; (80082c8 <CDC_Init_FS+0x24>)
 80082b4:	4803      	ldr	r0, [pc, #12]	; (80082c4 <CDC_Init_FS+0x20>)
 80082b6:	f7fe fe27 	bl	8006f08 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80082ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082bc:	4618      	mov	r0, r3
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20011de0 	.word	0x20011de0
 80082c4:	20011a90 	.word	0x20011a90
 80082c8:	20011d60 	.word	0x20011d60

080082cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 80082d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	6039      	str	r1, [r7, #0]
 80082e6:	71fb      	strb	r3, [r7, #7]
 80082e8:	4613      	mov	r3, r2
 80082ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	2b23      	cmp	r3, #35	; 0x23
 80082f0:	d866      	bhi.n	80083c0 <CDC_Control_FS+0xe4>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <CDC_Control_FS+0x1c>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	080083c1 	.word	0x080083c1
 80082fc:	080083c1 	.word	0x080083c1
 8008300:	080083c1 	.word	0x080083c1
 8008304:	080083c1 	.word	0x080083c1
 8008308:	080083c1 	.word	0x080083c1
 800830c:	080083c1 	.word	0x080083c1
 8008310:	080083c1 	.word	0x080083c1
 8008314:	080083c1 	.word	0x080083c1
 8008318:	080083c1 	.word	0x080083c1
 800831c:	080083c1 	.word	0x080083c1
 8008320:	080083c1 	.word	0x080083c1
 8008324:	080083c1 	.word	0x080083c1
 8008328:	080083c1 	.word	0x080083c1
 800832c:	080083c1 	.word	0x080083c1
 8008330:	080083c1 	.word	0x080083c1
 8008334:	080083c1 	.word	0x080083c1
 8008338:	080083c1 	.word	0x080083c1
 800833c:	080083c1 	.word	0x080083c1
 8008340:	080083c1 	.word	0x080083c1
 8008344:	080083c1 	.word	0x080083c1
 8008348:	080083c1 	.word	0x080083c1
 800834c:	080083c1 	.word	0x080083c1
 8008350:	080083c1 	.word	0x080083c1
 8008354:	080083c1 	.word	0x080083c1
 8008358:	080083c1 	.word	0x080083c1
 800835c:	080083c1 	.word	0x080083c1
 8008360:	080083c1 	.word	0x080083c1
 8008364:	080083c1 	.word	0x080083c1
 8008368:	080083c1 	.word	0x080083c1
 800836c:	080083c1 	.word	0x080083c1
 8008370:	080083c1 	.word	0x080083c1
 8008374:	080083c1 	.word	0x080083c1
 8008378:	080083c1 	.word	0x080083c1
 800837c:	080083c1 	.word	0x080083c1
 8008380:	08008389 	.word	0x08008389
 8008384:	080083c1 	.word	0x080083c1

		break;

	case CDC_SET_CONTROL_LINE_STATE:
	{
		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	60fb      	str	r3, [r7, #12]
		if ((req->wValue & 0x0001) != 0)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	885b      	ldrh	r3, [r3, #2]
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d009      	beq.n	80083ac <CDC_Control_FS+0xd0>
		{
			HOST_PORT_COM_OPEN = 1;
 8008398:	4b0c      	ldr	r3, [pc, #48]	; (80083cc <CDC_Control_FS+0xf0>)
 800839a:	2201      	movs	r2, #1
 800839c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800839e:	2201      	movs	r2, #1
 80083a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083a4:	480a      	ldr	r0, [pc, #40]	; (80083d0 <CDC_Control_FS+0xf4>)
 80083a6:	f7fa f8b1 	bl	800250c <HAL_GPIO_WritePin>
		else
		{
			HOST_PORT_COM_OPEN = 0;
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
		}
		break;
 80083aa:	e00a      	b.n	80083c2 <CDC_Control_FS+0xe6>
			HOST_PORT_COM_OPEN = 0;
 80083ac:	4b07      	ldr	r3, [pc, #28]	; (80083cc <CDC_Control_FS+0xf0>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80083b2:	2200      	movs	r2, #0
 80083b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083b8:	4805      	ldr	r0, [pc, #20]	; (80083d0 <CDC_Control_FS+0xf4>)
 80083ba:	f7fa f8a7 	bl	800250c <HAL_GPIO_WritePin>
		break;
 80083be:	e000      	b.n	80083c2 <CDC_Control_FS+0xe6>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80083c0:	bf00      	nop
	}

	return (USBD_OK);
 80083c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20000785 	.word	0x20000785
 80083d0:	40020c00 	.word	0x40020c00

080083d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t result = USBD_OK;;
 80083de:	2300      	movs	r3, #0
 80083e0:	73bb      	strb	r3, [r7, #14]
	static uint8_t txLen;
	static uint8_t rxLen;
	static uint8_t RX_Buf_Temp[APP_RX_DATA_SIZE];
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80083e2:	2201      	movs	r2, #1
 80083e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80083e8:	4875      	ldr	r0, [pc, #468]	; (80085c0 <CDC_Receive_FS+0x1ec>)
 80083ea:	f7fa f88f 	bl	800250c <HAL_GPIO_WritePin>

	/* Get data from serial com */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	4874      	ldr	r0, [pc, #464]	; (80085c4 <CDC_Receive_FS+0x1f0>)
 80083f2:	f7fe fd89 	bl	8006f08 <USBD_CDC_SetRxBuffer>
	if ((result = USBD_CDC_ReceivePacket(&hUsbDeviceFS)) != USBD_OK)
 80083f6:	4873      	ldr	r0, [pc, #460]	; (80085c4 <CDC_Receive_FS+0x1f0>)
 80083f8:	f7fe fdca 	bl	8006f90 <USBD_CDC_ReceivePacket>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73bb      	strb	r3, [r7, #14]
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d008      	beq.n	8008418 <CDC_Receive_FS+0x44>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008406:	2200      	movs	r2, #0
 8008408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800840c:	486c      	ldr	r0, [pc, #432]	; (80085c0 <CDC_Receive_FS+0x1ec>)
 800840e:	f7fa f87d 	bl	800250c <HAL_GPIO_WritePin>
		return result;
 8008412:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008416:	e0ce      	b.n	80085b6 <CDC_Receive_FS+0x1e2>
	}

	for (uint8_t i = 0; i < (*Len); i++)
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]
 800841c:	e0ae      	b.n	800857c <CDC_Receive_FS+0x1a8>
	{

		/* Avoid buffer overflow */
		if (txLen == APP_TX_DATA_SIZE)
 800841e:	4b6a      	ldr	r3, [pc, #424]	; (80085c8 <CDC_Receive_FS+0x1f4>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b80      	cmp	r3, #128	; 0x80
 8008424:	d102      	bne.n	800842c <CDC_Receive_FS+0x58>
		{
			txLen = 0;
 8008426:	4b68      	ldr	r3, [pc, #416]	; (80085c8 <CDC_Receive_FS+0x1f4>)
 8008428:	2200      	movs	r2, #0
 800842a:	701a      	strb	r2, [r3, #0]
		}
		if (rxLen == APP_RX_DATA_SIZE)
 800842c:	4b67      	ldr	r3, [pc, #412]	; (80085cc <CDC_Receive_FS+0x1f8>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	2b80      	cmp	r3, #128	; 0x80
 8008432:	d102      	bne.n	800843a <CDC_Receive_FS+0x66>
		{
			rxLen = 0;
 8008434:	4b65      	ldr	r3, [pc, #404]	; (80085cc <CDC_Receive_FS+0x1f8>)
 8008436:	2200      	movs	r2, #0
 8008438:	701a      	strb	r2, [r3, #0]
		}

		/* If Backspace key: clear the last char */
		if ((UserTxBufferFS[txLen++] = Buf[i]) == '\b')
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	441a      	add	r2, r3
 8008440:	4b61      	ldr	r3, [pc, #388]	; (80085c8 <CDC_Receive_FS+0x1f4>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	1c59      	adds	r1, r3, #1
 8008446:	b2c8      	uxtb	r0, r1
 8008448:	495f      	ldr	r1, [pc, #380]	; (80085c8 <CDC_Receive_FS+0x1f4>)
 800844a:	7008      	strb	r0, [r1, #0]
 800844c:	7811      	ldrb	r1, [r2, #0]
 800844e:	4a60      	ldr	r2, [pc, #384]	; (80085d0 <CDC_Receive_FS+0x1fc>)
 8008450:	54d1      	strb	r1, [r2, r3]
 8008452:	4a5f      	ldr	r2, [pc, #380]	; (80085d0 <CDC_Receive_FS+0x1fc>)
 8008454:	5cd3      	ldrb	r3, [r2, r3]
 8008456:	2b08      	cmp	r3, #8
 8008458:	d11e      	bne.n	8008498 <CDC_Receive_FS+0xc4>
		{
			UserTxBufferFS[txLen++] = ' ';
 800845a:	4b5b      	ldr	r3, [pc, #364]	; (80085c8 <CDC_Receive_FS+0x1f4>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	1c5a      	adds	r2, r3, #1
 8008460:	b2d1      	uxtb	r1, r2
 8008462:	4a59      	ldr	r2, [pc, #356]	; (80085c8 <CDC_Receive_FS+0x1f4>)
 8008464:	7011      	strb	r1, [r2, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	4b59      	ldr	r3, [pc, #356]	; (80085d0 <CDC_Receive_FS+0x1fc>)
 800846a:	2120      	movs	r1, #32
 800846c:	5499      	strb	r1, [r3, r2]
			UserTxBufferFS[txLen++] = '\b';
 800846e:	4b56      	ldr	r3, [pc, #344]	; (80085c8 <CDC_Receive_FS+0x1f4>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	b2d1      	uxtb	r1, r2
 8008476:	4a54      	ldr	r2, [pc, #336]	; (80085c8 <CDC_Receive_FS+0x1f4>)
 8008478:	7011      	strb	r1, [r2, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	4b54      	ldr	r3, [pc, #336]	; (80085d0 <CDC_Receive_FS+0x1fc>)
 800847e:	2108      	movs	r1, #8
 8008480:	5499      	strb	r1, [r3, r2]
			if (rxLen)
 8008482:	4b52      	ldr	r3, [pc, #328]	; (80085cc <CDC_Receive_FS+0x1f8>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d041      	beq.n	800850e <CDC_Receive_FS+0x13a>
			{
				rxLen--;
 800848a:	4b50      	ldr	r3, [pc, #320]	; (80085cc <CDC_Receive_FS+0x1f8>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	3b01      	subs	r3, #1
 8008490:	b2da      	uxtb	r2, r3
 8008492:	4b4e      	ldr	r3, [pc, #312]	; (80085cc <CDC_Receive_FS+0x1f8>)
 8008494:	701a      	strb	r2, [r3, #0]
 8008496:	e03a      	b.n	800850e <CDC_Receive_FS+0x13a>
			}
		}

		/* Else if Enter key: add a \n to terminal and extract output buffer */
		else if (Buf[i] == '\r' || Buf[i] == '\0')
 8008498:	7bfb      	ldrb	r3, [r7, #15]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b0d      	cmp	r3, #13
 80084a2:	d005      	beq.n	80084b0 <CDC_Receive_FS+0xdc>
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4413      	add	r3, r2
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d121      	bne.n	80084f4 <CDC_Receive_FS+0x120>
		{
			UserTxBufferFS[txLen++] = '\n';
 80084b0:	4b45      	ldr	r3, [pc, #276]	; (80085c8 <CDC_Receive_FS+0x1f4>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	1c5a      	adds	r2, r3, #1
 80084b6:	b2d1      	uxtb	r1, r2
 80084b8:	4a43      	ldr	r2, [pc, #268]	; (80085c8 <CDC_Receive_FS+0x1f4>)
 80084ba:	7011      	strb	r1, [r2, #0]
 80084bc:	461a      	mov	r2, r3
 80084be:	4b44      	ldr	r3, [pc, #272]	; (80085d0 <CDC_Receive_FS+0x1fc>)
 80084c0:	210a      	movs	r1, #10
 80084c2:	5499      	strb	r1, [r3, r2]
			RX_Buf_Temp[rxLen++] = '\0';
 80084c4:	4b41      	ldr	r3, [pc, #260]	; (80085cc <CDC_Receive_FS+0x1f8>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	b2d1      	uxtb	r1, r2
 80084cc:	4a3f      	ldr	r2, [pc, #252]	; (80085cc <CDC_Receive_FS+0x1f8>)
 80084ce:	7011      	strb	r1, [r2, #0]
 80084d0:	461a      	mov	r2, r3
 80084d2:	4b40      	ldr	r3, [pc, #256]	; (80085d4 <CDC_Receive_FS+0x200>)
 80084d4:	2100      	movs	r1, #0
 80084d6:	5499      	strb	r1, [r3, r2]
			memcpy(UserRxBufferFS, RX_Buf_Temp, rxLen);
 80084d8:	4b3c      	ldr	r3, [pc, #240]	; (80085cc <CDC_Receive_FS+0x1f8>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	461a      	mov	r2, r3
 80084de:	493d      	ldr	r1, [pc, #244]	; (80085d4 <CDC_Receive_FS+0x200>)
 80084e0:	483d      	ldr	r0, [pc, #244]	; (80085d8 <CDC_Receive_FS+0x204>)
 80084e2:	f002 fd89 	bl	800aff8 <memcpy>
			CDC_RX_DATA_PENDING = 1;
 80084e6:	4b3d      	ldr	r3, [pc, #244]	; (80085dc <CDC_Receive_FS+0x208>)
 80084e8:	2201      	movs	r2, #1
 80084ea:	701a      	strb	r2, [r3, #0]
			rxLen = 0;
 80084ec:	4b37      	ldr	r3, [pc, #220]	; (80085cc <CDC_Receive_FS+0x1f8>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	701a      	strb	r2, [r3, #0]
 80084f2:	e00c      	b.n	800850e <CDC_Receive_FS+0x13a>
		}
		/* Else only copy data */
		else
		{
			RX_Buf_Temp[rxLen++] = Buf[i];
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	441a      	add	r2, r3
 80084fa:	4b34      	ldr	r3, [pc, #208]	; (80085cc <CDC_Receive_FS+0x1f8>)
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	1c59      	adds	r1, r3, #1
 8008500:	b2c8      	uxtb	r0, r1
 8008502:	4932      	ldr	r1, [pc, #200]	; (80085cc <CDC_Receive_FS+0x1f8>)
 8008504:	7008      	strb	r0, [r1, #0]
 8008506:	4619      	mov	r1, r3
 8008508:	7812      	ldrb	r2, [r2, #0]
 800850a:	4b32      	ldr	r3, [pc, #200]	; (80085d4 <CDC_Receive_FS+0x200>)
 800850c:	545a      	strb	r2, [r3, r1]
		}

		if(RX_Buf_Temp[MAX(rxLen-3,0)] == '\033' && RX_Buf_Temp[MAX(rxLen-2,0)] == '[' && (RX_Buf_Temp[rxLen] == 'A' || RX_Buf_Temp[rxLen] == 'B' || RX_Buf_Temp[rxLen] == 'C' || RX_Buf_Temp[rxLen] == 'D'))
 800850e:	4b2f      	ldr	r3, [pc, #188]	; (80085cc <CDC_Receive_FS+0x1f8>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	3b03      	subs	r3, #3
 8008514:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008518:	4a2e      	ldr	r2, [pc, #184]	; (80085d4 <CDC_Receive_FS+0x200>)
 800851a:	5cd3      	ldrb	r3, [r2, r3]
 800851c:	2b1b      	cmp	r3, #27
 800851e:	d12a      	bne.n	8008576 <CDC_Receive_FS+0x1a2>
 8008520:	4b2a      	ldr	r3, [pc, #168]	; (80085cc <CDC_Receive_FS+0x1f8>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	3b02      	subs	r3, #2
 8008526:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800852a:	4a2a      	ldr	r2, [pc, #168]	; (80085d4 <CDC_Receive_FS+0x200>)
 800852c:	5cd3      	ldrb	r3, [r2, r3]
 800852e:	2b5b      	cmp	r3, #91	; 0x5b
 8008530:	d121      	bne.n	8008576 <CDC_Receive_FS+0x1a2>
 8008532:	4b26      	ldr	r3, [pc, #152]	; (80085cc <CDC_Receive_FS+0x1f8>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	4b26      	ldr	r3, [pc, #152]	; (80085d4 <CDC_Receive_FS+0x200>)
 800853a:	5c9b      	ldrb	r3, [r3, r2]
 800853c:	2b41      	cmp	r3, #65	; 0x41
 800853e:	d014      	beq.n	800856a <CDC_Receive_FS+0x196>
 8008540:	4b22      	ldr	r3, [pc, #136]	; (80085cc <CDC_Receive_FS+0x1f8>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	4b23      	ldr	r3, [pc, #140]	; (80085d4 <CDC_Receive_FS+0x200>)
 8008548:	5c9b      	ldrb	r3, [r3, r2]
 800854a:	2b42      	cmp	r3, #66	; 0x42
 800854c:	d00d      	beq.n	800856a <CDC_Receive_FS+0x196>
 800854e:	4b1f      	ldr	r3, [pc, #124]	; (80085cc <CDC_Receive_FS+0x1f8>)
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	4b1f      	ldr	r3, [pc, #124]	; (80085d4 <CDC_Receive_FS+0x200>)
 8008556:	5c9b      	ldrb	r3, [r3, r2]
 8008558:	2b43      	cmp	r3, #67	; 0x43
 800855a:	d006      	beq.n	800856a <CDC_Receive_FS+0x196>
 800855c:	4b1b      	ldr	r3, [pc, #108]	; (80085cc <CDC_Receive_FS+0x1f8>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	4b1c      	ldr	r3, [pc, #112]	; (80085d4 <CDC_Receive_FS+0x200>)
 8008564:	5c9b      	ldrb	r3, [r3, r2]
 8008566:	2b44      	cmp	r3, #68	; 0x44
 8008568:	d105      	bne.n	8008576 <CDC_Receive_FS+0x1a2>
		{
			rxLen -= 4;
 800856a:	4b18      	ldr	r3, [pc, #96]	; (80085cc <CDC_Receive_FS+0x1f8>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	3b04      	subs	r3, #4
 8008570:	b2da      	uxtb	r2, r3
 8008572:	4b16      	ldr	r3, [pc, #88]	; (80085cc <CDC_Receive_FS+0x1f8>)
 8008574:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < (*Len); i++)
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	3301      	adds	r3, #1
 800857a:	73fb      	strb	r3, [r7, #15]
 800857c:	7bfa      	ldrb	r2, [r7, #15]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	f4ff af4b 	bcc.w	800841e <CDC_Receive_FS+0x4a>
		}
	}

	/* Send result to terminal */
	if ((result = CDC_Transmit_FS(UserTxBufferFS, txLen)) == USBD_OK)
 8008588:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <CDC_Receive_FS+0x1f4>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	b29b      	uxth	r3, r3
 800858e:	4619      	mov	r1, r3
 8008590:	480f      	ldr	r0, [pc, #60]	; (80085d0 <CDC_Receive_FS+0x1fc>)
 8008592:	f000 f825 	bl	80085e0 <CDC_Transmit_FS>
 8008596:	4603      	mov	r3, r0
 8008598:	73bb      	strb	r3, [r7, #14]
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d102      	bne.n	80085a6 <CDC_Receive_FS+0x1d2>
	{
		txLen = 0;
 80085a0:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <CDC_Receive_FS+0x1f4>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80085a6:	2200      	movs	r2, #0
 80085a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085ac:	4804      	ldr	r0, [pc, #16]	; (80085c0 <CDC_Receive_FS+0x1ec>)
 80085ae:	f7f9 ffad 	bl	800250c <HAL_GPIO_WritePin>
	return result;
 80085b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
  /* USER CODE END 6 */
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	40020c00 	.word	0x40020c00
 80085c4:	20011a90 	.word	0x20011a90
 80085c8:	20000787 	.word	0x20000787
 80085cc:	20000788 	.word	0x20000788
 80085d0:	20011de0 	.word	0x20011de0
 80085d4:	2000078c 	.word	0x2000078c
 80085d8:	20011d60 	.word	0x20011d60
 80085dc:	20000786 	.word	0x20000786

080085e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80085f0:	2201      	movs	r2, #1
 80085f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085f6:	4815      	ldr	r0, [pc, #84]	; (800864c <CDC_Transmit_FS+0x6c>)
 80085f8:	f7f9 ff88 	bl	800250c <HAL_GPIO_WritePin>
	USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 80085fc:	4b14      	ldr	r3, [pc, #80]	; (8008650 <CDC_Transmit_FS+0x70>)
 80085fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008602:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0U)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <CDC_Transmit_FS+0x3e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800860e:	2200      	movs	r2, #0
 8008610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008614:	480d      	ldr	r0, [pc, #52]	; (800864c <CDC_Transmit_FS+0x6c>)
 8008616:	f7f9 ff79 	bl	800250c <HAL_GPIO_WritePin>
		return USBD_BUSY;
 800861a:	2301      	movs	r3, #1
 800861c:	e011      	b.n	8008642 <CDC_Transmit_FS+0x62>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800861e:	887b      	ldrh	r3, [r7, #2]
 8008620:	461a      	mov	r2, r3
 8008622:	6879      	ldr	r1, [r7, #4]
 8008624:	480a      	ldr	r0, [pc, #40]	; (8008650 <CDC_Transmit_FS+0x70>)
 8008626:	f7fe fc56 	bl	8006ed6 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800862a:	4809      	ldr	r0, [pc, #36]	; (8008650 <CDC_Transmit_FS+0x70>)
 800862c:	f7fe fc80 	bl	8006f30 <USBD_CDC_TransmitPacket>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008634:	2200      	movs	r2, #0
 8008636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800863a:	4804      	ldr	r0, [pc, #16]	; (800864c <CDC_Transmit_FS+0x6c>)
 800863c:	f7f9 ff66 	bl	800250c <HAL_GPIO_WritePin>
  /* USER CODE END 7 */
  return result;
 8008640:	7bfb      	ldrb	r3, [r7, #15]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	40020c00 	.word	0x40020c00
 8008650:	20011a90 	.word	0x20011a90

08008654 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	4613      	mov	r3, r2
 8008660:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800866a:	4618      	mov	r0, r3
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
	...

08008678 <CDC_Printf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_Printf(const char *format, ...)
{
 8008678:	b40f      	push	{r0, r1, r2, r3}
 800867a:	b580      	push	{r7, lr}
 800867c:	b082      	sub	sp, #8
 800867e:	af00      	add	r7, sp, #0
	va_list arg;
	if (HOST_PORT_COM_OPEN)
 8008680:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <CDC_Printf+0x50>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d018      	beq.n	80086ba <CDC_Printf+0x42>
	{
		va_start(arg, format);
 8008688:	f107 0314 	add.w	r3, r7, #20
 800868c:	607b      	str	r3, [r7, #4]
		vsprintf((char*) UserTxBufferFS, format, arg);
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6939      	ldr	r1, [r7, #16]
 8008692:	480e      	ldr	r0, [pc, #56]	; (80086cc <CDC_Printf+0x54>)
 8008694:	f002 fdb2 	bl	800b1fc <vsiprintf>
		va_end(arg);
		while(CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY && HOST_PORT_COM_OPEN)
 8008698:	bf00      	nop
 800869a:	480c      	ldr	r0, [pc, #48]	; (80086cc <CDC_Printf+0x54>)
 800869c:	f7f7 fda2 	bl	80001e4 <strlen>
 80086a0:	4603      	mov	r3, r0
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	4619      	mov	r1, r3
 80086a6:	4809      	ldr	r0, [pc, #36]	; (80086cc <CDC_Printf+0x54>)
 80086a8:	f7ff ff9a 	bl	80085e0 <CDC_Transmit_FS>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d103      	bne.n	80086ba <CDC_Printf+0x42>
 80086b2:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <CDC_Printf+0x50>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1ef      	bne.n	800869a <CDC_Printf+0x22>
		{
		}
	}
}
 80086ba:	bf00      	nop
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086c4:	b004      	add	sp, #16
 80086c6:	4770      	bx	lr
 80086c8:	20000785 	.word	0x20000785
 80086cc:	20011de0 	.word	0x20011de0

080086d0 <d_print>:

void d_print(const char *format, ...)
{
 80086d0:	b40f      	push	{r0, r1, r2, r3}
 80086d2:	b5b0      	push	{r4, r5, r7, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	af02      	add	r7, sp, #8
	va_list arg;
	uint32_t clktime;
	if (HOST_PORT_COM_OPEN)
 80086d8:	4b30      	ldr	r3, [pc, #192]	; (800879c <d_print+0xcc>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d056      	beq.n	800878e <d_print+0xbe>
	{
		clktime = HAL_GetTick();
 80086e0:	f7f9 f898 	bl	8001814 <HAL_GetTick>
 80086e4:	6078      	str	r0, [r7, #4]
		va_start(arg, format);
 80086e6:	f107 031c 	add.w	r3, r7, #28
 80086ea:	603b      	str	r3, [r7, #0]
		sprintf((char*) UserTxBufferFS, "[%02lu:%02lu:%02lu.%03lu] ", (clktime/3600000)%100, (clktime/60000)%60, (clktime/1000)%60, clktime%1000);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a2c      	ldr	r2, [pc, #176]	; (80087a0 <d_print+0xd0>)
 80086f0:	fba2 2303 	umull	r2, r3, r2, r3
 80086f4:	0d5b      	lsrs	r3, r3, #21
 80086f6:	4a2b      	ldr	r2, [pc, #172]	; (80087a4 <d_print+0xd4>)
 80086f8:	fba2 1203 	umull	r1, r2, r2, r3
 80086fc:	0950      	lsrs	r0, r2, #5
 80086fe:	2264      	movs	r2, #100	; 0x64
 8008700:	fb02 f200 	mul.w	r2, r2, r0
 8008704:	1a98      	subs	r0, r3, r2
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a27      	ldr	r2, [pc, #156]	; (80087a8 <d_print+0xd8>)
 800870a:	fba2 2303 	umull	r2, r3, r2, r3
 800870e:	0b9a      	lsrs	r2, r3, #14
 8008710:	4b26      	ldr	r3, [pc, #152]	; (80087ac <d_print+0xdc>)
 8008712:	fba3 1302 	umull	r1, r3, r3, r2
 8008716:	0959      	lsrs	r1, r3, #5
 8008718:	460b      	mov	r3, r1
 800871a:	011b      	lsls	r3, r3, #4
 800871c:	1a5b      	subs	r3, r3, r1
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	1ad1      	subs	r1, r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a22      	ldr	r2, [pc, #136]	; (80087b0 <d_print+0xe0>)
 8008726:	fba2 2303 	umull	r2, r3, r2, r3
 800872a:	099c      	lsrs	r4, r3, #6
 800872c:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <d_print+0xdc>)
 800872e:	fba3 2304 	umull	r2, r3, r3, r4
 8008732:	095a      	lsrs	r2, r3, #5
 8008734:	4613      	mov	r3, r2
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	1a9b      	subs	r3, r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	1ae2      	subs	r2, r4, r3
 800873e:	687c      	ldr	r4, [r7, #4]
 8008740:	4b1b      	ldr	r3, [pc, #108]	; (80087b0 <d_print+0xe0>)
 8008742:	fba3 5304 	umull	r5, r3, r3, r4
 8008746:	099b      	lsrs	r3, r3, #6
 8008748:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800874c:	fb05 f303 	mul.w	r3, r5, r3
 8008750:	1ae3      	subs	r3, r4, r3
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	9200      	str	r2, [sp, #0]
 8008756:	460b      	mov	r3, r1
 8008758:	4602      	mov	r2, r0
 800875a:	4916      	ldr	r1, [pc, #88]	; (80087b4 <d_print+0xe4>)
 800875c:	4816      	ldr	r0, [pc, #88]	; (80087b8 <d_print+0xe8>)
 800875e:	f002 fd17 	bl	800b190 <siprintf>
		vsprintf((char*) &UserTxBufferFS[15], format, arg);
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	69b9      	ldr	r1, [r7, #24]
 8008766:	4815      	ldr	r0, [pc, #84]	; (80087bc <d_print+0xec>)
 8008768:	f002 fd48 	bl	800b1fc <vsiprintf>
		va_end(arg);
		while(CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY && HOST_PORT_COM_OPEN)
 800876c:	bf00      	nop
 800876e:	4812      	ldr	r0, [pc, #72]	; (80087b8 <d_print+0xe8>)
 8008770:	f7f7 fd38 	bl	80001e4 <strlen>
 8008774:	4603      	mov	r3, r0
 8008776:	b29b      	uxth	r3, r3
 8008778:	4619      	mov	r1, r3
 800877a:	480f      	ldr	r0, [pc, #60]	; (80087b8 <d_print+0xe8>)
 800877c:	f7ff ff30 	bl	80085e0 <CDC_Transmit_FS>
 8008780:	4603      	mov	r3, r0
 8008782:	2b01      	cmp	r3, #1
 8008784:	d103      	bne.n	800878e <d_print+0xbe>
 8008786:	4b05      	ldr	r3, [pc, #20]	; (800879c <d_print+0xcc>)
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1ef      	bne.n	800876e <d_print+0x9e>
		{
		}
	}
}
 800878e:	bf00      	nop
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8008798:	b004      	add	sp, #16
 800879a:	4770      	bx	lr
 800879c:	20000785 	.word	0x20000785
 80087a0:	95217cb1 	.word	0x95217cb1
 80087a4:	51eb851f 	.word	0x51eb851f
 80087a8:	45e7b273 	.word	0x45e7b273
 80087ac:	88888889 	.word	0x88888889
 80087b0:	10624dd3 	.word	0x10624dd3
 80087b4:	0800ce00 	.word	0x0800ce00
 80087b8:	20011de0 	.word	0x20011de0
 80087bc:	20011def 	.word	0x20011def

080087c0 <CDC_Scanf>:

void CDC_Scanf(const char *format, ...)
{
 80087c0:	b40f      	push	{r0, r1, r2, r3}
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
	while (!CDC_RX_DATA_PENDING && HOST_PORT_COM_OPEN)
 80087c8:	e005      	b.n	80087d6 <CDC_Scanf+0x16>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80087ca:	2201      	movs	r2, #1
 80087cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80087d0:	4814      	ldr	r0, [pc, #80]	; (8008824 <CDC_Scanf+0x64>)
 80087d2:	f7f9 fe9b 	bl	800250c <HAL_GPIO_WritePin>
	while (!CDC_RX_DATA_PENDING && HOST_PORT_COM_OPEN)
 80087d6:	4b14      	ldr	r3, [pc, #80]	; (8008828 <CDC_Scanf+0x68>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	f083 0301 	eor.w	r3, r3, #1
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d003      	beq.n	80087ec <CDC_Scanf+0x2c>
 80087e4:	4b11      	ldr	r3, [pc, #68]	; (800882c <CDC_Scanf+0x6c>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1ee      	bne.n	80087ca <CDC_Scanf+0xa>
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80087ec:	2200      	movs	r2, #0
 80087ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80087f2:	480c      	ldr	r0, [pc, #48]	; (8008824 <CDC_Scanf+0x64>)
 80087f4:	f7f9 fe8a 	bl	800250c <HAL_GPIO_WritePin>
	if (CDC_RX_DATA_PENDING)
 80087f8:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <CDC_Scanf+0x68>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00a      	beq.n	8008816 <CDC_Scanf+0x56>
	{
		va_list arg;
		va_start(arg, format);
 8008800:	f107 0314 	add.w	r3, r7, #20
 8008804:	607b      	str	r3, [r7, #4]
		vsscanf((char*) UserRxBufferFS, format, arg);
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	6939      	ldr	r1, [r7, #16]
 800880a:	4809      	ldr	r0, [pc, #36]	; (8008830 <CDC_Scanf+0x70>)
 800880c:	f002 fd24 	bl	800b258 <vsiscanf>
		va_end(arg);
		CDC_RX_DATA_PENDING = 0;
 8008810:	4b05      	ldr	r3, [pc, #20]	; (8008828 <CDC_Scanf+0x68>)
 8008812:	2200      	movs	r2, #0
 8008814:	701a      	strb	r2, [r3, #0]
	}
}
 8008816:	bf00      	nop
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008820:	b004      	add	sp, #16
 8008822:	4770      	bx	lr
 8008824:	40020c00 	.word	0x40020c00
 8008828:	20000786 	.word	0x20000786
 800882c:	20000785 	.word	0x20000785
 8008830:	20011d60 	.word	0x20011d60

08008834 <d_spin>:

void d_spin(void)
{
 8008834:	b5b0      	push	{r4, r5, r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af02      	add	r7, sp, #8
	static uint32_t clktime;
	if (HOST_PORT_COM_OPEN)
 800883a:	4b2e      	ldr	r3, [pc, #184]	; (80088f4 <d_spin+0xc0>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d054      	beq.n	80088ec <d_spin+0xb8>
	{
		clktime = HAL_GetTick();
 8008842:	f7f8 ffe7 	bl	8001814 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	4b2b      	ldr	r3, [pc, #172]	; (80088f8 <d_spin+0xc4>)
 800884a:	601a      	str	r2, [r3, #0]
		sprintf((char*) UserTxBufferFS, "\033[1A\r[%02lu:%02lu:%02lu.%03lu]\033[1B\r", (clktime/3600000)%100, (clktime/60000)%60, (clktime/1000)%60, clktime%1000);
 800884c:	4b2a      	ldr	r3, [pc, #168]	; (80088f8 <d_spin+0xc4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a2a      	ldr	r2, [pc, #168]	; (80088fc <d_spin+0xc8>)
 8008852:	fba2 2303 	umull	r2, r3, r2, r3
 8008856:	0d5b      	lsrs	r3, r3, #21
 8008858:	4a29      	ldr	r2, [pc, #164]	; (8008900 <d_spin+0xcc>)
 800885a:	fba2 1203 	umull	r1, r2, r2, r3
 800885e:	0950      	lsrs	r0, r2, #5
 8008860:	2264      	movs	r2, #100	; 0x64
 8008862:	fb02 f200 	mul.w	r2, r2, r0
 8008866:	1a98      	subs	r0, r3, r2
 8008868:	4b23      	ldr	r3, [pc, #140]	; (80088f8 <d_spin+0xc4>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a25      	ldr	r2, [pc, #148]	; (8008904 <d_spin+0xd0>)
 800886e:	fba2 2303 	umull	r2, r3, r2, r3
 8008872:	0b9a      	lsrs	r2, r3, #14
 8008874:	4b24      	ldr	r3, [pc, #144]	; (8008908 <d_spin+0xd4>)
 8008876:	fba3 1302 	umull	r1, r3, r3, r2
 800887a:	0959      	lsrs	r1, r3, #5
 800887c:	460b      	mov	r3, r1
 800887e:	011b      	lsls	r3, r3, #4
 8008880:	1a5b      	subs	r3, r3, r1
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	1ad1      	subs	r1, r2, r3
 8008886:	4b1c      	ldr	r3, [pc, #112]	; (80088f8 <d_spin+0xc4>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a20      	ldr	r2, [pc, #128]	; (800890c <d_spin+0xd8>)
 800888c:	fba2 2303 	umull	r2, r3, r2, r3
 8008890:	099c      	lsrs	r4, r3, #6
 8008892:	4b1d      	ldr	r3, [pc, #116]	; (8008908 <d_spin+0xd4>)
 8008894:	fba3 2304 	umull	r2, r3, r3, r4
 8008898:	095a      	lsrs	r2, r3, #5
 800889a:	4613      	mov	r3, r2
 800889c:	011b      	lsls	r3, r3, #4
 800889e:	1a9b      	subs	r3, r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	1ae2      	subs	r2, r4, r3
 80088a4:	4b14      	ldr	r3, [pc, #80]	; (80088f8 <d_spin+0xc4>)
 80088a6:	681c      	ldr	r4, [r3, #0]
 80088a8:	4b18      	ldr	r3, [pc, #96]	; (800890c <d_spin+0xd8>)
 80088aa:	fba3 5304 	umull	r5, r3, r3, r4
 80088ae:	099b      	lsrs	r3, r3, #6
 80088b0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80088b4:	fb05 f303 	mul.w	r3, r5, r3
 80088b8:	1ae3      	subs	r3, r4, r3
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	9200      	str	r2, [sp, #0]
 80088be:	460b      	mov	r3, r1
 80088c0:	4602      	mov	r2, r0
 80088c2:	4913      	ldr	r1, [pc, #76]	; (8008910 <d_spin+0xdc>)
 80088c4:	4813      	ldr	r0, [pc, #76]	; (8008914 <d_spin+0xe0>)
 80088c6:	f002 fc63 	bl	800b190 <siprintf>
		while(CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY && HOST_PORT_COM_OPEN)
 80088ca:	bf00      	nop
 80088cc:	4811      	ldr	r0, [pc, #68]	; (8008914 <d_spin+0xe0>)
 80088ce:	f7f7 fc89 	bl	80001e4 <strlen>
 80088d2:	4603      	mov	r3, r0
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	4619      	mov	r1, r3
 80088d8:	480e      	ldr	r0, [pc, #56]	; (8008914 <d_spin+0xe0>)
 80088da:	f7ff fe81 	bl	80085e0 <CDC_Transmit_FS>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d103      	bne.n	80088ec <d_spin+0xb8>
 80088e4:	4b03      	ldr	r3, [pc, #12]	; (80088f4 <d_spin+0xc0>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1ef      	bne.n	80088cc <d_spin+0x98>
		{
		}
	}
}
 80088ec:	bf00      	nop
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bdb0      	pop	{r4, r5, r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20000785 	.word	0x20000785
 80088f8:	2000080c 	.word	0x2000080c
 80088fc:	95217cb1 	.word	0x95217cb1
 8008900:	51eb851f 	.word	0x51eb851f
 8008904:	45e7b273 	.word	0x45e7b273
 8008908:	88888889 	.word	0x88888889
 800890c:	10624dd3 	.word	0x10624dd3
 8008910:	0800ce1c 	.word	0x0800ce1c
 8008914:	20011de0 	.word	0x20011de0

08008918 <CDC_Clear>:

void CDC_Clear(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
	while(CDC_Transmit_FS((uint8_t *)"\033[2J", 4) == USBD_BUSY && HOST_PORT_COM_OPEN)
 800891c:	bf00      	nop
 800891e:	2104      	movs	r1, #4
 8008920:	4805      	ldr	r0, [pc, #20]	; (8008938 <CDC_Clear+0x20>)
 8008922:	f7ff fe5d 	bl	80085e0 <CDC_Transmit_FS>
 8008926:	4603      	mov	r3, r0
 8008928:	2b01      	cmp	r3, #1
 800892a:	d103      	bne.n	8008934 <CDC_Clear+0x1c>
 800892c:	4b03      	ldr	r3, [pc, #12]	; (800893c <CDC_Clear+0x24>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1f4      	bne.n	800891e <CDC_Clear+0x6>
	{
	}
}
 8008934:	bf00      	nop
 8008936:	bd80      	pop	{r7, pc}
 8008938:	0800ce40 	.word	0x0800ce40
 800893c:	20000785 	.word	0x20000785

08008940 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	6039      	str	r1, [r7, #0]
 800894a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2212      	movs	r2, #18
 8008950:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008952:	4b03      	ldr	r3, [pc, #12]	; (8008960 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	20000558 	.word	0x20000558

08008964 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	6039      	str	r1, [r7, #0]
 800896e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2204      	movs	r2, #4
 8008974:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008976:	4b03      	ldr	r3, [pc, #12]	; (8008984 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr
 8008984:	2000056c 	.word	0x2000056c

08008988 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	4603      	mov	r3, r0
 8008990:	6039      	str	r1, [r7, #0]
 8008992:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008994:	79fb      	ldrb	r3, [r7, #7]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d105      	bne.n	80089a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	4907      	ldr	r1, [pc, #28]	; (80089bc <USBD_FS_ProductStrDescriptor+0x34>)
 800899e:	4808      	ldr	r0, [pc, #32]	; (80089c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80089a0:	f7ff fb45 	bl	800802e <USBD_GetString>
 80089a4:	e004      	b.n	80089b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	4904      	ldr	r1, [pc, #16]	; (80089bc <USBD_FS_ProductStrDescriptor+0x34>)
 80089aa:	4805      	ldr	r0, [pc, #20]	; (80089c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80089ac:	f7ff fb3f 	bl	800802e <USBD_GetString>
  }
  return USBD_StrDesc;
 80089b0:	4b02      	ldr	r3, [pc, #8]	; (80089bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20011e60 	.word	0x20011e60
 80089c0:	0800ce74 	.word	0x0800ce74

080089c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	6039      	str	r1, [r7, #0]
 80089ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	4904      	ldr	r1, [pc, #16]	; (80089e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089d4:	4804      	ldr	r0, [pc, #16]	; (80089e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089d6:	f7ff fb2a 	bl	800802e <USBD_GetString>
  return USBD_StrDesc;
 80089da:	4b02      	ldr	r3, [pc, #8]	; (80089e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	20011e60 	.word	0x20011e60
 80089e8:	0800ce8c 	.word	0x0800ce8c

080089ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	6039      	str	r1, [r7, #0]
 80089f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	221a      	movs	r2, #26
 80089fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089fe:	f000 f843 	bl	8008a88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a02:	4b02      	ldr	r3, [pc, #8]	; (8008a0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20000570 	.word	0x20000570

08008a10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4603      	mov	r3, r0
 8008a18:	6039      	str	r1, [r7, #0]
 8008a1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d105      	bne.n	8008a2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	4907      	ldr	r1, [pc, #28]	; (8008a44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a26:	4808      	ldr	r0, [pc, #32]	; (8008a48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a28:	f7ff fb01 	bl	800802e <USBD_GetString>
 8008a2c:	e004      	b.n	8008a38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	4904      	ldr	r1, [pc, #16]	; (8008a44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a32:	4805      	ldr	r0, [pc, #20]	; (8008a48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a34:	f7ff fafb 	bl	800802e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a38:	4b02      	ldr	r3, [pc, #8]	; (8008a44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20011e60 	.word	0x20011e60
 8008a48:	0800cea0 	.word	0x0800cea0

08008a4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	6039      	str	r1, [r7, #0]
 8008a56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d105      	bne.n	8008a6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	4907      	ldr	r1, [pc, #28]	; (8008a80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a62:	4808      	ldr	r0, [pc, #32]	; (8008a84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a64:	f7ff fae3 	bl	800802e <USBD_GetString>
 8008a68:	e004      	b.n	8008a74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	4904      	ldr	r1, [pc, #16]	; (8008a80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a6e:	4805      	ldr	r0, [pc, #20]	; (8008a84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a70:	f7ff fadd 	bl	800802e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a74:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20011e60 	.word	0x20011e60
 8008a84:	0800ceac 	.word	0x0800ceac

08008a88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a8e:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <Get_SerialNum+0x44>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a94:	4b0e      	ldr	r3, [pc, #56]	; (8008ad0 <Get_SerialNum+0x48>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a9a:	4b0e      	ldr	r3, [pc, #56]	; (8008ad4 <Get_SerialNum+0x4c>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d009      	beq.n	8008ac2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008aae:	2208      	movs	r2, #8
 8008ab0:	4909      	ldr	r1, [pc, #36]	; (8008ad8 <Get_SerialNum+0x50>)
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f000 f814 	bl	8008ae0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ab8:	2204      	movs	r2, #4
 8008aba:	4908      	ldr	r1, [pc, #32]	; (8008adc <Get_SerialNum+0x54>)
 8008abc:	68b8      	ldr	r0, [r7, #8]
 8008abe:	f000 f80f 	bl	8008ae0 <IntToUnicode>
  }
}
 8008ac2:	bf00      	nop
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	1fff7a10 	.word	0x1fff7a10
 8008ad0:	1fff7a14 	.word	0x1fff7a14
 8008ad4:	1fff7a18 	.word	0x1fff7a18
 8008ad8:	20000572 	.word	0x20000572
 8008adc:	20000582 	.word	0x20000582

08008ae0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b087      	sub	sp, #28
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	4613      	mov	r3, r2
 8008aec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008aee:	2300      	movs	r3, #0
 8008af0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008af2:	2300      	movs	r3, #0
 8008af4:	75fb      	strb	r3, [r7, #23]
 8008af6:	e027      	b.n	8008b48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	0f1b      	lsrs	r3, r3, #28
 8008afc:	2b09      	cmp	r3, #9
 8008afe:	d80b      	bhi.n	8008b18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	0f1b      	lsrs	r3, r3, #28
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	440b      	add	r3, r1
 8008b10:	3230      	adds	r2, #48	; 0x30
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	701a      	strb	r2, [r3, #0]
 8008b16:	e00a      	b.n	8008b2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	0f1b      	lsrs	r3, r3, #28
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	4619      	mov	r1, r3
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	440b      	add	r3, r1
 8008b28:	3237      	adds	r2, #55	; 0x37
 8008b2a:	b2d2      	uxtb	r2, r2
 8008b2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b34:	7dfb      	ldrb	r3, [r7, #23]
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	3301      	adds	r3, #1
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	3301      	adds	r3, #1
 8008b46:	75fb      	strb	r3, [r7, #23]
 8008b48:	7dfa      	ldrb	r2, [r7, #23]
 8008b4a:	79fb      	ldrb	r3, [r7, #7]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d3d3      	bcc.n	8008af8 <IntToUnicode+0x18>
  }
}
 8008b50:	bf00      	nop
 8008b52:	371c      	adds	r7, #28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08a      	sub	sp, #40	; 0x28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b64:	f107 0314 	add.w	r3, r7, #20
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	605a      	str	r2, [r3, #4]
 8008b6e:	609a      	str	r2, [r3, #8]
 8008b70:	60da      	str	r2, [r3, #12]
 8008b72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b7c:	d147      	bne.n	8008c0e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b7e:	2300      	movs	r3, #0
 8008b80:	613b      	str	r3, [r7, #16]
 8008b82:	4b25      	ldr	r3, [pc, #148]	; (8008c18 <HAL_PCD_MspInit+0xbc>)
 8008b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b86:	4a24      	ldr	r2, [pc, #144]	; (8008c18 <HAL_PCD_MspInit+0xbc>)
 8008b88:	f043 0301 	orr.w	r3, r3, #1
 8008b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b8e:	4b22      	ldr	r3, [pc, #136]	; (8008c18 <HAL_PCD_MspInit+0xbc>)
 8008b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	613b      	str	r3, [r7, #16]
 8008b98:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ba8:	f107 0314 	add.w	r3, r7, #20
 8008bac:	4619      	mov	r1, r3
 8008bae:	481b      	ldr	r0, [pc, #108]	; (8008c1c <HAL_PCD_MspInit+0xc0>)
 8008bb0:	f7f9 fafa 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008bb4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bba:	2302      	movs	r3, #2
 8008bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008bc6:	230a      	movs	r3, #10
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bca:	f107 0314 	add.w	r3, r7, #20
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4812      	ldr	r0, [pc, #72]	; (8008c1c <HAL_PCD_MspInit+0xc0>)
 8008bd2:	f7f9 fae9 	bl	80021a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008bd6:	4b10      	ldr	r3, [pc, #64]	; (8008c18 <HAL_PCD_MspInit+0xbc>)
 8008bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bda:	4a0f      	ldr	r2, [pc, #60]	; (8008c18 <HAL_PCD_MspInit+0xbc>)
 8008bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be0:	6353      	str	r3, [r2, #52]	; 0x34
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <HAL_PCD_MspInit+0xbc>)
 8008be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bea:	4a0b      	ldr	r2, [pc, #44]	; (8008c18 <HAL_PCD_MspInit+0xbc>)
 8008bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8008bf2:	4b09      	ldr	r3, [pc, #36]	; (8008c18 <HAL_PCD_MspInit+0xbc>)
 8008bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2100      	movs	r1, #0
 8008c02:	2043      	movs	r0, #67	; 0x43
 8008c04:	f7f8 ff0f 	bl	8001a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c08:	2043      	movs	r0, #67	; 0x43
 8008c0a:	f7f8 ff28 	bl	8001a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c0e:	bf00      	nop
 8008c10:	3728      	adds	r7, #40	; 0x28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	40023800 	.word	0x40023800
 8008c1c:	40020000 	.word	0x40020000

08008c20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c34:	4619      	mov	r1, r3
 8008c36:	4610      	mov	r0, r2
 8008c38:	f7fe fa76 	bl	8007128 <USBD_LL_SetupStage>
}
 8008c3c:	bf00      	nop
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008c56:	78fa      	ldrb	r2, [r7, #3]
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	1a9b      	subs	r3, r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	440b      	add	r3, r1
 8008c64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	f7fe faae 	bl	80071ce <USBD_LL_DataOutStage>
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	460b      	mov	r3, r1
 8008c84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008c8c:	78fa      	ldrb	r2, [r7, #3]
 8008c8e:	6879      	ldr	r1, [r7, #4]
 8008c90:	4613      	mov	r3, r2
 8008c92:	00db      	lsls	r3, r3, #3
 8008c94:	1a9b      	subs	r3, r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	440b      	add	r3, r1
 8008c9a:	3348      	adds	r3, #72	; 0x48
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	78fb      	ldrb	r3, [r7, #3]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	f7fe faf7 	bl	8007294 <USBD_LL_DataInStage>
}
 8008ca6:	bf00      	nop
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe fbfb 	bl	80074b8 <USBD_LL_SOF>
}
 8008cc2:	bf00      	nop
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d102      	bne.n	8008ce4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	73fb      	strb	r3, [r7, #15]
 8008ce2:	e008      	b.n	8008cf6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d102      	bne.n	8008cf2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008cec:	2301      	movs	r3, #1
 8008cee:	73fb      	strb	r3, [r7, #15]
 8008cf0:	e001      	b.n	8008cf6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008cf2:	f7f8 fa93 	bl	800121c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cfc:	7bfa      	ldrb	r2, [r7, #15]
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7fe fb9e 	bl	8007442 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fb57 	bl	80073c0 <USBD_LL_Reset>
}
 8008d12:	bf00      	nop
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe fb99 	bl	8007462 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6812      	ldr	r2, [r2, #0]
 8008d3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d42:	f043 0301 	orr.w	r3, r3, #1
 8008d46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a1b      	ldr	r3, [r3, #32]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d005      	beq.n	8008d5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d50:	4b04      	ldr	r3, [pc, #16]	; (8008d64 <HAL_PCD_SuspendCallback+0x48>)
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	4a03      	ldr	r2, [pc, #12]	; (8008d64 <HAL_PCD_SuspendCallback+0x48>)
 8008d56:	f043 0306 	orr.w	r3, r3, #6
 8008d5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d5c:	bf00      	nop
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	e000ed00 	.word	0xe000ed00

08008d68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe fb88 	bl	800748c <USBD_LL_Resume>
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d96:	78fa      	ldrb	r2, [r7, #3]
 8008d98:	4611      	mov	r1, r2
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe fbb3 	bl	8007506 <USBD_LL_IsoOUTIncomplete>
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dba:	78fa      	ldrb	r2, [r7, #3]
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fb94 	bl	80074ec <USBD_LL_IsoINIncomplete>
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe fba0 	bl	8007520 <USBD_LL_DevConnected>
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fe fb9d 	bl	8007536 <USBD_LL_DevDisconnected>
}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d13c      	bne.n	8008e8e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e14:	4a20      	ldr	r2, [pc, #128]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a1e      	ldr	r2, [pc, #120]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e20:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e24:	4b1c      	ldr	r3, [pc, #112]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008e2c:	4b1a      	ldr	r3, [pc, #104]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e2e:	2204      	movs	r2, #4
 8008e30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e32:	4b19      	ldr	r3, [pc, #100]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e34:	2202      	movs	r2, #2
 8008e36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e38:	4b17      	ldr	r3, [pc, #92]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e3e:	4b16      	ldr	r3, [pc, #88]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e40:	2202      	movs	r2, #2
 8008e42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e44:	4b14      	ldr	r3, [pc, #80]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e46:	2200      	movs	r2, #0
 8008e48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e4a:	4b13      	ldr	r3, [pc, #76]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e50:	4b11      	ldr	r3, [pc, #68]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e56:	4b10      	ldr	r3, [pc, #64]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e62:	480d      	ldr	r0, [pc, #52]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e64:	f7fa fb96 	bl	8003594 <HAL_PCD_Init>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e6e:	f7f8 f9d5 	bl	800121c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e72:	2180      	movs	r1, #128	; 0x80
 8008e74:	4808      	ldr	r0, [pc, #32]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e76:	f7fb fcf4 	bl	8004862 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e7a:	2240      	movs	r2, #64	; 0x40
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4806      	ldr	r0, [pc, #24]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e80:	f7fb fca8 	bl	80047d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e84:	2280      	movs	r2, #128	; 0x80
 8008e86:	2101      	movs	r1, #1
 8008e88:	4803      	ldr	r0, [pc, #12]	; (8008e98 <USBD_LL_Init+0x94>)
 8008e8a:	f7fb fca3 	bl	80047d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	20012060 	.word	0x20012060

08008e9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fa fc8b 	bl	80037ce <HAL_PCD_Start>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 f92a 	bl	8009118 <USBD_Get_USB_Status>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	4608      	mov	r0, r1
 8008edc:	4611      	mov	r1, r2
 8008ede:	461a      	mov	r2, r3
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	70fb      	strb	r3, [r7, #3]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	70bb      	strb	r3, [r7, #2]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008efa:	78bb      	ldrb	r3, [r7, #2]
 8008efc:	883a      	ldrh	r2, [r7, #0]
 8008efe:	78f9      	ldrb	r1, [r7, #3]
 8008f00:	f7fb f86f 	bl	8003fe2 <HAL_PCD_EP_Open>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 f904 	bl	8009118 <USBD_Get_USB_Status>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f38:	78fa      	ldrb	r2, [r7, #3]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fb f8b8 	bl	80040b2 <HAL_PCD_EP_Close>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 f8e5 	bl	8009118 <USBD_Get_USB_Status>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f76:	78fa      	ldrb	r2, [r7, #3]
 8008f78:	4611      	mov	r1, r2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fb f990 	bl	80042a0 <HAL_PCD_EP_SetStall>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f8c6 	bl	8009118 <USBD_Get_USB_Status>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fb4:	78fa      	ldrb	r2, [r7, #3]
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fb f9d5 	bl	8004368 <HAL_PCD_EP_ClrStall>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 f8a7 	bl	8009118 <USBD_Get_USB_Status>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	da0b      	bge.n	800900c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ffa:	68f9      	ldr	r1, [r7, #12]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	00db      	lsls	r3, r3, #3
 8009000:	1a9b      	subs	r3, r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	440b      	add	r3, r1
 8009006:	333e      	adds	r3, #62	; 0x3e
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	e00b      	b.n	8009024 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800900c:	78fb      	ldrb	r3, [r7, #3]
 800900e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009012:	68f9      	ldr	r1, [r7, #12]
 8009014:	4613      	mov	r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	1a9b      	subs	r3, r3, r2
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	440b      	add	r3, r1
 800901e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009022:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800904a:	78fa      	ldrb	r2, [r7, #3]
 800904c:	4611      	mov	r1, r2
 800904e:	4618      	mov	r0, r3
 8009050:	f7fa ffa2 	bl	8003f98 <HAL_PCD_SetAddress>
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	4618      	mov	r0, r3
 800905c:	f000 f85c 	bl	8009118 <USBD_Get_USB_Status>
 8009060:	4603      	mov	r3, r0
 8009062:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009064:	7bbb      	ldrb	r3, [r7, #14]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b086      	sub	sp, #24
 8009072:	af00      	add	r7, sp, #0
 8009074:	60f8      	str	r0, [r7, #12]
 8009076:	607a      	str	r2, [r7, #4]
 8009078:	603b      	str	r3, [r7, #0]
 800907a:	460b      	mov	r3, r1
 800907c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800908c:	7af9      	ldrb	r1, [r7, #11]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	f7fb f8bb 	bl	800420c <HAL_PCD_EP_Transmit>
 8009096:	4603      	mov	r3, r0
 8009098:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	4618      	mov	r0, r3
 800909e:	f000 f83b 	bl	8009118 <USBD_Get_USB_Status>
 80090a2:	4603      	mov	r3, r0
 80090a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	607a      	str	r2, [r7, #4]
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	460b      	mov	r3, r1
 80090be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090ce:	7af9      	ldrb	r1, [r7, #11]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	f7fb f837 	bl	8004146 <HAL_PCD_EP_Receive>
 80090d8:	4603      	mov	r3, r0
 80090da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 f81a 	bl	8009118 <USBD_Get_USB_Status>
 80090e4:	4603      	mov	r3, r0
 80090e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3718      	adds	r7, #24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b082      	sub	sp, #8
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	460b      	mov	r3, r1
 80090fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009104:	78fa      	ldrb	r2, [r7, #3]
 8009106:	4611      	mov	r1, r2
 8009108:	4618      	mov	r0, r3
 800910a:	f7fb f867 	bl	80041dc <HAL_PCD_EP_GetRxCount>
 800910e:	4603      	mov	r3, r0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009126:	79fb      	ldrb	r3, [r7, #7]
 8009128:	2b03      	cmp	r3, #3
 800912a:	d817      	bhi.n	800915c <USBD_Get_USB_Status+0x44>
 800912c:	a201      	add	r2, pc, #4	; (adr r2, 8009134 <USBD_Get_USB_Status+0x1c>)
 800912e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009132:	bf00      	nop
 8009134:	08009145 	.word	0x08009145
 8009138:	0800914b 	.word	0x0800914b
 800913c:	08009151 	.word	0x08009151
 8009140:	08009157 	.word	0x08009157
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]
    break;
 8009148:	e00b      	b.n	8009162 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800914a:	2303      	movs	r3, #3
 800914c:	73fb      	strb	r3, [r7, #15]
    break;
 800914e:	e008      	b.n	8009162 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009150:	2301      	movs	r3, #1
 8009152:	73fb      	strb	r3, [r7, #15]
    break;
 8009154:	e005      	b.n	8009162 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009156:	2303      	movs	r3, #3
 8009158:	73fb      	strb	r3, [r7, #15]
    break;
 800915a:	e002      	b.n	8009162 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800915c:	2303      	movs	r3, #3
 800915e:	73fb      	strb	r3, [r7, #15]
    break;
 8009160:	bf00      	nop
  }
  return usb_status;
 8009162:	7bfb      	ldrb	r3, [r7, #15]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <D16_GENERIC>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	b089      	sub	sp, #36	; 0x24
 8009176:	68d4      	ldr	r4, [r2, #12]
 8009178:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800917a:	6993      	ldr	r3, [r2, #24]
 800917c:	9407      	str	r4, [sp, #28]
 800917e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009180:	9306      	str	r3, [sp, #24]
 8009182:	9402      	str	r4, [sp, #8]
 8009184:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8009188:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800918c:	69d3      	ldr	r3, [r2, #28]
 800918e:	6896      	ldr	r6, [r2, #8]
 8009190:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009192:	9103      	str	r1, [sp, #12]
 8009194:	2d00      	cmp	r5, #0
 8009196:	d066      	beq.n	8009266 <D16_GENERIC+0xf6>
 8009198:	f004 0510 	and.w	r5, r4, #16
 800919c:	f004 0420 	and.w	r4, r4, #32
 80091a0:	9504      	str	r5, [sp, #16]
 80091a2:	4938      	ldr	r1, [pc, #224]	; (8009284 <D16_GENERIC+0x114>)
 80091a4:	9405      	str	r4, [sp, #20]
 80091a6:	f04f 0e00 	mov.w	lr, #0
 80091aa:	4635      	mov	r5, r6
 80091ac:	e04f      	b.n	800924e <D16_GENERIC+0xde>
 80091ae:	5d87      	ldrb	r7, [r0, r6]
 80091b0:	7804      	ldrb	r4, [r0, #0]
 80091b2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80091b6:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 80091ba:	b2e6      	uxtb	r6, r4
 80091bc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80091c0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80091c4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80091c8:	4433      	add	r3, r6
 80091ca:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80091ce:	f3c4 0609 	ubfx	r6, r4, #0, #10
 80091d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091d6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80091da:	0aa3      	lsrs	r3, r4, #10
 80091dc:	4c2a      	ldr	r4, [pc, #168]	; (8009288 <D16_GENERIC+0x118>)
 80091de:	fb26 5404 	smlad	r4, r6, r4, r5
 80091e2:	4d2a      	ldr	r5, [pc, #168]	; (800928c <D16_GENERIC+0x11c>)
 80091e4:	fb26 f505 	smuad	r5, r6, r5
 80091e8:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 80091ec:	eb04 080a 	add.w	r8, r4, sl
 80091f0:	eba8 080b 	sub.w	r8, r8, fp
 80091f4:	4646      	mov	r6, r8
 80091f6:	17f7      	asrs	r7, r6, #31
 80091f8:	e9cd 6700 	strd	r6, r7, [sp]
 80091fc:	9e04      	ldr	r6, [sp, #16]
 80091fe:	f10e 0c01 	add.w	ip, lr, #1
 8009202:	b16e      	cbz	r6, 8009220 <D16_GENERIC+0xb0>
 8009204:	6a16      	ldr	r6, [r2, #32]
 8009206:	9f01      	ldr	r7, [sp, #4]
 8009208:	fba8 8906 	umull	r8, r9, r8, r6
 800920c:	fb06 9907 	mla	r9, r6, r7, r9
 8009210:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8009214:	f149 0900 	adc.w	r9, r9, #0
 8009218:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800921c:	46a3      	mov	fp, r4
 800921e:	4654      	mov	r4, sl
 8009220:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8009222:	9f02      	ldr	r7, [sp, #8]
 8009224:	0424      	lsls	r4, r4, #16
 8009226:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800922a:	f04f 0900 	mov.w	r9, #0
 800922e:	fb0e fe06 	mul.w	lr, lr, r6
 8009232:	fbc7 8904 	smlal	r8, r9, r7, r4
 8009236:	9e03      	ldr	r6, [sp, #12]
 8009238:	464f      	mov	r7, r9
 800923a:	10bc      	asrs	r4, r7, #2
 800923c:	f304 040f 	ssat	r4, #16, r4
 8009240:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8009244:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009246:	fa1f fe8c 	uxth.w	lr, ip
 800924a:	4574      	cmp	r4, lr
 800924c:	d90a      	bls.n	8009264 <D16_GENERIC+0xf4>
 800924e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8009250:	2c01      	cmp	r4, #1
 8009252:	b2e6      	uxtb	r6, r4
 8009254:	d1ab      	bne.n	80091ae <D16_GENERIC+0x3e>
 8009256:	9e05      	ldr	r6, [sp, #20]
 8009258:	f850 4b02 	ldr.w	r4, [r0], #2
 800925c:	2e00      	cmp	r6, #0
 800925e:	d0ac      	beq.n	80091ba <D16_GENERIC+0x4a>
 8009260:	ba64      	rev16	r4, r4
 8009262:	e7aa      	b.n	80091ba <D16_GENERIC+0x4a>
 8009264:	462e      	mov	r6, r5
 8009266:	9907      	ldr	r1, [sp, #28]
 8009268:	61d3      	str	r3, [r2, #28]
 800926a:	9b06      	ldr	r3, [sp, #24]
 800926c:	6096      	str	r6, [r2, #8]
 800926e:	2000      	movs	r0, #0
 8009270:	60d1      	str	r1, [r2, #12]
 8009272:	f8c2 a010 	str.w	sl, [r2, #16]
 8009276:	f8c2 b014 	str.w	fp, [r2, #20]
 800927a:	6193      	str	r3, [r2, #24]
 800927c:	b009      	add	sp, #36	; 0x24
 800927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009282:	bf00      	nop
 8009284:	20000000 	.word	0x20000000
 8009288:	00030001 	.word	0x00030001
 800928c:	00010003 	.word	0x00010003

08009290 <D24_GENERIC>:
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8009296:	6993      	ldr	r3, [r2, #24]
 8009298:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800929a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800929e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80092a2:	6894      	ldr	r4, [r2, #8]
 80092a4:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80092a8:	b089      	sub	sp, #36	; 0x24
 80092aa:	9307      	str	r3, [sp, #28]
 80092ac:	9503      	str	r5, [sp, #12]
 80092ae:	69d3      	ldr	r3, [r2, #28]
 80092b0:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80092b2:	9104      	str	r1, [sp, #16]
 80092b4:	2e00      	cmp	r6, #0
 80092b6:	f000 8096 	beq.w	80093e6 <D24_GENERIC+0x156>
 80092ba:	f005 0610 	and.w	r6, r5, #16
 80092be:	f005 0520 	and.w	r5, r5, #32
 80092c2:	4954      	ldr	r1, [pc, #336]	; (8009414 <D24_GENERIC+0x184>)
 80092c4:	9605      	str	r6, [sp, #20]
 80092c6:	9506      	str	r5, [sp, #24]
 80092c8:	f04f 0e00 	mov.w	lr, #0
 80092cc:	f8cd 9008 	str.w	r9, [sp, #8]
 80092d0:	e06a      	b.n	80093a8 <D24_GENERIC+0x118>
 80092d2:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80092d6:	f810 8007 	ldrb.w	r8, [r0, r7]
 80092da:	f890 c000 	ldrb.w	ip, [r0]
 80092de:	042d      	lsls	r5, r5, #16
 80092e0:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80092e4:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80092e8:	44ac      	add	ip, r5
 80092ea:	4438      	add	r0, r7
 80092ec:	fa5f f68c 	uxtb.w	r6, ip
 80092f0:	f3cc 2507 	ubfx	r5, ip, #8, #8
 80092f4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80092f8:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 80092fc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009300:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8009304:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009308:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800930c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8009310:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009314:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009318:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800931c:	4d3e      	ldr	r5, [pc, #248]	; (8009418 <D24_GENERIC+0x188>)
 800931e:	fb26 b705 	smlad	r7, r6, r5, fp
 8009322:	4d3e      	ldr	r5, [pc, #248]	; (800941c <D24_GENERIC+0x18c>)
 8009324:	fb26 4b05 	smlad	fp, r6, r5, r4
 8009328:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800932c:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8009330:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8009334:	2401      	movs	r4, #1
 8009336:	fb26 f604 	smuad	r6, r6, r4
 800933a:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800933e:	9f02      	ldr	r7, [sp, #8]
 8009340:	eb0e 0c04 	add.w	ip, lr, r4
 8009344:	eb08 0406 	add.w	r4, r8, r6
 8009348:	eb05 060a 	add.w	r6, r5, sl
 800934c:	1bf6      	subs	r6, r6, r7
 800934e:	4637      	mov	r7, r6
 8009350:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8009354:	e9cd 7800 	strd	r7, r8, [sp]
 8009358:	9f05      	ldr	r7, [sp, #20]
 800935a:	b177      	cbz	r7, 800937a <D24_GENERIC+0xea>
 800935c:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8009360:	9502      	str	r5, [sp, #8]
 8009362:	fba6 9a08 	umull	r9, sl, r6, r8
 8009366:	9e01      	ldr	r6, [sp, #4]
 8009368:	fb08 aa06 	mla	sl, r8, r6, sl
 800936c:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8009370:	f14a 0700 	adc.w	r7, sl, #0
 8009374:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8009378:	4655      	mov	r5, sl
 800937a:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800937c:	9f03      	ldr	r7, [sp, #12]
 800937e:	03ad      	lsls	r5, r5, #14
 8009380:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009384:	f04f 0900 	mov.w	r9, #0
 8009388:	fb0e fe06 	mul.w	lr, lr, r6
 800938c:	fbc7 8905 	smlal	r8, r9, r7, r5
 8009390:	9e04      	ldr	r6, [sp, #16]
 8009392:	464f      	mov	r7, r9
 8009394:	10bd      	asrs	r5, r7, #2
 8009396:	f305 050f 	ssat	r5, #16, r5
 800939a:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800939e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80093a0:	fa1f fe8c 	uxth.w	lr, ip
 80093a4:	4575      	cmp	r5, lr
 80093a6:	d91c      	bls.n	80093e2 <D24_GENERIC+0x152>
 80093a8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80093aa:	b2ef      	uxtb	r7, r5
 80093ac:	2d01      	cmp	r5, #1
 80093ae:	b23e      	sxth	r6, r7
 80093b0:	d18f      	bne.n	80092d2 <D24_GENERIC+0x42>
 80093b2:	9d06      	ldr	r5, [sp, #24]
 80093b4:	b15d      	cbz	r5, 80093ce <D24_GENERIC+0x13e>
 80093b6:	f01e 0f01 	tst.w	lr, #1
 80093ba:	d122      	bne.n	8009402 <D24_GENERIC+0x172>
 80093bc:	7805      	ldrb	r5, [r0, #0]
 80093be:	78c7      	ldrb	r7, [r0, #3]
 80093c0:	7846      	ldrb	r6, [r0, #1]
 80093c2:	022d      	lsls	r5, r5, #8
 80093c4:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80093c8:	44b4      	add	ip, r6
 80093ca:	3002      	adds	r0, #2
 80093cc:	e78e      	b.n	80092ec <D24_GENERIC+0x5c>
 80093ce:	7846      	ldrb	r6, [r0, #1]
 80093d0:	f890 c002 	ldrb.w	ip, [r0, #2]
 80093d4:	f810 5b03 	ldrb.w	r5, [r0], #3
 80093d8:	0236      	lsls	r6, r6, #8
 80093da:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 80093de:	44ac      	add	ip, r5
 80093e0:	e784      	b.n	80092ec <D24_GENERIC+0x5c>
 80093e2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80093e6:	61d3      	str	r3, [r2, #28]
 80093e8:	9b07      	ldr	r3, [sp, #28]
 80093ea:	6094      	str	r4, [r2, #8]
 80093ec:	2000      	movs	r0, #0
 80093ee:	f8c2 b00c 	str.w	fp, [r2, #12]
 80093f2:	f8c2 a010 	str.w	sl, [r2, #16]
 80093f6:	f8c2 9014 	str.w	r9, [r2, #20]
 80093fa:	6193      	str	r3, [r2, #24]
 80093fc:	b009      	add	sp, #36	; 0x24
 80093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009402:	78c5      	ldrb	r5, [r0, #3]
 8009404:	7887      	ldrb	r7, [r0, #2]
 8009406:	f810 6b04 	ldrb.w	r6, [r0], #4
 800940a:	022d      	lsls	r5, r5, #8
 800940c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8009410:	44b4      	add	ip, r6
 8009412:	e76b      	b.n	80092ec <D24_GENERIC+0x5c>
 8009414:	20000000 	.word	0x20000000
 8009418:	00030001 	.word	0x00030001
 800941c:	00060007 	.word	0x00060007

08009420 <D32_GENERIC>:
 8009420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009426:	6993      	ldr	r3, [r2, #24]
 8009428:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800942a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800942e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8009432:	69d6      	ldr	r6, [r2, #28]
 8009434:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8009438:	b089      	sub	sp, #36	; 0x24
 800943a:	9307      	str	r3, [sp, #28]
 800943c:	9403      	str	r4, [sp, #12]
 800943e:	6893      	ldr	r3, [r2, #8]
 8009440:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009442:	9104      	str	r1, [sp, #16]
 8009444:	2d00      	cmp	r5, #0
 8009446:	f000 809f 	beq.w	8009588 <D32_GENERIC+0x168>
 800944a:	f004 0510 	and.w	r5, r4, #16
 800944e:	f004 0420 	and.w	r4, r4, #32
 8009452:	9505      	str	r5, [sp, #20]
 8009454:	4953      	ldr	r1, [pc, #332]	; (80095a4 <D32_GENERIC+0x184>)
 8009456:	9406      	str	r4, [sp, #24]
 8009458:	f04f 0c00 	mov.w	ip, #0
 800945c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009460:	461d      	mov	r5, r3
 8009462:	4617      	mov	r7, r2
 8009464:	e077      	b.n	8009556 <D32_GENERIC+0x136>
 8009466:	f818 3003 	ldrb.w	r3, [r8, r3]
 800946a:	f810 800e 	ldrb.w	r8, [r0, lr]
 800946e:	f810 e002 	ldrb.w	lr, [r0, r2]
 8009472:	7800      	ldrb	r0, [r0, #0]
 8009474:	041b      	lsls	r3, r3, #16
 8009476:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800947a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800947e:	4403      	add	r3, r0
 8009480:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8009484:	b2dc      	uxtb	r4, r3
 8009486:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800948a:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800948e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009492:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009496:	0e1b      	lsrs	r3, r3, #24
 8009498:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800949c:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 80094a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80094a4:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80094a8:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 80094ac:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 80094b0:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80094b4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80094b8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80094bc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80094c0:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 80094c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80094c8:	4b37      	ldr	r3, [pc, #220]	; (80095a8 <D32_GENERIC+0x188>)
 80094ca:	fb22 b403 	smlad	r4, r2, r3, fp
 80094ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094d2:	fb2e 4803 	smlad	r8, lr, r3, r4
 80094d6:	4b35      	ldr	r3, [pc, #212]	; (80095ac <D32_GENERIC+0x18c>)
 80094d8:	fb22 5503 	smlad	r5, r2, r3, r5
 80094dc:	4b34      	ldr	r3, [pc, #208]	; (80095b0 <D32_GENERIC+0x190>)
 80094de:	fb2e 5b03 	smlad	fp, lr, r3, r5
 80094e2:	2301      	movs	r3, #1
 80094e4:	fb22 f203 	smuad	r2, r2, r3
 80094e8:	4b32      	ldr	r3, [pc, #200]	; (80095b4 <D32_GENERIC+0x194>)
 80094ea:	fb2e 2503 	smlad	r5, lr, r3, r2
 80094ee:	9b02      	ldr	r3, [sp, #8]
 80094f0:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 80094f4:	eb04 080a 	add.w	r8, r4, sl
 80094f8:	eba8 0803 	sub.w	r8, r8, r3
 80094fc:	4642      	mov	r2, r8
 80094fe:	17d3      	asrs	r3, r2, #31
 8009500:	e9cd 2300 	strd	r2, r3, [sp]
 8009504:	9b05      	ldr	r3, [sp, #20]
 8009506:	f10c 0e01 	add.w	lr, ip, #1
 800950a:	b16b      	cbz	r3, 8009528 <D32_GENERIC+0x108>
 800950c:	6a3a      	ldr	r2, [r7, #32]
 800950e:	9b01      	ldr	r3, [sp, #4]
 8009510:	9402      	str	r4, [sp, #8]
 8009512:	fba8 8902 	umull	r8, r9, r8, r2
 8009516:	fb02 9903 	mla	r9, r2, r3, r9
 800951a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800951e:	f149 0900 	adc.w	r9, r9, #0
 8009522:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8009526:	4654      	mov	r4, sl
 8009528:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800952a:	9a04      	ldr	r2, [sp, #16]
 800952c:	fb0c fc03 	mul.w	ip, ip, r3
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	0364      	lsls	r4, r4, #13
 8009534:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009538:	f04f 0900 	mov.w	r9, #0
 800953c:	fbc3 8904 	smlal	r8, r9, r3, r4
 8009540:	464b      	mov	r3, r9
 8009542:	109b      	asrs	r3, r3, #2
 8009544:	f303 030f 	ssat	r3, #16, r3
 8009548:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800954c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800954e:	fa1f fc8e 	uxth.w	ip, lr
 8009552:	4563      	cmp	r3, ip
 8009554:	d914      	bls.n	8009580 <D32_GENERIC+0x160>
 8009556:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8009558:	b2e2      	uxtb	r2, r4
 800955a:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800955e:	eb00 080e 	add.w	r8, r0, lr
 8009562:	4253      	negs	r3, r2
 8009564:	2c01      	cmp	r4, #1
 8009566:	eb08 0403 	add.w	r4, r8, r3
 800956a:	f47f af7c 	bne.w	8009466 <D32_GENERIC+0x46>
 800956e:	1d02      	adds	r2, r0, #4
 8009570:	6803      	ldr	r3, [r0, #0]
 8009572:	9806      	ldr	r0, [sp, #24]
 8009574:	b110      	cbz	r0, 800957c <D32_GENERIC+0x15c>
 8009576:	ba5b      	rev16	r3, r3
 8009578:	4610      	mov	r0, r2
 800957a:	e783      	b.n	8009484 <D32_GENERIC+0x64>
 800957c:	4610      	mov	r0, r2
 800957e:	e781      	b.n	8009484 <D32_GENERIC+0x64>
 8009580:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009584:	462b      	mov	r3, r5
 8009586:	463a      	mov	r2, r7
 8009588:	6093      	str	r3, [r2, #8]
 800958a:	9b07      	ldr	r3, [sp, #28]
 800958c:	f8c2 b00c 	str.w	fp, [r2, #12]
 8009590:	2000      	movs	r0, #0
 8009592:	61d6      	str	r6, [r2, #28]
 8009594:	f8c2 a010 	str.w	sl, [r2, #16]
 8009598:	f8c2 9014 	str.w	r9, [r2, #20]
 800959c:	6193      	str	r3, [r2, #24]
 800959e:	b009      	add	sp, #36	; 0x24
 80095a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a4:	20000000 	.word	0x20000000
 80095a8:	00060003 	.word	0x00060003
 80095ac:	000a000c 	.word	0x000a000c
 80095b0:	000c000a 	.word	0x000c000a
 80095b4:	00030006 	.word	0x00030006

080095b8 <D48_GENERIC>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	b089      	sub	sp, #36	; 0x24
 80095be:	6953      	ldr	r3, [r2, #20]
 80095c0:	68d4      	ldr	r4, [r2, #12]
 80095c2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80095c4:	9302      	str	r3, [sp, #8]
 80095c6:	9400      	str	r4, [sp, #0]
 80095c8:	6993      	ldr	r3, [r2, #24]
 80095ca:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80095cc:	9307      	str	r3, [sp, #28]
 80095ce:	9403      	str	r4, [sp, #12]
 80095d0:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80095d4:	69d6      	ldr	r6, [r2, #28]
 80095d6:	6893      	ldr	r3, [r2, #8]
 80095d8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80095da:	9104      	str	r1, [sp, #16]
 80095dc:	2d00      	cmp	r5, #0
 80095de:	f000 80c5 	beq.w	800976c <D48_GENERIC+0x1b4>
 80095e2:	f004 0510 	and.w	r5, r4, #16
 80095e6:	f004 0420 	and.w	r4, r4, #32
 80095ea:	4967      	ldr	r1, [pc, #412]	; (8009788 <D48_GENERIC+0x1d0>)
 80095ec:	9505      	str	r5, [sp, #20]
 80095ee:	9406      	str	r4, [sp, #24]
 80095f0:	f04f 0c00 	mov.w	ip, #0
 80095f4:	4657      	mov	r7, sl
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	e09c      	b.n	8009734 <D48_GENERIC+0x17c>
 80095fa:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80095fe:	f810 b009 	ldrb.w	fp, [r0, r9]
 8009602:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8009606:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800960a:	7800      	ldrb	r0, [r0, #0]
 800960c:	0424      	lsls	r4, r4, #16
 800960e:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8009612:	f818 4005 	ldrb.w	r4, [r8, r5]
 8009616:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800961a:	44a8      	add	r8, r5
 800961c:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8009620:	eb0b 0500 	add.w	r5, fp, r0
 8009624:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8009628:	fa5f f885 	uxtb.w	r8, r5
 800962c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8009630:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8009634:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8009638:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800963c:	0e2d      	lsrs	r5, r5, #24
 800963e:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8009642:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8009646:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800964a:	b2e6      	uxtb	r6, r4
 800964c:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8009650:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009654:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8009658:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800965c:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8009660:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8009664:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8009668:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800966c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009670:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009674:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8009678:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800967c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009680:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009684:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8009688:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800968c:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8009690:	4c3e      	ldr	r4, [pc, #248]	; (800978c <D48_GENERIC+0x1d4>)
 8009692:	9d00      	ldr	r5, [sp, #0]
 8009694:	fb2a 5404 	smlad	r4, sl, r4, r5
 8009698:	4d3d      	ldr	r5, [pc, #244]	; (8009790 <D48_GENERIC+0x1d8>)
 800969a:	fb28 4405 	smlad	r4, r8, r5, r4
 800969e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096a2:	fb2e 4b03 	smlad	fp, lr, r3, r4
 80096a6:	4c3b      	ldr	r4, [pc, #236]	; (8009794 <D48_GENERIC+0x1dc>)
 80096a8:	9b01      	ldr	r3, [sp, #4]
 80096aa:	fb2a 3304 	smlad	r3, sl, r4, r3
 80096ae:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80096b2:	fb28 3304 	smlad	r3, r8, r4, r3
 80096b6:	4c38      	ldr	r4, [pc, #224]	; (8009798 <D48_GENERIC+0x1e0>)
 80096b8:	fb2e 3304 	smlad	r3, lr, r4, r3
 80096bc:	2501      	movs	r5, #1
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	fb2a fa05 	smuad	sl, sl, r5
 80096c4:	4b35      	ldr	r3, [pc, #212]	; (800979c <D48_GENERIC+0x1e4>)
 80096c6:	fb28 a803 	smlad	r8, r8, r3, sl
 80096ca:	4b35      	ldr	r3, [pc, #212]	; (80097a0 <D48_GENERIC+0x1e8>)
 80096cc:	fb2e 8303 	smlad	r3, lr, r3, r8
 80096d0:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 80096d4:	9301      	str	r3, [sp, #4]
 80096d6:	9b02      	ldr	r3, [sp, #8]
 80096d8:	eb04 0807 	add.w	r8, r4, r7
 80096dc:	eba8 0803 	sub.w	r8, r8, r3
 80096e0:	9b05      	ldr	r3, [sp, #20]
 80096e2:	4465      	add	r5, ip
 80096e4:	ea4f 7be8 	mov.w	fp, r8, asr #31
 80096e8:	b163      	cbz	r3, 8009704 <D48_GENERIC+0x14c>
 80096ea:	6a17      	ldr	r7, [r2, #32]
 80096ec:	9402      	str	r4, [sp, #8]
 80096ee:	fba8 8907 	umull	r8, r9, r8, r7
 80096f2:	fb07 990b 	mla	r9, r7, fp, r9
 80096f6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80096fa:	f149 0900 	adc.w	r9, r9, #0
 80096fe:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8009702:	463c      	mov	r4, r7
 8009704:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	02e4      	lsls	r4, r4, #11
 800970c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009710:	f04f 0900 	mov.w	r9, #0
 8009714:	fb0c fc0e 	mul.w	ip, ip, lr
 8009718:	fbc3 8904 	smlal	r8, r9, r3, r4
 800971c:	9b04      	ldr	r3, [sp, #16]
 800971e:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8009722:	f304 040f 	ssat	r4, #16, r4
 8009726:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800972a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800972c:	fa1f fc85 	uxth.w	ip, r5
 8009730:	4564      	cmp	r4, ip
 8009732:	d919      	bls.n	8009768 <D48_GENERIC+0x1b0>
 8009734:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8009736:	fa5f fe84 	uxtb.w	lr, r4
 800973a:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800973e:	f1ce 0500 	rsb	r5, lr, #0
 8009742:	eb00 0b09 	add.w	fp, r0, r9
 8009746:	eb0b 0a05 	add.w	sl, fp, r5
 800974a:	2c01      	cmp	r4, #1
 800974c:	eb0a 0809 	add.w	r8, sl, r9
 8009750:	f47f af53 	bne.w	80095fa <D48_GENERIC+0x42>
 8009754:	9b06      	ldr	r3, [sp, #24]
 8009756:	6805      	ldr	r5, [r0, #0]
 8009758:	6844      	ldr	r4, [r0, #4]
 800975a:	3006      	adds	r0, #6
 800975c:	2b00      	cmp	r3, #0
 800975e:	f43f af63 	beq.w	8009628 <D48_GENERIC+0x70>
 8009762:	ba6d      	rev16	r5, r5
 8009764:	ba64      	rev16	r4, r4
 8009766:	e75f      	b.n	8009628 <D48_GENERIC+0x70>
 8009768:	9b01      	ldr	r3, [sp, #4]
 800976a:	46ba      	mov	sl, r7
 800976c:	6093      	str	r3, [r2, #8]
 800976e:	9b00      	ldr	r3, [sp, #0]
 8009770:	60d3      	str	r3, [r2, #12]
 8009772:	9b02      	ldr	r3, [sp, #8]
 8009774:	6153      	str	r3, [r2, #20]
 8009776:	9b07      	ldr	r3, [sp, #28]
 8009778:	61d6      	str	r6, [r2, #28]
 800977a:	2000      	movs	r0, #0
 800977c:	f8c2 a010 	str.w	sl, [r2, #16]
 8009780:	6193      	str	r3, [r2, #24]
 8009782:	b009      	add	sp, #36	; 0x24
 8009784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009788:	20000000 	.word	0x20000000
 800978c:	000f000a 	.word	0x000f000a
 8009790:	00060003 	.word	0x00060003
 8009794:	00150019 	.word	0x00150019
 8009798:	00190015 	.word	0x00190015
 800979c:	00030006 	.word	0x00030006
 80097a0:	000a000f 	.word	0x000a000f

080097a4 <D64_GENERIC>:
 80097a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	b089      	sub	sp, #36	; 0x24
 80097aa:	6913      	ldr	r3, [r2, #16]
 80097ac:	6895      	ldr	r5, [r2, #8]
 80097ae:	9303      	str	r3, [sp, #12]
 80097b0:	9501      	str	r5, [sp, #4]
 80097b2:	6953      	ldr	r3, [r2, #20]
 80097b4:	68d5      	ldr	r5, [r2, #12]
 80097b6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80097b8:	9304      	str	r3, [sp, #16]
 80097ba:	9500      	str	r5, [sp, #0]
 80097bc:	6993      	ldr	r3, [r2, #24]
 80097be:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80097c0:	9307      	str	r3, [sp, #28]
 80097c2:	9505      	str	r5, [sp, #20]
 80097c4:	69d3      	ldr	r3, [r2, #28]
 80097c6:	9106      	str	r1, [sp, #24]
 80097c8:	2c00      	cmp	r4, #0
 80097ca:	f000 80d9 	beq.w	8009980 <D64_GENERIC+0x1dc>
 80097ce:	6a11      	ldr	r1, [r2, #32]
 80097d0:	9102      	str	r1, [sp, #8]
 80097d2:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 80099c0 <D64_GENERIC+0x21c>
 80097d6:	f04f 0c00 	mov.w	ip, #0
 80097da:	4681      	mov	r9, r0
 80097dc:	e0c1      	b.n	8009962 <D64_GENERIC+0x1be>
 80097de:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80097e2:	4274      	negs	r4, r6
 80097e4:	eb09 0708 	add.w	r7, r9, r8
 80097e8:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80097ec:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 80097f0:	5d38      	ldrb	r0, [r7, r4]
 80097f2:	5d29      	ldrb	r1, [r5, r4]
 80097f4:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80097f8:	f819 a008 	ldrb.w	sl, [r9, r8]
 80097fc:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8009800:	f899 7000 	ldrb.w	r7, [r9]
 8009804:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8009808:	4425      	add	r5, r4
 800980a:	0409      	lsls	r1, r1, #16
 800980c:	0400      	lsls	r0, r0, #16
 800980e:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8009812:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8009816:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800981a:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800981e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8009822:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8009826:	4459      	add	r1, fp
 8009828:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800982c:	4438      	add	r0, r7
 800982e:	b2c5      	uxtb	r5, r0
 8009830:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8009834:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8009838:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800983c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8009840:	0e00      	lsrs	r0, r0, #24
 8009842:	eb03 0806 	add.w	r8, r3, r6
 8009846:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800984a:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800984e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009852:	b2c8      	uxtb	r0, r1
 8009854:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8009858:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800985c:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8009860:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8009864:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8009868:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800986c:	0e09      	lsrs	r1, r1, #24
 800986e:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8009872:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8009876:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800987a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800987e:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8009882:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8009886:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800988a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800988e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009892:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009896:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800989a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800989e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80098a2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80098a6:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80098aa:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80098ae:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80098b2:	0a8b      	lsrs	r3, r1, #10
 80098b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80098b8:	4939      	ldr	r1, [pc, #228]	; (80099a0 <D64_GENERIC+0x1fc>)
 80098ba:	9c00      	ldr	r4, [sp, #0]
 80098bc:	fb28 4101 	smlad	r1, r8, r1, r4
 80098c0:	4c38      	ldr	r4, [pc, #224]	; (80099a4 <D64_GENERIC+0x200>)
 80098c2:	fb27 1104 	smlad	r1, r7, r4, r1
 80098c6:	4c38      	ldr	r4, [pc, #224]	; (80099a8 <D64_GENERIC+0x204>)
 80098c8:	fb20 1104 	smlad	r1, r0, r4, r1
 80098cc:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80098d0:	fb2a 1106 	smlad	r1, sl, r6, r1
 80098d4:	4c35      	ldr	r4, [pc, #212]	; (80099ac <D64_GENERIC+0x208>)
 80098d6:	9d01      	ldr	r5, [sp, #4]
 80098d8:	fb28 5404 	smlad	r4, r8, r4, r5
 80098dc:	4d33      	ldr	r5, [pc, #204]	; (80099ac <D64_GENERIC+0x208>)
 80098de:	fb2a 4415 	smladx	r4, sl, r5, r4
 80098e2:	4d33      	ldr	r5, [pc, #204]	; (80099b0 <D64_GENERIC+0x20c>)
 80098e4:	fb27 4405 	smlad	r4, r7, r5, r4
 80098e8:	fb20 4415 	smladx	r4, r0, r5, r4
 80098ec:	2501      	movs	r5, #1
 80098ee:	9400      	str	r4, [sp, #0]
 80098f0:	fb28 f805 	smuad	r8, r8, r5
 80098f4:	4c2f      	ldr	r4, [pc, #188]	; (80099b4 <D64_GENERIC+0x210>)
 80098f6:	fb27 8704 	smlad	r7, r7, r4, r8
 80098fa:	4c2f      	ldr	r4, [pc, #188]	; (80099b8 <D64_GENERIC+0x214>)
 80098fc:	fb20 7004 	smlad	r0, r0, r4, r7
 8009900:	4c2e      	ldr	r4, [pc, #184]	; (80099bc <D64_GENERIC+0x218>)
 8009902:	fb2a 0004 	smlad	r0, sl, r4, r0
 8009906:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800990a:	9902      	ldr	r1, [sp, #8]
 800990c:	9001      	str	r0, [sp, #4]
 800990e:	b189      	cbz	r1, 8009934 <D64_GENERIC+0x190>
 8009910:	9803      	ldr	r0, [sp, #12]
 8009912:	9c04      	ldr	r4, [sp, #16]
 8009914:	9604      	str	r6, [sp, #16]
 8009916:	4430      	add	r0, r6
 8009918:	1b00      	subs	r0, r0, r4
 800991a:	17c5      	asrs	r5, r0, #31
 800991c:	460f      	mov	r7, r1
 800991e:	fba0 0101 	umull	r0, r1, r0, r1
 8009922:	fb07 1105 	mla	r1, r7, r5, r1
 8009926:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800992a:	f141 0100 	adc.w	r1, r1, #0
 800992e:	0049      	lsls	r1, r1, #1
 8009930:	9103      	str	r1, [sp, #12]
 8009932:	460e      	mov	r6, r1
 8009934:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8009936:	9905      	ldr	r1, [sp, #20]
 8009938:	9806      	ldr	r0, [sp, #24]
 800993a:	02b6      	lsls	r6, r6, #10
 800993c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8009940:	f04f 0800 	mov.w	r8, #0
 8009944:	fb0c f404 	mul.w	r4, ip, r4
 8009948:	fbc1 7806 	smlal	r7, r8, r1, r6
 800994c:	4641      	mov	r1, r8
 800994e:	1089      	asrs	r1, r1, #2
 8009950:	f301 010f 	ssat	r1, #16, r1
 8009954:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8009958:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800995a:	f10c 0c01 	add.w	ip, ip, #1
 800995e:	4561      	cmp	r1, ip
 8009960:	dd0e      	ble.n	8009980 <D64_GENERIC+0x1dc>
 8009962:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8009964:	2e01      	cmp	r6, #1
 8009966:	f47f af3a 	bne.w	80097de <D64_GENERIC+0x3a>
 800996a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800996c:	06b4      	lsls	r4, r6, #26
 800996e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8009972:	f109 0908 	add.w	r9, r9, #8
 8009976:	f57f af5a 	bpl.w	800982e <D64_GENERIC+0x8a>
 800997a:	ba40      	rev16	r0, r0
 800997c:	ba49      	rev16	r1, r1
 800997e:	e756      	b.n	800982e <D64_GENERIC+0x8a>
 8009980:	61d3      	str	r3, [r2, #28]
 8009982:	9b03      	ldr	r3, [sp, #12]
 8009984:	9901      	ldr	r1, [sp, #4]
 8009986:	6113      	str	r3, [r2, #16]
 8009988:	9b04      	ldr	r3, [sp, #16]
 800998a:	6091      	str	r1, [r2, #8]
 800998c:	6153      	str	r3, [r2, #20]
 800998e:	9900      	ldr	r1, [sp, #0]
 8009990:	9b07      	ldr	r3, [sp, #28]
 8009992:	60d1      	str	r1, [r2, #12]
 8009994:	2000      	movs	r0, #0
 8009996:	6193      	str	r3, [r2, #24]
 8009998:	b009      	add	sp, #36	; 0x24
 800999a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999e:	bf00      	nop
 80099a0:	001c0015 	.word	0x001c0015
 80099a4:	000f000a 	.word	0x000f000a
 80099a8:	00060003 	.word	0x00060003
 80099ac:	0024002a 	.word	0x0024002a
 80099b0:	002e0030 	.word	0x002e0030
 80099b4:	00030006 	.word	0x00030006
 80099b8:	000a000f 	.word	0x000a000f
 80099bc:	0015001c 	.word	0x0015001c
 80099c0:	20000000 	.word	0x20000000

080099c4 <D80_GENERIC>:
 80099c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c8:	b08b      	sub	sp, #44	; 0x2c
 80099ca:	6914      	ldr	r4, [r2, #16]
 80099cc:	9404      	str	r4, [sp, #16]
 80099ce:	6954      	ldr	r4, [r2, #20]
 80099d0:	9405      	str	r4, [sp, #20]
 80099d2:	6994      	ldr	r4, [r2, #24]
 80099d4:	9409      	str	r4, [sp, #36]	; 0x24
 80099d6:	6894      	ldr	r4, [r2, #8]
 80099d8:	9402      	str	r4, [sp, #8]
 80099da:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80099dc:	68d4      	ldr	r4, [r2, #12]
 80099de:	9401      	str	r4, [sp, #4]
 80099e0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80099e2:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80099e6:	9406      	str	r4, [sp, #24]
 80099e8:	9107      	str	r1, [sp, #28]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 810f 	beq.w	8009c0e <D80_GENERIC+0x24a>
 80099f0:	6a13      	ldr	r3, [r2, #32]
 80099f2:	9308      	str	r3, [sp, #32]
 80099f4:	2300      	movs	r3, #0
 80099f6:	9200      	str	r2, [sp, #0]
 80099f8:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8009c60 <D80_GENERIC+0x29c>
 80099fc:	f8cd b00c 	str.w	fp, [sp, #12]
 8009a00:	461a      	mov	r2, r3
 8009a02:	e0ed      	b.n	8009be0 <D80_GENERIC+0x21c>
 8009a04:	fa5f fc8c 	uxtb.w	ip, ip
 8009a08:	fa0f f48c 	sxth.w	r4, ip
 8009a0c:	0066      	lsls	r6, r4, #1
 8009a0e:	eb06 0804 	add.w	r8, r6, r4
 8009a12:	f1cc 0500 	rsb	r5, ip, #0
 8009a16:	eb00 0108 	add.w	r1, r0, r8
 8009a1a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009a1e:	194b      	adds	r3, r1, r5
 8009a20:	5d49      	ldrb	r1, [r1, r5]
 8009a22:	f810 a008 	ldrb.w	sl, [r0, r8]
 8009a26:	f813 b004 	ldrb.w	fp, [r3, r4]
 8009a2a:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8009a2e:	f890 8000 	ldrb.w	r8, [r0]
 8009a32:	eb03 0e04 	add.w	lr, r3, r4
 8009a36:	eb0e 0705 	add.w	r7, lr, r5
 8009a3a:	0409      	lsls	r1, r1, #16
 8009a3c:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8009a40:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8009a44:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8009a48:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8009a4c:	eb0a 0004 	add.w	r0, sl, r4
 8009a50:	041b      	lsls	r3, r3, #16
 8009a52:	f81a a004 	ldrb.w	sl, [sl, r4]
 8009a56:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8009a5a:	5d44      	ldrb	r4, [r0, r5]
 8009a5c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8009a60:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8009a64:	4428      	add	r0, r5
 8009a66:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8009a6a:	4441      	add	r1, r8
 8009a6c:	4430      	add	r0, r6
 8009a6e:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8009a72:	441f      	add	r7, r3
 8009a74:	b2cd      	uxtb	r5, r1
 8009a76:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009a7a:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8009a7e:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8009a88:	0e09      	lsrs	r1, r1, #24
 8009a8a:	4433      	add	r3, r6
 8009a8c:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8009a90:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8009a94:	b2fd      	uxtb	r5, r7
 8009a96:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8009a9a:	469b      	mov	fp, r3
 8009a9c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8009aa0:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8009aa4:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8009aa8:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8009aac:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8009ab0:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8009ab4:	0e3b      	lsrs	r3, r7, #24
 8009ab6:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8009aba:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8009abe:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009ac2:	fa5f fe84 	uxtb.w	lr, r4
 8009ac6:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8009aca:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009ace:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8009ad2:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8009ad6:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8009ada:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8009ade:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8009ae2:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8009ae6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009aee:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009af2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009af6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009afa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009afe:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8009b02:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8009b06:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8009b0a:	0aa3      	lsrs	r3, r4, #10
 8009b0c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009b10:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009b14:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009b18:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8009b1c:	9303      	str	r3, [sp, #12]
 8009b1e:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8009b22:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8009b26:	4b42      	ldr	r3, [pc, #264]	; (8009c30 <D80_GENERIC+0x26c>)
 8009b28:	9901      	ldr	r1, [sp, #4]
 8009b2a:	fb2b 1303 	smlad	r3, fp, r3, r1
 8009b2e:	4941      	ldr	r1, [pc, #260]	; (8009c34 <D80_GENERIC+0x270>)
 8009b30:	fb28 3301 	smlad	r3, r8, r1, r3
 8009b34:	4940      	ldr	r1, [pc, #256]	; (8009c38 <D80_GENERIC+0x274>)
 8009b36:	fb2c 3301 	smlad	r3, ip, r1, r3
 8009b3a:	4940      	ldr	r1, [pc, #256]	; (8009c3c <D80_GENERIC+0x278>)
 8009b3c:	fb27 3301 	smlad	r3, r7, r1, r3
 8009b40:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009b44:	fb2e 3301 	smlad	r3, lr, r1, r3
 8009b48:	493d      	ldr	r1, [pc, #244]	; (8009c40 <D80_GENERIC+0x27c>)
 8009b4a:	9c02      	ldr	r4, [sp, #8]
 8009b4c:	fb2b 4401 	smlad	r4, fp, r1, r4
 8009b50:	493c      	ldr	r1, [pc, #240]	; (8009c44 <D80_GENERIC+0x280>)
 8009b52:	fb28 4401 	smlad	r4, r8, r1, r4
 8009b56:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8009b5a:	fb2c 4101 	smlad	r1, ip, r1, r4
 8009b5e:	4c3a      	ldr	r4, [pc, #232]	; (8009c48 <D80_GENERIC+0x284>)
 8009b60:	fb27 1104 	smlad	r1, r7, r4, r1
 8009b64:	4c39      	ldr	r4, [pc, #228]	; (8009c4c <D80_GENERIC+0x288>)
 8009b66:	fb2e 1104 	smlad	r1, lr, r4, r1
 8009b6a:	9101      	str	r1, [sp, #4]
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	fb2b fb01 	smuad	fp, fp, r1
 8009b72:	4937      	ldr	r1, [pc, #220]	; (8009c50 <D80_GENERIC+0x28c>)
 8009b74:	fb28 b801 	smlad	r8, r8, r1, fp
 8009b78:	4d36      	ldr	r5, [pc, #216]	; (8009c54 <D80_GENERIC+0x290>)
 8009b7a:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8009b7e:	4d36      	ldr	r5, [pc, #216]	; (8009c58 <D80_GENERIC+0x294>)
 8009b80:	fb27 c705 	smlad	r7, r7, r5, ip
 8009b84:	4d35      	ldr	r5, [pc, #212]	; (8009c5c <D80_GENERIC+0x298>)
 8009b86:	fb2e 7105 	smlad	r1, lr, r5, r7
 8009b8a:	9102      	str	r1, [sp, #8]
 8009b8c:	9908      	ldr	r1, [sp, #32]
 8009b8e:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8009b92:	b181      	cbz	r1, 8009bb6 <D80_GENERIC+0x1f2>
 8009b94:	9c04      	ldr	r4, [sp, #16]
 8009b96:	9d05      	ldr	r5, [sp, #20]
 8009b98:	9305      	str	r3, [sp, #20]
 8009b9a:	441c      	add	r4, r3
 8009b9c:	1b64      	subs	r4, r4, r5
 8009b9e:	17e7      	asrs	r7, r4, #31
 8009ba0:	fba4 4501 	umull	r4, r5, r4, r1
 8009ba4:	fb01 5507 	mla	r5, r1, r7, r5
 8009ba8:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009bac:	f145 0500 	adc.w	r5, r5, #0
 8009bb0:	0069      	lsls	r1, r5, #1
 8009bb2:	9104      	str	r1, [sp, #16]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	9e00      	ldr	r6, [sp, #0]
 8009bb8:	9f06      	ldr	r7, [sp, #24]
 8009bba:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8009bbc:	025b      	lsls	r3, r3, #9
 8009bbe:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009bc2:	2500      	movs	r5, #0
 8009bc4:	fb02 f101 	mul.w	r1, r2, r1
 8009bc8:	fbc7 4503 	smlal	r4, r5, r7, r3
 8009bcc:	9c07      	ldr	r4, [sp, #28]
 8009bce:	10ab      	asrs	r3, r5, #2
 8009bd0:	f303 030f 	ssat	r3, #16, r3
 8009bd4:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8009bd8:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8009bda:	3201      	adds	r2, #1
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	dd13      	ble.n	8009c08 <D80_GENERIC+0x244>
 8009be0:	9b00      	ldr	r3, [sp, #0]
 8009be2:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8009be6:	f1bc 0f01 	cmp.w	ip, #1
 8009bea:	f47f af0b 	bne.w	8009a04 <D80_GENERIC+0x40>
 8009bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf0:	6884      	ldr	r4, [r0, #8]
 8009bf2:	069b      	lsls	r3, r3, #26
 8009bf4:	e890 0082 	ldmia.w	r0, {r1, r7}
 8009bf8:	f100 000a 	add.w	r0, r0, #10
 8009bfc:	f57f af3a 	bpl.w	8009a74 <D80_GENERIC+0xb0>
 8009c00:	ba49      	rev16	r1, r1
 8009c02:	ba7f      	rev16	r7, r7
 8009c04:	ba64      	rev16	r4, r4
 8009c06:	e735      	b.n	8009a74 <D80_GENERIC+0xb0>
 8009c08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	9b02      	ldr	r3, [sp, #8]
 8009c10:	6093      	str	r3, [r2, #8]
 8009c12:	9b01      	ldr	r3, [sp, #4]
 8009c14:	60d3      	str	r3, [r2, #12]
 8009c16:	9b04      	ldr	r3, [sp, #16]
 8009c18:	6113      	str	r3, [r2, #16]
 8009c1a:	9b05      	ldr	r3, [sp, #20]
 8009c1c:	6153      	str	r3, [r2, #20]
 8009c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c20:	f8c2 b01c 	str.w	fp, [r2, #28]
 8009c24:	2000      	movs	r0, #0
 8009c26:	6193      	str	r3, [r2, #24]
 8009c28:	b00b      	add	sp, #44	; 0x2c
 8009c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2e:	bf00      	nop
 8009c30:	002d0024 	.word	0x002d0024
 8009c34:	001c0015 	.word	0x001c0015
 8009c38:	000f000a 	.word	0x000f000a
 8009c3c:	00060003 	.word	0x00060003
 8009c40:	0037003f 	.word	0x0037003f
 8009c44:	00450049 	.word	0x00450049
 8009c48:	00490045 	.word	0x00490045
 8009c4c:	003f0037 	.word	0x003f0037
 8009c50:	00030006 	.word	0x00030006
 8009c54:	000a000f 	.word	0x000a000f
 8009c58:	0015001c 	.word	0x0015001c
 8009c5c:	0024002d 	.word	0x0024002d
 8009c60:	20000000 	.word	0x20000000

08009c64 <D128_GENERIC>:
 8009c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c68:	b093      	sub	sp, #76	; 0x4c
 8009c6a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009c6c:	9005      	str	r0, [sp, #20]
 8009c6e:	4610      	mov	r0, r2
 8009c70:	9201      	str	r2, [sp, #4]
 8009c72:	6912      	ldr	r2, [r2, #16]
 8009c74:	920c      	str	r2, [sp, #48]	; 0x30
 8009c76:	4602      	mov	r2, r0
 8009c78:	6940      	ldr	r0, [r0, #20]
 8009c7a:	900d      	str	r0, [sp, #52]	; 0x34
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	4614      	mov	r4, r2
 8009c80:	6992      	ldr	r2, [r2, #24]
 8009c82:	9211      	str	r2, [sp, #68]	; 0x44
 8009c84:	69c2      	ldr	r2, [r0, #28]
 8009c86:	9202      	str	r2, [sp, #8]
 8009c88:	68e2      	ldr	r2, [r4, #12]
 8009c8a:	6880      	ldr	r0, [r0, #8]
 8009c8c:	9203      	str	r2, [sp, #12]
 8009c8e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009c90:	9004      	str	r0, [sp, #16]
 8009c92:	920e      	str	r2, [sp, #56]	; 0x38
 8009c94:	910f      	str	r1, [sp, #60]	; 0x3c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f000 819b 	beq.w	8009fd2 <D128_GENERIC+0x36e>
 8009c9c:	6a23      	ldr	r3, [r4, #32]
 8009c9e:	9310      	str	r3, [sp, #64]	; 0x40
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800a04c <D128_GENERIC+0x3e8>
 8009ca6:	9306      	str	r3, [sp, #24]
 8009ca8:	e17a      	b.n	8009fa0 <D128_GENERIC+0x33c>
 8009caa:	b2d2      	uxtb	r2, r2
 8009cac:	9d05      	ldr	r5, [sp, #20]
 8009cae:	b214      	sxth	r4, r2
 8009cb0:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8009cb4:	4250      	negs	r0, r2
 8009cb6:	eb05 010a 	add.w	r1, r5, sl
 8009cba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009cbe:	eb01 0800 	add.w	r8, r1, r0
 8009cc2:	eb0b 0c04 	add.w	ip, fp, r4
 8009cc6:	eb08 070c 	add.w	r7, r8, ip
 8009cca:	183b      	adds	r3, r7, r0
 8009ccc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8009cd0:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8009cd4:	eb0e 0604 	add.w	r6, lr, r4
 8009cd8:	9307      	str	r3, [sp, #28]
 8009cda:	1833      	adds	r3, r6, r0
 8009cdc:	9305      	str	r3, [sp, #20]
 8009cde:	462b      	mov	r3, r5
 8009ce0:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8009ce4:	f8cd a020 	str.w	sl, [sp, #32]
 8009ce8:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8009cec:	f813 c002 	ldrb.w	ip, [r3, r2]
 8009cf0:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8009cf4:	5c3a      	ldrb	r2, [r7, r0]
 8009cf6:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8009cfa:	781f      	ldrb	r7, [r3, #0]
 8009cfc:	9b07      	ldr	r3, [sp, #28]
 8009cfe:	9d05      	ldr	r5, [sp, #20]
 8009d00:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8009d04:	5c09      	ldrb	r1, [r1, r0]
 8009d06:	9709      	str	r7, [sp, #36]	; 0x24
 8009d08:	9307      	str	r3, [sp, #28]
 8009d0a:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8009d0e:	5c33      	ldrb	r3, [r6, r0]
 8009d10:	0412      	lsls	r2, r2, #16
 8009d12:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8009d16:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8009d1a:	9d08      	ldr	r5, [sp, #32]
 8009d1c:	eb06 0a04 	add.w	sl, r6, r4
 8009d20:	0409      	lsls	r1, r1, #16
 8009d22:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8009d26:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8009d2a:	5d36      	ldrb	r6, [r6, r4]
 8009d2c:	9c05      	ldr	r4, [sp, #20]
 8009d2e:	042d      	lsls	r5, r5, #16
 8009d30:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8009d34:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8009d38:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8009d3c:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8009d40:	eb0a 0c00 	add.w	ip, sl, r0
 8009d44:	041b      	lsls	r3, r3, #16
 8009d46:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8009d4a:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8009d4e:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8009d52:	9d07      	ldr	r5, [sp, #28]
 8009d54:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8009d58:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8009d5c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009d5e:	4458      	add	r0, fp
 8009d60:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8009d64:	9005      	str	r0, [sp, #20]
 8009d66:	4439      	add	r1, r7
 8009d68:	442a      	add	r2, r5
 8009d6a:	44b2      	add	sl, r6
 8009d6c:	1918      	adds	r0, r3, r4
 8009d6e:	b2cb      	uxtb	r3, r1
 8009d70:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8009d74:	9e02      	ldr	r6, [sp, #8]
 8009d76:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009d7a:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8009d7e:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8009d82:	441e      	add	r6, r3
 8009d84:	0e09      	lsrs	r1, r1, #24
 8009d86:	4633      	mov	r3, r6
 8009d88:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009d8c:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8009d90:	b2d4      	uxtb	r4, r2
 8009d92:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009d96:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009d9a:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8009d9e:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009da2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009da6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009daa:	0e12      	lsrs	r2, r2, #24
 8009dac:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8009db0:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8009db4:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009db8:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8009dbc:	9702      	str	r7, [sp, #8]
 8009dbe:	b2c2      	uxtb	r2, r0
 8009dc0:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8009dc4:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8009dc8:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8009dcc:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8009dd0:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8009dd4:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8009dd8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8009ddc:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8009de0:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8009de4:	0e00      	lsrs	r0, r0, #24
 8009de6:	fa5f f68a 	uxtb.w	r6, sl
 8009dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dee:	9309      	str	r3, [sp, #36]	; 0x24
 8009df0:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8009df4:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8009df8:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8009dfc:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8009e00:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009e04:	950a      	str	r5, [sp, #40]	; 0x28
 8009e06:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8009e0a:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8009e0e:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8009e12:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009e16:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8009e1a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009e1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e20:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8009e24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e26:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8009e2a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009e2e:	9307      	str	r3, [sp, #28]
 8009e30:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009e34:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8009e38:	9b02      	ldr	r3, [sp, #8]
 8009e3a:	f8cd c008 	str.w	ip, [sp, #8]
 8009e3e:	4694      	mov	ip, r2
 8009e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e42:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8009e46:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8009e4a:	9a02      	ldr	r2, [sp, #8]
 8009e4c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009e50:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8009e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009e58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e5a:	f8cd a020 	str.w	sl, [sp, #32]
 8009e5e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009e62:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8009e66:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009e6a:	9b07      	ldr	r3, [sp, #28]
 8009e6c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009e70:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8009e74:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8009e78:	9a08      	ldr	r2, [sp, #32]
 8009e7a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e82:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009e86:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009e8a:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 8009e8e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009e92:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009e96:	0a96      	lsrs	r6, r2, #10
 8009e98:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009e9c:	9602      	str	r6, [sp, #8]
 8009e9e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8009ea2:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8009ea6:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8009eaa:	4e53      	ldr	r6, [pc, #332]	; (8009ff8 <D128_GENERIC+0x394>)
 8009eac:	9f03      	ldr	r7, [sp, #12]
 8009eae:	fb2c 7606 	smlad	r6, ip, r6, r7
 8009eb2:	4f52      	ldr	r7, [pc, #328]	; (8009ffc <D128_GENERIC+0x398>)
 8009eb4:	fb2a 6607 	smlad	r6, sl, r7, r6
 8009eb8:	4f51      	ldr	r7, [pc, #324]	; (800a000 <D128_GENERIC+0x39c>)
 8009eba:	fb21 6607 	smlad	r6, r1, r7, r6
 8009ebe:	4f51      	ldr	r7, [pc, #324]	; (800a004 <D128_GENERIC+0x3a0>)
 8009ec0:	fb24 6607 	smlad	r6, r4, r7, r6
 8009ec4:	4f50      	ldr	r7, [pc, #320]	; (800a008 <D128_GENERIC+0x3a4>)
 8009ec6:	fb28 6607 	smlad	r6, r8, r7, r6
 8009eca:	4f50      	ldr	r7, [pc, #320]	; (800a00c <D128_GENERIC+0x3a8>)
 8009ecc:	fb20 6607 	smlad	r6, r0, r7, r6
 8009ed0:	4f4f      	ldr	r7, [pc, #316]	; (800a010 <D128_GENERIC+0x3ac>)
 8009ed2:	fb23 6607 	smlad	r6, r3, r7, r6
 8009ed6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8009eda:	fb25 6607 	smlad	r6, r5, r7, r6
 8009ede:	4f4d      	ldr	r7, [pc, #308]	; (800a014 <D128_GENERIC+0x3b0>)
 8009ee0:	9a04      	ldr	r2, [sp, #16]
 8009ee2:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8009ee6:	4a4c      	ldr	r2, [pc, #304]	; (800a018 <D128_GENERIC+0x3b4>)
 8009ee8:	fb2a ee02 	smlad	lr, sl, r2, lr
 8009eec:	4f4b      	ldr	r7, [pc, #300]	; (800a01c <D128_GENERIC+0x3b8>)
 8009eee:	fb21 ee07 	smlad	lr, r1, r7, lr
 8009ef2:	4f4b      	ldr	r7, [pc, #300]	; (800a020 <D128_GENERIC+0x3bc>)
 8009ef4:	fb24 ee07 	smlad	lr, r4, r7, lr
 8009ef8:	4f4a      	ldr	r7, [pc, #296]	; (800a024 <D128_GENERIC+0x3c0>)
 8009efa:	fb28 ee07 	smlad	lr, r8, r7, lr
 8009efe:	4f4a      	ldr	r7, [pc, #296]	; (800a028 <D128_GENERIC+0x3c4>)
 8009f00:	fb20 ee07 	smlad	lr, r0, r7, lr
 8009f04:	4f49      	ldr	r7, [pc, #292]	; (800a02c <D128_GENERIC+0x3c8>)
 8009f06:	fb23 e707 	smlad	r7, r3, r7, lr
 8009f0a:	f8df e144 	ldr.w	lr, [pc, #324]	; 800a050 <D128_GENERIC+0x3ec>
 8009f0e:	fb25 720e 	smlad	r2, r5, lr, r7
 8009f12:	f04f 0b01 	mov.w	fp, #1
 8009f16:	9203      	str	r2, [sp, #12]
 8009f18:	fb2c fb0b 	smuad	fp, ip, fp
 8009f1c:	4f44      	ldr	r7, [pc, #272]	; (800a030 <D128_GENERIC+0x3cc>)
 8009f1e:	fb2a ba07 	smlad	sl, sl, r7, fp
 8009f22:	4f44      	ldr	r7, [pc, #272]	; (800a034 <D128_GENERIC+0x3d0>)
 8009f24:	fb21 aa07 	smlad	sl, r1, r7, sl
 8009f28:	4f43      	ldr	r7, [pc, #268]	; (800a038 <D128_GENERIC+0x3d4>)
 8009f2a:	fb24 aa07 	smlad	sl, r4, r7, sl
 8009f2e:	4f43      	ldr	r7, [pc, #268]	; (800a03c <D128_GENERIC+0x3d8>)
 8009f30:	fb28 a707 	smlad	r7, r8, r7, sl
 8009f34:	4a42      	ldr	r2, [pc, #264]	; (800a040 <D128_GENERIC+0x3dc>)
 8009f36:	fb20 7702 	smlad	r7, r0, r2, r7
 8009f3a:	4a42      	ldr	r2, [pc, #264]	; (800a044 <D128_GENERIC+0x3e0>)
 8009f3c:	fb23 7702 	smlad	r7, r3, r2, r7
 8009f40:	4b41      	ldr	r3, [pc, #260]	; (800a048 <D128_GENERIC+0x3e4>)
 8009f42:	fb25 7303 	smlad	r3, r5, r3, r7
 8009f46:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009f48:	9304      	str	r3, [sp, #16]
 8009f4a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8009f4e:	b185      	cbz	r5, 8009f72 <D128_GENERIC+0x30e>
 8009f50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f52:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f54:	960d      	str	r6, [sp, #52]	; 0x34
 8009f56:	4432      	add	r2, r6
 8009f58:	1a52      	subs	r2, r2, r1
 8009f5a:	17d1      	asrs	r1, r2, #31
 8009f5c:	fba2 2305 	umull	r2, r3, r2, r5
 8009f60:	fb05 3301 	mla	r3, r5, r1, r3
 8009f64:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8009f68:	f143 0300 	adc.w	r3, r3, #0
 8009f6c:	005b      	lsls	r3, r3, #1
 8009f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f70:	461e      	mov	r6, r3
 8009f72:	9801      	ldr	r0, [sp, #4]
 8009f74:	9c06      	ldr	r4, [sp, #24]
 8009f76:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8009f78:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009f7a:	01f6      	lsls	r6, r6, #7
 8009f7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f80:	2300      	movs	r3, #0
 8009f82:	fbc5 2306 	smlal	r2, r3, r5, r6
 8009f86:	fb04 f101 	mul.w	r1, r4, r1
 8009f8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f8c:	109b      	asrs	r3, r3, #2
 8009f8e:	f303 030f 	ssat	r3, #16, r3
 8009f92:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8009f96:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8009f98:	1c62      	adds	r2, r4, #1
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	9206      	str	r2, [sp, #24]
 8009f9e:	dd18      	ble.n	8009fd2 <D128_GENERIC+0x36e>
 8009fa0:	9b01      	ldr	r3, [sp, #4]
 8009fa2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009fa4:	2a01      	cmp	r2, #1
 8009fa6:	f47f ae80 	bne.w	8009caa <D128_GENERIC+0x46>
 8009faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fac:	9d05      	ldr	r5, [sp, #20]
 8009fae:	069b      	lsls	r3, r3, #26
 8009fb0:	6829      	ldr	r1, [r5, #0]
 8009fb2:	686a      	ldr	r2, [r5, #4]
 8009fb4:	68a8      	ldr	r0, [r5, #8]
 8009fb6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009fba:	f105 0410 	add.w	r4, r5, #16
 8009fbe:	d506      	bpl.n	8009fce <D128_GENERIC+0x36a>
 8009fc0:	ba49      	rev16	r1, r1
 8009fc2:	ba52      	rev16	r2, r2
 8009fc4:	ba40      	rev16	r0, r0
 8009fc6:	fa9a fa9a 	rev16.w	sl, sl
 8009fca:	9405      	str	r4, [sp, #20]
 8009fcc:	e6cf      	b.n	8009d6e <D128_GENERIC+0x10a>
 8009fce:	9405      	str	r4, [sp, #20]
 8009fd0:	e6cd      	b.n	8009d6e <D128_GENERIC+0x10a>
 8009fd2:	9a01      	ldr	r2, [sp, #4]
 8009fd4:	9904      	ldr	r1, [sp, #16]
 8009fd6:	6091      	str	r1, [r2, #8]
 8009fd8:	9903      	ldr	r1, [sp, #12]
 8009fda:	60d1      	str	r1, [r2, #12]
 8009fdc:	9b02      	ldr	r3, [sp, #8]
 8009fde:	61d3      	str	r3, [r2, #28]
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fe6:	610a      	str	r2, [r1, #16]
 8009fe8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009fea:	6159      	str	r1, [r3, #20]
 8009fec:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009fee:	6199      	str	r1, [r3, #24]
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	b013      	add	sp, #76	; 0x4c
 8009ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff8:	00780069 	.word	0x00780069
 8009ffc:	005b004e 	.word	0x005b004e
 800a000:	00420037 	.word	0x00420037
 800a004:	002d0024 	.word	0x002d0024
 800a008:	001c0015 	.word	0x001c0015
 800a00c:	000f000a 	.word	0x000f000a
 800a010:	00060003 	.word	0x00060003
 800a014:	00880096 	.word	0x00880096
 800a018:	00a200ac 	.word	0x00a200ac
 800a01c:	00b400ba 	.word	0x00b400ba
 800a020:	00be00c0 	.word	0x00be00c0
 800a024:	00c000be 	.word	0x00c000be
 800a028:	00ba00b4 	.word	0x00ba00b4
 800a02c:	00ac00a2 	.word	0x00ac00a2
 800a030:	00030006 	.word	0x00030006
 800a034:	000a000f 	.word	0x000a000f
 800a038:	0015001c 	.word	0x0015001c
 800a03c:	0024002d 	.word	0x0024002d
 800a040:	00370042 	.word	0x00370042
 800a044:	004e005b 	.word	0x004e005b
 800a048:	00690078 	.word	0x00690078
 800a04c:	20000000 	.word	0x20000000
 800a050:	00960088 	.word	0x00960088

0800a054 <D16_1CH_HTONS_VOL_HP>:
 800a054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a058:	4691      	mov	r9, r2
 800a05a:	b083      	sub	sp, #12
 800a05c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a05e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800a062:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	4680      	mov	r8, r0
 800a06a:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800a06e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a072:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a076:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800a07a:	9401      	str	r4, [sp, #4]
 800a07c:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800a080:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800a084:	2a00      	cmp	r2, #0
 800a086:	d04e      	beq.n	800a126 <D16_1CH_HTONS_VOL_HP+0xd2>
 800a088:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800a134 <D16_1CH_HTONS_VOL_HP+0xe0>
 800a08c:	1e8c      	subs	r4, r1, #2
 800a08e:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800a092:	f858 2b02 	ldr.w	r2, [r8], #2
 800a096:	ba52      	rev16	r2, r2
 800a098:	b2d6      	uxtb	r6, r2
 800a09a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a09e:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800a0a2:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800a0ac:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800a0b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a0b8:	0a93      	lsrs	r3, r2, #10
 800a0ba:	4a1c      	ldr	r2, [pc, #112]	; (800a12c <D16_1CH_HTONS_VOL_HP+0xd8>)
 800a0bc:	fb21 5202 	smlad	r2, r1, r2, r5
 800a0c0:	4d1b      	ldr	r5, [pc, #108]	; (800a130 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800a0c2:	fb21 f505 	smuad	r5, r1, r5
 800a0c6:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800a0ca:	4410      	add	r0, r2
 800a0cc:	1bc0      	subs	r0, r0, r7
 800a0ce:	17c7      	asrs	r7, r0, #31
 800a0d0:	fba0 010e 	umull	r0, r1, r0, lr
 800a0d4:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a0d8:	fb0e 1107 	mla	r1, lr, r7, r1
 800a0dc:	f141 0100 	adc.w	r1, r1, #0
 800a0e0:	0448      	lsls	r0, r1, #17
 800a0e2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a0e6:	2700      	movs	r7, #0
 800a0e8:	fbc0 670a 	smlal	r6, r7, r0, sl
 800a0ec:	45d8      	cmp	r8, fp
 800a0ee:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800a0f2:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800a0f6:	4617      	mov	r7, r2
 800a0f8:	f301 010f 	ssat	r1, #16, r1
 800a0fc:	f824 1f02 	strh.w	r1, [r4, #2]!
 800a100:	d1c7      	bne.n	800a092 <D16_1CH_HTONS_VOL_HP+0x3e>
 800a102:	9901      	ldr	r1, [sp, #4]
 800a104:	f8c9 301c 	str.w	r3, [r9, #28]
 800a108:	9b00      	ldr	r3, [sp, #0]
 800a10a:	f8c9 0010 	str.w	r0, [r9, #16]
 800a10e:	2000      	movs	r0, #0
 800a110:	f8c9 5008 	str.w	r5, [r9, #8]
 800a114:	f8c9 100c 	str.w	r1, [r9, #12]
 800a118:	f8c9 2014 	str.w	r2, [r9, #20]
 800a11c:	f8c9 3018 	str.w	r3, [r9, #24]
 800a120:	b003      	add	sp, #12
 800a122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a126:	463a      	mov	r2, r7
 800a128:	4621      	mov	r1, r4
 800a12a:	e7eb      	b.n	800a104 <D16_1CH_HTONS_VOL_HP+0xb0>
 800a12c:	00030001 	.word	0x00030001
 800a130:	00010003 	.word	0x00010003
 800a134:	20000000 	.word	0x20000000

0800a138 <D24_1CH_HTONS_VOL_HP>:
 800a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	b089      	sub	sp, #36	; 0x24
 800a13e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a140:	6996      	ldr	r6, [r2, #24]
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800a146:	9207      	str	r2, [sp, #28]
 800a148:	6915      	ldr	r5, [r2, #16]
 800a14a:	6954      	ldr	r4, [r2, #20]
 800a14c:	9606      	str	r6, [sp, #24]
 800a14e:	6893      	ldr	r3, [r2, #8]
 800a150:	69d6      	ldr	r6, [r2, #28]
 800a152:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800a156:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800a15a:	9a04      	ldr	r2, [sp, #16]
 800a15c:	9705      	str	r7, [sp, #20]
 800a15e:	2a00      	cmp	r2, #0
 800a160:	d07e      	beq.n	800a260 <D24_1CH_HTONS_VOL_HP+0x128>
 800a162:	f1a1 0b02 	sub.w	fp, r1, #2
 800a166:	2700      	movs	r7, #0
 800a168:	46a8      	mov	r8, r5
 800a16a:	f8cd b004 	str.w	fp, [sp, #4]
 800a16e:	4655      	mov	r5, sl
 800a170:	46e3      	mov	fp, ip
 800a172:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800a26c <D24_1CH_HTONS_VOL_HP+0x134>
 800a176:	46ba      	mov	sl, r7
 800a178:	469c      	mov	ip, r3
 800a17a:	e055      	b.n	800a228 <D24_1CH_HTONS_VOL_HP+0xf0>
 800a17c:	7802      	ldrb	r2, [r0, #0]
 800a17e:	78c3      	ldrb	r3, [r0, #3]
 800a180:	7841      	ldrb	r1, [r0, #1]
 800a182:	0212      	lsls	r2, r2, #8
 800a184:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800a188:	440b      	add	r3, r1
 800a18a:	3002      	adds	r0, #2
 800a18c:	b2d9      	uxtb	r1, r3
 800a18e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a192:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800a196:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800a19a:	0c1b      	lsrs	r3, r3, #16
 800a19c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800a1a0:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a1a4:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800a1a8:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800a1ac:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800a1b0:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800a1b4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a1b8:	4a2a      	ldr	r2, [pc, #168]	; (800a264 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800a1ba:	fb23 b102 	smlad	r1, r3, r2, fp
 800a1be:	4a2a      	ldr	r2, [pc, #168]	; (800a268 <D24_1CH_HTONS_VOL_HP+0x130>)
 800a1c0:	fb23 cb02 	smlad	fp, r3, r2, ip
 800a1c4:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800a1c8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800a1cc:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	fb23 f702 	smuad	r7, r3, r2
 800a1d6:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800a1da:	eb01 0208 	add.w	r2, r1, r8
 800a1de:	1b12      	subs	r2, r2, r4
 800a1e0:	17d4      	asrs	r4, r2, #31
 800a1e2:	fba2 2305 	umull	r2, r3, r2, r5
 800a1e6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a1ea:	fb05 3304 	mla	r3, r5, r4, r3
 800a1ee:	f143 0300 	adc.w	r3, r3, #0
 800a1f2:	9c05      	ldr	r4, [sp, #20]
 800a1f4:	03da      	lsls	r2, r3, #15
 800a1f6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a1fa:	f04f 0900 	mov.w	r9, #0
 800a1fe:	fbc4 8902 	smlal	r8, r9, r4, r2
 800a202:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a206:	9a01      	ldr	r2, [sp, #4]
 800a208:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800a20c:	9b03      	ldr	r3, [sp, #12]
 800a20e:	109b      	asrs	r3, r3, #2
 800a210:	f303 030f 	ssat	r3, #16, r3
 800a214:	f822 3f02 	strh.w	r3, [r2, #2]!
 800a218:	9b04      	ldr	r3, [sp, #16]
 800a21a:	9201      	str	r2, [sp, #4]
 800a21c:	f10a 0a01 	add.w	sl, sl, #1
 800a220:	459a      	cmp	sl, r3
 800a222:	44bc      	add	ip, r7
 800a224:	460c      	mov	r4, r1
 800a226:	d00b      	beq.n	800a240 <D24_1CH_HTONS_VOL_HP+0x108>
 800a228:	f01a 0f01 	tst.w	sl, #1
 800a22c:	d0a6      	beq.n	800a17c <D24_1CH_HTONS_VOL_HP+0x44>
 800a22e:	78c2      	ldrb	r2, [r0, #3]
 800a230:	7883      	ldrb	r3, [r0, #2]
 800a232:	f810 1b04 	ldrb.w	r1, [r0], #4
 800a236:	0212      	lsls	r2, r2, #8
 800a238:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800a23c:	440b      	add	r3, r1
 800a23e:	e7a5      	b.n	800a18c <D24_1CH_HTONS_VOL_HP+0x54>
 800a240:	4663      	mov	r3, ip
 800a242:	4645      	mov	r5, r8
 800a244:	46dc      	mov	ip, fp
 800a246:	9807      	ldr	r0, [sp, #28]
 800a248:	6141      	str	r1, [r0, #20]
 800a24a:	9906      	ldr	r1, [sp, #24]
 800a24c:	6083      	str	r3, [r0, #8]
 800a24e:	f8c0 c00c 	str.w	ip, [r0, #12]
 800a252:	61c6      	str	r6, [r0, #28]
 800a254:	6105      	str	r5, [r0, #16]
 800a256:	6181      	str	r1, [r0, #24]
 800a258:	2000      	movs	r0, #0
 800a25a:	b009      	add	sp, #36	; 0x24
 800a25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a260:	4621      	mov	r1, r4
 800a262:	e7f0      	b.n	800a246 <D24_1CH_HTONS_VOL_HP+0x10e>
 800a264:	00030001 	.word	0x00030001
 800a268:	00060007 	.word	0x00060007
 800a26c:	20000000 	.word	0x20000000

0800a270 <D32_1CH_HTONS_VOL_HP>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	4692      	mov	sl, r2
 800a276:	b087      	sub	sp, #28
 800a278:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a27a:	f8da 3018 	ldr.w	r3, [sl, #24]
 800a27e:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800a282:	9304      	str	r3, [sp, #16]
 800a284:	f8da 4010 	ldr.w	r4, [sl, #16]
 800a288:	f8da 8014 	ldr.w	r8, [sl, #20]
 800a28c:	f8da 601c 	ldr.w	r6, [sl, #28]
 800a290:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a294:	f8da e00c 	ldr.w	lr, [sl, #12]
 800a298:	9501      	str	r5, [sp, #4]
 800a29a:	f8da c020 	ldr.w	ip, [sl, #32]
 800a29e:	2a00      	cmp	r2, #0
 800a2a0:	d07b      	beq.n	800a39a <D32_1CH_HTONS_VOL_HP+0x12a>
 800a2a2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a2a6:	4f3e      	ldr	r7, [pc, #248]	; (800a3a0 <D32_1CH_HTONS_VOL_HP+0x130>)
 800a2a8:	f8cd c00c 	str.w	ip, [sp, #12]
 800a2ac:	9202      	str	r2, [sp, #8]
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	46a1      	mov	r9, r4
 800a2b2:	4684      	mov	ip, r0
 800a2b4:	f8cd a014 	str.w	sl, [sp, #20]
 800a2b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a2bc:	ba49      	rev16	r1, r1
 800a2be:	b2c8      	uxtb	r0, r1
 800a2c0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800a2c4:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800a2c8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800a2cc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a2d0:	0e09      	lsrs	r1, r1, #24
 800a2d2:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800a2d6:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800a2da:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a2de:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800a2e2:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800a2e6:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800a2ea:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a2ee:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800a2f2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a2f6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a2fa:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800a2fe:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800a302:	4a28      	ldr	r2, [pc, #160]	; (800a3a4 <D32_1CH_HTONS_VOL_HP+0x134>)
 800a304:	fb20 e202 	smlad	r2, r0, r2, lr
 800a308:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a30c:	fb2a 2101 	smlad	r1, sl, r1, r2
 800a310:	4a25      	ldr	r2, [pc, #148]	; (800a3a8 <D32_1CH_HTONS_VOL_HP+0x138>)
 800a312:	fb20 3302 	smlad	r3, r0, r2, r3
 800a316:	4a25      	ldr	r2, [pc, #148]	; (800a3ac <D32_1CH_HTONS_VOL_HP+0x13c>)
 800a318:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800a31c:	2301      	movs	r3, #1
 800a31e:	fb20 f003 	smuad	r0, r0, r3
 800a322:	4b23      	ldr	r3, [pc, #140]	; (800a3b0 <D32_1CH_HTONS_VOL_HP+0x140>)
 800a324:	fb2a 0303 	smlad	r3, sl, r3, r0
 800a328:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800a32c:	9c03      	ldr	r4, [sp, #12]
 800a32e:	eb02 0009 	add.w	r0, r2, r9
 800a332:	eba0 0008 	sub.w	r0, r0, r8
 800a336:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800a33a:	fba0 0104 	umull	r0, r1, r0, r4
 800a33e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a342:	fb04 110b 	mla	r1, r4, fp, r1
 800a346:	f141 0100 	adc.w	r1, r1, #0
 800a34a:	9c01      	ldr	r4, [sp, #4]
 800a34c:	0388      	lsls	r0, r1, #14
 800a34e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a352:	f04f 0900 	mov.w	r9, #0
 800a356:	fbc0 8904 	smlal	r8, r9, r0, r4
 800a35a:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800a35e:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800a362:	f300 000f 	ssat	r0, #16, r0
 800a366:	9902      	ldr	r1, [sp, #8]
 800a368:	f825 0b02 	strh.w	r0, [r5], #2
 800a36c:	428d      	cmp	r5, r1
 800a36e:	4690      	mov	r8, r2
 800a370:	d1a2      	bne.n	800a2b8 <D32_1CH_HTONS_VOL_HP+0x48>
 800a372:	f8dd a014 	ldr.w	sl, [sp, #20]
 800a376:	464c      	mov	r4, r9
 800a378:	f8ca 3008 	str.w	r3, [sl, #8]
 800a37c:	9b04      	ldr	r3, [sp, #16]
 800a37e:	f8ca e00c 	str.w	lr, [sl, #12]
 800a382:	2000      	movs	r0, #0
 800a384:	f8ca 601c 	str.w	r6, [sl, #28]
 800a388:	f8ca 4010 	str.w	r4, [sl, #16]
 800a38c:	f8ca 2014 	str.w	r2, [sl, #20]
 800a390:	f8ca 3018 	str.w	r3, [sl, #24]
 800a394:	b007      	add	sp, #28
 800a396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39a:	4642      	mov	r2, r8
 800a39c:	e7ec      	b.n	800a378 <D32_1CH_HTONS_VOL_HP+0x108>
 800a39e:	bf00      	nop
 800a3a0:	20000000 	.word	0x20000000
 800a3a4:	00060003 	.word	0x00060003
 800a3a8:	000a000c 	.word	0x000a000c
 800a3ac:	000c000a 	.word	0x000c000a
 800a3b0:	00030006 	.word	0x00030006

0800a3b4 <D48_1CH_HTONS_VOL_HP>:
 800a3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	461c      	mov	r4, r3
 800a3bc:	b087      	sub	sp, #28
 800a3be:	4625      	mov	r5, r4
 800a3c0:	4626      	mov	r6, r4
 800a3c2:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800a3c4:	9205      	str	r2, [sp, #20]
 800a3c6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a3c8:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800a3cc:	9501      	str	r5, [sp, #4]
 800a3ce:	4680      	mov	r8, r0
 800a3d0:	6a35      	ldr	r5, [r6, #32]
 800a3d2:	6918      	ldr	r0, [r3, #16]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	9304      	str	r3, [sp, #16]
 800a3d8:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800a3dc:	68a3      	ldr	r3, [r4, #8]
 800a3de:	9502      	str	r5, [sp, #8]
 800a3e0:	68e4      	ldr	r4, [r4, #12]
 800a3e2:	2a00      	cmp	r2, #0
 800a3e4:	f000 808c 	beq.w	800a500 <D48_1CH_HTONS_VOL_HP+0x14c>
 800a3e8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a3ec:	4d45      	ldr	r5, [pc, #276]	; (800a504 <D48_1CH_HTONS_VOL_HP+0x150>)
 800a3ee:	9203      	str	r2, [sp, #12]
 800a3f0:	468c      	mov	ip, r1
 800a3f2:	e898 0044 	ldmia.w	r8, {r2, r6}
 800a3f6:	f108 0806 	add.w	r8, r8, #6
 800a3fa:	ba52      	rev16	r2, r2
 800a3fc:	ba76      	rev16	r6, r6
 800a3fe:	b2d7      	uxtb	r7, r2
 800a400:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a404:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800a408:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a40c:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800a410:	0e12      	lsrs	r2, r2, #24
 800a412:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800a416:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800a41a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a41e:	fa5f fb86 	uxtb.w	fp, r6
 800a422:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a426:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800a42a:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800a42e:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800a432:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800a436:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a43a:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800a43e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800a442:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a446:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a44a:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800a44e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a452:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a456:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a45a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800a45e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800a462:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800a466:	4a28      	ldr	r2, [pc, #160]	; (800a508 <D48_1CH_HTONS_VOL_HP+0x154>)
 800a468:	fb2a 4202 	smlad	r2, sl, r2, r4
 800a46c:	4927      	ldr	r1, [pc, #156]	; (800a50c <D48_1CH_HTONS_VOL_HP+0x158>)
 800a46e:	fb27 2201 	smlad	r2, r7, r1, r2
 800a472:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a476:	fb26 2201 	smlad	r2, r6, r1, r2
 800a47a:	4925      	ldr	r1, [pc, #148]	; (800a510 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800a47c:	fb2a 3401 	smlad	r4, sl, r1, r3
 800a480:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800a484:	fb27 4403 	smlad	r4, r7, r3, r4
 800a488:	4b22      	ldr	r3, [pc, #136]	; (800a514 <D48_1CH_HTONS_VOL_HP+0x160>)
 800a48a:	fb26 4403 	smlad	r4, r6, r3, r4
 800a48e:	2101      	movs	r1, #1
 800a490:	fb2a fa01 	smuad	sl, sl, r1
 800a494:	4b20      	ldr	r3, [pc, #128]	; (800a518 <D48_1CH_HTONS_VOL_HP+0x164>)
 800a496:	fb27 a703 	smlad	r7, r7, r3, sl
 800a49a:	4b20      	ldr	r3, [pc, #128]	; (800a51c <D48_1CH_HTONS_VOL_HP+0x168>)
 800a49c:	fb26 7303 	smlad	r3, r6, r3, r7
 800a4a0:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800a4a4:	9e02      	ldr	r6, [sp, #8]
 800a4a6:	9f01      	ldr	r7, [sp, #4]
 800a4a8:	4410      	add	r0, r2
 800a4aa:	eba0 0009 	sub.w	r0, r0, r9
 800a4ae:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800a4b2:	fba0 0106 	umull	r0, r1, r0, r6
 800a4b6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a4ba:	fb06 110a 	mla	r1, r6, sl, r1
 800a4be:	f141 0100 	adc.w	r1, r1, #0
 800a4c2:	0308      	lsls	r0, r1, #12
 800a4c4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800a4c8:	f04f 0a00 	mov.w	sl, #0
 800a4cc:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800a4d0:	4657      	mov	r7, sl
 800a4d2:	10b8      	asrs	r0, r7, #2
 800a4d4:	f300 000f 	ssat	r0, #16, r0
 800a4d8:	f82c 0b02 	strh.w	r0, [ip], #2
 800a4dc:	0048      	lsls	r0, r1, #1
 800a4de:	9903      	ldr	r1, [sp, #12]
 800a4e0:	458c      	cmp	ip, r1
 800a4e2:	4691      	mov	r9, r2
 800a4e4:	d185      	bne.n	800a3f2 <D48_1CH_HTONS_VOL_HP+0x3e>
 800a4e6:	9d05      	ldr	r5, [sp, #20]
 800a4e8:	616a      	str	r2, [r5, #20]
 800a4ea:	9a04      	ldr	r2, [sp, #16]
 800a4ec:	6128      	str	r0, [r5, #16]
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	60ab      	str	r3, [r5, #8]
 800a4f2:	60ec      	str	r4, [r5, #12]
 800a4f4:	f8c5 e01c 	str.w	lr, [r5, #28]
 800a4f8:	61aa      	str	r2, [r5, #24]
 800a4fa:	b007      	add	sp, #28
 800a4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a500:	464a      	mov	r2, r9
 800a502:	e7f0      	b.n	800a4e6 <D48_1CH_HTONS_VOL_HP+0x132>
 800a504:	20000000 	.word	0x20000000
 800a508:	000f000a 	.word	0x000f000a
 800a50c:	00060003 	.word	0x00060003
 800a510:	00150019 	.word	0x00150019
 800a514:	00190015 	.word	0x00190015
 800a518:	00030006 	.word	0x00030006
 800a51c:	000a000f 	.word	0x000a000f

0800a520 <D64_1CH_HTONS_VOL_HP>:
 800a520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a524:	b089      	sub	sp, #36	; 0x24
 800a526:	4614      	mov	r4, r2
 800a528:	9207      	str	r2, [sp, #28]
 800a52a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a52c:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800a530:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800a534:	6992      	ldr	r2, [r2, #24]
 800a536:	9206      	str	r2, [sp, #24]
 800a538:	68e2      	ldr	r2, [r4, #12]
 800a53a:	9201      	str	r2, [sp, #4]
 800a53c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a53e:	9203      	str	r2, [sp, #12]
 800a540:	6a22      	ldr	r2, [r4, #32]
 800a542:	69e5      	ldr	r5, [r4, #28]
 800a544:	68a6      	ldr	r6, [r4, #8]
 800a546:	9204      	str	r2, [sp, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 80b0 	beq.w	800a6ae <D64_1CH_HTONS_VOL_HP+0x18e>
 800a54e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a552:	4f58      	ldr	r7, [pc, #352]	; (800a6b4 <D64_1CH_HTONS_VOL_HP+0x194>)
 800a554:	9305      	str	r3, [sp, #20]
 800a556:	9102      	str	r1, [sp, #8]
 800a558:	f850 2b08 	ldr.w	r2, [r0], #8
 800a55c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a560:	ba52      	rev16	r2, r2
 800a562:	fa93 f993 	rev16.w	r9, r3
 800a566:	b2d4      	uxtb	r4, r2
 800a568:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800a56c:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800a570:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a574:	9901      	ldr	r1, [sp, #4]
 800a576:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a57a:	0e12      	lsrs	r2, r2, #24
 800a57c:	44ab      	add	fp, r5
 800a57e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a582:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800a586:	fa5f f289 	uxtb.w	r2, r9
 800a58a:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800a58e:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800a592:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800a596:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a59a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a59e:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800a5a2:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800a5a6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800a5aa:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800a5ae:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800a5b2:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800a5b6:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800a5ba:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800a5be:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800a5c2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a5c6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a5ca:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a5ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5d2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a5d6:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800a5da:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a5de:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800a5e2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a5e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800a5ea:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800a5ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a5f2:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800a5f6:	4b30      	ldr	r3, [pc, #192]	; (800a6b8 <D64_1CH_HTONS_VOL_HP+0x198>)
 800a5f8:	fb2b 1303 	smlad	r3, fp, r3, r1
 800a5fc:	492f      	ldr	r1, [pc, #188]	; (800a6bc <D64_1CH_HTONS_VOL_HP+0x19c>)
 800a5fe:	fb24 3301 	smlad	r3, r4, r1, r3
 800a602:	492f      	ldr	r1, [pc, #188]	; (800a6c0 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800a604:	fb22 3301 	smlad	r3, r2, r1, r3
 800a608:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a60c:	fb2e 390a 	smlad	r9, lr, sl, r3
 800a610:	4b2c      	ldr	r3, [pc, #176]	; (800a6c4 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800a612:	fb2b 6603 	smlad	r6, fp, r3, r6
 800a616:	fb2e 6613 	smladx	r6, lr, r3, r6
 800a61a:	4b2b      	ldr	r3, [pc, #172]	; (800a6c8 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800a61c:	fb24 6603 	smlad	r6, r4, r3, r6
 800a620:	fb22 6313 	smladx	r3, r2, r3, r6
 800a624:	f04f 0a01 	mov.w	sl, #1
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	fb2b fb0a 	smuad	fp, fp, sl
 800a62e:	4b27      	ldr	r3, [pc, #156]	; (800a6cc <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800a630:	fb24 ba03 	smlad	sl, r4, r3, fp
 800a634:	4b26      	ldr	r3, [pc, #152]	; (800a6d0 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800a636:	fb22 a203 	smlad	r2, r2, r3, sl
 800a63a:	4b26      	ldr	r3, [pc, #152]	; (800a6d4 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800a63c:	fb2e 2603 	smlad	r6, lr, r3, r2
 800a640:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800a644:	eb0a 020c 	add.w	r2, sl, ip
 800a648:	9c04      	ldr	r4, [sp, #16]
 800a64a:	9903      	ldr	r1, [sp, #12]
 800a64c:	eba2 0208 	sub.w	r2, r2, r8
 800a650:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a654:	fba2 2304 	umull	r2, r3, r2, r4
 800a658:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a65c:	fb04 3309 	mla	r3, r4, r9, r3
 800a660:	f143 0300 	adc.w	r3, r3, #0
 800a664:	02da      	lsls	r2, r3, #11
 800a666:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a66a:	f04f 0900 	mov.w	r9, #0
 800a66e:	fbc1 8902 	smlal	r8, r9, r1, r2
 800a672:	9902      	ldr	r1, [sp, #8]
 800a674:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800a678:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a67c:	f302 020f 	ssat	r2, #16, r2
 800a680:	9b05      	ldr	r3, [sp, #20]
 800a682:	f821 2b02 	strh.w	r2, [r1], #2
 800a686:	4299      	cmp	r1, r3
 800a688:	9102      	str	r1, [sp, #8]
 800a68a:	46d0      	mov	r8, sl
 800a68c:	f47f af64 	bne.w	800a558 <D64_1CH_HTONS_VOL_HP+0x38>
 800a690:	9a07      	ldr	r2, [sp, #28]
 800a692:	9901      	ldr	r1, [sp, #4]
 800a694:	60d1      	str	r1, [r2, #12]
 800a696:	9906      	ldr	r1, [sp, #24]
 800a698:	6096      	str	r6, [r2, #8]
 800a69a:	2000      	movs	r0, #0
 800a69c:	61d5      	str	r5, [r2, #28]
 800a69e:	f8c2 c010 	str.w	ip, [r2, #16]
 800a6a2:	f8c2 a014 	str.w	sl, [r2, #20]
 800a6a6:	6191      	str	r1, [r2, #24]
 800a6a8:	b009      	add	sp, #36	; 0x24
 800a6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ae:	46c2      	mov	sl, r8
 800a6b0:	4622      	mov	r2, r4
 800a6b2:	e7ee      	b.n	800a692 <D64_1CH_HTONS_VOL_HP+0x172>
 800a6b4:	20000000 	.word	0x20000000
 800a6b8:	001c0015 	.word	0x001c0015
 800a6bc:	000f000a 	.word	0x000f000a
 800a6c0:	00060003 	.word	0x00060003
 800a6c4:	0024002a 	.word	0x0024002a
 800a6c8:	002e0030 	.word	0x002e0030
 800a6cc:	00030006 	.word	0x00030006
 800a6d0:	000a000f 	.word	0x000a000f
 800a6d4:	0015001c 	.word	0x0015001c

0800a6d8 <D80_1CH_HTONS_VOL_HP>:
 800a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6dc:	4613      	mov	r3, r2
 800a6de:	b089      	sub	sp, #36	; 0x24
 800a6e0:	4686      	mov	lr, r0
 800a6e2:	6918      	ldr	r0, [r3, #16]
 800a6e4:	9000      	str	r0, [sp, #0]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	461c      	mov	r4, r3
 800a6ea:	695b      	ldr	r3, [r3, #20]
 800a6ec:	9302      	str	r3, [sp, #8]
 800a6ee:	6983      	ldr	r3, [r0, #24]
 800a6f0:	9306      	str	r3, [sp, #24]
 800a6f2:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800a6f6:	69c3      	ldr	r3, [r0, #28]
 800a6f8:	68c0      	ldr	r0, [r0, #12]
 800a6fa:	9207      	str	r2, [sp, #28]
 800a6fc:	9001      	str	r0, [sp, #4]
 800a6fe:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a700:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a702:	9003      	str	r0, [sp, #12]
 800a704:	6a20      	ldr	r0, [r4, #32]
 800a706:	9004      	str	r0, [sp, #16]
 800a708:	2a00      	cmp	r2, #0
 800a70a:	f000 80d2 	beq.w	800a8b2 <D80_1CH_HTONS_VOL_HP+0x1da>
 800a70e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a712:	4869      	ldr	r0, [pc, #420]	; (800a8b8 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800a714:	9205      	str	r2, [sp, #20]
 800a716:	461c      	mov	r4, r3
 800a718:	f8de 5000 	ldr.w	r5, [lr]
 800a71c:	f8de 2004 	ldr.w	r2, [lr, #4]
 800a720:	f8de 3008 	ldr.w	r3, [lr, #8]
 800a724:	f10e 0e0a 	add.w	lr, lr, #10
 800a728:	ba6d      	rev16	r5, r5
 800a72a:	ba52      	rev16	r2, r2
 800a72c:	fa93 fb93 	rev16.w	fp, r3
 800a730:	b2ee      	uxtb	r6, r5
 800a732:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800a736:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800a73a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a73e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800a742:	eb04 0a07 	add.w	sl, r4, r7
 800a746:	0e2d      	lsrs	r5, r5, #24
 800a748:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800a74c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800a750:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800a754:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800a758:	b2d5      	uxtb	r5, r2
 800a75a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800a75e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800a762:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800a766:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a76a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800a76e:	0e12      	lsrs	r2, r2, #24
 800a770:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800a774:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800a778:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a77c:	fa5f f48b 	uxtb.w	r4, fp
 800a780:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800a784:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800a788:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800a78c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800a790:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800a794:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a798:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800a79c:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800a7a0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a7a4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a7a8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a7ac:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a7b0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a7b4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a7b8:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800a7bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7c0:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800a7c4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a7c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a7cc:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800a7d0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800a7d4:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800a7d8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800a7dc:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800a7e0:	4d36      	ldr	r5, [pc, #216]	; (800a8bc <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800a7e2:	9f01      	ldr	r7, [sp, #4]
 800a7e4:	fb23 7505 	smlad	r5, r3, r5, r7
 800a7e8:	4f35      	ldr	r7, [pc, #212]	; (800a8c0 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800a7ea:	fb29 5507 	smlad	r5, r9, r7, r5
 800a7ee:	4f35      	ldr	r7, [pc, #212]	; (800a8c4 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800a7f0:	fb28 5507 	smlad	r5, r8, r7, r5
 800a7f4:	4f34      	ldr	r7, [pc, #208]	; (800a8c8 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800a7f6:	fb22 5507 	smlad	r5, r2, r7, r5
 800a7fa:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a7fe:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800a802:	4d32      	ldr	r5, [pc, #200]	; (800a8cc <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800a804:	fb23 cc05 	smlad	ip, r3, r5, ip
 800a808:	4d31      	ldr	r5, [pc, #196]	; (800a8d0 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800a80a:	fb29 cc05 	smlad	ip, r9, r5, ip
 800a80e:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800a812:	fb28 c505 	smlad	r5, r8, r5, ip
 800a816:	4f2f      	ldr	r7, [pc, #188]	; (800a8d4 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800a818:	fb22 5507 	smlad	r5, r2, r7, r5
 800a81c:	4f2e      	ldr	r7, [pc, #184]	; (800a8d8 <D80_1CH_HTONS_VOL_HP+0x200>)
 800a81e:	fb26 5507 	smlad	r5, r6, r7, r5
 800a822:	f04f 0a01 	mov.w	sl, #1
 800a826:	9501      	str	r5, [sp, #4]
 800a828:	fb23 fa0a 	smuad	sl, r3, sl
 800a82c:	4b2b      	ldr	r3, [pc, #172]	; (800a8dc <D80_1CH_HTONS_VOL_HP+0x204>)
 800a82e:	fb29 a903 	smlad	r9, r9, r3, sl
 800a832:	4d2b      	ldr	r5, [pc, #172]	; (800a8e0 <D80_1CH_HTONS_VOL_HP+0x208>)
 800a834:	fb28 9805 	smlad	r8, r8, r5, r9
 800a838:	4d2a      	ldr	r5, [pc, #168]	; (800a8e4 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800a83a:	fb22 8205 	smlad	r2, r2, r5, r8
 800a83e:	4b2a      	ldr	r3, [pc, #168]	; (800a8e8 <D80_1CH_HTONS_VOL_HP+0x210>)
 800a840:	fb26 2c03 	smlad	ip, r6, r3, r2
 800a844:	9b00      	ldr	r3, [sp, #0]
 800a846:	9d04      	ldr	r5, [sp, #16]
 800a848:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800a84c:	4453      	add	r3, sl
 800a84e:	461a      	mov	r2, r3
 800a850:	9b02      	ldr	r3, [sp, #8]
 800a852:	f8cd a008 	str.w	sl, [sp, #8]
 800a856:	1ad2      	subs	r2, r2, r3
 800a858:	17d7      	asrs	r7, r2, #31
 800a85a:	fba2 2305 	umull	r2, r3, r2, r5
 800a85e:	fb05 3307 	mla	r3, r5, r7, r3
 800a862:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a866:	f143 0300 	adc.w	r3, r3, #0
 800a86a:	9d03      	ldr	r5, [sp, #12]
 800a86c:	029a      	lsls	r2, r3, #10
 800a86e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a872:	2700      	movs	r7, #0
 800a874:	005b      	lsls	r3, r3, #1
 800a876:	fbc5 6702 	smlal	r6, r7, r5, r2
 800a87a:	10ba      	asrs	r2, r7, #2
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	f302 020f 	ssat	r2, #16, r2
 800a882:	9b05      	ldr	r3, [sp, #20]
 800a884:	f821 2b02 	strh.w	r2, [r1], #2
 800a888:	4299      	cmp	r1, r3
 800a88a:	f47f af45 	bne.w	800a718 <D80_1CH_HTONS_VOL_HP+0x40>
 800a88e:	4623      	mov	r3, r4
 800a890:	9907      	ldr	r1, [sp, #28]
 800a892:	9801      	ldr	r0, [sp, #4]
 800a894:	60c8      	str	r0, [r1, #12]
 800a896:	9a00      	ldr	r2, [sp, #0]
 800a898:	f8c1 c008 	str.w	ip, [r1, #8]
 800a89c:	4608      	mov	r0, r1
 800a89e:	61cb      	str	r3, [r1, #28]
 800a8a0:	610a      	str	r2, [r1, #16]
 800a8a2:	f8c1 a014 	str.w	sl, [r1, #20]
 800a8a6:	9906      	ldr	r1, [sp, #24]
 800a8a8:	6181      	str	r1, [r0, #24]
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	b009      	add	sp, #36	; 0x24
 800a8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b2:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a8b6:	e7eb      	b.n	800a890 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800a8b8:	20000000 	.word	0x20000000
 800a8bc:	002d0024 	.word	0x002d0024
 800a8c0:	001c0015 	.word	0x001c0015
 800a8c4:	000f000a 	.word	0x000f000a
 800a8c8:	00060003 	.word	0x00060003
 800a8cc:	0037003f 	.word	0x0037003f
 800a8d0:	00450049 	.word	0x00450049
 800a8d4:	00490045 	.word	0x00490045
 800a8d8:	003f0037 	.word	0x003f0037
 800a8dc:	00030006 	.word	0x00030006
 800a8e0:	000a000f 	.word	0x000a000f
 800a8e4:	0015001c 	.word	0x0015001c
 800a8e8:	0024002d 	.word	0x0024002d

0800a8ec <D128_1CH_HTONS_VOL_HP>:
 800a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f0:	b093      	sub	sp, #76	; 0x4c
 800a8f2:	4614      	mov	r4, r2
 800a8f4:	9211      	str	r2, [sp, #68]	; 0x44
 800a8f6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a8f8:	6912      	ldr	r2, [r2, #16]
 800a8fa:	9203      	str	r2, [sp, #12]
 800a8fc:	4622      	mov	r2, r4
 800a8fe:	4615      	mov	r5, r2
 800a900:	6964      	ldr	r4, [r4, #20]
 800a902:	9406      	str	r4, [sp, #24]
 800a904:	4614      	mov	r4, r2
 800a906:	6992      	ldr	r2, [r2, #24]
 800a908:	9210      	str	r2, [sp, #64]	; 0x40
 800a90a:	68ea      	ldr	r2, [r5, #12]
 800a90c:	9204      	str	r2, [sp, #16]
 800a90e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800a910:	69e6      	ldr	r6, [r4, #28]
 800a912:	920d      	str	r2, [sp, #52]	; 0x34
 800a914:	68a4      	ldr	r4, [r4, #8]
 800a916:	6a2a      	ldr	r2, [r5, #32]
 800a918:	9405      	str	r4, [sp, #20]
 800a91a:	920e      	str	r2, [sp, #56]	; 0x38
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 8145 	beq.w	800abac <D128_1CH_HTONS_VOL_HP+0x2c0>
 800a922:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a926:	930f      	str	r3, [sp, #60]	; 0x3c
 800a928:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800ac08 <D128_1CH_HTONS_VOL_HP+0x31c>
 800a92c:	9107      	str	r1, [sp, #28]
 800a92e:	f100 0310 	add.w	r3, r0, #16
 800a932:	4699      	mov	r9, r3
 800a934:	f1a9 0110 	sub.w	r1, r9, #16
 800a938:	c90e      	ldmia	r1, {r1, r2, r3}
 800a93a:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800a93e:	ba49      	rev16	r1, r1
 800a940:	ba52      	rev16	r2, r2
 800a942:	ba5b      	rev16	r3, r3
 800a944:	fa90 fa90 	rev16.w	sl, r0
 800a948:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800a94c:	b2cc      	uxtb	r4, r1
 800a94e:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800a952:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800a956:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800a95a:	0e09      	lsrs	r1, r1, #24
 800a95c:	4426      	add	r6, r4
 800a95e:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800a962:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800a966:	b2d0      	uxtb	r0, r2
 800a968:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800a96c:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800a970:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a974:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800a978:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800a97c:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800a980:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800a984:	0e12      	lsrs	r2, r2, #24
 800a986:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800a98a:	9701      	str	r7, [sp, #4]
 800a98c:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800a990:	4627      	mov	r7, r4
 800a992:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800a996:	9702      	str	r7, [sp, #8]
 800a998:	b2da      	uxtb	r2, r3
 800a99a:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800a99e:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800a9a2:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800a9a6:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800a9aa:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800a9ae:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a9b2:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800a9b6:	0e1b      	lsrs	r3, r3, #24
 800a9b8:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800a9bc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800a9c0:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800a9c4:	fa5f f38a 	uxtb.w	r3, sl
 800a9c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a9cc:	960a      	str	r6, [sp, #40]	; 0x28
 800a9ce:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800a9d2:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800a9d6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a9da:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800a9de:	950b      	str	r5, [sp, #44]	; 0x2c
 800a9e0:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800a9e4:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800a9e8:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800a9ec:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800a9f0:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800a9f4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800a9f8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800a9fc:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800aa00:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800aa04:	9308      	str	r3, [sp, #32]
 800aa06:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800aa0a:	9b01      	ldr	r3, [sp, #4]
 800aa0c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800aa10:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800aa14:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800aa18:	9b02      	ldr	r3, [sp, #8]
 800aa1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa1e:	9302      	str	r3, [sp, #8]
 800aa20:	9b08      	ldr	r3, [sp, #32]
 800aa22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa26:	9308      	str	r3, [sp, #32]
 800aa28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa2a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800aa2e:	950c      	str	r5, [sp, #48]	; 0x30
 800aa30:	461d      	mov	r5, r3
 800aa32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa34:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800aa38:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800aa3c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800aa40:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800aa44:	9301      	str	r3, [sp, #4]
 800aa46:	9b02      	ldr	r3, [sp, #8]
 800aa48:	9202      	str	r2, [sp, #8]
 800aa4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa4e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800aa52:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800aa56:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800aa5a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800aa5e:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800aa62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800aa66:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800aa6a:	9b08      	ldr	r3, [sp, #32]
 800aa6c:	9f01      	ldr	r7, [sp, #4]
 800aa6e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800aa72:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800aa76:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800aa7a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800aa7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800aa82:	46be      	mov	lr, r7
 800aa84:	0a96      	lsrs	r6, r2, #10
 800aa86:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800aa8a:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800aa8e:	4f49      	ldr	r7, [pc, #292]	; (800abb4 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800aa90:	9a04      	ldr	r2, [sp, #16]
 800aa92:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800aa96:	4a48      	ldr	r2, [pc, #288]	; (800abb8 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800aa98:	fb2a ee02 	smlad	lr, sl, r2, lr
 800aa9c:	4a47      	ldr	r2, [pc, #284]	; (800abbc <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800aa9e:	fb21 ee02 	smlad	lr, r1, r2, lr
 800aaa2:	4a47      	ldr	r2, [pc, #284]	; (800abc0 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800aaa4:	fb24 ee02 	smlad	lr, r4, r2, lr
 800aaa8:	4a46      	ldr	r2, [pc, #280]	; (800abc4 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800aaaa:	9f02      	ldr	r7, [sp, #8]
 800aaac:	fb27 ee02 	smlad	lr, r7, r2, lr
 800aab0:	4a45      	ldr	r2, [pc, #276]	; (800abc8 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800aab2:	fb20 ee02 	smlad	lr, r0, r2, lr
 800aab6:	4a45      	ldr	r2, [pc, #276]	; (800abcc <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800aab8:	fb23 e702 	smlad	r7, r3, r2, lr
 800aabc:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800aac0:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800aac4:	9f01      	ldr	r7, [sp, #4]
 800aac6:	4a42      	ldr	r2, [pc, #264]	; (800abd0 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800aac8:	46bc      	mov	ip, r7
 800aaca:	9f05      	ldr	r7, [sp, #20]
 800aacc:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800aad0:	4a40      	ldr	r2, [pc, #256]	; (800abd4 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800aad2:	fb2a cc02 	smlad	ip, sl, r2, ip
 800aad6:	4f40      	ldr	r7, [pc, #256]	; (800abd8 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800aad8:	fb21 cc07 	smlad	ip, r1, r7, ip
 800aadc:	4f3f      	ldr	r7, [pc, #252]	; (800abdc <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800aade:	fb24 cc07 	smlad	ip, r4, r7, ip
 800aae2:	4f3f      	ldr	r7, [pc, #252]	; (800abe0 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800aae4:	9a02      	ldr	r2, [sp, #8]
 800aae6:	fb22 cc07 	smlad	ip, r2, r7, ip
 800aaea:	4f3e      	ldr	r7, [pc, #248]	; (800abe4 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800aaec:	fb20 cc07 	smlad	ip, r0, r7, ip
 800aaf0:	4f3d      	ldr	r7, [pc, #244]	; (800abe8 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800aaf2:	fb23 c707 	smlad	r7, r3, r7, ip
 800aaf6:	f8df c114 	ldr.w	ip, [pc, #276]	; 800ac0c <D128_1CH_HTONS_VOL_HP+0x320>
 800aafa:	fb25 720c 	smlad	r2, r5, ip, r7
 800aafe:	f04f 0b01 	mov.w	fp, #1
 800ab02:	9204      	str	r2, [sp, #16]
 800ab04:	9f01      	ldr	r7, [sp, #4]
 800ab06:	fb27 fb0b 	smuad	fp, r7, fp
 800ab0a:	4f38      	ldr	r7, [pc, #224]	; (800abec <D128_1CH_HTONS_VOL_HP+0x300>)
 800ab0c:	fb2a ba07 	smlad	sl, sl, r7, fp
 800ab10:	4f37      	ldr	r7, [pc, #220]	; (800abf0 <D128_1CH_HTONS_VOL_HP+0x304>)
 800ab12:	fb21 aa07 	smlad	sl, r1, r7, sl
 800ab16:	4f37      	ldr	r7, [pc, #220]	; (800abf4 <D128_1CH_HTONS_VOL_HP+0x308>)
 800ab18:	fb24 aa07 	smlad	sl, r4, r7, sl
 800ab1c:	4f36      	ldr	r7, [pc, #216]	; (800abf8 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800ab1e:	9a02      	ldr	r2, [sp, #8]
 800ab20:	fb22 a707 	smlad	r7, r2, r7, sl
 800ab24:	4a35      	ldr	r2, [pc, #212]	; (800abfc <D128_1CH_HTONS_VOL_HP+0x310>)
 800ab26:	fb20 7702 	smlad	r7, r0, r2, r7
 800ab2a:	4a35      	ldr	r2, [pc, #212]	; (800ac00 <D128_1CH_HTONS_VOL_HP+0x314>)
 800ab2c:	fb23 7702 	smlad	r7, r3, r2, r7
 800ab30:	4b34      	ldr	r3, [pc, #208]	; (800ac04 <D128_1CH_HTONS_VOL_HP+0x318>)
 800ab32:	fb25 7303 	smlad	r3, r5, r3, r7
 800ab36:	9305      	str	r3, [sp, #20]
 800ab38:	9b03      	ldr	r3, [sp, #12]
 800ab3a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ab3c:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800ab40:	4473      	add	r3, lr
 800ab42:	461a      	mov	r2, r3
 800ab44:	9b06      	ldr	r3, [sp, #24]
 800ab46:	f8cd e018 	str.w	lr, [sp, #24]
 800ab4a:	1ad2      	subs	r2, r2, r3
 800ab4c:	17d1      	asrs	r1, r2, #31
 800ab4e:	fba2 2304 	umull	r2, r3, r2, r4
 800ab52:	fb04 3301 	mla	r3, r4, r1, r3
 800ab56:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800ab5a:	f143 0300 	adc.w	r3, r3, #0
 800ab5e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ab60:	021a      	lsls	r2, r3, #8
 800ab62:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ab66:	2100      	movs	r1, #0
 800ab68:	fbc4 0102 	smlal	r0, r1, r4, r2
 800ab6c:	108a      	asrs	r2, r1, #2
 800ab6e:	9907      	ldr	r1, [sp, #28]
 800ab70:	f302 020f 	ssat	r2, #16, r2
 800ab74:	005b      	lsls	r3, r3, #1
 800ab76:	f821 2b02 	strh.w	r2, [r1], #2
 800ab7a:	9303      	str	r3, [sp, #12]
 800ab7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab7e:	9107      	str	r1, [sp, #28]
 800ab80:	4299      	cmp	r1, r3
 800ab82:	f109 0910 	add.w	r9, r9, #16
 800ab86:	f47f aed5 	bne.w	800a934 <D128_1CH_HTONS_VOL_HP+0x48>
 800ab8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ab8c:	9905      	ldr	r1, [sp, #20]
 800ab8e:	6091      	str	r1, [r2, #8]
 800ab90:	9904      	ldr	r1, [sp, #16]
 800ab92:	60d1      	str	r1, [r2, #12]
 800ab94:	4613      	mov	r3, r2
 800ab96:	61d6      	str	r6, [r2, #28]
 800ab98:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ab9a:	9a03      	ldr	r2, [sp, #12]
 800ab9c:	611a      	str	r2, [r3, #16]
 800ab9e:	2000      	movs	r0, #0
 800aba0:	f8c3 e014 	str.w	lr, [r3, #20]
 800aba4:	6199      	str	r1, [r3, #24]
 800aba6:	b013      	add	sp, #76	; 0x4c
 800aba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abac:	f8dd e018 	ldr.w	lr, [sp, #24]
 800abb0:	e7eb      	b.n	800ab8a <D128_1CH_HTONS_VOL_HP+0x29e>
 800abb2:	bf00      	nop
 800abb4:	00780069 	.word	0x00780069
 800abb8:	005b004e 	.word	0x005b004e
 800abbc:	00420037 	.word	0x00420037
 800abc0:	002d0024 	.word	0x002d0024
 800abc4:	001c0015 	.word	0x001c0015
 800abc8:	000f000a 	.word	0x000f000a
 800abcc:	00060003 	.word	0x00060003
 800abd0:	00880096 	.word	0x00880096
 800abd4:	00a200ac 	.word	0x00a200ac
 800abd8:	00b400ba 	.word	0x00b400ba
 800abdc:	00be00c0 	.word	0x00be00c0
 800abe0:	00c000be 	.word	0x00c000be
 800abe4:	00ba00b4 	.word	0x00ba00b4
 800abe8:	00ac00a2 	.word	0x00ac00a2
 800abec:	00030006 	.word	0x00030006
 800abf0:	000a000f 	.word	0x000a000f
 800abf4:	0015001c 	.word	0x0015001c
 800abf8:	0024002d 	.word	0x0024002d
 800abfc:	00370042 	.word	0x00370042
 800ac00:	004e005b 	.word	0x004e005b
 800ac04:	00690078 	.word	0x00690078
 800ac08:	20000000 	.word	0x20000000
 800ac0c:	00960088 	.word	0x00960088

0800ac10 <PDM_Filter_Init>:
 800ac10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac12:	2240      	movs	r2, #64	; 0x40
 800ac14:	4604      	mov	r4, r0
 800ac16:	2100      	movs	r1, #0
 800ac18:	300c      	adds	r0, #12
 800ac1a:	f000 f9f8 	bl	800b00e <memset>
 800ac1e:	493b      	ldr	r1, [pc, #236]	; (800ad0c <PDM_Filter_Init+0xfc>)
 800ac20:	483b      	ldr	r0, [pc, #236]	; (800ad10 <PDM_Filter_Init+0x100>)
 800ac22:	f000 f971 	bl	800af08 <CRC_Lock>
 800ac26:	8822      	ldrh	r2, [r4, #0]
 800ac28:	8963      	ldrh	r3, [r4, #10]
 800ac2a:	4938      	ldr	r1, [pc, #224]	; (800ad0c <PDM_Filter_Init+0xfc>)
 800ac2c:	8925      	ldrh	r5, [r4, #8]
 800ac2e:	86a3      	strh	r3, [r4, #52]	; 0x34
 800ac30:	2801      	cmp	r0, #1
 800ac32:	f04f 0300 	mov.w	r3, #0
 800ac36:	bf18      	it	ne
 800ac38:	2100      	movne	r1, #0
 800ac3a:	2a01      	cmp	r2, #1
 800ac3c:	6461      	str	r1, [r4, #68]	; 0x44
 800ac3e:	86e5      	strh	r5, [r4, #54]	; 0x36
 800ac40:	61a3      	str	r3, [r4, #24]
 800ac42:	6123      	str	r3, [r4, #16]
 800ac44:	6163      	str	r3, [r4, #20]
 800ac46:	60e3      	str	r3, [r4, #12]
 800ac48:	6263      	str	r3, [r4, #36]	; 0x24
 800ac4a:	61e3      	str	r3, [r4, #28]
 800ac4c:	6223      	str	r3, [r4, #32]
 800ac4e:	6423      	str	r3, [r4, #64]	; 0x40
 800ac50:	d918      	bls.n	800ac84 <PDM_Filter_Init+0x74>
 800ac52:	2003      	movs	r0, #3
 800ac54:	2302      	movs	r3, #2
 800ac56:	8862      	ldrh	r2, [r4, #2]
 800ac58:	2a01      	cmp	r2, #1
 800ac5a:	d91d      	bls.n	800ac98 <PDM_Filter_Init+0x88>
 800ac5c:	2140      	movs	r1, #64	; 0x40
 800ac5e:	2300      	movs	r3, #0
 800ac60:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ac62:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800ac66:	6862      	ldr	r2, [r4, #4]
 800ac68:	bf04      	itt	eq
 800ac6a:	6421      	streq	r1, [r4, #64]	; 0x40
 800ac6c:	460b      	moveq	r3, r1
 800ac6e:	b11a      	cbz	r2, 800ac78 <PDM_Filter_Init+0x68>
 800ac70:	f043 0310 	orr.w	r3, r3, #16
 800ac74:	6423      	str	r3, [r4, #64]	; 0x40
 800ac76:	62e2      	str	r2, [r4, #44]	; 0x2c
 800ac78:	2200      	movs	r2, #0
 800ac7a:	8722      	strh	r2, [r4, #56]	; 0x38
 800ac7c:	b908      	cbnz	r0, 800ac82 <PDM_Filter_Init+0x72>
 800ac7e:	3380      	adds	r3, #128	; 0x80
 800ac80:	6423      	str	r3, [r4, #64]	; 0x40
 800ac82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac84:	4d23      	ldr	r5, [pc, #140]	; (800ad14 <PDM_Filter_Init+0x104>)
 800ac86:	d010      	beq.n	800acaa <PDM_Filter_Init+0x9a>
 800ac88:	782a      	ldrb	r2, [r5, #0]
 800ac8a:	2a01      	cmp	r2, #1
 800ac8c:	d027      	beq.n	800acde <PDM_Filter_Init+0xce>
 800ac8e:	8862      	ldrh	r2, [r4, #2]
 800ac90:	2a01      	cmp	r2, #1
 800ac92:	f04f 0001 	mov.w	r0, #1
 800ac96:	d8e1      	bhi.n	800ac5c <PDM_Filter_Init+0x4c>
 800ac98:	d001      	beq.n	800ac9e <PDM_Filter_Init+0x8e>
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	e7de      	b.n	800ac5c <PDM_Filter_Init+0x4c>
 800ac9e:	2220      	movs	r2, #32
 800aca0:	4618      	mov	r0, r3
 800aca2:	6422      	str	r2, [r4, #64]	; 0x40
 800aca4:	4613      	mov	r3, r2
 800aca6:	2160      	movs	r1, #96	; 0x60
 800aca8:	e7da      	b.n	800ac60 <PDM_Filter_Init+0x50>
 800acaa:	7829      	ldrb	r1, [r5, #0]
 800acac:	2900      	cmp	r1, #0
 800acae:	d1ee      	bne.n	800ac8e <PDM_Filter_Init+0x7e>
 800acb0:	4919      	ldr	r1, [pc, #100]	; (800ad18 <PDM_Filter_Init+0x108>)
 800acb2:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800ad20 <PDM_Filter_Init+0x110>
 800acb6:	4f19      	ldr	r7, [pc, #100]	; (800ad1c <PDM_Filter_Init+0x10c>)
 800acb8:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800acbc:	684a      	ldr	r2, [r1, #4]
 800acbe:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800acc2:	ea02 0007 	and.w	r0, r2, r7
 800acc6:	4303      	orrs	r3, r0
 800acc8:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800accc:	4413      	add	r3, r2
 800acce:	f841 3f04 	str.w	r3, [r1, #4]!
 800acd2:	428e      	cmp	r6, r1
 800acd4:	d1f2      	bne.n	800acbc <PDM_Filter_Init+0xac>
 800acd6:	2001      	movs	r0, #1
 800acd8:	7028      	strb	r0, [r5, #0]
 800acda:	2300      	movs	r3, #0
 800acdc:	e7bb      	b.n	800ac56 <PDM_Filter_Init+0x46>
 800acde:	490e      	ldr	r1, [pc, #56]	; (800ad18 <PDM_Filter_Init+0x108>)
 800ace0:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800ad20 <PDM_Filter_Init+0x110>
 800ace4:	4f0d      	ldr	r7, [pc, #52]	; (800ad1c <PDM_Filter_Init+0x10c>)
 800ace6:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800acea:	684a      	ldr	r2, [r1, #4]
 800acec:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800acf0:	ea02 0007 	and.w	r0, r2, r7
 800acf4:	4303      	orrs	r3, r0
 800acf6:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800acfa:	4413      	add	r3, r2
 800acfc:	f841 3f04 	str.w	r3, [r1, #4]!
 800ad00:	428e      	cmp	r6, r1
 800ad02:	d1f2      	bne.n	800acea <PDM_Filter_Init+0xda>
 800ad04:	2300      	movs	r3, #0
 800ad06:	702b      	strb	r3, [r5, #0]
 800ad08:	e7c1      	b.n	800ac8e <PDM_Filter_Init+0x7e>
 800ad0a:	bf00      	nop
 800ad0c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ad10:	f407a5c2 	.word	0xf407a5c2
 800ad14:	2000077c 	.word	0x2000077c
 800ad18:	1ffffffc 	.word	0x1ffffffc
 800ad1c:	000ffc00 	.word	0x000ffc00
 800ad20:	3ff00000 	.word	0x3ff00000

0800ad24 <PDM_Filter_setConfig>:
 800ad24:	4b66      	ldr	r3, [pc, #408]	; (800aec0 <PDM_Filter_setConfig+0x19c>)
 800ad26:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d001      	beq.n	800ad30 <PDM_Filter_setConfig+0xc>
 800ad2c:	2004      	movs	r0, #4
 800ad2e:	4770      	bx	lr
 800ad30:	b530      	push	{r4, r5, lr}
 800ad32:	880a      	ldrh	r2, [r1, #0]
 800ad34:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ad36:	ed2d 8b04 	vpush	{d8-d9}
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	460d      	mov	r5, r1
 800ad3e:	1e51      	subs	r1, r2, #1
 800ad40:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800ad44:	2906      	cmp	r1, #6
 800ad46:	b083      	sub	sp, #12
 800ad48:	6420      	str	r0, [r4, #64]	; 0x40
 800ad4a:	d91a      	bls.n	800ad82 <PDM_Filter_setConfig+0x5e>
 800ad4c:	2008      	movs	r0, #8
 800ad4e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800ad52:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ad56:	4299      	cmp	r1, r3
 800ad58:	d07e      	beq.n	800ae58 <PDM_Filter_setConfig+0x134>
 800ad5a:	f113 0f0c 	cmn.w	r3, #12
 800ad5e:	da2a      	bge.n	800adb6 <PDM_Filter_setConfig+0x92>
 800ad60:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800ad64:	3040      	adds	r0, #64	; 0x40
 800ad66:	80ab      	strh	r3, [r5, #4]
 800ad68:	8622      	strh	r2, [r4, #48]	; 0x30
 800ad6a:	886b      	ldrh	r3, [r5, #2]
 800ad6c:	8663      	strh	r3, [r4, #50]	; 0x32
 800ad6e:	b920      	cbnz	r0, 800ad7a <PDM_Filter_setConfig+0x56>
 800ad70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad76:	6423      	str	r3, [r4, #64]	; 0x40
 800ad78:	2000      	movs	r0, #0
 800ad7a:	b003      	add	sp, #12
 800ad7c:	ecbd 8b04 	vpop	{d8-d9}
 800ad80:	bd30      	pop	{r4, r5, pc}
 800ad82:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800ad84:	4291      	cmp	r1, r2
 800ad86:	d06c      	beq.n	800ae62 <PDM_Filter_setConfig+0x13e>
 800ad88:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800ad8c:	f023 0301 	bic.w	r3, r3, #1
 800ad90:	4313      	orrs	r3, r2
 800ad92:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800ad96:	6423      	str	r3, [r4, #64]	; 0x40
 800ad98:	2970      	cmp	r1, #112	; 0x70
 800ad9a:	f003 030f 	and.w	r3, r3, #15
 800ad9e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ada2:	d066      	beq.n	800ae72 <PDM_Filter_setConfig+0x14e>
 800ada4:	2b06      	cmp	r3, #6
 800ada6:	f200 8089 	bhi.w	800aebc <PDM_Filter_setConfig+0x198>
 800adaa:	e8df f003 	tbb	[pc, r3]
 800adae:	4f52      	.short	0x4f52
 800adb0:	3d43494c 	.word	0x3d43494c
 800adb4:	46          	.byte	0x46
 800adb5:	00          	.byte	0x00
 800adb6:	2b33      	cmp	r3, #51	; 0x33
 800adb8:	dc32      	bgt.n	800ae20 <PDM_Filter_setConfig+0xfc>
 800adba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800adbc:	f002 020f 	and.w	r2, r2, #15
 800adc0:	3a01      	subs	r2, #1
 800adc2:	2a06      	cmp	r2, #6
 800adc4:	d872      	bhi.n	800aeac <PDM_Filter_setConfig+0x188>
 800adc6:	493f      	ldr	r1, [pc, #252]	; (800aec4 <PDM_Filter_setConfig+0x1a0>)
 800adc8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800adcc:	ed92 9a00 	vldr	s18, [r2]
 800add0:	ed92 8a07 	vldr	s16, [r2, #28]
 800add4:	9001      	str	r0, [sp, #4]
 800add6:	ee07 3a90 	vmov	s15, r3
 800adda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adde:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800ade2:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800ade6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800adea:	f001 fa43 	bl	800c274 <powf>
 800adee:	eddf 0a36 	vldr	s1, [pc, #216]	; 800aec8 <PDM_Filter_setConfig+0x1a4>
 800adf2:	eef0 8a40 	vmov.f32	s17, s0
 800adf6:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800adfa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800adfe:	f001 fa39 	bl	800c274 <powf>
 800ae02:	ee28 8a28 	vmul.f32	s16, s16, s17
 800ae06:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ae0a:	f001 fa0d 	bl	800c228 <roundf>
 800ae0e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800ae12:	88ab      	ldrh	r3, [r5, #4]
 800ae14:	882a      	ldrh	r2, [r5, #0]
 800ae16:	9801      	ldr	r0, [sp, #4]
 800ae18:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800ae1c:	8723      	strh	r3, [r4, #56]	; 0x38
 800ae1e:	e7a3      	b.n	800ad68 <PDM_Filter_setConfig+0x44>
 800ae20:	2333      	movs	r3, #51	; 0x33
 800ae22:	3040      	adds	r0, #64	; 0x40
 800ae24:	80ab      	strh	r3, [r5, #4]
 800ae26:	e79f      	b.n	800ad68 <PDM_Filter_setConfig+0x44>
 800ae28:	4b28      	ldr	r3, [pc, #160]	; (800aecc <PDM_Filter_setConfig+0x1a8>)
 800ae2a:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae2c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ae30:	2000      	movs	r0, #0
 800ae32:	e792      	b.n	800ad5a <PDM_Filter_setConfig+0x36>
 800ae34:	4b26      	ldr	r3, [pc, #152]	; (800aed0 <PDM_Filter_setConfig+0x1ac>)
 800ae36:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae38:	e7f8      	b.n	800ae2c <PDM_Filter_setConfig+0x108>
 800ae3a:	4b26      	ldr	r3, [pc, #152]	; (800aed4 <PDM_Filter_setConfig+0x1b0>)
 800ae3c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae3e:	e7f5      	b.n	800ae2c <PDM_Filter_setConfig+0x108>
 800ae40:	4b25      	ldr	r3, [pc, #148]	; (800aed8 <PDM_Filter_setConfig+0x1b4>)
 800ae42:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae44:	e7f2      	b.n	800ae2c <PDM_Filter_setConfig+0x108>
 800ae46:	4b25      	ldr	r3, [pc, #148]	; (800aedc <PDM_Filter_setConfig+0x1b8>)
 800ae48:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae4a:	e7ef      	b.n	800ae2c <PDM_Filter_setConfig+0x108>
 800ae4c:	4b24      	ldr	r3, [pc, #144]	; (800aee0 <PDM_Filter_setConfig+0x1bc>)
 800ae4e:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae50:	e7ec      	b.n	800ae2c <PDM_Filter_setConfig+0x108>
 800ae52:	4b24      	ldr	r3, [pc, #144]	; (800aee4 <PDM_Filter_setConfig+0x1c0>)
 800ae54:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae56:	e7e9      	b.n	800ae2c <PDM_Filter_setConfig+0x108>
 800ae58:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800ae5a:	4291      	cmp	r1, r2
 800ae5c:	f47f af7d 	bne.w	800ad5a <PDM_Filter_setConfig+0x36>
 800ae60:	e783      	b.n	800ad6a <PDM_Filter_setConfig+0x46>
 800ae62:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ae66:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800ae6a:	4299      	cmp	r1, r3
 800ae6c:	d023      	beq.n	800aeb6 <PDM_Filter_setConfig+0x192>
 800ae6e:	2000      	movs	r0, #0
 800ae70:	e773      	b.n	800ad5a <PDM_Filter_setConfig+0x36>
 800ae72:	2b06      	cmp	r3, #6
 800ae74:	d822      	bhi.n	800aebc <PDM_Filter_setConfig+0x198>
 800ae76:	e8df f003 	tbb	[pc, r3]
 800ae7a:	1316      	.short	0x1316
 800ae7c:	070a0d10 	.word	0x070a0d10
 800ae80:	04          	.byte	0x04
 800ae81:	00          	.byte	0x00
 800ae82:	4b19      	ldr	r3, [pc, #100]	; (800aee8 <PDM_Filter_setConfig+0x1c4>)
 800ae84:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae86:	e7d1      	b.n	800ae2c <PDM_Filter_setConfig+0x108>
 800ae88:	4b18      	ldr	r3, [pc, #96]	; (800aeec <PDM_Filter_setConfig+0x1c8>)
 800ae8a:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae8c:	e7ce      	b.n	800ae2c <PDM_Filter_setConfig+0x108>
 800ae8e:	4b18      	ldr	r3, [pc, #96]	; (800aef0 <PDM_Filter_setConfig+0x1cc>)
 800ae90:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae92:	e7cb      	b.n	800ae2c <PDM_Filter_setConfig+0x108>
 800ae94:	4b17      	ldr	r3, [pc, #92]	; (800aef4 <PDM_Filter_setConfig+0x1d0>)
 800ae96:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae98:	e7c8      	b.n	800ae2c <PDM_Filter_setConfig+0x108>
 800ae9a:	4b17      	ldr	r3, [pc, #92]	; (800aef8 <PDM_Filter_setConfig+0x1d4>)
 800ae9c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae9e:	e7c5      	b.n	800ae2c <PDM_Filter_setConfig+0x108>
 800aea0:	4b16      	ldr	r3, [pc, #88]	; (800aefc <PDM_Filter_setConfig+0x1d8>)
 800aea2:	64a3      	str	r3, [r4, #72]	; 0x48
 800aea4:	e7c2      	b.n	800ae2c <PDM_Filter_setConfig+0x108>
 800aea6:	4b16      	ldr	r3, [pc, #88]	; (800af00 <PDM_Filter_setConfig+0x1dc>)
 800aea8:	64a3      	str	r3, [r4, #72]	; 0x48
 800aeaa:	e7bf      	b.n	800ae2c <PDM_Filter_setConfig+0x108>
 800aeac:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800af04 <PDM_Filter_setConfig+0x1e0>
 800aeb0:	eeb0 9a48 	vmov.f32	s18, s16
 800aeb4:	e78e      	b.n	800add4 <PDM_Filter_setConfig+0xb0>
 800aeb6:	886b      	ldrh	r3, [r5, #2]
 800aeb8:	8663      	strh	r3, [r4, #50]	; 0x32
 800aeba:	e759      	b.n	800ad70 <PDM_Filter_setConfig+0x4c>
 800aebc:	2000      	movs	r0, #0
 800aebe:	e746      	b.n	800ad4e <PDM_Filter_setConfig+0x2a>
 800aec0:	b5e8b5cd 	.word	0xb5e8b5cd
 800aec4:	0800cebc 	.word	0x0800cebc
 800aec8:	42000000 	.word	0x42000000
 800aecc:	08009291 	.word	0x08009291
 800aed0:	08009171 	.word	0x08009171
 800aed4:	08009421 	.word	0x08009421
 800aed8:	08009c65 	.word	0x08009c65
 800aedc:	080099c5 	.word	0x080099c5
 800aee0:	080097a5 	.word	0x080097a5
 800aee4:	080095b9 	.word	0x080095b9
 800aee8:	0800a271 	.word	0x0800a271
 800aeec:	0800a139 	.word	0x0800a139
 800aef0:	0800a055 	.word	0x0800a055
 800aef4:	0800a8ed 	.word	0x0800a8ed
 800aef8:	0800a6d9 	.word	0x0800a6d9
 800aefc:	0800a521 	.word	0x0800a521
 800af00:	0800a3b5 	.word	0x0800a3b5
 800af04:	00000000 	.word	0x00000000

0800af08 <CRC_Lock>:
 800af08:	4a17      	ldr	r2, [pc, #92]	; (800af68 <CRC_Lock+0x60>)
 800af0a:	6813      	ldr	r3, [r2, #0]
 800af0c:	b410      	push	{r4}
 800af0e:	f023 0301 	bic.w	r3, r3, #1
 800af12:	4c16      	ldr	r4, [pc, #88]	; (800af6c <CRC_Lock+0x64>)
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	b933      	cbnz	r3, 800af28 <CRC_Lock+0x20>
 800af1a:	4b15      	ldr	r3, [pc, #84]	; (800af70 <CRC_Lock+0x68>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af22:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800af26:	d00f      	beq.n	800af48 <CRC_Lock+0x40>
 800af28:	4a12      	ldr	r2, [pc, #72]	; (800af74 <CRC_Lock+0x6c>)
 800af2a:	2301      	movs	r3, #1
 800af2c:	6013      	str	r3, [r2, #0]
 800af2e:	6813      	ldr	r3, [r2, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1fc      	bne.n	800af2e <CRC_Lock+0x26>
 800af34:	4b10      	ldr	r3, [pc, #64]	; (800af78 <CRC_Lock+0x70>)
 800af36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af3a:	6018      	str	r0, [r3, #0]
 800af3c:	6818      	ldr	r0, [r3, #0]
 800af3e:	1a08      	subs	r0, r1, r0
 800af40:	fab0 f080 	clz	r0, r0
 800af44:	0940      	lsrs	r0, r0, #5
 800af46:	4770      	bx	lr
 800af48:	4a0c      	ldr	r2, [pc, #48]	; (800af7c <CRC_Lock+0x74>)
 800af4a:	2301      	movs	r3, #1
 800af4c:	6013      	str	r3, [r2, #0]
 800af4e:	6813      	ldr	r3, [r2, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1fc      	bne.n	800af4e <CRC_Lock+0x46>
 800af54:	4b0a      	ldr	r3, [pc, #40]	; (800af80 <CRC_Lock+0x78>)
 800af56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af5a:	6018      	str	r0, [r3, #0]
 800af5c:	6818      	ldr	r0, [r3, #0]
 800af5e:	1a40      	subs	r0, r0, r1
 800af60:	fab0 f080 	clz	r0, r0
 800af64:	0940      	lsrs	r0, r0, #5
 800af66:	4770      	bx	lr
 800af68:	e0002000 	.word	0xe0002000
 800af6c:	e0042000 	.word	0xe0042000
 800af70:	5c001000 	.word	0x5c001000
 800af74:	40023008 	.word	0x40023008
 800af78:	40023000 	.word	0x40023000
 800af7c:	58024c08 	.word	0x58024c08
 800af80:	58024c00 	.word	0x58024c00

0800af84 <__errno>:
 800af84:	4b01      	ldr	r3, [pc, #4]	; (800af8c <__errno+0x8>)
 800af86:	6818      	ldr	r0, [r3, #0]
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	2000058c 	.word	0x2000058c

0800af90 <__libc_init_array>:
 800af90:	b570      	push	{r4, r5, r6, lr}
 800af92:	4e0d      	ldr	r6, [pc, #52]	; (800afc8 <__libc_init_array+0x38>)
 800af94:	4c0d      	ldr	r4, [pc, #52]	; (800afcc <__libc_init_array+0x3c>)
 800af96:	1ba4      	subs	r4, r4, r6
 800af98:	10a4      	asrs	r4, r4, #2
 800af9a:	2500      	movs	r5, #0
 800af9c:	42a5      	cmp	r5, r4
 800af9e:	d109      	bne.n	800afb4 <__libc_init_array+0x24>
 800afa0:	4e0b      	ldr	r6, [pc, #44]	; (800afd0 <__libc_init_array+0x40>)
 800afa2:	4c0c      	ldr	r4, [pc, #48]	; (800afd4 <__libc_init_array+0x44>)
 800afa4:	f001 fe6c 	bl	800cc80 <_init>
 800afa8:	1ba4      	subs	r4, r4, r6
 800afaa:	10a4      	asrs	r4, r4, #2
 800afac:	2500      	movs	r5, #0
 800afae:	42a5      	cmp	r5, r4
 800afb0:	d105      	bne.n	800afbe <__libc_init_array+0x2e>
 800afb2:	bd70      	pop	{r4, r5, r6, pc}
 800afb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800afb8:	4798      	blx	r3
 800afba:	3501      	adds	r5, #1
 800afbc:	e7ee      	b.n	800af9c <__libc_init_array+0xc>
 800afbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800afc2:	4798      	blx	r3
 800afc4:	3501      	adds	r5, #1
 800afc6:	e7f2      	b.n	800afae <__libc_init_array+0x1e>
 800afc8:	0800d100 	.word	0x0800d100
 800afcc:	0800d100 	.word	0x0800d100
 800afd0:	0800d100 	.word	0x0800d100
 800afd4:	0800d104 	.word	0x0800d104

0800afd8 <malloc>:
 800afd8:	4b02      	ldr	r3, [pc, #8]	; (800afe4 <malloc+0xc>)
 800afda:	4601      	mov	r1, r0
 800afdc:	6818      	ldr	r0, [r3, #0]
 800afde:	f000 b86d 	b.w	800b0bc <_malloc_r>
 800afe2:	bf00      	nop
 800afe4:	2000058c 	.word	0x2000058c

0800afe8 <free>:
 800afe8:	4b02      	ldr	r3, [pc, #8]	; (800aff4 <free+0xc>)
 800afea:	4601      	mov	r1, r0
 800afec:	6818      	ldr	r0, [r3, #0]
 800afee:	f000 b817 	b.w	800b020 <_free_r>
 800aff2:	bf00      	nop
 800aff4:	2000058c 	.word	0x2000058c

0800aff8 <memcpy>:
 800aff8:	b510      	push	{r4, lr}
 800affa:	1e43      	subs	r3, r0, #1
 800affc:	440a      	add	r2, r1
 800affe:	4291      	cmp	r1, r2
 800b000:	d100      	bne.n	800b004 <memcpy+0xc>
 800b002:	bd10      	pop	{r4, pc}
 800b004:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b00c:	e7f7      	b.n	800affe <memcpy+0x6>

0800b00e <memset>:
 800b00e:	4402      	add	r2, r0
 800b010:	4603      	mov	r3, r0
 800b012:	4293      	cmp	r3, r2
 800b014:	d100      	bne.n	800b018 <memset+0xa>
 800b016:	4770      	bx	lr
 800b018:	f803 1b01 	strb.w	r1, [r3], #1
 800b01c:	e7f9      	b.n	800b012 <memset+0x4>
	...

0800b020 <_free_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	4605      	mov	r5, r0
 800b024:	2900      	cmp	r1, #0
 800b026:	d045      	beq.n	800b0b4 <_free_r+0x94>
 800b028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b02c:	1f0c      	subs	r4, r1, #4
 800b02e:	2b00      	cmp	r3, #0
 800b030:	bfb8      	it	lt
 800b032:	18e4      	addlt	r4, r4, r3
 800b034:	f000 f91a 	bl	800b26c <__malloc_lock>
 800b038:	4a1f      	ldr	r2, [pc, #124]	; (800b0b8 <_free_r+0x98>)
 800b03a:	6813      	ldr	r3, [r2, #0]
 800b03c:	4610      	mov	r0, r2
 800b03e:	b933      	cbnz	r3, 800b04e <_free_r+0x2e>
 800b040:	6063      	str	r3, [r4, #4]
 800b042:	6014      	str	r4, [r2, #0]
 800b044:	4628      	mov	r0, r5
 800b046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b04a:	f000 b910 	b.w	800b26e <__malloc_unlock>
 800b04e:	42a3      	cmp	r3, r4
 800b050:	d90c      	bls.n	800b06c <_free_r+0x4c>
 800b052:	6821      	ldr	r1, [r4, #0]
 800b054:	1862      	adds	r2, r4, r1
 800b056:	4293      	cmp	r3, r2
 800b058:	bf04      	itt	eq
 800b05a:	681a      	ldreq	r2, [r3, #0]
 800b05c:	685b      	ldreq	r3, [r3, #4]
 800b05e:	6063      	str	r3, [r4, #4]
 800b060:	bf04      	itt	eq
 800b062:	1852      	addeq	r2, r2, r1
 800b064:	6022      	streq	r2, [r4, #0]
 800b066:	6004      	str	r4, [r0, #0]
 800b068:	e7ec      	b.n	800b044 <_free_r+0x24>
 800b06a:	4613      	mov	r3, r2
 800b06c:	685a      	ldr	r2, [r3, #4]
 800b06e:	b10a      	cbz	r2, 800b074 <_free_r+0x54>
 800b070:	42a2      	cmp	r2, r4
 800b072:	d9fa      	bls.n	800b06a <_free_r+0x4a>
 800b074:	6819      	ldr	r1, [r3, #0]
 800b076:	1858      	adds	r0, r3, r1
 800b078:	42a0      	cmp	r0, r4
 800b07a:	d10b      	bne.n	800b094 <_free_r+0x74>
 800b07c:	6820      	ldr	r0, [r4, #0]
 800b07e:	4401      	add	r1, r0
 800b080:	1858      	adds	r0, r3, r1
 800b082:	4282      	cmp	r2, r0
 800b084:	6019      	str	r1, [r3, #0]
 800b086:	d1dd      	bne.n	800b044 <_free_r+0x24>
 800b088:	6810      	ldr	r0, [r2, #0]
 800b08a:	6852      	ldr	r2, [r2, #4]
 800b08c:	605a      	str	r2, [r3, #4]
 800b08e:	4401      	add	r1, r0
 800b090:	6019      	str	r1, [r3, #0]
 800b092:	e7d7      	b.n	800b044 <_free_r+0x24>
 800b094:	d902      	bls.n	800b09c <_free_r+0x7c>
 800b096:	230c      	movs	r3, #12
 800b098:	602b      	str	r3, [r5, #0]
 800b09a:	e7d3      	b.n	800b044 <_free_r+0x24>
 800b09c:	6820      	ldr	r0, [r4, #0]
 800b09e:	1821      	adds	r1, r4, r0
 800b0a0:	428a      	cmp	r2, r1
 800b0a2:	bf04      	itt	eq
 800b0a4:	6811      	ldreq	r1, [r2, #0]
 800b0a6:	6852      	ldreq	r2, [r2, #4]
 800b0a8:	6062      	str	r2, [r4, #4]
 800b0aa:	bf04      	itt	eq
 800b0ac:	1809      	addeq	r1, r1, r0
 800b0ae:	6021      	streq	r1, [r4, #0]
 800b0b0:	605c      	str	r4, [r3, #4]
 800b0b2:	e7c7      	b.n	800b044 <_free_r+0x24>
 800b0b4:	bd38      	pop	{r3, r4, r5, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20000810 	.word	0x20000810

0800b0bc <_malloc_r>:
 800b0bc:	b570      	push	{r4, r5, r6, lr}
 800b0be:	1ccd      	adds	r5, r1, #3
 800b0c0:	f025 0503 	bic.w	r5, r5, #3
 800b0c4:	3508      	adds	r5, #8
 800b0c6:	2d0c      	cmp	r5, #12
 800b0c8:	bf38      	it	cc
 800b0ca:	250c      	movcc	r5, #12
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	db01      	blt.n	800b0d6 <_malloc_r+0x1a>
 800b0d2:	42a9      	cmp	r1, r5
 800b0d4:	d903      	bls.n	800b0de <_malloc_r+0x22>
 800b0d6:	230c      	movs	r3, #12
 800b0d8:	6033      	str	r3, [r6, #0]
 800b0da:	2000      	movs	r0, #0
 800b0dc:	bd70      	pop	{r4, r5, r6, pc}
 800b0de:	f000 f8c5 	bl	800b26c <__malloc_lock>
 800b0e2:	4a21      	ldr	r2, [pc, #132]	; (800b168 <_malloc_r+0xac>)
 800b0e4:	6814      	ldr	r4, [r2, #0]
 800b0e6:	4621      	mov	r1, r4
 800b0e8:	b991      	cbnz	r1, 800b110 <_malloc_r+0x54>
 800b0ea:	4c20      	ldr	r4, [pc, #128]	; (800b16c <_malloc_r+0xb0>)
 800b0ec:	6823      	ldr	r3, [r4, #0]
 800b0ee:	b91b      	cbnz	r3, 800b0f8 <_malloc_r+0x3c>
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	f000 f83d 	bl	800b170 <_sbrk_r>
 800b0f6:	6020      	str	r0, [r4, #0]
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f000 f838 	bl	800b170 <_sbrk_r>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	d124      	bne.n	800b14e <_malloc_r+0x92>
 800b104:	230c      	movs	r3, #12
 800b106:	6033      	str	r3, [r6, #0]
 800b108:	4630      	mov	r0, r6
 800b10a:	f000 f8b0 	bl	800b26e <__malloc_unlock>
 800b10e:	e7e4      	b.n	800b0da <_malloc_r+0x1e>
 800b110:	680b      	ldr	r3, [r1, #0]
 800b112:	1b5b      	subs	r3, r3, r5
 800b114:	d418      	bmi.n	800b148 <_malloc_r+0x8c>
 800b116:	2b0b      	cmp	r3, #11
 800b118:	d90f      	bls.n	800b13a <_malloc_r+0x7e>
 800b11a:	600b      	str	r3, [r1, #0]
 800b11c:	50cd      	str	r5, [r1, r3]
 800b11e:	18cc      	adds	r4, r1, r3
 800b120:	4630      	mov	r0, r6
 800b122:	f000 f8a4 	bl	800b26e <__malloc_unlock>
 800b126:	f104 000b 	add.w	r0, r4, #11
 800b12a:	1d23      	adds	r3, r4, #4
 800b12c:	f020 0007 	bic.w	r0, r0, #7
 800b130:	1ac3      	subs	r3, r0, r3
 800b132:	d0d3      	beq.n	800b0dc <_malloc_r+0x20>
 800b134:	425a      	negs	r2, r3
 800b136:	50e2      	str	r2, [r4, r3]
 800b138:	e7d0      	b.n	800b0dc <_malloc_r+0x20>
 800b13a:	428c      	cmp	r4, r1
 800b13c:	684b      	ldr	r3, [r1, #4]
 800b13e:	bf16      	itet	ne
 800b140:	6063      	strne	r3, [r4, #4]
 800b142:	6013      	streq	r3, [r2, #0]
 800b144:	460c      	movne	r4, r1
 800b146:	e7eb      	b.n	800b120 <_malloc_r+0x64>
 800b148:	460c      	mov	r4, r1
 800b14a:	6849      	ldr	r1, [r1, #4]
 800b14c:	e7cc      	b.n	800b0e8 <_malloc_r+0x2c>
 800b14e:	1cc4      	adds	r4, r0, #3
 800b150:	f024 0403 	bic.w	r4, r4, #3
 800b154:	42a0      	cmp	r0, r4
 800b156:	d005      	beq.n	800b164 <_malloc_r+0xa8>
 800b158:	1a21      	subs	r1, r4, r0
 800b15a:	4630      	mov	r0, r6
 800b15c:	f000 f808 	bl	800b170 <_sbrk_r>
 800b160:	3001      	adds	r0, #1
 800b162:	d0cf      	beq.n	800b104 <_malloc_r+0x48>
 800b164:	6025      	str	r5, [r4, #0]
 800b166:	e7db      	b.n	800b120 <_malloc_r+0x64>
 800b168:	20000810 	.word	0x20000810
 800b16c:	20000814 	.word	0x20000814

0800b170 <_sbrk_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4c06      	ldr	r4, [pc, #24]	; (800b18c <_sbrk_r+0x1c>)
 800b174:	2300      	movs	r3, #0
 800b176:	4605      	mov	r5, r0
 800b178:	4608      	mov	r0, r1
 800b17a:	6023      	str	r3, [r4, #0]
 800b17c:	f7f6 fa6e 	bl	800165c <_sbrk>
 800b180:	1c43      	adds	r3, r0, #1
 800b182:	d102      	bne.n	800b18a <_sbrk_r+0x1a>
 800b184:	6823      	ldr	r3, [r4, #0]
 800b186:	b103      	cbz	r3, 800b18a <_sbrk_r+0x1a>
 800b188:	602b      	str	r3, [r5, #0]
 800b18a:	bd38      	pop	{r3, r4, r5, pc}
 800b18c:	20012468 	.word	0x20012468

0800b190 <siprintf>:
 800b190:	b40e      	push	{r1, r2, r3}
 800b192:	b500      	push	{lr}
 800b194:	b09c      	sub	sp, #112	; 0x70
 800b196:	ab1d      	add	r3, sp, #116	; 0x74
 800b198:	9002      	str	r0, [sp, #8]
 800b19a:	9006      	str	r0, [sp, #24]
 800b19c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b1a0:	4809      	ldr	r0, [pc, #36]	; (800b1c8 <siprintf+0x38>)
 800b1a2:	9107      	str	r1, [sp, #28]
 800b1a4:	9104      	str	r1, [sp, #16]
 800b1a6:	4909      	ldr	r1, [pc, #36]	; (800b1cc <siprintf+0x3c>)
 800b1a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ac:	9105      	str	r1, [sp, #20]
 800b1ae:	6800      	ldr	r0, [r0, #0]
 800b1b0:	9301      	str	r3, [sp, #4]
 800b1b2:	a902      	add	r1, sp, #8
 800b1b4:	f000 f8b6 	bl	800b324 <_svfiprintf_r>
 800b1b8:	9b02      	ldr	r3, [sp, #8]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	b01c      	add	sp, #112	; 0x70
 800b1c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1c4:	b003      	add	sp, #12
 800b1c6:	4770      	bx	lr
 800b1c8:	2000058c 	.word	0x2000058c
 800b1cc:	ffff0208 	.word	0xffff0208

0800b1d0 <_vsiprintf_r>:
 800b1d0:	b500      	push	{lr}
 800b1d2:	b09b      	sub	sp, #108	; 0x6c
 800b1d4:	9100      	str	r1, [sp, #0]
 800b1d6:	9104      	str	r1, [sp, #16]
 800b1d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b1dc:	9105      	str	r1, [sp, #20]
 800b1de:	9102      	str	r1, [sp, #8]
 800b1e0:	4905      	ldr	r1, [pc, #20]	; (800b1f8 <_vsiprintf_r+0x28>)
 800b1e2:	9103      	str	r1, [sp, #12]
 800b1e4:	4669      	mov	r1, sp
 800b1e6:	f000 f89d 	bl	800b324 <_svfiprintf_r>
 800b1ea:	9b00      	ldr	r3, [sp, #0]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	701a      	strb	r2, [r3, #0]
 800b1f0:	b01b      	add	sp, #108	; 0x6c
 800b1f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1f6:	bf00      	nop
 800b1f8:	ffff0208 	.word	0xffff0208

0800b1fc <vsiprintf>:
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	460a      	mov	r2, r1
 800b200:	4601      	mov	r1, r0
 800b202:	4802      	ldr	r0, [pc, #8]	; (800b20c <vsiprintf+0x10>)
 800b204:	6800      	ldr	r0, [r0, #0]
 800b206:	f7ff bfe3 	b.w	800b1d0 <_vsiprintf_r>
 800b20a:	bf00      	nop
 800b20c:	2000058c 	.word	0x2000058c

0800b210 <_vsiscanf_r>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	b09a      	sub	sp, #104	; 0x68
 800b214:	4604      	mov	r4, r0
 800b216:	461e      	mov	r6, r3
 800b218:	4608      	mov	r0, r1
 800b21a:	f44f 7301 	mov.w	r3, #516	; 0x204
 800b21e:	4615      	mov	r5, r2
 800b220:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b224:	9100      	str	r1, [sp, #0]
 800b226:	9104      	str	r1, [sp, #16]
 800b228:	f7f4 ffdc 	bl	80001e4 <strlen>
 800b22c:	4b09      	ldr	r3, [pc, #36]	; (800b254 <_vsiscanf_r+0x44>)
 800b22e:	9309      	str	r3, [sp, #36]	; 0x24
 800b230:	2100      	movs	r1, #0
 800b232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b236:	9001      	str	r0, [sp, #4]
 800b238:	9005      	str	r0, [sp, #20]
 800b23a:	910d      	str	r1, [sp, #52]	; 0x34
 800b23c:	9112      	str	r1, [sp, #72]	; 0x48
 800b23e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b242:	462a      	mov	r2, r5
 800b244:	4633      	mov	r3, r6
 800b246:	4669      	mov	r1, sp
 800b248:	4620      	mov	r0, r4
 800b24a:	f000 f9bd 	bl	800b5c8 <__ssvfiscanf_r>
 800b24e:	b01a      	add	sp, #104	; 0x68
 800b250:	bd70      	pop	{r4, r5, r6, pc}
 800b252:	bf00      	nop
 800b254:	0800be8d 	.word	0x0800be8d

0800b258 <vsiscanf>:
 800b258:	4613      	mov	r3, r2
 800b25a:	460a      	mov	r2, r1
 800b25c:	4601      	mov	r1, r0
 800b25e:	4802      	ldr	r0, [pc, #8]	; (800b268 <vsiscanf+0x10>)
 800b260:	6800      	ldr	r0, [r0, #0]
 800b262:	f7ff bfd5 	b.w	800b210 <_vsiscanf_r>
 800b266:	bf00      	nop
 800b268:	2000058c 	.word	0x2000058c

0800b26c <__malloc_lock>:
 800b26c:	4770      	bx	lr

0800b26e <__malloc_unlock>:
 800b26e:	4770      	bx	lr

0800b270 <__ssputs_r>:
 800b270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b274:	688e      	ldr	r6, [r1, #8]
 800b276:	429e      	cmp	r6, r3
 800b278:	4682      	mov	sl, r0
 800b27a:	460c      	mov	r4, r1
 800b27c:	4690      	mov	r8, r2
 800b27e:	4699      	mov	r9, r3
 800b280:	d837      	bhi.n	800b2f2 <__ssputs_r+0x82>
 800b282:	898a      	ldrh	r2, [r1, #12]
 800b284:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b288:	d031      	beq.n	800b2ee <__ssputs_r+0x7e>
 800b28a:	6825      	ldr	r5, [r4, #0]
 800b28c:	6909      	ldr	r1, [r1, #16]
 800b28e:	1a6f      	subs	r7, r5, r1
 800b290:	6965      	ldr	r5, [r4, #20]
 800b292:	2302      	movs	r3, #2
 800b294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b298:	fb95 f5f3 	sdiv	r5, r5, r3
 800b29c:	f109 0301 	add.w	r3, r9, #1
 800b2a0:	443b      	add	r3, r7
 800b2a2:	429d      	cmp	r5, r3
 800b2a4:	bf38      	it	cc
 800b2a6:	461d      	movcc	r5, r3
 800b2a8:	0553      	lsls	r3, r2, #21
 800b2aa:	d530      	bpl.n	800b30e <__ssputs_r+0x9e>
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	f7ff ff05 	bl	800b0bc <_malloc_r>
 800b2b2:	4606      	mov	r6, r0
 800b2b4:	b950      	cbnz	r0, 800b2cc <__ssputs_r+0x5c>
 800b2b6:	230c      	movs	r3, #12
 800b2b8:	f8ca 3000 	str.w	r3, [sl]
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2c2:	81a3      	strh	r3, [r4, #12]
 800b2c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2cc:	463a      	mov	r2, r7
 800b2ce:	6921      	ldr	r1, [r4, #16]
 800b2d0:	f7ff fe92 	bl	800aff8 <memcpy>
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2de:	81a3      	strh	r3, [r4, #12]
 800b2e0:	6126      	str	r6, [r4, #16]
 800b2e2:	6165      	str	r5, [r4, #20]
 800b2e4:	443e      	add	r6, r7
 800b2e6:	1bed      	subs	r5, r5, r7
 800b2e8:	6026      	str	r6, [r4, #0]
 800b2ea:	60a5      	str	r5, [r4, #8]
 800b2ec:	464e      	mov	r6, r9
 800b2ee:	454e      	cmp	r6, r9
 800b2f0:	d900      	bls.n	800b2f4 <__ssputs_r+0x84>
 800b2f2:	464e      	mov	r6, r9
 800b2f4:	4632      	mov	r2, r6
 800b2f6:	4641      	mov	r1, r8
 800b2f8:	6820      	ldr	r0, [r4, #0]
 800b2fa:	f000 ff41 	bl	800c180 <memmove>
 800b2fe:	68a3      	ldr	r3, [r4, #8]
 800b300:	1b9b      	subs	r3, r3, r6
 800b302:	60a3      	str	r3, [r4, #8]
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	441e      	add	r6, r3
 800b308:	6026      	str	r6, [r4, #0]
 800b30a:	2000      	movs	r0, #0
 800b30c:	e7dc      	b.n	800b2c8 <__ssputs_r+0x58>
 800b30e:	462a      	mov	r2, r5
 800b310:	f000 ff4f 	bl	800c1b2 <_realloc_r>
 800b314:	4606      	mov	r6, r0
 800b316:	2800      	cmp	r0, #0
 800b318:	d1e2      	bne.n	800b2e0 <__ssputs_r+0x70>
 800b31a:	6921      	ldr	r1, [r4, #16]
 800b31c:	4650      	mov	r0, sl
 800b31e:	f7ff fe7f 	bl	800b020 <_free_r>
 800b322:	e7c8      	b.n	800b2b6 <__ssputs_r+0x46>

0800b324 <_svfiprintf_r>:
 800b324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b328:	461d      	mov	r5, r3
 800b32a:	898b      	ldrh	r3, [r1, #12]
 800b32c:	061f      	lsls	r7, r3, #24
 800b32e:	b09d      	sub	sp, #116	; 0x74
 800b330:	4680      	mov	r8, r0
 800b332:	460c      	mov	r4, r1
 800b334:	4616      	mov	r6, r2
 800b336:	d50f      	bpl.n	800b358 <_svfiprintf_r+0x34>
 800b338:	690b      	ldr	r3, [r1, #16]
 800b33a:	b96b      	cbnz	r3, 800b358 <_svfiprintf_r+0x34>
 800b33c:	2140      	movs	r1, #64	; 0x40
 800b33e:	f7ff febd 	bl	800b0bc <_malloc_r>
 800b342:	6020      	str	r0, [r4, #0]
 800b344:	6120      	str	r0, [r4, #16]
 800b346:	b928      	cbnz	r0, 800b354 <_svfiprintf_r+0x30>
 800b348:	230c      	movs	r3, #12
 800b34a:	f8c8 3000 	str.w	r3, [r8]
 800b34e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b352:	e0c8      	b.n	800b4e6 <_svfiprintf_r+0x1c2>
 800b354:	2340      	movs	r3, #64	; 0x40
 800b356:	6163      	str	r3, [r4, #20]
 800b358:	2300      	movs	r3, #0
 800b35a:	9309      	str	r3, [sp, #36]	; 0x24
 800b35c:	2320      	movs	r3, #32
 800b35e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b362:	2330      	movs	r3, #48	; 0x30
 800b364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b368:	9503      	str	r5, [sp, #12]
 800b36a:	f04f 0b01 	mov.w	fp, #1
 800b36e:	4637      	mov	r7, r6
 800b370:	463d      	mov	r5, r7
 800b372:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b376:	b10b      	cbz	r3, 800b37c <_svfiprintf_r+0x58>
 800b378:	2b25      	cmp	r3, #37	; 0x25
 800b37a:	d13e      	bne.n	800b3fa <_svfiprintf_r+0xd6>
 800b37c:	ebb7 0a06 	subs.w	sl, r7, r6
 800b380:	d00b      	beq.n	800b39a <_svfiprintf_r+0x76>
 800b382:	4653      	mov	r3, sl
 800b384:	4632      	mov	r2, r6
 800b386:	4621      	mov	r1, r4
 800b388:	4640      	mov	r0, r8
 800b38a:	f7ff ff71 	bl	800b270 <__ssputs_r>
 800b38e:	3001      	adds	r0, #1
 800b390:	f000 80a4 	beq.w	800b4dc <_svfiprintf_r+0x1b8>
 800b394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b396:	4453      	add	r3, sl
 800b398:	9309      	str	r3, [sp, #36]	; 0x24
 800b39a:	783b      	ldrb	r3, [r7, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f000 809d 	beq.w	800b4dc <_svfiprintf_r+0x1b8>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3ac:	9304      	str	r3, [sp, #16]
 800b3ae:	9307      	str	r3, [sp, #28]
 800b3b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b3b6:	462f      	mov	r7, r5
 800b3b8:	2205      	movs	r2, #5
 800b3ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b3be:	4850      	ldr	r0, [pc, #320]	; (800b500 <_svfiprintf_r+0x1dc>)
 800b3c0:	f7f4 ff1e 	bl	8000200 <memchr>
 800b3c4:	9b04      	ldr	r3, [sp, #16]
 800b3c6:	b9d0      	cbnz	r0, 800b3fe <_svfiprintf_r+0xda>
 800b3c8:	06d9      	lsls	r1, r3, #27
 800b3ca:	bf44      	itt	mi
 800b3cc:	2220      	movmi	r2, #32
 800b3ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b3d2:	071a      	lsls	r2, r3, #28
 800b3d4:	bf44      	itt	mi
 800b3d6:	222b      	movmi	r2, #43	; 0x2b
 800b3d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b3dc:	782a      	ldrb	r2, [r5, #0]
 800b3de:	2a2a      	cmp	r2, #42	; 0x2a
 800b3e0:	d015      	beq.n	800b40e <_svfiprintf_r+0xea>
 800b3e2:	9a07      	ldr	r2, [sp, #28]
 800b3e4:	462f      	mov	r7, r5
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	250a      	movs	r5, #10
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3f0:	3b30      	subs	r3, #48	; 0x30
 800b3f2:	2b09      	cmp	r3, #9
 800b3f4:	d94d      	bls.n	800b492 <_svfiprintf_r+0x16e>
 800b3f6:	b1b8      	cbz	r0, 800b428 <_svfiprintf_r+0x104>
 800b3f8:	e00f      	b.n	800b41a <_svfiprintf_r+0xf6>
 800b3fa:	462f      	mov	r7, r5
 800b3fc:	e7b8      	b.n	800b370 <_svfiprintf_r+0x4c>
 800b3fe:	4a40      	ldr	r2, [pc, #256]	; (800b500 <_svfiprintf_r+0x1dc>)
 800b400:	1a80      	subs	r0, r0, r2
 800b402:	fa0b f000 	lsl.w	r0, fp, r0
 800b406:	4318      	orrs	r0, r3
 800b408:	9004      	str	r0, [sp, #16]
 800b40a:	463d      	mov	r5, r7
 800b40c:	e7d3      	b.n	800b3b6 <_svfiprintf_r+0x92>
 800b40e:	9a03      	ldr	r2, [sp, #12]
 800b410:	1d11      	adds	r1, r2, #4
 800b412:	6812      	ldr	r2, [r2, #0]
 800b414:	9103      	str	r1, [sp, #12]
 800b416:	2a00      	cmp	r2, #0
 800b418:	db01      	blt.n	800b41e <_svfiprintf_r+0xfa>
 800b41a:	9207      	str	r2, [sp, #28]
 800b41c:	e004      	b.n	800b428 <_svfiprintf_r+0x104>
 800b41e:	4252      	negs	r2, r2
 800b420:	f043 0302 	orr.w	r3, r3, #2
 800b424:	9207      	str	r2, [sp, #28]
 800b426:	9304      	str	r3, [sp, #16]
 800b428:	783b      	ldrb	r3, [r7, #0]
 800b42a:	2b2e      	cmp	r3, #46	; 0x2e
 800b42c:	d10c      	bne.n	800b448 <_svfiprintf_r+0x124>
 800b42e:	787b      	ldrb	r3, [r7, #1]
 800b430:	2b2a      	cmp	r3, #42	; 0x2a
 800b432:	d133      	bne.n	800b49c <_svfiprintf_r+0x178>
 800b434:	9b03      	ldr	r3, [sp, #12]
 800b436:	1d1a      	adds	r2, r3, #4
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	9203      	str	r2, [sp, #12]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	bfb8      	it	lt
 800b440:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b444:	3702      	adds	r7, #2
 800b446:	9305      	str	r3, [sp, #20]
 800b448:	4d2e      	ldr	r5, [pc, #184]	; (800b504 <_svfiprintf_r+0x1e0>)
 800b44a:	7839      	ldrb	r1, [r7, #0]
 800b44c:	2203      	movs	r2, #3
 800b44e:	4628      	mov	r0, r5
 800b450:	f7f4 fed6 	bl	8000200 <memchr>
 800b454:	b138      	cbz	r0, 800b466 <_svfiprintf_r+0x142>
 800b456:	2340      	movs	r3, #64	; 0x40
 800b458:	1b40      	subs	r0, r0, r5
 800b45a:	fa03 f000 	lsl.w	r0, r3, r0
 800b45e:	9b04      	ldr	r3, [sp, #16]
 800b460:	4303      	orrs	r3, r0
 800b462:	3701      	adds	r7, #1
 800b464:	9304      	str	r3, [sp, #16]
 800b466:	7839      	ldrb	r1, [r7, #0]
 800b468:	4827      	ldr	r0, [pc, #156]	; (800b508 <_svfiprintf_r+0x1e4>)
 800b46a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b46e:	2206      	movs	r2, #6
 800b470:	1c7e      	adds	r6, r7, #1
 800b472:	f7f4 fec5 	bl	8000200 <memchr>
 800b476:	2800      	cmp	r0, #0
 800b478:	d038      	beq.n	800b4ec <_svfiprintf_r+0x1c8>
 800b47a:	4b24      	ldr	r3, [pc, #144]	; (800b50c <_svfiprintf_r+0x1e8>)
 800b47c:	bb13      	cbnz	r3, 800b4c4 <_svfiprintf_r+0x1a0>
 800b47e:	9b03      	ldr	r3, [sp, #12]
 800b480:	3307      	adds	r3, #7
 800b482:	f023 0307 	bic.w	r3, r3, #7
 800b486:	3308      	adds	r3, #8
 800b488:	9303      	str	r3, [sp, #12]
 800b48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b48c:	444b      	add	r3, r9
 800b48e:	9309      	str	r3, [sp, #36]	; 0x24
 800b490:	e76d      	b.n	800b36e <_svfiprintf_r+0x4a>
 800b492:	fb05 3202 	mla	r2, r5, r2, r3
 800b496:	2001      	movs	r0, #1
 800b498:	460f      	mov	r7, r1
 800b49a:	e7a6      	b.n	800b3ea <_svfiprintf_r+0xc6>
 800b49c:	2300      	movs	r3, #0
 800b49e:	3701      	adds	r7, #1
 800b4a0:	9305      	str	r3, [sp, #20]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	250a      	movs	r5, #10
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4ac:	3a30      	subs	r2, #48	; 0x30
 800b4ae:	2a09      	cmp	r2, #9
 800b4b0:	d903      	bls.n	800b4ba <_svfiprintf_r+0x196>
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d0c8      	beq.n	800b448 <_svfiprintf_r+0x124>
 800b4b6:	9105      	str	r1, [sp, #20]
 800b4b8:	e7c6      	b.n	800b448 <_svfiprintf_r+0x124>
 800b4ba:	fb05 2101 	mla	r1, r5, r1, r2
 800b4be:	2301      	movs	r3, #1
 800b4c0:	4607      	mov	r7, r0
 800b4c2:	e7f0      	b.n	800b4a6 <_svfiprintf_r+0x182>
 800b4c4:	ab03      	add	r3, sp, #12
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	4622      	mov	r2, r4
 800b4ca:	4b11      	ldr	r3, [pc, #68]	; (800b510 <_svfiprintf_r+0x1ec>)
 800b4cc:	a904      	add	r1, sp, #16
 800b4ce:	4640      	mov	r0, r8
 800b4d0:	f3af 8000 	nop.w
 800b4d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b4d8:	4681      	mov	r9, r0
 800b4da:	d1d6      	bne.n	800b48a <_svfiprintf_r+0x166>
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	065b      	lsls	r3, r3, #25
 800b4e0:	f53f af35 	bmi.w	800b34e <_svfiprintf_r+0x2a>
 800b4e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4e6:	b01d      	add	sp, #116	; 0x74
 800b4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ec:	ab03      	add	r3, sp, #12
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	4622      	mov	r2, r4
 800b4f2:	4b07      	ldr	r3, [pc, #28]	; (800b510 <_svfiprintf_r+0x1ec>)
 800b4f4:	a904      	add	r1, sp, #16
 800b4f6:	4640      	mov	r0, r8
 800b4f8:	f000 fa2c 	bl	800b954 <_printf_i>
 800b4fc:	e7ea      	b.n	800b4d4 <_svfiprintf_r+0x1b0>
 800b4fe:	bf00      	nop
 800b500:	0800cf18 	.word	0x0800cf18
 800b504:	0800cf1e 	.word	0x0800cf1e
 800b508:	0800cf22 	.word	0x0800cf22
 800b50c:	00000000 	.word	0x00000000
 800b510:	0800b271 	.word	0x0800b271

0800b514 <_sungetc_r>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	1c4b      	adds	r3, r1, #1
 800b518:	4614      	mov	r4, r2
 800b51a:	d103      	bne.n	800b524 <_sungetc_r+0x10>
 800b51c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b520:	4628      	mov	r0, r5
 800b522:	bd38      	pop	{r3, r4, r5, pc}
 800b524:	8993      	ldrh	r3, [r2, #12]
 800b526:	f023 0320 	bic.w	r3, r3, #32
 800b52a:	8193      	strh	r3, [r2, #12]
 800b52c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b52e:	6852      	ldr	r2, [r2, #4]
 800b530:	b2cd      	uxtb	r5, r1
 800b532:	b18b      	cbz	r3, 800b558 <_sungetc_r+0x44>
 800b534:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b536:	4293      	cmp	r3, r2
 800b538:	dd08      	ble.n	800b54c <_sungetc_r+0x38>
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	1e5a      	subs	r2, r3, #1
 800b53e:	6022      	str	r2, [r4, #0]
 800b540:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b544:	6863      	ldr	r3, [r4, #4]
 800b546:	3301      	adds	r3, #1
 800b548:	6063      	str	r3, [r4, #4]
 800b54a:	e7e9      	b.n	800b520 <_sungetc_r+0xc>
 800b54c:	4621      	mov	r1, r4
 800b54e:	f000 fdb9 	bl	800c0c4 <__submore>
 800b552:	2800      	cmp	r0, #0
 800b554:	d0f1      	beq.n	800b53a <_sungetc_r+0x26>
 800b556:	e7e1      	b.n	800b51c <_sungetc_r+0x8>
 800b558:	6921      	ldr	r1, [r4, #16]
 800b55a:	6823      	ldr	r3, [r4, #0]
 800b55c:	b151      	cbz	r1, 800b574 <_sungetc_r+0x60>
 800b55e:	4299      	cmp	r1, r3
 800b560:	d208      	bcs.n	800b574 <_sungetc_r+0x60>
 800b562:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b566:	42a9      	cmp	r1, r5
 800b568:	d104      	bne.n	800b574 <_sungetc_r+0x60>
 800b56a:	3b01      	subs	r3, #1
 800b56c:	3201      	adds	r2, #1
 800b56e:	6023      	str	r3, [r4, #0]
 800b570:	6062      	str	r2, [r4, #4]
 800b572:	e7d5      	b.n	800b520 <_sungetc_r+0xc>
 800b574:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b57c:	6363      	str	r3, [r4, #52]	; 0x34
 800b57e:	2303      	movs	r3, #3
 800b580:	63a3      	str	r3, [r4, #56]	; 0x38
 800b582:	4623      	mov	r3, r4
 800b584:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b588:	6023      	str	r3, [r4, #0]
 800b58a:	2301      	movs	r3, #1
 800b58c:	e7dc      	b.n	800b548 <_sungetc_r+0x34>

0800b58e <__ssrefill_r>:
 800b58e:	b510      	push	{r4, lr}
 800b590:	460c      	mov	r4, r1
 800b592:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b594:	b169      	cbz	r1, 800b5b2 <__ssrefill_r+0x24>
 800b596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b59a:	4299      	cmp	r1, r3
 800b59c:	d001      	beq.n	800b5a2 <__ssrefill_r+0x14>
 800b59e:	f7ff fd3f 	bl	800b020 <_free_r>
 800b5a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5a4:	6063      	str	r3, [r4, #4]
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	6360      	str	r0, [r4, #52]	; 0x34
 800b5aa:	b113      	cbz	r3, 800b5b2 <__ssrefill_r+0x24>
 800b5ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b5ae:	6023      	str	r3, [r4, #0]
 800b5b0:	bd10      	pop	{r4, pc}
 800b5b2:	6923      	ldr	r3, [r4, #16]
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	6063      	str	r3, [r4, #4]
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	f043 0320 	orr.w	r3, r3, #32
 800b5c0:	81a3      	strh	r3, [r4, #12]
 800b5c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5c6:	e7f3      	b.n	800b5b0 <__ssrefill_r+0x22>

0800b5c8 <__ssvfiscanf_r>:
 800b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	9144      	str	r1, [sp, #272]	; 0x110
 800b5d6:	9145      	str	r1, [sp, #276]	; 0x114
 800b5d8:	499f      	ldr	r1, [pc, #636]	; (800b858 <__ssvfiscanf_r+0x290>)
 800b5da:	91a0      	str	r1, [sp, #640]	; 0x280
 800b5dc:	f10d 0804 	add.w	r8, sp, #4
 800b5e0:	499e      	ldr	r1, [pc, #632]	; (800b85c <__ssvfiscanf_r+0x294>)
 800b5e2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800b860 <__ssvfiscanf_r+0x298>
 800b5e6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	4692      	mov	sl, r2
 800b5ee:	91a1      	str	r1, [sp, #644]	; 0x284
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	270a      	movs	r7, #10
 800b5f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f000 812a 	beq.w	800b852 <__ssvfiscanf_r+0x28a>
 800b5fe:	4655      	mov	r5, sl
 800b600:	f000 fd9e 	bl	800c140 <__locale_ctype_ptr>
 800b604:	f815 bb01 	ldrb.w	fp, [r5], #1
 800b608:	4458      	add	r0, fp
 800b60a:	7843      	ldrb	r3, [r0, #1]
 800b60c:	f013 0308 	ands.w	r3, r3, #8
 800b610:	d01c      	beq.n	800b64c <__ssvfiscanf_r+0x84>
 800b612:	6863      	ldr	r3, [r4, #4]
 800b614:	2b00      	cmp	r3, #0
 800b616:	dd12      	ble.n	800b63e <__ssvfiscanf_r+0x76>
 800b618:	f000 fd92 	bl	800c140 <__locale_ctype_ptr>
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	781a      	ldrb	r2, [r3, #0]
 800b620:	4410      	add	r0, r2
 800b622:	7842      	ldrb	r2, [r0, #1]
 800b624:	0712      	lsls	r2, r2, #28
 800b626:	d401      	bmi.n	800b62c <__ssvfiscanf_r+0x64>
 800b628:	46aa      	mov	sl, r5
 800b62a:	e7e3      	b.n	800b5f4 <__ssvfiscanf_r+0x2c>
 800b62c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b62e:	3201      	adds	r2, #1
 800b630:	9245      	str	r2, [sp, #276]	; 0x114
 800b632:	6862      	ldr	r2, [r4, #4]
 800b634:	3301      	adds	r3, #1
 800b636:	3a01      	subs	r2, #1
 800b638:	6062      	str	r2, [r4, #4]
 800b63a:	6023      	str	r3, [r4, #0]
 800b63c:	e7e9      	b.n	800b612 <__ssvfiscanf_r+0x4a>
 800b63e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b640:	4621      	mov	r1, r4
 800b642:	4630      	mov	r0, r6
 800b644:	4798      	blx	r3
 800b646:	2800      	cmp	r0, #0
 800b648:	d0e6      	beq.n	800b618 <__ssvfiscanf_r+0x50>
 800b64a:	e7ed      	b.n	800b628 <__ssvfiscanf_r+0x60>
 800b64c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800b650:	f040 8082 	bne.w	800b758 <__ssvfiscanf_r+0x190>
 800b654:	9343      	str	r3, [sp, #268]	; 0x10c
 800b656:	9341      	str	r3, [sp, #260]	; 0x104
 800b658:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800b65c:	2b2a      	cmp	r3, #42	; 0x2a
 800b65e:	d103      	bne.n	800b668 <__ssvfiscanf_r+0xa0>
 800b660:	2310      	movs	r3, #16
 800b662:	9341      	str	r3, [sp, #260]	; 0x104
 800b664:	f10a 0502 	add.w	r5, sl, #2
 800b668:	46aa      	mov	sl, r5
 800b66a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800b66e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b672:	2a09      	cmp	r2, #9
 800b674:	d922      	bls.n	800b6bc <__ssvfiscanf_r+0xf4>
 800b676:	2203      	movs	r2, #3
 800b678:	4879      	ldr	r0, [pc, #484]	; (800b860 <__ssvfiscanf_r+0x298>)
 800b67a:	f7f4 fdc1 	bl	8000200 <memchr>
 800b67e:	b138      	cbz	r0, 800b690 <__ssvfiscanf_r+0xc8>
 800b680:	eba0 0309 	sub.w	r3, r0, r9
 800b684:	2001      	movs	r0, #1
 800b686:	4098      	lsls	r0, r3
 800b688:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b68a:	4318      	orrs	r0, r3
 800b68c:	9041      	str	r0, [sp, #260]	; 0x104
 800b68e:	46aa      	mov	sl, r5
 800b690:	f89a 3000 	ldrb.w	r3, [sl]
 800b694:	2b67      	cmp	r3, #103	; 0x67
 800b696:	f10a 0501 	add.w	r5, sl, #1
 800b69a:	d82b      	bhi.n	800b6f4 <__ssvfiscanf_r+0x12c>
 800b69c:	2b65      	cmp	r3, #101	; 0x65
 800b69e:	f080 809f 	bcs.w	800b7e0 <__ssvfiscanf_r+0x218>
 800b6a2:	2b47      	cmp	r3, #71	; 0x47
 800b6a4:	d810      	bhi.n	800b6c8 <__ssvfiscanf_r+0x100>
 800b6a6:	2b45      	cmp	r3, #69	; 0x45
 800b6a8:	f080 809a 	bcs.w	800b7e0 <__ssvfiscanf_r+0x218>
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d06c      	beq.n	800b78a <__ssvfiscanf_r+0x1c2>
 800b6b0:	2b25      	cmp	r3, #37	; 0x25
 800b6b2:	d051      	beq.n	800b758 <__ssvfiscanf_r+0x190>
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	9347      	str	r3, [sp, #284]	; 0x11c
 800b6b8:	9742      	str	r7, [sp, #264]	; 0x108
 800b6ba:	e027      	b.n	800b70c <__ssvfiscanf_r+0x144>
 800b6bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b6be:	fb07 1303 	mla	r3, r7, r3, r1
 800b6c2:	3b30      	subs	r3, #48	; 0x30
 800b6c4:	9343      	str	r3, [sp, #268]	; 0x10c
 800b6c6:	e7cf      	b.n	800b668 <__ssvfiscanf_r+0xa0>
 800b6c8:	2b5b      	cmp	r3, #91	; 0x5b
 800b6ca:	d06a      	beq.n	800b7a2 <__ssvfiscanf_r+0x1da>
 800b6cc:	d80c      	bhi.n	800b6e8 <__ssvfiscanf_r+0x120>
 800b6ce:	2b58      	cmp	r3, #88	; 0x58
 800b6d0:	d1f0      	bne.n	800b6b4 <__ssvfiscanf_r+0xec>
 800b6d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b6d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6d8:	9241      	str	r2, [sp, #260]	; 0x104
 800b6da:	2210      	movs	r2, #16
 800b6dc:	9242      	str	r2, [sp, #264]	; 0x108
 800b6de:	2b6e      	cmp	r3, #110	; 0x6e
 800b6e0:	bf8c      	ite	hi
 800b6e2:	2304      	movhi	r3, #4
 800b6e4:	2303      	movls	r3, #3
 800b6e6:	e010      	b.n	800b70a <__ssvfiscanf_r+0x142>
 800b6e8:	2b63      	cmp	r3, #99	; 0x63
 800b6ea:	d065      	beq.n	800b7b8 <__ssvfiscanf_r+0x1f0>
 800b6ec:	2b64      	cmp	r3, #100	; 0x64
 800b6ee:	d1e1      	bne.n	800b6b4 <__ssvfiscanf_r+0xec>
 800b6f0:	9742      	str	r7, [sp, #264]	; 0x108
 800b6f2:	e7f4      	b.n	800b6de <__ssvfiscanf_r+0x116>
 800b6f4:	2b70      	cmp	r3, #112	; 0x70
 800b6f6:	d04b      	beq.n	800b790 <__ssvfiscanf_r+0x1c8>
 800b6f8:	d826      	bhi.n	800b748 <__ssvfiscanf_r+0x180>
 800b6fa:	2b6e      	cmp	r3, #110	; 0x6e
 800b6fc:	d062      	beq.n	800b7c4 <__ssvfiscanf_r+0x1fc>
 800b6fe:	d84c      	bhi.n	800b79a <__ssvfiscanf_r+0x1d2>
 800b700:	2b69      	cmp	r3, #105	; 0x69
 800b702:	d1d7      	bne.n	800b6b4 <__ssvfiscanf_r+0xec>
 800b704:	2300      	movs	r3, #0
 800b706:	9342      	str	r3, [sp, #264]	; 0x108
 800b708:	2303      	movs	r3, #3
 800b70a:	9347      	str	r3, [sp, #284]	; 0x11c
 800b70c:	6863      	ldr	r3, [r4, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	dd68      	ble.n	800b7e4 <__ssvfiscanf_r+0x21c>
 800b712:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b714:	0659      	lsls	r1, r3, #25
 800b716:	d407      	bmi.n	800b728 <__ssvfiscanf_r+0x160>
 800b718:	f000 fd12 	bl	800c140 <__locale_ctype_ptr>
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	781a      	ldrb	r2, [r3, #0]
 800b720:	4410      	add	r0, r2
 800b722:	7842      	ldrb	r2, [r0, #1]
 800b724:	0712      	lsls	r2, r2, #28
 800b726:	d464      	bmi.n	800b7f2 <__ssvfiscanf_r+0x22a>
 800b728:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	dc73      	bgt.n	800b816 <__ssvfiscanf_r+0x24e>
 800b72e:	466b      	mov	r3, sp
 800b730:	4622      	mov	r2, r4
 800b732:	a941      	add	r1, sp, #260	; 0x104
 800b734:	4630      	mov	r0, r6
 800b736:	f000 fa1f 	bl	800bb78 <_scanf_chars>
 800b73a:	2801      	cmp	r0, #1
 800b73c:	f000 8089 	beq.w	800b852 <__ssvfiscanf_r+0x28a>
 800b740:	2802      	cmp	r0, #2
 800b742:	f47f af71 	bne.w	800b628 <__ssvfiscanf_r+0x60>
 800b746:	e01d      	b.n	800b784 <__ssvfiscanf_r+0x1bc>
 800b748:	2b75      	cmp	r3, #117	; 0x75
 800b74a:	d0d1      	beq.n	800b6f0 <__ssvfiscanf_r+0x128>
 800b74c:	2b78      	cmp	r3, #120	; 0x78
 800b74e:	d0c0      	beq.n	800b6d2 <__ssvfiscanf_r+0x10a>
 800b750:	2b73      	cmp	r3, #115	; 0x73
 800b752:	d1af      	bne.n	800b6b4 <__ssvfiscanf_r+0xec>
 800b754:	2302      	movs	r3, #2
 800b756:	e7d8      	b.n	800b70a <__ssvfiscanf_r+0x142>
 800b758:	6863      	ldr	r3, [r4, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	dd0c      	ble.n	800b778 <__ssvfiscanf_r+0x1b0>
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	781a      	ldrb	r2, [r3, #0]
 800b762:	455a      	cmp	r2, fp
 800b764:	d175      	bne.n	800b852 <__ssvfiscanf_r+0x28a>
 800b766:	3301      	adds	r3, #1
 800b768:	6862      	ldr	r2, [r4, #4]
 800b76a:	6023      	str	r3, [r4, #0]
 800b76c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b76e:	3a01      	subs	r2, #1
 800b770:	3301      	adds	r3, #1
 800b772:	6062      	str	r2, [r4, #4]
 800b774:	9345      	str	r3, [sp, #276]	; 0x114
 800b776:	e757      	b.n	800b628 <__ssvfiscanf_r+0x60>
 800b778:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b77a:	4621      	mov	r1, r4
 800b77c:	4630      	mov	r0, r6
 800b77e:	4798      	blx	r3
 800b780:	2800      	cmp	r0, #0
 800b782:	d0ec      	beq.n	800b75e <__ssvfiscanf_r+0x196>
 800b784:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b786:	2800      	cmp	r0, #0
 800b788:	d159      	bne.n	800b83e <__ssvfiscanf_r+0x276>
 800b78a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b78e:	e05c      	b.n	800b84a <__ssvfiscanf_r+0x282>
 800b790:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b792:	f042 0220 	orr.w	r2, r2, #32
 800b796:	9241      	str	r2, [sp, #260]	; 0x104
 800b798:	e79b      	b.n	800b6d2 <__ssvfiscanf_r+0x10a>
 800b79a:	2308      	movs	r3, #8
 800b79c:	9342      	str	r3, [sp, #264]	; 0x108
 800b79e:	2304      	movs	r3, #4
 800b7a0:	e7b3      	b.n	800b70a <__ssvfiscanf_r+0x142>
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	f000 fb3f 	bl	800be28 <__sccl>
 800b7aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7b0:	9341      	str	r3, [sp, #260]	; 0x104
 800b7b2:	4605      	mov	r5, r0
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e7a8      	b.n	800b70a <__ssvfiscanf_r+0x142>
 800b7b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7be:	9341      	str	r3, [sp, #260]	; 0x104
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e7a2      	b.n	800b70a <__ssvfiscanf_r+0x142>
 800b7c4:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b7c6:	06c3      	lsls	r3, r0, #27
 800b7c8:	f53f af2e 	bmi.w	800b628 <__ssvfiscanf_r+0x60>
 800b7cc:	9b00      	ldr	r3, [sp, #0]
 800b7ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b7d0:	1d19      	adds	r1, r3, #4
 800b7d2:	9100      	str	r1, [sp, #0]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	07c0      	lsls	r0, r0, #31
 800b7d8:	bf4c      	ite	mi
 800b7da:	801a      	strhmi	r2, [r3, #0]
 800b7dc:	601a      	strpl	r2, [r3, #0]
 800b7de:	e723      	b.n	800b628 <__ssvfiscanf_r+0x60>
 800b7e0:	2305      	movs	r3, #5
 800b7e2:	e792      	b.n	800b70a <__ssvfiscanf_r+0x142>
 800b7e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	4798      	blx	r3
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d090      	beq.n	800b712 <__ssvfiscanf_r+0x14a>
 800b7f0:	e7c8      	b.n	800b784 <__ssvfiscanf_r+0x1bc>
 800b7f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b7f4:	3201      	adds	r2, #1
 800b7f6:	9245      	str	r2, [sp, #276]	; 0x114
 800b7f8:	6862      	ldr	r2, [r4, #4]
 800b7fa:	3a01      	subs	r2, #1
 800b7fc:	2a00      	cmp	r2, #0
 800b7fe:	6062      	str	r2, [r4, #4]
 800b800:	dd02      	ble.n	800b808 <__ssvfiscanf_r+0x240>
 800b802:	3301      	adds	r3, #1
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	e787      	b.n	800b718 <__ssvfiscanf_r+0x150>
 800b808:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b80a:	4621      	mov	r1, r4
 800b80c:	4630      	mov	r0, r6
 800b80e:	4798      	blx	r3
 800b810:	2800      	cmp	r0, #0
 800b812:	d081      	beq.n	800b718 <__ssvfiscanf_r+0x150>
 800b814:	e7b6      	b.n	800b784 <__ssvfiscanf_r+0x1bc>
 800b816:	2b04      	cmp	r3, #4
 800b818:	dc06      	bgt.n	800b828 <__ssvfiscanf_r+0x260>
 800b81a:	466b      	mov	r3, sp
 800b81c:	4622      	mov	r2, r4
 800b81e:	a941      	add	r1, sp, #260	; 0x104
 800b820:	4630      	mov	r0, r6
 800b822:	f000 fa0d 	bl	800bc40 <_scanf_i>
 800b826:	e788      	b.n	800b73a <__ssvfiscanf_r+0x172>
 800b828:	4b0e      	ldr	r3, [pc, #56]	; (800b864 <__ssvfiscanf_r+0x29c>)
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f43f aefc 	beq.w	800b628 <__ssvfiscanf_r+0x60>
 800b830:	466b      	mov	r3, sp
 800b832:	4622      	mov	r2, r4
 800b834:	a941      	add	r1, sp, #260	; 0x104
 800b836:	4630      	mov	r0, r6
 800b838:	f3af 8000 	nop.w
 800b83c:	e77d      	b.n	800b73a <__ssvfiscanf_r+0x172>
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b844:	bf18      	it	ne
 800b846:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800b84a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800b84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b852:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b854:	e7f9      	b.n	800b84a <__ssvfiscanf_r+0x282>
 800b856:	bf00      	nop
 800b858:	0800b515 	.word	0x0800b515
 800b85c:	0800b58f 	.word	0x0800b58f
 800b860:	0800cf1e 	.word	0x0800cf1e
 800b864:	00000000 	.word	0x00000000

0800b868 <_printf_common>:
 800b868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b86c:	4691      	mov	r9, r2
 800b86e:	461f      	mov	r7, r3
 800b870:	688a      	ldr	r2, [r1, #8]
 800b872:	690b      	ldr	r3, [r1, #16]
 800b874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b878:	4293      	cmp	r3, r2
 800b87a:	bfb8      	it	lt
 800b87c:	4613      	movlt	r3, r2
 800b87e:	f8c9 3000 	str.w	r3, [r9]
 800b882:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b886:	4606      	mov	r6, r0
 800b888:	460c      	mov	r4, r1
 800b88a:	b112      	cbz	r2, 800b892 <_printf_common+0x2a>
 800b88c:	3301      	adds	r3, #1
 800b88e:	f8c9 3000 	str.w	r3, [r9]
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	0699      	lsls	r1, r3, #26
 800b896:	bf42      	ittt	mi
 800b898:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b89c:	3302      	addmi	r3, #2
 800b89e:	f8c9 3000 	strmi.w	r3, [r9]
 800b8a2:	6825      	ldr	r5, [r4, #0]
 800b8a4:	f015 0506 	ands.w	r5, r5, #6
 800b8a8:	d107      	bne.n	800b8ba <_printf_common+0x52>
 800b8aa:	f104 0a19 	add.w	sl, r4, #25
 800b8ae:	68e3      	ldr	r3, [r4, #12]
 800b8b0:	f8d9 2000 	ldr.w	r2, [r9]
 800b8b4:	1a9b      	subs	r3, r3, r2
 800b8b6:	42ab      	cmp	r3, r5
 800b8b8:	dc28      	bgt.n	800b90c <_printf_common+0xa4>
 800b8ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b8be:	6822      	ldr	r2, [r4, #0]
 800b8c0:	3300      	adds	r3, #0
 800b8c2:	bf18      	it	ne
 800b8c4:	2301      	movne	r3, #1
 800b8c6:	0692      	lsls	r2, r2, #26
 800b8c8:	d42d      	bmi.n	800b926 <_printf_common+0xbe>
 800b8ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8ce:	4639      	mov	r1, r7
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	47c0      	blx	r8
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	d020      	beq.n	800b91a <_printf_common+0xb2>
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	68e5      	ldr	r5, [r4, #12]
 800b8dc:	f8d9 2000 	ldr.w	r2, [r9]
 800b8e0:	f003 0306 	and.w	r3, r3, #6
 800b8e4:	2b04      	cmp	r3, #4
 800b8e6:	bf08      	it	eq
 800b8e8:	1aad      	subeq	r5, r5, r2
 800b8ea:	68a3      	ldr	r3, [r4, #8]
 800b8ec:	6922      	ldr	r2, [r4, #16]
 800b8ee:	bf0c      	ite	eq
 800b8f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8f4:	2500      	movne	r5, #0
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	bfc4      	itt	gt
 800b8fa:	1a9b      	subgt	r3, r3, r2
 800b8fc:	18ed      	addgt	r5, r5, r3
 800b8fe:	f04f 0900 	mov.w	r9, #0
 800b902:	341a      	adds	r4, #26
 800b904:	454d      	cmp	r5, r9
 800b906:	d11a      	bne.n	800b93e <_printf_common+0xd6>
 800b908:	2000      	movs	r0, #0
 800b90a:	e008      	b.n	800b91e <_printf_common+0xb6>
 800b90c:	2301      	movs	r3, #1
 800b90e:	4652      	mov	r2, sl
 800b910:	4639      	mov	r1, r7
 800b912:	4630      	mov	r0, r6
 800b914:	47c0      	blx	r8
 800b916:	3001      	adds	r0, #1
 800b918:	d103      	bne.n	800b922 <_printf_common+0xba>
 800b91a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b922:	3501      	adds	r5, #1
 800b924:	e7c3      	b.n	800b8ae <_printf_common+0x46>
 800b926:	18e1      	adds	r1, r4, r3
 800b928:	1c5a      	adds	r2, r3, #1
 800b92a:	2030      	movs	r0, #48	; 0x30
 800b92c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b930:	4422      	add	r2, r4
 800b932:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b936:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b93a:	3302      	adds	r3, #2
 800b93c:	e7c5      	b.n	800b8ca <_printf_common+0x62>
 800b93e:	2301      	movs	r3, #1
 800b940:	4622      	mov	r2, r4
 800b942:	4639      	mov	r1, r7
 800b944:	4630      	mov	r0, r6
 800b946:	47c0      	blx	r8
 800b948:	3001      	adds	r0, #1
 800b94a:	d0e6      	beq.n	800b91a <_printf_common+0xb2>
 800b94c:	f109 0901 	add.w	r9, r9, #1
 800b950:	e7d8      	b.n	800b904 <_printf_common+0x9c>
	...

0800b954 <_printf_i>:
 800b954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b958:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b95c:	460c      	mov	r4, r1
 800b95e:	7e09      	ldrb	r1, [r1, #24]
 800b960:	b085      	sub	sp, #20
 800b962:	296e      	cmp	r1, #110	; 0x6e
 800b964:	4617      	mov	r7, r2
 800b966:	4606      	mov	r6, r0
 800b968:	4698      	mov	r8, r3
 800b96a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b96c:	f000 80b3 	beq.w	800bad6 <_printf_i+0x182>
 800b970:	d822      	bhi.n	800b9b8 <_printf_i+0x64>
 800b972:	2963      	cmp	r1, #99	; 0x63
 800b974:	d036      	beq.n	800b9e4 <_printf_i+0x90>
 800b976:	d80a      	bhi.n	800b98e <_printf_i+0x3a>
 800b978:	2900      	cmp	r1, #0
 800b97a:	f000 80b9 	beq.w	800baf0 <_printf_i+0x19c>
 800b97e:	2958      	cmp	r1, #88	; 0x58
 800b980:	f000 8083 	beq.w	800ba8a <_printf_i+0x136>
 800b984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b988:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b98c:	e032      	b.n	800b9f4 <_printf_i+0xa0>
 800b98e:	2964      	cmp	r1, #100	; 0x64
 800b990:	d001      	beq.n	800b996 <_printf_i+0x42>
 800b992:	2969      	cmp	r1, #105	; 0x69
 800b994:	d1f6      	bne.n	800b984 <_printf_i+0x30>
 800b996:	6820      	ldr	r0, [r4, #0]
 800b998:	6813      	ldr	r3, [r2, #0]
 800b99a:	0605      	lsls	r5, r0, #24
 800b99c:	f103 0104 	add.w	r1, r3, #4
 800b9a0:	d52a      	bpl.n	800b9f8 <_printf_i+0xa4>
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	6011      	str	r1, [r2, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	da03      	bge.n	800b9b2 <_printf_i+0x5e>
 800b9aa:	222d      	movs	r2, #45	; 0x2d
 800b9ac:	425b      	negs	r3, r3
 800b9ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b9b2:	486f      	ldr	r0, [pc, #444]	; (800bb70 <_printf_i+0x21c>)
 800b9b4:	220a      	movs	r2, #10
 800b9b6:	e039      	b.n	800ba2c <_printf_i+0xd8>
 800b9b8:	2973      	cmp	r1, #115	; 0x73
 800b9ba:	f000 809d 	beq.w	800baf8 <_printf_i+0x1a4>
 800b9be:	d808      	bhi.n	800b9d2 <_printf_i+0x7e>
 800b9c0:	296f      	cmp	r1, #111	; 0x6f
 800b9c2:	d020      	beq.n	800ba06 <_printf_i+0xb2>
 800b9c4:	2970      	cmp	r1, #112	; 0x70
 800b9c6:	d1dd      	bne.n	800b984 <_printf_i+0x30>
 800b9c8:	6823      	ldr	r3, [r4, #0]
 800b9ca:	f043 0320 	orr.w	r3, r3, #32
 800b9ce:	6023      	str	r3, [r4, #0]
 800b9d0:	e003      	b.n	800b9da <_printf_i+0x86>
 800b9d2:	2975      	cmp	r1, #117	; 0x75
 800b9d4:	d017      	beq.n	800ba06 <_printf_i+0xb2>
 800b9d6:	2978      	cmp	r1, #120	; 0x78
 800b9d8:	d1d4      	bne.n	800b984 <_printf_i+0x30>
 800b9da:	2378      	movs	r3, #120	; 0x78
 800b9dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9e0:	4864      	ldr	r0, [pc, #400]	; (800bb74 <_printf_i+0x220>)
 800b9e2:	e055      	b.n	800ba90 <_printf_i+0x13c>
 800b9e4:	6813      	ldr	r3, [r2, #0]
 800b9e6:	1d19      	adds	r1, r3, #4
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	6011      	str	r1, [r2, #0]
 800b9ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e08c      	b.n	800bb12 <_printf_i+0x1be>
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	6011      	str	r1, [r2, #0]
 800b9fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba00:	bf18      	it	ne
 800ba02:	b21b      	sxthne	r3, r3
 800ba04:	e7cf      	b.n	800b9a6 <_printf_i+0x52>
 800ba06:	6813      	ldr	r3, [r2, #0]
 800ba08:	6825      	ldr	r5, [r4, #0]
 800ba0a:	1d18      	adds	r0, r3, #4
 800ba0c:	6010      	str	r0, [r2, #0]
 800ba0e:	0628      	lsls	r0, r5, #24
 800ba10:	d501      	bpl.n	800ba16 <_printf_i+0xc2>
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	e002      	b.n	800ba1c <_printf_i+0xc8>
 800ba16:	0668      	lsls	r0, r5, #25
 800ba18:	d5fb      	bpl.n	800ba12 <_printf_i+0xbe>
 800ba1a:	881b      	ldrh	r3, [r3, #0]
 800ba1c:	4854      	ldr	r0, [pc, #336]	; (800bb70 <_printf_i+0x21c>)
 800ba1e:	296f      	cmp	r1, #111	; 0x6f
 800ba20:	bf14      	ite	ne
 800ba22:	220a      	movne	r2, #10
 800ba24:	2208      	moveq	r2, #8
 800ba26:	2100      	movs	r1, #0
 800ba28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba2c:	6865      	ldr	r5, [r4, #4]
 800ba2e:	60a5      	str	r5, [r4, #8]
 800ba30:	2d00      	cmp	r5, #0
 800ba32:	f2c0 8095 	blt.w	800bb60 <_printf_i+0x20c>
 800ba36:	6821      	ldr	r1, [r4, #0]
 800ba38:	f021 0104 	bic.w	r1, r1, #4
 800ba3c:	6021      	str	r1, [r4, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d13d      	bne.n	800babe <_printf_i+0x16a>
 800ba42:	2d00      	cmp	r5, #0
 800ba44:	f040 808e 	bne.w	800bb64 <_printf_i+0x210>
 800ba48:	4665      	mov	r5, ip
 800ba4a:	2a08      	cmp	r2, #8
 800ba4c:	d10b      	bne.n	800ba66 <_printf_i+0x112>
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	07db      	lsls	r3, r3, #31
 800ba52:	d508      	bpl.n	800ba66 <_printf_i+0x112>
 800ba54:	6923      	ldr	r3, [r4, #16]
 800ba56:	6862      	ldr	r2, [r4, #4]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	bfde      	ittt	le
 800ba5c:	2330      	movle	r3, #48	; 0x30
 800ba5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba62:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ba66:	ebac 0305 	sub.w	r3, ip, r5
 800ba6a:	6123      	str	r3, [r4, #16]
 800ba6c:	f8cd 8000 	str.w	r8, [sp]
 800ba70:	463b      	mov	r3, r7
 800ba72:	aa03      	add	r2, sp, #12
 800ba74:	4621      	mov	r1, r4
 800ba76:	4630      	mov	r0, r6
 800ba78:	f7ff fef6 	bl	800b868 <_printf_common>
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	d14d      	bne.n	800bb1c <_printf_i+0x1c8>
 800ba80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba84:	b005      	add	sp, #20
 800ba86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba8a:	4839      	ldr	r0, [pc, #228]	; (800bb70 <_printf_i+0x21c>)
 800ba8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ba90:	6813      	ldr	r3, [r2, #0]
 800ba92:	6821      	ldr	r1, [r4, #0]
 800ba94:	1d1d      	adds	r5, r3, #4
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6015      	str	r5, [r2, #0]
 800ba9a:	060a      	lsls	r2, r1, #24
 800ba9c:	d50b      	bpl.n	800bab6 <_printf_i+0x162>
 800ba9e:	07ca      	lsls	r2, r1, #31
 800baa0:	bf44      	itt	mi
 800baa2:	f041 0120 	orrmi.w	r1, r1, #32
 800baa6:	6021      	strmi	r1, [r4, #0]
 800baa8:	b91b      	cbnz	r3, 800bab2 <_printf_i+0x15e>
 800baaa:	6822      	ldr	r2, [r4, #0]
 800baac:	f022 0220 	bic.w	r2, r2, #32
 800bab0:	6022      	str	r2, [r4, #0]
 800bab2:	2210      	movs	r2, #16
 800bab4:	e7b7      	b.n	800ba26 <_printf_i+0xd2>
 800bab6:	064d      	lsls	r5, r1, #25
 800bab8:	bf48      	it	mi
 800baba:	b29b      	uxthmi	r3, r3
 800babc:	e7ef      	b.n	800ba9e <_printf_i+0x14a>
 800babe:	4665      	mov	r5, ip
 800bac0:	fbb3 f1f2 	udiv	r1, r3, r2
 800bac4:	fb02 3311 	mls	r3, r2, r1, r3
 800bac8:	5cc3      	ldrb	r3, [r0, r3]
 800baca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bace:	460b      	mov	r3, r1
 800bad0:	2900      	cmp	r1, #0
 800bad2:	d1f5      	bne.n	800bac0 <_printf_i+0x16c>
 800bad4:	e7b9      	b.n	800ba4a <_printf_i+0xf6>
 800bad6:	6813      	ldr	r3, [r2, #0]
 800bad8:	6825      	ldr	r5, [r4, #0]
 800bada:	6961      	ldr	r1, [r4, #20]
 800badc:	1d18      	adds	r0, r3, #4
 800bade:	6010      	str	r0, [r2, #0]
 800bae0:	0628      	lsls	r0, r5, #24
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	d501      	bpl.n	800baea <_printf_i+0x196>
 800bae6:	6019      	str	r1, [r3, #0]
 800bae8:	e002      	b.n	800baf0 <_printf_i+0x19c>
 800baea:	066a      	lsls	r2, r5, #25
 800baec:	d5fb      	bpl.n	800bae6 <_printf_i+0x192>
 800baee:	8019      	strh	r1, [r3, #0]
 800baf0:	2300      	movs	r3, #0
 800baf2:	6123      	str	r3, [r4, #16]
 800baf4:	4665      	mov	r5, ip
 800baf6:	e7b9      	b.n	800ba6c <_printf_i+0x118>
 800baf8:	6813      	ldr	r3, [r2, #0]
 800bafa:	1d19      	adds	r1, r3, #4
 800bafc:	6011      	str	r1, [r2, #0]
 800bafe:	681d      	ldr	r5, [r3, #0]
 800bb00:	6862      	ldr	r2, [r4, #4]
 800bb02:	2100      	movs	r1, #0
 800bb04:	4628      	mov	r0, r5
 800bb06:	f7f4 fb7b 	bl	8000200 <memchr>
 800bb0a:	b108      	cbz	r0, 800bb10 <_printf_i+0x1bc>
 800bb0c:	1b40      	subs	r0, r0, r5
 800bb0e:	6060      	str	r0, [r4, #4]
 800bb10:	6863      	ldr	r3, [r4, #4]
 800bb12:	6123      	str	r3, [r4, #16]
 800bb14:	2300      	movs	r3, #0
 800bb16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb1a:	e7a7      	b.n	800ba6c <_printf_i+0x118>
 800bb1c:	6923      	ldr	r3, [r4, #16]
 800bb1e:	462a      	mov	r2, r5
 800bb20:	4639      	mov	r1, r7
 800bb22:	4630      	mov	r0, r6
 800bb24:	47c0      	blx	r8
 800bb26:	3001      	adds	r0, #1
 800bb28:	d0aa      	beq.n	800ba80 <_printf_i+0x12c>
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	079b      	lsls	r3, r3, #30
 800bb2e:	d413      	bmi.n	800bb58 <_printf_i+0x204>
 800bb30:	68e0      	ldr	r0, [r4, #12]
 800bb32:	9b03      	ldr	r3, [sp, #12]
 800bb34:	4298      	cmp	r0, r3
 800bb36:	bfb8      	it	lt
 800bb38:	4618      	movlt	r0, r3
 800bb3a:	e7a3      	b.n	800ba84 <_printf_i+0x130>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	464a      	mov	r2, r9
 800bb40:	4639      	mov	r1, r7
 800bb42:	4630      	mov	r0, r6
 800bb44:	47c0      	blx	r8
 800bb46:	3001      	adds	r0, #1
 800bb48:	d09a      	beq.n	800ba80 <_printf_i+0x12c>
 800bb4a:	3501      	adds	r5, #1
 800bb4c:	68e3      	ldr	r3, [r4, #12]
 800bb4e:	9a03      	ldr	r2, [sp, #12]
 800bb50:	1a9b      	subs	r3, r3, r2
 800bb52:	42ab      	cmp	r3, r5
 800bb54:	dcf2      	bgt.n	800bb3c <_printf_i+0x1e8>
 800bb56:	e7eb      	b.n	800bb30 <_printf_i+0x1dc>
 800bb58:	2500      	movs	r5, #0
 800bb5a:	f104 0919 	add.w	r9, r4, #25
 800bb5e:	e7f5      	b.n	800bb4c <_printf_i+0x1f8>
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1ac      	bne.n	800babe <_printf_i+0x16a>
 800bb64:	7803      	ldrb	r3, [r0, #0]
 800bb66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb6e:	e76c      	b.n	800ba4a <_printf_i+0xf6>
 800bb70:	0800cf29 	.word	0x0800cf29
 800bb74:	0800cf3a 	.word	0x0800cf3a

0800bb78 <_scanf_chars>:
 800bb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb7c:	4615      	mov	r5, r2
 800bb7e:	688a      	ldr	r2, [r1, #8]
 800bb80:	4680      	mov	r8, r0
 800bb82:	460c      	mov	r4, r1
 800bb84:	b932      	cbnz	r2, 800bb94 <_scanf_chars+0x1c>
 800bb86:	698a      	ldr	r2, [r1, #24]
 800bb88:	2a00      	cmp	r2, #0
 800bb8a:	bf14      	ite	ne
 800bb8c:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800bb90:	2201      	moveq	r2, #1
 800bb92:	608a      	str	r2, [r1, #8]
 800bb94:	6822      	ldr	r2, [r4, #0]
 800bb96:	06d1      	lsls	r1, r2, #27
 800bb98:	bf5f      	itttt	pl
 800bb9a:	681a      	ldrpl	r2, [r3, #0]
 800bb9c:	1d11      	addpl	r1, r2, #4
 800bb9e:	6019      	strpl	r1, [r3, #0]
 800bba0:	6817      	ldrpl	r7, [r2, #0]
 800bba2:	2600      	movs	r6, #0
 800bba4:	69a3      	ldr	r3, [r4, #24]
 800bba6:	b1db      	cbz	r3, 800bbe0 <_scanf_chars+0x68>
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d107      	bne.n	800bbbc <_scanf_chars+0x44>
 800bbac:	682b      	ldr	r3, [r5, #0]
 800bbae:	6962      	ldr	r2, [r4, #20]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	5cd3      	ldrb	r3, [r2, r3]
 800bbb4:	b9a3      	cbnz	r3, 800bbe0 <_scanf_chars+0x68>
 800bbb6:	2e00      	cmp	r6, #0
 800bbb8:	d132      	bne.n	800bc20 <_scanf_chars+0xa8>
 800bbba:	e006      	b.n	800bbca <_scanf_chars+0x52>
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d007      	beq.n	800bbd0 <_scanf_chars+0x58>
 800bbc0:	2e00      	cmp	r6, #0
 800bbc2:	d12d      	bne.n	800bc20 <_scanf_chars+0xa8>
 800bbc4:	69a3      	ldr	r3, [r4, #24]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d12a      	bne.n	800bc20 <_scanf_chars+0xa8>
 800bbca:	2001      	movs	r0, #1
 800bbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd0:	f000 fab6 	bl	800c140 <__locale_ctype_ptr>
 800bbd4:	682b      	ldr	r3, [r5, #0]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	4418      	add	r0, r3
 800bbda:	7843      	ldrb	r3, [r0, #1]
 800bbdc:	071b      	lsls	r3, r3, #28
 800bbde:	d4ef      	bmi.n	800bbc0 <_scanf_chars+0x48>
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	06da      	lsls	r2, r3, #27
 800bbe4:	bf5e      	ittt	pl
 800bbe6:	682b      	ldrpl	r3, [r5, #0]
 800bbe8:	781b      	ldrbpl	r3, [r3, #0]
 800bbea:	703b      	strbpl	r3, [r7, #0]
 800bbec:	682a      	ldr	r2, [r5, #0]
 800bbee:	686b      	ldr	r3, [r5, #4]
 800bbf0:	f102 0201 	add.w	r2, r2, #1
 800bbf4:	602a      	str	r2, [r5, #0]
 800bbf6:	68a2      	ldr	r2, [r4, #8]
 800bbf8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bbfc:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800bc00:	606b      	str	r3, [r5, #4]
 800bc02:	f106 0601 	add.w	r6, r6, #1
 800bc06:	bf58      	it	pl
 800bc08:	3701      	addpl	r7, #1
 800bc0a:	60a2      	str	r2, [r4, #8]
 800bc0c:	b142      	cbz	r2, 800bc20 <_scanf_chars+0xa8>
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	dcc8      	bgt.n	800bba4 <_scanf_chars+0x2c>
 800bc12:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bc16:	4629      	mov	r1, r5
 800bc18:	4640      	mov	r0, r8
 800bc1a:	4798      	blx	r3
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d0c1      	beq.n	800bba4 <_scanf_chars+0x2c>
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	f013 0310 	ands.w	r3, r3, #16
 800bc26:	d105      	bne.n	800bc34 <_scanf_chars+0xbc>
 800bc28:	68e2      	ldr	r2, [r4, #12]
 800bc2a:	3201      	adds	r2, #1
 800bc2c:	60e2      	str	r2, [r4, #12]
 800bc2e:	69a2      	ldr	r2, [r4, #24]
 800bc30:	b102      	cbz	r2, 800bc34 <_scanf_chars+0xbc>
 800bc32:	703b      	strb	r3, [r7, #0]
 800bc34:	6923      	ldr	r3, [r4, #16]
 800bc36:	441e      	add	r6, r3
 800bc38:	6126      	str	r6, [r4, #16]
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	e7c6      	b.n	800bbcc <_scanf_chars+0x54>
	...

0800bc40 <_scanf_i>:
 800bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc44:	469a      	mov	sl, r3
 800bc46:	4b74      	ldr	r3, [pc, #464]	; (800be18 <_scanf_i+0x1d8>)
 800bc48:	460c      	mov	r4, r1
 800bc4a:	4683      	mov	fp, r0
 800bc4c:	4616      	mov	r6, r2
 800bc4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc52:	b087      	sub	sp, #28
 800bc54:	ab03      	add	r3, sp, #12
 800bc56:	68a7      	ldr	r7, [r4, #8]
 800bc58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bc5c:	4b6f      	ldr	r3, [pc, #444]	; (800be1c <_scanf_i+0x1dc>)
 800bc5e:	69a1      	ldr	r1, [r4, #24]
 800bc60:	4a6f      	ldr	r2, [pc, #444]	; (800be20 <_scanf_i+0x1e0>)
 800bc62:	2903      	cmp	r1, #3
 800bc64:	bf08      	it	eq
 800bc66:	461a      	moveq	r2, r3
 800bc68:	1e7b      	subs	r3, r7, #1
 800bc6a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800bc6e:	bf84      	itt	hi
 800bc70:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bc74:	60a3      	strhi	r3, [r4, #8]
 800bc76:	6823      	ldr	r3, [r4, #0]
 800bc78:	9200      	str	r2, [sp, #0]
 800bc7a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bc7e:	bf88      	it	hi
 800bc80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bc84:	f104 091c 	add.w	r9, r4, #28
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bf8c      	ite	hi
 800bc8c:	197f      	addhi	r7, r7, r5
 800bc8e:	2700      	movls	r7, #0
 800bc90:	464b      	mov	r3, r9
 800bc92:	f04f 0800 	mov.w	r8, #0
 800bc96:	9301      	str	r3, [sp, #4]
 800bc98:	6831      	ldr	r1, [r6, #0]
 800bc9a:	ab03      	add	r3, sp, #12
 800bc9c:	2202      	movs	r2, #2
 800bc9e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bca2:	7809      	ldrb	r1, [r1, #0]
 800bca4:	f7f4 faac 	bl	8000200 <memchr>
 800bca8:	9b01      	ldr	r3, [sp, #4]
 800bcaa:	b330      	cbz	r0, 800bcfa <_scanf_i+0xba>
 800bcac:	f1b8 0f01 	cmp.w	r8, #1
 800bcb0:	d15a      	bne.n	800bd68 <_scanf_i+0x128>
 800bcb2:	6862      	ldr	r2, [r4, #4]
 800bcb4:	b92a      	cbnz	r2, 800bcc2 <_scanf_i+0x82>
 800bcb6:	6822      	ldr	r2, [r4, #0]
 800bcb8:	2108      	movs	r1, #8
 800bcba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcbe:	6061      	str	r1, [r4, #4]
 800bcc0:	6022      	str	r2, [r4, #0]
 800bcc2:	6822      	ldr	r2, [r4, #0]
 800bcc4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bcc8:	6022      	str	r2, [r4, #0]
 800bcca:	68a2      	ldr	r2, [r4, #8]
 800bccc:	1e51      	subs	r1, r2, #1
 800bcce:	60a1      	str	r1, [r4, #8]
 800bcd0:	b19a      	cbz	r2, 800bcfa <_scanf_i+0xba>
 800bcd2:	6832      	ldr	r2, [r6, #0]
 800bcd4:	1c51      	adds	r1, r2, #1
 800bcd6:	6031      	str	r1, [r6, #0]
 800bcd8:	7812      	ldrb	r2, [r2, #0]
 800bcda:	701a      	strb	r2, [r3, #0]
 800bcdc:	1c5d      	adds	r5, r3, #1
 800bcde:	6873      	ldr	r3, [r6, #4]
 800bce0:	3b01      	subs	r3, #1
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	6073      	str	r3, [r6, #4]
 800bce6:	dc07      	bgt.n	800bcf8 <_scanf_i+0xb8>
 800bce8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bcec:	4631      	mov	r1, r6
 800bcee:	4658      	mov	r0, fp
 800bcf0:	4798      	blx	r3
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	f040 8086 	bne.w	800be04 <_scanf_i+0x1c4>
 800bcf8:	462b      	mov	r3, r5
 800bcfa:	f108 0801 	add.w	r8, r8, #1
 800bcfe:	f1b8 0f03 	cmp.w	r8, #3
 800bd02:	d1c8      	bne.n	800bc96 <_scanf_i+0x56>
 800bd04:	6862      	ldr	r2, [r4, #4]
 800bd06:	b90a      	cbnz	r2, 800bd0c <_scanf_i+0xcc>
 800bd08:	220a      	movs	r2, #10
 800bd0a:	6062      	str	r2, [r4, #4]
 800bd0c:	6862      	ldr	r2, [r4, #4]
 800bd0e:	4945      	ldr	r1, [pc, #276]	; (800be24 <_scanf_i+0x1e4>)
 800bd10:	6960      	ldr	r0, [r4, #20]
 800bd12:	9301      	str	r3, [sp, #4]
 800bd14:	1a89      	subs	r1, r1, r2
 800bd16:	f000 f887 	bl	800be28 <__sccl>
 800bd1a:	9b01      	ldr	r3, [sp, #4]
 800bd1c:	f04f 0800 	mov.w	r8, #0
 800bd20:	461d      	mov	r5, r3
 800bd22:	68a3      	ldr	r3, [r4, #8]
 800bd24:	6822      	ldr	r2, [r4, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d03a      	beq.n	800bda0 <_scanf_i+0x160>
 800bd2a:	6831      	ldr	r1, [r6, #0]
 800bd2c:	6960      	ldr	r0, [r4, #20]
 800bd2e:	f891 c000 	ldrb.w	ip, [r1]
 800bd32:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d032      	beq.n	800bda0 <_scanf_i+0x160>
 800bd3a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bd3e:	d121      	bne.n	800bd84 <_scanf_i+0x144>
 800bd40:	0510      	lsls	r0, r2, #20
 800bd42:	d51f      	bpl.n	800bd84 <_scanf_i+0x144>
 800bd44:	f108 0801 	add.w	r8, r8, #1
 800bd48:	b117      	cbz	r7, 800bd50 <_scanf_i+0x110>
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	3f01      	subs	r7, #1
 800bd4e:	60a3      	str	r3, [r4, #8]
 800bd50:	6873      	ldr	r3, [r6, #4]
 800bd52:	3b01      	subs	r3, #1
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	6073      	str	r3, [r6, #4]
 800bd58:	dd1b      	ble.n	800bd92 <_scanf_i+0x152>
 800bd5a:	6833      	ldr	r3, [r6, #0]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	6033      	str	r3, [r6, #0]
 800bd60:	68a3      	ldr	r3, [r4, #8]
 800bd62:	3b01      	subs	r3, #1
 800bd64:	60a3      	str	r3, [r4, #8]
 800bd66:	e7dc      	b.n	800bd22 <_scanf_i+0xe2>
 800bd68:	f1b8 0f02 	cmp.w	r8, #2
 800bd6c:	d1ad      	bne.n	800bcca <_scanf_i+0x8a>
 800bd6e:	6822      	ldr	r2, [r4, #0]
 800bd70:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bd74:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bd78:	d1bf      	bne.n	800bcfa <_scanf_i+0xba>
 800bd7a:	2110      	movs	r1, #16
 800bd7c:	6061      	str	r1, [r4, #4]
 800bd7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd82:	e7a1      	b.n	800bcc8 <_scanf_i+0x88>
 800bd84:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bd88:	6022      	str	r2, [r4, #0]
 800bd8a:	780b      	ldrb	r3, [r1, #0]
 800bd8c:	702b      	strb	r3, [r5, #0]
 800bd8e:	3501      	adds	r5, #1
 800bd90:	e7de      	b.n	800bd50 <_scanf_i+0x110>
 800bd92:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd96:	4631      	mov	r1, r6
 800bd98:	4658      	mov	r0, fp
 800bd9a:	4798      	blx	r3
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d0df      	beq.n	800bd60 <_scanf_i+0x120>
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	05d9      	lsls	r1, r3, #23
 800bda4:	d50c      	bpl.n	800bdc0 <_scanf_i+0x180>
 800bda6:	454d      	cmp	r5, r9
 800bda8:	d908      	bls.n	800bdbc <_scanf_i+0x17c>
 800bdaa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bdae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdb2:	4632      	mov	r2, r6
 800bdb4:	4658      	mov	r0, fp
 800bdb6:	4798      	blx	r3
 800bdb8:	1e6f      	subs	r7, r5, #1
 800bdba:	463d      	mov	r5, r7
 800bdbc:	454d      	cmp	r5, r9
 800bdbe:	d029      	beq.n	800be14 <_scanf_i+0x1d4>
 800bdc0:	6822      	ldr	r2, [r4, #0]
 800bdc2:	f012 0210 	ands.w	r2, r2, #16
 800bdc6:	d113      	bne.n	800bdf0 <_scanf_i+0x1b0>
 800bdc8:	702a      	strb	r2, [r5, #0]
 800bdca:	6863      	ldr	r3, [r4, #4]
 800bdcc:	9e00      	ldr	r6, [sp, #0]
 800bdce:	4649      	mov	r1, r9
 800bdd0:	4658      	mov	r0, fp
 800bdd2:	47b0      	blx	r6
 800bdd4:	f8da 3000 	ldr.w	r3, [sl]
 800bdd8:	6821      	ldr	r1, [r4, #0]
 800bdda:	1d1a      	adds	r2, r3, #4
 800bddc:	f8ca 2000 	str.w	r2, [sl]
 800bde0:	f011 0f20 	tst.w	r1, #32
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	d010      	beq.n	800be0a <_scanf_i+0x1ca>
 800bde8:	6018      	str	r0, [r3, #0]
 800bdea:	68e3      	ldr	r3, [r4, #12]
 800bdec:	3301      	adds	r3, #1
 800bdee:	60e3      	str	r3, [r4, #12]
 800bdf0:	eba5 0509 	sub.w	r5, r5, r9
 800bdf4:	44a8      	add	r8, r5
 800bdf6:	6925      	ldr	r5, [r4, #16]
 800bdf8:	4445      	add	r5, r8
 800bdfa:	6125      	str	r5, [r4, #16]
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	b007      	add	sp, #28
 800be00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be04:	f04f 0800 	mov.w	r8, #0
 800be08:	e7ca      	b.n	800bda0 <_scanf_i+0x160>
 800be0a:	07ca      	lsls	r2, r1, #31
 800be0c:	bf4c      	ite	mi
 800be0e:	8018      	strhmi	r0, [r3, #0]
 800be10:	6018      	strpl	r0, [r3, #0]
 800be12:	e7ea      	b.n	800bdea <_scanf_i+0x1aa>
 800be14:	2001      	movs	r0, #1
 800be16:	e7f2      	b.n	800bdfe <_scanf_i+0x1be>
 800be18:	0800cef4 	.word	0x0800cef4
 800be1c:	0800bf89 	.word	0x0800bf89
 800be20:	0800c0a1 	.word	0x0800c0a1
 800be24:	0800cf5b 	.word	0x0800cf5b

0800be28 <__sccl>:
 800be28:	b570      	push	{r4, r5, r6, lr}
 800be2a:	780b      	ldrb	r3, [r1, #0]
 800be2c:	2b5e      	cmp	r3, #94	; 0x5e
 800be2e:	bf13      	iteet	ne
 800be30:	1c4a      	addne	r2, r1, #1
 800be32:	1c8a      	addeq	r2, r1, #2
 800be34:	784b      	ldrbeq	r3, [r1, #1]
 800be36:	2100      	movne	r1, #0
 800be38:	bf08      	it	eq
 800be3a:	2101      	moveq	r1, #1
 800be3c:	1e44      	subs	r4, r0, #1
 800be3e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800be42:	f804 1f01 	strb.w	r1, [r4, #1]!
 800be46:	42ac      	cmp	r4, r5
 800be48:	d1fb      	bne.n	800be42 <__sccl+0x1a>
 800be4a:	b913      	cbnz	r3, 800be52 <__sccl+0x2a>
 800be4c:	3a01      	subs	r2, #1
 800be4e:	4610      	mov	r0, r2
 800be50:	bd70      	pop	{r4, r5, r6, pc}
 800be52:	f081 0401 	eor.w	r4, r1, #1
 800be56:	54c4      	strb	r4, [r0, r3]
 800be58:	1c51      	adds	r1, r2, #1
 800be5a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800be5e:	2d2d      	cmp	r5, #45	; 0x2d
 800be60:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 800be64:	460a      	mov	r2, r1
 800be66:	d006      	beq.n	800be76 <__sccl+0x4e>
 800be68:	2d5d      	cmp	r5, #93	; 0x5d
 800be6a:	d0f0      	beq.n	800be4e <__sccl+0x26>
 800be6c:	b90d      	cbnz	r5, 800be72 <__sccl+0x4a>
 800be6e:	4632      	mov	r2, r6
 800be70:	e7ed      	b.n	800be4e <__sccl+0x26>
 800be72:	462b      	mov	r3, r5
 800be74:	e7ef      	b.n	800be56 <__sccl+0x2e>
 800be76:	780e      	ldrb	r6, [r1, #0]
 800be78:	2e5d      	cmp	r6, #93	; 0x5d
 800be7a:	d0fa      	beq.n	800be72 <__sccl+0x4a>
 800be7c:	42b3      	cmp	r3, r6
 800be7e:	dcf8      	bgt.n	800be72 <__sccl+0x4a>
 800be80:	3301      	adds	r3, #1
 800be82:	429e      	cmp	r6, r3
 800be84:	54c4      	strb	r4, [r0, r3]
 800be86:	dcfb      	bgt.n	800be80 <__sccl+0x58>
 800be88:	3102      	adds	r1, #2
 800be8a:	e7e6      	b.n	800be5a <__sccl+0x32>

0800be8c <__seofread>:
 800be8c:	2000      	movs	r0, #0
 800be8e:	4770      	bx	lr

0800be90 <_strtol_l.isra.0>:
 800be90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be94:	4680      	mov	r8, r0
 800be96:	4689      	mov	r9, r1
 800be98:	4692      	mov	sl, r2
 800be9a:	461e      	mov	r6, r3
 800be9c:	460f      	mov	r7, r1
 800be9e:	463d      	mov	r5, r7
 800bea0:	9808      	ldr	r0, [sp, #32]
 800bea2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bea6:	f000 f947 	bl	800c138 <__locale_ctype_ptr_l>
 800beaa:	4420      	add	r0, r4
 800beac:	7843      	ldrb	r3, [r0, #1]
 800beae:	f013 0308 	ands.w	r3, r3, #8
 800beb2:	d132      	bne.n	800bf1a <_strtol_l.isra.0+0x8a>
 800beb4:	2c2d      	cmp	r4, #45	; 0x2d
 800beb6:	d132      	bne.n	800bf1e <_strtol_l.isra.0+0x8e>
 800beb8:	787c      	ldrb	r4, [r7, #1]
 800beba:	1cbd      	adds	r5, r7, #2
 800bebc:	2201      	movs	r2, #1
 800bebe:	2e00      	cmp	r6, #0
 800bec0:	d05d      	beq.n	800bf7e <_strtol_l.isra.0+0xee>
 800bec2:	2e10      	cmp	r6, #16
 800bec4:	d109      	bne.n	800beda <_strtol_l.isra.0+0x4a>
 800bec6:	2c30      	cmp	r4, #48	; 0x30
 800bec8:	d107      	bne.n	800beda <_strtol_l.isra.0+0x4a>
 800beca:	782b      	ldrb	r3, [r5, #0]
 800becc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bed0:	2b58      	cmp	r3, #88	; 0x58
 800bed2:	d14f      	bne.n	800bf74 <_strtol_l.isra.0+0xe4>
 800bed4:	786c      	ldrb	r4, [r5, #1]
 800bed6:	2610      	movs	r6, #16
 800bed8:	3502      	adds	r5, #2
 800beda:	2a00      	cmp	r2, #0
 800bedc:	bf14      	ite	ne
 800bede:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bee2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bee6:	2700      	movs	r7, #0
 800bee8:	fbb1 fcf6 	udiv	ip, r1, r6
 800beec:	4638      	mov	r0, r7
 800beee:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bef2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bef6:	2b09      	cmp	r3, #9
 800bef8:	d817      	bhi.n	800bf2a <_strtol_l.isra.0+0x9a>
 800befa:	461c      	mov	r4, r3
 800befc:	42a6      	cmp	r6, r4
 800befe:	dd23      	ble.n	800bf48 <_strtol_l.isra.0+0xb8>
 800bf00:	1c7b      	adds	r3, r7, #1
 800bf02:	d007      	beq.n	800bf14 <_strtol_l.isra.0+0x84>
 800bf04:	4584      	cmp	ip, r0
 800bf06:	d31c      	bcc.n	800bf42 <_strtol_l.isra.0+0xb2>
 800bf08:	d101      	bne.n	800bf0e <_strtol_l.isra.0+0x7e>
 800bf0a:	45a6      	cmp	lr, r4
 800bf0c:	db19      	blt.n	800bf42 <_strtol_l.isra.0+0xb2>
 800bf0e:	fb00 4006 	mla	r0, r0, r6, r4
 800bf12:	2701      	movs	r7, #1
 800bf14:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf18:	e7eb      	b.n	800bef2 <_strtol_l.isra.0+0x62>
 800bf1a:	462f      	mov	r7, r5
 800bf1c:	e7bf      	b.n	800be9e <_strtol_l.isra.0+0xe>
 800bf1e:	2c2b      	cmp	r4, #43	; 0x2b
 800bf20:	bf04      	itt	eq
 800bf22:	1cbd      	addeq	r5, r7, #2
 800bf24:	787c      	ldrbeq	r4, [r7, #1]
 800bf26:	461a      	mov	r2, r3
 800bf28:	e7c9      	b.n	800bebe <_strtol_l.isra.0+0x2e>
 800bf2a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bf2e:	2b19      	cmp	r3, #25
 800bf30:	d801      	bhi.n	800bf36 <_strtol_l.isra.0+0xa6>
 800bf32:	3c37      	subs	r4, #55	; 0x37
 800bf34:	e7e2      	b.n	800befc <_strtol_l.isra.0+0x6c>
 800bf36:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bf3a:	2b19      	cmp	r3, #25
 800bf3c:	d804      	bhi.n	800bf48 <_strtol_l.isra.0+0xb8>
 800bf3e:	3c57      	subs	r4, #87	; 0x57
 800bf40:	e7dc      	b.n	800befc <_strtol_l.isra.0+0x6c>
 800bf42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bf46:	e7e5      	b.n	800bf14 <_strtol_l.isra.0+0x84>
 800bf48:	1c7b      	adds	r3, r7, #1
 800bf4a:	d108      	bne.n	800bf5e <_strtol_l.isra.0+0xce>
 800bf4c:	2322      	movs	r3, #34	; 0x22
 800bf4e:	f8c8 3000 	str.w	r3, [r8]
 800bf52:	4608      	mov	r0, r1
 800bf54:	f1ba 0f00 	cmp.w	sl, #0
 800bf58:	d107      	bne.n	800bf6a <_strtol_l.isra.0+0xda>
 800bf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5e:	b102      	cbz	r2, 800bf62 <_strtol_l.isra.0+0xd2>
 800bf60:	4240      	negs	r0, r0
 800bf62:	f1ba 0f00 	cmp.w	sl, #0
 800bf66:	d0f8      	beq.n	800bf5a <_strtol_l.isra.0+0xca>
 800bf68:	b10f      	cbz	r7, 800bf6e <_strtol_l.isra.0+0xde>
 800bf6a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800bf6e:	f8ca 9000 	str.w	r9, [sl]
 800bf72:	e7f2      	b.n	800bf5a <_strtol_l.isra.0+0xca>
 800bf74:	2430      	movs	r4, #48	; 0x30
 800bf76:	2e00      	cmp	r6, #0
 800bf78:	d1af      	bne.n	800beda <_strtol_l.isra.0+0x4a>
 800bf7a:	2608      	movs	r6, #8
 800bf7c:	e7ad      	b.n	800beda <_strtol_l.isra.0+0x4a>
 800bf7e:	2c30      	cmp	r4, #48	; 0x30
 800bf80:	d0a3      	beq.n	800beca <_strtol_l.isra.0+0x3a>
 800bf82:	260a      	movs	r6, #10
 800bf84:	e7a9      	b.n	800beda <_strtol_l.isra.0+0x4a>
	...

0800bf88 <_strtol_r>:
 800bf88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf8a:	4c06      	ldr	r4, [pc, #24]	; (800bfa4 <_strtol_r+0x1c>)
 800bf8c:	4d06      	ldr	r5, [pc, #24]	; (800bfa8 <_strtol_r+0x20>)
 800bf8e:	6824      	ldr	r4, [r4, #0]
 800bf90:	6a24      	ldr	r4, [r4, #32]
 800bf92:	2c00      	cmp	r4, #0
 800bf94:	bf08      	it	eq
 800bf96:	462c      	moveq	r4, r5
 800bf98:	9400      	str	r4, [sp, #0]
 800bf9a:	f7ff ff79 	bl	800be90 <_strtol_l.isra.0>
 800bf9e:	b003      	add	sp, #12
 800bfa0:	bd30      	pop	{r4, r5, pc}
 800bfa2:	bf00      	nop
 800bfa4:	2000058c 	.word	0x2000058c
 800bfa8:	200005f0 	.word	0x200005f0

0800bfac <_strtoul_l.isra.0>:
 800bfac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfb0:	4680      	mov	r8, r0
 800bfb2:	4689      	mov	r9, r1
 800bfb4:	4692      	mov	sl, r2
 800bfb6:	461e      	mov	r6, r3
 800bfb8:	460f      	mov	r7, r1
 800bfba:	463d      	mov	r5, r7
 800bfbc:	9808      	ldr	r0, [sp, #32]
 800bfbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfc2:	f000 f8b9 	bl	800c138 <__locale_ctype_ptr_l>
 800bfc6:	4420      	add	r0, r4
 800bfc8:	7843      	ldrb	r3, [r0, #1]
 800bfca:	f013 0308 	ands.w	r3, r3, #8
 800bfce:	d130      	bne.n	800c032 <_strtoul_l.isra.0+0x86>
 800bfd0:	2c2d      	cmp	r4, #45	; 0x2d
 800bfd2:	d130      	bne.n	800c036 <_strtoul_l.isra.0+0x8a>
 800bfd4:	787c      	ldrb	r4, [r7, #1]
 800bfd6:	1cbd      	adds	r5, r7, #2
 800bfd8:	2101      	movs	r1, #1
 800bfda:	2e00      	cmp	r6, #0
 800bfdc:	d05c      	beq.n	800c098 <_strtoul_l.isra.0+0xec>
 800bfde:	2e10      	cmp	r6, #16
 800bfe0:	d109      	bne.n	800bff6 <_strtoul_l.isra.0+0x4a>
 800bfe2:	2c30      	cmp	r4, #48	; 0x30
 800bfe4:	d107      	bne.n	800bff6 <_strtoul_l.isra.0+0x4a>
 800bfe6:	782b      	ldrb	r3, [r5, #0]
 800bfe8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bfec:	2b58      	cmp	r3, #88	; 0x58
 800bfee:	d14e      	bne.n	800c08e <_strtoul_l.isra.0+0xe2>
 800bff0:	786c      	ldrb	r4, [r5, #1]
 800bff2:	2610      	movs	r6, #16
 800bff4:	3502      	adds	r5, #2
 800bff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bffa:	2300      	movs	r3, #0
 800bffc:	fbb2 f2f6 	udiv	r2, r2, r6
 800c000:	fb06 fc02 	mul.w	ip, r6, r2
 800c004:	ea6f 0c0c 	mvn.w	ip, ip
 800c008:	4618      	mov	r0, r3
 800c00a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c00e:	2f09      	cmp	r7, #9
 800c010:	d817      	bhi.n	800c042 <_strtoul_l.isra.0+0x96>
 800c012:	463c      	mov	r4, r7
 800c014:	42a6      	cmp	r6, r4
 800c016:	dd23      	ble.n	800c060 <_strtoul_l.isra.0+0xb4>
 800c018:	2b00      	cmp	r3, #0
 800c01a:	db1e      	blt.n	800c05a <_strtoul_l.isra.0+0xae>
 800c01c:	4282      	cmp	r2, r0
 800c01e:	d31c      	bcc.n	800c05a <_strtoul_l.isra.0+0xae>
 800c020:	d101      	bne.n	800c026 <_strtoul_l.isra.0+0x7a>
 800c022:	45a4      	cmp	ip, r4
 800c024:	db19      	blt.n	800c05a <_strtoul_l.isra.0+0xae>
 800c026:	fb00 4006 	mla	r0, r0, r6, r4
 800c02a:	2301      	movs	r3, #1
 800c02c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c030:	e7eb      	b.n	800c00a <_strtoul_l.isra.0+0x5e>
 800c032:	462f      	mov	r7, r5
 800c034:	e7c1      	b.n	800bfba <_strtoul_l.isra.0+0xe>
 800c036:	2c2b      	cmp	r4, #43	; 0x2b
 800c038:	bf04      	itt	eq
 800c03a:	1cbd      	addeq	r5, r7, #2
 800c03c:	787c      	ldrbeq	r4, [r7, #1]
 800c03e:	4619      	mov	r1, r3
 800c040:	e7cb      	b.n	800bfda <_strtoul_l.isra.0+0x2e>
 800c042:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c046:	2f19      	cmp	r7, #25
 800c048:	d801      	bhi.n	800c04e <_strtoul_l.isra.0+0xa2>
 800c04a:	3c37      	subs	r4, #55	; 0x37
 800c04c:	e7e2      	b.n	800c014 <_strtoul_l.isra.0+0x68>
 800c04e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c052:	2f19      	cmp	r7, #25
 800c054:	d804      	bhi.n	800c060 <_strtoul_l.isra.0+0xb4>
 800c056:	3c57      	subs	r4, #87	; 0x57
 800c058:	e7dc      	b.n	800c014 <_strtoul_l.isra.0+0x68>
 800c05a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c05e:	e7e5      	b.n	800c02c <_strtoul_l.isra.0+0x80>
 800c060:	2b00      	cmp	r3, #0
 800c062:	da09      	bge.n	800c078 <_strtoul_l.isra.0+0xcc>
 800c064:	2322      	movs	r3, #34	; 0x22
 800c066:	f8c8 3000 	str.w	r3, [r8]
 800c06a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c06e:	f1ba 0f00 	cmp.w	sl, #0
 800c072:	d107      	bne.n	800c084 <_strtoul_l.isra.0+0xd8>
 800c074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c078:	b101      	cbz	r1, 800c07c <_strtoul_l.isra.0+0xd0>
 800c07a:	4240      	negs	r0, r0
 800c07c:	f1ba 0f00 	cmp.w	sl, #0
 800c080:	d0f8      	beq.n	800c074 <_strtoul_l.isra.0+0xc8>
 800c082:	b10b      	cbz	r3, 800c088 <_strtoul_l.isra.0+0xdc>
 800c084:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c088:	f8ca 9000 	str.w	r9, [sl]
 800c08c:	e7f2      	b.n	800c074 <_strtoul_l.isra.0+0xc8>
 800c08e:	2430      	movs	r4, #48	; 0x30
 800c090:	2e00      	cmp	r6, #0
 800c092:	d1b0      	bne.n	800bff6 <_strtoul_l.isra.0+0x4a>
 800c094:	2608      	movs	r6, #8
 800c096:	e7ae      	b.n	800bff6 <_strtoul_l.isra.0+0x4a>
 800c098:	2c30      	cmp	r4, #48	; 0x30
 800c09a:	d0a4      	beq.n	800bfe6 <_strtoul_l.isra.0+0x3a>
 800c09c:	260a      	movs	r6, #10
 800c09e:	e7aa      	b.n	800bff6 <_strtoul_l.isra.0+0x4a>

0800c0a0 <_strtoul_r>:
 800c0a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0a2:	4c06      	ldr	r4, [pc, #24]	; (800c0bc <_strtoul_r+0x1c>)
 800c0a4:	4d06      	ldr	r5, [pc, #24]	; (800c0c0 <_strtoul_r+0x20>)
 800c0a6:	6824      	ldr	r4, [r4, #0]
 800c0a8:	6a24      	ldr	r4, [r4, #32]
 800c0aa:	2c00      	cmp	r4, #0
 800c0ac:	bf08      	it	eq
 800c0ae:	462c      	moveq	r4, r5
 800c0b0:	9400      	str	r4, [sp, #0]
 800c0b2:	f7ff ff7b 	bl	800bfac <_strtoul_l.isra.0>
 800c0b6:	b003      	add	sp, #12
 800c0b8:	bd30      	pop	{r4, r5, pc}
 800c0ba:	bf00      	nop
 800c0bc:	2000058c 	.word	0x2000058c
 800c0c0:	200005f0 	.word	0x200005f0

0800c0c4 <__submore>:
 800c0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c0cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0d0:	4299      	cmp	r1, r3
 800c0d2:	d11d      	bne.n	800c110 <__submore+0x4c>
 800c0d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c0d8:	f7fe fff0 	bl	800b0bc <_malloc_r>
 800c0dc:	b918      	cbnz	r0, 800c0e6 <__submore+0x22>
 800c0de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ea:	63a3      	str	r3, [r4, #56]	; 0x38
 800c0ec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c0f0:	6360      	str	r0, [r4, #52]	; 0x34
 800c0f2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c0f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c0fa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c0fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c102:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c106:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c10a:	6020      	str	r0, [r4, #0]
 800c10c:	2000      	movs	r0, #0
 800c10e:	e7e8      	b.n	800c0e2 <__submore+0x1e>
 800c110:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c112:	0077      	lsls	r7, r6, #1
 800c114:	463a      	mov	r2, r7
 800c116:	f000 f84c 	bl	800c1b2 <_realloc_r>
 800c11a:	4605      	mov	r5, r0
 800c11c:	2800      	cmp	r0, #0
 800c11e:	d0de      	beq.n	800c0de <__submore+0x1a>
 800c120:	eb00 0806 	add.w	r8, r0, r6
 800c124:	4601      	mov	r1, r0
 800c126:	4632      	mov	r2, r6
 800c128:	4640      	mov	r0, r8
 800c12a:	f7fe ff65 	bl	800aff8 <memcpy>
 800c12e:	f8c4 8000 	str.w	r8, [r4]
 800c132:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c136:	e7e9      	b.n	800c10c <__submore+0x48>

0800c138 <__locale_ctype_ptr_l>:
 800c138:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c13c:	4770      	bx	lr
	...

0800c140 <__locale_ctype_ptr>:
 800c140:	4b04      	ldr	r3, [pc, #16]	; (800c154 <__locale_ctype_ptr+0x14>)
 800c142:	4a05      	ldr	r2, [pc, #20]	; (800c158 <__locale_ctype_ptr+0x18>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	6a1b      	ldr	r3, [r3, #32]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	bf08      	it	eq
 800c14c:	4613      	moveq	r3, r2
 800c14e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c152:	4770      	bx	lr
 800c154:	2000058c 	.word	0x2000058c
 800c158:	200005f0 	.word	0x200005f0

0800c15c <__ascii_mbtowc>:
 800c15c:	b082      	sub	sp, #8
 800c15e:	b901      	cbnz	r1, 800c162 <__ascii_mbtowc+0x6>
 800c160:	a901      	add	r1, sp, #4
 800c162:	b142      	cbz	r2, 800c176 <__ascii_mbtowc+0x1a>
 800c164:	b14b      	cbz	r3, 800c17a <__ascii_mbtowc+0x1e>
 800c166:	7813      	ldrb	r3, [r2, #0]
 800c168:	600b      	str	r3, [r1, #0]
 800c16a:	7812      	ldrb	r2, [r2, #0]
 800c16c:	1c10      	adds	r0, r2, #0
 800c16e:	bf18      	it	ne
 800c170:	2001      	movne	r0, #1
 800c172:	b002      	add	sp, #8
 800c174:	4770      	bx	lr
 800c176:	4610      	mov	r0, r2
 800c178:	e7fb      	b.n	800c172 <__ascii_mbtowc+0x16>
 800c17a:	f06f 0001 	mvn.w	r0, #1
 800c17e:	e7f8      	b.n	800c172 <__ascii_mbtowc+0x16>

0800c180 <memmove>:
 800c180:	4288      	cmp	r0, r1
 800c182:	b510      	push	{r4, lr}
 800c184:	eb01 0302 	add.w	r3, r1, r2
 800c188:	d807      	bhi.n	800c19a <memmove+0x1a>
 800c18a:	1e42      	subs	r2, r0, #1
 800c18c:	4299      	cmp	r1, r3
 800c18e:	d00a      	beq.n	800c1a6 <memmove+0x26>
 800c190:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c194:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c198:	e7f8      	b.n	800c18c <memmove+0xc>
 800c19a:	4283      	cmp	r3, r0
 800c19c:	d9f5      	bls.n	800c18a <memmove+0xa>
 800c19e:	1881      	adds	r1, r0, r2
 800c1a0:	1ad2      	subs	r2, r2, r3
 800c1a2:	42d3      	cmn	r3, r2
 800c1a4:	d100      	bne.n	800c1a8 <memmove+0x28>
 800c1a6:	bd10      	pop	{r4, pc}
 800c1a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c1b0:	e7f7      	b.n	800c1a2 <memmove+0x22>

0800c1b2 <_realloc_r>:
 800c1b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b4:	4607      	mov	r7, r0
 800c1b6:	4614      	mov	r4, r2
 800c1b8:	460e      	mov	r6, r1
 800c1ba:	b921      	cbnz	r1, 800c1c6 <_realloc_r+0x14>
 800c1bc:	4611      	mov	r1, r2
 800c1be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c1c2:	f7fe bf7b 	b.w	800b0bc <_malloc_r>
 800c1c6:	b922      	cbnz	r2, 800c1d2 <_realloc_r+0x20>
 800c1c8:	f7fe ff2a 	bl	800b020 <_free_r>
 800c1cc:	4625      	mov	r5, r4
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1d2:	f000 f821 	bl	800c218 <_malloc_usable_size_r>
 800c1d6:	42a0      	cmp	r0, r4
 800c1d8:	d20f      	bcs.n	800c1fa <_realloc_r+0x48>
 800c1da:	4621      	mov	r1, r4
 800c1dc:	4638      	mov	r0, r7
 800c1de:	f7fe ff6d 	bl	800b0bc <_malloc_r>
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d0f2      	beq.n	800c1ce <_realloc_r+0x1c>
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	4622      	mov	r2, r4
 800c1ec:	f7fe ff04 	bl	800aff8 <memcpy>
 800c1f0:	4631      	mov	r1, r6
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	f7fe ff14 	bl	800b020 <_free_r>
 800c1f8:	e7e9      	b.n	800c1ce <_realloc_r+0x1c>
 800c1fa:	4635      	mov	r5, r6
 800c1fc:	e7e7      	b.n	800c1ce <_realloc_r+0x1c>

0800c1fe <__ascii_wctomb>:
 800c1fe:	b149      	cbz	r1, 800c214 <__ascii_wctomb+0x16>
 800c200:	2aff      	cmp	r2, #255	; 0xff
 800c202:	bf85      	ittet	hi
 800c204:	238a      	movhi	r3, #138	; 0x8a
 800c206:	6003      	strhi	r3, [r0, #0]
 800c208:	700a      	strbls	r2, [r1, #0]
 800c20a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c20e:	bf98      	it	ls
 800c210:	2001      	movls	r0, #1
 800c212:	4770      	bx	lr
 800c214:	4608      	mov	r0, r1
 800c216:	4770      	bx	lr

0800c218 <_malloc_usable_size_r>:
 800c218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c21c:	1f18      	subs	r0, r3, #4
 800c21e:	2b00      	cmp	r3, #0
 800c220:	bfbc      	itt	lt
 800c222:	580b      	ldrlt	r3, [r1, r0]
 800c224:	18c0      	addlt	r0, r0, r3
 800c226:	4770      	bx	lr

0800c228 <roundf>:
 800c228:	ee10 0a10 	vmov	r0, s0
 800c22c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c230:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800c234:	2a16      	cmp	r2, #22
 800c236:	dc15      	bgt.n	800c264 <roundf+0x3c>
 800c238:	2a00      	cmp	r2, #0
 800c23a:	da08      	bge.n	800c24e <roundf+0x26>
 800c23c:	3201      	adds	r2, #1
 800c23e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800c242:	d101      	bne.n	800c248 <roundf+0x20>
 800c244:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800c248:	ee00 3a10 	vmov	s0, r3
 800c24c:	4770      	bx	lr
 800c24e:	4908      	ldr	r1, [pc, #32]	; (800c270 <roundf+0x48>)
 800c250:	4111      	asrs	r1, r2
 800c252:	4208      	tst	r0, r1
 800c254:	d0fa      	beq.n	800c24c <roundf+0x24>
 800c256:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c25a:	4113      	asrs	r3, r2
 800c25c:	4403      	add	r3, r0
 800c25e:	ea23 0301 	bic.w	r3, r3, r1
 800c262:	e7f1      	b.n	800c248 <roundf+0x20>
 800c264:	2a80      	cmp	r2, #128	; 0x80
 800c266:	d1f1      	bne.n	800c24c <roundf+0x24>
 800c268:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	007fffff 	.word	0x007fffff

0800c274 <powf>:
 800c274:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c278:	ed2d 8b04 	vpush	{d8-d9}
 800c27c:	4ca7      	ldr	r4, [pc, #668]	; (800c51c <powf+0x2a8>)
 800c27e:	b08a      	sub	sp, #40	; 0x28
 800c280:	eef0 8a40 	vmov.f32	s17, s0
 800c284:	eeb0 8a60 	vmov.f32	s16, s1
 800c288:	f000 f958 	bl	800c53c <__ieee754_powf>
 800c28c:	f994 5000 	ldrsb.w	r5, [r4]
 800c290:	1c6b      	adds	r3, r5, #1
 800c292:	eeb0 9a40 	vmov.f32	s18, s0
 800c296:	4626      	mov	r6, r4
 800c298:	d05f      	beq.n	800c35a <powf+0xe6>
 800c29a:	eeb4 8a48 	vcmp.f32	s16, s16
 800c29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a2:	d65a      	bvs.n	800c35a <powf+0xe6>
 800c2a4:	eef4 8a68 	vcmp.f32	s17, s17
 800c2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ac:	d721      	bvc.n	800c2f2 <powf+0x7e>
 800c2ae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b6:	d150      	bne.n	800c35a <powf+0xe6>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	4b98      	ldr	r3, [pc, #608]	; (800c520 <powf+0x2ac>)
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	ee18 0a90 	vmov	r0, s17
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	9308      	str	r3, [sp, #32]
 800c2c8:	f7f4 f94e 	bl	8000568 <__aeabi_f2d>
 800c2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2d0:	ee18 0a10 	vmov	r0, s16
 800c2d4:	f7f4 f948 	bl	8000568 <__aeabi_f2d>
 800c2d8:	4b92      	ldr	r3, [pc, #584]	; (800c524 <powf+0x2b0>)
 800c2da:	2200      	movs	r2, #0
 800c2dc:	2d02      	cmp	r5, #2
 800c2de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c2e6:	d032      	beq.n	800c34e <powf+0xda>
 800c2e8:	4668      	mov	r0, sp
 800c2ea:	f000 fbea 	bl	800cac2 <matherr>
 800c2ee:	bb40      	cbnz	r0, 800c342 <powf+0xce>
 800c2f0:	e065      	b.n	800c3be <powf+0x14a>
 800c2f2:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800c528 <powf+0x2b4>
 800c2f6:	eef4 8a69 	vcmp.f32	s17, s19
 800c2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2fe:	d163      	bne.n	800c3c8 <powf+0x154>
 800c300:	eeb4 8a69 	vcmp.f32	s16, s19
 800c304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c308:	d12e      	bne.n	800c368 <powf+0xf4>
 800c30a:	2301      	movs	r3, #1
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	4b84      	ldr	r3, [pc, #528]	; (800c520 <powf+0x2ac>)
 800c310:	9301      	str	r3, [sp, #4]
 800c312:	ee18 0a90 	vmov	r0, s17
 800c316:	2300      	movs	r3, #0
 800c318:	9308      	str	r3, [sp, #32]
 800c31a:	f7f4 f925 	bl	8000568 <__aeabi_f2d>
 800c31e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c322:	ee18 0a10 	vmov	r0, s16
 800c326:	f7f4 f91f 	bl	8000568 <__aeabi_f2d>
 800c32a:	2200      	movs	r2, #0
 800c32c:	2300      	movs	r3, #0
 800c32e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c332:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c336:	2d00      	cmp	r5, #0
 800c338:	d0d6      	beq.n	800c2e8 <powf+0x74>
 800c33a:	4b7a      	ldr	r3, [pc, #488]	; (800c524 <powf+0x2b0>)
 800c33c:	2200      	movs	r2, #0
 800c33e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c342:	9b08      	ldr	r3, [sp, #32]
 800c344:	b11b      	cbz	r3, 800c34e <powf+0xda>
 800c346:	f7fe fe1d 	bl	800af84 <__errno>
 800c34a:	9b08      	ldr	r3, [sp, #32]
 800c34c:	6003      	str	r3, [r0, #0]
 800c34e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c352:	f7f4 f961 	bl	8000618 <__aeabi_d2f>
 800c356:	ee09 0a10 	vmov	s18, r0
 800c35a:	eeb0 0a49 	vmov.f32	s0, s18
 800c35e:	b00a      	add	sp, #40	; 0x28
 800c360:	ecbd 8b04 	vpop	{d8-d9}
 800c364:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c368:	eeb0 0a48 	vmov.f32	s0, s16
 800c36c:	f000 fbb2 	bl	800cad4 <finitef>
 800c370:	2800      	cmp	r0, #0
 800c372:	d0f2      	beq.n	800c35a <powf+0xe6>
 800c374:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c37c:	d5ed      	bpl.n	800c35a <powf+0xe6>
 800c37e:	2301      	movs	r3, #1
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	4b67      	ldr	r3, [pc, #412]	; (800c520 <powf+0x2ac>)
 800c384:	9301      	str	r3, [sp, #4]
 800c386:	ee18 0a90 	vmov	r0, s17
 800c38a:	2300      	movs	r3, #0
 800c38c:	9308      	str	r3, [sp, #32]
 800c38e:	f7f4 f8eb 	bl	8000568 <__aeabi_f2d>
 800c392:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c396:	ee18 0a10 	vmov	r0, s16
 800c39a:	f7f4 f8e5 	bl	8000568 <__aeabi_f2d>
 800c39e:	f994 3000 	ldrsb.w	r3, [r4]
 800c3a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3a6:	b923      	cbnz	r3, 800c3b2 <powf+0x13e>
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3b0:	e79a      	b.n	800c2e8 <powf+0x74>
 800c3b2:	495e      	ldr	r1, [pc, #376]	; (800c52c <powf+0x2b8>)
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d194      	bne.n	800c2e8 <powf+0x74>
 800c3be:	f7fe fde1 	bl	800af84 <__errno>
 800c3c2:	2321      	movs	r3, #33	; 0x21
 800c3c4:	6003      	str	r3, [r0, #0]
 800c3c6:	e7bc      	b.n	800c342 <powf+0xce>
 800c3c8:	f000 fb84 	bl	800cad4 <finitef>
 800c3cc:	4605      	mov	r5, r0
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d173      	bne.n	800c4ba <powf+0x246>
 800c3d2:	eeb0 0a68 	vmov.f32	s0, s17
 800c3d6:	f000 fb7d 	bl	800cad4 <finitef>
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	d06d      	beq.n	800c4ba <powf+0x246>
 800c3de:	eeb0 0a48 	vmov.f32	s0, s16
 800c3e2:	f000 fb77 	bl	800cad4 <finitef>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d067      	beq.n	800c4ba <powf+0x246>
 800c3ea:	ee18 0a90 	vmov	r0, s17
 800c3ee:	f7f4 f8bb 	bl	8000568 <__aeabi_f2d>
 800c3f2:	4680      	mov	r8, r0
 800c3f4:	ee18 0a10 	vmov	r0, s16
 800c3f8:	4689      	mov	r9, r1
 800c3fa:	f7f4 f8b5 	bl	8000568 <__aeabi_f2d>
 800c3fe:	eeb4 9a49 	vcmp.f32	s18, s18
 800c402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c406:	f994 4000 	ldrsb.w	r4, [r4]
 800c40a:	4b45      	ldr	r3, [pc, #276]	; (800c520 <powf+0x2ac>)
 800c40c:	d713      	bvc.n	800c436 <powf+0x1c2>
 800c40e:	2201      	movs	r2, #1
 800c410:	e9cd 2300 	strd	r2, r3, [sp]
 800c414:	9508      	str	r5, [sp, #32]
 800c416:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c41a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c41e:	2c00      	cmp	r4, #0
 800c420:	d0c2      	beq.n	800c3a8 <powf+0x134>
 800c422:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800c426:	ee17 0a90 	vmov	r0, s15
 800c42a:	f7f4 f89d 	bl	8000568 <__aeabi_f2d>
 800c42e:	2c02      	cmp	r4, #2
 800c430:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c434:	e7c2      	b.n	800c3bc <powf+0x148>
 800c436:	2203      	movs	r2, #3
 800c438:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c43c:	e9cd 2300 	strd	r2, r3, [sp]
 800c440:	9508      	str	r5, [sp, #32]
 800c442:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c446:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c44a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c44e:	b9fc      	cbnz	r4, 800c490 <powf+0x21c>
 800c450:	4b37      	ldr	r3, [pc, #220]	; (800c530 <powf+0x2bc>)
 800c452:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c456:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c45e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c462:	d553      	bpl.n	800c50c <powf+0x298>
 800c464:	eeb0 0a48 	vmov.f32	s0, s16
 800c468:	f000 fb44 	bl	800caf4 <rintf>
 800c46c:	eeb4 0a48 	vcmp.f32	s0, s16
 800c470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c474:	d004      	beq.n	800c480 <powf+0x20c>
 800c476:	4b2f      	ldr	r3, [pc, #188]	; (800c534 <powf+0x2c0>)
 800c478:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c47c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c480:	f996 3000 	ldrsb.w	r3, [r6]
 800c484:	2b02      	cmp	r3, #2
 800c486:	d141      	bne.n	800c50c <powf+0x298>
 800c488:	f7fe fd7c 	bl	800af84 <__errno>
 800c48c:	2322      	movs	r3, #34	; 0x22
 800c48e:	e799      	b.n	800c3c4 <powf+0x150>
 800c490:	4b29      	ldr	r3, [pc, #164]	; (800c538 <powf+0x2c4>)
 800c492:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c496:	2200      	movs	r2, #0
 800c498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c49c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c4a0:	d5ee      	bpl.n	800c480 <powf+0x20c>
 800c4a2:	eeb0 0a48 	vmov.f32	s0, s16
 800c4a6:	f000 fb25 	bl	800caf4 <rintf>
 800c4aa:	eeb4 0a48 	vcmp.f32	s0, s16
 800c4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4b2:	d0e5      	beq.n	800c480 <powf+0x20c>
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	4b1d      	ldr	r3, [pc, #116]	; (800c52c <powf+0x2b8>)
 800c4b8:	e7e0      	b.n	800c47c <powf+0x208>
 800c4ba:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c2:	f47f af4a 	bne.w	800c35a <powf+0xe6>
 800c4c6:	eeb0 0a68 	vmov.f32	s0, s17
 800c4ca:	f000 fb03 	bl	800cad4 <finitef>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	f43f af43 	beq.w	800c35a <powf+0xe6>
 800c4d4:	eeb0 0a48 	vmov.f32	s0, s16
 800c4d8:	f000 fafc 	bl	800cad4 <finitef>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	f43f af3c 	beq.w	800c35a <powf+0xe6>
 800c4e2:	2304      	movs	r3, #4
 800c4e4:	9300      	str	r3, [sp, #0]
 800c4e6:	4b0e      	ldr	r3, [pc, #56]	; (800c520 <powf+0x2ac>)
 800c4e8:	9301      	str	r3, [sp, #4]
 800c4ea:	ee18 0a90 	vmov	r0, s17
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	9308      	str	r3, [sp, #32]
 800c4f2:	f7f4 f839 	bl	8000568 <__aeabi_f2d>
 800c4f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4fa:	ee18 0a10 	vmov	r0, s16
 800c4fe:	f7f4 f833 	bl	8000568 <__aeabi_f2d>
 800c502:	2200      	movs	r2, #0
 800c504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c508:	2300      	movs	r3, #0
 800c50a:	e7b7      	b.n	800c47c <powf+0x208>
 800c50c:	4668      	mov	r0, sp
 800c50e:	f000 fad8 	bl	800cac2 <matherr>
 800c512:	2800      	cmp	r0, #0
 800c514:	f47f af15 	bne.w	800c342 <powf+0xce>
 800c518:	e7b6      	b.n	800c488 <powf+0x214>
 800c51a:	bf00      	nop
 800c51c:	2000075c 	.word	0x2000075c
 800c520:	0800d0d3 	.word	0x0800d0d3
 800c524:	3ff00000 	.word	0x3ff00000
 800c528:	00000000 	.word	0x00000000
 800c52c:	fff00000 	.word	0xfff00000
 800c530:	47efffff 	.word	0x47efffff
 800c534:	c7efffff 	.word	0xc7efffff
 800c538:	7ff00000 	.word	0x7ff00000

0800c53c <__ieee754_powf>:
 800c53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c540:	ee10 5a90 	vmov	r5, s1
 800c544:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800c548:	ed2d 8b02 	vpush	{d8}
 800c54c:	eeb0 8a40 	vmov.f32	s16, s0
 800c550:	eef0 8a60 	vmov.f32	s17, s1
 800c554:	f000 8293 	beq.w	800ca7e <__ieee754_powf+0x542>
 800c558:	ee10 8a10 	vmov	r8, s0
 800c55c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800c560:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c564:	dc06      	bgt.n	800c574 <__ieee754_powf+0x38>
 800c566:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800c56a:	dd0a      	ble.n	800c582 <__ieee754_powf+0x46>
 800c56c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c570:	f000 8285 	beq.w	800ca7e <__ieee754_powf+0x542>
 800c574:	ecbd 8b02 	vpop	{d8}
 800c578:	48d9      	ldr	r0, [pc, #868]	; (800c8e0 <__ieee754_powf+0x3a4>)
 800c57a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c57e:	f000 bab3 	b.w	800cae8 <nanf>
 800c582:	f1b8 0f00 	cmp.w	r8, #0
 800c586:	da1d      	bge.n	800c5c4 <__ieee754_powf+0x88>
 800c588:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800c58c:	da2c      	bge.n	800c5e8 <__ieee754_powf+0xac>
 800c58e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c592:	db30      	blt.n	800c5f6 <__ieee754_powf+0xba>
 800c594:	15fb      	asrs	r3, r7, #23
 800c596:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c59a:	fa47 f603 	asr.w	r6, r7, r3
 800c59e:	fa06 f303 	lsl.w	r3, r6, r3
 800c5a2:	42bb      	cmp	r3, r7
 800c5a4:	d127      	bne.n	800c5f6 <__ieee754_powf+0xba>
 800c5a6:	f006 0601 	and.w	r6, r6, #1
 800c5aa:	f1c6 0602 	rsb	r6, r6, #2
 800c5ae:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c5b2:	d122      	bne.n	800c5fa <__ieee754_powf+0xbe>
 800c5b4:	2d00      	cmp	r5, #0
 800c5b6:	f280 8268 	bge.w	800ca8a <__ieee754_powf+0x54e>
 800c5ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c5be:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c5c2:	e00d      	b.n	800c5e0 <__ieee754_powf+0xa4>
 800c5c4:	2600      	movs	r6, #0
 800c5c6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800c5ca:	d1f0      	bne.n	800c5ae <__ieee754_powf+0x72>
 800c5cc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c5d0:	f000 8255 	beq.w	800ca7e <__ieee754_powf+0x542>
 800c5d4:	dd0a      	ble.n	800c5ec <__ieee754_powf+0xb0>
 800c5d6:	2d00      	cmp	r5, #0
 800c5d8:	f280 8254 	bge.w	800ca84 <__ieee754_powf+0x548>
 800c5dc:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800c8e4 <__ieee754_powf+0x3a8>
 800c5e0:	ecbd 8b02 	vpop	{d8}
 800c5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e8:	2602      	movs	r6, #2
 800c5ea:	e7ec      	b.n	800c5c6 <__ieee754_powf+0x8a>
 800c5ec:	2d00      	cmp	r5, #0
 800c5ee:	daf5      	bge.n	800c5dc <__ieee754_powf+0xa0>
 800c5f0:	eeb1 0a68 	vneg.f32	s0, s17
 800c5f4:	e7f4      	b.n	800c5e0 <__ieee754_powf+0xa4>
 800c5f6:	2600      	movs	r6, #0
 800c5f8:	e7d9      	b.n	800c5ae <__ieee754_powf+0x72>
 800c5fa:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800c5fe:	d102      	bne.n	800c606 <__ieee754_powf+0xca>
 800c600:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c604:	e7ec      	b.n	800c5e0 <__ieee754_powf+0xa4>
 800c606:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800c60a:	eeb0 0a48 	vmov.f32	s0, s16
 800c60e:	d108      	bne.n	800c622 <__ieee754_powf+0xe6>
 800c610:	f1b8 0f00 	cmp.w	r8, #0
 800c614:	db05      	blt.n	800c622 <__ieee754_powf+0xe6>
 800c616:	ecbd 8b02 	vpop	{d8}
 800c61a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c61e:	f000 ba4d 	b.w	800cabc <__ieee754_sqrtf>
 800c622:	f000 fa50 	bl	800cac6 <fabsf>
 800c626:	b124      	cbz	r4, 800c632 <__ieee754_powf+0xf6>
 800c628:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800c62c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c630:	d117      	bne.n	800c662 <__ieee754_powf+0x126>
 800c632:	2d00      	cmp	r5, #0
 800c634:	bfbc      	itt	lt
 800c636:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800c63a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c63e:	f1b8 0f00 	cmp.w	r8, #0
 800c642:	dacd      	bge.n	800c5e0 <__ieee754_powf+0xa4>
 800c644:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800c648:	ea54 0306 	orrs.w	r3, r4, r6
 800c64c:	d104      	bne.n	800c658 <__ieee754_powf+0x11c>
 800c64e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c652:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c656:	e7c3      	b.n	800c5e0 <__ieee754_powf+0xa4>
 800c658:	2e01      	cmp	r6, #1
 800c65a:	d1c1      	bne.n	800c5e0 <__ieee754_powf+0xa4>
 800c65c:	eeb1 0a40 	vneg.f32	s0, s0
 800c660:	e7be      	b.n	800c5e0 <__ieee754_powf+0xa4>
 800c662:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800c666:	3801      	subs	r0, #1
 800c668:	ea56 0300 	orrs.w	r3, r6, r0
 800c66c:	d104      	bne.n	800c678 <__ieee754_powf+0x13c>
 800c66e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c672:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c676:	e7b3      	b.n	800c5e0 <__ieee754_powf+0xa4>
 800c678:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800c67c:	dd6d      	ble.n	800c75a <__ieee754_powf+0x21e>
 800c67e:	4b9a      	ldr	r3, [pc, #616]	; (800c8e8 <__ieee754_powf+0x3ac>)
 800c680:	429c      	cmp	r4, r3
 800c682:	dc06      	bgt.n	800c692 <__ieee754_powf+0x156>
 800c684:	2d00      	cmp	r5, #0
 800c686:	daa9      	bge.n	800c5dc <__ieee754_powf+0xa0>
 800c688:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800c8ec <__ieee754_powf+0x3b0>
 800c68c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c690:	e7a6      	b.n	800c5e0 <__ieee754_powf+0xa4>
 800c692:	4b97      	ldr	r3, [pc, #604]	; (800c8f0 <__ieee754_powf+0x3b4>)
 800c694:	429c      	cmp	r4, r3
 800c696:	dd02      	ble.n	800c69e <__ieee754_powf+0x162>
 800c698:	2d00      	cmp	r5, #0
 800c69a:	dcf5      	bgt.n	800c688 <__ieee754_powf+0x14c>
 800c69c:	e79e      	b.n	800c5dc <__ieee754_powf+0xa0>
 800c69e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c6a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c6a6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800c8f4 <__ieee754_powf+0x3b8>
 800c6aa:	eef1 6a40 	vneg.f32	s13, s0
 800c6ae:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c6b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c6b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c6ba:	eee7 7a40 	vfms.f32	s15, s14, s0
 800c6be:	ee60 0a00 	vmul.f32	s1, s0, s0
 800c6c2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800c8f8 <__ieee754_powf+0x3bc>
 800c6c6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800c6ca:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800c8fc <__ieee754_powf+0x3c0>
 800c6ce:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800c6d2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c6d6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800c900 <__ieee754_powf+0x3c4>
 800c6da:	eeb0 6a67 	vmov.f32	s12, s15
 800c6de:	eea0 6a07 	vfma.f32	s12, s0, s14
 800c6e2:	ee16 3a10 	vmov	r3, s12
 800c6e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c6ea:	f023 030f 	bic.w	r3, r3, #15
 800c6ee:	ee00 3a90 	vmov	s1, r3
 800c6f2:	eee6 0a87 	vfma.f32	s1, s13, s14
 800c6f6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c6fa:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800c6fe:	f025 050f 	bic.w	r5, r5, #15
 800c702:	ee07 5a10 	vmov	s14, r5
 800c706:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c70a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c70e:	ee07 3a90 	vmov	s15, r3
 800c712:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c716:	3e01      	subs	r6, #1
 800c718:	ea56 0200 	orrs.w	r2, r6, r0
 800c71c:	ee07 5a10 	vmov	s14, r5
 800c720:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c724:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c728:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c72c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c730:	ee17 4a10 	vmov	r4, s14
 800c734:	bf08      	it	eq
 800c736:	eeb0 8a40 	vmoveq.f32	s16, s0
 800c73a:	2c00      	cmp	r4, #0
 800c73c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c740:	f340 8184 	ble.w	800ca4c <__ieee754_powf+0x510>
 800c744:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800c748:	f340 80fc 	ble.w	800c944 <__ieee754_powf+0x408>
 800c74c:	eddf 7a67 	vldr	s15, [pc, #412]	; 800c8ec <__ieee754_powf+0x3b0>
 800c750:	ee28 0a27 	vmul.f32	s0, s16, s15
 800c754:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c758:	e742      	b.n	800c5e0 <__ieee754_powf+0xa4>
 800c75a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800c75e:	bfbf      	itttt	lt
 800c760:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800c904 <__ieee754_powf+0x3c8>
 800c764:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c768:	f06f 0217 	mvnlt.w	r2, #23
 800c76c:	ee17 4a90 	vmovlt	r4, s15
 800c770:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800c774:	bfa8      	it	ge
 800c776:	2200      	movge	r2, #0
 800c778:	3b7f      	subs	r3, #127	; 0x7f
 800c77a:	4413      	add	r3, r2
 800c77c:	4a62      	ldr	r2, [pc, #392]	; (800c908 <__ieee754_powf+0x3cc>)
 800c77e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800c782:	4294      	cmp	r4, r2
 800c784:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800c788:	dd06      	ble.n	800c798 <__ieee754_powf+0x25c>
 800c78a:	4a60      	ldr	r2, [pc, #384]	; (800c90c <__ieee754_powf+0x3d0>)
 800c78c:	4294      	cmp	r4, r2
 800c78e:	f340 80a5 	ble.w	800c8dc <__ieee754_powf+0x3a0>
 800c792:	3301      	adds	r3, #1
 800c794:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c798:	2400      	movs	r4, #0
 800c79a:	4a5d      	ldr	r2, [pc, #372]	; (800c910 <__ieee754_powf+0x3d4>)
 800c79c:	00a7      	lsls	r7, r4, #2
 800c79e:	443a      	add	r2, r7
 800c7a0:	ee07 1a90 	vmov	s15, r1
 800c7a4:	ed92 7a00 	vldr	s14, [r2]
 800c7a8:	4a5a      	ldr	r2, [pc, #360]	; (800c914 <__ieee754_powf+0x3d8>)
 800c7aa:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c7ae:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c7b2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800c7b6:	1049      	asrs	r1, r1, #1
 800c7b8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800c7bc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800c7c0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800c7c4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800c7c8:	ee06 1a10 	vmov	s12, r1
 800c7cc:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800c7d0:	ee14 ca90 	vmov	ip, s9
 800c7d4:	ea02 0c0c 	and.w	ip, r2, ip
 800c7d8:	ee05 ca10 	vmov	s10, ip
 800c7dc:	eeb1 4a45 	vneg.f32	s8, s10
 800c7e0:	eee4 5a06 	vfma.f32	s11, s8, s12
 800c7e4:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c7e8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800c918 <__ieee754_powf+0x3dc>
 800c7ec:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800c7f0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800c7f4:	eee4 5a06 	vfma.f32	s11, s8, s12
 800c7f8:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800c7fc:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800c800:	eddf 5a46 	vldr	s11, [pc, #280]	; 800c91c <__ieee754_powf+0x3e0>
 800c804:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c808:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c920 <__ieee754_powf+0x3e4>
 800c80c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c810:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800c8f4 <__ieee754_powf+0x3b8>
 800c814:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c818:	eddf 5a42 	vldr	s11, [pc, #264]	; 800c924 <__ieee754_powf+0x3e8>
 800c81c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c820:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800c928 <__ieee754_powf+0x3ec>
 800c824:	ee75 6a24 	vadd.f32	s13, s10, s9
 800c828:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c82c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c830:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800c834:	eef0 7a65 	vmov.f32	s15, s11
 800c838:	eee3 6a87 	vfma.f32	s13, s7, s14
 800c83c:	eee5 7a05 	vfma.f32	s15, s10, s10
 800c840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c844:	ee17 1a90 	vmov	r1, s15
 800c848:	4011      	ands	r1, r2
 800c84a:	ee07 1a90 	vmov	s15, r1
 800c84e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800c852:	eddf 5a36 	vldr	s11, [pc, #216]	; 800c92c <__ieee754_powf+0x3f0>
 800c856:	eea4 7a05 	vfma.f32	s14, s8, s10
 800c85a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c85e:	ee27 7a24 	vmul.f32	s14, s14, s9
 800c862:	eea7 7a86 	vfma.f32	s14, s15, s12
 800c866:	eeb0 6a47 	vmov.f32	s12, s14
 800c86a:	eea5 6a27 	vfma.f32	s12, s10, s15
 800c86e:	ee16 1a10 	vmov	r1, s12
 800c872:	4011      	ands	r1, r2
 800c874:	ee06 1a90 	vmov	s13, r1
 800c878:	eee4 6a27 	vfma.f32	s13, s8, s15
 800c87c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800c930 <__ieee754_powf+0x3f4>
 800c880:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c884:	ee06 1a10 	vmov	s12, r1
 800c888:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c88c:	eddf 7a29 	vldr	s15, [pc, #164]	; 800c934 <__ieee754_powf+0x3f8>
 800c890:	4929      	ldr	r1, [pc, #164]	; (800c938 <__ieee754_powf+0x3fc>)
 800c892:	eea6 7a27 	vfma.f32	s14, s12, s15
 800c896:	4439      	add	r1, r7
 800c898:	edd1 7a00 	vldr	s15, [r1]
 800c89c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c8a0:	ee07 3a90 	vmov	s15, r3
 800c8a4:	eef0 0a47 	vmov.f32	s1, s14
 800c8a8:	4b24      	ldr	r3, [pc, #144]	; (800c93c <__ieee754_powf+0x400>)
 800c8aa:	eee6 0a25 	vfma.f32	s1, s12, s11
 800c8ae:	443b      	add	r3, r7
 800c8b0:	ed93 5a00 	vldr	s10, [r3]
 800c8b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c8b8:	ee70 0a85 	vadd.f32	s1, s1, s10
 800c8bc:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800c8c0:	ee17 3a90 	vmov	r3, s15
 800c8c4:	4013      	ands	r3, r2
 800c8c6:	ee07 3a90 	vmov	s15, r3
 800c8ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c8ce:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c8d2:	eee6 7a65 	vfms.f32	s15, s12, s11
 800c8d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8da:	e70e      	b.n	800c6fa <__ieee754_powf+0x1be>
 800c8dc:	2401      	movs	r4, #1
 800c8de:	e75c      	b.n	800c79a <__ieee754_powf+0x25e>
 800c8e0:	0800cf1d 	.word	0x0800cf1d
 800c8e4:	00000000 	.word	0x00000000
 800c8e8:	3f7ffff7 	.word	0x3f7ffff7
 800c8ec:	7149f2ca 	.word	0x7149f2ca
 800c8f0:	3f800007 	.word	0x3f800007
 800c8f4:	3eaaaaab 	.word	0x3eaaaaab
 800c8f8:	36eca570 	.word	0x36eca570
 800c8fc:	3fb8aa3b 	.word	0x3fb8aa3b
 800c900:	3fb8aa00 	.word	0x3fb8aa00
 800c904:	4b800000 	.word	0x4b800000
 800c908:	001cc471 	.word	0x001cc471
 800c90c:	005db3d6 	.word	0x005db3d6
 800c910:	0800d0d8 	.word	0x0800d0d8
 800c914:	fffff000 	.word	0xfffff000
 800c918:	3e6c3255 	.word	0x3e6c3255
 800c91c:	3e53f142 	.word	0x3e53f142
 800c920:	3e8ba305 	.word	0x3e8ba305
 800c924:	3edb6db7 	.word	0x3edb6db7
 800c928:	3f19999a 	.word	0x3f19999a
 800c92c:	3f763800 	.word	0x3f763800
 800c930:	3f76384f 	.word	0x3f76384f
 800c934:	369dc3a0 	.word	0x369dc3a0
 800c938:	0800d0e8 	.word	0x0800d0e8
 800c93c:	0800d0e0 	.word	0x0800d0e0
 800c940:	3338aa3c 	.word	0x3338aa3c
 800c944:	f040 8092 	bne.w	800ca6c <__ieee754_powf+0x530>
 800c948:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800c940 <__ieee754_powf+0x404>
 800c94c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c950:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c954:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c95c:	f73f aef6 	bgt.w	800c74c <__ieee754_powf+0x210>
 800c960:	15db      	asrs	r3, r3, #23
 800c962:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800c966:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c96a:	4103      	asrs	r3, r0
 800c96c:	4423      	add	r3, r4
 800c96e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c972:	4947      	ldr	r1, [pc, #284]	; (800ca90 <__ieee754_powf+0x554>)
 800c974:	3a7f      	subs	r2, #127	; 0x7f
 800c976:	4111      	asrs	r1, r2
 800c978:	ea23 0101 	bic.w	r1, r3, r1
 800c97c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800c980:	ee07 1a10 	vmov	s14, r1
 800c984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800c988:	f1c2 0217 	rsb	r2, r2, #23
 800c98c:	4110      	asrs	r0, r2
 800c98e:	2c00      	cmp	r4, #0
 800c990:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c994:	bfb8      	it	lt
 800c996:	4240      	neglt	r0, r0
 800c998:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c99c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca94 <__ieee754_powf+0x558>
 800c9a0:	ee17 3a10 	vmov	r3, s14
 800c9a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c9a8:	f023 030f 	bic.w	r3, r3, #15
 800c9ac:	ee07 3a10 	vmov	s14, r3
 800c9b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9b4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c9b8:	eddf 7a37 	vldr	s15, [pc, #220]	; 800ca98 <__ieee754_powf+0x55c>
 800c9bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9c0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800c9c4:	eddf 6a35 	vldr	s13, [pc, #212]	; 800ca9c <__ieee754_powf+0x560>
 800c9c8:	eeb0 0a67 	vmov.f32	s0, s15
 800c9cc:	eea7 0a26 	vfma.f32	s0, s14, s13
 800c9d0:	eeb0 6a40 	vmov.f32	s12, s0
 800c9d4:	eea7 6a66 	vfms.f32	s12, s14, s13
 800c9d8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c9dc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c9e0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800caa0 <__ieee754_powf+0x564>
 800c9e4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800caa4 <__ieee754_powf+0x568>
 800c9e8:	eea7 6a26 	vfma.f32	s12, s14, s13
 800c9ec:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800caa8 <__ieee754_powf+0x56c>
 800c9f0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c9f4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800caac <__ieee754_powf+0x570>
 800c9f8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c9fc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800cab0 <__ieee754_powf+0x574>
 800ca00:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ca04:	eeb0 6a40 	vmov.f32	s12, s0
 800ca08:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800ca0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ca10:	eeb0 7a46 	vmov.f32	s14, s12
 800ca14:	ee77 6a66 	vsub.f32	s13, s14, s13
 800ca18:	ee20 6a06 	vmul.f32	s12, s0, s12
 800ca1c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800ca20:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ca24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca28:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ca2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ca30:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ca34:	ee10 3a10 	vmov	r3, s0
 800ca38:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ca3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ca40:	da1a      	bge.n	800ca78 <__ieee754_powf+0x53c>
 800ca42:	f000 f8b1 	bl	800cba8 <scalbnf>
 800ca46:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ca4a:	e5c9      	b.n	800c5e0 <__ieee754_powf+0xa4>
 800ca4c:	4a19      	ldr	r2, [pc, #100]	; (800cab4 <__ieee754_powf+0x578>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	dd02      	ble.n	800ca58 <__ieee754_powf+0x51c>
 800ca52:	eddf 7a19 	vldr	s15, [pc, #100]	; 800cab8 <__ieee754_powf+0x57c>
 800ca56:	e67b      	b.n	800c750 <__ieee754_powf+0x214>
 800ca58:	d108      	bne.n	800ca6c <__ieee754_powf+0x530>
 800ca5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ca5e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ca62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca66:	f6ff af7b 	blt.w	800c960 <__ieee754_powf+0x424>
 800ca6a:	e7f2      	b.n	800ca52 <__ieee754_powf+0x516>
 800ca6c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ca70:	f73f af76 	bgt.w	800c960 <__ieee754_powf+0x424>
 800ca74:	2000      	movs	r0, #0
 800ca76:	e78f      	b.n	800c998 <__ieee754_powf+0x45c>
 800ca78:	ee00 3a10 	vmov	s0, r3
 800ca7c:	e7e3      	b.n	800ca46 <__ieee754_powf+0x50a>
 800ca7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ca82:	e5ad      	b.n	800c5e0 <__ieee754_powf+0xa4>
 800ca84:	eeb0 0a68 	vmov.f32	s0, s17
 800ca88:	e5aa      	b.n	800c5e0 <__ieee754_powf+0xa4>
 800ca8a:	eeb0 0a48 	vmov.f32	s0, s16
 800ca8e:	e5a7      	b.n	800c5e0 <__ieee754_powf+0xa4>
 800ca90:	007fffff 	.word	0x007fffff
 800ca94:	3f317218 	.word	0x3f317218
 800ca98:	35bfbe8c 	.word	0x35bfbe8c
 800ca9c:	3f317200 	.word	0x3f317200
 800caa0:	3331bb4c 	.word	0x3331bb4c
 800caa4:	b5ddea0e 	.word	0xb5ddea0e
 800caa8:	388ab355 	.word	0x388ab355
 800caac:	bb360b61 	.word	0xbb360b61
 800cab0:	3e2aaaab 	.word	0x3e2aaaab
 800cab4:	43160000 	.word	0x43160000
 800cab8:	0da24260 	.word	0x0da24260

0800cabc <__ieee754_sqrtf>:
 800cabc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cac0:	4770      	bx	lr

0800cac2 <matherr>:
 800cac2:	2000      	movs	r0, #0
 800cac4:	4770      	bx	lr

0800cac6 <fabsf>:
 800cac6:	ee10 3a10 	vmov	r3, s0
 800caca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cace:	ee00 3a10 	vmov	s0, r3
 800cad2:	4770      	bx	lr

0800cad4 <finitef>:
 800cad4:	ee10 3a10 	vmov	r3, s0
 800cad8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800cadc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800cae0:	bfac      	ite	ge
 800cae2:	2000      	movge	r0, #0
 800cae4:	2001      	movlt	r0, #1
 800cae6:	4770      	bx	lr

0800cae8 <nanf>:
 800cae8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800caf0 <nanf+0x8>
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	7fc00000 	.word	0x7fc00000

0800caf4 <rintf>:
 800caf4:	b513      	push	{r0, r1, r4, lr}
 800caf6:	ee10 1a10 	vmov	r1, s0
 800cafa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cafe:	0ddc      	lsrs	r4, r3, #23
 800cb00:	3c7f      	subs	r4, #127	; 0x7f
 800cb02:	2c16      	cmp	r4, #22
 800cb04:	dc46      	bgt.n	800cb94 <rintf+0xa0>
 800cb06:	b32b      	cbz	r3, 800cb54 <rintf+0x60>
 800cb08:	2c00      	cmp	r4, #0
 800cb0a:	ee10 2a10 	vmov	r2, s0
 800cb0e:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800cb12:	da21      	bge.n	800cb58 <rintf+0x64>
 800cb14:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800cb18:	425b      	negs	r3, r3
 800cb1a:	4a21      	ldr	r2, [pc, #132]	; (800cba0 <rintf+0xac>)
 800cb1c:	0a5b      	lsrs	r3, r3, #9
 800cb1e:	0d09      	lsrs	r1, r1, #20
 800cb20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb24:	0509      	lsls	r1, r1, #20
 800cb26:	430b      	orrs	r3, r1
 800cb28:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800cb2c:	ee07 3a90 	vmov	s15, r3
 800cb30:	edd2 6a00 	vldr	s13, [r2]
 800cb34:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800cb38:	ed8d 7a01 	vstr	s14, [sp, #4]
 800cb3c:	eddd 7a01 	vldr	s15, [sp, #4]
 800cb40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cb44:	ee17 3a90 	vmov	r3, s15
 800cb48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb4c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800cb50:	ee00 3a10 	vmov	s0, r3
 800cb54:	b002      	add	sp, #8
 800cb56:	bd10      	pop	{r4, pc}
 800cb58:	4b12      	ldr	r3, [pc, #72]	; (800cba4 <rintf+0xb0>)
 800cb5a:	4123      	asrs	r3, r4
 800cb5c:	4219      	tst	r1, r3
 800cb5e:	d0f9      	beq.n	800cb54 <rintf+0x60>
 800cb60:	085b      	lsrs	r3, r3, #1
 800cb62:	4219      	tst	r1, r3
 800cb64:	d006      	beq.n	800cb74 <rintf+0x80>
 800cb66:	ea21 0203 	bic.w	r2, r1, r3
 800cb6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cb6e:	fa43 f404 	asr.w	r4, r3, r4
 800cb72:	4322      	orrs	r2, r4
 800cb74:	4b0a      	ldr	r3, [pc, #40]	; (800cba0 <rintf+0xac>)
 800cb76:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cb7a:	ed90 7a00 	vldr	s14, [r0]
 800cb7e:	ee07 2a90 	vmov	s15, r2
 800cb82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb86:	edcd 7a01 	vstr	s15, [sp, #4]
 800cb8a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800cb8e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cb92:	e7df      	b.n	800cb54 <rintf+0x60>
 800cb94:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cb98:	d3dc      	bcc.n	800cb54 <rintf+0x60>
 800cb9a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cb9e:	e7d9      	b.n	800cb54 <rintf+0x60>
 800cba0:	0800d0f0 	.word	0x0800d0f0
 800cba4:	007fffff 	.word	0x007fffff

0800cba8 <scalbnf>:
 800cba8:	b508      	push	{r3, lr}
 800cbaa:	ee10 2a10 	vmov	r2, s0
 800cbae:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800cbb2:	ed2d 8b02 	vpush	{d8}
 800cbb6:	eef0 0a40 	vmov.f32	s1, s0
 800cbba:	d004      	beq.n	800cbc6 <scalbnf+0x1e>
 800cbbc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cbc0:	d306      	bcc.n	800cbd0 <scalbnf+0x28>
 800cbc2:	ee70 0a00 	vadd.f32	s1, s0, s0
 800cbc6:	ecbd 8b02 	vpop	{d8}
 800cbca:	eeb0 0a60 	vmov.f32	s0, s1
 800cbce:	bd08      	pop	{r3, pc}
 800cbd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cbd4:	d21c      	bcs.n	800cc10 <scalbnf+0x68>
 800cbd6:	4b1f      	ldr	r3, [pc, #124]	; (800cc54 <scalbnf+0xac>)
 800cbd8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cc58 <scalbnf+0xb0>
 800cbdc:	4298      	cmp	r0, r3
 800cbde:	ee60 0a27 	vmul.f32	s1, s0, s15
 800cbe2:	db10      	blt.n	800cc06 <scalbnf+0x5e>
 800cbe4:	ee10 2a90 	vmov	r2, s1
 800cbe8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800cbec:	3b19      	subs	r3, #25
 800cbee:	4403      	add	r3, r0
 800cbf0:	2bfe      	cmp	r3, #254	; 0xfe
 800cbf2:	dd0f      	ble.n	800cc14 <scalbnf+0x6c>
 800cbf4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800cc5c <scalbnf+0xb4>
 800cbf8:	eeb0 0a48 	vmov.f32	s0, s16
 800cbfc:	f000 f834 	bl	800cc68 <copysignf>
 800cc00:	ee60 0a08 	vmul.f32	s1, s0, s16
 800cc04:	e7df      	b.n	800cbc6 <scalbnf+0x1e>
 800cc06:	eddf 7a16 	vldr	s15, [pc, #88]	; 800cc60 <scalbnf+0xb8>
 800cc0a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800cc0e:	e7da      	b.n	800cbc6 <scalbnf+0x1e>
 800cc10:	0ddb      	lsrs	r3, r3, #23
 800cc12:	e7ec      	b.n	800cbee <scalbnf+0x46>
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	dd06      	ble.n	800cc26 <scalbnf+0x7e>
 800cc18:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800cc1c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800cc20:	ee00 3a90 	vmov	s1, r3
 800cc24:	e7cf      	b.n	800cbc6 <scalbnf+0x1e>
 800cc26:	f113 0f16 	cmn.w	r3, #22
 800cc2a:	da06      	bge.n	800cc3a <scalbnf+0x92>
 800cc2c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cc30:	4298      	cmp	r0, r3
 800cc32:	dcdf      	bgt.n	800cbf4 <scalbnf+0x4c>
 800cc34:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800cc60 <scalbnf+0xb8>
 800cc38:	e7de      	b.n	800cbf8 <scalbnf+0x50>
 800cc3a:	3319      	adds	r3, #25
 800cc3c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800cc40:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800cc44:	eddf 7a07 	vldr	s15, [pc, #28]	; 800cc64 <scalbnf+0xbc>
 800cc48:	ee07 3a10 	vmov	s14, r3
 800cc4c:	ee67 0a27 	vmul.f32	s1, s14, s15
 800cc50:	e7b9      	b.n	800cbc6 <scalbnf+0x1e>
 800cc52:	bf00      	nop
 800cc54:	ffff3cb0 	.word	0xffff3cb0
 800cc58:	4c000000 	.word	0x4c000000
 800cc5c:	7149f2ca 	.word	0x7149f2ca
 800cc60:	0da24260 	.word	0x0da24260
 800cc64:	33000000 	.word	0x33000000

0800cc68 <copysignf>:
 800cc68:	ee10 3a10 	vmov	r3, s0
 800cc6c:	ee10 2a90 	vmov	r2, s1
 800cc70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc74:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	ee00 3a10 	vmov	s0, r3
 800cc7e:	4770      	bx	lr

0800cc80 <_init>:
 800cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc82:	bf00      	nop
 800cc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc86:	bc08      	pop	{r3}
 800cc88:	469e      	mov	lr, r3
 800cc8a:	4770      	bx	lr

0800cc8c <_fini>:
 800cc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc8e:	bf00      	nop
 800cc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc92:	bc08      	pop	{r3}
 800cc94:	469e      	mov	lr, r3
 800cc96:	4770      	bx	lr
