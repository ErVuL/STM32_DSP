
STM32_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08008d0c  08008d0c  00018d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eb0  08008eb0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008eb0  08008eb0  00018eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008eb8  08008eb8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eb8  08008eb8  00018eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ebc  08008ebc  00018ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b9c  200001e4  080090a4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008d80  080090a4  00028d80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e12  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003435  00000000  00000000  00036026  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de0  00000000  00000000  00039460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  0003a240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023c97  00000000  00000000  0003ae98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f2d6  00000000  00000000  0005eb2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c659a  00000000  00000000  0006de05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013439f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b90  00000000  00000000  0013441c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008cf4 	.word	0x08008cf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008cf4 	.word	0x08008cf4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000584:	f000 fd02 	bl	8000f8c <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000588:	f000 f84c 	bl	8000624 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800058c:	f000 f924 	bl	80007d8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000590:	f000 f8fa 	bl	8000788 <MX_DMA_Init>
	MX_I2S2_Init();
 8000594:	f000 f8c8 	bl	8000728 <MX_I2S2_Init>
	MX_USB_DEVICE_Init();
 8000598:	f007 f92a 	bl	80077f0 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	HAL_I2SEx_TransmitReceive_DMA(&hi2s2, I2S2_txBuffer, I2S2_rxBuffer, I2S2_BUFFER_LENGTH/2);
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	4a16      	ldr	r2, [pc, #88]	; (80005fc <main+0x7c>)
 80005a2:	4917      	ldr	r1, [pc, #92]	; (8000600 <main+0x80>)
 80005a4:	4817      	ldr	r0, [pc, #92]	; (8000604 <main+0x84>)
 80005a6:	f001 fe31 	bl	800220c <HAL_I2SEx_TransmitReceive_DMA>
	HAL_Delay(1500);
 80005aa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005ae:	f000 fd5f 	bl	8001070 <HAL_Delay>
	CDC_Printf("\r\n\n ================");
 80005b2:	4815      	ldr	r0, [pc, #84]	; (8000608 <main+0x88>)
 80005b4:	f007 fad6 	bl	8007b64 <CDC_Printf>
	CDC_Printf("\r\n *** DSP V0.0 ***");
 80005b8:	4814      	ldr	r0, [pc, #80]	; (800060c <main+0x8c>)
 80005ba:	f007 fad3 	bl	8007b64 <CDC_Printf>
	CDC_Printf("\r\n ================\r\n\n");
 80005be:	4814      	ldr	r0, [pc, #80]	; (8000610 <main+0x90>)
 80005c0:	f007 fad0 	bl	8007b64 <CDC_Printf>
	if(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14))
 80005c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c8:	4812      	ldr	r0, [pc, #72]	; (8000614 <main+0x94>)
 80005ca:	f001 fb8d 	bl	8001ce8 <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d103      	bne.n	80005dc <main+0x5c>
	{CDC_Printf("[ OK ] Hardware initialization\r\n");}
 80005d4:	4810      	ldr	r0, [pc, #64]	; (8000618 <main+0x98>)
 80005d6:	f007 fac5 	bl	8007b64 <CDC_Printf>
 80005da:	e002      	b.n	80005e2 <main+0x62>
	else{CDC_Printf("[ ER ] Hardware initialization\r\n");}
 80005dc:	480f      	ldr	r0, [pc, #60]	; (800061c <main+0x9c>)
 80005de:	f007 fac1 	bl	8007b64 <CDC_Printf>
	{
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */

		//CDC_Scanf("%s", cmd);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e6:	480b      	ldr	r0, [pc, #44]	; (8000614 <main+0x94>)
 80005e8:	f001 fbaf 	bl	8001d4a <HAL_GPIO_TogglePin>
		CDC_SpinWheels("Processing");
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <main+0xa0>)
 80005ee:	f007 fae1 	bl	8007bb4 <CDC_SpinWheels>
		HAL_Delay(250);
 80005f2:	20fa      	movs	r0, #250	; 0xfa
 80005f4:	f000 fd3c 	bl	8001070 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005f8:	e7f3      	b.n	80005e2 <main+0x62>
 80005fa:	bf00      	nop
 80005fc:	20004298 	.word	0x20004298
 8000600:	20000298 	.word	0x20000298
 8000604:	20008358 	.word	0x20008358
 8000608:	08008d0c 	.word	0x08008d0c
 800060c:	08008d24 	.word	0x08008d24
 8000610:	08008d38 	.word	0x08008d38
 8000614:	40020c00 	.word	0x40020c00
 8000618:	08008d50 	.word	0x08008d50
 800061c:	08008d74 	.word	0x08008d74
 8000620:	08008d98 	.word	0x08008d98

08000624 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b098      	sub	sp, #96	; 0x60
 8000628:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800062a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f007 ff59 	bl	80084ea <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	4b31      	ldr	r3, [pc, #196]	; (8000720 <SystemClock_Config+0xfc>)
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	4a30      	ldr	r2, [pc, #192]	; (8000720 <SystemClock_Config+0xfc>)
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	6413      	str	r3, [r2, #64]	; 0x40
 8000666:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <SystemClock_Config+0xfc>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <SystemClock_Config+0x100>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a2a      	ldr	r2, [pc, #168]	; (8000724 <SystemClock_Config+0x100>)
 800067c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000680:	6013      	str	r3, [r2, #0]
 8000682:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0x100>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068e:	2301      	movs	r3, #1
 8000690:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80006a2:	2308      	movs	r3, #8
 80006a4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 80006a6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006aa:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b0:	2307      	movs	r3, #7
 80006b2:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 fbef 	bl	8003e9c <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 80006c4:	f000 fa88 	bl	8000bd8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 80006c8:	230f      	movs	r3, #15
 80006ca:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	2105      	movs	r1, #5
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fe48 	bl	800437c <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 80006f2:	f000 fa71 	bl	8000bd8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006f6:	2301      	movs	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006fa:	23c0      	movs	r3, #192	; 0xc0
 80006fc:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	4618      	mov	r0, r3
 8000708:	f004 f802 	bl	8004710 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xf2>
	{
		Error_Handler();
 8000712:	f000 fa61 	bl	8000bd8 <Error_Handler>
	}
}
 8000716:	bf00      	nop
 8000718:	3760      	adds	r7, #96	; 0x60
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_I2S2_Init>:
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2S2_Init 0 */
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */
	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_I2S2_Init+0x54>)
 800072e:	4a14      	ldr	r2, [pc, #80]	; (8000780 <MX_I2S2_Init+0x58>)
 8000730:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2S2_Init+0x54>)
 8000734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000738:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_I2S2_Init+0x54>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_I2S2_Init+0x54>)
 8000742:	2203      	movs	r2, #3
 8000744:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_I2S2_Init+0x54>)
 8000748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074c:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_I2S2_Init+0x54>)
 8000750:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <MX_I2S2_Init+0x5c>)
 8000752:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_I2S2_Init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_I2S2_Init+0x54>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_I2S2_Init+0x54>)
 8000762:	2201      	movs	r2, #1
 8000764:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_I2S2_Init+0x54>)
 8000768:	f001 fb0a 	bl	8001d80 <HAL_I2S_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2S2_Init+0x4e>
	{
		Error_Handler();
 8000772:	f000 fa31 	bl	8000bd8 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */
	/* USER CODE END I2S2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20008358 	.word	0x20008358
 8000780:	40003800 	.word	0x40003800
 8000784:	00017700 	.word	0x00017700

08000788 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_DMA_Init+0x4c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <MX_DMA_Init+0x4c>)
 8000798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_DMA_Init+0x4c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200e      	movs	r0, #14
 80007b0:	f000 fd5b 	bl	800126a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007b4:	200e      	movs	r0, #14
 80007b6:	f000 fd74 	bl	80012a2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	200f      	movs	r0, #15
 80007c0:	f000 fd53 	bl	800126a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007c4:	200f      	movs	r0, #15
 80007c6:	f000 fd6c 	bl	80012a2 <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	; 0x30
 80007dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
 80007f2:	4b81      	ldr	r3, [pc, #516]	; (80009f8 <MX_GPIO_Init+0x220>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a80      	ldr	r2, [pc, #512]	; (80009f8 <MX_GPIO_Init+0x220>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b7e      	ldr	r3, [pc, #504]	; (80009f8 <MX_GPIO_Init+0x220>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	61bb      	str	r3, [r7, #24]
 8000808:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	4b7a      	ldr	r3, [pc, #488]	; (80009f8 <MX_GPIO_Init+0x220>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a79      	ldr	r2, [pc, #484]	; (80009f8 <MX_GPIO_Init+0x220>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b77      	ldr	r3, [pc, #476]	; (80009f8 <MX_GPIO_Init+0x220>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b73      	ldr	r3, [pc, #460]	; (80009f8 <MX_GPIO_Init+0x220>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a72      	ldr	r2, [pc, #456]	; (80009f8 <MX_GPIO_Init+0x220>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b70      	ldr	r3, [pc, #448]	; (80009f8 <MX_GPIO_Init+0x220>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b6c      	ldr	r3, [pc, #432]	; (80009f8 <MX_GPIO_Init+0x220>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a6b      	ldr	r2, [pc, #428]	; (80009f8 <MX_GPIO_Init+0x220>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b69      	ldr	r3, [pc, #420]	; (80009f8 <MX_GPIO_Init+0x220>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b65      	ldr	r3, [pc, #404]	; (80009f8 <MX_GPIO_Init+0x220>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a64      	ldr	r2, [pc, #400]	; (80009f8 <MX_GPIO_Init+0x220>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b62      	ldr	r3, [pc, #392]	; (80009f8 <MX_GPIO_Init+0x220>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b5e      	ldr	r3, [pc, #376]	; (80009f8 <MX_GPIO_Init+0x220>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a5d      	ldr	r2, [pc, #372]	; (80009f8 <MX_GPIO_Init+0x220>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b5b      	ldr	r3, [pc, #364]	; (80009f8 <MX_GPIO_Init+0x220>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2108      	movs	r1, #8
 800089a:	4858      	ldr	r0, [pc, #352]	; (80009fc <MX_GPIO_Init+0x224>)
 800089c:	f001 fa3c 	bl	8001d18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	4856      	ldr	r0, [pc, #344]	; (8000a00 <MX_GPIO_Init+0x228>)
 80008a6:	f001 fa37 	bl	8001d18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008b0:	4854      	ldr	r0, [pc, #336]	; (8000a04 <MX_GPIO_Init+0x22c>)
 80008b2:	f001 fa31 	bl	8001d18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008b6:	2308      	movs	r3, #8
 80008b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	484b      	ldr	r0, [pc, #300]	; (80009fc <MX_GPIO_Init+0x224>)
 80008ce:	f001 f871 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4845      	ldr	r0, [pc, #276]	; (8000a00 <MX_GPIO_Init+0x228>)
 80008ea:	f001 f863 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f2:	4b45      	ldr	r3, [pc, #276]	; (8000a08 <MX_GPIO_Init+0x230>)
 80008f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4842      	ldr	r0, [pc, #264]	; (8000a0c <MX_GPIO_Init+0x234>)
 8000902:	f001 f857 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000906:	2310      	movs	r3, #16
 8000908:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000916:	2306      	movs	r3, #6
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	483a      	ldr	r0, [pc, #232]	; (8000a0c <MX_GPIO_Init+0x234>)
 8000922:	f001 f847 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 8000926:	23e0      	movs	r3, #224	; 0xe0
 8000928:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000936:	2305      	movs	r3, #5
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4832      	ldr	r0, [pc, #200]	; (8000a0c <MX_GPIO_Init+0x234>)
 8000942:	f001 f837 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000946:	2304      	movs	r3, #4
 8000948:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	482d      	ldr	r0, [pc, #180]	; (8000a10 <MX_GPIO_Init+0x238>)
 800095a:	f001 f82b 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 800095e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000962:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4823      	ldr	r0, [pc, #140]	; (8000a04 <MX_GPIO_Init+0x22c>)
 8000978:	f001 f81c 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 800097c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000980:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098e:	2306      	movs	r3, #6
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4819      	ldr	r0, [pc, #100]	; (8000a00 <MX_GPIO_Init+0x228>)
 800099a:	f001 f80b 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800099e:	2320      	movs	r3, #32
 80009a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4814      	ldr	r0, [pc, #80]	; (8000a04 <MX_GPIO_Init+0x22c>)
 80009b2:	f000 ffff 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 80009b6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009bc:	2312      	movs	r3, #18
 80009be:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c8:	2304      	movs	r3, #4
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	480f      	ldr	r0, [pc, #60]	; (8000a10 <MX_GPIO_Init+0x238>)
 80009d4:	f000 ffee 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d8:	2302      	movs	r3, #2
 80009da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_GPIO_Init+0x230>)
 80009de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_GPIO_Init+0x224>)
 80009ec:	f000 ffe2 	bl	80019b4 <HAL_GPIO_Init>

}
 80009f0:	bf00      	nop
 80009f2:	3730      	adds	r7, #48	; 0x30
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	10120000 	.word	0x10120000
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020400 	.word	0x40020400

08000a14 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	3b04      	subs	r3, #4
 8000a24:	6018      	str	r0, [r3, #0]
	int32_t L_Channel[I2S2_BUFFER_LENGTH/8];
	int32_t R_Channel[I2S2_BUFFER_LENGTH/8];
	PmodI2S2_AudioRead_24b(I2S2_rxBuffer, L_Channel, R_Channel, I2S2_BUFFER_LENGTH/2);
 8000a26:	f107 0208 	add.w	r2, r7, #8
 8000a2a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000a2e:	f101 0108 	add.w	r1, r1, #8
 8000a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a36:	480a      	ldr	r0, [pc, #40]	; (8000a60 <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 8000a38:	f000 f840 	bl	8000abc <PmodI2S2_AudioRead_24b>
	/*
	 * PROCESS HERE
	 */
	PmodI2S2_AudioWrite_24b(I2S2_txBuffer, L_Channel, R_Channel, I2S2_BUFFER_LENGTH/2);
 8000a3c:	f107 0208 	add.w	r2, r7, #8
 8000a40:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000a44:	f101 0108 	add.w	r1, r1, #8
 8000a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <HAL_I2SEx_TxRxHalfCpltCallback+0x50>)
 8000a4e:	f000 f876 	bl	8000b3e <PmodI2S2_AudioWrite_24b>
}
 8000a52:	bf00      	nop
 8000a54:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20004298 	.word	0x20004298
 8000a64:	20000298 	.word	0x20000298

08000a68 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	3b04      	subs	r3, #4
 8000a78:	6018      	str	r0, [r3, #0]
	int32_t L_Channel[I2S2_BUFFER_LENGTH/8];
	int32_t R_Channel[I2S2_BUFFER_LENGTH/8];
	PmodI2S2_AudioRead_24b(&I2S2_rxBuffer[I2S2_BUFFER_LENGTH/2], L_Channel, R_Channel, I2S2_BUFFER_LENGTH/2);
 8000a7a:	f107 0208 	add.w	r2, r7, #8
 8000a7e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000a82:	f101 0108 	add.w	r1, r1, #8
 8000a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8a:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <HAL_I2SEx_TxRxCpltCallback+0x4c>)
 8000a8c:	f000 f816 	bl	8000abc <PmodI2S2_AudioRead_24b>
	/*
	 * PROCESS HERE
	 */
	PmodI2S2_AudioWrite_24b(&I2S2_txBuffer[I2S2_BUFFER_LENGTH/2], L_Channel, R_Channel, I2S2_BUFFER_LENGTH/2);
 8000a90:	f107 0208 	add.w	r2, r7, #8
 8000a94:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000a98:	f101 0108 	add.w	r1, r1, #8
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_I2SEx_TxRxCpltCallback+0x50>)
 8000aa2:	f000 f84c 	bl	8000b3e <PmodI2S2_AudioWrite_24b>
}
 8000aa6:	bf00      	nop
 8000aa8:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20006298 	.word	0x20006298
 8000ab8:	20002298 	.word	0x20002298

08000abc <PmodI2S2_AudioRead_24b>:

void PmodI2S2_AudioRead_24b(uint16_t * rxBuf, int32_t * L_Channel, int32_t * R_Channel, uint32_t Len)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	603b      	str	r3, [r7, #0]
	for (uint32_t i = 0; i+3 < Len; i+=4)
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	e02b      	b.n	8000b28 <PmodI2S2_AudioRead_24b+0x6c>
	{
		L_Channel[i/4] = (int32_t) (rxBuf[i]   << 16) | rxBuf[i+1];
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	041a      	lsls	r2, r3, #16
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	68f9      	ldr	r1, [r7, #12]
 8000ae4:	440b      	add	r3, r1
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f023 0303 	bic.w	r3, r3, #3
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	440b      	add	r3, r1
 8000af4:	4302      	orrs	r2, r0
 8000af6:	601a      	str	r2, [r3, #0]
		R_Channel[i/4] = (int32_t) (rxBuf[i+2] << 16) | rxBuf[i+3];
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3302      	adds	r3, #2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	4413      	add	r3, r2
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	041a      	lsls	r2, r3, #16
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3303      	adds	r3, #3
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	68f9      	ldr	r1, [r7, #12]
 8000b0e:	440b      	add	r3, r1
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f023 0303 	bic.w	r3, r3, #3
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	440b      	add	r3, r1
 8000b1e:	4302      	orrs	r2, r0
 8000b20:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i+3 < Len; i+=4)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3304      	adds	r3, #4
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3303      	adds	r3, #3
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d8ce      	bhi.n	8000ad0 <PmodI2S2_AudioRead_24b+0x14>
	}
}
 8000b32:	bf00      	nop
 8000b34:	371c      	adds	r7, #28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <PmodI2S2_AudioWrite_24b>:
void PmodI2S2_AudioWrite_24b(uint16_t * txBuf, int32_t * L_Channel, int32_t * R_Channel, uint32_t Len)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b087      	sub	sp, #28
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	603b      	str	r3, [r7, #0]
	for (uint32_t i = 0; i+3 < Len; i+=4)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e037      	b.n	8000bc2 <PmodI2S2_AudioWrite_24b+0x84>
	{
		txBuf[i]   = (L_Channel[i/4] >> 16) & 0xFFFF;
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f023 0303 	bic.w	r3, r3, #3
 8000b58:	68ba      	ldr	r2, [r7, #8]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	0c19      	lsrs	r1, r3, #16
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	b28a      	uxth	r2, r1
 8000b6a:	801a      	strh	r2, [r3, #0]
	    txBuf[i+1] =  L_Channel[i/4] & 0xFFFF;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f023 0303 	bic.w	r3, r3, #3
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	4413      	add	r3, r2
 8000b76:	6819      	ldr	r1, [r3, #0]
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	4413      	add	r3, r2
 8000b82:	b28a      	uxth	r2, r1
 8000b84:	801a      	strh	r2, [r3, #0]
	    txBuf[i+2] = (R_Channel[i/4] >> 16) & 0xFFFF;
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f023 0303 	bic.w	r3, r3, #3
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	0c19      	lsrs	r1, r3, #16
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3302      	adds	r3, #2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b28a      	uxth	r2, r1
 8000ba0:	801a      	strh	r2, [r3, #0]
	    txBuf[i+3] =  R_Channel[i/4] & 0xFFFF;
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f023 0303 	bic.w	r3, r3, #3
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	6819      	ldr	r1, [r3, #0]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3303      	adds	r3, #3
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	b28a      	uxth	r2, r1
 8000bba:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i+3 < Len; i+=4)
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3304      	adds	r3, #4
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3303      	adds	r3, #3
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8c2      	bhi.n	8000b52 <PmodI2S2_AudioWrite_24b+0x14>
	}
}
 8000bcc:	bf00      	nop
 8000bce:	371c      	adds	r7, #28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be2:	4802      	ldr	r0, [pc, #8]	; (8000bec <Error_Handler+0x14>)
 8000be4:	f001 f898 	bl	8001d18 <HAL_GPIO_WritePin>
	/* USER CODE END Error_Handler_Debug */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40020c00 	.word	0x40020c00

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c2e:	2007      	movs	r0, #7
 8000c30:	f000 fb10 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800

08000c40 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a62      	ldr	r2, [pc, #392]	; (8000de8 <HAL_I2S_MspInit+0x1a8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	f040 80be 	bne.w	8000de0 <HAL_I2S_MspInit+0x1a0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	4b60      	ldr	r3, [pc, #384]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	4a5f      	ldr	r2, [pc, #380]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c72:	6413      	str	r3, [r2, #64]	; 0x40
 8000c74:	4b5d      	ldr	r3, [pc, #372]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4b59      	ldr	r3, [pc, #356]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	4a58      	ldr	r2, [pc, #352]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c90:	4b56      	ldr	r3, [pc, #344]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	4b52      	ldr	r3, [pc, #328]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	4a51      	ldr	r2, [pc, #324]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cac:	4b4f      	ldr	r3, [pc, #316]	; (8000dec <HAL_I2S_MspInit+0x1ac>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000cc8:	2306      	movs	r3, #6
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4847      	ldr	r0, [pc, #284]	; (8000df0 <HAL_I2S_MspInit+0x1b0>)
 8000cd4:	f000 fe6e 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin|GPIO_PIN_6;
 8000cd8:	2348      	movs	r3, #72	; 0x48
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce8:	2305      	movs	r3, #5
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	483f      	ldr	r0, [pc, #252]	; (8000df0 <HAL_I2S_MspInit+0x1b0>)
 8000cf4:	f000 fe5e 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000cf8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4837      	ldr	r0, [pc, #220]	; (8000df4 <HAL_I2S_MspInit+0x1b4>)
 8000d16:	f000 fe4d 	bl	80019b4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000d1a:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d1c:	4a37      	ldr	r2, [pc, #220]	; (8000dfc <HAL_I2S_MspInit+0x1bc>)
 8000d1e:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000d20:	4b35      	ldr	r3, [pc, #212]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d22:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d26:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d28:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2e:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d34:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d3a:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d3c:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d42:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d4a:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d52:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d5a:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000d62:	4825      	ldr	r0, [pc, #148]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d64:	f000 fab8 	bl	80012d8 <HAL_DMA_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8000d6e:	f7ff ff33 	bl	8000bd8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a20      	ldr	r2, [pc, #128]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d76:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d78:	4a1f      	ldr	r2, [pc, #124]	; (8000df8 <HAL_I2S_MspInit+0x1b8>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <HAL_I2S_MspInit+0x1c0>)
 8000d80:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <HAL_I2S_MspInit+0x1c4>)
 8000d82:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <HAL_I2S_MspInit+0x1c0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <HAL_I2S_MspInit+0x1c0>)
 8000d8c:	2240      	movs	r2, #64	; 0x40
 8000d8e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_I2S_MspInit+0x1c0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <HAL_I2S_MspInit+0x1c0>)
 8000d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d9c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_I2S_MspInit+0x1c0>)
 8000da0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000da4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <HAL_I2S_MspInit+0x1c0>)
 8000da8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dac:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_I2S_MspInit+0x1c0>)
 8000db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_I2S_MspInit+0x1c0>)
 8000db8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dbc:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <HAL_I2S_MspInit+0x1c0>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000dc4:	480e      	ldr	r0, [pc, #56]	; (8000e00 <HAL_I2S_MspInit+0x1c0>)
 8000dc6:	f000 fa87 	bl	80012d8 <HAL_DMA_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 8000dd0:	f7ff ff02 	bl	8000bd8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_I2S_MspInit+0x1c0>)
 8000dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8000dda:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <HAL_I2S_MspInit+0x1c0>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40003800 	.word	0x40003800
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020800 	.word	0x40020800
 8000df4:	40020400 	.word	0x40020400
 8000df8:	20008298 	.word	0x20008298
 8000dfc:	40026058 	.word	0x40026058
 8000e00:	200082f8 	.word	0x200082f8
 8000e04:	40026070 	.word	0x40026070

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5c:	f000 f8e8 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <DMA1_Stream3_IRQHandler+0x10>)
 8000e6a:	f000 fb3b 	bl	80014e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20008298 	.word	0x20008298

08000e78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <DMA1_Stream4_IRQHandler+0x10>)
 8000e7e:	f000 fb31 	bl	80014e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200082f8 	.word	0x200082f8

08000e8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <OTG_FS_IRQHandler+0x10>)
 8000e92:	f001 ffcf 	bl	8002e34 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20008974 	.word	0x20008974

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f007 fac6 	bl	8008460 <__errno>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20020000 	.word	0x20020000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	20000200 	.word	0x20000200
 8000f08:	20008d80 	.word	0x20008d80

08000f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <SystemInit+0x28>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <SystemInit+0x28>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SystemInit+0x28>)
 8000f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f26:	609a      	str	r2, [r3, #8]
#endif
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f3e:	e003      	b.n	8000f48 <LoopCopyDataInit>

08000f40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f46:	3104      	adds	r1, #4

08000f48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f48:	480b      	ldr	r0, [pc, #44]	; (8000f78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f50:	d3f6      	bcc.n	8000f40 <CopyDataInit>
  ldr  r2, =_sbss
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f54:	e002      	b.n	8000f5c <LoopFillZerobss>

08000f56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f58:	f842 3b04 	str.w	r3, [r2], #4

08000f5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f60:	d3f9      	bcc.n	8000f56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f62:	f7ff ffd3 	bl	8000f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f007 fa81 	bl	800846c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fb09 	bl	8000580 <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f74:	08008ec0 	.word	0x08008ec0
  ldr  r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f7c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000f80:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000f84:	20008d80 	.word	0x20008d80

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f94d 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fe16 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f965 	bl	80012be <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800100c:	f000 f92d 	bl	800126a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000000 	.word	0x20000000
 8001028:	20000008 	.word	0x20000008
 800102c:	20000004 	.word	0x20000004

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008
 8001054:	200083a0 	.word	0x200083a0

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200083a0 	.word	0x200083a0

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_Delay+0x40>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001096:	bf00      	nop
 8001098:	f7ff ffde 	bl	8001058 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000008 	.word	0x20000008

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <__NVIC_EnableIRQ+0x38>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff29 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff3e 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff8e 	bl	80011a8 <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff31 	bl	8001118 <__NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffa2 	bl	8001210 <SysTick_Config>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff feb8 	bl	8001058 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e099      	b.n	8001428 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2202      	movs	r2, #2
 8001300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001314:	e00f      	b.n	8001336 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001316:	f7ff fe9f 	bl	8001058 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b05      	cmp	r3, #5
 8001322:	d908      	bls.n	8001336 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2220      	movs	r2, #32
 8001328:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2203      	movs	r2, #3
 800132e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e078      	b.n	8001428 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e8      	bne.n	8001316 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <HAL_DMA_Init+0x158>)
 8001350:	4013      	ands	r3, r2
 8001352:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001362:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800137a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4313      	orrs	r3, r2
 8001386:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	2b04      	cmp	r3, #4
 800138e:	d107      	bne.n	80013a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	4313      	orrs	r3, r2
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4313      	orrs	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f023 0307 	bic.w	r3, r3, #7
 80013b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	4313      	orrs	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d117      	bne.n	80013fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00e      	beq.n	80013fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fa6f 	bl	80018c0 <DMA_CheckFifoParam>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d008      	beq.n	80013fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2240      	movs	r2, #64	; 0x40
 80013ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013f6:	2301      	movs	r3, #1
 80013f8:	e016      	b.n	8001428 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 fa26 	bl	8001854 <DMA_CalcBaseAndBitshift>
 8001408:	4603      	mov	r3, r0
 800140a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001410:	223f      	movs	r2, #63	; 0x3f
 8001412:	409a      	lsls	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	f010803f 	.word	0xf010803f

08001434 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <HAL_DMA_Start_IT+0x26>
 8001456:	2302      	movs	r3, #2
 8001458:	e040      	b.n	80014dc <HAL_DMA_Start_IT+0xa8>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b01      	cmp	r3, #1
 800146c:	d12f      	bne.n	80014ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2202      	movs	r2, #2
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f9b8 	bl	80017f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	223f      	movs	r2, #63	; 0x3f
 800148e:	409a      	lsls	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0216 	orr.w	r2, r2, #22
 80014a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0208 	orr.w	r2, r2, #8
 80014ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e005      	b.n	80014da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014d6:	2302      	movs	r3, #2
 80014d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014da:	7dfb      	ldrb	r3, [r7, #23]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014f0:	4b92      	ldr	r3, [pc, #584]	; (800173c <HAL_DMA_IRQHandler+0x258>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a92      	ldr	r2, [pc, #584]	; (8001740 <HAL_DMA_IRQHandler+0x25c>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0a9b      	lsrs	r3, r3, #10
 80014fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	2208      	movs	r2, #8
 8001510:	409a      	lsls	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01a      	beq.n	8001550 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0204 	bic.w	r2, r2, #4
 8001536:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153c:	2208      	movs	r2, #8
 800153e:	409a      	lsls	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	2201      	movs	r2, #1
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d012      	beq.n	8001586 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	2201      	movs	r2, #1
 8001574:	409a      	lsls	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157e:	f043 0202 	orr.w	r2, r3, #2
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158a:	2204      	movs	r2, #4
 800158c:	409a      	lsls	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4013      	ands	r3, r2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d012      	beq.n	80015bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d00b      	beq.n	80015bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	2204      	movs	r2, #4
 80015aa:	409a      	lsls	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	f043 0204 	orr.w	r2, r3, #4
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	2210      	movs	r2, #16
 80015c2:	409a      	lsls	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d043      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d03c      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	2210      	movs	r2, #16
 80015e0:	409a      	lsls	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d018      	beq.n	8001626 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d108      	bne.n	8001614 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d024      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	4798      	blx	r3
 8001612:	e01f      	b.n	8001654 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01b      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	4798      	blx	r3
 8001624:	e016      	b.n	8001654 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d107      	bne.n	8001644 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0208 	bic.w	r2, r2, #8
 8001642:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001658:	2220      	movs	r2, #32
 800165a:	409a      	lsls	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 808e 	beq.w	8001782 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 8086 	beq.w	8001782 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	2220      	movs	r2, #32
 800167c:	409a      	lsls	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b05      	cmp	r3, #5
 800168c:	d136      	bne.n	80016fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0216 	bic.w	r2, r2, #22
 800169c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <HAL_DMA_IRQHandler+0x1da>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0208 	bic.w	r2, r2, #8
 80016cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d2:	223f      	movs	r2, #63	; 0x3f
 80016d4:	409a      	lsls	r2, r3
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d07d      	beq.n	80017ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	4798      	blx	r3
        }
        return;
 80016fa:	e078      	b.n	80017ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01c      	beq.n	8001744 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d108      	bne.n	800172a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	2b00      	cmp	r3, #0
 800171e:	d030      	beq.n	8001782 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	4798      	blx	r3
 8001728:	e02b      	b.n	8001782 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172e:	2b00      	cmp	r3, #0
 8001730:	d027      	beq.n	8001782 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	4798      	blx	r3
 800173a:	e022      	b.n	8001782 <HAL_DMA_IRQHandler+0x29e>
 800173c:	20000000 	.word	0x20000000
 8001740:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10f      	bne.n	8001772 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0210 	bic.w	r2, r2, #16
 8001760:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001786:	2b00      	cmp	r3, #0
 8001788:	d032      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d022      	beq.n	80017dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2205      	movs	r2, #5
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0201 	bic.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3301      	adds	r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d307      	bcc.n	80017ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f2      	bne.n	80017ae <HAL_DMA_IRQHandler+0x2ca>
 80017c8:	e000      	b.n	80017cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	4798      	blx	r3
 80017ec:	e000      	b.n	80017f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80017ee:	bf00      	nop
    }
  }
}
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop

080017f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001814:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b40      	cmp	r3, #64	; 0x40
 8001824:	d108      	bne.n	8001838 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001836:	e007      	b.n	8001848 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	60da      	str	r2, [r3, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	3b10      	subs	r3, #16
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800186e:	4a13      	ldr	r2, [pc, #76]	; (80018bc <DMA_CalcBaseAndBitshift+0x68>)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d909      	bls.n	8001896 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800188a:	f023 0303 	bic.w	r3, r3, #3
 800188e:	1d1a      	adds	r2, r3, #4
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	659a      	str	r2, [r3, #88]	; 0x58
 8001894:	e007      	b.n	80018a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800189e:	f023 0303 	bic.w	r3, r3, #3
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	aaaaaaab 	.word	0xaaaaaaab
 80018bc:	08008e14 	.word	0x08008e14

080018c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d11f      	bne.n	800191a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d855      	bhi.n	800198c <DMA_CheckFifoParam+0xcc>
 80018e0:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <DMA_CheckFifoParam+0x28>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	0800190b 	.word	0x0800190b
 80018f0:	080018f9 	.word	0x080018f9
 80018f4:	0800198d 	.word	0x0800198d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d045      	beq.n	8001990 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001908:	e042      	b.n	8001990 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001912:	d13f      	bne.n	8001994 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001918:	e03c      	b.n	8001994 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001922:	d121      	bne.n	8001968 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d836      	bhi.n	8001998 <DMA_CheckFifoParam+0xd8>
 800192a:	a201      	add	r2, pc, #4	; (adr r2, 8001930 <DMA_CheckFifoParam+0x70>)
 800192c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001930:	08001941 	.word	0x08001941
 8001934:	08001947 	.word	0x08001947
 8001938:	08001941 	.word	0x08001941
 800193c:	08001959 	.word	0x08001959
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
      break;
 8001944:	e02f      	b.n	80019a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d024      	beq.n	800199c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001956:	e021      	b.n	800199c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001960:	d11e      	bne.n	80019a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001966:	e01b      	b.n	80019a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d902      	bls.n	8001974 <DMA_CheckFifoParam+0xb4>
 800196e:	2b03      	cmp	r3, #3
 8001970:	d003      	beq.n	800197a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001972:	e018      	b.n	80019a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
      break;
 8001978:	e015      	b.n	80019a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00e      	beq.n	80019a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	73fb      	strb	r3, [r7, #15]
      break;
 800198a:	e00b      	b.n	80019a4 <DMA_CheckFifoParam+0xe4>
      break;
 800198c:	bf00      	nop
 800198e:	e00a      	b.n	80019a6 <DMA_CheckFifoParam+0xe6>
      break;
 8001990:	bf00      	nop
 8001992:	e008      	b.n	80019a6 <DMA_CheckFifoParam+0xe6>
      break;
 8001994:	bf00      	nop
 8001996:	e006      	b.n	80019a6 <DMA_CheckFifoParam+0xe6>
      break;
 8001998:	bf00      	nop
 800199a:	e004      	b.n	80019a6 <DMA_CheckFifoParam+0xe6>
      break;
 800199c:	bf00      	nop
 800199e:	e002      	b.n	80019a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80019a0:	bf00      	nop
 80019a2:	e000      	b.n	80019a6 <DMA_CheckFifoParam+0xe6>
      break;
 80019a4:	bf00      	nop
    }
  } 
  
  return status; 
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	e16b      	b.n	8001ca8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 815a 	bne.w	8001ca2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d00b      	beq.n	8001a0e <HAL_GPIO_Init+0x5a>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d007      	beq.n	8001a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a02:	2b11      	cmp	r3, #17
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b12      	cmp	r3, #18
 8001a0c:	d130      	bne.n	8001a70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 0201 	and.w	r2, r3, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0xfc>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b12      	cmp	r3, #18
 8001aae:	d123      	bne.n	8001af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	08da      	lsrs	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80b4 	beq.w	8001ca2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b5f      	ldr	r3, [pc, #380]	; (8001cbc <HAL_GPIO_Init+0x308>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a5e      	ldr	r2, [pc, #376]	; (8001cbc <HAL_GPIO_Init+0x308>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b5c      	ldr	r3, [pc, #368]	; (8001cbc <HAL_GPIO_Init+0x308>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b56:	4a5a      	ldr	r2, [pc, #360]	; (8001cc0 <HAL_GPIO_Init+0x30c>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a51      	ldr	r2, [pc, #324]	; (8001cc4 <HAL_GPIO_Init+0x310>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d02b      	beq.n	8001bda <HAL_GPIO_Init+0x226>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a50      	ldr	r2, [pc, #320]	; (8001cc8 <HAL_GPIO_Init+0x314>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d025      	beq.n	8001bd6 <HAL_GPIO_Init+0x222>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4f      	ldr	r2, [pc, #316]	; (8001ccc <HAL_GPIO_Init+0x318>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01f      	beq.n	8001bd2 <HAL_GPIO_Init+0x21e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4e      	ldr	r2, [pc, #312]	; (8001cd0 <HAL_GPIO_Init+0x31c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d019      	beq.n	8001bce <HAL_GPIO_Init+0x21a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4d      	ldr	r2, [pc, #308]	; (8001cd4 <HAL_GPIO_Init+0x320>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0x216>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4c      	ldr	r2, [pc, #304]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_GPIO_Init+0x212>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4b      	ldr	r2, [pc, #300]	; (8001cdc <HAL_GPIO_Init+0x328>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_Init+0x20e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4a      	ldr	r2, [pc, #296]	; (8001ce0 <HAL_GPIO_Init+0x32c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_GPIO_Init+0x20a>
 8001bba:	2307      	movs	r3, #7
 8001bbc:	e00e      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	e00c      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	e00a      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bec:	4934      	ldr	r1, [pc, #208]	; (8001cc0 <HAL_GPIO_Init+0x30c>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c1e:	4a31      	ldr	r2, [pc, #196]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c24:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4e:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c9c:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	f67f ae90 	bls.w	80019d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3724      	adds	r7, #36	; 0x24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40013800 	.word	0x40013800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40020c00 	.word	0x40020c00
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40021400 	.word	0x40021400
 8001cdc:	40021800 	.word	0x40021800
 8001ce0:	40021c00 	.word	0x40021c00
 8001ce4:	40013c00 	.word	0x40013c00

08001ce8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	e001      	b.n	8001d0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d34:	e003      	b.n	8001d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	619a      	str	r2, [r3, #24]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	887b      	ldrh	r3, [r7, #2]
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d104      	bne.n	8001d6e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	041a      	lsls	r2, r3, #16
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e128      	b.n	8001fe4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d109      	bne.n	8001db2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a90      	ldr	r2, [pc, #576]	; (8001fec <HAL_I2S_Init+0x26c>)
 8001daa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7fe ff47 	bl	8000c40 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2202      	movs	r2, #2
 8001db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001dc8:	f023 030f 	bic.w	r3, r3, #15
 8001dcc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d060      	beq.n	8001ea0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001de6:	2310      	movs	r3, #16
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	e001      	b.n	8001df0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001dec:	2320      	movs	r3, #32
 8001dee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d802      	bhi.n	8001dfe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f002 fd68 	bl	80048d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e04:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0e:	d125      	bne.n	8001e5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d010      	beq.n	8001e3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	3305      	adds	r3, #5
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	e01f      	b.n	8001e7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e56:	3305      	adds	r3, #5
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	e00e      	b.n	8001e7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e76:	3305      	adds	r3, #5
 8001e78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4a5c      	ldr	r2, [pc, #368]	; (8001ff0 <HAL_I2S_Init+0x270>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	085b      	lsrs	r3, r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	e003      	b.n	8001ea8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d902      	bls.n	8001eb4 <HAL_I2S_Init+0x134>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	2bff      	cmp	r3, #255	; 0xff
 8001eb2:	d907      	bls.n	8001ec4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	f043 0210 	orr.w	r2, r3, #16
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e08f      	b.n	8001fe4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	ea42 0103 	orr.w	r1, r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ee2:	f023 030f 	bic.w	r3, r3, #15
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6851      	ldr	r1, [r2, #4]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6892      	ldr	r2, [r2, #8]
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	68d2      	ldr	r2, [r2, #12]
 8001ef4:	4311      	orrs	r1, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6992      	ldr	r2, [r2, #24]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d161      	bne.n	8001fd4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a38      	ldr	r2, [pc, #224]	; (8001ff4 <HAL_I2S_Init+0x274>)
 8001f14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a37      	ldr	r2, [pc, #220]	; (8001ff8 <HAL_I2S_Init+0x278>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_I2S_Init+0x1a4>
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_I2S_Init+0x27c>)
 8001f22:	e001      	b.n	8001f28 <HAL_I2S_Init+0x1a8>
 8001f24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	4932      	ldr	r1, [pc, #200]	; (8001ff8 <HAL_I2S_Init+0x278>)
 8001f30:	428a      	cmp	r2, r1
 8001f32:	d101      	bne.n	8001f38 <HAL_I2S_Init+0x1b8>
 8001f34:	4a31      	ldr	r2, [pc, #196]	; (8001ffc <HAL_I2S_Init+0x27c>)
 8001f36:	e001      	b.n	8001f3c <HAL_I2S_Init+0x1bc>
 8001f38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001f3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f40:	f023 030f 	bic.w	r3, r3, #15
 8001f44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a2b      	ldr	r2, [pc, #172]	; (8001ff8 <HAL_I2S_Init+0x278>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_I2S_Init+0x1d4>
 8001f50:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_I2S_Init+0x27c>)
 8001f52:	e001      	b.n	8001f58 <HAL_I2S_Init+0x1d8>
 8001f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f58:	2202      	movs	r2, #2
 8001f5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <HAL_I2S_Init+0x278>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_I2S_Init+0x1ea>
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <HAL_I2S_Init+0x27c>)
 8001f68:	e001      	b.n	8001f6e <HAL_I2S_Init+0x1ee>
 8001f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f7a:	d003      	beq.n	8001f84 <HAL_I2S_Init+0x204>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d103      	bne.n	8001f8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	e001      	b.n	8001f90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	b299      	uxth	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001fa6:	4303      	orrs	r3, r0
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	430b      	orrs	r3, r1
 8001fac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	897b      	ldrh	r3, [r7, #10]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fbc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <HAL_I2S_Init+0x278>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2S_Init+0x24c>
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <HAL_I2S_Init+0x27c>)
 8001fca:	e001      	b.n	8001fd0 <HAL_I2S_Init+0x250>
 8001fcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fd0:	897a      	ldrh	r2, [r7, #10]
 8001fd2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	080020f7 	.word	0x080020f7
 8001ff0:	cccccccd 	.word	0xcccccccd
 8001ff4:	08002521 	.word	0x08002521
 8001ff8:	40003800 	.word	0x40003800
 8001ffc:	40003400 	.word	0x40003400

08002000 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	881a      	ldrh	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	1c9a      	adds	r2, r3, #2
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10e      	bne.n	8002090 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002080:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffb8 	bl	8002000 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	b292      	uxth	r2, r2
 80020ac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	1c9a      	adds	r2, r3, #2
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10e      	bne.n	80020ee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff93 	bl	8002014 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b04      	cmp	r3, #4
 8002110:	d13a      	bne.n	8002188 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d109      	bne.n	8002130 <I2S_IRQHandler+0x3a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d102      	bne.n	8002130 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffb4 	bl	8002098 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b40      	cmp	r3, #64	; 0x40
 8002138:	d126      	bne.n	8002188 <I2S_IRQHandler+0x92>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b20      	cmp	r3, #32
 8002146:	d11f      	bne.n	8002188 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002156:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f043 0202 	orr.w	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ff50 	bl	8002028 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b03      	cmp	r3, #3
 8002192:	d136      	bne.n	8002202 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d109      	bne.n	80021b2 <I2S_IRQHandler+0xbc>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a8:	2b80      	cmp	r3, #128	; 0x80
 80021aa:	d102      	bne.n	80021b2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff45 	bl	800203c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d122      	bne.n	8002202 <I2S_IRQHandler+0x10c>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d11b      	bne.n	8002202 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021d8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	f043 0204 	orr.w	r2, r3, #4
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff13 	bl	8002028 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d002      	beq.n	8002238 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002232:	2302      	movs	r3, #2
 8002234:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002236:	e160      	b.n	80024fa <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e15a      	b.n	8002504 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800225a:	2302      	movs	r3, #2
 800225c:	e152      	b.n	8002504 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d002      	beq.n	800228a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2b05      	cmp	r3, #5
 8002288:	d114      	bne.n	80022b4 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800229e:	887b      	ldrh	r3, [r7, #2]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	865a      	strh	r2, [r3, #50]	; 0x32
 80022b2:	e00b      	b.n	80022cc <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	887a      	ldrh	r2, [r7, #2]
 80022be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2205      	movs	r2, #5
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	4a8b      	ldr	r2, [pc, #556]	; (800250c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	4a8a      	ldr	r2, [pc, #552]	; (8002510 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80022e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	4a89      	ldr	r2, [pc, #548]	; (8002514 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80022f0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	4a85      	ldr	r2, [pc, #532]	; (800250c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	4a84      	ldr	r2, [pc, #528]	; (8002510 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	4a83      	ldr	r2, [pc, #524]	; (8002514 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002308:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002314:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800231c:	d002      	beq.n	8002324 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d16b      	bne.n	80023fc <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a79      	ldr	r2, [pc, #484]	; (8002518 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002336:	4b79      	ldr	r3, [pc, #484]	; (800251c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002338:	e001      	b.n	800233e <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800233a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800233e:	330c      	adds	r3, #12
 8002340:	4619      	mov	r1, r3
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800234a:	b29b      	uxth	r3, r3
 800234c:	f7ff f872 	bl	8001434 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a70      	ldr	r2, [pc, #448]	; (8002518 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800235a:	4b70      	ldr	r3, [pc, #448]	; (800251c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800235c:	e001      	b.n	8002362 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 800235e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	496b      	ldr	r1, [pc, #428]	; (8002518 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800236a:	428b      	cmp	r3, r1
 800236c:	d101      	bne.n	8002372 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 800236e:	4b6b      	ldr	r3, [pc, #428]	; (800251c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002370:	e001      	b.n	8002376 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002372:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	6819      	ldr	r1, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	330c      	adds	r3, #12
 8002390:	461a      	mov	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002396:	b29b      	uxth	r3, r3
 8002398:	f7ff f84c 	bl	8001434 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0202 	orr.w	r2, r2, #2
 80023aa:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ba:	f000 809e 	beq.w	80024fa <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a55      	ldr	r2, [pc, #340]	; (8002518 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80023c8:	4b54      	ldr	r3, [pc, #336]	; (800251c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80023ca:	e001      	b.n	80023d0 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80023cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4950      	ldr	r1, [pc, #320]	; (8002518 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80023d8:	428b      	cmp	r3, r1
 80023da:	d101      	bne.n	80023e0 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80023dc:	4b4f      	ldr	r3, [pc, #316]	; (800251c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80023de:	e001      	b.n	80023e4 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80023e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023e8:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023f8:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80023fa:	e07e      	b.n	80024fa <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800240a:	d10a      	bne.n	8002422 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002422:	f107 0308 	add.w	r3, r7, #8
 8002426:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6819      	ldr	r1, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a38      	ldr	r2, [pc, #224]	; (8002518 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800243a:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800243c:	e001      	b.n	8002442 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 800243e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002442:	330c      	adds	r3, #12
 8002444:	461a      	mov	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244a:	b29b      	uxth	r3, r3
 800244c:	f7fe fff2 	bl	8001434 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a30      	ldr	r2, [pc, #192]	; (8002518 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800245a:	4b30      	ldr	r3, [pc, #192]	; (800251c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800245c:	e001      	b.n	8002462 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 800245e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	492b      	ldr	r1, [pc, #172]	; (8002518 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800246a:	428b      	cmp	r3, r1
 800246c:	d101      	bne.n	8002472 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 800246e:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002470:	e001      	b.n	8002476 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002472:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002476:	f042 0202 	orr.w	r2, r2, #2
 800247a:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	330c      	adds	r3, #12
 800248a:	4619      	mov	r1, r3
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002494:	b29b      	uxth	r3, r3
 8002496:	f7fe ffcd 	bl	8001434 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b8:	d01e      	beq.n	80024f8 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a16      	ldr	r2, [pc, #88]	; (8002518 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d101      	bne.n	80024c8 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80024c4:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80024c6:	e001      	b.n	80024cc <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80024c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024cc:	69da      	ldr	r2, [r3, #28]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4911      	ldr	r1, [pc, #68]	; (8002518 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80024d4:	428b      	cmp	r3, r1
 80024d6:	d101      	bne.n	80024dc <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80024da:	e001      	b.n	80024e0 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80024dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024e4:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	69da      	ldr	r2, [r3, #28]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024f4:	61da      	str	r2, [r3, #28]
 80024f6:	e000      	b.n	80024fa <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80024f8:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002502:	7ffb      	ldrb	r3, [r7, #31]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	080027c9 	.word	0x080027c9
 8002510:	080027e5 	.word	0x080027e5
 8002514:	0800291d 	.word	0x0800291d
 8002518:	40003800 	.word	0x40003800
 800251c:	40003400 	.word	0x40003400

08002520 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4aa2      	ldr	r2, [pc, #648]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800253a:	4ba2      	ldr	r3, [pc, #648]	; (80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800253c:	e001      	b.n	8002542 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800253e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a9b      	ldr	r2, [pc, #620]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002558:	4b9a      	ldr	r3, [pc, #616]	; (80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800255a:	e001      	b.n	8002560 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800255c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256c:	d004      	beq.n	8002578 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 8099 	bne.w	80026aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b02      	cmp	r3, #2
 8002580:	d107      	bne.n	8002592 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fa05 	bl	800299c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d107      	bne.n	80025ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 faa8 	bl	8002afc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b2:	2b40      	cmp	r3, #64	; 0x40
 80025b4:	d13a      	bne.n	800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d035      	beq.n	800262c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a7e      	ldr	r2, [pc, #504]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d101      	bne.n	80025ce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80025ca:	4b7e      	ldr	r3, [pc, #504]	; (80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80025cc:	e001      	b.n	80025d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80025ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4979      	ldr	r1, [pc, #484]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025da:	428b      	cmp	r3, r1
 80025dc:	d101      	bne.n	80025e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80025de:	4b79      	ldr	r3, [pc, #484]	; (80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80025e0:	e001      	b.n	80025e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80025e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025ea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f043 0202 	orr.w	r2, r3, #2
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fcfe 	bl	8002028 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b08      	cmp	r3, #8
 8002634:	f040 80be 	bne.w	80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80b8 	beq.w	80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002652:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a59      	ldr	r2, [pc, #356]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800265e:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002660:	e001      	b.n	8002666 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4954      	ldr	r1, [pc, #336]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800266e:	428b      	cmp	r3, r1
 8002670:	d101      	bne.n	8002676 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002672:	4b54      	ldr	r3, [pc, #336]	; (80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002674:	e001      	b.n	800267a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002676:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800267a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800267e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002680:	2300      	movs	r3, #0
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f043 0204 	orr.w	r2, r3, #4
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fcc0 	bl	8002028 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026a8:	e084      	b.n	80027b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d107      	bne.n	80026c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f99e 	bl	8002a00 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f9dd 	bl	8002a98 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d12f      	bne.n	8002748 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d02a      	beq.n	8002748 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002700:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2e      	ldr	r2, [pc, #184]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d101      	bne.n	8002710 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800270e:	e001      	b.n	8002714 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4929      	ldr	r1, [pc, #164]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800271c:	428b      	cmp	r3, r1
 800271e:	d101      	bne.n	8002724 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002720:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002722:	e001      	b.n	8002728 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002724:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002728:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800272c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	f043 0202 	orr.w	r2, r3, #2
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fc70 	bl	8002028 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b08      	cmp	r3, #8
 8002750:	d131      	bne.n	80027b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d02c      	beq.n	80027b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002766:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002768:	e001      	b.n	800276e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800276a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4912      	ldr	r1, [pc, #72]	; (80027c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002776:	428b      	cmp	r3, r1
 8002778:	d101      	bne.n	800277e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800277c:	e001      	b.n	8002782 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800277e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002782:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002786:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002796:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	f043 0204 	orr.w	r2, r3, #4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff fc3b 	bl	8002028 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027b2:	e000      	b.n	80027b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027b4:	bf00      	nop
}
 80027b6:	bf00      	nop
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40003800 	.word	0x40003800
 80027c4:	40003400 	.word	0x40003400

080027c8 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7fe f91c 	bl	8000a14 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 8084 	bne.w	8002904 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	d13c      	bne.n	8002880 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002814:	d006      	beq.n	8002824 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002820:	2b00      	cmp	r3, #0
 8002822:	d116      	bne.n	8002852 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <I2SEx_TxRxDMACplt+0x130>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <I2SEx_TxRxDMACplt+0x4e>
 800282e:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <I2SEx_TxRxDMACplt+0x134>)
 8002830:	e001      	b.n	8002836 <I2SEx_TxRxDMACplt+0x52>
 8002832:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4935      	ldr	r1, [pc, #212]	; (8002914 <I2SEx_TxRxDMACplt+0x130>)
 800283e:	428b      	cmp	r3, r1
 8002840:	d101      	bne.n	8002846 <I2SEx_TxRxDMACplt+0x62>
 8002842:	4b35      	ldr	r3, [pc, #212]	; (8002918 <I2SEx_TxRxDMACplt+0x134>)
 8002844:	e001      	b.n	800284a <I2SEx_TxRxDMACplt+0x66>
 8002846:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	e007      	b.n	8002862 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f7fe f8f4 	bl	8000a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	429a      	cmp	r2, r3
 8002888:	d13c      	bne.n	8002904 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002898:	d006      	beq.n	80028a8 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d108      	bne.n	80028ba <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0202 	bic.w	r2, r2, #2
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	e015      	b.n	80028e6 <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a15      	ldr	r2, [pc, #84]	; (8002914 <I2SEx_TxRxDMACplt+0x130>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d101      	bne.n	80028c8 <I2SEx_TxRxDMACplt+0xe4>
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <I2SEx_TxRxDMACplt+0x134>)
 80028c6:	e001      	b.n	80028cc <I2SEx_TxRxDMACplt+0xe8>
 80028c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4910      	ldr	r1, [pc, #64]	; (8002914 <I2SEx_TxRxDMACplt+0x130>)
 80028d4:	428b      	cmp	r3, r1
 80028d6:	d101      	bne.n	80028dc <I2SEx_TxRxDMACplt+0xf8>
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <I2SEx_TxRxDMACplt+0x134>)
 80028da:	e001      	b.n	80028e0 <I2SEx_TxRxDMACplt+0xfc>
 80028dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028e0:	f022 0202 	bic.w	r2, r2, #2
 80028e4:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f7fe f8b2 	bl	8000a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f7fe f8af 	bl	8000a68 <HAL_I2SEx_TxRxCpltCallback>
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40003800 	.word	0x40003800
 8002918:	40003400 	.word	0x40003400

0800291c <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0203 	bic.w	r2, r2, #3
 8002938:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a15      	ldr	r2, [pc, #84]	; (8002994 <I2SEx_TxRxDMAError+0x78>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <I2SEx_TxRxDMAError+0x2c>
 8002944:	4b14      	ldr	r3, [pc, #80]	; (8002998 <I2SEx_TxRxDMAError+0x7c>)
 8002946:	e001      	b.n	800294c <I2SEx_TxRxDMAError+0x30>
 8002948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4910      	ldr	r1, [pc, #64]	; (8002994 <I2SEx_TxRxDMAError+0x78>)
 8002954:	428b      	cmp	r3, r1
 8002956:	d101      	bne.n	800295c <I2SEx_TxRxDMAError+0x40>
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <I2SEx_TxRxDMAError+0x7c>)
 800295a:	e001      	b.n	8002960 <I2SEx_TxRxDMAError+0x44>
 800295c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002960:	f022 0203 	bic.w	r2, r2, #3
 8002964:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f043 0208 	orr.w	r2, r3, #8
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7ff fb4e 	bl	8002028 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40003800 	.word	0x40003800
 8002998:	40003400 	.word	0x40003400

0800299c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	1c99      	adds	r1, r3, #2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6251      	str	r1, [r2, #36]	; 0x24
 80029ae:	881a      	ldrh	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d113      	bne.n	80029f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fe f839 	bl	8000a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	1c99      	adds	r1, r3, #2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6251      	str	r1, [r2, #36]	; 0x24
 8002a12:	8819      	ldrh	r1, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1d      	ldr	r2, [pc, #116]	; (8002a90 <I2SEx_TxISR_I2SExt+0x90>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d101      	bne.n	8002a22 <I2SEx_TxISR_I2SExt+0x22>
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <I2SEx_TxISR_I2SExt+0x94>)
 8002a20:	e001      	b.n	8002a26 <I2SEx_TxISR_I2SExt+0x26>
 8002a22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a26:	460a      	mov	r2, r1
 8002a28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d121      	bne.n	8002a86 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <I2SEx_TxISR_I2SExt+0x90>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d101      	bne.n	8002a50 <I2SEx_TxISR_I2SExt+0x50>
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <I2SEx_TxISR_I2SExt+0x94>)
 8002a4e:	e001      	b.n	8002a54 <I2SEx_TxISR_I2SExt+0x54>
 8002a50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	490d      	ldr	r1, [pc, #52]	; (8002a90 <I2SEx_TxISR_I2SExt+0x90>)
 8002a5c:	428b      	cmp	r3, r1
 8002a5e:	d101      	bne.n	8002a64 <I2SEx_TxISR_I2SExt+0x64>
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <I2SEx_TxISR_I2SExt+0x94>)
 8002a62:	e001      	b.n	8002a68 <I2SEx_TxISR_I2SExt+0x68>
 8002a64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d106      	bne.n	8002a86 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7fd fff1 	bl	8000a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40003800 	.word	0x40003800
 8002a94:	40003400 	.word	0x40003400

08002a98 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68d8      	ldr	r0, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	1c99      	adds	r1, r3, #2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002ab0:	b282      	uxth	r2, r0
 8002ab2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d113      	bne.n	8002af4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ada:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fd ffba 	bl	8000a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a20      	ldr	r2, [pc, #128]	; (8002b8c <I2SEx_RxISR_I2SExt+0x90>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <I2SEx_RxISR_I2SExt+0x16>
 8002b0e:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <I2SEx_RxISR_I2SExt+0x94>)
 8002b10:	e001      	b.n	8002b16 <I2SEx_RxISR_I2SExt+0x1a>
 8002b12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b16:	68d8      	ldr	r0, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	1c99      	adds	r1, r3, #2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002b22:	b282      	uxth	r2, r0
 8002b24:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d121      	bne.n	8002b82 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <I2SEx_RxISR_I2SExt+0x90>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d101      	bne.n	8002b4c <I2SEx_RxISR_I2SExt+0x50>
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <I2SEx_RxISR_I2SExt+0x94>)
 8002b4a:	e001      	b.n	8002b50 <I2SEx_RxISR_I2SExt+0x54>
 8002b4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	490d      	ldr	r1, [pc, #52]	; (8002b8c <I2SEx_RxISR_I2SExt+0x90>)
 8002b58:	428b      	cmp	r3, r1
 8002b5a:	d101      	bne.n	8002b60 <I2SEx_RxISR_I2SExt+0x64>
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <I2SEx_RxISR_I2SExt+0x94>)
 8002b5e:	e001      	b.n	8002b64 <I2SEx_RxISR_I2SExt+0x68>
 8002b60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b68:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d106      	bne.n	8002b82 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7fd ff73 	bl	8000a68 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40003800 	.word	0x40003800
 8002b90:	40003400 	.word	0x40003400

08002b94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b96:	b08f      	sub	sp, #60	; 0x3c
 8002b98:	af0a      	add	r7, sp, #40	; 0x28
 8002b9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e10f      	b.n	8002dc6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d106      	bne.n	8002bc6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f005 f943 	bl	8007e4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2203      	movs	r2, #3
 8002bca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 ffe6 	bl	8004bb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	687e      	ldr	r6, [r7, #4]
 8002bf2:	466d      	mov	r5, sp
 8002bf4:	f106 0410 	add.w	r4, r6, #16
 8002bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c04:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c08:	1d33      	adds	r3, r6, #4
 8002c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c0c:	6838      	ldr	r0, [r7, #0]
 8002c0e:	f001 febd 	bl	800498c <USB_CoreInit>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0d0      	b.n	8002dc6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 ffd4 	bl	8004bd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	e04a      	b.n	8002ccc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	333d      	adds	r3, #61	; 0x3d
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	333c      	adds	r3, #60	; 0x3c
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	b298      	uxth	r0, r3
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	3342      	adds	r3, #66	; 0x42
 8002c72:	4602      	mov	r2, r0
 8002c74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	333f      	adds	r3, #63	; 0x3f
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3344      	adds	r3, #68	; 0x44
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	3348      	adds	r3, #72	; 0x48
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3350      	adds	r3, #80	; 0x50
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d3af      	bcc.n	8002c36 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
 8002cda:	e044      	b.n	8002d66 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d08:	7bfa      	ldrb	r2, [r7, #15]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d4a:	7bfa      	ldrb	r2, [r7, #15]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	3301      	adds	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d3b5      	bcc.n	8002cdc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	687e      	ldr	r6, [r7, #4]
 8002d78:	466d      	mov	r5, sp
 8002d7a:	f106 0410 	add.w	r4, r6, #16
 8002d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d8e:	1d33      	adds	r3, r6, #4
 8002d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d92:	6838      	ldr	r0, [r7, #0]
 8002d94:	f001 ff4a 	bl	8004c2c <USB_DevInit>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e00d      	b.n	8002dc6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f002 ff92 	bl	8005ce8 <USB_DevDisconnect>

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_PCD_Start+0x1c>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e020      	b.n	8002e2c <HAL_PCD_Start+0x5e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d109      	bne.n	8002e0e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d005      	beq.n	8002e0e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f001 febe 	bl	8004b94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 ff42 	bl	8005ca6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b08d      	sub	sp, #52	; 0x34
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 f800 	bl	8005e50 <USB_GetMode>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 839d 	bne.w	8003592 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f002 ff64 	bl	8005d2a <USB_ReadInterrupts>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8393 	beq.w	8003590 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f002 ff5b 	bl	8005d2a <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d107      	bne.n	8002e8e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f002 0202 	and.w	r2, r2, #2
 8002e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 ff49 	bl	8005d2a <USB_ReadInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b10      	cmp	r3, #16
 8002ea0:	d161      	bne.n	8002f66 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699a      	ldr	r2, [r3, #24]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0210 	bic.w	r2, r2, #16
 8002eb0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f003 020f 	and.w	r2, r3, #15
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	3304      	adds	r3, #4
 8002ed0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	0c5b      	lsrs	r3, r3, #17
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d124      	bne.n	8002f28 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d035      	beq.n	8002f56 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	6a38      	ldr	r0, [r7, #32]
 8002efe:	f002 fdaf 	bl	8005a60 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f0e:	441a      	add	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f20:	441a      	add	r2, r3
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	619a      	str	r2, [r3, #24]
 8002f26:	e016      	b.n	8002f56 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	0c5b      	lsrs	r3, r3, #17
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	2b06      	cmp	r3, #6
 8002f32:	d110      	bne.n	8002f56 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6a38      	ldr	r0, [r7, #32]
 8002f40:	f002 fd8e 	bl	8005a60 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	699a      	ldr	r2, [r3, #24]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f50:	441a      	add	r2, r3
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699a      	ldr	r2, [r3, #24]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0210 	orr.w	r2, r2, #16
 8002f64:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 fedd 	bl	8005d2a <USB_ReadInterrupts>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f7a:	d16e      	bne.n	800305a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f002 fee3 	bl	8005d50 <USB_ReadDevAllOutEpInterrupt>
 8002f8a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f8c:	e062      	b.n	8003054 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d057      	beq.n	8003048 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f002 ff08 	bl	8005db8 <USB_ReadDevOutEPInterrupt>
 8002fa8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00c      	beq.n	8002fce <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fdb1 	bl	8003b30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00c      	beq.n	8002ff2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 feab 	bl	8003d48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003008:	461a      	mov	r2, r3
 800300a:	2310      	movs	r3, #16
 800300c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003024:	461a      	mov	r2, r3
 8003026:	2320      	movs	r3, #32
 8003028:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d009      	beq.n	8003048 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003040:	461a      	mov	r2, r3
 8003042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003046:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	3301      	adds	r3, #1
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	2b00      	cmp	r3, #0
 8003058:	d199      	bne.n	8002f8e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f002 fe63 	bl	8005d2a <USB_ReadInterrupts>
 8003064:	4603      	mov	r3, r0
 8003066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800306e:	f040 80c0 	bne.w	80031f2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f002 fe84 	bl	8005d84 <USB_ReadDevAllInEpInterrupt>
 800307c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003082:	e0b2      	b.n	80031ea <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80a7 	beq.w	80031de <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f002 feaa 	bl	8005df4 <USB_ReadDevInEPInterrupt>
 80030a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d057      	beq.n	800315c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	2201      	movs	r2, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69f9      	ldr	r1, [r7, #28]
 80030c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030cc:	4013      	ands	r3, r2
 80030ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030dc:	461a      	mov	r2, r3
 80030de:	2301      	movs	r3, #1
 80030e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d132      	bne.n	8003150 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	3348      	adds	r3, #72	; 0x48
 80030fa:	6819      	ldr	r1, [r3, #0]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4403      	add	r3, r0
 800310a:	3344      	adds	r3, #68	; 0x44
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4419      	add	r1, r3
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4403      	add	r3, r0
 800311e:	3348      	adds	r3, #72	; 0x48
 8003120:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	2b00      	cmp	r3, #0
 8003126:	d113      	bne.n	8003150 <HAL_PCD_IRQHandler+0x31c>
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	3350      	adds	r3, #80	; 0x50
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003148:	461a      	mov	r2, r3
 800314a:	2101      	movs	r1, #1
 800314c:	f002 feb2 	bl	8005eb4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	b2db      	uxtb	r3, r3
 8003154:	4619      	mov	r1, r3
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f004 ff07 	bl	8007f6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003172:	461a      	mov	r2, r3
 8003174:	2308      	movs	r3, #8
 8003176:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800318e:	461a      	mov	r2, r3
 8003190:	2310      	movs	r3, #16
 8003192:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031aa:	461a      	mov	r2, r3
 80031ac:	2340      	movs	r3, #64	; 0x40
 80031ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c6:	461a      	mov	r2, r3
 80031c8:	2302      	movs	r3, #2
 80031ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fc1b 	bl	8003a14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	3301      	adds	r3, #1
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e6:	085b      	lsrs	r3, r3, #1
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f47f af49 	bne.w	8003084 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 fd97 	bl	8005d2a <USB_ReadInterrupts>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003206:	d122      	bne.n	800324e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003222:	2b01      	cmp	r3, #1
 8003224:	d108      	bne.n	8003238 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800322e:	2100      	movs	r1, #0
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fe27 	bl	8003e84 <HAL_PCDEx_LPM_Callback>
 8003236:	e002      	b.n	800323e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f004 ff0d 	bl	8008058 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800324c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fd69 	bl	8005d2a <USB_ReadInterrupts>
 8003258:	4603      	mov	r3, r0
 800325a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800325e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003262:	d112      	bne.n	800328a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b01      	cmp	r3, #1
 8003272:	d102      	bne.n	800327a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f004 fec9 	bl	800800c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003288:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f002 fd4b 	bl	8005d2a <USB_ReadInterrupts>
 8003294:	4603      	mov	r3, r0
 8003296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329e:	f040 80c7 	bne.w	8003430 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2110      	movs	r1, #16
 80032bc:	4618      	mov	r0, r3
 80032be:	f001 fe19 	bl	8004ef4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032c6:	e056      	b.n	8003376 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d4:	461a      	mov	r2, r3
 80032d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ec:	0151      	lsls	r1, r2, #5
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	440a      	add	r2, r1
 80032f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032fa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800330c:	0151      	lsls	r1, r2, #5
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	440a      	add	r2, r1
 8003312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003316:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800331a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003328:	461a      	mov	r2, r3
 800332a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800332e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003340:	0151      	lsls	r1, r2, #5
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	440a      	add	r2, r1
 8003346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800334a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800334e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	440a      	add	r2, r1
 8003366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800336a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800336e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003372:	3301      	adds	r3, #1
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800337c:	429a      	cmp	r2, r3
 800337e:	d3a3      	bcc.n	80032c8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800338e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003392:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	2b00      	cmp	r3, #0
 800339a:	d016      	beq.n	80033ca <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ac:	f043 030b 	orr.w	r3, r3, #11
 80033b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c2:	f043 030b 	orr.w	r3, r3, #11
 80033c6:	6453      	str	r3, [r2, #68]	; 0x44
 80033c8:	e015      	b.n	80033f6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80033e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f0:	f043 030b 	orr.w	r3, r3, #11
 80033f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003404:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003408:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800341a:	461a      	mov	r2, r3
 800341c:	f002 fd4a 	bl	8005eb4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800342e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f002 fc78 	bl	8005d2a <USB_ReadInterrupts>
 800343a:	4603      	mov	r3, r0
 800343c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003444:	d124      	bne.n	8003490 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f002 fd0e 	bl	8005e6c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f001 fdae 	bl	8004fb6 <USB_GetDevSpeed>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681c      	ldr	r4, [r3, #0]
 8003466:	f001 f947 	bl	80046f8 <HAL_RCC_GetHCLKFreq>
 800346a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003470:	b2db      	uxtb	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	4620      	mov	r0, r4
 8003476:	f001 faeb 	bl	8004a50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f004 fd9d 	bl	8007fba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800348e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f002 fc48 	bl	8005d2a <USB_ReadInterrupts>
 800349a:	4603      	mov	r3, r0
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d10a      	bne.n	80034ba <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f004 fd7a 	bl	8007f9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f002 0208 	and.w	r2, r2, #8
 80034b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f002 fc33 	bl	8005d2a <USB_ReadInterrupts>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ce:	d10f      	bne.n	80034f0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	4619      	mov	r1, r3
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f004 fddc 	bl	8008098 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f002 fc18 	bl	8005d2a <USB_ReadInterrupts>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003500:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003504:	d10f      	bne.n	8003526 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	b2db      	uxtb	r3, r3
 800350e:	4619      	mov	r1, r3
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f004 fdaf 	bl	8008074 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003524:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f002 fbfd 	bl	8005d2a <USB_ReadInterrupts>
 8003530:	4603      	mov	r3, r0
 8003532:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353a:	d10a      	bne.n	8003552 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f004 fdbd 	bl	80080bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f002 fbe7 	bl	8005d2a <USB_ReadInterrupts>
 800355c:	4603      	mov	r3, r0
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b04      	cmp	r3, #4
 8003564:	d115      	bne.n	8003592 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f004 fdad 	bl	80080d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	e000      	b.n	8003592 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003590:	bf00      	nop
    }
  }
}
 8003592:	3734      	adds	r7, #52	; 0x34
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}

08003598 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_PCD_SetAddress+0x1a>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e013      	b.n	80035da <HAL_PCD_SetAddress+0x42>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f002 fb45 	bl	8005c5a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	4608      	mov	r0, r1
 80035ec:	4611      	mov	r1, r2
 80035ee:	461a      	mov	r2, r3
 80035f0:	4603      	mov	r3, r0
 80035f2:	70fb      	strb	r3, [r7, #3]
 80035f4:	460b      	mov	r3, r1
 80035f6:	803b      	strh	r3, [r7, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003604:	2b00      	cmp	r3, #0
 8003606:	da0f      	bge.n	8003628 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	f003 020f 	and.w	r2, r3, #15
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	3338      	adds	r3, #56	; 0x38
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4413      	add	r3, r2
 800361c:	3304      	adds	r3, #4
 800361e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	705a      	strb	r2, [r3, #1]
 8003626:	e00f      	b.n	8003648 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	f003 020f 	and.w	r2, r3, #15
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	3304      	adds	r3, #4
 8003640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	b2da      	uxtb	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003654:	883a      	ldrh	r2, [r7, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	78ba      	ldrb	r2, [r7, #2]
 800365e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d004      	beq.n	8003672 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003672:	78bb      	ldrb	r3, [r7, #2]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d102      	bne.n	800367e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_PCD_EP_Open+0xaa>
 8003688:	2302      	movs	r3, #2
 800368a:	e00e      	b.n	80036aa <HAL_PCD_EP_Open+0xc8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68f9      	ldr	r1, [r7, #12]
 800369a:	4618      	mov	r0, r3
 800369c:	f001 fcb0 	bl	8005000 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80036a8:	7afb      	ldrb	r3, [r7, #11]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	460b      	mov	r3, r1
 80036bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	da0f      	bge.n	80036e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	f003 020f 	and.w	r2, r3, #15
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	3338      	adds	r3, #56	; 0x38
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	3304      	adds	r3, #4
 80036dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	705a      	strb	r2, [r3, #1]
 80036e4:	e00f      	b.n	8003706 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	f003 020f 	and.w	r2, r3, #15
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	3304      	adds	r3, #4
 80036fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_PCD_EP_Close+0x6e>
 800371c:	2302      	movs	r3, #2
 800371e:	e00e      	b.n	800373e <HAL_PCD_EP_Close+0x8c>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	4618      	mov	r0, r3
 8003730:	f001 fcee 	bl	8005110 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	460b      	mov	r3, r1
 8003754:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003756:	7afb      	ldrb	r3, [r7, #11]
 8003758:	f003 020f 	and.w	r2, r3, #15
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	3304      	adds	r3, #4
 800376e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2200      	movs	r2, #0
 8003780:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2200      	movs	r2, #0
 8003786:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003788:	7afb      	ldrb	r3, [r7, #11]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	b2da      	uxtb	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d102      	bne.n	80037a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037a2:	7afb      	ldrb	r3, [r7, #11]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	6979      	ldr	r1, [r7, #20]
 80037ba:	f001 ffc9 	bl	8005750 <USB_EP0StartXfer>
 80037be:	e008      	b.n	80037d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	6979      	ldr	r1, [r7, #20]
 80037ce:	f001 fd7b 	bl	80052c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	f003 020f 	and.w	r2, r3, #15
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	460b      	mov	r3, r1
 800381a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800381c:	7afb      	ldrb	r3, [r7, #11]
 800381e:	f003 020f 	and.w	r2, r3, #15
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	1a9b      	subs	r3, r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	3338      	adds	r3, #56	; 0x38
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	3304      	adds	r3, #4
 8003832:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2200      	movs	r2, #0
 8003844:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2201      	movs	r2, #1
 800384a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800384c:	7afb      	ldrb	r3, [r7, #11]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	b2da      	uxtb	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d102      	bne.n	8003866 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003866:	7afb      	ldrb	r3, [r7, #11]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	6979      	ldr	r1, [r7, #20]
 800387e:	f001 ff67 	bl	8005750 <USB_EP0StartXfer>
 8003882:	e008      	b.n	8003896 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	6979      	ldr	r1, [r7, #20]
 8003892:	f001 fd19 	bl	80052c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	f003 020f 	and.w	r2, r3, #15
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d901      	bls.n	80038be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e050      	b.n	8003960 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	da0f      	bge.n	80038e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	f003 020f 	and.w	r2, r3, #15
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	3338      	adds	r3, #56	; 0x38
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	3304      	adds	r3, #4
 80038dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	705a      	strb	r2, [r3, #1]
 80038e4:	e00d      	b.n	8003902 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	4613      	mov	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4413      	add	r3, r2
 80038f8:	3304      	adds	r3, #4
 80038fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	b2da      	uxtb	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_PCD_EP_SetStall+0x82>
 800391e:	2302      	movs	r3, #2
 8003920:	e01e      	b.n	8003960 <HAL_PCD_EP_SetStall+0xc0>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68f9      	ldr	r1, [r7, #12]
 8003930:	4618      	mov	r0, r3
 8003932:	f002 f8be 	bl	8005ab2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	b2d9      	uxtb	r1, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003950:	461a      	mov	r2, r3
 8003952:	f002 faaf 	bl	8005eb4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	f003 020f 	and.w	r2, r3, #15
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	429a      	cmp	r2, r3
 8003980:	d901      	bls.n	8003986 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e042      	b.n	8003a0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800398a:	2b00      	cmp	r3, #0
 800398c:	da0f      	bge.n	80039ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	f003 020f 	and.w	r2, r3, #15
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	3338      	adds	r3, #56	; 0x38
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	3304      	adds	r3, #4
 80039a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	705a      	strb	r2, [r3, #1]
 80039ac:	e00f      	b.n	80039ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	f003 020f 	and.w	r2, r3, #15
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	3304      	adds	r3, #4
 80039c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_PCD_EP_ClrStall+0x86>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e00e      	b.n	8003a0c <HAL_PCD_EP_ClrStall+0xa4>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f002 f8c6 	bl	8005b8e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	3338      	adds	r3, #56	; 0x38
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	3304      	adds	r3, #4
 8003a3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	699a      	ldr	r2, [r3, #24]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d901      	bls.n	8003a4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e06c      	b.n	8003b26 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d902      	bls.n	8003a68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	3303      	adds	r3, #3
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a70:	e02b      	b.n	8003aca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d902      	bls.n	8003a8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3303      	adds	r3, #3
 8003a92:	089b      	lsrs	r3, r3, #2
 8003a94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	68d9      	ldr	r1, [r3, #12]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	4603      	mov	r3, r0
 8003aac:	6978      	ldr	r0, [r7, #20]
 8003aae:	f001 ffa2 	bl	80059f6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	441a      	add	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	441a      	add	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d809      	bhi.n	8003af4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	699a      	ldr	r2, [r3, #24]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d203      	bcs.n	8003af4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1be      	bne.n	8003a72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d811      	bhi.n	8003b24 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	2201      	movs	r2, #1
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	6939      	ldr	r1, [r7, #16]
 8003b1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b20:	4013      	ands	r3, r2
 8003b22:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	333c      	adds	r3, #60	; 0x3c
 8003b48:	3304      	adds	r3, #4
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	f040 80a0 	bne.w	8003ca8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d015      	beq.n	8003b9e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4a72      	ldr	r2, [pc, #456]	; (8003d40 <PCD_EP_OutXfrComplete_int+0x210>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	f240 80dd 	bls.w	8003d36 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80d7 	beq.w	8003d36 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b94:	461a      	mov	r2, r3
 8003b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b9a:	6093      	str	r3, [r2, #8]
 8003b9c:	e0cb      	b.n	8003d36 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d009      	beq.n	8003bbc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2320      	movs	r3, #32
 8003bb8:	6093      	str	r3, [r2, #8]
 8003bba:	e0bc      	b.n	8003d36 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 80b7 	bne.w	8003d36 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a5d      	ldr	r2, [pc, #372]	; (8003d40 <PCD_EP_OutXfrComplete_int+0x210>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d90f      	bls.n	8003bf0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be6:	461a      	mov	r2, r3
 8003be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bec:	6093      	str	r3, [r2, #8]
 8003bee:	e0a2      	b.n	8003d36 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c02:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	0159      	lsls	r1, r3, #5
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003c16:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4403      	add	r3, r0
 8003c26:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c2a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c3e:	6819      	ldr	r1, [r3, #0]
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4403      	add	r3, r0
 8003c4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4419      	add	r1, r3
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4403      	add	r3, r0
 8003c64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c68:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d114      	bne.n	8003c9a <PCD_EP_OutXfrComplete_int+0x16a>
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d108      	bne.n	8003c9a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6818      	ldr	r0, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c92:	461a      	mov	r2, r3
 8003c94:	2101      	movs	r1, #1
 8003c96:	f002 f90d 	bl	8005eb4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f004 f947 	bl	8007f34 <HAL_PCD_DataOutStageCallback>
 8003ca6:	e046      	b.n	8003d36 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a26      	ldr	r2, [pc, #152]	; (8003d44 <PCD_EP_OutXfrComplete_int+0x214>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d124      	bne.n	8003cfa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ccc:	6093      	str	r3, [r2, #8]
 8003cce:	e032      	b.n	8003d36 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d008      	beq.n	8003cec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2320      	movs	r3, #32
 8003cea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f004 f91e 	bl	8007f34 <HAL_PCD_DataOutStageCallback>
 8003cf8:	e01d      	b.n	8003d36 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d114      	bne.n	8003d2a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d108      	bne.n	8003d2a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d22:	461a      	mov	r2, r3
 8003d24:	2100      	movs	r1, #0
 8003d26:	f002 f8c5 	bl	8005eb4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f004 f8ff 	bl	8007f34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	4f54300a 	.word	0x4f54300a
 8003d44:	4f54310a 	.word	0x4f54310a

08003d48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	333c      	adds	r3, #60	; 0x3c
 8003d60:	3304      	adds	r3, #4
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d90e      	bls.n	8003d9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d009      	beq.n	8003d9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d94:	461a      	mov	r2, r3
 8003d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f004 f8b7 	bl	8007f10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d90c      	bls.n	8003dc4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d108      	bne.n	8003dc4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	f002 f878 	bl	8005eb4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	4f54300a 	.word	0x4f54300a

08003dd4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	70fb      	strb	r3, [r7, #3]
 8003de0:	4613      	mov	r3, r2
 8003de2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d107      	bne.n	8003e02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003df2:	883b      	ldrh	r3, [r7, #0]
 8003df4:	0419      	lsls	r1, r3, #16
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8003e00:	e028      	b.n	8003e54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e10:	2300      	movs	r3, #0
 8003e12:	73fb      	strb	r3, [r7, #15]
 8003e14:	e00d      	b.n	8003e32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	3340      	adds	r3, #64	; 0x40
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	4413      	add	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
 8003e32:	7bfa      	ldrb	r2, [r7, #15]
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d3ec      	bcc.n	8003e16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e3c:	883b      	ldrh	r3, [r7, #0]
 8003e3e:	0418      	lsls	r0, r3, #16
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	4302      	orrs	r2, r0
 8003e4c:	3340      	adds	r3, #64	; 0x40
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e25b      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d075      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eba:	4ba3      	ldr	r3, [pc, #652]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d00c      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec6:	4ba0      	ldr	r3, [pc, #640]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d112      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ed2:	4b9d      	ldr	r3, [pc, #628]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ede:	d10b      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee0:	4b99      	ldr	r3, [pc, #612]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d05b      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x108>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d157      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e236      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f00:	d106      	bne.n	8003f10 <HAL_RCC_OscConfig+0x74>
 8003f02:	4b91      	ldr	r3, [pc, #580]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a90      	ldr	r2, [pc, #576]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	e01d      	b.n	8003f4c <HAL_RCC_OscConfig+0xb0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x98>
 8003f1a:	4b8b      	ldr	r3, [pc, #556]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a8a      	ldr	r2, [pc, #552]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	4b88      	ldr	r3, [pc, #544]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a87      	ldr	r2, [pc, #540]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	e00b      	b.n	8003f4c <HAL_RCC_OscConfig+0xb0>
 8003f34:	4b84      	ldr	r3, [pc, #528]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a83      	ldr	r2, [pc, #524]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	4b81      	ldr	r3, [pc, #516]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a80      	ldr	r2, [pc, #512]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d013      	beq.n	8003f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fd f880 	bl	8001058 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f5c:	f7fd f87c 	bl	8001058 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b64      	cmp	r3, #100	; 0x64
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e1fb      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6e:	4b76      	ldr	r3, [pc, #472]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0xc0>
 8003f7a:	e014      	b.n	8003fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fd f86c 	bl	8001058 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f84:	f7fd f868 	bl	8001058 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1e7      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f96:	4b6c      	ldr	r3, [pc, #432]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0xe8>
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d063      	beq.n	800407a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fb2:	4b65      	ldr	r3, [pc, #404]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fbe:	4b62      	ldr	r3, [pc, #392]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d11c      	bne.n	8004004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fca:	4b5f      	ldr	r3, [pc, #380]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d116      	bne.n	8004004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd6:	4b5c      	ldr	r3, [pc, #368]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_RCC_OscConfig+0x152>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d001      	beq.n	8003fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e1bb      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fee:	4b56      	ldr	r3, [pc, #344]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4952      	ldr	r1, [pc, #328]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	e03a      	b.n	800407a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d020      	beq.n	800404e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800400c:	4b4f      	ldr	r3, [pc, #316]	; (800414c <HAL_RCC_OscConfig+0x2b0>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004012:	f7fd f821 	bl	8001058 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800401a:	f7fd f81d 	bl	8001058 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e19c      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402c:	4b46      	ldr	r3, [pc, #280]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004038:	4b43      	ldr	r3, [pc, #268]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4940      	ldr	r1, [pc, #256]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8004048:	4313      	orrs	r3, r2
 800404a:	600b      	str	r3, [r1, #0]
 800404c:	e015      	b.n	800407a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404e:	4b3f      	ldr	r3, [pc, #252]	; (800414c <HAL_RCC_OscConfig+0x2b0>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fd f800 	bl	8001058 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800405c:	f7fc fffc 	bl	8001058 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e17b      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406e:	4b36      	ldr	r3, [pc, #216]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d030      	beq.n	80040e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d016      	beq.n	80040bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800408e:	4b30      	ldr	r3, [pc, #192]	; (8004150 <HAL_RCC_OscConfig+0x2b4>)
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fc ffe0 	bl	8001058 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800409c:	f7fc ffdc 	bl	8001058 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e15b      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ae:	4b26      	ldr	r3, [pc, #152]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x200>
 80040ba:	e015      	b.n	80040e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040bc:	4b24      	ldr	r3, [pc, #144]	; (8004150 <HAL_RCC_OscConfig+0x2b4>)
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c2:	f7fc ffc9 	bl	8001058 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ca:	f7fc ffc5 	bl	8001058 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e144      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040dc:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 80040de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80a0 	beq.w	8004236 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f6:	2300      	movs	r3, #0
 80040f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fa:	4b13      	ldr	r3, [pc, #76]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10f      	bne.n	8004126 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	4a0e      	ldr	r2, [pc, #56]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004114:	6413      	str	r3, [r2, #64]	; 0x40
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004122:	2301      	movs	r3, #1
 8004124:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_RCC_OscConfig+0x2b8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412e:	2b00      	cmp	r3, #0
 8004130:	d121      	bne.n	8004176 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <HAL_RCC_OscConfig+0x2b8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a07      	ldr	r2, [pc, #28]	; (8004154 <HAL_RCC_OscConfig+0x2b8>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413e:	f7fc ff8b 	bl	8001058 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004144:	e011      	b.n	800416a <HAL_RCC_OscConfig+0x2ce>
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800
 800414c:	42470000 	.word	0x42470000
 8004150:	42470e80 	.word	0x42470e80
 8004154:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004158:	f7fc ff7e 	bl	8001058 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e0fd      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416a:	4b81      	ldr	r3, [pc, #516]	; (8004370 <HAL_RCC_OscConfig+0x4d4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d106      	bne.n	800418c <HAL_RCC_OscConfig+0x2f0>
 800417e:	4b7d      	ldr	r3, [pc, #500]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	4a7c      	ldr	r2, [pc, #496]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	6713      	str	r3, [r2, #112]	; 0x70
 800418a:	e01c      	b.n	80041c6 <HAL_RCC_OscConfig+0x32a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b05      	cmp	r3, #5
 8004192:	d10c      	bne.n	80041ae <HAL_RCC_OscConfig+0x312>
 8004194:	4b77      	ldr	r3, [pc, #476]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	4a76      	ldr	r2, [pc, #472]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 800419a:	f043 0304 	orr.w	r3, r3, #4
 800419e:	6713      	str	r3, [r2, #112]	; 0x70
 80041a0:	4b74      	ldr	r3, [pc, #464]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	4a73      	ldr	r2, [pc, #460]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	6713      	str	r3, [r2, #112]	; 0x70
 80041ac:	e00b      	b.n	80041c6 <HAL_RCC_OscConfig+0x32a>
 80041ae:	4b71      	ldr	r3, [pc, #452]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	4a70      	ldr	r2, [pc, #448]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ba:	4b6e      	ldr	r3, [pc, #440]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	4a6d      	ldr	r2, [pc, #436]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 80041c0:	f023 0304 	bic.w	r3, r3, #4
 80041c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d015      	beq.n	80041fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ce:	f7fc ff43 	bl	8001058 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d4:	e00a      	b.n	80041ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d6:	f7fc ff3f 	bl	8001058 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e0bc      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ec:	4b61      	ldr	r3, [pc, #388]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0ee      	beq.n	80041d6 <HAL_RCC_OscConfig+0x33a>
 80041f8:	e014      	b.n	8004224 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fa:	f7fc ff2d 	bl	8001058 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004200:	e00a      	b.n	8004218 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004202:	f7fc ff29 	bl	8001058 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004210:	4293      	cmp	r3, r2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e0a6      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004218:	4b56      	ldr	r3, [pc, #344]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1ee      	bne.n	8004202 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004224:	7dfb      	ldrb	r3, [r7, #23]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d105      	bne.n	8004236 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422a:	4b52      	ldr	r3, [pc, #328]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	4a51      	ldr	r2, [pc, #324]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 8004230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004234:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8092 	beq.w	8004364 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004240:	4b4c      	ldr	r3, [pc, #304]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b08      	cmp	r3, #8
 800424a:	d05c      	beq.n	8004306 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d141      	bne.n	80042d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004254:	4b48      	ldr	r3, [pc, #288]	; (8004378 <HAL_RCC_OscConfig+0x4dc>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425a:	f7fc fefd 	bl	8001058 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004262:	f7fc fef9 	bl	8001058 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e078      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004274:	4b3f      	ldr	r3, [pc, #252]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f0      	bne.n	8004262 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	019b      	lsls	r3, r3, #6
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	3b01      	subs	r3, #1
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	061b      	lsls	r3, r3, #24
 80042a4:	4933      	ldr	r1, [pc, #204]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042aa:	4b33      	ldr	r3, [pc, #204]	; (8004378 <HAL_RCC_OscConfig+0x4dc>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b0:	f7fc fed2 	bl	8001058 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b8:	f7fc fece 	bl	8001058 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e04d      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ca:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0f0      	beq.n	80042b8 <HAL_RCC_OscConfig+0x41c>
 80042d6:	e045      	b.n	8004364 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d8:	4b27      	ldr	r3, [pc, #156]	; (8004378 <HAL_RCC_OscConfig+0x4dc>)
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042de:	f7fc febb 	bl	8001058 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e6:	f7fc feb7 	bl	8001058 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e036      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f8:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f0      	bne.n	80042e6 <HAL_RCC_OscConfig+0x44a>
 8004304:	e02e      	b.n	8004364 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e029      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004312:	4b18      	ldr	r3, [pc, #96]	; (8004374 <HAL_RCC_OscConfig+0x4d8>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	429a      	cmp	r2, r3
 8004324:	d11c      	bne.n	8004360 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004330:	429a      	cmp	r2, r3
 8004332:	d115      	bne.n	8004360 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800433a:	4013      	ands	r3, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004340:	4293      	cmp	r3, r2
 8004342:	d10d      	bne.n	8004360 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d106      	bne.n	8004360 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40007000 	.word	0x40007000
 8004374:	40023800 	.word	0x40023800
 8004378:	42470060 	.word	0x42470060

0800437c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e0cc      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004390:	4b68      	ldr	r3, [pc, #416]	; (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d90c      	bls.n	80043b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439e:	4b65      	ldr	r3, [pc, #404]	; (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a6:	4b63      	ldr	r3, [pc, #396]	; (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d001      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0b8      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d020      	beq.n	8004406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043d0:	4b59      	ldr	r3, [pc, #356]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4a58      	ldr	r2, [pc, #352]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043e8:	4b53      	ldr	r3, [pc, #332]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4a52      	ldr	r2, [pc, #328]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f4:	4b50      	ldr	r3, [pc, #320]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	494d      	ldr	r1, [pc, #308]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d044      	beq.n	800449c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d107      	bne.n	800442a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441a:	4b47      	ldr	r3, [pc, #284]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d119      	bne.n	800445a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e07f      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d003      	beq.n	800443a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004436:	2b03      	cmp	r3, #3
 8004438:	d107      	bne.n	800444a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443a:	4b3f      	ldr	r3, [pc, #252]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e06f      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444a:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e067      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800445a:	4b37      	ldr	r3, [pc, #220]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f023 0203 	bic.w	r2, r3, #3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4934      	ldr	r1, [pc, #208]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	4313      	orrs	r3, r2
 800446a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800446c:	f7fc fdf4 	bl	8001058 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	e00a      	b.n	800448a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004474:	f7fc fdf0 	bl	8001058 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004482:	4293      	cmp	r3, r2
 8004484:	d901      	bls.n	800448a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e04f      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448a:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 020c 	and.w	r2, r3, #12
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	429a      	cmp	r2, r3
 800449a:	d1eb      	bne.n	8004474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800449c:	4b25      	ldr	r3, [pc, #148]	; (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d20c      	bcs.n	80044c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044aa:	4b22      	ldr	r3, [pc, #136]	; (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b2:	4b20      	ldr	r3, [pc, #128]	; (8004534 <HAL_RCC_ClockConfig+0x1b8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d001      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e032      	b.n	800452a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d0:	4b19      	ldr	r3, [pc, #100]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4916      	ldr	r1, [pc, #88]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	490e      	ldr	r1, [pc, #56]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004502:	f000 f821 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 8004506:	4601      	mov	r1, r0
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <HAL_RCC_ClockConfig+0x1c0>)
 8004514:	5cd3      	ldrb	r3, [r2, r3]
 8004516:	fa21 f303 	lsr.w	r3, r1, r3
 800451a:	4a09      	ldr	r2, [pc, #36]	; (8004540 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCC_ClockConfig+0x1c8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7fc fd54 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40023c00 	.word	0x40023c00
 8004538:	40023800 	.word	0x40023800
 800453c:	08008e04 	.word	0x08008e04
 8004540:	20000000 	.word	0x20000000
 8004544:	20000004 	.word	0x20000004

08004548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	2300      	movs	r3, #0
 8004558:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800455e:	4b63      	ldr	r3, [pc, #396]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b04      	cmp	r3, #4
 8004568:	d007      	beq.n	800457a <HAL_RCC_GetSysClockFreq+0x32>
 800456a:	2b08      	cmp	r3, #8
 800456c:	d008      	beq.n	8004580 <HAL_RCC_GetSysClockFreq+0x38>
 800456e:	2b00      	cmp	r3, #0
 8004570:	f040 80b4 	bne.w	80046dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004574:	4b5e      	ldr	r3, [pc, #376]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004576:	60bb      	str	r3, [r7, #8]
       break;
 8004578:	e0b3      	b.n	80046e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800457a:	4b5e      	ldr	r3, [pc, #376]	; (80046f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800457c:	60bb      	str	r3, [r7, #8]
      break;
 800457e:	e0b0      	b.n	80046e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004580:	4b5a      	ldr	r3, [pc, #360]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004588:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800458a:	4b58      	ldr	r3, [pc, #352]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d04a      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004596:	4b55      	ldr	r3, [pc, #340]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	099b      	lsrs	r3, r3, #6
 800459c:	f04f 0400 	mov.w	r4, #0
 80045a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	ea03 0501 	and.w	r5, r3, r1
 80045ac:	ea04 0602 	and.w	r6, r4, r2
 80045b0:	4629      	mov	r1, r5
 80045b2:	4632      	mov	r2, r6
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	f04f 0400 	mov.w	r4, #0
 80045bc:	0154      	lsls	r4, r2, #5
 80045be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045c2:	014b      	lsls	r3, r1, #5
 80045c4:	4619      	mov	r1, r3
 80045c6:	4622      	mov	r2, r4
 80045c8:	1b49      	subs	r1, r1, r5
 80045ca:	eb62 0206 	sbc.w	r2, r2, r6
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	f04f 0400 	mov.w	r4, #0
 80045d6:	0194      	lsls	r4, r2, #6
 80045d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045dc:	018b      	lsls	r3, r1, #6
 80045de:	1a5b      	subs	r3, r3, r1
 80045e0:	eb64 0402 	sbc.w	r4, r4, r2
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	00e2      	lsls	r2, r4, #3
 80045ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045f2:	00d9      	lsls	r1, r3, #3
 80045f4:	460b      	mov	r3, r1
 80045f6:	4614      	mov	r4, r2
 80045f8:	195b      	adds	r3, r3, r5
 80045fa:	eb44 0406 	adc.w	r4, r4, r6
 80045fe:	f04f 0100 	mov.w	r1, #0
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	0262      	lsls	r2, r4, #9
 8004608:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800460c:	0259      	lsls	r1, r3, #9
 800460e:	460b      	mov	r3, r1
 8004610:	4614      	mov	r4, r2
 8004612:	4618      	mov	r0, r3
 8004614:	4621      	mov	r1, r4
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f04f 0400 	mov.w	r4, #0
 800461c:	461a      	mov	r2, r3
 800461e:	4623      	mov	r3, r4
 8004620:	f7fb fe2e 	bl	8000280 <__aeabi_uldivmod>
 8004624:	4603      	mov	r3, r0
 8004626:	460c      	mov	r4, r1
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	e049      	b.n	80046c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462c:	4b2f      	ldr	r3, [pc, #188]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	099b      	lsrs	r3, r3, #6
 8004632:	f04f 0400 	mov.w	r4, #0
 8004636:	f240 11ff 	movw	r1, #511	; 0x1ff
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	ea03 0501 	and.w	r5, r3, r1
 8004642:	ea04 0602 	and.w	r6, r4, r2
 8004646:	4629      	mov	r1, r5
 8004648:	4632      	mov	r2, r6
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	f04f 0400 	mov.w	r4, #0
 8004652:	0154      	lsls	r4, r2, #5
 8004654:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004658:	014b      	lsls	r3, r1, #5
 800465a:	4619      	mov	r1, r3
 800465c:	4622      	mov	r2, r4
 800465e:	1b49      	subs	r1, r1, r5
 8004660:	eb62 0206 	sbc.w	r2, r2, r6
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	f04f 0400 	mov.w	r4, #0
 800466c:	0194      	lsls	r4, r2, #6
 800466e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004672:	018b      	lsls	r3, r1, #6
 8004674:	1a5b      	subs	r3, r3, r1
 8004676:	eb64 0402 	sbc.w	r4, r4, r2
 800467a:	f04f 0100 	mov.w	r1, #0
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	00e2      	lsls	r2, r4, #3
 8004684:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004688:	00d9      	lsls	r1, r3, #3
 800468a:	460b      	mov	r3, r1
 800468c:	4614      	mov	r4, r2
 800468e:	195b      	adds	r3, r3, r5
 8004690:	eb44 0406 	adc.w	r4, r4, r6
 8004694:	f04f 0100 	mov.w	r1, #0
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	02a2      	lsls	r2, r4, #10
 800469e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046a2:	0299      	lsls	r1, r3, #10
 80046a4:	460b      	mov	r3, r1
 80046a6:	4614      	mov	r4, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	4621      	mov	r1, r4
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f04f 0400 	mov.w	r4, #0
 80046b2:	461a      	mov	r2, r3
 80046b4:	4623      	mov	r3, r4
 80046b6:	f7fb fde3 	bl	8000280 <__aeabi_uldivmod>
 80046ba:	4603      	mov	r3, r0
 80046bc:	460c      	mov	r4, r1
 80046be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046c0:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	3301      	adds	r3, #1
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	60bb      	str	r3, [r7, #8]
      break;
 80046da:	e002      	b.n	80046e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046dc:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046de:	60bb      	str	r3, [r7, #8]
      break;
 80046e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046e2:	68bb      	ldr	r3, [r7, #8]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ec:	40023800 	.word	0x40023800
 80046f0:	00f42400 	.word	0x00f42400
 80046f4:	007a1200 	.word	0x007a1200

080046f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046fc:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_RCC_GetHCLKFreq+0x14>)
 80046fe:	681b      	ldr	r3, [r3, #0]
}
 8004700:	4618      	mov	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000000 	.word	0x20000000

08004710 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d105      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004734:	2b00      	cmp	r3, #0
 8004736:	d035      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004738:	4b62      	ldr	r3, [pc, #392]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800473e:	f7fc fc8b 	bl	8001058 <HAL_GetTick>
 8004742:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004744:	e008      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004746:	f7fc fc87 	bl	8001058 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e0b0      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004758:	4b5b      	ldr	r3, [pc, #364]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f0      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	019a      	lsls	r2, r3, #6
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	071b      	lsls	r3, r3, #28
 8004770:	4955      	ldr	r1, [pc, #340]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004778:	4b52      	ldr	r3, [pc, #328]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800477e:	f7fc fc6b 	bl	8001058 <HAL_GetTick>
 8004782:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004786:	f7fc fc67 	bl	8001058 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e090      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004798:	4b4b      	ldr	r3, [pc, #300]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8083 	beq.w	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	4b44      	ldr	r3, [pc, #272]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	4a43      	ldr	r2, [pc, #268]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c0:	6413      	str	r3, [r2, #64]	; 0x40
 80047c2:	4b41      	ldr	r3, [pc, #260]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047ce:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a3e      	ldr	r2, [pc, #248]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047da:	f7fc fc3d 	bl	8001058 <HAL_GetTick>
 80047de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047e2:	f7fc fc39 	bl	8001058 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e062      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047f4:	4b35      	ldr	r3, [pc, #212]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004800:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004808:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02f      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	429a      	cmp	r2, r3
 800481c:	d028      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800481e:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004826:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004828:	4b29      	ldr	r3, [pc, #164]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800482e:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004834:	4a24      	ldr	r2, [pc, #144]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800483a:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b01      	cmp	r3, #1
 8004844:	d114      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004846:	f7fc fc07 	bl	8001058 <HAL_GetTick>
 800484a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484c:	e00a      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800484e:	f7fc fc03 	bl	8001058 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	f241 3288 	movw	r2, #5000	; 0x1388
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e02a      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004864:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0ee      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800487c:	d10d      	bne.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800487e:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800488e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004892:	490d      	ldr	r1, [pc, #52]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004894:	4313      	orrs	r3, r2
 8004896:	608b      	str	r3, [r1, #8]
 8004898:	e005      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800489a:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	4a0a      	ldr	r2, [pc, #40]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048a4:	6093      	str	r3, [r2, #8]
 80048a6:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b2:	4905      	ldr	r1, [pc, #20]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	42470068 	.word	0x42470068
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40007000 	.word	0x40007000
 80048d0:	42470e40 	.word	0x42470e40

080048d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d13d      	bne.n	800496e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048f2:	4b22      	ldr	r3, [pc, #136]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048fa:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d004      	beq.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004902:	2b01      	cmp	r3, #1
 8004904:	d12f      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004908:	617b      	str	r3, [r7, #20]
          break;
 800490a:	e02f      	b.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800490c:	4b1b      	ldr	r3, [pc, #108]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004918:	d108      	bne.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800491a:	4b18      	ldr	r3, [pc, #96]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004922:	4a18      	ldr	r2, [pc, #96]	; (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	e007      	b.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800492c:	4b13      	ldr	r3, [pc, #76]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004934:	4a14      	ldr	r2, [pc, #80]	; (8004988 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004936:	fbb2 f3f3 	udiv	r3, r2, r3
 800493a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800493e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004942:	099b      	lsrs	r3, r3, #6
 8004944:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004956:	0f1b      	lsrs	r3, r3, #28
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	617b      	str	r3, [r7, #20]
          break;
 8004964:	e002      	b.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
          break;
 800496a:	bf00      	nop
        }
      }
      break;
 800496c:	bf00      	nop
    }
  }
  return frequency;
 800496e:	697b      	ldr	r3, [r7, #20]
}
 8004970:	4618      	mov	r0, r3
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	40023800 	.word	0x40023800
 8004980:	00bb8000 	.word	0x00bb8000
 8004984:	007a1200 	.word	0x007a1200
 8004988:	00f42400 	.word	0x00f42400

0800498c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800498c:	b084      	sub	sp, #16
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	f107 001c 	add.w	r0, r7, #28
 800499a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d122      	bne.n	80049ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d105      	bne.n	80049de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f001 fac6 	bl	8005f70 <USB_CoreReset>
 80049e4:	4603      	mov	r3, r0
 80049e6:	73fb      	strb	r3, [r7, #15]
 80049e8:	e01a      	b.n	8004a20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f001 faba 	bl	8005f70 <USB_CoreReset>
 80049fc:	4603      	mov	r3, r0
 80049fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
 8004a12:	e005      	b.n	8004a20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d10b      	bne.n	8004a3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f043 0206 	orr.w	r2, r3, #6
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f043 0220 	orr.w	r2, r3, #32
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a4a:	b004      	add	sp, #16
 8004a4c:	4770      	bx	lr
	...

08004a50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d165      	bne.n	8004b30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4a41      	ldr	r2, [pc, #260]	; (8004b6c <USB_SetTurnaroundTime+0x11c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d906      	bls.n	8004a7a <USB_SetTurnaroundTime+0x2a>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4a40      	ldr	r2, [pc, #256]	; (8004b70 <USB_SetTurnaroundTime+0x120>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d802      	bhi.n	8004a7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a74:	230f      	movs	r3, #15
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e062      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4a3c      	ldr	r2, [pc, #240]	; (8004b70 <USB_SetTurnaroundTime+0x120>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d906      	bls.n	8004a90 <USB_SetTurnaroundTime+0x40>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4a3b      	ldr	r2, [pc, #236]	; (8004b74 <USB_SetTurnaroundTime+0x124>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d802      	bhi.n	8004a90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a8a:	230e      	movs	r3, #14
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	e057      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4a38      	ldr	r2, [pc, #224]	; (8004b74 <USB_SetTurnaroundTime+0x124>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d906      	bls.n	8004aa6 <USB_SetTurnaroundTime+0x56>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4a37      	ldr	r2, [pc, #220]	; (8004b78 <USB_SetTurnaroundTime+0x128>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d802      	bhi.n	8004aa6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004aa0:	230d      	movs	r3, #13
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e04c      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	4a33      	ldr	r2, [pc, #204]	; (8004b78 <USB_SetTurnaroundTime+0x128>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d906      	bls.n	8004abc <USB_SetTurnaroundTime+0x6c>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4a32      	ldr	r2, [pc, #200]	; (8004b7c <USB_SetTurnaroundTime+0x12c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d802      	bhi.n	8004abc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ab6:	230c      	movs	r3, #12
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	e041      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4a2f      	ldr	r2, [pc, #188]	; (8004b7c <USB_SetTurnaroundTime+0x12c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d906      	bls.n	8004ad2 <USB_SetTurnaroundTime+0x82>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4a2e      	ldr	r2, [pc, #184]	; (8004b80 <USB_SetTurnaroundTime+0x130>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d802      	bhi.n	8004ad2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004acc:	230b      	movs	r3, #11
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e036      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4a2a      	ldr	r2, [pc, #168]	; (8004b80 <USB_SetTurnaroundTime+0x130>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d906      	bls.n	8004ae8 <USB_SetTurnaroundTime+0x98>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4a29      	ldr	r2, [pc, #164]	; (8004b84 <USB_SetTurnaroundTime+0x134>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d802      	bhi.n	8004ae8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ae2:	230a      	movs	r3, #10
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e02b      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4a26      	ldr	r2, [pc, #152]	; (8004b84 <USB_SetTurnaroundTime+0x134>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d906      	bls.n	8004afe <USB_SetTurnaroundTime+0xae>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4a25      	ldr	r2, [pc, #148]	; (8004b88 <USB_SetTurnaroundTime+0x138>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d802      	bhi.n	8004afe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004af8:	2309      	movs	r3, #9
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e020      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	4a21      	ldr	r2, [pc, #132]	; (8004b88 <USB_SetTurnaroundTime+0x138>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d906      	bls.n	8004b14 <USB_SetTurnaroundTime+0xc4>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4a20      	ldr	r2, [pc, #128]	; (8004b8c <USB_SetTurnaroundTime+0x13c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d802      	bhi.n	8004b14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b0e:	2308      	movs	r3, #8
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e015      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4a1d      	ldr	r2, [pc, #116]	; (8004b8c <USB_SetTurnaroundTime+0x13c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d906      	bls.n	8004b2a <USB_SetTurnaroundTime+0xda>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4a1c      	ldr	r2, [pc, #112]	; (8004b90 <USB_SetTurnaroundTime+0x140>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d802      	bhi.n	8004b2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b24:	2307      	movs	r3, #7
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	e00a      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b2a:	2306      	movs	r3, #6
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	e007      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b36:	2309      	movs	r3, #9
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	e001      	b.n	8004b40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b3c:	2309      	movs	r3, #9
 8004b3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	029b      	lsls	r3, r3, #10
 8004b54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	00d8acbf 	.word	0x00d8acbf
 8004b70:	00e4e1bf 	.word	0x00e4e1bf
 8004b74:	00f423ff 	.word	0x00f423ff
 8004b78:	0106737f 	.word	0x0106737f
 8004b7c:	011a499f 	.word	0x011a499f
 8004b80:	01312cff 	.word	0x01312cff
 8004b84:	014ca43f 	.word	0x014ca43f
 8004b88:	016e35ff 	.word	0x016e35ff
 8004b8c:	01a6ab1f 	.word	0x01a6ab1f
 8004b90:	01e847ff 	.word	0x01e847ff

08004b94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f043 0201 	orr.w	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f023 0201 	bic.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d106      	bne.n	8004c04 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	e00b      	b.n	8004c1c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60da      	str	r2, [r3, #12]
 8004c16:	e001      	b.n	8004c1c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e003      	b.n	8004c24 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c1c:	2032      	movs	r0, #50	; 0x32
 8004c1e:	f7fc fa27 	bl	8001070 <HAL_Delay>

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b086      	sub	sp, #24
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	e009      	b.n	8004c60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	3340      	adds	r3, #64	; 0x40
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	2200      	movs	r2, #0
 8004c58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b0e      	cmp	r3, #14
 8004c64:	d9f2      	bls.n	8004c4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d11c      	bne.n	8004ca6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c7a:	f043 0302 	orr.w	r3, r3, #2
 8004c7e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ca4:	e00b      	b.n	8004cbe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd8:	461a      	mov	r2, r3
 8004cda:	680b      	ldr	r3, [r1, #0]
 8004cdc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d10c      	bne.n	8004cfe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d104      	bne.n	8004cf4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cea:	2100      	movs	r1, #0
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f949 	bl	8004f84 <USB_SetDevSpeed>
 8004cf2:	e008      	b.n	8004d06 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f944 	bl	8004f84 <USB_SetDevSpeed>
 8004cfc:	e003      	b.n	8004d06 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cfe:	2103      	movs	r1, #3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f93f 	bl	8004f84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d06:	2110      	movs	r1, #16
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f8f3 	bl	8004ef4 <USB_FlushTxFifo>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f911 	bl	8004f40 <USB_FlushRxFifo>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d46:	461a      	mov	r2, r3
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	e043      	b.n	8004dda <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d68:	d118      	bne.n	8004d9c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	e013      	b.n	8004dae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d92:	461a      	mov	r2, r3
 8004d94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	e008      	b.n	8004dae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da8:	461a      	mov	r2, r3
 8004daa:	2300      	movs	r3, #0
 8004dac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d3b7      	bcc.n	8004d52 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	e043      	b.n	8004e70 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dfe:	d118      	bne.n	8004e32 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e12:	461a      	mov	r2, r3
 8004e14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e013      	b.n	8004e44 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	e008      	b.n	8004e44 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2300      	movs	r3, #0
 8004e42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e50:	461a      	mov	r2, r3
 8004e52:	2300      	movs	r3, #0
 8004e54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	461a      	mov	r2, r3
 8004e64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d3b7      	bcc.n	8004de8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d105      	bne.n	8004eac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f043 0210 	orr.w	r2, r3, #16
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <USB_DevInit+0x2c4>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f043 0208 	orr.w	r2, r3, #8
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d107      	bne.n	8004ee0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ed8:	f043 0304 	orr.w	r3, r3, #4
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eec:	b004      	add	sp, #16
 8004eee:	4770      	bx	lr
 8004ef0:	803c3800 	.word	0x803c3800

08004ef4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	019b      	lsls	r3, r3, #6
 8004f06:	f043 0220 	orr.w	r2, r3, #32
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3301      	adds	r3, #1
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4a09      	ldr	r2, [pc, #36]	; (8004f3c <USB_FlushTxFifo+0x48>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d901      	bls.n	8004f20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e006      	b.n	8004f2e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d0f0      	beq.n	8004f0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	00030d40 	.word	0x00030d40

08004f40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2210      	movs	r2, #16
 8004f50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3301      	adds	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <USB_FlushRxFifo+0x40>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d901      	bls.n	8004f64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e006      	b.n	8004f72 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d0f0      	beq.n	8004f52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	00030d40 	.word	0x00030d40

08004f84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 0306 	and.w	r3, r3, #6
 8004fce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	75fb      	strb	r3, [r7, #23]
 8004fda:	e00a      	b.n	8004ff2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d002      	beq.n	8004fe8 <USB_GetDevSpeed+0x32>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b06      	cmp	r3, #6
 8004fe6:	d102      	bne.n	8004fee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	75fb      	strb	r3, [r7, #23]
 8004fec:	e001      	b.n	8004ff2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004fee:	230f      	movs	r3, #15
 8004ff0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	785b      	ldrb	r3, [r3, #1]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d13a      	bne.n	8005092 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	2101      	movs	r1, #1
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	b29b      	uxth	r3, r3
 8005034:	68f9      	ldr	r1, [r7, #12]
 8005036:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800503a:	4313      	orrs	r3, r2
 800503c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d155      	bne.n	8005100 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	78db      	ldrb	r3, [r3, #3]
 800506e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005070:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	059b      	lsls	r3, r3, #22
 8005076:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005078:	4313      	orrs	r3, r2
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	440a      	add	r2, r1
 8005082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	e036      	b.n	8005100 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005098:	69da      	ldr	r2, [r3, #28]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	2101      	movs	r1, #1
 80050a4:	fa01 f303 	lsl.w	r3, r1, r3
 80050a8:	041b      	lsls	r3, r3, #16
 80050aa:	68f9      	ldr	r1, [r7, #12]
 80050ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050b0:	4313      	orrs	r3, r2
 80050b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d11a      	bne.n	8005100 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	78db      	ldrb	r3, [r3, #3]
 80050e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050e6:	430b      	orrs	r3, r1
 80050e8:	4313      	orrs	r3, r2
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d161      	bne.n	80051f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800513e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005142:	d11f      	bne.n	8005184 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	440a      	add	r2, r1
 800515a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800515e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005162:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800517e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005182:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	f003 030f 	and.w	r3, r3, #15
 8005194:	2101      	movs	r1, #1
 8005196:	fa01 f303 	lsl.w	r3, r1, r3
 800519a:	b29b      	uxth	r3, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	68f9      	ldr	r1, [r7, #12]
 80051a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051a4:	4013      	ands	r3, r2
 80051a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	2101      	movs	r1, #1
 80051ba:	fa01 f303 	lsl.w	r3, r1, r3
 80051be:	b29b      	uxth	r3, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051c8:	4013      	ands	r3, r2
 80051ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	0159      	lsls	r1, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	440b      	add	r3, r1
 80051e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e6:	4619      	mov	r1, r3
 80051e8:	4b35      	ldr	r3, [pc, #212]	; (80052c0 <USB_DeactivateEndpoint+0x1b0>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]
 80051ee:	e060      	b.n	80052b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005206:	d11f      	bne.n	8005248 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005222:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005226:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	0151      	lsls	r1, r2, #5
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	440a      	add	r2, r1
 800523e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005242:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005246:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	2101      	movs	r1, #1
 800525a:	fa01 f303 	lsl.w	r3, r1, r3
 800525e:	041b      	lsls	r3, r3, #16
 8005260:	43db      	mvns	r3, r3
 8005262:	68f9      	ldr	r1, [r7, #12]
 8005264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005268:	4013      	ands	r3, r2
 800526a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	2101      	movs	r1, #1
 800527e:	fa01 f303 	lsl.w	r3, r1, r3
 8005282:	041b      	lsls	r3, r3, #16
 8005284:	43db      	mvns	r3, r3
 8005286:	68f9      	ldr	r1, [r7, #12]
 8005288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800528c:	4013      	ands	r3, r2
 800528e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	0159      	lsls	r1, r3, #5
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	440b      	add	r3, r1
 80052a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052aa:	4619      	mov	r1, r3
 80052ac:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <USB_DeactivateEndpoint+0x1b4>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	ec337800 	.word	0xec337800
 80052c4:	eff37800 	.word	0xeff37800

080052c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	785b      	ldrb	r3, [r3, #1]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	f040 815c 	bne.w	80055a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d132      	bne.n	8005358 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	440a      	add	r2, r1
 8005308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005310:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005314:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	440a      	add	r2, r1
 800532c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005330:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005334:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	0151      	lsls	r1, r2, #5
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	440a      	add	r2, r1
 800534c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005350:	0cdb      	lsrs	r3, r3, #19
 8005352:	04db      	lsls	r3, r3, #19
 8005354:	6113      	str	r3, [r2, #16]
 8005356:	e074      	b.n	8005442 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005372:	0cdb      	lsrs	r3, r3, #19
 8005374:	04db      	lsls	r3, r3, #19
 8005376:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	0151      	lsls	r1, r2, #5
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	440a      	add	r2, r1
 800538e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005392:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005396:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800539a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	6959      	ldr	r1, [r3, #20]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	440b      	add	r3, r1
 80053b4:	1e59      	subs	r1, r3, #1
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80053be:	04d9      	lsls	r1, r3, #19
 80053c0:	4b9d      	ldr	r3, [pc, #628]	; (8005638 <USB_EPStartXfer+0x370>)
 80053c2:	400b      	ands	r3, r1
 80053c4:	69b9      	ldr	r1, [r7, #24]
 80053c6:	0148      	lsls	r0, r1, #5
 80053c8:	69f9      	ldr	r1, [r7, #28]
 80053ca:	4401      	add	r1, r0
 80053cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053d0:	4313      	orrs	r3, r2
 80053d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ea:	69b9      	ldr	r1, [r7, #24]
 80053ec:	0148      	lsls	r0, r1, #5
 80053ee:	69f9      	ldr	r1, [r7, #28]
 80053f0:	4401      	add	r1, r0
 80053f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053f6:	4313      	orrs	r3, r2
 80053f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	78db      	ldrb	r3, [r3, #3]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d11f      	bne.n	8005442 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005420:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	0151      	lsls	r1, r2, #5
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	440a      	add	r2, r1
 8005438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005440:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d14b      	bne.n	80054e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d009      	beq.n	8005464 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	461a      	mov	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	78db      	ldrb	r3, [r3, #3]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d128      	bne.n	80054be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d110      	bne.n	800549e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	440a      	add	r2, r1
 8005492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005496:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	e00f      	b.n	80054be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	e12f      	b.n	8005740 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	78db      	ldrb	r3, [r3, #3]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d015      	beq.n	8005534 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8117 	beq.w	8005740 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	2101      	movs	r1, #1
 8005524:	fa01 f303 	lsl.w	r3, r1, r3
 8005528:	69f9      	ldr	r1, [r7, #28]
 800552a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800552e:	4313      	orrs	r3, r2
 8005530:	634b      	str	r3, [r1, #52]	; 0x34
 8005532:	e105      	b.n	8005740 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d110      	bne.n	8005566 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	0151      	lsls	r1, r2, #5
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	440a      	add	r2, r1
 800555a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	e00f      	b.n	8005586 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	0151      	lsls	r1, r2, #5
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	440a      	add	r2, r1
 800557c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005584:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	68d9      	ldr	r1, [r3, #12]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	781a      	ldrb	r2, [r3, #0]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	b298      	uxth	r0, r3
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	4603      	mov	r3, r0
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fa2b 	bl	80059f6 <USB_WritePacket>
 80055a0:	e0ce      	b.n	8005740 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055bc:	0cdb      	lsrs	r3, r3, #19
 80055be:	04db      	lsls	r3, r3, #19
 80055c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	0151      	lsls	r1, r2, #5
 80055d4:	69fa      	ldr	r2, [r7, #28]
 80055d6:	440a      	add	r2, r1
 80055d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d126      	bne.n	800563c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005604:	69b9      	ldr	r1, [r7, #24]
 8005606:	0148      	lsls	r0, r1, #5
 8005608:	69f9      	ldr	r1, [r7, #28]
 800560a:	4401      	add	r1, r0
 800560c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005610:	4313      	orrs	r3, r2
 8005612:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005632:	6113      	str	r3, [r2, #16]
 8005634:	e036      	b.n	80056a4 <USB_EPStartXfer+0x3dc>
 8005636:	bf00      	nop
 8005638:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	695a      	ldr	r2, [r3, #20]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	4413      	add	r3, r2
 8005646:	1e5a      	subs	r2, r3, #1
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005650:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	8afb      	ldrh	r3, [r7, #22]
 8005662:	04d9      	lsls	r1, r3, #19
 8005664:	4b39      	ldr	r3, [pc, #228]	; (800574c <USB_EPStartXfer+0x484>)
 8005666:	400b      	ands	r3, r1
 8005668:	69b9      	ldr	r1, [r7, #24]
 800566a:	0148      	lsls	r0, r1, #5
 800566c:	69f9      	ldr	r1, [r7, #28]
 800566e:	4401      	add	r1, r0
 8005670:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005674:	4313      	orrs	r3, r2
 8005676:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	8af9      	ldrh	r1, [r7, #22]
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005694:	69b9      	ldr	r1, [r7, #24]
 8005696:	0148      	lsls	r0, r1, #5
 8005698:	69f9      	ldr	r1, [r7, #28]
 800569a:	4401      	add	r1, r0
 800569c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056a0:	4313      	orrs	r3, r2
 80056a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d10d      	bne.n	80056c6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	68d9      	ldr	r1, [r3, #12]
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	460a      	mov	r2, r1
 80056c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	78db      	ldrb	r3, [r3, #3]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d128      	bne.n	8005720 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d110      	bne.n	8005700 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e00f      	b.n	8005720 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	0151      	lsls	r1, r2, #5
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	440a      	add	r2, r1
 8005716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800571a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800571e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	0151      	lsls	r1, r2, #5
 8005732:	69fa      	ldr	r2, [r7, #28]
 8005734:	440a      	add	r2, r1
 8005736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800573e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	1ff80000 	.word	0x1ff80000

08005750 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	4613      	mov	r3, r2
 800575c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	2b01      	cmp	r3, #1
 800576e:	f040 80cd 	bne.w	800590c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d132      	bne.n	80057e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	440a      	add	r2, r1
 8005790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005794:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005798:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800579c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	0151      	lsls	r1, r2, #5
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	440a      	add	r2, r1
 80057b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d8:	0cdb      	lsrs	r3, r3, #19
 80057da:	04db      	lsls	r3, r3, #19
 80057dc:	6113      	str	r3, [r2, #16]
 80057de:	e04e      	b.n	800587e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	0151      	lsls	r1, r2, #5
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	440a      	add	r2, r1
 80057f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057fa:	0cdb      	lsrs	r3, r3, #19
 80057fc:	04db      	lsls	r3, r3, #19
 80057fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	440a      	add	r2, r1
 8005816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800581e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005822:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	695a      	ldr	r2, [r3, #20]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	d903      	bls.n	8005838 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	0151      	lsls	r1, r2, #5
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	440a      	add	r2, r1
 800584e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005852:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800586e:	6939      	ldr	r1, [r7, #16]
 8005870:	0148      	lsls	r0, r1, #5
 8005872:	6979      	ldr	r1, [r7, #20]
 8005874:	4401      	add	r1, r0
 8005876:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800587a:	4313      	orrs	r3, r2
 800587c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d11e      	bne.n	80058c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d009      	beq.n	80058a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	461a      	mov	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	0151      	lsls	r1, r2, #5
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	440a      	add	r2, r1
 80058b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	e092      	b.n	80059e8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	0151      	lsls	r1, r2, #5
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	440a      	add	r2, r1
 80058d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d07e      	beq.n	80059e8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	2101      	movs	r1, #1
 80058fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005900:	6979      	ldr	r1, [r7, #20]
 8005902:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005906:	4313      	orrs	r3, r2
 8005908:	634b      	str	r3, [r1, #52]	; 0x34
 800590a:	e06d      	b.n	80059e8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	440a      	add	r2, r1
 8005922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005926:	0cdb      	lsrs	r3, r3, #19
 8005928:	04db      	lsls	r3, r3, #19
 800592a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005946:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800594a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800594e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	440a      	add	r2, r1
 8005976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800597a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800597e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005996:	6939      	ldr	r1, [r7, #16]
 8005998:	0148      	lsls	r0, r1, #5
 800599a:	6979      	ldr	r1, [r7, #20]
 800599c:	4401      	add	r1, r0
 800599e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059a2:	4313      	orrs	r3, r2
 80059a4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80059a6:	79fb      	ldrb	r3, [r7, #7]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d10d      	bne.n	80059c8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d009      	beq.n	80059c8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	68d9      	ldr	r1, [r3, #12]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	460a      	mov	r2, r1
 80059c6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b089      	sub	sp, #36	; 0x24
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	4611      	mov	r1, r2
 8005a02:	461a      	mov	r2, r3
 8005a04:	460b      	mov	r3, r1
 8005a06:	71fb      	strb	r3, [r7, #7]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005a14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d11a      	bne.n	8005a52 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a1c:	88bb      	ldrh	r3, [r7, #4]
 8005a1e:	3303      	adds	r3, #3
 8005a20:	089b      	lsrs	r3, r3, #2
 8005a22:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a24:	2300      	movs	r3, #0
 8005a26:	61bb      	str	r3, [r7, #24]
 8005a28:	e00f      	b.n	8005a4a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	031a      	lsls	r2, r3, #12
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a36:	461a      	mov	r2, r3
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	3304      	adds	r3, #4
 8005a42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	3301      	adds	r3, #1
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d3eb      	bcc.n	8005a2a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3724      	adds	r7, #36	; 0x24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b089      	sub	sp, #36	; 0x24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	3303      	adds	r3, #3
 8005a7a:	089b      	lsrs	r3, r3, #2
 8005a7c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005a7e:	2300      	movs	r3, #0
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	e00b      	b.n	8005a9c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	3304      	adds	r3, #4
 8005a94:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d3ef      	bcc.n	8005a84 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005aa4:	69fb      	ldr	r3, [r7, #28]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3724      	adds	r7, #36	; 0x24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b085      	sub	sp, #20
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d12c      	bne.n	8005b28 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	db12      	blt.n	8005b06 <USB_EPSetStall+0x54>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00f      	beq.n	8005b06 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b04:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	0151      	lsls	r1, r2, #5
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	e02b      	b.n	8005b80 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	db12      	blt.n	8005b60 <USB_EPSetStall+0xae>
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00f      	beq.n	8005b60 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b5e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d128      	bne.n	8005bfc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bc8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	78db      	ldrb	r3, [r3, #3]
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d003      	beq.n	8005bda <USB_EPClearStall+0x4c>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	78db      	ldrb	r3, [r3, #3]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d138      	bne.n	8005c4c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	e027      	b.n	8005c4c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	78db      	ldrb	r3, [r3, #3]
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d003      	beq.n	8005c2c <USB_EPClearStall+0x9e>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	78db      	ldrb	r3, [r3, #3]
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d10f      	bne.n	8005c4c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c4a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	460b      	mov	r3, r1
 8005c64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c78:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c7c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c8e:	68f9      	ldr	r1, [r7, #12]
 8005c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c94:	4313      	orrs	r3, r2
 8005c96:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cc0:	f023 0303 	bic.w	r3, r3, #3
 8005cc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd4:	f023 0302 	bic.w	r3, r3, #2
 8005cd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d16:	f043 0302 	orr.w	r3, r3, #2
 8005d1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d42:	68fb      	ldr	r3, [r7, #12]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4013      	ands	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	0c1b      	lsrs	r3, r3, #16
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	4013      	ands	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	b29b      	uxth	r3, r3
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	4013      	ands	r3, r2
 8005de4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005de6:	68bb      	ldr	r3, [r7, #8]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e16:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	fa22 f303 	lsr.w	r3, r2, r3
 8005e24:	01db      	lsls	r3, r3, #7
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e42:	68bb      	ldr	r3, [r7, #8]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e8a:	f023 0307 	bic.w	r3, r3, #7
 8005e8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	607a      	str	r2, [r7, #4]
 8005ec0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	333c      	adds	r3, #60	; 0x3c
 8005eca:	3304      	adds	r3, #4
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	4a26      	ldr	r2, [pc, #152]	; (8005f6c <USB_EP0_OutStart+0xb8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d90a      	bls.n	8005eee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee8:	d101      	bne.n	8005eee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	e037      	b.n	8005f5e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1c:	f043 0318 	orr.w	r3, r3, #24
 8005f20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f30:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f34:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f36:	7afb      	ldrb	r3, [r7, #11]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d10f      	bne.n	8005f5c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f42:	461a      	mov	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f56:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	4f54300a 	.word	0x4f54300a

08005f70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4a13      	ldr	r2, [pc, #76]	; (8005fd4 <USB_CoreReset+0x64>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d901      	bls.n	8005f8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e01b      	b.n	8005fc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	daf2      	bge.n	8005f7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f043 0201 	orr.w	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <USB_CoreReset+0x64>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d901      	bls.n	8005fb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e006      	b.n	8005fc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d0f0      	beq.n	8005fa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	00030d40 	.word	0x00030d40

08005fd8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fe4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fe8:	f002 fa64 	bl	80084b4 <malloc>
 8005fec:	4603      	mov	r3, r0
 8005fee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d105      	bne.n	8006002 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005ffe:	2302      	movs	r3, #2
 8006000:	e066      	b.n	80060d0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	7c1b      	ldrb	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d119      	bne.n	8006046 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006016:	2202      	movs	r2, #2
 8006018:	2181      	movs	r1, #129	; 0x81
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f002 f8d1 	bl	80081c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800602a:	2202      	movs	r2, #2
 800602c:	2101      	movs	r1, #1
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f002 f8c7 	bl	80081c2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2210      	movs	r2, #16
 8006040:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006044:	e016      	b.n	8006074 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006046:	2340      	movs	r3, #64	; 0x40
 8006048:	2202      	movs	r2, #2
 800604a:	2181      	movs	r1, #129	; 0x81
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f002 f8b8 	bl	80081c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006058:	2340      	movs	r3, #64	; 0x40
 800605a:	2202      	movs	r2, #2
 800605c:	2101      	movs	r1, #1
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f002 f8af 	bl	80081c2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2210      	movs	r2, #16
 8006070:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006074:	2308      	movs	r3, #8
 8006076:	2203      	movs	r2, #3
 8006078:	2182      	movs	r1, #130	; 0x82
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f002 f8a1 	bl	80081c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7c1b      	ldrb	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d109      	bne.n	80060be <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060b4:	2101      	movs	r1, #1
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f002 f972 	bl	80083a0 <USBD_LL_PrepareReceive>
 80060bc:	e007      	b.n	80060ce <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060c4:	2340      	movs	r3, #64	; 0x40
 80060c6:	2101      	movs	r1, #1
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f002 f969 	bl	80083a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80060e8:	2181      	movs	r1, #129	; 0x81
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f002 f88f 	bl	800820e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80060f6:	2101      	movs	r1, #1
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f002 f888 	bl	800820e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006106:	2182      	movs	r1, #130	; 0x82
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f002 f880 	bl	800820e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00e      	beq.n	8006146 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006138:	4618      	mov	r0, r3
 800613a:	f002 f9c3 	bl	80084c4 <free>
    pdev->pClassData = NULL;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006160:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006176:	2b00      	cmp	r3, #0
 8006178:	d03a      	beq.n	80061f0 <USBD_CDC_Setup+0xa0>
 800617a:	2b20      	cmp	r3, #32
 800617c:	f040 8097 	bne.w	80062ae <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	88db      	ldrh	r3, [r3, #6]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d029      	beq.n	80061dc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	b25b      	sxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	da11      	bge.n	80061b6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800619e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	88d2      	ldrh	r2, [r2, #6]
 80061a4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80061a6:	6939      	ldr	r1, [r7, #16]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	88db      	ldrh	r3, [r3, #6]
 80061ac:	461a      	mov	r2, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 fa9d 	bl	80076ee <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80061b4:	e082      	b.n	80062bc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	785a      	ldrb	r2, [r3, #1]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	88db      	ldrh	r3, [r3, #6]
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80061cc:	6939      	ldr	r1, [r7, #16]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	88db      	ldrh	r3, [r3, #6]
 80061d2:	461a      	mov	r2, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 fab6 	bl	8007746 <USBD_CtlPrepareRx>
    break;
 80061da:	e06f      	b.n	80062bc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	7850      	ldrb	r0, [r2, #1]
 80061e8:	2200      	movs	r2, #0
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	4798      	blx	r3
    break;
 80061ee:	e065      	b.n	80062bc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	2b0b      	cmp	r3, #11
 80061f6:	d84f      	bhi.n	8006298 <USBD_CDC_Setup+0x148>
 80061f8:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <USBD_CDC_Setup+0xb0>)
 80061fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fe:	bf00      	nop
 8006200:	08006231 	.word	0x08006231
 8006204:	080062a7 	.word	0x080062a7
 8006208:	08006299 	.word	0x08006299
 800620c:	08006299 	.word	0x08006299
 8006210:	08006299 	.word	0x08006299
 8006214:	08006299 	.word	0x08006299
 8006218:	08006299 	.word	0x08006299
 800621c:	08006299 	.word	0x08006299
 8006220:	08006299 	.word	0x08006299
 8006224:	08006299 	.word	0x08006299
 8006228:	08006259 	.word	0x08006259
 800622c:	08006281 	.word	0x08006281
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006236:	2b03      	cmp	r3, #3
 8006238:	d107      	bne.n	800624a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800623a:	f107 030c 	add.w	r3, r7, #12
 800623e:	2202      	movs	r2, #2
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f001 fa53 	bl	80076ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006248:	e030      	b.n	80062ac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 f9dd 	bl	800760c <USBD_CtlError>
        ret = USBD_FAIL;
 8006252:	2303      	movs	r3, #3
 8006254:	75fb      	strb	r3, [r7, #23]
      break;
 8006256:	e029      	b.n	80062ac <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625e:	2b03      	cmp	r3, #3
 8006260:	d107      	bne.n	8006272 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006262:	f107 030f 	add.w	r3, r7, #15
 8006266:	2201      	movs	r2, #1
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 fa3f 	bl	80076ee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006270:	e01c      	b.n	80062ac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 f9c9 	bl	800760c <USBD_CtlError>
        ret = USBD_FAIL;
 800627a:	2303      	movs	r3, #3
 800627c:	75fb      	strb	r3, [r7, #23]
      break;
 800627e:	e015      	b.n	80062ac <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006286:	2b03      	cmp	r3, #3
 8006288:	d00f      	beq.n	80062aa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 f9bd 	bl	800760c <USBD_CtlError>
        ret = USBD_FAIL;
 8006292:	2303      	movs	r3, #3
 8006294:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006296:	e008      	b.n	80062aa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 f9b6 	bl	800760c <USBD_CtlError>
      ret = USBD_FAIL;
 80062a0:	2303      	movs	r3, #3
 80062a2:	75fb      	strb	r3, [r7, #23]
      break;
 80062a4:	e002      	b.n	80062ac <USBD_CDC_Setup+0x15c>
      break;
 80062a6:	bf00      	nop
 80062a8:	e008      	b.n	80062bc <USBD_CDC_Setup+0x16c>
      break;
 80062aa:	bf00      	nop
    }
    break;
 80062ac:	e006      	b.n	80062bc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 f9ab 	bl	800760c <USBD_CtlError>
    ret = USBD_FAIL;
 80062b6:	2303      	movs	r3, #3
 80062b8:	75fb      	strb	r3, [r7, #23]
    break;
 80062ba:	bf00      	nop
  }

  return (uint8_t)ret;
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop

080062c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e049      	b.n	800637e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80062f2:	78fa      	ldrb	r2, [r7, #3]
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	440b      	add	r3, r1
 8006300:	3318      	adds	r3, #24
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d029      	beq.n	800635c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006308:	78fa      	ldrb	r2, [r7, #3]
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	4613      	mov	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	3318      	adds	r3, #24
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	78f9      	ldrb	r1, [r7, #3]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	460b      	mov	r3, r1
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	1a5b      	subs	r3, r3, r1
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4403      	add	r3, r0
 8006328:	3344      	adds	r3, #68	; 0x44
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006330:	fb03 f301 	mul.w	r3, r3, r1
 8006334:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006336:	2b00      	cmp	r3, #0
 8006338:	d110      	bne.n	800635c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800633a:	78fa      	ldrb	r2, [r7, #3]
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	3318      	adds	r3, #24
 800634a:	2200      	movs	r2, #0
 800634c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800634e:	78f9      	ldrb	r1, [r7, #3]
 8006350:	2300      	movs	r3, #0
 8006352:	2200      	movs	r2, #0
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f002 f802 	bl	800835e <USBD_LL_Transmit>
 800635a:	e00f      	b.n	800637c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2200      	movs	r2, #0
 8006360:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006378:	78fa      	ldrb	r2, [r7, #3]
 800637a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006398:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e015      	b.n	80063d4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f002 f818 	bl	80083e2 <USBD_LL_GetRxDataSize>
 80063b2:	4602      	mov	r2, r0
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80063ce:	4611      	mov	r1, r2
 80063d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d015      	beq.n	8006422 <USBD_CDC_EP0_RxReady+0x46>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80063fc:	2bff      	cmp	r3, #255	; 0xff
 80063fe:	d010      	beq.n	8006422 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800640e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006416:	b292      	uxth	r2, r2
 8006418:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	22ff      	movs	r2, #255	; 0xff
 800641e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2243      	movs	r2, #67	; 0x43
 8006438:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800643a:	4b03      	ldr	r3, [pc, #12]	; (8006448 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	20000094 	.word	0x20000094

0800644c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2243      	movs	r2, #67	; 0x43
 8006458:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800645a:	4b03      	ldr	r3, [pc, #12]	; (8006468 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	20000050 	.word	0x20000050

0800646c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2243      	movs	r2, #67	; 0x43
 8006478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800647a:	4b03      	ldr	r3, [pc, #12]	; (8006488 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800647c:	4618      	mov	r0, r3
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	200000d8 	.word	0x200000d8

0800648c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	220a      	movs	r2, #10
 8006498:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800649a:	4b03      	ldr	r3, [pc, #12]	; (80064a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	2000000c 	.word	0x2000000c

080064ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80064bc:	2303      	movs	r3, #3
 80064be:	e004      	b.n	80064ca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b087      	sub	sp, #28
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006518:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800653e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800654e:	2303      	movs	r3, #3
 8006550:	e01a      	b.n	8006588 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006558:	2b00      	cmp	r3, #0
 800655a:	d114      	bne.n	8006586 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2201      	movs	r2, #1
 8006560:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800657a:	2181      	movs	r1, #129	; 0x81
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 feee 	bl	800835e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800659e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e016      	b.n	80065dc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	7c1b      	ldrb	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065c0:	2101      	movs	r1, #1
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 feec 	bl	80083a0 <USBD_LL_PrepareReceive>
 80065c8:	e007      	b.n	80065da <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065d0:	2340      	movs	r3, #64	; 0x40
 80065d2:	2101      	movs	r1, #1
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 fee3 	bl	80083a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e025      	b.n	8006648 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	79fa      	ldrb	r2, [r7, #7]
 800663a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f001 fd59 	bl	80080f4 <USBD_LL_Init>
 8006642:	4603      	mov	r3, r0
 8006644:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006646:	7dfb      	ldrb	r3, [r7, #23]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006664:	2303      	movs	r3, #3
 8006666:	e010      	b.n	800668a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006678:	f107 020e 	add.w	r2, r7, #14
 800667c:	4610      	mov	r0, r2
 800667e:	4798      	blx	r3
 8006680:	4602      	mov	r2, r0
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f001 fd76 	bl	800818c <USBD_LL_Start>
 80066a0:	4603      	mov	r3, r0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80066cc:	2303      	movs	r3, #3
 80066ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	78fa      	ldrb	r2, [r7, #3]
 80066e4:	4611      	mov	r1, r2
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
 80066ea:	4603      	mov	r3, r0
 80066ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d007      	beq.n	800671e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	78fa      	ldrb	r2, [r7, #3]
 8006718:	4611      	mov	r1, r2
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	4798      	blx	r3
  }

  return USBD_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f000 ff2c 	bl	8007598 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800674e:	461a      	mov	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800675c:	f003 031f 	and.w	r3, r3, #31
 8006760:	2b01      	cmp	r3, #1
 8006762:	d00e      	beq.n	8006782 <USBD_LL_SetupStage+0x5a>
 8006764:	2b01      	cmp	r3, #1
 8006766:	d302      	bcc.n	800676e <USBD_LL_SetupStage+0x46>
 8006768:	2b02      	cmp	r3, #2
 800676a:	d014      	beq.n	8006796 <USBD_LL_SetupStage+0x6e>
 800676c:	e01d      	b.n	80067aa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fa18 	bl	8006bac <USBD_StdDevReq>
 800677c:	4603      	mov	r3, r0
 800677e:	73fb      	strb	r3, [r7, #15]
      break;
 8006780:	e020      	b.n	80067c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fa7c 	bl	8006c88 <USBD_StdItfReq>
 8006790:	4603      	mov	r3, r0
 8006792:	73fb      	strb	r3, [r7, #15]
      break;
 8006794:	e016      	b.n	80067c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fab8 	bl	8006d14 <USBD_StdEPReq>
 80067a4:	4603      	mov	r3, r0
 80067a6:	73fb      	strb	r3, [r7, #15]
      break;
 80067a8:	e00c      	b.n	80067c4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f001 fd47 	bl	800824c <USBD_LL_StallEP>
 80067be:	4603      	mov	r3, r0
 80067c0:	73fb      	strb	r3, [r7, #15]
      break;
 80067c2:	bf00      	nop
  }

  return ret;
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b086      	sub	sp, #24
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	460b      	mov	r3, r1
 80067d8:	607a      	str	r2, [r7, #4]
 80067da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80067dc:	7afb      	ldrb	r3, [r7, #11]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d137      	bne.n	8006852 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d14a      	bne.n	800688a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d913      	bls.n	8006828 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	1ad2      	subs	r2, r2, r3
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	4293      	cmp	r3, r2
 8006818:	bf28      	it	cs
 800681a:	4613      	movcs	r3, r2
 800681c:	461a      	mov	r2, r3
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 ffad 	bl	8007780 <USBD_CtlContinueRx>
 8006826:	e030      	b.n	800688a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800683a:	2b03      	cmp	r3, #3
 800683c:	d105      	bne.n	800684a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 ffa9 	bl	80077a2 <USBD_CtlSendStatus>
 8006850:	e01b      	b.n	800688a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d013      	beq.n	8006886 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006864:	2b03      	cmp	r3, #3
 8006866:	d10e      	bne.n	8006886 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	7afa      	ldrb	r2, [r7, #11]
 8006872:	4611      	mov	r1, r2
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	4798      	blx	r3
 8006878:	4603      	mov	r3, r0
 800687a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800687c:	7dfb      	ldrb	r3, [r7, #23]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	e002      	b.n	800688c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006886:	2303      	movs	r3, #3
 8006888:	e000      	b.n	800688c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	460b      	mov	r3, r1
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068a2:	7afb      	ldrb	r3, [r7, #11]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d16a      	bne.n	800697e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3314      	adds	r3, #20
 80068ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d155      	bne.n	8006964 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d914      	bls.n	80068ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	1ad2      	subs	r2, r2, r3
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	461a      	mov	r2, r3
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 ff22 	bl	8007724 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068e0:	2300      	movs	r3, #0
 80068e2:	2200      	movs	r2, #0
 80068e4:	2100      	movs	r1, #0
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f001 fd5a 	bl	80083a0 <USBD_LL_PrepareReceive>
 80068ec:	e03a      	b.n	8006964 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d11c      	bne.n	8006934 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006902:	429a      	cmp	r2, r3
 8006904:	d316      	bcc.n	8006934 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006910:	429a      	cmp	r2, r3
 8006912:	d20f      	bcs.n	8006934 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006914:	2200      	movs	r2, #0
 8006916:	2100      	movs	r1, #0
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 ff03 	bl	8007724 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006926:	2300      	movs	r3, #0
 8006928:	2200      	movs	r2, #0
 800692a:	2100      	movs	r1, #0
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f001 fd37 	bl	80083a0 <USBD_LL_PrepareReceive>
 8006932:	e017      	b.n	8006964 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00a      	beq.n	8006956 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006946:	2b03      	cmp	r3, #3
 8006948:	d105      	bne.n	8006956 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f001 fc77 	bl	800824c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 ff32 	bl	80077c8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800696a:	2b01      	cmp	r3, #1
 800696c:	d123      	bne.n	80069b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f7ff fe9b 	bl	80066aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800697c:	e01b      	b.n	80069b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d013      	beq.n	80069b2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006990:	2b03      	cmp	r3, #3
 8006992:	d10e      	bne.n	80069b2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	7afa      	ldrb	r2, [r7, #11]
 800699e:	4611      	mov	r1, r2
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	4798      	blx	r3
 80069a4:	4603      	mov	r3, r0
 80069a6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80069a8:	7dfb      	ldrb	r3, [r7, #23]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
 80069b0:	e002      	b.n	80069b8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e000      	b.n	80069b8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d009      	beq.n	8006a04 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6852      	ldr	r2, [r2, #4]
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	4611      	mov	r1, r2
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a04:	2340      	movs	r3, #64	; 0x40
 8006a06:	2200      	movs	r2, #0
 8006a08:	2100      	movs	r1, #0
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f001 fbd9 	bl	80081c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2240      	movs	r2, #64	; 0x40
 8006a1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a20:	2340      	movs	r3, #64	; 0x40
 8006a22:	2200      	movs	r2, #0
 8006a24:	2180      	movs	r1, #128	; 0x80
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 fbcb 	bl	80081c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2240      	movs	r2, #64	; 0x40
 8006a36:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	78fa      	ldrb	r2, [r7, #3]
 8006a52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2204      	movs	r2, #4
 8006a7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d105      	bne.n	8006aaa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d10b      	bne.n	8006ae2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b082      	sub	sp, #8
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d009      	beq.n	8006b64 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6852      	ldr	r2, [r2, #4]
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	4611      	mov	r1, r2
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	4798      	blx	r3
  }

  return USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b087      	sub	sp, #28
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	3301      	adds	r3, #1
 8006b84:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b8c:	8a3b      	ldrh	r3, [r7, #16]
 8006b8e:	021b      	lsls	r3, r3, #8
 8006b90:	b21a      	sxth	r2, r3
 8006b92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	b21b      	sxth	r3, r3
 8006b9a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b9c:	89fb      	ldrh	r3, [r7, #14]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
	...

08006bac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d004      	beq.n	8006bd0 <USBD_StdDevReq+0x24>
 8006bc6:	2b40      	cmp	r3, #64	; 0x40
 8006bc8:	d002      	beq.n	8006bd0 <USBD_StdDevReq+0x24>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <USBD_StdDevReq+0x38>
 8006bce:	e050      	b.n	8006c72 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
 8006bde:	4603      	mov	r3, r0
 8006be0:	73fb      	strb	r3, [r7, #15]
    break;
 8006be2:	e04b      	b.n	8006c7c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b09      	cmp	r3, #9
 8006bea:	d83c      	bhi.n	8006c66 <USBD_StdDevReq+0xba>
 8006bec:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <USBD_StdDevReq+0x48>)
 8006bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf2:	bf00      	nop
 8006bf4:	08006c49 	.word	0x08006c49
 8006bf8:	08006c5d 	.word	0x08006c5d
 8006bfc:	08006c67 	.word	0x08006c67
 8006c00:	08006c53 	.word	0x08006c53
 8006c04:	08006c67 	.word	0x08006c67
 8006c08:	08006c27 	.word	0x08006c27
 8006c0c:	08006c1d 	.word	0x08006c1d
 8006c10:	08006c67 	.word	0x08006c67
 8006c14:	08006c3f 	.word	0x08006c3f
 8006c18:	08006c31 	.word	0x08006c31
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f9ce 	bl	8006fc0 <USBD_GetDescriptor>
      break;
 8006c24:	e024      	b.n	8006c70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fb33 	bl	8007294 <USBD_SetAddress>
      break;
 8006c2e:	e01f      	b.n	8006c70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fb70 	bl	8007318 <USBD_SetConfig>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c3c:	e018      	b.n	8006c70 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fc0d 	bl	8007460 <USBD_GetConfig>
      break;
 8006c46:	e013      	b.n	8006c70 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fc3c 	bl	80074c8 <USBD_GetStatus>
      break;
 8006c50:	e00e      	b.n	8006c70 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fc6a 	bl	800752e <USBD_SetFeature>
      break;
 8006c5a:	e009      	b.n	8006c70 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fc79 	bl	8007556 <USBD_ClrFeature>
      break;
 8006c64:	e004      	b.n	8006c70 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fccf 	bl	800760c <USBD_CtlError>
      break;
 8006c6e:	bf00      	nop
    }
    break;
 8006c70:	e004      	b.n	8006c7c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fcc9 	bl	800760c <USBD_CtlError>
    break;
 8006c7a:	bf00      	nop
  }

  return ret;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop

08006c88 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d003      	beq.n	8006caa <USBD_StdItfReq+0x22>
 8006ca2:	2b40      	cmp	r3, #64	; 0x40
 8006ca4:	d001      	beq.n	8006caa <USBD_StdItfReq+0x22>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d12a      	bne.n	8006d00 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d81d      	bhi.n	8006cf2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	889b      	ldrh	r3, [r3, #4]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d813      	bhi.n	8006ce8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
 8006cce:	4603      	mov	r3, r0
 8006cd0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	88db      	ldrh	r3, [r3, #6]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d110      	bne.n	8006cfc <USBD_StdItfReq+0x74>
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10d      	bne.n	8006cfc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fd5e 	bl	80077a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006ce6:	e009      	b.n	8006cfc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fc8e 	bl	800760c <USBD_CtlError>
      break;
 8006cf0:	e004      	b.n	8006cfc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fc89 	bl	800760c <USBD_CtlError>
      break;
 8006cfa:	e000      	b.n	8006cfe <USBD_StdItfReq+0x76>
      break;
 8006cfc:	bf00      	nop
    }
    break;
 8006cfe:	e004      	b.n	8006d0a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fc82 	bl	800760c <USBD_CtlError>
    break;
 8006d08:	bf00      	nop
  }

  return ret;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	889b      	ldrh	r3, [r3, #4]
 8006d26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d30:	2b20      	cmp	r3, #32
 8006d32:	d004      	beq.n	8006d3e <USBD_StdEPReq+0x2a>
 8006d34:	2b40      	cmp	r3, #64	; 0x40
 8006d36:	d002      	beq.n	8006d3e <USBD_StdEPReq+0x2a>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <USBD_StdEPReq+0x3e>
 8006d3c:	e135      	b.n	8006faa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d50:	e130      	b.n	8006fb4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d03e      	beq.n	8006dd8 <USBD_StdEPReq+0xc4>
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d002      	beq.n	8006d64 <USBD_StdEPReq+0x50>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d077      	beq.n	8006e52 <USBD_StdEPReq+0x13e>
 8006d62:	e11c      	b.n	8006f9e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d002      	beq.n	8006d74 <USBD_StdEPReq+0x60>
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d015      	beq.n	8006d9e <USBD_StdEPReq+0x8a>
 8006d72:	e02b      	b.n	8006dcc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00c      	beq.n	8006d94 <USBD_StdEPReq+0x80>
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	2b80      	cmp	r3, #128	; 0x80
 8006d7e:	d009      	beq.n	8006d94 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 fa61 	bl	800824c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d8a:	2180      	movs	r1, #128	; 0x80
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 fa5d 	bl	800824c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006d92:	e020      	b.n	8006dd6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fc38 	bl	800760c <USBD_CtlError>
        break;
 8006d9c:	e01b      	b.n	8006dd6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	885b      	ldrh	r3, [r3, #2]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10e      	bne.n	8006dc4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <USBD_StdEPReq+0xb0>
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	2b80      	cmp	r3, #128	; 0x80
 8006db0:	d008      	beq.n	8006dc4 <USBD_StdEPReq+0xb0>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	88db      	ldrh	r3, [r3, #6]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d104      	bne.n	8006dc4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 fa44 	bl	800824c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fcec 	bl	80077a2 <USBD_CtlSendStatus>

        break;
 8006dca:	e004      	b.n	8006dd6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fc1c 	bl	800760c <USBD_CtlError>
        break;
 8006dd4:	bf00      	nop
      }
      break;
 8006dd6:	e0e7      	b.n	8006fa8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d002      	beq.n	8006de8 <USBD_StdEPReq+0xd4>
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d015      	beq.n	8006e12 <USBD_StdEPReq+0xfe>
 8006de6:	e02d      	b.n	8006e44 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00c      	beq.n	8006e08 <USBD_StdEPReq+0xf4>
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	2b80      	cmp	r3, #128	; 0x80
 8006df2:	d009      	beq.n	8006e08 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 fa27 	bl	800824c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dfe:	2180      	movs	r1, #128	; 0x80
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 fa23 	bl	800824c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e06:	e023      	b.n	8006e50 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fbfe 	bl	800760c <USBD_CtlError>
        break;
 8006e10:	e01e      	b.n	8006e50 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	885b      	ldrh	r3, [r3, #2]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d119      	bne.n	8006e4e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d004      	beq.n	8006e2e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e24:	7bbb      	ldrb	r3, [r7, #14]
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f001 fa2e 	bl	800828a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fcb7 	bl	80077a2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
        }
        break;
 8006e42:	e004      	b.n	8006e4e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fbe0 	bl	800760c <USBD_CtlError>
        break;
 8006e4c:	e000      	b.n	8006e50 <USBD_StdEPReq+0x13c>
        break;
 8006e4e:	bf00      	nop
      }
      break;
 8006e50:	e0aa      	b.n	8006fa8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d002      	beq.n	8006e62 <USBD_StdEPReq+0x14e>
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d032      	beq.n	8006ec6 <USBD_StdEPReq+0x1b2>
 8006e60:	e097      	b.n	8006f92 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <USBD_StdEPReq+0x164>
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	2b80      	cmp	r3, #128	; 0x80
 8006e6c:	d004      	beq.n	8006e78 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fbcb 	bl	800760c <USBD_CtlError>
          break;
 8006e76:	e091      	b.n	8006f9c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	da0b      	bge.n	8006e98 <USBD_StdEPReq+0x184>
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	3310      	adds	r3, #16
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	4413      	add	r3, r2
 8006e94:	3304      	adds	r3, #4
 8006e96:	e00b      	b.n	8006eb0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	3304      	adds	r3, #4
 8006eb0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fc15 	bl	80076ee <USBD_CtlSendData>
        break;
 8006ec4:	e06a      	b.n	8006f9c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006ec6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	da11      	bge.n	8006ef2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ece:	7bbb      	ldrb	r3, [r7, #14]
 8006ed0:	f003 020f 	and.w	r2, r3, #15
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	3324      	adds	r3, #36	; 0x24
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d117      	bne.n	8006f18 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fb8e 	bl	800760c <USBD_CtlError>
            break;
 8006ef0:	e054      	b.n	8006f9c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	f003 020f 	and.w	r2, r3, #15
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fb7b 	bl	800760c <USBD_CtlError>
            break;
 8006f16:	e041      	b.n	8006f9c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	da0b      	bge.n	8006f38 <USBD_StdEPReq+0x224>
 8006f20:	7bbb      	ldrb	r3, [r7, #14]
 8006f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	3310      	adds	r3, #16
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	4413      	add	r3, r2
 8006f34:	3304      	adds	r3, #4
 8006f36:	e00b      	b.n	8006f50 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
 8006f3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	3304      	adds	r3, #4
 8006f50:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f52:	7bbb      	ldrb	r3, [r7, #14]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <USBD_StdEPReq+0x24a>
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	2b80      	cmp	r3, #128	; 0x80
 8006f5c:	d103      	bne.n	8006f66 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	e00e      	b.n	8006f84 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f66:	7bbb      	ldrb	r3, [r7, #14]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 f9ac 	bl	80082c8 <USBD_LL_IsStallEP>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	e002      	b.n	8006f84 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2200      	movs	r2, #0
 8006f82:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2202      	movs	r2, #2
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fbaf 	bl	80076ee <USBD_CtlSendData>
          break;
 8006f90:	e004      	b.n	8006f9c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fb39 	bl	800760c <USBD_CtlError>
        break;
 8006f9a:	bf00      	nop
      }
      break;
 8006f9c:	e004      	b.n	8006fa8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fb33 	bl	800760c <USBD_CtlError>
      break;
 8006fa6:	bf00      	nop
    }
    break;
 8006fa8:	e004      	b.n	8006fb4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fb2d 	bl	800760c <USBD_CtlError>
    break;
 8006fb2:	bf00      	nop
  }

  return ret;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	885b      	ldrh	r3, [r3, #2]
 8006fda:	0a1b      	lsrs	r3, r3, #8
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	2b06      	cmp	r3, #6
 8006fe2:	f200 8128 	bhi.w	8007236 <USBD_GetDescriptor+0x276>
 8006fe6:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <USBD_GetDescriptor+0x2c>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08007009 	.word	0x08007009
 8006ff0:	08007021 	.word	0x08007021
 8006ff4:	08007061 	.word	0x08007061
 8006ff8:	08007237 	.word	0x08007237
 8006ffc:	08007237 	.word	0x08007237
 8007000:	080071d7 	.word	0x080071d7
 8007004:	08007203 	.word	0x08007203
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	7c12      	ldrb	r2, [r2, #16]
 8007014:	f107 0108 	add.w	r1, r7, #8
 8007018:	4610      	mov	r0, r2
 800701a:	4798      	blx	r3
 800701c:	60f8      	str	r0, [r7, #12]
    break;
 800701e:	e112      	b.n	8007246 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	7c1b      	ldrb	r3, [r3, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10d      	bne.n	8007044 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	f107 0208 	add.w	r2, r7, #8
 8007034:	4610      	mov	r0, r2
 8007036:	4798      	blx	r3
 8007038:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	2202      	movs	r2, #2
 8007040:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007042:	e100      	b.n	8007246 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704c:	f107 0208 	add.w	r2, r7, #8
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
 8007054:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3301      	adds	r3, #1
 800705a:	2202      	movs	r2, #2
 800705c:	701a      	strb	r2, [r3, #0]
    break;
 800705e:	e0f2      	b.n	8007246 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	885b      	ldrh	r3, [r3, #2]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b05      	cmp	r3, #5
 8007068:	f200 80ac 	bhi.w	80071c4 <USBD_GetDescriptor+0x204>
 800706c:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <USBD_GetDescriptor+0xb4>)
 800706e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007072:	bf00      	nop
 8007074:	0800708d 	.word	0x0800708d
 8007078:	080070c1 	.word	0x080070c1
 800707c:	080070f5 	.word	0x080070f5
 8007080:	08007129 	.word	0x08007129
 8007084:	0800715d 	.word	0x0800715d
 8007088:	08007191 	.word	0x08007191
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00b      	beq.n	80070b0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	7c12      	ldrb	r2, [r2, #16]
 80070a4:	f107 0108 	add.w	r1, r7, #8
 80070a8:	4610      	mov	r0, r2
 80070aa:	4798      	blx	r3
 80070ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070ae:	e091      	b.n	80071d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 faaa 	bl	800760c <USBD_CtlError>
        err++;
 80070b8:	7afb      	ldrb	r3, [r7, #11]
 80070ba:	3301      	adds	r3, #1
 80070bc:	72fb      	strb	r3, [r7, #11]
      break;
 80070be:	e089      	b.n	80071d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00b      	beq.n	80070e4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	7c12      	ldrb	r2, [r2, #16]
 80070d8:	f107 0108 	add.w	r1, r7, #8
 80070dc:	4610      	mov	r0, r2
 80070de:	4798      	blx	r3
 80070e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070e2:	e077      	b.n	80071d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa90 	bl	800760c <USBD_CtlError>
        err++;
 80070ec:	7afb      	ldrb	r3, [r7, #11]
 80070ee:	3301      	adds	r3, #1
 80070f0:	72fb      	strb	r3, [r7, #11]
      break;
 80070f2:	e06f      	b.n	80071d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00b      	beq.n	8007118 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	7c12      	ldrb	r2, [r2, #16]
 800710c:	f107 0108 	add.w	r1, r7, #8
 8007110:	4610      	mov	r0, r2
 8007112:	4798      	blx	r3
 8007114:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007116:	e05d      	b.n	80071d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fa76 	bl	800760c <USBD_CtlError>
        err++;
 8007120:	7afb      	ldrb	r3, [r7, #11]
 8007122:	3301      	adds	r3, #1
 8007124:	72fb      	strb	r3, [r7, #11]
      break;
 8007126:	e055      	b.n	80071d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00b      	beq.n	800714c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	7c12      	ldrb	r2, [r2, #16]
 8007140:	f107 0108 	add.w	r1, r7, #8
 8007144:	4610      	mov	r0, r2
 8007146:	4798      	blx	r3
 8007148:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800714a:	e043      	b.n	80071d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fa5c 	bl	800760c <USBD_CtlError>
        err++;
 8007154:	7afb      	ldrb	r3, [r7, #11]
 8007156:	3301      	adds	r3, #1
 8007158:	72fb      	strb	r3, [r7, #11]
      break;
 800715a:	e03b      	b.n	80071d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	7c12      	ldrb	r2, [r2, #16]
 8007174:	f107 0108 	add.w	r1, r7, #8
 8007178:	4610      	mov	r0, r2
 800717a:	4798      	blx	r3
 800717c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800717e:	e029      	b.n	80071d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa42 	bl	800760c <USBD_CtlError>
        err++;
 8007188:	7afb      	ldrb	r3, [r7, #11]
 800718a:	3301      	adds	r3, #1
 800718c:	72fb      	strb	r3, [r7, #11]
      break;
 800718e:	e021      	b.n	80071d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00b      	beq.n	80071b4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	7c12      	ldrb	r2, [r2, #16]
 80071a8:	f107 0108 	add.w	r1, r7, #8
 80071ac:	4610      	mov	r0, r2
 80071ae:	4798      	blx	r3
 80071b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071b2:	e00f      	b.n	80071d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa28 	bl	800760c <USBD_CtlError>
        err++;
 80071bc:	7afb      	ldrb	r3, [r7, #11]
 80071be:	3301      	adds	r3, #1
 80071c0:	72fb      	strb	r3, [r7, #11]
      break;
 80071c2:	e007      	b.n	80071d4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa20 	bl	800760c <USBD_CtlError>
      err++;
 80071cc:	7afb      	ldrb	r3, [r7, #11]
 80071ce:	3301      	adds	r3, #1
 80071d0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80071d2:	bf00      	nop
    }
    break;
 80071d4:	e037      	b.n	8007246 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	7c1b      	ldrb	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d109      	bne.n	80071f2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e6:	f107 0208 	add.w	r2, r7, #8
 80071ea:	4610      	mov	r0, r2
 80071ec:	4798      	blx	r3
 80071ee:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80071f0:	e029      	b.n	8007246 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fa09 	bl	800760c <USBD_CtlError>
      err++;
 80071fa:	7afb      	ldrb	r3, [r7, #11]
 80071fc:	3301      	adds	r3, #1
 80071fe:	72fb      	strb	r3, [r7, #11]
    break;
 8007200:	e021      	b.n	8007246 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7c1b      	ldrb	r3, [r3, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10d      	bne.n	8007226 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007212:	f107 0208 	add.w	r2, r7, #8
 8007216:	4610      	mov	r0, r2
 8007218:	4798      	blx	r3
 800721a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	2207      	movs	r2, #7
 8007222:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007224:	e00f      	b.n	8007246 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f9ef 	bl	800760c <USBD_CtlError>
      err++;
 800722e:	7afb      	ldrb	r3, [r7, #11]
 8007230:	3301      	adds	r3, #1
 8007232:	72fb      	strb	r3, [r7, #11]
    break;
 8007234:	e007      	b.n	8007246 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f9e7 	bl	800760c <USBD_CtlError>
    err++;
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	3301      	adds	r3, #1
 8007242:	72fb      	strb	r3, [r7, #11]
    break;
 8007244:	bf00      	nop
  }

  if (err != 0U)
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d11e      	bne.n	800728a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	88db      	ldrh	r3, [r3, #6]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d016      	beq.n	8007282 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007254:	893b      	ldrh	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00e      	beq.n	8007278 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	88da      	ldrh	r2, [r3, #6]
 800725e:	893b      	ldrh	r3, [r7, #8]
 8007260:	4293      	cmp	r3, r2
 8007262:	bf28      	it	cs
 8007264:	4613      	movcs	r3, r2
 8007266:	b29b      	uxth	r3, r3
 8007268:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800726a:	893b      	ldrh	r3, [r7, #8]
 800726c:	461a      	mov	r2, r3
 800726e:	68f9      	ldr	r1, [r7, #12]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fa3c 	bl	80076ee <USBD_CtlSendData>
 8007276:	e009      	b.n	800728c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f9c6 	bl	800760c <USBD_CtlError>
 8007280:	e004      	b.n	800728c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fa8d 	bl	80077a2 <USBD_CtlSendStatus>
 8007288:	e000      	b.n	800728c <USBD_GetDescriptor+0x2cc>
    return;
 800728a:	bf00      	nop
    }
  }
}
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop

08007294 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	889b      	ldrh	r3, [r3, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d130      	bne.n	8007308 <USBD_SetAddress+0x74>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	88db      	ldrh	r3, [r3, #6]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d12c      	bne.n	8007308 <USBD_SetAddress+0x74>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	885b      	ldrh	r3, [r3, #2]
 80072b2:	2b7f      	cmp	r3, #127	; 0x7f
 80072b4:	d828      	bhi.n	8007308 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	885b      	ldrh	r3, [r3, #2]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d104      	bne.n	80072d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f99c 	bl	800760c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d4:	e01c      	b.n	8007310 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	7bfa      	ldrb	r2, [r7, #15]
 80072da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 f81c 	bl	8008320 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fa5a 	bl	80077a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d004      	beq.n	80072fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fc:	e008      	b.n	8007310 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007306:	e003      	b.n	8007310 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f97e 	bl	800760c <USBD_CtlError>
  }
}
 8007310:	bf00      	nop
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	885b      	ldrh	r3, [r3, #2]
 800732a:	b2da      	uxtb	r2, r3
 800732c:	4b4b      	ldr	r3, [pc, #300]	; (800745c <USBD_SetConfig+0x144>)
 800732e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007330:	4b4a      	ldr	r3, [pc, #296]	; (800745c <USBD_SetConfig+0x144>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d905      	bls.n	8007344 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f966 	bl	800760c <USBD_CtlError>
    return USBD_FAIL;
 8007340:	2303      	movs	r3, #3
 8007342:	e087      	b.n	8007454 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734a:	2b02      	cmp	r3, #2
 800734c:	d002      	beq.n	8007354 <USBD_SetConfig+0x3c>
 800734e:	2b03      	cmp	r3, #3
 8007350:	d025      	beq.n	800739e <USBD_SetConfig+0x86>
 8007352:	e071      	b.n	8007438 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007354:	4b41      	ldr	r3, [pc, #260]	; (800745c <USBD_SetConfig+0x144>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01c      	beq.n	8007396 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800735c:	4b3f      	ldr	r3, [pc, #252]	; (800745c <USBD_SetConfig+0x144>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007366:	4b3d      	ldr	r3, [pc, #244]	; (800745c <USBD_SetConfig+0x144>)
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff f9a7 	bl	80066c0 <USBD_SetClassConfig>
 8007372:	4603      	mov	r3, r0
 8007374:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d004      	beq.n	8007386 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f944 	bl	800760c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007384:	e065      	b.n	8007452 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa0b 	bl	80077a2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2203      	movs	r2, #3
 8007390:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007394:	e05d      	b.n	8007452 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fa03 	bl	80077a2 <USBD_CtlSendStatus>
    break;
 800739c:	e059      	b.n	8007452 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800739e:	4b2f      	ldr	r3, [pc, #188]	; (800745c <USBD_SetConfig+0x144>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d112      	bne.n	80073cc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2202      	movs	r2, #2
 80073aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80073ae:	4b2b      	ldr	r3, [pc, #172]	; (800745c <USBD_SetConfig+0x144>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073b8:	4b28      	ldr	r3, [pc, #160]	; (800745c <USBD_SetConfig+0x144>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff f99a 	bl	80066f8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f9ec 	bl	80077a2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80073ca:	e042      	b.n	8007452 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80073cc:	4b23      	ldr	r3, [pc, #140]	; (800745c <USBD_SetConfig+0x144>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d02a      	beq.n	8007430 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff f988 	bl	80066f8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80073e8:	4b1c      	ldr	r3, [pc, #112]	; (800745c <USBD_SetConfig+0x144>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80073f2:	4b1a      	ldr	r3, [pc, #104]	; (800745c <USBD_SetConfig+0x144>)
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff f961 	bl	80066c0 <USBD_SetClassConfig>
 80073fe:	4603      	mov	r3, r0
 8007400:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007402:	7bfb      	ldrb	r3, [r7, #15]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00f      	beq.n	8007428 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f8fe 	bl	800760c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff f96d 	bl	80066f8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2202      	movs	r2, #2
 8007422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007426:	e014      	b.n	8007452 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f9ba 	bl	80077a2 <USBD_CtlSendStatus>
    break;
 800742e:	e010      	b.n	8007452 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f9b6 	bl	80077a2 <USBD_CtlSendStatus>
    break;
 8007436:	e00c      	b.n	8007452 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f8e6 	bl	800760c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007440:	4b06      	ldr	r3, [pc, #24]	; (800745c <USBD_SetConfig+0x144>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff f956 	bl	80066f8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800744c:	2303      	movs	r3, #3
 800744e:	73fb      	strb	r3, [r7, #15]
    break;
 8007450:	bf00      	nop
  }

  return ret;
 8007452:	7bfb      	ldrb	r3, [r7, #15]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20000204 	.word	0x20000204

08007460 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	88db      	ldrh	r3, [r3, #6]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d004      	beq.n	800747c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f8c9 	bl	800760c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800747a:	e021      	b.n	80074c0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007482:	2b01      	cmp	r3, #1
 8007484:	db17      	blt.n	80074b6 <USBD_GetConfig+0x56>
 8007486:	2b02      	cmp	r3, #2
 8007488:	dd02      	ble.n	8007490 <USBD_GetConfig+0x30>
 800748a:	2b03      	cmp	r3, #3
 800748c:	d00b      	beq.n	80074a6 <USBD_GetConfig+0x46>
 800748e:	e012      	b.n	80074b6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3308      	adds	r3, #8
 800749a:	2201      	movs	r2, #1
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f925 	bl	80076ee <USBD_CtlSendData>
      break;
 80074a4:	e00c      	b.n	80074c0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3304      	adds	r3, #4
 80074aa:	2201      	movs	r2, #1
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f91d 	bl	80076ee <USBD_CtlSendData>
      break;
 80074b4:	e004      	b.n	80074c0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f8a7 	bl	800760c <USBD_CtlError>
      break;
 80074be:	bf00      	nop
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d8:	3b01      	subs	r3, #1
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d81e      	bhi.n	800751c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	88db      	ldrh	r3, [r3, #6]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d004      	beq.n	80074f0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f88f 	bl	800760c <USBD_CtlError>
      break;
 80074ee:	e01a      	b.n	8007526 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f043 0202 	orr.w	r2, r3, #2
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	330c      	adds	r3, #12
 8007510:	2202      	movs	r2, #2
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f8ea 	bl	80076ee <USBD_CtlSendData>
    break;
 800751a:	e004      	b.n	8007526 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f874 	bl	800760c <USBD_CtlError>
    break;
 8007524:	bf00      	nop
  }
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	885b      	ldrh	r3, [r3, #2]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d106      	bne.n	800754e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f92a 	bl	80077a2 <USBD_CtlSendStatus>
  }
}
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007566:	3b01      	subs	r3, #1
 8007568:	2b02      	cmp	r3, #2
 800756a:	d80b      	bhi.n	8007584 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	885b      	ldrh	r3, [r3, #2]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d10c      	bne.n	800758e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f910 	bl	80077a2 <USBD_CtlSendStatus>
      }
      break;
 8007582:	e004      	b.n	800758e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f840 	bl	800760c <USBD_CtlError>
      break;
 800758c:	e000      	b.n	8007590 <USBD_ClrFeature+0x3a>
      break;
 800758e:	bf00      	nop
  }
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	781a      	ldrb	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3301      	adds	r3, #1
 80075b2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	781a      	ldrb	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3301      	adds	r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f7ff fad3 	bl	8006b6e <SWAPBYTE>
 80075c8:	4603      	mov	r3, r0
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3301      	adds	r3, #1
 80075d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	3301      	adds	r3, #1
 80075da:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7ff fac6 	bl	8006b6e <SWAPBYTE>
 80075e2:	4603      	mov	r3, r0
 80075e4:	461a      	mov	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3301      	adds	r3, #1
 80075ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3301      	adds	r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff fab9 	bl	8006b6e <SWAPBYTE>
 80075fc:	4603      	mov	r3, r0
 80075fe:	461a      	mov	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	80da      	strh	r2, [r3, #6]
}
 8007604:	bf00      	nop
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007616:	2180      	movs	r1, #128	; 0x80
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fe17 	bl	800824c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800761e:	2100      	movs	r1, #0
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fe13 	bl	800824c <USBD_LL_StallEP>
}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b086      	sub	sp, #24
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d036      	beq.n	80076b2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007648:	6938      	ldr	r0, [r7, #16]
 800764a:	f000 f836 	bl	80076ba <USBD_GetLen>
 800764e:	4603      	mov	r3, r0
 8007650:	3301      	adds	r3, #1
 8007652:	b29b      	uxth	r3, r3
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	4413      	add	r3, r2
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	7812      	ldrb	r2, [r2, #0]
 8007666:	701a      	strb	r2, [r3, #0]
  idx++;
 8007668:	7dfb      	ldrb	r3, [r7, #23]
 800766a:	3301      	adds	r3, #1
 800766c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800766e:	7dfb      	ldrb	r3, [r7, #23]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	4413      	add	r3, r2
 8007674:	2203      	movs	r2, #3
 8007676:	701a      	strb	r2, [r3, #0]
  idx++;
 8007678:	7dfb      	ldrb	r3, [r7, #23]
 800767a:	3301      	adds	r3, #1
 800767c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800767e:	e013      	b.n	80076a8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	4413      	add	r3, r2
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	7812      	ldrb	r2, [r2, #0]
 800768a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	3301      	adds	r3, #1
 8007690:	613b      	str	r3, [r7, #16]
    idx++;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
 8007694:	3301      	adds	r3, #1
 8007696:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	4413      	add	r3, r2
 800769e:	2200      	movs	r2, #0
 80076a0:	701a      	strb	r2, [r3, #0]
    idx++;
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
 80076a4:	3301      	adds	r3, #1
 80076a6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e7      	bne.n	8007680 <USBD_GetString+0x52>
 80076b0:	e000      	b.n	80076b4 <USBD_GetString+0x86>
    return;
 80076b2:	bf00      	nop
  }
}
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80076ca:	e005      	b.n	80076d8 <USBD_GetLen+0x1e>
  {
    len++;
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
 80076ce:	3301      	adds	r3, #1
 80076d0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	3301      	adds	r3, #1
 80076d6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1f5      	bne.n	80076cc <USBD_GetLen+0x12>
  }

  return len;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3714      	adds	r7, #20
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b084      	sub	sp, #16
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2202      	movs	r2, #2
 80076fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	2100      	movs	r1, #0
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fe22 	bl	800835e <USBD_LL_Transmit>

  return USBD_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	2100      	movs	r1, #0
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fe11 	bl	800835e <USBD_LL_Transmit>

  return USBD_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2203      	movs	r2, #3
 8007756:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	2100      	movs	r1, #0
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 fe15 	bl	80083a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	2100      	movs	r1, #0
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 fe04 	bl	80083a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2204      	movs	r2, #4
 80077ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077b2:	2300      	movs	r3, #0
 80077b4:	2200      	movs	r2, #0
 80077b6:	2100      	movs	r1, #0
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fdd0 	bl	800835e <USBD_LL_Transmit>

  return USBD_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2205      	movs	r2, #5
 80077d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077d8:	2300      	movs	r3, #0
 80077da:	2200      	movs	r2, #0
 80077dc:	2100      	movs	r1, #0
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fdde 	bl	80083a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80077f4:	2200      	movs	r2, #0
 80077f6:	4912      	ldr	r1, [pc, #72]	; (8007840 <MX_USB_DEVICE_Init+0x50>)
 80077f8:	4812      	ldr	r0, [pc, #72]	; (8007844 <MX_USB_DEVICE_Init+0x54>)
 80077fa:	f7fe fef3 	bl	80065e4 <USBD_Init>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007804:	f7f9 f9e8 	bl	8000bd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007808:	490f      	ldr	r1, [pc, #60]	; (8007848 <MX_USB_DEVICE_Init+0x58>)
 800780a:	480e      	ldr	r0, [pc, #56]	; (8007844 <MX_USB_DEVICE_Init+0x54>)
 800780c:	f7fe ff20 	bl	8006650 <USBD_RegisterClass>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007816:	f7f9 f9df 	bl	8000bd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800781a:	490c      	ldr	r1, [pc, #48]	; (800784c <MX_USB_DEVICE_Init+0x5c>)
 800781c:	4809      	ldr	r0, [pc, #36]	; (8007844 <MX_USB_DEVICE_Init+0x54>)
 800781e:	f7fe fe45 	bl	80064ac <USBD_CDC_RegisterInterface>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007828:	f7f9 f9d6 	bl	8000bd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800782c:	4805      	ldr	r0, [pc, #20]	; (8007844 <MX_USB_DEVICE_Init+0x54>)
 800782e:	f7fe ff30 	bl	8006692 <USBD_Start>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007838:	f7f9 f9ce 	bl	8000bd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800783c:	bf00      	nop
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000130 	.word	0x20000130
 8007844:	200083a4 	.word	0x200083a4
 8007848:	20000018 	.word	0x20000018
 800784c:	2000011c 	.word	0x2000011c

08007850 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007854:	2200      	movs	r2, #0
 8007856:	4905      	ldr	r1, [pc, #20]	; (800786c <CDC_Init_FS+0x1c>)
 8007858:	4805      	ldr	r0, [pc, #20]	; (8007870 <CDC_Init_FS+0x20>)
 800785a:	f7fe fe3c 	bl	80064d6 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800785e:	4905      	ldr	r1, [pc, #20]	; (8007874 <CDC_Init_FS+0x24>)
 8007860:	4803      	ldr	r0, [pc, #12]	; (8007870 <CDC_Init_FS+0x20>)
 8007862:	f7fe fe51 	bl	8006508 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8007866:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007868:	4618      	mov	r0, r3
 800786a:	bd80      	pop	{r7, pc}
 800786c:	200086f4 	.word	0x200086f4
 8007870:	200083a4 	.word	0x200083a4
 8007874:	20008674 	.word	0x20008674

08007878 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007878:	b480      	push	{r7}
 800787a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800787c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800787e:	4618      	mov	r0, r3
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	6039      	str	r1, [r7, #0]
 8007892:	71fb      	strb	r3, [r7, #7]
 8007894:	4613      	mov	r3, r2
 8007896:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 8007898:	79fb      	ldrb	r3, [r7, #7]
 800789a:	2b23      	cmp	r3, #35	; 0x23
 800789c:	d866      	bhi.n	800796c <CDC_Control_FS+0xe4>
 800789e:	a201      	add	r2, pc, #4	; (adr r2, 80078a4 <CDC_Control_FS+0x1c>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	0800796d 	.word	0x0800796d
 80078a8:	0800796d 	.word	0x0800796d
 80078ac:	0800796d 	.word	0x0800796d
 80078b0:	0800796d 	.word	0x0800796d
 80078b4:	0800796d 	.word	0x0800796d
 80078b8:	0800796d 	.word	0x0800796d
 80078bc:	0800796d 	.word	0x0800796d
 80078c0:	0800796d 	.word	0x0800796d
 80078c4:	0800796d 	.word	0x0800796d
 80078c8:	0800796d 	.word	0x0800796d
 80078cc:	0800796d 	.word	0x0800796d
 80078d0:	0800796d 	.word	0x0800796d
 80078d4:	0800796d 	.word	0x0800796d
 80078d8:	0800796d 	.word	0x0800796d
 80078dc:	0800796d 	.word	0x0800796d
 80078e0:	0800796d 	.word	0x0800796d
 80078e4:	0800796d 	.word	0x0800796d
 80078e8:	0800796d 	.word	0x0800796d
 80078ec:	0800796d 	.word	0x0800796d
 80078f0:	0800796d 	.word	0x0800796d
 80078f4:	0800796d 	.word	0x0800796d
 80078f8:	0800796d 	.word	0x0800796d
 80078fc:	0800796d 	.word	0x0800796d
 8007900:	0800796d 	.word	0x0800796d
 8007904:	0800796d 	.word	0x0800796d
 8007908:	0800796d 	.word	0x0800796d
 800790c:	0800796d 	.word	0x0800796d
 8007910:	0800796d 	.word	0x0800796d
 8007914:	0800796d 	.word	0x0800796d
 8007918:	0800796d 	.word	0x0800796d
 800791c:	0800796d 	.word	0x0800796d
 8007920:	0800796d 	.word	0x0800796d
 8007924:	0800796d 	.word	0x0800796d
 8007928:	0800796d 	.word	0x0800796d
 800792c:	08007935 	.word	0x08007935
 8007930:	0800796d 	.word	0x0800796d

		break;

	case CDC_SET_CONTROL_LINE_STATE:
	{
		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	60fb      	str	r3, [r7, #12]
		if ((req->wValue & 0x0001) != 0)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	885b      	ldrh	r3, [r3, #2]
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d009      	beq.n	8007958 <CDC_Control_FS+0xd0>
		{
			HOST_PORT_COM_OPEN = 1;
 8007944:	4b0c      	ldr	r3, [pc, #48]	; (8007978 <CDC_Control_FS+0xf0>)
 8007946:	2201      	movs	r2, #1
 8007948:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800794a:	2201      	movs	r2, #1
 800794c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007950:	480a      	ldr	r0, [pc, #40]	; (800797c <CDC_Control_FS+0xf4>)
 8007952:	f7fa f9e1 	bl	8001d18 <HAL_GPIO_WritePin>
		else
		{
			HOST_PORT_COM_OPEN = 0;
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
		}
		break;
 8007956:	e00a      	b.n	800796e <CDC_Control_FS+0xe6>
			HOST_PORT_COM_OPEN = 0;
 8007958:	4b07      	ldr	r3, [pc, #28]	; (8007978 <CDC_Control_FS+0xf0>)
 800795a:	2200      	movs	r2, #0
 800795c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800795e:	2200      	movs	r2, #0
 8007960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007964:	4805      	ldr	r0, [pc, #20]	; (800797c <CDC_Control_FS+0xf4>)
 8007966:	f7fa f9d7 	bl	8001d18 <HAL_GPIO_WritePin>
		break;
 800796a:	e000      	b.n	800796e <CDC_Control_FS+0xe6>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800796c:	bf00      	nop
	}

	return (USBD_OK);
 800796e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20000205 	.word	0x20000205
 800797c:	40020c00 	.word	0x40020c00

08007980 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
	static uint8_t txLen;
	static uint8_t rxLen;
	static uint8_t RX_Buf_Temp[APP_RX_DATA_SIZE];

	/* Get data from serial com */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	4851      	ldr	r0, [pc, #324]	; (8007ad4 <CDC_Receive_FS+0x154>)
 800798e:	f7fe fdbb 	bl	8006508 <USBD_CDC_SetRxBuffer>
	if (USBD_CDC_ReceivePacket(&hUsbDeviceFS) != USBD_OK)
 8007992:	4850      	ldr	r0, [pc, #320]	; (8007ad4 <CDC_Receive_FS+0x154>)
 8007994:	f7fe fdfc 	bl	8006590 <USBD_CDC_ReceivePacket>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <CDC_Receive_FS+0x22>
	{
		return (USBD_BUSY);
 800799e:	2301      	movs	r3, #1
 80079a0:	e093      	b.n	8007aca <CDC_Receive_FS+0x14a>
	}

	for (uint8_t i = 0; i < (*Len); i++)
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]
 80079a6:	e07a      	b.n	8007a9e <CDC_Receive_FS+0x11e>
	{

		/* Avoid buffer overflow */
		if (txLen == APP_TX_DATA_SIZE)
 80079a8:	4b4b      	ldr	r3, [pc, #300]	; (8007ad8 <CDC_Receive_FS+0x158>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b80      	cmp	r3, #128	; 0x80
 80079ae:	d102      	bne.n	80079b6 <CDC_Receive_FS+0x36>
		{
			txLen = 0;
 80079b0:	4b49      	ldr	r3, [pc, #292]	; (8007ad8 <CDC_Receive_FS+0x158>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	701a      	strb	r2, [r3, #0]
		}
		if (rxLen == APP_RX_DATA_SIZE)
 80079b6:	4b49      	ldr	r3, [pc, #292]	; (8007adc <CDC_Receive_FS+0x15c>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	2b80      	cmp	r3, #128	; 0x80
 80079bc:	d102      	bne.n	80079c4 <CDC_Receive_FS+0x44>
		{
			rxLen = 0;
 80079be:	4b47      	ldr	r3, [pc, #284]	; (8007adc <CDC_Receive_FS+0x15c>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
		}

		/* If Backspace key: clear the last char */
		if ((UserTxBufferFS[txLen++] = Buf[i]) == '\b')
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	441a      	add	r2, r3
 80079ca:	4b43      	ldr	r3, [pc, #268]	; (8007ad8 <CDC_Receive_FS+0x158>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	1c59      	adds	r1, r3, #1
 80079d0:	b2c8      	uxtb	r0, r1
 80079d2:	4941      	ldr	r1, [pc, #260]	; (8007ad8 <CDC_Receive_FS+0x158>)
 80079d4:	7008      	strb	r0, [r1, #0]
 80079d6:	7811      	ldrb	r1, [r2, #0]
 80079d8:	4a41      	ldr	r2, [pc, #260]	; (8007ae0 <CDC_Receive_FS+0x160>)
 80079da:	54d1      	strb	r1, [r2, r3]
 80079dc:	4a40      	ldr	r2, [pc, #256]	; (8007ae0 <CDC_Receive_FS+0x160>)
 80079de:	5cd3      	ldrb	r3, [r2, r3]
 80079e0:	2b08      	cmp	r3, #8
 80079e2:	d11e      	bne.n	8007a22 <CDC_Receive_FS+0xa2>
		{
			UserTxBufferFS[txLen++] = ' ';
 80079e4:	4b3c      	ldr	r3, [pc, #240]	; (8007ad8 <CDC_Receive_FS+0x158>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	1c5a      	adds	r2, r3, #1
 80079ea:	b2d1      	uxtb	r1, r2
 80079ec:	4a3a      	ldr	r2, [pc, #232]	; (8007ad8 <CDC_Receive_FS+0x158>)
 80079ee:	7011      	strb	r1, [r2, #0]
 80079f0:	461a      	mov	r2, r3
 80079f2:	4b3b      	ldr	r3, [pc, #236]	; (8007ae0 <CDC_Receive_FS+0x160>)
 80079f4:	2120      	movs	r1, #32
 80079f6:	5499      	strb	r1, [r3, r2]
			UserTxBufferFS[txLen++] = '\b';
 80079f8:	4b37      	ldr	r3, [pc, #220]	; (8007ad8 <CDC_Receive_FS+0x158>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	1c5a      	adds	r2, r3, #1
 80079fe:	b2d1      	uxtb	r1, r2
 8007a00:	4a35      	ldr	r2, [pc, #212]	; (8007ad8 <CDC_Receive_FS+0x158>)
 8007a02:	7011      	strb	r1, [r2, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	4b36      	ldr	r3, [pc, #216]	; (8007ae0 <CDC_Receive_FS+0x160>)
 8007a08:	2108      	movs	r1, #8
 8007a0a:	5499      	strb	r1, [r3, r2]
			if (rxLen)
 8007a0c:	4b33      	ldr	r3, [pc, #204]	; (8007adc <CDC_Receive_FS+0x15c>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d041      	beq.n	8007a98 <CDC_Receive_FS+0x118>
			{
				rxLen--;
 8007a14:	4b31      	ldr	r3, [pc, #196]	; (8007adc <CDC_Receive_FS+0x15c>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	4b2f      	ldr	r3, [pc, #188]	; (8007adc <CDC_Receive_FS+0x15c>)
 8007a1e:	701a      	strb	r2, [r3, #0]
 8007a20:	e03a      	b.n	8007a98 <CDC_Receive_FS+0x118>
			}
		}
		/* Else if Enter key: add a \n to terminal and extract output buffer */
		else if (Buf[i] == '\r' || Buf[i] == '\0')
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	4413      	add	r3, r2
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b0d      	cmp	r3, #13
 8007a2c:	d005      	beq.n	8007a3a <CDC_Receive_FS+0xba>
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	4413      	add	r3, r2
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d121      	bne.n	8007a7e <CDC_Receive_FS+0xfe>
		{
			UserTxBufferFS[txLen++] = '\n';
 8007a3a:	4b27      	ldr	r3, [pc, #156]	; (8007ad8 <CDC_Receive_FS+0x158>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	b2d1      	uxtb	r1, r2
 8007a42:	4a25      	ldr	r2, [pc, #148]	; (8007ad8 <CDC_Receive_FS+0x158>)
 8007a44:	7011      	strb	r1, [r2, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	4b25      	ldr	r3, [pc, #148]	; (8007ae0 <CDC_Receive_FS+0x160>)
 8007a4a:	210a      	movs	r1, #10
 8007a4c:	5499      	strb	r1, [r3, r2]
			RX_Buf_Temp[rxLen++] = '\0';
 8007a4e:	4b23      	ldr	r3, [pc, #140]	; (8007adc <CDC_Receive_FS+0x15c>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	b2d1      	uxtb	r1, r2
 8007a56:	4a21      	ldr	r2, [pc, #132]	; (8007adc <CDC_Receive_FS+0x15c>)
 8007a58:	7011      	strb	r1, [r2, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	4b21      	ldr	r3, [pc, #132]	; (8007ae4 <CDC_Receive_FS+0x164>)
 8007a5e:	2100      	movs	r1, #0
 8007a60:	5499      	strb	r1, [r3, r2]
			memcpy(UserRxBufferFS, RX_Buf_Temp, rxLen);
 8007a62:	4b1e      	ldr	r3, [pc, #120]	; (8007adc <CDC_Receive_FS+0x15c>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	491e      	ldr	r1, [pc, #120]	; (8007ae4 <CDC_Receive_FS+0x164>)
 8007a6a:	481f      	ldr	r0, [pc, #124]	; (8007ae8 <CDC_Receive_FS+0x168>)
 8007a6c:	f000 fd32 	bl	80084d4 <memcpy>
			CDC_RX_DATA_INWAIT = 1;
 8007a70:	4b1e      	ldr	r3, [pc, #120]	; (8007aec <CDC_Receive_FS+0x16c>)
 8007a72:	2201      	movs	r2, #1
 8007a74:	701a      	strb	r2, [r3, #0]
			rxLen = 0;
 8007a76:	4b19      	ldr	r3, [pc, #100]	; (8007adc <CDC_Receive_FS+0x15c>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e00c      	b.n	8007a98 <CDC_Receive_FS+0x118>
		}
		/* Else only copy data */
		else
		{
			RX_Buf_Temp[rxLen++] = Buf[i];
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	441a      	add	r2, r3
 8007a84:	4b15      	ldr	r3, [pc, #84]	; (8007adc <CDC_Receive_FS+0x15c>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	1c59      	adds	r1, r3, #1
 8007a8a:	b2c8      	uxtb	r0, r1
 8007a8c:	4913      	ldr	r1, [pc, #76]	; (8007adc <CDC_Receive_FS+0x15c>)
 8007a8e:	7008      	strb	r0, [r1, #0]
 8007a90:	4619      	mov	r1, r3
 8007a92:	7812      	ldrb	r2, [r2, #0]
 8007a94:	4b13      	ldr	r3, [pc, #76]	; (8007ae4 <CDC_Receive_FS+0x164>)
 8007a96:	545a      	strb	r2, [r3, r1]
	for (uint8_t i = 0; i < (*Len); i++)
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	73fb      	strb	r3, [r7, #15]
 8007a9e:	7bfa      	ldrb	r2, [r7, #15]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	f4ff af7f 	bcc.w	80079a8 <CDC_Receive_FS+0x28>
		}
	}

	/* Send result to terminal */
	if (CDC_Transmit_FS(UserTxBufferFS, txLen) == USBD_OK)
 8007aaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <CDC_Receive_FS+0x158>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	480b      	ldr	r0, [pc, #44]	; (8007ae0 <CDC_Receive_FS+0x160>)
 8007ab4:	f000 f81c 	bl	8007af0 <CDC_Transmit_FS>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d104      	bne.n	8007ac8 <CDC_Receive_FS+0x148>
	{
		txLen = 0;
 8007abe:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <CDC_Receive_FS+0x158>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		return (USBD_BUSY);
	}
	return (USBD_OK);
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e000      	b.n	8007aca <CDC_Receive_FS+0x14a>
		return (USBD_BUSY);
 8007ac8:	2301      	movs	r3, #1
  /* USER CODE END 6 */
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200083a4 	.word	0x200083a4
 8007ad8:	20000207 	.word	0x20000207
 8007adc:	20000208 	.word	0x20000208
 8007ae0:	200086f4 	.word	0x200086f4
 8007ae4:	2000020c 	.word	0x2000020c
 8007ae8:	20008674 	.word	0x20008674
 8007aec:	20000206 	.word	0x20000206

08007af0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8007b00:	4b0e      	ldr	r3, [pc, #56]	; (8007b3c <CDC_Transmit_FS+0x4c>)
 8007b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b06:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e00e      	b.n	8007b34 <CDC_Transmit_FS+0x44>
	}

	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b16:	887b      	ldrh	r3, [r7, #2]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6879      	ldr	r1, [r7, #4]
 8007b1c:	4807      	ldr	r0, [pc, #28]	; (8007b3c <CDC_Transmit_FS+0x4c>)
 8007b1e:	f7fe fcda 	bl	80064d6 <USBD_CDC_SetTxBuffer>

	if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK)
 8007b22:	4806      	ldr	r0, [pc, #24]	; (8007b3c <CDC_Transmit_FS+0x4c>)
 8007b24:	f7fe fd04 	bl	8006530 <USBD_CDC_TransmitPacket>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <CDC_Transmit_FS+0x42>
	{
		return USBD_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e000      	b.n	8007b34 <CDC_Transmit_FS+0x44>
	}
	else
	{
		return USBD_BUSY;
 8007b32:	2301      	movs	r3, #1
	}

  /* USER CODE END 7 */
  return result;
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	200083a4 	.word	0x200083a4

08007b40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
	...

08007b64 <CDC_Printf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_Printf(const char *format, ...)
{
 8007b64:	b40f      	push	{r0, r1, r2, r3}
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b082      	sub	sp, #8
 8007b6a:	af00      	add	r7, sp, #0
	if (HOST_PORT_COM_OPEN)
 8007b6c:	4b0f      	ldr	r3, [pc, #60]	; (8007bac <CDC_Printf+0x48>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d013      	beq.n	8007b9c <CDC_Printf+0x38>
	{
		/* Format the string */
		va_list arg;
		va_start(arg, format);
 8007b74:	f107 0314 	add.w	r3, r7, #20
 8007b78:	607b      	str	r3, [r7, #4]
		vsprintf((char*) UserTxBufferFS, format, arg);
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6939      	ldr	r1, [r7, #16]
 8007b7e:	480c      	ldr	r0, [pc, #48]	; (8007bb0 <CDC_Printf+0x4c>)
 8007b80:	f000 fd8a 	bl	8008698 <vsiprintf>
		va_end(arg);

		/* Transmit the buffer through serial communication */
		CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS));
 8007b84:	480a      	ldr	r0, [pc, #40]	; (8007bb0 <CDC_Printf+0x4c>)
 8007b86:	f7f8 fb23 	bl	80001d0 <strlen>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4807      	ldr	r0, [pc, #28]	; (8007bb0 <CDC_Printf+0x4c>)
 8007b92:	f7ff ffad 	bl	8007af0 <CDC_Transmit_FS>
		HAL_Delay(1);
 8007b96:	2001      	movs	r0, #1
 8007b98:	f7f9 fa6a 	bl	8001070 <HAL_Delay>
	}
}
 8007b9c:	bf00      	nop
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ba6:	b004      	add	sp, #16
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	20000205 	.word	0x20000205
 8007bb0:	200086f4 	.word	0x200086f4

08007bb4 <CDC_SpinWheels>:
		CDC_RX_DATA_INWAIT = 0;
	}
}

void CDC_SpinWheels(char * str)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	if (HOST_PORT_COM_OPEN)
 8007bbc:	4b18      	ldr	r3, [pc, #96]	; (8007c20 <CDC_SpinWheels+0x6c>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d028      	beq.n	8007c16 <CDC_SpinWheels+0x62>
	{
		static uint8_t i;
		char w[5] = "-\\|/";
 8007bc4:	4a17      	ldr	r2, [pc, #92]	; (8007c24 <CDC_SpinWheels+0x70>)
 8007bc6:	f107 0308 	add.w	r3, r7, #8
 8007bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007bce:	6018      	str	r0, [r3, #0]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	7019      	strb	r1, [r3, #0]
		CDC_Printf("\r[ %c%c ] %s ", w[i], w[i], str);
 8007bd4:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <CDC_SpinWheels+0x74>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	f107 0210 	add.w	r2, r7, #16
 8007bdc:	4413      	add	r3, r2
 8007bde:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007be2:	4619      	mov	r1, r3
 8007be4:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <CDC_SpinWheels+0x74>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	f107 0210 	add.w	r2, r7, #16
 8007bec:	4413      	add	r3, r2
 8007bee:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	480d      	ldr	r0, [pc, #52]	; (8007c2c <CDC_SpinWheels+0x78>)
 8007bf8:	f7ff ffb4 	bl	8007b64 <CDC_Printf>
		i++;
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <CDC_SpinWheels+0x74>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	3301      	adds	r3, #1
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	4b08      	ldr	r3, [pc, #32]	; (8007c28 <CDC_SpinWheels+0x74>)
 8007c06:	701a      	strb	r2, [r3, #0]
		i = i%4;
 8007c08:	4b07      	ldr	r3, [pc, #28]	; (8007c28 <CDC_SpinWheels+0x74>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f003 0303 	and.w	r3, r3, #3
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <CDC_SpinWheels+0x74>)
 8007c14:	701a      	strb	r2, [r3, #0]
	}
}
 8007c16:	bf00      	nop
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000205 	.word	0x20000205
 8007c24:	08008db4 	.word	0x08008db4
 8007c28:	2000028c 	.word	0x2000028c
 8007c2c:	08008da4 	.word	0x08008da4

08007c30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	6039      	str	r1, [r7, #0]
 8007c3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2212      	movs	r2, #18
 8007c40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c42:	4b03      	ldr	r3, [pc, #12]	; (8007c50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	2000014c 	.word	0x2000014c

08007c54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	6039      	str	r1, [r7, #0]
 8007c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2204      	movs	r2, #4
 8007c64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c66:	4b03      	ldr	r3, [pc, #12]	; (8007c74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	20000160 	.word	0x20000160

08007c78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6039      	str	r1, [r7, #0]
 8007c82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	4907      	ldr	r1, [pc, #28]	; (8007cac <USBD_FS_ProductStrDescriptor+0x34>)
 8007c8e:	4808      	ldr	r0, [pc, #32]	; (8007cb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c90:	f7ff fccd 	bl	800762e <USBD_GetString>
 8007c94:	e004      	b.n	8007ca0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	4904      	ldr	r1, [pc, #16]	; (8007cac <USBD_FS_ProductStrDescriptor+0x34>)
 8007c9a:	4805      	ldr	r0, [pc, #20]	; (8007cb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c9c:	f7ff fcc7 	bl	800762e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ca0:	4b02      	ldr	r3, [pc, #8]	; (8007cac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20008774 	.word	0x20008774
 8007cb0:	08008dbc 	.word	0x08008dbc

08007cb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	6039      	str	r1, [r7, #0]
 8007cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	4904      	ldr	r1, [pc, #16]	; (8007cd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007cc4:	4804      	ldr	r0, [pc, #16]	; (8007cd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007cc6:	f7ff fcb2 	bl	800762e <USBD_GetString>
  return USBD_StrDesc;
 8007cca:	4b02      	ldr	r3, [pc, #8]	; (8007cd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	20008774 	.word	0x20008774
 8007cd8:	08008dd4 	.word	0x08008dd4

08007cdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	6039      	str	r1, [r7, #0]
 8007ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	221a      	movs	r2, #26
 8007cec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007cee:	f000 f843 	bl	8007d78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007cf2:	4b02      	ldr	r3, [pc, #8]	; (8007cfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20000164 	.word	0x20000164

08007d00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	6039      	str	r1, [r7, #0]
 8007d0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d105      	bne.n	8007d1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	4907      	ldr	r1, [pc, #28]	; (8007d34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d16:	4808      	ldr	r0, [pc, #32]	; (8007d38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d18:	f7ff fc89 	bl	800762e <USBD_GetString>
 8007d1c:	e004      	b.n	8007d28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	4904      	ldr	r1, [pc, #16]	; (8007d34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d22:	4805      	ldr	r0, [pc, #20]	; (8007d38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d24:	f7ff fc83 	bl	800762e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d28:	4b02      	ldr	r3, [pc, #8]	; (8007d34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20008774 	.word	0x20008774
 8007d38:	08008de8 	.word	0x08008de8

08007d3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4603      	mov	r3, r0
 8007d44:	6039      	str	r1, [r7, #0]
 8007d46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d48:	79fb      	ldrb	r3, [r7, #7]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d105      	bne.n	8007d5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	4907      	ldr	r1, [pc, #28]	; (8007d70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d52:	4808      	ldr	r0, [pc, #32]	; (8007d74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d54:	f7ff fc6b 	bl	800762e <USBD_GetString>
 8007d58:	e004      	b.n	8007d64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	4904      	ldr	r1, [pc, #16]	; (8007d70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d5e:	4805      	ldr	r0, [pc, #20]	; (8007d74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d60:	f7ff fc65 	bl	800762e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d64:	4b02      	ldr	r3, [pc, #8]	; (8007d70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20008774 	.word	0x20008774
 8007d74:	08008df4 	.word	0x08008df4

08007d78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d7e:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <Get_SerialNum+0x44>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d84:	4b0e      	ldr	r3, [pc, #56]	; (8007dc0 <Get_SerialNum+0x48>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d8a:	4b0e      	ldr	r3, [pc, #56]	; (8007dc4 <Get_SerialNum+0x4c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4413      	add	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d009      	beq.n	8007db2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d9e:	2208      	movs	r2, #8
 8007da0:	4909      	ldr	r1, [pc, #36]	; (8007dc8 <Get_SerialNum+0x50>)
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 f814 	bl	8007dd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007da8:	2204      	movs	r2, #4
 8007daa:	4908      	ldr	r1, [pc, #32]	; (8007dcc <Get_SerialNum+0x54>)
 8007dac:	68b8      	ldr	r0, [r7, #8]
 8007dae:	f000 f80f 	bl	8007dd0 <IntToUnicode>
  }
}
 8007db2:	bf00      	nop
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	1fff7a10 	.word	0x1fff7a10
 8007dc0:	1fff7a14 	.word	0x1fff7a14
 8007dc4:	1fff7a18 	.word	0x1fff7a18
 8007dc8:	20000166 	.word	0x20000166
 8007dcc:	20000176 	.word	0x20000176

08007dd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007de2:	2300      	movs	r3, #0
 8007de4:	75fb      	strb	r3, [r7, #23]
 8007de6:	e027      	b.n	8007e38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	0f1b      	lsrs	r3, r3, #28
 8007dec:	2b09      	cmp	r3, #9
 8007dee:	d80b      	bhi.n	8007e08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	0f1b      	lsrs	r3, r3, #28
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	440b      	add	r3, r1
 8007e00:	3230      	adds	r2, #48	; 0x30
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e00a      	b.n	8007e1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	0f1b      	lsrs	r3, r3, #28
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	4619      	mov	r1, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	440b      	add	r3, r1
 8007e18:	3237      	adds	r2, #55	; 0x37
 8007e1a:	b2d2      	uxtb	r2, r2
 8007e1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	011b      	lsls	r3, r3, #4
 8007e22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	3301      	adds	r3, #1
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	3301      	adds	r3, #1
 8007e36:	75fb      	strb	r3, [r7, #23]
 8007e38:	7dfa      	ldrb	r2, [r7, #23]
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d3d3      	bcc.n	8007de8 <IntToUnicode+0x18>
  }
}
 8007e40:	bf00      	nop
 8007e42:	371c      	adds	r7, #28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08a      	sub	sp, #40	; 0x28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e54:	f107 0314 	add.w	r3, r7, #20
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	605a      	str	r2, [r3, #4]
 8007e5e:	609a      	str	r2, [r3, #8]
 8007e60:	60da      	str	r2, [r3, #12]
 8007e62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e6c:	d147      	bne.n	8007efe <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e6e:	2300      	movs	r3, #0
 8007e70:	613b      	str	r3, [r7, #16]
 8007e72:	4b25      	ldr	r3, [pc, #148]	; (8007f08 <HAL_PCD_MspInit+0xbc>)
 8007e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e76:	4a24      	ldr	r2, [pc, #144]	; (8007f08 <HAL_PCD_MspInit+0xbc>)
 8007e78:	f043 0301 	orr.w	r3, r3, #1
 8007e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e7e:	4b22      	ldr	r3, [pc, #136]	; (8007f08 <HAL_PCD_MspInit+0xbc>)
 8007e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	613b      	str	r3, [r7, #16]
 8007e88:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e94:	2300      	movs	r3, #0
 8007e96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e98:	f107 0314 	add.w	r3, r7, #20
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	481b      	ldr	r0, [pc, #108]	; (8007f0c <HAL_PCD_MspInit+0xc0>)
 8007ea0:	f7f9 fd88 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007ea4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eaa:	2302      	movs	r3, #2
 8007eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007eb6:	230a      	movs	r3, #10
 8007eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eba:	f107 0314 	add.w	r3, r7, #20
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4812      	ldr	r0, [pc, #72]	; (8007f0c <HAL_PCD_MspInit+0xc0>)
 8007ec2:	f7f9 fd77 	bl	80019b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ec6:	4b10      	ldr	r3, [pc, #64]	; (8007f08 <HAL_PCD_MspInit+0xbc>)
 8007ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eca:	4a0f      	ldr	r2, [pc, #60]	; (8007f08 <HAL_PCD_MspInit+0xbc>)
 8007ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed0:	6353      	str	r3, [r2, #52]	; 0x34
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <HAL_PCD_MspInit+0xbc>)
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eda:	4a0b      	ldr	r2, [pc, #44]	; (8007f08 <HAL_PCD_MspInit+0xbc>)
 8007edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8007ee2:	4b09      	ldr	r3, [pc, #36]	; (8007f08 <HAL_PCD_MspInit+0xbc>)
 8007ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	2043      	movs	r0, #67	; 0x43
 8007ef4:	f7f9 f9b9 	bl	800126a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ef8:	2043      	movs	r0, #67	; 0x43
 8007efa:	f7f9 f9d2 	bl	80012a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007efe:	bf00      	nop
 8007f00:	3728      	adds	r7, #40	; 0x28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	40023800 	.word	0x40023800
 8007f0c:	40020000 	.word	0x40020000

08007f10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f24:	4619      	mov	r1, r3
 8007f26:	4610      	mov	r0, r2
 8007f28:	f7fe fbfe 	bl	8006728 <USBD_LL_SetupStage>
}
 8007f2c:	bf00      	nop
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007f46:	78fa      	ldrb	r2, [r7, #3]
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	1a9b      	subs	r3, r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	f7fe fc36 	bl	80067ce <USBD_LL_DataOutStage>
}
 8007f62:	bf00      	nop
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	460b      	mov	r3, r1
 8007f74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007f7c:	78fa      	ldrb	r2, [r7, #3]
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	4613      	mov	r3, r2
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	1a9b      	subs	r3, r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	440b      	add	r3, r1
 8007f8a:	3348      	adds	r3, #72	; 0x48
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	4619      	mov	r1, r3
 8007f92:	f7fe fc7f 	bl	8006894 <USBD_LL_DataInStage>
}
 8007f96:	bf00      	nop
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe fd83 	bl	8006ab8 <USBD_LL_SOF>
}
 8007fb2:	bf00      	nop
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d102      	bne.n	8007fd4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]
 8007fd2:	e008      	b.n	8007fe6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d102      	bne.n	8007fe2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	73fb      	strb	r3, [r7, #15]
 8007fe0:	e001      	b.n	8007fe6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007fe2:	f7f8 fdf9 	bl	8000bd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fec:	7bfa      	ldrb	r2, [r7, #15]
 8007fee:	4611      	mov	r1, r2
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fe fd26 	bl	8006a42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fe fcdf 	bl	80069c0 <USBD_LL_Reset>
}
 8008002:	bf00      	nop
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800801a:	4618      	mov	r0, r3
 800801c:	f7fe fd21 	bl	8006a62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	6812      	ldr	r2, [r2, #0]
 800802e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008032:	f043 0301 	orr.w	r3, r3, #1
 8008036:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d005      	beq.n	800804c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008040:	4b04      	ldr	r3, [pc, #16]	; (8008054 <HAL_PCD_SuspendCallback+0x48>)
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	4a03      	ldr	r2, [pc, #12]	; (8008054 <HAL_PCD_SuspendCallback+0x48>)
 8008046:	f043 0306 	orr.w	r3, r3, #6
 800804a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	e000ed00 	.word	0xe000ed00

08008058 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008066:	4618      	mov	r0, r3
 8008068:	f7fe fd10 	bl	8006a8c <USBD_LL_Resume>
}
 800806c:	bf00      	nop
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008086:	78fa      	ldrb	r2, [r7, #3]
 8008088:	4611      	mov	r1, r2
 800808a:	4618      	mov	r0, r3
 800808c:	f7fe fd3b 	bl	8006b06 <USBD_LL_IsoOUTIncomplete>
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080aa:	78fa      	ldrb	r2, [r7, #3]
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fd1c 	bl	8006aec <USBD_LL_IsoINIncomplete>
}
 80080b4:	bf00      	nop
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe fd28 	bl	8006b20 <USBD_LL_DevConnected>
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe fd25 	bl	8006b36 <USBD_LL_DevDisconnected>
}
 80080ec:	bf00      	nop
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d13c      	bne.n	800817e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008104:	4a20      	ldr	r2, [pc, #128]	; (8008188 <USBD_LL_Init+0x94>)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a1e      	ldr	r2, [pc, #120]	; (8008188 <USBD_LL_Init+0x94>)
 8008110:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008114:	4b1c      	ldr	r3, [pc, #112]	; (8008188 <USBD_LL_Init+0x94>)
 8008116:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800811a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800811c:	4b1a      	ldr	r3, [pc, #104]	; (8008188 <USBD_LL_Init+0x94>)
 800811e:	2204      	movs	r2, #4
 8008120:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008122:	4b19      	ldr	r3, [pc, #100]	; (8008188 <USBD_LL_Init+0x94>)
 8008124:	2202      	movs	r2, #2
 8008126:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008128:	4b17      	ldr	r3, [pc, #92]	; (8008188 <USBD_LL_Init+0x94>)
 800812a:	2200      	movs	r2, #0
 800812c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800812e:	4b16      	ldr	r3, [pc, #88]	; (8008188 <USBD_LL_Init+0x94>)
 8008130:	2202      	movs	r2, #2
 8008132:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008134:	4b14      	ldr	r3, [pc, #80]	; (8008188 <USBD_LL_Init+0x94>)
 8008136:	2200      	movs	r2, #0
 8008138:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800813a:	4b13      	ldr	r3, [pc, #76]	; (8008188 <USBD_LL_Init+0x94>)
 800813c:	2200      	movs	r2, #0
 800813e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008140:	4b11      	ldr	r3, [pc, #68]	; (8008188 <USBD_LL_Init+0x94>)
 8008142:	2200      	movs	r2, #0
 8008144:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008146:	4b10      	ldr	r3, [pc, #64]	; (8008188 <USBD_LL_Init+0x94>)
 8008148:	2200      	movs	r2, #0
 800814a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800814c:	4b0e      	ldr	r3, [pc, #56]	; (8008188 <USBD_LL_Init+0x94>)
 800814e:	2200      	movs	r2, #0
 8008150:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008152:	480d      	ldr	r0, [pc, #52]	; (8008188 <USBD_LL_Init+0x94>)
 8008154:	f7fa fd1e 	bl	8002b94 <HAL_PCD_Init>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800815e:	f7f8 fd3b 	bl	8000bd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008162:	2180      	movs	r1, #128	; 0x80
 8008164:	4808      	ldr	r0, [pc, #32]	; (8008188 <USBD_LL_Init+0x94>)
 8008166:	f7fb fe7c 	bl	8003e62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800816a:	2240      	movs	r2, #64	; 0x40
 800816c:	2100      	movs	r1, #0
 800816e:	4806      	ldr	r0, [pc, #24]	; (8008188 <USBD_LL_Init+0x94>)
 8008170:	f7fb fe30 	bl	8003dd4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008174:	2280      	movs	r2, #128	; 0x80
 8008176:	2101      	movs	r1, #1
 8008178:	4803      	ldr	r0, [pc, #12]	; (8008188 <USBD_LL_Init+0x94>)
 800817a:	f7fb fe2b 	bl	8003dd4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	20008974 	.word	0x20008974

0800818c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fa fe13 	bl	8002dce <HAL_PCD_Start>
 80081a8:	4603      	mov	r3, r0
 80081aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 f92a 	bl	8008408 <USBD_Get_USB_Status>
 80081b4:	4603      	mov	r3, r0
 80081b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	4608      	mov	r0, r1
 80081cc:	4611      	mov	r1, r2
 80081ce:	461a      	mov	r2, r3
 80081d0:	4603      	mov	r3, r0
 80081d2:	70fb      	strb	r3, [r7, #3]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70bb      	strb	r3, [r7, #2]
 80081d8:	4613      	mov	r3, r2
 80081da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80081ea:	78bb      	ldrb	r3, [r7, #2]
 80081ec:	883a      	ldrh	r2, [r7, #0]
 80081ee:	78f9      	ldrb	r1, [r7, #3]
 80081f0:	f7fb f9f7 	bl	80035e2 <HAL_PCD_EP_Open>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 f904 	bl	8008408 <USBD_Get_USB_Status>
 8008200:	4603      	mov	r3, r0
 8008202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008204:	7bbb      	ldrb	r3, [r7, #14]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008228:	78fa      	ldrb	r2, [r7, #3]
 800822a:	4611      	mov	r1, r2
 800822c:	4618      	mov	r0, r3
 800822e:	f7fb fa40 	bl	80036b2 <HAL_PCD_EP_Close>
 8008232:	4603      	mov	r3, r0
 8008234:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	4618      	mov	r0, r3
 800823a:	f000 f8e5 	bl	8008408 <USBD_Get_USB_Status>
 800823e:	4603      	mov	r3, r0
 8008240:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008242:	7bbb      	ldrb	r3, [r7, #14]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008266:	78fa      	ldrb	r2, [r7, #3]
 8008268:	4611      	mov	r1, r2
 800826a:	4618      	mov	r0, r3
 800826c:	f7fb fb18 	bl	80038a0 <HAL_PCD_EP_SetStall>
 8008270:	4603      	mov	r3, r0
 8008272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008274:	7bfb      	ldrb	r3, [r7, #15]
 8008276:	4618      	mov	r0, r3
 8008278:	f000 f8c6 	bl	8008408 <USBD_Get_USB_Status>
 800827c:	4603      	mov	r3, r0
 800827e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008280:	7bbb      	ldrb	r3, [r7, #14]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082a4:	78fa      	ldrb	r2, [r7, #3]
 80082a6:	4611      	mov	r1, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fb fb5d 	bl	8003968 <HAL_PCD_EP_ClrStall>
 80082ae:	4603      	mov	r3, r0
 80082b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 f8a7 	bl	8008408 <USBD_Get_USB_Status>
 80082ba:	4603      	mov	r3, r0
 80082bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082be:	7bbb      	ldrb	r3, [r7, #14]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	da0b      	bge.n	80082fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082e4:	78fb      	ldrb	r3, [r7, #3]
 80082e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ea:	68f9      	ldr	r1, [r7, #12]
 80082ec:	4613      	mov	r3, r2
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	1a9b      	subs	r3, r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	440b      	add	r3, r1
 80082f6:	333e      	adds	r3, #62	; 0x3e
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	e00b      	b.n	8008314 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80082fc:	78fb      	ldrb	r3, [r7, #3]
 80082fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008302:	68f9      	ldr	r1, [r7, #12]
 8008304:	4613      	mov	r3, r2
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	1a9b      	subs	r3, r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	440b      	add	r3, r1
 800830e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008312:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800833a:	78fa      	ldrb	r2, [r7, #3]
 800833c:	4611      	mov	r1, r2
 800833e:	4618      	mov	r0, r3
 8008340:	f7fb f92a 	bl	8003598 <HAL_PCD_SetAddress>
 8008344:	4603      	mov	r3, r0
 8008346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	4618      	mov	r0, r3
 800834c:	f000 f85c 	bl	8008408 <USBD_Get_USB_Status>
 8008350:	4603      	mov	r3, r0
 8008352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008354:	7bbb      	ldrb	r3, [r7, #14]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b086      	sub	sp, #24
 8008362:	af00      	add	r7, sp, #0
 8008364:	60f8      	str	r0, [r7, #12]
 8008366:	607a      	str	r2, [r7, #4]
 8008368:	603b      	str	r3, [r7, #0]
 800836a:	460b      	mov	r3, r1
 800836c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800837c:	7af9      	ldrb	r1, [r7, #11]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	f7fb fa43 	bl	800380c <HAL_PCD_EP_Transmit>
 8008386:	4603      	mov	r3, r0
 8008388:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800838a:	7dfb      	ldrb	r3, [r7, #23]
 800838c:	4618      	mov	r0, r3
 800838e:	f000 f83b 	bl	8008408 <USBD_Get_USB_Status>
 8008392:	4603      	mov	r3, r0
 8008394:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008396:	7dbb      	ldrb	r3, [r7, #22]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	607a      	str	r2, [r7, #4]
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	460b      	mov	r3, r1
 80083ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083be:	7af9      	ldrb	r1, [r7, #11]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	f7fb f9bf 	bl	8003746 <HAL_PCD_EP_Receive>
 80083c8:	4603      	mov	r3, r0
 80083ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 f81a 	bl	8008408 <USBD_Get_USB_Status>
 80083d4:	4603      	mov	r3, r0
 80083d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	460b      	mov	r3, r1
 80083ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083f4:	78fa      	ldrb	r2, [r7, #3]
 80083f6:	4611      	mov	r1, r2
 80083f8:	4618      	mov	r0, r3
 80083fa:	f7fb f9ef 	bl	80037dc <HAL_PCD_EP_GetRxCount>
 80083fe:	4603      	mov	r3, r0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	2b03      	cmp	r3, #3
 800841a:	d817      	bhi.n	800844c <USBD_Get_USB_Status+0x44>
 800841c:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <USBD_Get_USB_Status+0x1c>)
 800841e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008422:	bf00      	nop
 8008424:	08008435 	.word	0x08008435
 8008428:	0800843b 	.word	0x0800843b
 800842c:	08008441 	.word	0x08008441
 8008430:	08008447 	.word	0x08008447
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]
    break;
 8008438:	e00b      	b.n	8008452 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800843a:	2303      	movs	r3, #3
 800843c:	73fb      	strb	r3, [r7, #15]
    break;
 800843e:	e008      	b.n	8008452 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008440:	2301      	movs	r3, #1
 8008442:	73fb      	strb	r3, [r7, #15]
    break;
 8008444:	e005      	b.n	8008452 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008446:	2303      	movs	r3, #3
 8008448:	73fb      	strb	r3, [r7, #15]
    break;
 800844a:	e002      	b.n	8008452 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800844c:	2303      	movs	r3, #3
 800844e:	73fb      	strb	r3, [r7, #15]
    break;
 8008450:	bf00      	nop
  }
  return usb_status;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <__errno>:
 8008460:	4b01      	ldr	r3, [pc, #4]	; (8008468 <__errno+0x8>)
 8008462:	6818      	ldr	r0, [r3, #0]
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	20000180 	.word	0x20000180

0800846c <__libc_init_array>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	4e0d      	ldr	r6, [pc, #52]	; (80084a4 <__libc_init_array+0x38>)
 8008470:	4c0d      	ldr	r4, [pc, #52]	; (80084a8 <__libc_init_array+0x3c>)
 8008472:	1ba4      	subs	r4, r4, r6
 8008474:	10a4      	asrs	r4, r4, #2
 8008476:	2500      	movs	r5, #0
 8008478:	42a5      	cmp	r5, r4
 800847a:	d109      	bne.n	8008490 <__libc_init_array+0x24>
 800847c:	4e0b      	ldr	r6, [pc, #44]	; (80084ac <__libc_init_array+0x40>)
 800847e:	4c0c      	ldr	r4, [pc, #48]	; (80084b0 <__libc_init_array+0x44>)
 8008480:	f000 fc38 	bl	8008cf4 <_init>
 8008484:	1ba4      	subs	r4, r4, r6
 8008486:	10a4      	asrs	r4, r4, #2
 8008488:	2500      	movs	r5, #0
 800848a:	42a5      	cmp	r5, r4
 800848c:	d105      	bne.n	800849a <__libc_init_array+0x2e>
 800848e:	bd70      	pop	{r4, r5, r6, pc}
 8008490:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008494:	4798      	blx	r3
 8008496:	3501      	adds	r5, #1
 8008498:	e7ee      	b.n	8008478 <__libc_init_array+0xc>
 800849a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800849e:	4798      	blx	r3
 80084a0:	3501      	adds	r5, #1
 80084a2:	e7f2      	b.n	800848a <__libc_init_array+0x1e>
 80084a4:	08008eb8 	.word	0x08008eb8
 80084a8:	08008eb8 	.word	0x08008eb8
 80084ac:	08008eb8 	.word	0x08008eb8
 80084b0:	08008ebc 	.word	0x08008ebc

080084b4 <malloc>:
 80084b4:	4b02      	ldr	r3, [pc, #8]	; (80084c0 <malloc+0xc>)
 80084b6:	4601      	mov	r1, r0
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	f000 b86d 	b.w	8008598 <_malloc_r>
 80084be:	bf00      	nop
 80084c0:	20000180 	.word	0x20000180

080084c4 <free>:
 80084c4:	4b02      	ldr	r3, [pc, #8]	; (80084d0 <free+0xc>)
 80084c6:	4601      	mov	r1, r0
 80084c8:	6818      	ldr	r0, [r3, #0]
 80084ca:	f000 b817 	b.w	80084fc <_free_r>
 80084ce:	bf00      	nop
 80084d0:	20000180 	.word	0x20000180

080084d4 <memcpy>:
 80084d4:	b510      	push	{r4, lr}
 80084d6:	1e43      	subs	r3, r0, #1
 80084d8:	440a      	add	r2, r1
 80084da:	4291      	cmp	r1, r2
 80084dc:	d100      	bne.n	80084e0 <memcpy+0xc>
 80084de:	bd10      	pop	{r4, pc}
 80084e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084e8:	e7f7      	b.n	80084da <memcpy+0x6>

080084ea <memset>:
 80084ea:	4402      	add	r2, r0
 80084ec:	4603      	mov	r3, r0
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d100      	bne.n	80084f4 <memset+0xa>
 80084f2:	4770      	bx	lr
 80084f4:	f803 1b01 	strb.w	r1, [r3], #1
 80084f8:	e7f9      	b.n	80084ee <memset+0x4>
	...

080084fc <_free_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4605      	mov	r5, r0
 8008500:	2900      	cmp	r1, #0
 8008502:	d045      	beq.n	8008590 <_free_r+0x94>
 8008504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008508:	1f0c      	subs	r4, r1, #4
 800850a:	2b00      	cmp	r3, #0
 800850c:	bfb8      	it	lt
 800850e:	18e4      	addlt	r4, r4, r3
 8008510:	f000 f8cc 	bl	80086ac <__malloc_lock>
 8008514:	4a1f      	ldr	r2, [pc, #124]	; (8008594 <_free_r+0x98>)
 8008516:	6813      	ldr	r3, [r2, #0]
 8008518:	4610      	mov	r0, r2
 800851a:	b933      	cbnz	r3, 800852a <_free_r+0x2e>
 800851c:	6063      	str	r3, [r4, #4]
 800851e:	6014      	str	r4, [r2, #0]
 8008520:	4628      	mov	r0, r5
 8008522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008526:	f000 b8c2 	b.w	80086ae <__malloc_unlock>
 800852a:	42a3      	cmp	r3, r4
 800852c:	d90c      	bls.n	8008548 <_free_r+0x4c>
 800852e:	6821      	ldr	r1, [r4, #0]
 8008530:	1862      	adds	r2, r4, r1
 8008532:	4293      	cmp	r3, r2
 8008534:	bf04      	itt	eq
 8008536:	681a      	ldreq	r2, [r3, #0]
 8008538:	685b      	ldreq	r3, [r3, #4]
 800853a:	6063      	str	r3, [r4, #4]
 800853c:	bf04      	itt	eq
 800853e:	1852      	addeq	r2, r2, r1
 8008540:	6022      	streq	r2, [r4, #0]
 8008542:	6004      	str	r4, [r0, #0]
 8008544:	e7ec      	b.n	8008520 <_free_r+0x24>
 8008546:	4613      	mov	r3, r2
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	b10a      	cbz	r2, 8008550 <_free_r+0x54>
 800854c:	42a2      	cmp	r2, r4
 800854e:	d9fa      	bls.n	8008546 <_free_r+0x4a>
 8008550:	6819      	ldr	r1, [r3, #0]
 8008552:	1858      	adds	r0, r3, r1
 8008554:	42a0      	cmp	r0, r4
 8008556:	d10b      	bne.n	8008570 <_free_r+0x74>
 8008558:	6820      	ldr	r0, [r4, #0]
 800855a:	4401      	add	r1, r0
 800855c:	1858      	adds	r0, r3, r1
 800855e:	4282      	cmp	r2, r0
 8008560:	6019      	str	r1, [r3, #0]
 8008562:	d1dd      	bne.n	8008520 <_free_r+0x24>
 8008564:	6810      	ldr	r0, [r2, #0]
 8008566:	6852      	ldr	r2, [r2, #4]
 8008568:	605a      	str	r2, [r3, #4]
 800856a:	4401      	add	r1, r0
 800856c:	6019      	str	r1, [r3, #0]
 800856e:	e7d7      	b.n	8008520 <_free_r+0x24>
 8008570:	d902      	bls.n	8008578 <_free_r+0x7c>
 8008572:	230c      	movs	r3, #12
 8008574:	602b      	str	r3, [r5, #0]
 8008576:	e7d3      	b.n	8008520 <_free_r+0x24>
 8008578:	6820      	ldr	r0, [r4, #0]
 800857a:	1821      	adds	r1, r4, r0
 800857c:	428a      	cmp	r2, r1
 800857e:	bf04      	itt	eq
 8008580:	6811      	ldreq	r1, [r2, #0]
 8008582:	6852      	ldreq	r2, [r2, #4]
 8008584:	6062      	str	r2, [r4, #4]
 8008586:	bf04      	itt	eq
 8008588:	1809      	addeq	r1, r1, r0
 800858a:	6021      	streq	r1, [r4, #0]
 800858c:	605c      	str	r4, [r3, #4]
 800858e:	e7c7      	b.n	8008520 <_free_r+0x24>
 8008590:	bd38      	pop	{r3, r4, r5, pc}
 8008592:	bf00      	nop
 8008594:	20000290 	.word	0x20000290

08008598 <_malloc_r>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	1ccd      	adds	r5, r1, #3
 800859c:	f025 0503 	bic.w	r5, r5, #3
 80085a0:	3508      	adds	r5, #8
 80085a2:	2d0c      	cmp	r5, #12
 80085a4:	bf38      	it	cc
 80085a6:	250c      	movcc	r5, #12
 80085a8:	2d00      	cmp	r5, #0
 80085aa:	4606      	mov	r6, r0
 80085ac:	db01      	blt.n	80085b2 <_malloc_r+0x1a>
 80085ae:	42a9      	cmp	r1, r5
 80085b0:	d903      	bls.n	80085ba <_malloc_r+0x22>
 80085b2:	230c      	movs	r3, #12
 80085b4:	6033      	str	r3, [r6, #0]
 80085b6:	2000      	movs	r0, #0
 80085b8:	bd70      	pop	{r4, r5, r6, pc}
 80085ba:	f000 f877 	bl	80086ac <__malloc_lock>
 80085be:	4a21      	ldr	r2, [pc, #132]	; (8008644 <_malloc_r+0xac>)
 80085c0:	6814      	ldr	r4, [r2, #0]
 80085c2:	4621      	mov	r1, r4
 80085c4:	b991      	cbnz	r1, 80085ec <_malloc_r+0x54>
 80085c6:	4c20      	ldr	r4, [pc, #128]	; (8008648 <_malloc_r+0xb0>)
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	b91b      	cbnz	r3, 80085d4 <_malloc_r+0x3c>
 80085cc:	4630      	mov	r0, r6
 80085ce:	f000 f83d 	bl	800864c <_sbrk_r>
 80085d2:	6020      	str	r0, [r4, #0]
 80085d4:	4629      	mov	r1, r5
 80085d6:	4630      	mov	r0, r6
 80085d8:	f000 f838 	bl	800864c <_sbrk_r>
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	d124      	bne.n	800862a <_malloc_r+0x92>
 80085e0:	230c      	movs	r3, #12
 80085e2:	6033      	str	r3, [r6, #0]
 80085e4:	4630      	mov	r0, r6
 80085e6:	f000 f862 	bl	80086ae <__malloc_unlock>
 80085ea:	e7e4      	b.n	80085b6 <_malloc_r+0x1e>
 80085ec:	680b      	ldr	r3, [r1, #0]
 80085ee:	1b5b      	subs	r3, r3, r5
 80085f0:	d418      	bmi.n	8008624 <_malloc_r+0x8c>
 80085f2:	2b0b      	cmp	r3, #11
 80085f4:	d90f      	bls.n	8008616 <_malloc_r+0x7e>
 80085f6:	600b      	str	r3, [r1, #0]
 80085f8:	50cd      	str	r5, [r1, r3]
 80085fa:	18cc      	adds	r4, r1, r3
 80085fc:	4630      	mov	r0, r6
 80085fe:	f000 f856 	bl	80086ae <__malloc_unlock>
 8008602:	f104 000b 	add.w	r0, r4, #11
 8008606:	1d23      	adds	r3, r4, #4
 8008608:	f020 0007 	bic.w	r0, r0, #7
 800860c:	1ac3      	subs	r3, r0, r3
 800860e:	d0d3      	beq.n	80085b8 <_malloc_r+0x20>
 8008610:	425a      	negs	r2, r3
 8008612:	50e2      	str	r2, [r4, r3]
 8008614:	e7d0      	b.n	80085b8 <_malloc_r+0x20>
 8008616:	428c      	cmp	r4, r1
 8008618:	684b      	ldr	r3, [r1, #4]
 800861a:	bf16      	itet	ne
 800861c:	6063      	strne	r3, [r4, #4]
 800861e:	6013      	streq	r3, [r2, #0]
 8008620:	460c      	movne	r4, r1
 8008622:	e7eb      	b.n	80085fc <_malloc_r+0x64>
 8008624:	460c      	mov	r4, r1
 8008626:	6849      	ldr	r1, [r1, #4]
 8008628:	e7cc      	b.n	80085c4 <_malloc_r+0x2c>
 800862a:	1cc4      	adds	r4, r0, #3
 800862c:	f024 0403 	bic.w	r4, r4, #3
 8008630:	42a0      	cmp	r0, r4
 8008632:	d005      	beq.n	8008640 <_malloc_r+0xa8>
 8008634:	1a21      	subs	r1, r4, r0
 8008636:	4630      	mov	r0, r6
 8008638:	f000 f808 	bl	800864c <_sbrk_r>
 800863c:	3001      	adds	r0, #1
 800863e:	d0cf      	beq.n	80085e0 <_malloc_r+0x48>
 8008640:	6025      	str	r5, [r4, #0]
 8008642:	e7db      	b.n	80085fc <_malloc_r+0x64>
 8008644:	20000290 	.word	0x20000290
 8008648:	20000294 	.word	0x20000294

0800864c <_sbrk_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4c06      	ldr	r4, [pc, #24]	; (8008668 <_sbrk_r+0x1c>)
 8008650:	2300      	movs	r3, #0
 8008652:	4605      	mov	r5, r0
 8008654:	4608      	mov	r0, r1
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	f7f8 fc22 	bl	8000ea0 <_sbrk>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d102      	bne.n	8008666 <_sbrk_r+0x1a>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	b103      	cbz	r3, 8008666 <_sbrk_r+0x1a>
 8008664:	602b      	str	r3, [r5, #0]
 8008666:	bd38      	pop	{r3, r4, r5, pc}
 8008668:	20008d7c 	.word	0x20008d7c

0800866c <_vsiprintf_r>:
 800866c:	b500      	push	{lr}
 800866e:	b09b      	sub	sp, #108	; 0x6c
 8008670:	9100      	str	r1, [sp, #0]
 8008672:	9104      	str	r1, [sp, #16]
 8008674:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008678:	9105      	str	r1, [sp, #20]
 800867a:	9102      	str	r1, [sp, #8]
 800867c:	4905      	ldr	r1, [pc, #20]	; (8008694 <_vsiprintf_r+0x28>)
 800867e:	9103      	str	r1, [sp, #12]
 8008680:	4669      	mov	r1, sp
 8008682:	f000 f86f 	bl	8008764 <_svfiprintf_r>
 8008686:	9b00      	ldr	r3, [sp, #0]
 8008688:	2200      	movs	r2, #0
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	b01b      	add	sp, #108	; 0x6c
 800868e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008692:	bf00      	nop
 8008694:	ffff0208 	.word	0xffff0208

08008698 <vsiprintf>:
 8008698:	4613      	mov	r3, r2
 800869a:	460a      	mov	r2, r1
 800869c:	4601      	mov	r1, r0
 800869e:	4802      	ldr	r0, [pc, #8]	; (80086a8 <vsiprintf+0x10>)
 80086a0:	6800      	ldr	r0, [r0, #0]
 80086a2:	f7ff bfe3 	b.w	800866c <_vsiprintf_r>
 80086a6:	bf00      	nop
 80086a8:	20000180 	.word	0x20000180

080086ac <__malloc_lock>:
 80086ac:	4770      	bx	lr

080086ae <__malloc_unlock>:
 80086ae:	4770      	bx	lr

080086b0 <__ssputs_r>:
 80086b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b4:	688e      	ldr	r6, [r1, #8]
 80086b6:	429e      	cmp	r6, r3
 80086b8:	4682      	mov	sl, r0
 80086ba:	460c      	mov	r4, r1
 80086bc:	4690      	mov	r8, r2
 80086be:	4699      	mov	r9, r3
 80086c0:	d837      	bhi.n	8008732 <__ssputs_r+0x82>
 80086c2:	898a      	ldrh	r2, [r1, #12]
 80086c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086c8:	d031      	beq.n	800872e <__ssputs_r+0x7e>
 80086ca:	6825      	ldr	r5, [r4, #0]
 80086cc:	6909      	ldr	r1, [r1, #16]
 80086ce:	1a6f      	subs	r7, r5, r1
 80086d0:	6965      	ldr	r5, [r4, #20]
 80086d2:	2302      	movs	r3, #2
 80086d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80086dc:	f109 0301 	add.w	r3, r9, #1
 80086e0:	443b      	add	r3, r7
 80086e2:	429d      	cmp	r5, r3
 80086e4:	bf38      	it	cc
 80086e6:	461d      	movcc	r5, r3
 80086e8:	0553      	lsls	r3, r2, #21
 80086ea:	d530      	bpl.n	800874e <__ssputs_r+0x9e>
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7ff ff53 	bl	8008598 <_malloc_r>
 80086f2:	4606      	mov	r6, r0
 80086f4:	b950      	cbnz	r0, 800870c <__ssputs_r+0x5c>
 80086f6:	230c      	movs	r3, #12
 80086f8:	f8ca 3000 	str.w	r3, [sl]
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008702:	81a3      	strh	r3, [r4, #12]
 8008704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870c:	463a      	mov	r2, r7
 800870e:	6921      	ldr	r1, [r4, #16]
 8008710:	f7ff fee0 	bl	80084d4 <memcpy>
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800871a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800871e:	81a3      	strh	r3, [r4, #12]
 8008720:	6126      	str	r6, [r4, #16]
 8008722:	6165      	str	r5, [r4, #20]
 8008724:	443e      	add	r6, r7
 8008726:	1bed      	subs	r5, r5, r7
 8008728:	6026      	str	r6, [r4, #0]
 800872a:	60a5      	str	r5, [r4, #8]
 800872c:	464e      	mov	r6, r9
 800872e:	454e      	cmp	r6, r9
 8008730:	d900      	bls.n	8008734 <__ssputs_r+0x84>
 8008732:	464e      	mov	r6, r9
 8008734:	4632      	mov	r2, r6
 8008736:	4641      	mov	r1, r8
 8008738:	6820      	ldr	r0, [r4, #0]
 800873a:	f000 fa93 	bl	8008c64 <memmove>
 800873e:	68a3      	ldr	r3, [r4, #8]
 8008740:	1b9b      	subs	r3, r3, r6
 8008742:	60a3      	str	r3, [r4, #8]
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	441e      	add	r6, r3
 8008748:	6026      	str	r6, [r4, #0]
 800874a:	2000      	movs	r0, #0
 800874c:	e7dc      	b.n	8008708 <__ssputs_r+0x58>
 800874e:	462a      	mov	r2, r5
 8008750:	f000 faa1 	bl	8008c96 <_realloc_r>
 8008754:	4606      	mov	r6, r0
 8008756:	2800      	cmp	r0, #0
 8008758:	d1e2      	bne.n	8008720 <__ssputs_r+0x70>
 800875a:	6921      	ldr	r1, [r4, #16]
 800875c:	4650      	mov	r0, sl
 800875e:	f7ff fecd 	bl	80084fc <_free_r>
 8008762:	e7c8      	b.n	80086f6 <__ssputs_r+0x46>

08008764 <_svfiprintf_r>:
 8008764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008768:	461d      	mov	r5, r3
 800876a:	898b      	ldrh	r3, [r1, #12]
 800876c:	061f      	lsls	r7, r3, #24
 800876e:	b09d      	sub	sp, #116	; 0x74
 8008770:	4680      	mov	r8, r0
 8008772:	460c      	mov	r4, r1
 8008774:	4616      	mov	r6, r2
 8008776:	d50f      	bpl.n	8008798 <_svfiprintf_r+0x34>
 8008778:	690b      	ldr	r3, [r1, #16]
 800877a:	b96b      	cbnz	r3, 8008798 <_svfiprintf_r+0x34>
 800877c:	2140      	movs	r1, #64	; 0x40
 800877e:	f7ff ff0b 	bl	8008598 <_malloc_r>
 8008782:	6020      	str	r0, [r4, #0]
 8008784:	6120      	str	r0, [r4, #16]
 8008786:	b928      	cbnz	r0, 8008794 <_svfiprintf_r+0x30>
 8008788:	230c      	movs	r3, #12
 800878a:	f8c8 3000 	str.w	r3, [r8]
 800878e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008792:	e0c8      	b.n	8008926 <_svfiprintf_r+0x1c2>
 8008794:	2340      	movs	r3, #64	; 0x40
 8008796:	6163      	str	r3, [r4, #20]
 8008798:	2300      	movs	r3, #0
 800879a:	9309      	str	r3, [sp, #36]	; 0x24
 800879c:	2320      	movs	r3, #32
 800879e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087a2:	2330      	movs	r3, #48	; 0x30
 80087a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087a8:	9503      	str	r5, [sp, #12]
 80087aa:	f04f 0b01 	mov.w	fp, #1
 80087ae:	4637      	mov	r7, r6
 80087b0:	463d      	mov	r5, r7
 80087b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80087b6:	b10b      	cbz	r3, 80087bc <_svfiprintf_r+0x58>
 80087b8:	2b25      	cmp	r3, #37	; 0x25
 80087ba:	d13e      	bne.n	800883a <_svfiprintf_r+0xd6>
 80087bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80087c0:	d00b      	beq.n	80087da <_svfiprintf_r+0x76>
 80087c2:	4653      	mov	r3, sl
 80087c4:	4632      	mov	r2, r6
 80087c6:	4621      	mov	r1, r4
 80087c8:	4640      	mov	r0, r8
 80087ca:	f7ff ff71 	bl	80086b0 <__ssputs_r>
 80087ce:	3001      	adds	r0, #1
 80087d0:	f000 80a4 	beq.w	800891c <_svfiprintf_r+0x1b8>
 80087d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d6:	4453      	add	r3, sl
 80087d8:	9309      	str	r3, [sp, #36]	; 0x24
 80087da:	783b      	ldrb	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 809d 	beq.w	800891c <_svfiprintf_r+0x1b8>
 80087e2:	2300      	movs	r3, #0
 80087e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ec:	9304      	str	r3, [sp, #16]
 80087ee:	9307      	str	r3, [sp, #28]
 80087f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087f4:	931a      	str	r3, [sp, #104]	; 0x68
 80087f6:	462f      	mov	r7, r5
 80087f8:	2205      	movs	r2, #5
 80087fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80087fe:	4850      	ldr	r0, [pc, #320]	; (8008940 <_svfiprintf_r+0x1dc>)
 8008800:	f7f7 fcee 	bl	80001e0 <memchr>
 8008804:	9b04      	ldr	r3, [sp, #16]
 8008806:	b9d0      	cbnz	r0, 800883e <_svfiprintf_r+0xda>
 8008808:	06d9      	lsls	r1, r3, #27
 800880a:	bf44      	itt	mi
 800880c:	2220      	movmi	r2, #32
 800880e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008812:	071a      	lsls	r2, r3, #28
 8008814:	bf44      	itt	mi
 8008816:	222b      	movmi	r2, #43	; 0x2b
 8008818:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800881c:	782a      	ldrb	r2, [r5, #0]
 800881e:	2a2a      	cmp	r2, #42	; 0x2a
 8008820:	d015      	beq.n	800884e <_svfiprintf_r+0xea>
 8008822:	9a07      	ldr	r2, [sp, #28]
 8008824:	462f      	mov	r7, r5
 8008826:	2000      	movs	r0, #0
 8008828:	250a      	movs	r5, #10
 800882a:	4639      	mov	r1, r7
 800882c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008830:	3b30      	subs	r3, #48	; 0x30
 8008832:	2b09      	cmp	r3, #9
 8008834:	d94d      	bls.n	80088d2 <_svfiprintf_r+0x16e>
 8008836:	b1b8      	cbz	r0, 8008868 <_svfiprintf_r+0x104>
 8008838:	e00f      	b.n	800885a <_svfiprintf_r+0xf6>
 800883a:	462f      	mov	r7, r5
 800883c:	e7b8      	b.n	80087b0 <_svfiprintf_r+0x4c>
 800883e:	4a40      	ldr	r2, [pc, #256]	; (8008940 <_svfiprintf_r+0x1dc>)
 8008840:	1a80      	subs	r0, r0, r2
 8008842:	fa0b f000 	lsl.w	r0, fp, r0
 8008846:	4318      	orrs	r0, r3
 8008848:	9004      	str	r0, [sp, #16]
 800884a:	463d      	mov	r5, r7
 800884c:	e7d3      	b.n	80087f6 <_svfiprintf_r+0x92>
 800884e:	9a03      	ldr	r2, [sp, #12]
 8008850:	1d11      	adds	r1, r2, #4
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	9103      	str	r1, [sp, #12]
 8008856:	2a00      	cmp	r2, #0
 8008858:	db01      	blt.n	800885e <_svfiprintf_r+0xfa>
 800885a:	9207      	str	r2, [sp, #28]
 800885c:	e004      	b.n	8008868 <_svfiprintf_r+0x104>
 800885e:	4252      	negs	r2, r2
 8008860:	f043 0302 	orr.w	r3, r3, #2
 8008864:	9207      	str	r2, [sp, #28]
 8008866:	9304      	str	r3, [sp, #16]
 8008868:	783b      	ldrb	r3, [r7, #0]
 800886a:	2b2e      	cmp	r3, #46	; 0x2e
 800886c:	d10c      	bne.n	8008888 <_svfiprintf_r+0x124>
 800886e:	787b      	ldrb	r3, [r7, #1]
 8008870:	2b2a      	cmp	r3, #42	; 0x2a
 8008872:	d133      	bne.n	80088dc <_svfiprintf_r+0x178>
 8008874:	9b03      	ldr	r3, [sp, #12]
 8008876:	1d1a      	adds	r2, r3, #4
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	9203      	str	r2, [sp, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	bfb8      	it	lt
 8008880:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008884:	3702      	adds	r7, #2
 8008886:	9305      	str	r3, [sp, #20]
 8008888:	4d2e      	ldr	r5, [pc, #184]	; (8008944 <_svfiprintf_r+0x1e0>)
 800888a:	7839      	ldrb	r1, [r7, #0]
 800888c:	2203      	movs	r2, #3
 800888e:	4628      	mov	r0, r5
 8008890:	f7f7 fca6 	bl	80001e0 <memchr>
 8008894:	b138      	cbz	r0, 80088a6 <_svfiprintf_r+0x142>
 8008896:	2340      	movs	r3, #64	; 0x40
 8008898:	1b40      	subs	r0, r0, r5
 800889a:	fa03 f000 	lsl.w	r0, r3, r0
 800889e:	9b04      	ldr	r3, [sp, #16]
 80088a0:	4303      	orrs	r3, r0
 80088a2:	3701      	adds	r7, #1
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	7839      	ldrb	r1, [r7, #0]
 80088a8:	4827      	ldr	r0, [pc, #156]	; (8008948 <_svfiprintf_r+0x1e4>)
 80088aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088ae:	2206      	movs	r2, #6
 80088b0:	1c7e      	adds	r6, r7, #1
 80088b2:	f7f7 fc95 	bl	80001e0 <memchr>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d038      	beq.n	800892c <_svfiprintf_r+0x1c8>
 80088ba:	4b24      	ldr	r3, [pc, #144]	; (800894c <_svfiprintf_r+0x1e8>)
 80088bc:	bb13      	cbnz	r3, 8008904 <_svfiprintf_r+0x1a0>
 80088be:	9b03      	ldr	r3, [sp, #12]
 80088c0:	3307      	adds	r3, #7
 80088c2:	f023 0307 	bic.w	r3, r3, #7
 80088c6:	3308      	adds	r3, #8
 80088c8:	9303      	str	r3, [sp, #12]
 80088ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088cc:	444b      	add	r3, r9
 80088ce:	9309      	str	r3, [sp, #36]	; 0x24
 80088d0:	e76d      	b.n	80087ae <_svfiprintf_r+0x4a>
 80088d2:	fb05 3202 	mla	r2, r5, r2, r3
 80088d6:	2001      	movs	r0, #1
 80088d8:	460f      	mov	r7, r1
 80088da:	e7a6      	b.n	800882a <_svfiprintf_r+0xc6>
 80088dc:	2300      	movs	r3, #0
 80088de:	3701      	adds	r7, #1
 80088e0:	9305      	str	r3, [sp, #20]
 80088e2:	4619      	mov	r1, r3
 80088e4:	250a      	movs	r5, #10
 80088e6:	4638      	mov	r0, r7
 80088e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ec:	3a30      	subs	r2, #48	; 0x30
 80088ee:	2a09      	cmp	r2, #9
 80088f0:	d903      	bls.n	80088fa <_svfiprintf_r+0x196>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0c8      	beq.n	8008888 <_svfiprintf_r+0x124>
 80088f6:	9105      	str	r1, [sp, #20]
 80088f8:	e7c6      	b.n	8008888 <_svfiprintf_r+0x124>
 80088fa:	fb05 2101 	mla	r1, r5, r1, r2
 80088fe:	2301      	movs	r3, #1
 8008900:	4607      	mov	r7, r0
 8008902:	e7f0      	b.n	80088e6 <_svfiprintf_r+0x182>
 8008904:	ab03      	add	r3, sp, #12
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	4622      	mov	r2, r4
 800890a:	4b11      	ldr	r3, [pc, #68]	; (8008950 <_svfiprintf_r+0x1ec>)
 800890c:	a904      	add	r1, sp, #16
 800890e:	4640      	mov	r0, r8
 8008910:	f3af 8000 	nop.w
 8008914:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008918:	4681      	mov	r9, r0
 800891a:	d1d6      	bne.n	80088ca <_svfiprintf_r+0x166>
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	065b      	lsls	r3, r3, #25
 8008920:	f53f af35 	bmi.w	800878e <_svfiprintf_r+0x2a>
 8008924:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008926:	b01d      	add	sp, #116	; 0x74
 8008928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892c:	ab03      	add	r3, sp, #12
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	4622      	mov	r2, r4
 8008932:	4b07      	ldr	r3, [pc, #28]	; (8008950 <_svfiprintf_r+0x1ec>)
 8008934:	a904      	add	r1, sp, #16
 8008936:	4640      	mov	r0, r8
 8008938:	f000 f882 	bl	8008a40 <_printf_i>
 800893c:	e7ea      	b.n	8008914 <_svfiprintf_r+0x1b0>
 800893e:	bf00      	nop
 8008940:	08008e1c 	.word	0x08008e1c
 8008944:	08008e22 	.word	0x08008e22
 8008948:	08008e26 	.word	0x08008e26
 800894c:	00000000 	.word	0x00000000
 8008950:	080086b1 	.word	0x080086b1

08008954 <_printf_common>:
 8008954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008958:	4691      	mov	r9, r2
 800895a:	461f      	mov	r7, r3
 800895c:	688a      	ldr	r2, [r1, #8]
 800895e:	690b      	ldr	r3, [r1, #16]
 8008960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008964:	4293      	cmp	r3, r2
 8008966:	bfb8      	it	lt
 8008968:	4613      	movlt	r3, r2
 800896a:	f8c9 3000 	str.w	r3, [r9]
 800896e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008972:	4606      	mov	r6, r0
 8008974:	460c      	mov	r4, r1
 8008976:	b112      	cbz	r2, 800897e <_printf_common+0x2a>
 8008978:	3301      	adds	r3, #1
 800897a:	f8c9 3000 	str.w	r3, [r9]
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	0699      	lsls	r1, r3, #26
 8008982:	bf42      	ittt	mi
 8008984:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008988:	3302      	addmi	r3, #2
 800898a:	f8c9 3000 	strmi.w	r3, [r9]
 800898e:	6825      	ldr	r5, [r4, #0]
 8008990:	f015 0506 	ands.w	r5, r5, #6
 8008994:	d107      	bne.n	80089a6 <_printf_common+0x52>
 8008996:	f104 0a19 	add.w	sl, r4, #25
 800899a:	68e3      	ldr	r3, [r4, #12]
 800899c:	f8d9 2000 	ldr.w	r2, [r9]
 80089a0:	1a9b      	subs	r3, r3, r2
 80089a2:	42ab      	cmp	r3, r5
 80089a4:	dc28      	bgt.n	80089f8 <_printf_common+0xa4>
 80089a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80089aa:	6822      	ldr	r2, [r4, #0]
 80089ac:	3300      	adds	r3, #0
 80089ae:	bf18      	it	ne
 80089b0:	2301      	movne	r3, #1
 80089b2:	0692      	lsls	r2, r2, #26
 80089b4:	d42d      	bmi.n	8008a12 <_printf_common+0xbe>
 80089b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089ba:	4639      	mov	r1, r7
 80089bc:	4630      	mov	r0, r6
 80089be:	47c0      	blx	r8
 80089c0:	3001      	adds	r0, #1
 80089c2:	d020      	beq.n	8008a06 <_printf_common+0xb2>
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	68e5      	ldr	r5, [r4, #12]
 80089c8:	f8d9 2000 	ldr.w	r2, [r9]
 80089cc:	f003 0306 	and.w	r3, r3, #6
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	bf08      	it	eq
 80089d4:	1aad      	subeq	r5, r5, r2
 80089d6:	68a3      	ldr	r3, [r4, #8]
 80089d8:	6922      	ldr	r2, [r4, #16]
 80089da:	bf0c      	ite	eq
 80089dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089e0:	2500      	movne	r5, #0
 80089e2:	4293      	cmp	r3, r2
 80089e4:	bfc4      	itt	gt
 80089e6:	1a9b      	subgt	r3, r3, r2
 80089e8:	18ed      	addgt	r5, r5, r3
 80089ea:	f04f 0900 	mov.w	r9, #0
 80089ee:	341a      	adds	r4, #26
 80089f0:	454d      	cmp	r5, r9
 80089f2:	d11a      	bne.n	8008a2a <_printf_common+0xd6>
 80089f4:	2000      	movs	r0, #0
 80089f6:	e008      	b.n	8008a0a <_printf_common+0xb6>
 80089f8:	2301      	movs	r3, #1
 80089fa:	4652      	mov	r2, sl
 80089fc:	4639      	mov	r1, r7
 80089fe:	4630      	mov	r0, r6
 8008a00:	47c0      	blx	r8
 8008a02:	3001      	adds	r0, #1
 8008a04:	d103      	bne.n	8008a0e <_printf_common+0xba>
 8008a06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0e:	3501      	adds	r5, #1
 8008a10:	e7c3      	b.n	800899a <_printf_common+0x46>
 8008a12:	18e1      	adds	r1, r4, r3
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	2030      	movs	r0, #48	; 0x30
 8008a18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a1c:	4422      	add	r2, r4
 8008a1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a26:	3302      	adds	r3, #2
 8008a28:	e7c5      	b.n	80089b6 <_printf_common+0x62>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	4639      	mov	r1, r7
 8008a30:	4630      	mov	r0, r6
 8008a32:	47c0      	blx	r8
 8008a34:	3001      	adds	r0, #1
 8008a36:	d0e6      	beq.n	8008a06 <_printf_common+0xb2>
 8008a38:	f109 0901 	add.w	r9, r9, #1
 8008a3c:	e7d8      	b.n	80089f0 <_printf_common+0x9c>
	...

08008a40 <_printf_i>:
 8008a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008a48:	460c      	mov	r4, r1
 8008a4a:	7e09      	ldrb	r1, [r1, #24]
 8008a4c:	b085      	sub	sp, #20
 8008a4e:	296e      	cmp	r1, #110	; 0x6e
 8008a50:	4617      	mov	r7, r2
 8008a52:	4606      	mov	r6, r0
 8008a54:	4698      	mov	r8, r3
 8008a56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a58:	f000 80b3 	beq.w	8008bc2 <_printf_i+0x182>
 8008a5c:	d822      	bhi.n	8008aa4 <_printf_i+0x64>
 8008a5e:	2963      	cmp	r1, #99	; 0x63
 8008a60:	d036      	beq.n	8008ad0 <_printf_i+0x90>
 8008a62:	d80a      	bhi.n	8008a7a <_printf_i+0x3a>
 8008a64:	2900      	cmp	r1, #0
 8008a66:	f000 80b9 	beq.w	8008bdc <_printf_i+0x19c>
 8008a6a:	2958      	cmp	r1, #88	; 0x58
 8008a6c:	f000 8083 	beq.w	8008b76 <_printf_i+0x136>
 8008a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008a78:	e032      	b.n	8008ae0 <_printf_i+0xa0>
 8008a7a:	2964      	cmp	r1, #100	; 0x64
 8008a7c:	d001      	beq.n	8008a82 <_printf_i+0x42>
 8008a7e:	2969      	cmp	r1, #105	; 0x69
 8008a80:	d1f6      	bne.n	8008a70 <_printf_i+0x30>
 8008a82:	6820      	ldr	r0, [r4, #0]
 8008a84:	6813      	ldr	r3, [r2, #0]
 8008a86:	0605      	lsls	r5, r0, #24
 8008a88:	f103 0104 	add.w	r1, r3, #4
 8008a8c:	d52a      	bpl.n	8008ae4 <_printf_i+0xa4>
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6011      	str	r1, [r2, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	da03      	bge.n	8008a9e <_printf_i+0x5e>
 8008a96:	222d      	movs	r2, #45	; 0x2d
 8008a98:	425b      	negs	r3, r3
 8008a9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008a9e:	486f      	ldr	r0, [pc, #444]	; (8008c5c <_printf_i+0x21c>)
 8008aa0:	220a      	movs	r2, #10
 8008aa2:	e039      	b.n	8008b18 <_printf_i+0xd8>
 8008aa4:	2973      	cmp	r1, #115	; 0x73
 8008aa6:	f000 809d 	beq.w	8008be4 <_printf_i+0x1a4>
 8008aaa:	d808      	bhi.n	8008abe <_printf_i+0x7e>
 8008aac:	296f      	cmp	r1, #111	; 0x6f
 8008aae:	d020      	beq.n	8008af2 <_printf_i+0xb2>
 8008ab0:	2970      	cmp	r1, #112	; 0x70
 8008ab2:	d1dd      	bne.n	8008a70 <_printf_i+0x30>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	f043 0320 	orr.w	r3, r3, #32
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	e003      	b.n	8008ac6 <_printf_i+0x86>
 8008abe:	2975      	cmp	r1, #117	; 0x75
 8008ac0:	d017      	beq.n	8008af2 <_printf_i+0xb2>
 8008ac2:	2978      	cmp	r1, #120	; 0x78
 8008ac4:	d1d4      	bne.n	8008a70 <_printf_i+0x30>
 8008ac6:	2378      	movs	r3, #120	; 0x78
 8008ac8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008acc:	4864      	ldr	r0, [pc, #400]	; (8008c60 <_printf_i+0x220>)
 8008ace:	e055      	b.n	8008b7c <_printf_i+0x13c>
 8008ad0:	6813      	ldr	r3, [r2, #0]
 8008ad2:	1d19      	adds	r1, r3, #4
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6011      	str	r1, [r2, #0]
 8008ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e08c      	b.n	8008bfe <_printf_i+0x1be>
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6011      	str	r1, [r2, #0]
 8008ae8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008aec:	bf18      	it	ne
 8008aee:	b21b      	sxthne	r3, r3
 8008af0:	e7cf      	b.n	8008a92 <_printf_i+0x52>
 8008af2:	6813      	ldr	r3, [r2, #0]
 8008af4:	6825      	ldr	r5, [r4, #0]
 8008af6:	1d18      	adds	r0, r3, #4
 8008af8:	6010      	str	r0, [r2, #0]
 8008afa:	0628      	lsls	r0, r5, #24
 8008afc:	d501      	bpl.n	8008b02 <_printf_i+0xc2>
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	e002      	b.n	8008b08 <_printf_i+0xc8>
 8008b02:	0668      	lsls	r0, r5, #25
 8008b04:	d5fb      	bpl.n	8008afe <_printf_i+0xbe>
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	4854      	ldr	r0, [pc, #336]	; (8008c5c <_printf_i+0x21c>)
 8008b0a:	296f      	cmp	r1, #111	; 0x6f
 8008b0c:	bf14      	ite	ne
 8008b0e:	220a      	movne	r2, #10
 8008b10:	2208      	moveq	r2, #8
 8008b12:	2100      	movs	r1, #0
 8008b14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b18:	6865      	ldr	r5, [r4, #4]
 8008b1a:	60a5      	str	r5, [r4, #8]
 8008b1c:	2d00      	cmp	r5, #0
 8008b1e:	f2c0 8095 	blt.w	8008c4c <_printf_i+0x20c>
 8008b22:	6821      	ldr	r1, [r4, #0]
 8008b24:	f021 0104 	bic.w	r1, r1, #4
 8008b28:	6021      	str	r1, [r4, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d13d      	bne.n	8008baa <_printf_i+0x16a>
 8008b2e:	2d00      	cmp	r5, #0
 8008b30:	f040 808e 	bne.w	8008c50 <_printf_i+0x210>
 8008b34:	4665      	mov	r5, ip
 8008b36:	2a08      	cmp	r2, #8
 8008b38:	d10b      	bne.n	8008b52 <_printf_i+0x112>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	07db      	lsls	r3, r3, #31
 8008b3e:	d508      	bpl.n	8008b52 <_printf_i+0x112>
 8008b40:	6923      	ldr	r3, [r4, #16]
 8008b42:	6862      	ldr	r2, [r4, #4]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	bfde      	ittt	le
 8008b48:	2330      	movle	r3, #48	; 0x30
 8008b4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b4e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008b52:	ebac 0305 	sub.w	r3, ip, r5
 8008b56:	6123      	str	r3, [r4, #16]
 8008b58:	f8cd 8000 	str.w	r8, [sp]
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	aa03      	add	r2, sp, #12
 8008b60:	4621      	mov	r1, r4
 8008b62:	4630      	mov	r0, r6
 8008b64:	f7ff fef6 	bl	8008954 <_printf_common>
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d14d      	bne.n	8008c08 <_printf_i+0x1c8>
 8008b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b70:	b005      	add	sp, #20
 8008b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b76:	4839      	ldr	r0, [pc, #228]	; (8008c5c <_printf_i+0x21c>)
 8008b78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008b7c:	6813      	ldr	r3, [r2, #0]
 8008b7e:	6821      	ldr	r1, [r4, #0]
 8008b80:	1d1d      	adds	r5, r3, #4
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6015      	str	r5, [r2, #0]
 8008b86:	060a      	lsls	r2, r1, #24
 8008b88:	d50b      	bpl.n	8008ba2 <_printf_i+0x162>
 8008b8a:	07ca      	lsls	r2, r1, #31
 8008b8c:	bf44      	itt	mi
 8008b8e:	f041 0120 	orrmi.w	r1, r1, #32
 8008b92:	6021      	strmi	r1, [r4, #0]
 8008b94:	b91b      	cbnz	r3, 8008b9e <_printf_i+0x15e>
 8008b96:	6822      	ldr	r2, [r4, #0]
 8008b98:	f022 0220 	bic.w	r2, r2, #32
 8008b9c:	6022      	str	r2, [r4, #0]
 8008b9e:	2210      	movs	r2, #16
 8008ba0:	e7b7      	b.n	8008b12 <_printf_i+0xd2>
 8008ba2:	064d      	lsls	r5, r1, #25
 8008ba4:	bf48      	it	mi
 8008ba6:	b29b      	uxthmi	r3, r3
 8008ba8:	e7ef      	b.n	8008b8a <_printf_i+0x14a>
 8008baa:	4665      	mov	r5, ip
 8008bac:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bb0:	fb02 3311 	mls	r3, r2, r1, r3
 8008bb4:	5cc3      	ldrb	r3, [r0, r3]
 8008bb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008bba:	460b      	mov	r3, r1
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	d1f5      	bne.n	8008bac <_printf_i+0x16c>
 8008bc0:	e7b9      	b.n	8008b36 <_printf_i+0xf6>
 8008bc2:	6813      	ldr	r3, [r2, #0]
 8008bc4:	6825      	ldr	r5, [r4, #0]
 8008bc6:	6961      	ldr	r1, [r4, #20]
 8008bc8:	1d18      	adds	r0, r3, #4
 8008bca:	6010      	str	r0, [r2, #0]
 8008bcc:	0628      	lsls	r0, r5, #24
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	d501      	bpl.n	8008bd6 <_printf_i+0x196>
 8008bd2:	6019      	str	r1, [r3, #0]
 8008bd4:	e002      	b.n	8008bdc <_printf_i+0x19c>
 8008bd6:	066a      	lsls	r2, r5, #25
 8008bd8:	d5fb      	bpl.n	8008bd2 <_printf_i+0x192>
 8008bda:	8019      	strh	r1, [r3, #0]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	6123      	str	r3, [r4, #16]
 8008be0:	4665      	mov	r5, ip
 8008be2:	e7b9      	b.n	8008b58 <_printf_i+0x118>
 8008be4:	6813      	ldr	r3, [r2, #0]
 8008be6:	1d19      	adds	r1, r3, #4
 8008be8:	6011      	str	r1, [r2, #0]
 8008bea:	681d      	ldr	r5, [r3, #0]
 8008bec:	6862      	ldr	r2, [r4, #4]
 8008bee:	2100      	movs	r1, #0
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f7f7 faf5 	bl	80001e0 <memchr>
 8008bf6:	b108      	cbz	r0, 8008bfc <_printf_i+0x1bc>
 8008bf8:	1b40      	subs	r0, r0, r5
 8008bfa:	6060      	str	r0, [r4, #4]
 8008bfc:	6863      	ldr	r3, [r4, #4]
 8008bfe:	6123      	str	r3, [r4, #16]
 8008c00:	2300      	movs	r3, #0
 8008c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c06:	e7a7      	b.n	8008b58 <_printf_i+0x118>
 8008c08:	6923      	ldr	r3, [r4, #16]
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	4630      	mov	r0, r6
 8008c10:	47c0      	blx	r8
 8008c12:	3001      	adds	r0, #1
 8008c14:	d0aa      	beq.n	8008b6c <_printf_i+0x12c>
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	079b      	lsls	r3, r3, #30
 8008c1a:	d413      	bmi.n	8008c44 <_printf_i+0x204>
 8008c1c:	68e0      	ldr	r0, [r4, #12]
 8008c1e:	9b03      	ldr	r3, [sp, #12]
 8008c20:	4298      	cmp	r0, r3
 8008c22:	bfb8      	it	lt
 8008c24:	4618      	movlt	r0, r3
 8008c26:	e7a3      	b.n	8008b70 <_printf_i+0x130>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	464a      	mov	r2, r9
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	4630      	mov	r0, r6
 8008c30:	47c0      	blx	r8
 8008c32:	3001      	adds	r0, #1
 8008c34:	d09a      	beq.n	8008b6c <_printf_i+0x12c>
 8008c36:	3501      	adds	r5, #1
 8008c38:	68e3      	ldr	r3, [r4, #12]
 8008c3a:	9a03      	ldr	r2, [sp, #12]
 8008c3c:	1a9b      	subs	r3, r3, r2
 8008c3e:	42ab      	cmp	r3, r5
 8008c40:	dcf2      	bgt.n	8008c28 <_printf_i+0x1e8>
 8008c42:	e7eb      	b.n	8008c1c <_printf_i+0x1dc>
 8008c44:	2500      	movs	r5, #0
 8008c46:	f104 0919 	add.w	r9, r4, #25
 8008c4a:	e7f5      	b.n	8008c38 <_printf_i+0x1f8>
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1ac      	bne.n	8008baa <_printf_i+0x16a>
 8008c50:	7803      	ldrb	r3, [r0, #0]
 8008c52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c5a:	e76c      	b.n	8008b36 <_printf_i+0xf6>
 8008c5c:	08008e2d 	.word	0x08008e2d
 8008c60:	08008e3e 	.word	0x08008e3e

08008c64 <memmove>:
 8008c64:	4288      	cmp	r0, r1
 8008c66:	b510      	push	{r4, lr}
 8008c68:	eb01 0302 	add.w	r3, r1, r2
 8008c6c:	d807      	bhi.n	8008c7e <memmove+0x1a>
 8008c6e:	1e42      	subs	r2, r0, #1
 8008c70:	4299      	cmp	r1, r3
 8008c72:	d00a      	beq.n	8008c8a <memmove+0x26>
 8008c74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c78:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008c7c:	e7f8      	b.n	8008c70 <memmove+0xc>
 8008c7e:	4283      	cmp	r3, r0
 8008c80:	d9f5      	bls.n	8008c6e <memmove+0xa>
 8008c82:	1881      	adds	r1, r0, r2
 8008c84:	1ad2      	subs	r2, r2, r3
 8008c86:	42d3      	cmn	r3, r2
 8008c88:	d100      	bne.n	8008c8c <memmove+0x28>
 8008c8a:	bd10      	pop	{r4, pc}
 8008c8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008c94:	e7f7      	b.n	8008c86 <memmove+0x22>

08008c96 <_realloc_r>:
 8008c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c98:	4607      	mov	r7, r0
 8008c9a:	4614      	mov	r4, r2
 8008c9c:	460e      	mov	r6, r1
 8008c9e:	b921      	cbnz	r1, 8008caa <_realloc_r+0x14>
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ca6:	f7ff bc77 	b.w	8008598 <_malloc_r>
 8008caa:	b922      	cbnz	r2, 8008cb6 <_realloc_r+0x20>
 8008cac:	f7ff fc26 	bl	80084fc <_free_r>
 8008cb0:	4625      	mov	r5, r4
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cb6:	f000 f814 	bl	8008ce2 <_malloc_usable_size_r>
 8008cba:	42a0      	cmp	r0, r4
 8008cbc:	d20f      	bcs.n	8008cde <_realloc_r+0x48>
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	f7ff fc69 	bl	8008598 <_malloc_r>
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d0f2      	beq.n	8008cb2 <_realloc_r+0x1c>
 8008ccc:	4631      	mov	r1, r6
 8008cce:	4622      	mov	r2, r4
 8008cd0:	f7ff fc00 	bl	80084d4 <memcpy>
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f7ff fc10 	bl	80084fc <_free_r>
 8008cdc:	e7e9      	b.n	8008cb2 <_realloc_r+0x1c>
 8008cde:	4635      	mov	r5, r6
 8008ce0:	e7e7      	b.n	8008cb2 <_realloc_r+0x1c>

08008ce2 <_malloc_usable_size_r>:
 8008ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ce6:	1f18      	subs	r0, r3, #4
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bfbc      	itt	lt
 8008cec:	580b      	ldrlt	r3, [r1, r0]
 8008cee:	18c0      	addlt	r0, r0, r3
 8008cf0:	4770      	bx	lr
	...

08008cf4 <_init>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	bf00      	nop
 8008cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfa:	bc08      	pop	{r3}
 8008cfc:	469e      	mov	lr, r3
 8008cfe:	4770      	bx	lr

08008d00 <_fini>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	bf00      	nop
 8008d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d06:	bc08      	pop	{r3}
 8008d08:	469e      	mov	lr, r3
 8008d0a:	4770      	bx	lr
