
STM32_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800cedc  0800cedc  0001cedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d408  0800d408  00020760  2**0
                  CONTENTS
  4 .ARM          00000008  0800d408  0800d408  0001d408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d410  0800d410  00020760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d410  0800d410  0001d410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d414  0800d414  0001d414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  0800d418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011d90  20000760  0800db78  00020760  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200124f0  0800db78  000224f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020760  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186a2  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a23  00000000  00000000  00038e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec8  00000000  00000000  0003c858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  0003d720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002488d  00000000  00000000  0003e440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010b44  00000000  00000000  00062ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7c91  00000000  00000000  00073811  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0013b4a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004690  00000000  00000000  0013b59c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000760 	.word	0x20000760
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cec4 	.word	0x0800cec4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000764 	.word	0x20000764
 80001cc:	0800cec4 	.word	0x0800cec4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_uldivmod>:
 80006b8:	b953      	cbnz	r3, 80006d0 <__aeabi_uldivmod+0x18>
 80006ba:	b94a      	cbnz	r2, 80006d0 <__aeabi_uldivmod+0x18>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bf08      	it	eq
 80006c0:	2800      	cmpeq	r0, #0
 80006c2:	bf1c      	itt	ne
 80006c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80006c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006cc:	f000 b972 	b.w	80009b4 <__aeabi_idiv0>
 80006d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d8:	f000 f806 	bl	80006e8 <__udivmoddi4>
 80006dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr

080006e8 <__udivmoddi4>:
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	9e08      	ldr	r6, [sp, #32]
 80006ee:	4604      	mov	r4, r0
 80006f0:	4688      	mov	r8, r1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d14b      	bne.n	800078e <__udivmoddi4+0xa6>
 80006f6:	428a      	cmp	r2, r1
 80006f8:	4615      	mov	r5, r2
 80006fa:	d967      	bls.n	80007cc <__udivmoddi4+0xe4>
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	b14a      	cbz	r2, 8000716 <__udivmoddi4+0x2e>
 8000702:	f1c2 0720 	rsb	r7, r2, #32
 8000706:	fa01 f302 	lsl.w	r3, r1, r2
 800070a:	fa20 f707 	lsr.w	r7, r0, r7
 800070e:	4095      	lsls	r5, r2
 8000710:	ea47 0803 	orr.w	r8, r7, r3
 8000714:	4094      	lsls	r4, r2
 8000716:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800071a:	0c23      	lsrs	r3, r4, #16
 800071c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000720:	fa1f fc85 	uxth.w	ip, r5
 8000724:	fb0e 8817 	mls	r8, lr, r7, r8
 8000728:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800072c:	fb07 f10c 	mul.w	r1, r7, ip
 8000730:	4299      	cmp	r1, r3
 8000732:	d909      	bls.n	8000748 <__udivmoddi4+0x60>
 8000734:	18eb      	adds	r3, r5, r3
 8000736:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800073a:	f080 811b 	bcs.w	8000974 <__udivmoddi4+0x28c>
 800073e:	4299      	cmp	r1, r3
 8000740:	f240 8118 	bls.w	8000974 <__udivmoddi4+0x28c>
 8000744:	3f02      	subs	r7, #2
 8000746:	442b      	add	r3, r5
 8000748:	1a5b      	subs	r3, r3, r1
 800074a:	b2a4      	uxth	r4, r4
 800074c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000750:	fb0e 3310 	mls	r3, lr, r0, r3
 8000754:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000758:	fb00 fc0c 	mul.w	ip, r0, ip
 800075c:	45a4      	cmp	ip, r4
 800075e:	d909      	bls.n	8000774 <__udivmoddi4+0x8c>
 8000760:	192c      	adds	r4, r5, r4
 8000762:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000766:	f080 8107 	bcs.w	8000978 <__udivmoddi4+0x290>
 800076a:	45a4      	cmp	ip, r4
 800076c:	f240 8104 	bls.w	8000978 <__udivmoddi4+0x290>
 8000770:	3802      	subs	r0, #2
 8000772:	442c      	add	r4, r5
 8000774:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000778:	eba4 040c 	sub.w	r4, r4, ip
 800077c:	2700      	movs	r7, #0
 800077e:	b11e      	cbz	r6, 8000788 <__udivmoddi4+0xa0>
 8000780:	40d4      	lsrs	r4, r2
 8000782:	2300      	movs	r3, #0
 8000784:	e9c6 4300 	strd	r4, r3, [r6]
 8000788:	4639      	mov	r1, r7
 800078a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078e:	428b      	cmp	r3, r1
 8000790:	d909      	bls.n	80007a6 <__udivmoddi4+0xbe>
 8000792:	2e00      	cmp	r6, #0
 8000794:	f000 80eb 	beq.w	800096e <__udivmoddi4+0x286>
 8000798:	2700      	movs	r7, #0
 800079a:	e9c6 0100 	strd	r0, r1, [r6]
 800079e:	4638      	mov	r0, r7
 80007a0:	4639      	mov	r1, r7
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f783 	clz	r7, r3
 80007aa:	2f00      	cmp	r7, #0
 80007ac:	d147      	bne.n	800083e <__udivmoddi4+0x156>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0xd0>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80fa 	bhi.w	80009ac <__udivmoddi4+0x2c4>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb61 0303 	sbc.w	r3, r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	4698      	mov	r8, r3
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d0e0      	beq.n	8000788 <__udivmoddi4+0xa0>
 80007c6:	e9c6 4800 	strd	r4, r8, [r6]
 80007ca:	e7dd      	b.n	8000788 <__udivmoddi4+0xa0>
 80007cc:	b902      	cbnz	r2, 80007d0 <__udivmoddi4+0xe8>
 80007ce:	deff      	udf	#255	; 0xff
 80007d0:	fab2 f282 	clz	r2, r2
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	f040 808f 	bne.w	80008f8 <__udivmoddi4+0x210>
 80007da:	1b49      	subs	r1, r1, r5
 80007dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007e0:	fa1f f885 	uxth.w	r8, r5
 80007e4:	2701      	movs	r7, #1
 80007e6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007ea:	0c23      	lsrs	r3, r4, #16
 80007ec:	fb0e 111c 	mls	r1, lr, ip, r1
 80007f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f4:	fb08 f10c 	mul.w	r1, r8, ip
 80007f8:	4299      	cmp	r1, r3
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0x124>
 80007fc:	18eb      	adds	r3, r5, r3
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0x122>
 8000804:	4299      	cmp	r1, r3
 8000806:	f200 80cd 	bhi.w	80009a4 <__udivmoddi4+0x2bc>
 800080a:	4684      	mov	ip, r0
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1410 	mls	r4, lr, r0, r1
 8000818:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x14c>
 8000824:	192c      	adds	r4, r5, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x14a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80b6 	bhi.w	800099e <__udivmoddi4+0x2b6>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e79f      	b.n	800077e <__udivmoddi4+0x96>
 800083e:	f1c7 0c20 	rsb	ip, r7, #32
 8000842:	40bb      	lsls	r3, r7
 8000844:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000848:	ea4e 0e03 	orr.w	lr, lr, r3
 800084c:	fa01 f407 	lsl.w	r4, r1, r7
 8000850:	fa20 f50c 	lsr.w	r5, r0, ip
 8000854:	fa21 f30c 	lsr.w	r3, r1, ip
 8000858:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800085c:	4325      	orrs	r5, r4
 800085e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000862:	0c2c      	lsrs	r4, r5, #16
 8000864:	fb08 3319 	mls	r3, r8, r9, r3
 8000868:	fa1f fa8e 	uxth.w	sl, lr
 800086c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000870:	fb09 f40a 	mul.w	r4, r9, sl
 8000874:	429c      	cmp	r4, r3
 8000876:	fa02 f207 	lsl.w	r2, r2, r7
 800087a:	fa00 f107 	lsl.w	r1, r0, r7
 800087e:	d90b      	bls.n	8000898 <__udivmoddi4+0x1b0>
 8000880:	eb1e 0303 	adds.w	r3, lr, r3
 8000884:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000888:	f080 8087 	bcs.w	800099a <__udivmoddi4+0x2b2>
 800088c:	429c      	cmp	r4, r3
 800088e:	f240 8084 	bls.w	800099a <__udivmoddi4+0x2b2>
 8000892:	f1a9 0902 	sub.w	r9, r9, #2
 8000896:	4473      	add	r3, lr
 8000898:	1b1b      	subs	r3, r3, r4
 800089a:	b2ad      	uxth	r5, r5
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3310 	mls	r3, r8, r0, r3
 80008a4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008a8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008ac:	45a2      	cmp	sl, r4
 80008ae:	d908      	bls.n	80008c2 <__udivmoddi4+0x1da>
 80008b0:	eb1e 0404 	adds.w	r4, lr, r4
 80008b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008b8:	d26b      	bcs.n	8000992 <__udivmoddi4+0x2aa>
 80008ba:	45a2      	cmp	sl, r4
 80008bc:	d969      	bls.n	8000992 <__udivmoddi4+0x2aa>
 80008be:	3802      	subs	r0, #2
 80008c0:	4474      	add	r4, lr
 80008c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008c6:	fba0 8902 	umull	r8, r9, r0, r2
 80008ca:	eba4 040a 	sub.w	r4, r4, sl
 80008ce:	454c      	cmp	r4, r9
 80008d0:	46c2      	mov	sl, r8
 80008d2:	464b      	mov	r3, r9
 80008d4:	d354      	bcc.n	8000980 <__udivmoddi4+0x298>
 80008d6:	d051      	beq.n	800097c <__udivmoddi4+0x294>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d069      	beq.n	80009b0 <__udivmoddi4+0x2c8>
 80008dc:	ebb1 050a 	subs.w	r5, r1, sl
 80008e0:	eb64 0403 	sbc.w	r4, r4, r3
 80008e4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008e8:	40fd      	lsrs	r5, r7
 80008ea:	40fc      	lsrs	r4, r7
 80008ec:	ea4c 0505 	orr.w	r5, ip, r5
 80008f0:	e9c6 5400 	strd	r5, r4, [r6]
 80008f4:	2700      	movs	r7, #0
 80008f6:	e747      	b.n	8000788 <__udivmoddi4+0xa0>
 80008f8:	f1c2 0320 	rsb	r3, r2, #32
 80008fc:	fa20 f703 	lsr.w	r7, r0, r3
 8000900:	4095      	lsls	r5, r2
 8000902:	fa01 f002 	lsl.w	r0, r1, r2
 8000906:	fa21 f303 	lsr.w	r3, r1, r3
 800090a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800090e:	4338      	orrs	r0, r7
 8000910:	0c01      	lsrs	r1, r0, #16
 8000912:	fbb3 f7fe 	udiv	r7, r3, lr
 8000916:	fa1f f885 	uxth.w	r8, r5
 800091a:	fb0e 3317 	mls	r3, lr, r7, r3
 800091e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000922:	fb07 f308 	mul.w	r3, r7, r8
 8000926:	428b      	cmp	r3, r1
 8000928:	fa04 f402 	lsl.w	r4, r4, r2
 800092c:	d907      	bls.n	800093e <__udivmoddi4+0x256>
 800092e:	1869      	adds	r1, r5, r1
 8000930:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000934:	d22f      	bcs.n	8000996 <__udivmoddi4+0x2ae>
 8000936:	428b      	cmp	r3, r1
 8000938:	d92d      	bls.n	8000996 <__udivmoddi4+0x2ae>
 800093a:	3f02      	subs	r7, #2
 800093c:	4429      	add	r1, r5
 800093e:	1acb      	subs	r3, r1, r3
 8000940:	b281      	uxth	r1, r0
 8000942:	fbb3 f0fe 	udiv	r0, r3, lr
 8000946:	fb0e 3310 	mls	r3, lr, r0, r3
 800094a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800094e:	fb00 f308 	mul.w	r3, r0, r8
 8000952:	428b      	cmp	r3, r1
 8000954:	d907      	bls.n	8000966 <__udivmoddi4+0x27e>
 8000956:	1869      	adds	r1, r5, r1
 8000958:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800095c:	d217      	bcs.n	800098e <__udivmoddi4+0x2a6>
 800095e:	428b      	cmp	r3, r1
 8000960:	d915      	bls.n	800098e <__udivmoddi4+0x2a6>
 8000962:	3802      	subs	r0, #2
 8000964:	4429      	add	r1, r5
 8000966:	1ac9      	subs	r1, r1, r3
 8000968:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800096c:	e73b      	b.n	80007e6 <__udivmoddi4+0xfe>
 800096e:	4637      	mov	r7, r6
 8000970:	4630      	mov	r0, r6
 8000972:	e709      	b.n	8000788 <__udivmoddi4+0xa0>
 8000974:	4607      	mov	r7, r0
 8000976:	e6e7      	b.n	8000748 <__udivmoddi4+0x60>
 8000978:	4618      	mov	r0, r3
 800097a:	e6fb      	b.n	8000774 <__udivmoddi4+0x8c>
 800097c:	4541      	cmp	r1, r8
 800097e:	d2ab      	bcs.n	80008d8 <__udivmoddi4+0x1f0>
 8000980:	ebb8 0a02 	subs.w	sl, r8, r2
 8000984:	eb69 020e 	sbc.w	r2, r9, lr
 8000988:	3801      	subs	r0, #1
 800098a:	4613      	mov	r3, r2
 800098c:	e7a4      	b.n	80008d8 <__udivmoddi4+0x1f0>
 800098e:	4660      	mov	r0, ip
 8000990:	e7e9      	b.n	8000966 <__udivmoddi4+0x27e>
 8000992:	4618      	mov	r0, r3
 8000994:	e795      	b.n	80008c2 <__udivmoddi4+0x1da>
 8000996:	4667      	mov	r7, ip
 8000998:	e7d1      	b.n	800093e <__udivmoddi4+0x256>
 800099a:	4681      	mov	r9, r0
 800099c:	e77c      	b.n	8000898 <__udivmoddi4+0x1b0>
 800099e:	3802      	subs	r0, #2
 80009a0:	442c      	add	r4, r5
 80009a2:	e747      	b.n	8000834 <__udivmoddi4+0x14c>
 80009a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009a8:	442b      	add	r3, r5
 80009aa:	e72f      	b.n	800080c <__udivmoddi4+0x124>
 80009ac:	4638      	mov	r0, r7
 80009ae:	e708      	b.n	80007c2 <__udivmoddi4+0xda>
 80009b0:	4637      	mov	r7, r6
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0xa0>

080009b4 <__aeabi_idiv0>:
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	f5ad 4d81 	sub.w	sp, sp, #16512	; 0x4080
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t Task = WAIT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80009c8:	f102 0207 	add.w	r2, r2, #7
 80009cc:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f000 ff45 	bl	800185c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f91d 	bl	8000c10 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 fa8b 	bl	8000ef0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009da:	f000 fa17 	bl	8000e0c <MX_DMA_Init>
  MX_I2S2_Init();
 80009de:	f000 f9b5 	bl	8000d4c <MX_I2S2_Init>
  MX_USB_DEVICE_Init();
 80009e2:	f007 fcb9 	bl	8008358 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80009e6:	f000 f995 	bl	8000d14 <MX_CRC_Init>
  MX_I2S3_Init();
 80009ea:	f000 f9df 	bl	8000dac <MX_I2S3_Init>
  MX_PDM2PCM_Init();
 80009ee:	f007 fc89 	bl	8008304 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */
	char cmd[APP_RX_DATA_SIZE];
	HAL_Delay(1500);
 80009f2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80009f6:	f000 ffa3 	bl	8001940 <HAL_Delay>
	CDC_Clear();
 80009fa:	f008 f85b 	bl	8008ab4 <CDC_Clear>
	_printf("\r\n               ================");
 80009fe:	486c      	ldr	r0, [pc, #432]	; (8000bb0 <main+0x1f8>)
 8000a00:	f007 fef4 	bl	80087ec <_printf>
	_printf("\r\n               *** DSP V1.0 ***");
 8000a04:	486b      	ldr	r0, [pc, #428]	; (8000bb4 <main+0x1fc>)
 8000a06:	f007 fef1 	bl	80087ec <_printf>
	_printf("\r\n               ================\r\n\n");
 8000a0a:	486b      	ldr	r0, [pc, #428]	; (8000bb8 <main+0x200>)
 8000a0c:	f007 feee 	bl	80087ec <_printf>
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET)
 8000a10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a14:	4869      	ldr	r0, [pc, #420]	; (8000bbc <main+0x204>)
 8000a16:	f001 fdeb 	bl	80025f0 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d103      	bne.n	8000a28 <main+0x70>
	{	_cprintf("/!\\ ERROR : Hardware initialization problem !\r\n");
 8000a20:	4867      	ldr	r0, [pc, #412]	; (8000bc0 <main+0x208>)
 8000a22:	f007 ff0f 	bl	8008844 <_cprintf>
 8000a26:	e002      	b.n	8000a2e <main+0x76>
	}else
	{	_cprintf("Hardware initialization done\r\n");
 8000a28:	4866      	ldr	r0, [pc, #408]	; (8000bc4 <main+0x20c>)
 8000a2a:	f007 ff0b 	bl	8008844 <_cprintf>
	}

	/* Start I2S communiation */
	if((HAL_I2SEx_TransmitReceive_DMA(&hi2s2, I2S2_txBuf, I2S2_rxBuf, I2S2_BUFLEN / 2) != HAL_OK)
 8000a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a32:	4a65      	ldr	r2, [pc, #404]	; (8000bc8 <main+0x210>)
 8000a34:	4965      	ldr	r1, [pc, #404]	; (8000bcc <main+0x214>)
 8000a36:	4866      	ldr	r0, [pc, #408]	; (8000bd0 <main+0x218>)
 8000a38:	f002 f972 	bl	8002d20 <HAL_I2SEx_TransmitReceive_DMA>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d108      	bne.n	8000a54 <main+0x9c>
			|| (HAL_I2S_Receive_DMA(&hi2s3, I2S3_rxBuf, I2S3_BUFLEN) != HAL_OK))
 8000a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a46:	4963      	ldr	r1, [pc, #396]	; (8000bd4 <main+0x21c>)
 8000a48:	4863      	ldr	r0, [pc, #396]	; (8000bd8 <main+0x220>)
 8000a4a:	f001 ff5d 	bl	8002908 <HAL_I2S_Receive_DMA>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <main+0xa4>
	{	_cprintf("/!\\ ERROR : Unable to launch I2S DMA transfer !\r\n");
 8000a54:	4861      	ldr	r0, [pc, #388]	; (8000bdc <main+0x224>)
 8000a56:	f007 fef5 	bl	8008844 <_cprintf>
 8000a5a:	e002      	b.n	8000a62 <main+0xaa>
	}else
	{	_cprintf("I2S communication established\r\n");
 8000a5c:	4860      	ldr	r0, [pc, #384]	; (8000be0 <main+0x228>)
 8000a5e:	f007 fef1 	bl	8008844 <_cprintf>
	}

	/* Set serial interface to keyboard input mode */
	CDC_rxPrintf_ON();
 8000a62:	f008 f851 	bl	8008b08 <CDC_rxPrintf_ON>
	{
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

		/* If command available from COM port */
		if (CDC_RX_DATA_PENDING)
 8000a66:	4b5f      	ldr	r3, [pc, #380]	; (8000be4 <main+0x22c>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d060      	beq.n	8000b32 <main+0x17a>
		{
			/* Read command */
			_scanf("%s", cmd);
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	3b04      	subs	r3, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	485b      	ldr	r0, [pc, #364]	; (8000be8 <main+0x230>)
 8000a7a:	f007 ff6f 	bl	800895c <_scanf>
			CDC_RX_DATA_PENDING = FALSE;
 8000a7e:	4b59      	ldr	r3, [pc, #356]	; (8000be4 <main+0x22c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]

			/* Execute command */
			if (!strcmp(cmd, "clear"))
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	3b04      	subs	r3, #4
 8000a8a:	4958      	ldr	r1, [pc, #352]	; (8000bec <main+0x234>)
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fb9f 	bl	80001d0 <strcmp>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <main+0xe6>
			{	CDC_Clear();
 8000a98:	f008 f80c 	bl	8008ab4 <CDC_Clear>
 8000a9c:	e049      	b.n	8000b32 <main+0x17a>
			}
			else if((!strcmp(cmd, "q") || !strcmp(cmd, "Q")) && Task != WAIT)
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	4952      	ldr	r1, [pc, #328]	; (8000bf0 <main+0x238>)
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fb92 	bl	80001d0 <strcmp>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d009      	beq.n	8000ac6 <main+0x10e>
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	494e      	ldr	r1, [pc, #312]	; (8000bf4 <main+0x23c>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fb88 	bl	80001d0 <strcmp>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d112      	bne.n	8000aec <main+0x134>
 8000ac6:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000aca:	f103 0307 	add.w	r3, r3, #7
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00b      	beq.n	8000aec <main+0x134>
			{
				Task = WAIT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8000ada:	f102 0207 	add.w	r2, r2, #7
 8000ade:	7013      	strb	r3, [r2, #0]
				_cprintf("Process stopped by user\r\n");
 8000ae0:	4845      	ldr	r0, [pc, #276]	; (8000bf8 <main+0x240>)
 8000ae2:	f007 feaf 	bl	8008844 <_cprintf>
				CDC_rxPrintf_ON();
 8000ae6:	f008 f80f 	bl	8008b08 <CDC_rxPrintf_ON>
 8000aea:	e022      	b.n	8000b32 <main+0x17a>
			}
			else if (!strcmp(cmd, "process") && Task != PROCESS)
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	3b04      	subs	r3, #4
 8000af2:	4942      	ldr	r1, [pc, #264]	; (8000bfc <main+0x244>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fb6b 	bl	80001d0 <strcmp>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d115      	bne.n	8000b2c <main+0x174>
 8000b00:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000b04:	f103 0307 	add.w	r3, r3, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d00e      	beq.n	8000b2c <main+0x174>
			{
				Task = PROCESS;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8000b14:	f102 0207 	add.w	r2, r2, #7
 8000b18:	7013      	strb	r3, [r2, #0]
				CDC_rxPrintf_OFF();
 8000b1a:	f008 f815 	bl	8008b48 <CDC_rxPrintf_OFF>
				_cprintf("Audio processing started\r\n");
 8000b1e:	4838      	ldr	r0, [pc, #224]	; (8000c00 <main+0x248>)
 8000b20:	f007 fe90 	bl	8008844 <_cprintf>
				_cprintf("Processing, type \"q\" to stop\r\n");
 8000b24:	4837      	ldr	r0, [pc, #220]	; (8000c04 <main+0x24c>)
 8000b26:	f007 fe8d 	bl	8008844 <_cprintf>
 8000b2a:	e002      	b.n	8000b32 <main+0x17a>
			}
			else
			{
				_cprintf("/!\\ Unknown Command !\r\n");
 8000b2c:	4836      	ldr	r0, [pc, #216]	; (8000c08 <main+0x250>)
 8000b2e:	f007 fe89 	bl	8008844 <_cprintf>
			}
		}

		/* If serial COM port is not open process by default */
		if(!HOST_PORT_COM_OPEN)
 8000b32:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <main+0x254>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f083 0301 	eor.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d007      	beq.n	8000b52 <main+0x19a>
		{	Task = PROCESS;
 8000b42:	2301      	movs	r3, #1
 8000b44:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8000b48:	f102 0207 	add.w	r2, r2, #7
 8000b4c:	7013      	strb	r3, [r2, #0]
			CDC_rxPrintf_OFF();
 8000b4e:	f007 fffb 	bl	8008b48 <CDC_rxPrintf_OFF>
		}

		/* Execute selected task */
		switch(Task)
 8000b52:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000b56:	f103 0307 	add.w	r3, r3, #7
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d11f      	bne.n	8000ba0 <main+0x1e8>
		{
			case(PROCESS):
				{
					/* Read audio data */
				 // MP45DT02_monoRq31(M_Buffer); // do not work actually !
					PMODI2S2_stereoRq31(Lbuf, Rbuf);
 8000b60:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000b64:	3a04      	subs	r2, #4
 8000b66:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000b6a:	f103 0308 	add.w	r3, r3, #8
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fb2a 	bl	80011cc <PMODI2S2_stereoRq31>

					/* Signal Processing */
				 // arm_fir_q31(FIR_q31, L_Buf, L_Buf, BUFFER_LENGTH);

					/* Write audio data */
					PMODI2S2_stereoWq31(Lbuf, Rbuf);
 8000b78:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000b7c:	3a04      	subs	r2, #4
 8000b7e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000b82:	f103 0308 	add.w	r3, r3, #8
 8000b86:	3b04      	subs	r3, #4
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fb70 	bl	8001270 <PMODI2S2_stereoWq31>

					/* Toggle Led and update chrono on port COM */
					HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000b90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b94:	4809      	ldr	r0, [pc, #36]	; (8000bbc <main+0x204>)
 8000b96:	f001 fd5c 	bl	8002652 <HAL_GPIO_TogglePin>
					_cspin();
 8000b9a:	f007 ff19 	bl	80089d0 <_cspin>
					break;
 8000b9e:	e006      	b.n	8000bae <main+0x1f6>
				}
			default:
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <main+0x204>)
 8000ba8:	f001 fd3a 	bl	8002620 <HAL_GPIO_WritePin>
				break;
 8000bac:	bf00      	nop
		if (CDC_RX_DATA_PENDING)
 8000bae:	e75a      	b.n	8000a66 <main+0xae>
 8000bb0:	0800cedc 	.word	0x0800cedc
 8000bb4:	0800cf00 	.word	0x0800cf00
 8000bb8:	0800cf24 	.word	0x0800cf24
 8000bbc:	40020c00 	.word	0x40020c00
 8000bc0:	0800cf4c 	.word	0x0800cf4c
 8000bc4:	0800cf7c 	.word	0x0800cf7c
 8000bc8:	20008900 	.word	0x20008900
 8000bcc:	20000900 	.word	0x20000900
 8000bd0:	20011a28 	.word	0x20011a28
 8000bd4:	20010904 	.word	0x20010904
 8000bd8:	20011a70 	.word	0x20011a70
 8000bdc:	0800cf9c 	.word	0x0800cf9c
 8000be0:	0800cfd0 	.word	0x0800cfd0
 8000be4:	20000786 	.word	0x20000786
 8000be8:	0800cff0 	.word	0x0800cff0
 8000bec:	0800cff4 	.word	0x0800cff4
 8000bf0:	0800cffc 	.word	0x0800cffc
 8000bf4:	0800d000 	.word	0x0800d000
 8000bf8:	0800d004 	.word	0x0800d004
 8000bfc:	0800d020 	.word	0x0800d020
 8000c00:	0800d028 	.word	0x0800d028
 8000c04:	0800d044 	.word	0x0800d044
 8000c08:	0800d064 	.word	0x0800d064
 8000c0c:	20000785 	.word	0x20000785

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b098      	sub	sp, #96	; 0x60
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c1a:	2230      	movs	r2, #48	; 0x30
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f00a fb17 	bl	800b252 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <SystemClock_Config+0xfc>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a30      	ldr	r2, [pc, #192]	; (8000d0c <SystemClock_Config+0xfc>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <SystemClock_Config+0xfc>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <SystemClock_Config+0x100>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a2a      	ldr	r2, [pc, #168]	; (8000d10 <SystemClock_Config+0x100>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <SystemClock_Config+0x100>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c84:	2302      	movs	r3, #2
 8000c86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c92:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c96:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f003 fe83 	bl	80049b0 <HAL_RCC_OscConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000cb0:	f000 fb3e 	bl	8001330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 f8dc 	bl	8004e90 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000cde:	f000 fb27 	bl	8001330 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ce6:	23c0      	movs	r3, #192	; 0xc0
 8000ce8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f004 fa96 	bl	8005224 <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000cfe:	f000 fb17 	bl	8001330 <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	3760      	adds	r7, #96	; 0x60
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40007000 	.word	0x40007000

08000d14 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_CRC_Init+0x30>)
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <MX_CRC_Init+0x34>)
 8000d1c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d1e:	4809      	ldr	r0, [pc, #36]	; (8000d44 <MX_CRC_Init+0x30>)
 8000d20:	f000 ff41 	bl	8001ba6 <HAL_CRC_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000d2a:	f000 fb01 	bl	8001330 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <MX_CRC_Init+0x30>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <MX_CRC_Init+0x30>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f042 0201 	orr.w	r2, r2, #1
 8000d3c:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200008f8 	.word	0x200008f8
 8000d48:	40023000 	.word	0x40023000

08000d4c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2S2_Init 0 */
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */
  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_I2S2_Init+0x54>)
 8000d52:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <MX_I2S2_Init+0x58>)
 8000d54:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_I2S2_Init+0x54>)
 8000d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_I2S2_Init+0x54>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_I2S2_Init+0x54>)
 8000d66:	2203      	movs	r2, #3
 8000d68:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <MX_I2S2_Init+0x54>)
 8000d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d70:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_I2S2_Init+0x54>)
 8000d74:	4a0c      	ldr	r2, [pc, #48]	; (8000da8 <MX_I2S2_Init+0x5c>)
 8000d76:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_I2S2_Init+0x54>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_I2S2_Init+0x54>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_I2S2_Init+0x54>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_I2S2_Init+0x54>)
 8000d8c:	f001 fc7c 	bl	8002688 <HAL_I2S_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000d96:	f000 facb 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */
  /* USER CODE END I2S2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20011a28 	.word	0x20011a28
 8000da4:	40003800 	.word	0x40003800
 8000da8:	00017700 	.word	0x00017700

08000dac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_I2S3_Init+0x54>)
 8000db2:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <MX_I2S3_Init+0x58>)
 8000db4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_I2S3_Init+0x54>)
 8000db8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000dbc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_MSB;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <MX_I2S3_Init+0x54>)
 8000dc0:	2210      	movs	r2, #16
 8000dc2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_I2S3_Init+0x54>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <MX_I2S3_Init+0x54>)
 8000dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_I2S3_Init+0x54>)
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <MX_I2S3_Init+0x5c>)
 8000dd6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_I2S3_Init+0x54>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_I2S3_Init+0x54>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_I2S3_Init+0x54>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_I2S3_Init+0x54>)
 8000dec:	f001 fc4c 	bl	8002688 <HAL_I2S_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000df6:	f000 fa9b 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20011a70 	.word	0x20011a70
 8000e04:	40003c00 	.word	0x40003c00
 8000e08:	00017700 	.word	0x00017700

08000e0c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <MX_DMA_Init+0xd8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a32      	ldr	r2, [pc, #200]	; (8000ee4 <MX_DMA_Init+0xd8>)
 8000e1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <MX_DMA_Init+0xd8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <MX_DMA_Init+0xd8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a2b      	ldr	r2, [pc, #172]	; (8000ee4 <MX_DMA_Init+0xd8>)
 8000e38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <MX_DMA_Init+0xd8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000e4a:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e4c:	4a27      	ldr	r2, [pc, #156]	; (8000eec <MX_DMA_Init+0xe0>)
 8000e4e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000e50:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e56:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e5c:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e62:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000e64:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e6a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e86:	2204      	movs	r2, #4
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000e9c:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <MX_DMA_Init+0xdc>)
 8000e9e:	f000 fe9f 	bl	8001be0 <HAL_DMA_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_DMA_Init+0xa0>
  {
    Error_Handler( );
 8000ea8:	f000 fa42 	bl	8001330 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	200b      	movs	r0, #11
 8000eb2:	f000 fe42 	bl	8001b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eb6:	200b      	movs	r0, #11
 8000eb8:	f000 fe5b 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	200e      	movs	r0, #14
 8000ec2:	f000 fe3a 	bl	8001b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ec6:	200e      	movs	r0, #14
 8000ec8:	f000 fe53 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	200f      	movs	r0, #15
 8000ed2:	f000 fe32 	bl	8001b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f000 fe4b 	bl	8001b72 <HAL_NVIC_EnableIRQ>

}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	20000898 	.word	0x20000898
 8000eec:	40026410 	.word	0x40026410

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	4b71      	ldr	r3, [pc, #452]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a70      	ldr	r2, [pc, #448]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f10:	f043 0310 	orr.w	r3, r3, #16
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b6e      	ldr	r3, [pc, #440]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	61bb      	str	r3, [r7, #24]
 8000f20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	4b6a      	ldr	r3, [pc, #424]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a69      	ldr	r2, [pc, #420]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b67      	ldr	r3, [pc, #412]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a62      	ldr	r2, [pc, #392]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b60      	ldr	r3, [pc, #384]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b5c      	ldr	r3, [pc, #368]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a5b      	ldr	r2, [pc, #364]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a54      	ldr	r2, [pc, #336]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b52      	ldr	r3, [pc, #328]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b4e      	ldr	r3, [pc, #312]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a4d      	ldr	r2, [pc, #308]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b4b      	ldr	r3, [pc, #300]	; (80010d0 <MX_GPIO_Init+0x1e0>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	4848      	ldr	r0, [pc, #288]	; (80010d4 <MX_GPIO_Init+0x1e4>)
 8000fb4:	f001 fb34 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4846      	ldr	r0, [pc, #280]	; (80010d8 <MX_GPIO_Init+0x1e8>)
 8000fbe:	f001 fb2f 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000fc8:	4844      	ldr	r0, [pc, #272]	; (80010dc <MX_GPIO_Init+0x1ec>)
 8000fca:	f001 fb29 	bl	8002620 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	483b      	ldr	r0, [pc, #236]	; (80010d4 <MX_GPIO_Init+0x1e4>)
 8000fe6:	f001 f969 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4835      	ldr	r0, [pc, #212]	; (80010d8 <MX_GPIO_Init+0x1e8>)
 8001002:	f001 f95b 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001006:	2301      	movs	r3, #1
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800100a:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <MX_GPIO_Init+0x1f0>)
 800100c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	4832      	ldr	r0, [pc, #200]	; (80010e4 <MX_GPIO_Init+0x1f4>)
 800101a:	f001 f94f 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800101e:	23e0      	movs	r3, #224	; 0xe0
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102e:	2305      	movs	r3, #5
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	482a      	ldr	r0, [pc, #168]	; (80010e4 <MX_GPIO_Init+0x1f4>)
 800103a:	f001 f93f 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800103e:	2304      	movs	r3, #4
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4825      	ldr	r0, [pc, #148]	; (80010e8 <MX_GPIO_Init+0x1f8>)
 8001052:	f001 f933 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001056:	f24f 0310 	movw	r3, #61456	; 0xf010
 800105a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	481b      	ldr	r0, [pc, #108]	; (80010dc <MX_GPIO_Init+0x1ec>)
 8001070:	f001 f924 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001074:	2320      	movs	r3, #32
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	4815      	ldr	r0, [pc, #84]	; (80010dc <MX_GPIO_Init+0x1ec>)
 8001088:	f001 f918 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800108c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001092:	2312      	movs	r3, #18
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001096:	2301      	movs	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800109e:	2304      	movs	r3, #4
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	480f      	ldr	r0, [pc, #60]	; (80010e8 <MX_GPIO_Init+0x1f8>)
 80010aa:	f001 f907 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_GPIO_Init+0x1f0>)
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_GPIO_Init+0x1e4>)
 80010c2:	f001 f8fb 	bl	80022bc <HAL_GPIO_Init>

}
 80010c6:	bf00      	nop
 80010c8:	3730      	adds	r7, #48	; 0x30
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	10120000 	.word	0x10120000
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400

080010ec <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	pI2S2_txBuf = &I2S2_txBuf[0];
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 80010f6:	4a09      	ldr	r2, [pc, #36]	; (800111c <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 80010f8:	601a      	str	r2, [r3, #0]
	pI2S2_rxBuf = &I2S2_rxBuf[0];
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 80010fc:	4a09      	ldr	r2, [pc, #36]	; (8001124 <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 80010fe:	601a      	str	r2, [r3, #0]
	I2S2_rxState = HalfCplt;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_I2SEx_TxRxHalfCpltCallback+0x3c>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
	I2S2_txState = HalfCplt;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	20000400 	.word	0x20000400
 800111c:	20000900 	.word	0x20000900
 8001120:	20000404 	.word	0x20000404
 8001124:	20008900 	.word	0x20008900
 8001128:	20010900 	.word	0x20010900
 800112c:	20011904 	.word	0x20011904

08001130 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	pI2S2_txBuf = &I2S2_txBuf[I2S2_BUFLEN/2];
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 800113a:	4a09      	ldr	r2, [pc, #36]	; (8001160 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 800113c:	601a      	str	r2, [r3, #0]
	pI2S2_rxBuf = &I2S2_rxBuf[I2S2_BUFLEN/2];
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8001140:	4a09      	ldr	r2, [pc, #36]	; (8001168 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8001142:	601a      	str	r2, [r3, #0]
	I2S2_rxState = Cplt;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_I2SEx_TxRxCpltCallback+0x3c>)
 8001146:	2202      	movs	r2, #2
 8001148:	701a      	strb	r2, [r3, #0]
	I2S2_txState = Cplt;
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_I2SEx_TxRxCpltCallback+0x40>)
 800114c:	2202      	movs	r2, #2
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	20000400 	.word	0x20000400
 8001160:	20004900 	.word	0x20004900
 8001164:	20000404 	.word	0x20000404
 8001168:	2000c900 	.word	0x2000c900
 800116c:	20010900 	.word	0x20010900
 8001170:	20011904 	.word	0x20011904

08001174 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	pI2S3_rxBuf = &I2S3_rxBuf[0];
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_I2S_RxHalfCpltCallback+0x24>)
 8001180:	601a      	str	r2, [r3, #0]
	I2S3_rxState = HalfCplt;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_I2S_RxHalfCpltCallback+0x28>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	20000408 	.word	0x20000408
 8001198:	20010904 	.word	0x20010904
 800119c:	20011905 	.word	0x20011905

080011a0 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	pI2S3_rxBuf = &I2S3_rxBuf[I2S3_BUFLEN/2];
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_I2S_RxCpltCallback+0x20>)
 80011aa:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_I2S_RxCpltCallback+0x24>)
 80011ac:	601a      	str	r2, [r3, #0]
	I2S3_rxState = Cplt;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_I2S_RxCpltCallback+0x28>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	701a      	strb	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	20000408 	.word	0x20000408
 80011c4:	20011104 	.word	0x20011104
 80011c8:	20011905 	.word	0x20011905

080011cc <PMODI2S2_stereoRq31>:
	_printf("Value = %d\r\n", pI2S3_rxBuf[12]);
	_printf("Value     = %d\r\n", pI2S3_rxBuf[11]);
}

void PMODI2S2_stereoRq31(q31_t *Lbuf, q31_t *Rbuf)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
	while(I2S2_rxState == Busy)
 80011d6:	bf00      	nop
 80011d8:	4b23      	ldr	r3, [pc, #140]	; (8001268 <PMODI2S2_stereoRq31+0x9c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0fb      	beq.n	80011d8 <PMODI2S2_stereoRq31+0xc>
	{
	}
	I2S2_rxState = Busy;
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <PMODI2S2_stereoRq31+0x9c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 80011e6:	2300      	movs	r3, #0
 80011e8:	81fb      	strh	r3, [r7, #14]
 80011ea:	e031      	b.n	8001250 <PMODI2S2_stereoRq31+0x84>
	{
		Lbuf[i / 4] = (q31_t) ((pI2S2_rxBuf[i]     << 16) | pI2S2_rxBuf[i + 1]);
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <PMODI2S2_stereoRq31+0xa0>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	041a      	lsls	r2, r3, #16
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <PMODI2S2_stereoRq31+0xa0>)
 80011fc:	6819      	ldr	r1, [r3, #0]
 80011fe:	89fb      	ldrh	r3, [r7, #14]
 8001200:	3301      	adds	r3, #1
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	440b      	add	r3, r1
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	b29b      	uxth	r3, r3
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	440b      	add	r3, r1
 8001216:	4302      	orrs	r2, r0
 8001218:	601a      	str	r2, [r3, #0]
		Rbuf[i / 4] = (q31_t) ((pI2S2_rxBuf[i + 2] << 16) | pI2S2_rxBuf[i + 3]);
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <PMODI2S2_stereoRq31+0xa0>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	3302      	adds	r3, #2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	041a      	lsls	r2, r3, #16
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <PMODI2S2_stereoRq31+0xa0>)
 800122c:	6819      	ldr	r1, [r3, #0]
 800122e:	89fb      	ldrh	r3, [r7, #14]
 8001230:	3303      	adds	r3, #3
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	440b      	add	r3, r1
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	b29b      	uxth	r3, r3
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	6839      	ldr	r1, [r7, #0]
 8001244:	440b      	add	r3, r1
 8001246:	4302      	orrs	r2, r0
 8001248:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	3304      	adds	r3, #4
 800124e:	81fb      	strh	r3, [r7, #14]
 8001250:	89fb      	ldrh	r3, [r7, #14]
 8001252:	3303      	adds	r3, #3
 8001254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001258:	dbc8      	blt.n	80011ec <PMODI2S2_stereoRq31+0x20>
	}
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20010900 	.word	0x20010900
 800126c:	20000404 	.word	0x20000404

08001270 <PMODI2S2_stereoWq31>:

void PMODI2S2_stereoWq31(q31_t *Lbuf, q31_t *Rbuf)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	while(I2S2_txState == Busy)
 800127a:	bf00      	nop
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <PMODI2S2_stereoWq31+0xb8>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0fb      	beq.n	800127c <PMODI2S2_stereoWq31+0xc>
	{
	}
	I2S2_txState = Busy;
 8001284:	4b28      	ldr	r3, [pc, #160]	; (8001328 <PMODI2S2_stereoWq31+0xb8>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 800128a:	2300      	movs	r3, #0
 800128c:	81fb      	strh	r3, [r7, #14]
 800128e:	e03f      	b.n	8001310 <PMODI2S2_stereoWq31+0xa0>
	{
		pI2S2_txBuf[i]     = (Lbuf[i / 4] >> 16) & 0xFFFF;
 8001290:	89fb      	ldrh	r3, [r7, #14]
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	b29b      	uxth	r3, r3
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	4413      	add	r3, r2
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	0c19      	lsrs	r1, r3, #16
 80012a0:	4b22      	ldr	r3, [pc, #136]	; (800132c <PMODI2S2_stereoWq31+0xbc>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	89fb      	ldrh	r3, [r7, #14]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	b28a      	uxth	r2, r1
 80012ac:	801a      	strh	r2, [r3, #0]
		pI2S2_txBuf[i + 1] =  Lbuf[i / 4] & 0xFFFF;
 80012ae:	89fb      	ldrh	r3, [r7, #14]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	6819      	ldr	r1, [r3, #0]
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <PMODI2S2_stereoWq31+0xbc>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	89fb      	ldrh	r3, [r7, #14]
 80012c2:	3301      	adds	r3, #1
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	b28a      	uxth	r2, r1
 80012ca:	801a      	strh	r2, [r3, #0]
		pI2S2_txBuf[i + 2] = (Rbuf[i / 4] >> 16) & 0xFFFF;
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0c19      	lsrs	r1, r3, #16
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <PMODI2S2_stereoWq31+0xbc>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	89fb      	ldrh	r3, [r7, #14]
 80012e2:	3302      	adds	r3, #2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	b28a      	uxth	r2, r1
 80012ea:	801a      	strh	r2, [r3, #0]
		pI2S2_txBuf[i + 3] =  Rbuf[i / 4] & 0xFFFF;
 80012ec:	89fb      	ldrh	r3, [r7, #14]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <PMODI2S2_stereoWq31+0xbc>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	89fb      	ldrh	r3, [r7, #14]
 8001300:	3303      	adds	r3, #3
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	b28a      	uxth	r2, r1
 8001308:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	3304      	adds	r3, #4
 800130e:	81fb      	strh	r3, [r7, #14]
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	3303      	adds	r3, #3
 8001314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001318:	dbba      	blt.n	8001290 <PMODI2S2_stereoWq31+0x20>
	}
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20011904 	.word	0x20011904
 800132c:	20000400 	.word	0x20000400

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800133a:	4804      	ldr	r0, [pc, #16]	; (800134c <Error_Handler+0x1c>)
 800133c:	f001 f970 	bl	8002620 <HAL_GPIO_WritePin>
	_cprintf("/!\\ FATAL ERROR !");
 8001340:	4803      	ldr	r0, [pc, #12]	; (8001350 <Error_Handler+0x20>)
 8001342:	f007 fa7f 	bl	8008844 <_cprintf>
  /* USER CODE END Error_Handler_Debug */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40020c00 	.word	0x40020c00
 8001350:	0800d0a0 	.word	0x0800d0a0

08001354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <HAL_MspInit+0x4c>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x4c>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001392:	2007      	movs	r0, #7
 8001394:	f000 fbc6 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023800 	.word	0x40023800

080013a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <HAL_CRC_MspInit+0x3c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d10d      	bne.n	80013d2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_CRC_MspInit+0x40>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <HAL_CRC_MspInit+0x40>)
 80013c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <HAL_CRC_MspInit+0x40>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023000 	.word	0x40023000
 80013e4:	40023800 	.word	0x40023800

080013e8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4aa3      	ldr	r2, [pc, #652]	; (8001694 <HAL_I2S_MspInit+0x2ac>)
 8001406:	4293      	cmp	r3, r2
 8001408:	f040 80bf 	bne.w	800158a <HAL_I2S_MspInit+0x1a2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
 8001410:	4ba1      	ldr	r3, [pc, #644]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4aa0      	ldr	r2, [pc, #640]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 8001416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	4b9e      	ldr	r3, [pc, #632]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001424:	623b      	str	r3, [r7, #32]
 8001426:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	4b9a      	ldr	r3, [pc, #616]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	4a99      	ldr	r2, [pc, #612]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	6313      	str	r3, [r2, #48]	; 0x30
 8001438:	4b97      	ldr	r3, [pc, #604]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	4b93      	ldr	r3, [pc, #588]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4a92      	ldr	r2, [pc, #584]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 800144e:	f043 0302 	orr.w	r3, r3, #2
 8001452:	6313      	str	r3, [r2, #48]	; 0x30
 8001454:	4b90      	ldr	r3, [pc, #576]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001460:	2304      	movs	r3, #4
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001470:	2306      	movs	r3, #6
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	4619      	mov	r1, r3
 800147a:	4888      	ldr	r0, [pc, #544]	; (800169c <HAL_I2S_MspInit+0x2b4>)
 800147c:	f000 ff1e 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin|GPIO_PIN_6;
 8001480:	2348      	movs	r3, #72	; 0x48
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001490:	2305      	movs	r3, #5
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	4880      	ldr	r0, [pc, #512]	; (800169c <HAL_I2S_MspInit+0x2b4>)
 800149c:	f000 ff0e 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80014a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b2:	2305      	movs	r3, #5
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	4878      	ldr	r0, [pc, #480]	; (80016a0 <HAL_I2S_MspInit+0x2b8>)
 80014be:	f000 fefd 	bl	80022bc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80014c2:	4b78      	ldr	r3, [pc, #480]	; (80016a4 <HAL_I2S_MspInit+0x2bc>)
 80014c4:	4a78      	ldr	r2, [pc, #480]	; (80016a8 <HAL_I2S_MspInit+0x2c0>)
 80014c6:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 80014c8:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <HAL_I2S_MspInit+0x2bc>)
 80014ca:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014ce:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d0:	4b74      	ldr	r3, [pc, #464]	; (80016a4 <HAL_I2S_MspInit+0x2bc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d6:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <HAL_I2S_MspInit+0x2bc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014dc:	4b71      	ldr	r3, [pc, #452]	; (80016a4 <HAL_I2S_MspInit+0x2bc>)
 80014de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e2:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014e4:	4b6f      	ldr	r3, [pc, #444]	; (80016a4 <HAL_I2S_MspInit+0x2bc>)
 80014e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ea:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ec:	4b6d      	ldr	r3, [pc, #436]	; (80016a4 <HAL_I2S_MspInit+0x2bc>)
 80014ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f2:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 80014f4:	4b6b      	ldr	r3, [pc, #428]	; (80016a4 <HAL_I2S_MspInit+0x2bc>)
 80014f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014fa:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014fc:	4b69      	ldr	r3, [pc, #420]	; (80016a4 <HAL_I2S_MspInit+0x2bc>)
 80014fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001502:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001504:	4b67      	ldr	r3, [pc, #412]	; (80016a4 <HAL_I2S_MspInit+0x2bc>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 800150a:	4866      	ldr	r0, [pc, #408]	; (80016a4 <HAL_I2S_MspInit+0x2bc>)
 800150c:	f000 fb68 	bl	8001be0 <HAL_DMA_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8001516:	f7ff ff0b 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a61      	ldr	r2, [pc, #388]	; (80016a4 <HAL_I2S_MspInit+0x2bc>)
 800151e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001520:	4a60      	ldr	r2, [pc, #384]	; (80016a4 <HAL_I2S_MspInit+0x2bc>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001526:	4b61      	ldr	r3, [pc, #388]	; (80016ac <HAL_I2S_MspInit+0x2c4>)
 8001528:	4a61      	ldr	r2, [pc, #388]	; (80016b0 <HAL_I2S_MspInit+0x2c8>)
 800152a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800152c:	4b5f      	ldr	r3, [pc, #380]	; (80016ac <HAL_I2S_MspInit+0x2c4>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001532:	4b5e      	ldr	r3, [pc, #376]	; (80016ac <HAL_I2S_MspInit+0x2c4>)
 8001534:	2240      	movs	r2, #64	; 0x40
 8001536:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001538:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <HAL_I2S_MspInit+0x2c4>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800153e:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <HAL_I2S_MspInit+0x2c4>)
 8001540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001544:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001546:	4b59      	ldr	r3, [pc, #356]	; (80016ac <HAL_I2S_MspInit+0x2c4>)
 8001548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800154c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800154e:	4b57      	ldr	r3, [pc, #348]	; (80016ac <HAL_I2S_MspInit+0x2c4>)
 8001550:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001554:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001556:	4b55      	ldr	r3, [pc, #340]	; (80016ac <HAL_I2S_MspInit+0x2c4>)
 8001558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800155c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800155e:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_I2S_MspInit+0x2c4>)
 8001560:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001564:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001566:	4b51      	ldr	r3, [pc, #324]	; (80016ac <HAL_I2S_MspInit+0x2c4>)
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800156c:	484f      	ldr	r0, [pc, #316]	; (80016ac <HAL_I2S_MspInit+0x2c4>)
 800156e:	f000 fb37 	bl	8001be0 <HAL_DMA_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 8001578:	f7ff feda 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <HAL_I2S_MspInit+0x2c4>)
 8001580:	639a      	str	r2, [r3, #56]	; 0x38
 8001582:	4a4a      	ldr	r2, [pc, #296]	; (80016ac <HAL_I2S_MspInit+0x2c4>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001588:	e080      	b.n	800168c <HAL_I2S_MspInit+0x2a4>
  else if(hi2s->Instance==SPI3)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a49      	ldr	r2, [pc, #292]	; (80016b4 <HAL_I2S_MspInit+0x2cc>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d17b      	bne.n	800168c <HAL_I2S_MspInit+0x2a4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	4a3e      	ldr	r2, [pc, #248]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 800159e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a2:	6413      	str	r3, [r2, #64]	; 0x40
 80015a4:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4a37      	ldr	r2, [pc, #220]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6313      	str	r3, [r2, #48]	; 0x30
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4a30      	ldr	r2, [pc, #192]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_I2S_MspInit+0x2b0>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015e8:	2310      	movs	r3, #16
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015f8:	2306      	movs	r3, #6
 80015fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	482d      	ldr	r0, [pc, #180]	; (80016b8 <HAL_I2S_MspInit+0x2d0>)
 8001604:	f000 fe5a 	bl	80022bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001608:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800161a:	2306      	movs	r3, #6
 800161c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	4619      	mov	r1, r3
 8001624:	481d      	ldr	r0, [pc, #116]	; (800169c <HAL_I2S_MspInit+0x2b4>)
 8001626:	f000 fe49 	bl	80022bc <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_I2S_MspInit+0x2d4>)
 800162c:	4a24      	ldr	r2, [pc, #144]	; (80016c0 <HAL_I2S_MspInit+0x2d8>)
 800162e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <HAL_I2S_MspInit+0x2d4>)
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_I2S_MspInit+0x2d4>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <HAL_I2S_MspInit+0x2d4>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001642:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <HAL_I2S_MspInit+0x2d4>)
 8001644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001648:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_I2S_MspInit+0x2d4>)
 800164c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001650:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_I2S_MspInit+0x2d4>)
 8001654:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001658:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_I2S_MspInit+0x2d4>)
 800165c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001660:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <HAL_I2S_MspInit+0x2d4>)
 8001664:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001668:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_I2S_MspInit+0x2d4>)
 800166c:	2200      	movs	r2, #0
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001670:	4812      	ldr	r0, [pc, #72]	; (80016bc <HAL_I2S_MspInit+0x2d4>)
 8001672:	f000 fab5 	bl	8001be0 <HAL_DMA_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_I2S_MspInit+0x298>
      Error_Handler();
 800167c:	f7ff fe58 	bl	8001330 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_I2S_MspInit+0x2d4>)
 8001684:	63da      	str	r2, [r3, #60]	; 0x3c
 8001686:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <HAL_I2S_MspInit+0x2d4>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800168c:	bf00      	nop
 800168e:	3738      	adds	r7, #56	; 0x38
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40003800 	.word	0x40003800
 8001698:	40023800 	.word	0x40023800
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020400 	.word	0x40020400
 80016a4:	20011908 	.word	0x20011908
 80016a8:	40026058 	.word	0x40026058
 80016ac:	20011968 	.word	0x20011968
 80016b0:	40026070 	.word	0x40026070
 80016b4:	40003c00 	.word	0x40003c00
 80016b8:	40020000 	.word	0x40020000
 80016bc:	200119c8 	.word	0x200119c8
 80016c0:	40026010 	.word	0x40026010

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <MemManage_Handler+0x4>

080016de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001718:	f000 f8f2 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <DMA1_Stream0_IRQHandler+0x10>)
 8001726:	f000 fb61 	bl	8001dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200119c8 	.word	0x200119c8

08001734 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <DMA1_Stream3_IRQHandler+0x10>)
 800173a:	f000 fb57 	bl	8001dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20011908 	.word	0x20011908

08001748 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <DMA1_Stream4_IRQHandler+0x10>)
 800174e:	f000 fb4d 	bl	8001dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20011968 	.word	0x20011968

0800175c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <OTG_FS_IRQHandler+0x10>)
 8001762:	f002 f8f1 	bl	8003948 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200120e4 	.word	0x200120e4

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f009 fd12 	bl	800b1c8 <__errno>
 80017a4:	4602      	mov	r2, r0
 80017a6:	230c      	movs	r3, #12
 80017a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20020000 	.word	0x20020000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	20000780 	.word	0x20000780
 80017d8:	200124f0 	.word	0x200124f0

080017dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <SystemInit+0x28>)
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <SystemInit+0x28>)
 80017e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SystemInit+0x28>)
 80017f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017f6:	609a      	str	r2, [r3, #8]
#endif
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001840 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800180c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800180e:	e003      	b.n	8001818 <LoopCopyDataInit>

08001810 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001812:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001814:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001816:	3104      	adds	r1, #4

08001818 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001818:	480b      	ldr	r0, [pc, #44]	; (8001848 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800181c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800181e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001820:	d3f6      	bcc.n	8001810 <CopyDataInit>
  ldr  r2, =_sbss
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001824:	e002      	b.n	800182c <LoopFillZerobss>

08001826 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001826:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001828:	f842 3b04 	str.w	r3, [r2], #4

0800182c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800182e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001830:	d3f9      	bcc.n	8001826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001832:	f7ff ffd3 	bl	80017dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001836:	f009 fccd 	bl	800b1d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183a:	f7ff f8bd 	bl	80009b8 <main>
  bx  lr    
 800183e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001840:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001844:	0800d418 	.word	0x0800d418
  ldr  r0, =_sdata
 8001848:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800184c:	20000760 	.word	0x20000760
  ldr  r2, =_sbss
 8001850:	20000760 	.word	0x20000760
  ldr  r3, = _ebss
 8001854:	200124f0 	.word	0x200124f0

08001858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_Init+0x40>)
 8001866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_Init+0x40>)
 8001872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_Init+0x40>)
 800187e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 f94d 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188a:	2000      	movs	r0, #0
 800188c:	f000 f808 	bl	80018a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001890:	f7ff fd60 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_InitTick+0x54>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x58>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f965 	bl	8001b8e <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018dc:	f000 f92d 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_InitTick+0x5c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2000040c 	.word	0x2000040c
 80018f8:	20000414 	.word	0x20000414
 80018fc:	20000410 	.word	0x20000410

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000414 	.word	0x20000414
 8001924:	20011ab8 	.word	0x20011ab8

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20011ab8 	.word	0x20011ab8

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_Delay+0x40>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000414 	.word	0x20000414

08001984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <__NVIC_EnableIRQ+0x38>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b04:	f7ff ff8e 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff29 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff3e 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff8e 	bl	8001a78 <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5d 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff31 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa2 	bl	8001ae0 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e00e      	b.n	8001bd6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	795b      	ldrb	r3, [r3, #5]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d105      	bne.n	8001bce <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fbeb 	bl	80013a4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff fe9c 	bl	8001928 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e099      	b.n	8001d30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1c:	e00f      	b.n	8001c3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c1e:	f7ff fe83 	bl	8001928 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d908      	bls.n	8001c3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2203      	movs	r2, #3
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e078      	b.n	8001d30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e8      	bne.n	8001c1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_DMA_Init+0x158>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d107      	bne.n	8001ca8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f023 0307 	bic.w	r3, r3, #7
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d117      	bne.n	8001d02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00e      	beq.n	8001d02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fa6f 	bl	80021c8 <DMA_CheckFifoParam>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2240      	movs	r2, #64	; 0x40
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e016      	b.n	8001d30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fa26 	bl	800215c <DMA_CalcBaseAndBitshift>
 8001d10:	4603      	mov	r3, r0
 8001d12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	223f      	movs	r2, #63	; 0x3f
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	f010803f 	.word	0xf010803f

08001d3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_DMA_Start_IT+0x26>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e040      	b.n	8001de4 <HAL_DMA_Start_IT+0xa8>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d12f      	bne.n	8001dd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f9b8 	bl	8002100 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	223f      	movs	r2, #63	; 0x3f
 8001d96:	409a      	lsls	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0216 	orr.w	r2, r2, #22
 8001daa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0208 	orr.w	r2, r2, #8
 8001dc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e005      	b.n	8001de2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dde:	2302      	movs	r3, #2
 8001de0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001df8:	4b92      	ldr	r3, [pc, #584]	; (8002044 <HAL_DMA_IRQHandler+0x258>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a92      	ldr	r2, [pc, #584]	; (8002048 <HAL_DMA_IRQHandler+0x25c>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0a9b      	lsrs	r3, r3, #10
 8001e04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	2208      	movs	r2, #8
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d01a      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d013      	beq.n	8001e58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0204 	bic.w	r2, r2, #4
 8001e3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	2208      	movs	r2, #8
 8001e46:	409a      	lsls	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d012      	beq.n	8001e8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e86:	f043 0202 	orr.w	r2, r3, #2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	2204      	movs	r2, #4
 8001e94:	409a      	lsls	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d012      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00b      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	f043 0204 	orr.w	r2, r3, #4
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	2210      	movs	r2, #16
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d043      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d03c      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d018      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d108      	bne.n	8001f1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d024      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	4798      	blx	r3
 8001f1a:	e01f      	b.n	8001f5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	4798      	blx	r3
 8001f2c:	e016      	b.n	8001f5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d107      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0208 	bic.w	r2, r2, #8
 8001f4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	2220      	movs	r2, #32
 8001f62:	409a      	lsls	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 808e 	beq.w	800208a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8086 	beq.w	800208a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	2220      	movs	r2, #32
 8001f84:	409a      	lsls	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	d136      	bne.n	8002004 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0216 	bic.w	r2, r2, #22
 8001fa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d103      	bne.n	8001fc6 <HAL_DMA_IRQHandler+0x1da>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0208 	bic.w	r2, r2, #8
 8001fd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fda:	223f      	movs	r2, #63	; 0x3f
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d07d      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
        }
        return;
 8002002:	e078      	b.n	80020f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01c      	beq.n	800204c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d108      	bne.n	8002032 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	2b00      	cmp	r3, #0
 8002026:	d030      	beq.n	800208a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	4798      	blx	r3
 8002030:	e02b      	b.n	800208a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d027      	beq.n	800208a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
 8002042:	e022      	b.n	800208a <HAL_DMA_IRQHandler+0x29e>
 8002044:	2000040c 	.word	0x2000040c
 8002048:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0210 	bic.w	r2, r2, #16
 8002068:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208e:	2b00      	cmp	r3, #0
 8002090:	d032      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d022      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2205      	movs	r2, #5
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	3301      	adds	r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d307      	bcc.n	80020d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f2      	bne.n	80020b6 <HAL_DMA_IRQHandler+0x2ca>
 80020d0:	e000      	b.n	80020d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
 80020f4:	e000      	b.n	80020f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80020f6:	bf00      	nop
    }
  }
}
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop

08002100 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800211c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b40      	cmp	r3, #64	; 0x40
 800212c:	d108      	bne.n	8002140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800213e:	e007      	b.n	8002150 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	60da      	str	r2, [r3, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3b10      	subs	r3, #16
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <DMA_CalcBaseAndBitshift+0x64>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d909      	bls.n	800219e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	1d1a      	adds	r2, r3, #4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	659a      	str	r2, [r3, #88]	; 0x58
 800219c:	e007      	b.n	80021ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	aaaaaaab 	.word	0xaaaaaaab
 80021c4:	0800d220 	.word	0x0800d220

080021c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d11f      	bne.n	8002222 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d855      	bhi.n	8002294 <DMA_CheckFifoParam+0xcc>
 80021e8:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <DMA_CheckFifoParam+0x28>)
 80021ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ee:	bf00      	nop
 80021f0:	08002201 	.word	0x08002201
 80021f4:	08002213 	.word	0x08002213
 80021f8:	08002201 	.word	0x08002201
 80021fc:	08002295 	.word	0x08002295
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d045      	beq.n	8002298 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002210:	e042      	b.n	8002298 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800221a:	d13f      	bne.n	800229c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002220:	e03c      	b.n	800229c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222a:	d121      	bne.n	8002270 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d836      	bhi.n	80022a0 <DMA_CheckFifoParam+0xd8>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <DMA_CheckFifoParam+0x70>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	08002249 	.word	0x08002249
 800223c:	0800224f 	.word	0x0800224f
 8002240:	08002249 	.word	0x08002249
 8002244:	08002261 	.word	0x08002261
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
      break;
 800224c:	e02f      	b.n	80022ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d024      	beq.n	80022a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800225e:	e021      	b.n	80022a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002268:	d11e      	bne.n	80022a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800226e:	e01b      	b.n	80022a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d902      	bls.n	800227c <DMA_CheckFifoParam+0xb4>
 8002276:	2b03      	cmp	r3, #3
 8002278:	d003      	beq.n	8002282 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800227a:	e018      	b.n	80022ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      break;
 8002280:	e015      	b.n	80022ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00e      	beq.n	80022ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
      break;
 8002292:	e00b      	b.n	80022ac <DMA_CheckFifoParam+0xe4>
      break;
 8002294:	bf00      	nop
 8002296:	e00a      	b.n	80022ae <DMA_CheckFifoParam+0xe6>
      break;
 8002298:	bf00      	nop
 800229a:	e008      	b.n	80022ae <DMA_CheckFifoParam+0xe6>
      break;
 800229c:	bf00      	nop
 800229e:	e006      	b.n	80022ae <DMA_CheckFifoParam+0xe6>
      break;
 80022a0:	bf00      	nop
 80022a2:	e004      	b.n	80022ae <DMA_CheckFifoParam+0xe6>
      break;
 80022a4:	bf00      	nop
 80022a6:	e002      	b.n	80022ae <DMA_CheckFifoParam+0xe6>
      break;   
 80022a8:	bf00      	nop
 80022aa:	e000      	b.n	80022ae <DMA_CheckFifoParam+0xe6>
      break;
 80022ac:	bf00      	nop
    }
  } 
  
  return status; 
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e16b      	b.n	80025b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d8:	2201      	movs	r2, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f040 815a 	bne.w	80025aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d00b      	beq.n	8002316 <HAL_GPIO_Init+0x5a>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d007      	beq.n	8002316 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800230a:	2b11      	cmp	r3, #17
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b12      	cmp	r3, #18
 8002314:	d130      	bne.n	8002378 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800234c:	2201      	movs	r2, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 0201 	and.w	r2, r3, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0xfc>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b12      	cmp	r3, #18
 80023b6:	d123      	bne.n	8002400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	08da      	lsrs	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3208      	adds	r2, #8
 80023c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	220f      	movs	r2, #15
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	08da      	lsrs	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3208      	adds	r2, #8
 80023fa:	69b9      	ldr	r1, [r7, #24]
 80023fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0203 	and.w	r2, r3, #3
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80b4 	beq.w	80025aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <HAL_GPIO_Init+0x308>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	4a5e      	ldr	r2, [pc, #376]	; (80025c4 <HAL_GPIO_Init+0x308>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002450:	6453      	str	r3, [r2, #68]	; 0x44
 8002452:	4b5c      	ldr	r3, [pc, #368]	; (80025c4 <HAL_GPIO_Init+0x308>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245e:	4a5a      	ldr	r2, [pc, #360]	; (80025c8 <HAL_GPIO_Init+0x30c>)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a51      	ldr	r2, [pc, #324]	; (80025cc <HAL_GPIO_Init+0x310>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d02b      	beq.n	80024e2 <HAL_GPIO_Init+0x226>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a50      	ldr	r2, [pc, #320]	; (80025d0 <HAL_GPIO_Init+0x314>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d025      	beq.n	80024de <HAL_GPIO_Init+0x222>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4f      	ldr	r2, [pc, #316]	; (80025d4 <HAL_GPIO_Init+0x318>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d01f      	beq.n	80024da <HAL_GPIO_Init+0x21e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4e      	ldr	r2, [pc, #312]	; (80025d8 <HAL_GPIO_Init+0x31c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d019      	beq.n	80024d6 <HAL_GPIO_Init+0x21a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4d      	ldr	r2, [pc, #308]	; (80025dc <HAL_GPIO_Init+0x320>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_GPIO_Init+0x216>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4c      	ldr	r2, [pc, #304]	; (80025e0 <HAL_GPIO_Init+0x324>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00d      	beq.n	80024ce <HAL_GPIO_Init+0x212>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4b      	ldr	r2, [pc, #300]	; (80025e4 <HAL_GPIO_Init+0x328>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <HAL_GPIO_Init+0x20e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4a      	ldr	r2, [pc, #296]	; (80025e8 <HAL_GPIO_Init+0x32c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d101      	bne.n	80024c6 <HAL_GPIO_Init+0x20a>
 80024c2:	2307      	movs	r3, #7
 80024c4:	e00e      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024c6:	2308      	movs	r3, #8
 80024c8:	e00c      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024ca:	2306      	movs	r3, #6
 80024cc:	e00a      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024ce:	2305      	movs	r3, #5
 80024d0:	e008      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e004      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024da:	2302      	movs	r3, #2
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024e2:	2300      	movs	r3, #0
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	f002 0203 	and.w	r2, r2, #3
 80024ea:	0092      	lsls	r2, r2, #2
 80024ec:	4093      	lsls	r3, r2
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f4:	4934      	ldr	r1, [pc, #208]	; (80025c8 <HAL_GPIO_Init+0x30c>)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002502:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <HAL_GPIO_Init+0x330>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002526:	4a31      	ldr	r2, [pc, #196]	; (80025ec <HAL_GPIO_Init+0x330>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800252c:	4b2f      	ldr	r3, [pc, #188]	; (80025ec <HAL_GPIO_Init+0x330>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002550:	4a26      	ldr	r2, [pc, #152]	; (80025ec <HAL_GPIO_Init+0x330>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002556:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_GPIO_Init+0x330>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800257a:	4a1c      	ldr	r2, [pc, #112]	; (80025ec <HAL_GPIO_Init+0x330>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002580:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <HAL_GPIO_Init+0x330>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a4:	4a11      	ldr	r2, [pc, #68]	; (80025ec <HAL_GPIO_Init+0x330>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	f67f ae90 	bls.w	80022d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b8:	bf00      	nop
 80025ba:	3724      	adds	r7, #36	; 0x24
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020c00 	.word	0x40020c00
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40021400 	.word	0x40021400
 80025e4:	40021800 	.word	0x40021800
 80025e8:	40021c00 	.word	0x40021c00
 80025ec:	40013c00 	.word	0x40013c00

080025f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	e001      	b.n	8002612 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800263c:	e003      	b.n	8002646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	887b      	ldrh	r3, [r7, #2]
 8002664:	401a      	ands	r2, r3
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	429a      	cmp	r2, r3
 800266a:	d104      	bne.n	8002676 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800266c:	887b      	ldrh	r3, [r7, #2]
 800266e:	041a      	lsls	r2, r3, #16
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002674:	e002      	b.n	800267c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	619a      	str	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e128      	b.n	80028ec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a90      	ldr	r2, [pc, #576]	; (80028f4 <HAL_I2S_Init+0x26c>)
 80026b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7fe fe97 	bl	80013e8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80026d0:	f023 030f 	bic.w	r3, r3, #15
 80026d4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2202      	movs	r2, #2
 80026dc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d060      	beq.n	80027a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80026ee:	2310      	movs	r3, #16
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e001      	b.n	80026f8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d802      	bhi.n	8002706 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002706:	2001      	movs	r0, #1
 8002708:	f002 fe6e 	bl	80053e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800270c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002716:	d125      	bne.n	8002764 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d010      	beq.n	8002742 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	fbb2 f2f3 	udiv	r2, r2, r3
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	461a      	mov	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	3305      	adds	r3, #5
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	e01f      	b.n	8002782 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	fbb2 f2f3 	udiv	r2, r2, r3
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	461a      	mov	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	3305      	adds	r3, #5
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	e00e      	b.n	8002782 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	fbb2 f2f3 	udiv	r2, r2, r3
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	461a      	mov	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	3305      	adds	r3, #5
 8002780:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4a5c      	ldr	r2, [pc, #368]	; (80028f8 <HAL_I2S_Init+0x270>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	08db      	lsrs	r3, r3, #3
 800278c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	e003      	b.n	80027b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80027a8:	2302      	movs	r3, #2
 80027aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d902      	bls.n	80027bc <HAL_I2S_Init+0x134>
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	2bff      	cmp	r3, #255	; 0xff
 80027ba:	d907      	bls.n	80027cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f043 0210 	orr.w	r2, r3, #16
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e08f      	b.n	80028ec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	ea42 0103 	orr.w	r1, r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	430a      	orrs	r2, r1
 80027de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027ea:	f023 030f 	bic.w	r3, r3, #15
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6851      	ldr	r1, [r2, #4]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6892      	ldr	r2, [r2, #8]
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	68d2      	ldr	r2, [r2, #12]
 80027fc:	4311      	orrs	r1, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6992      	ldr	r2, [r2, #24]
 8002802:	430a      	orrs	r2, r1
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800280e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d161      	bne.n	80028dc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a38      	ldr	r2, [pc, #224]	; (80028fc <HAL_I2S_Init+0x274>)
 800281c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a37      	ldr	r2, [pc, #220]	; (8002900 <HAL_I2S_Init+0x278>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d101      	bne.n	800282c <HAL_I2S_Init+0x1a4>
 8002828:	4b36      	ldr	r3, [pc, #216]	; (8002904 <HAL_I2S_Init+0x27c>)
 800282a:	e001      	b.n	8002830 <HAL_I2S_Init+0x1a8>
 800282c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	4932      	ldr	r1, [pc, #200]	; (8002900 <HAL_I2S_Init+0x278>)
 8002838:	428a      	cmp	r2, r1
 800283a:	d101      	bne.n	8002840 <HAL_I2S_Init+0x1b8>
 800283c:	4a31      	ldr	r2, [pc, #196]	; (8002904 <HAL_I2S_Init+0x27c>)
 800283e:	e001      	b.n	8002844 <HAL_I2S_Init+0x1bc>
 8002840:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002844:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002848:	f023 030f 	bic.w	r3, r3, #15
 800284c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <HAL_I2S_Init+0x278>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_I2S_Init+0x1d4>
 8002858:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_I2S_Init+0x27c>)
 800285a:	e001      	b.n	8002860 <HAL_I2S_Init+0x1d8>
 800285c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002860:	2202      	movs	r2, #2
 8002862:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a25      	ldr	r2, [pc, #148]	; (8002900 <HAL_I2S_Init+0x278>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_I2S_Init+0x1ea>
 800286e:	4b25      	ldr	r3, [pc, #148]	; (8002904 <HAL_I2S_Init+0x27c>)
 8002870:	e001      	b.n	8002876 <HAL_I2S_Init+0x1ee>
 8002872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002882:	d003      	beq.n	800288c <HAL_I2S_Init+0x204>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d103      	bne.n	8002894 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800288c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	e001      	b.n	8002898 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	b299      	uxth	r1, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80028ae:	4303      	orrs	r3, r0
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	430b      	orrs	r3, r1
 80028b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80028b6:	4313      	orrs	r3, r2
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	897b      	ldrh	r3, [r7, #10]
 80028bc:	4313      	orrs	r3, r2
 80028be:	b29b      	uxth	r3, r3
 80028c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028c4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <HAL_I2S_Init+0x278>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d101      	bne.n	80028d4 <HAL_I2S_Init+0x24c>
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <HAL_I2S_Init+0x27c>)
 80028d2:	e001      	b.n	80028d8 <HAL_I2S_Init+0x250>
 80028d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028d8:	897a      	ldrh	r2, [r7, #10]
 80028da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	08002c0d 	.word	0x08002c0d
 80028f8:	cccccccd 	.word	0xcccccccd
 80028fc:	08003035 	.word	0x08003035
 8002900:	40003800 	.word	0x40003800
 8002904:	40003400 	.word	0x40003400

08002908 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	4613      	mov	r3, r2
 8002914:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <HAL_I2S_Receive_DMA+0x1a>
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e0a1      	b.n	8002a6a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_I2S_Receive_DMA+0x2e>
 8002932:	2302      	movs	r3, #2
 8002934:	e099      	b.n	8002a6a <HAL_I2S_Receive_DMA+0x162>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d005      	beq.n	8002956 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
 8002954:	e089      	b.n	8002a6a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2204      	movs	r2, #4
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d002      	beq.n	8002982 <HAL_I2S_Receive_DMA+0x7a>
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d10a      	bne.n	8002998 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	865a      	strh	r2, [r3, #50]	; 0x32
 8002996:	e005      	b.n	80029a4 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	88fa      	ldrh	r2, [r7, #6]
 800299c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	88fa      	ldrh	r2, [r7, #6]
 80029a2:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a8:	4a32      	ldr	r2, [pc, #200]	; (8002a74 <HAL_I2S_Receive_DMA+0x16c>)
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b0:	4a31      	ldr	r2, [pc, #196]	; (8002a78 <HAL_I2S_Receive_DMA+0x170>)
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b8:	4a30      	ldr	r2, [pc, #192]	; (8002a7c <HAL_I2S_Receive_DMA+0x174>)
 80029ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029ca:	d10a      	bne.n	80029e2 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	330c      	adds	r3, #12
 80029ec:	4619      	mov	r1, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80029f8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80029fa:	f7ff f99f 	bl	8001d3c <HAL_DMA_Start_IT>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00f      	beq.n	8002a24 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	f043 0208 	orr.w	r2, r3, #8
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e022      	b.n	8002a6a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d107      	bne.n	8002a42 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69da      	ldr	r2, [r3, #28]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a40:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d107      	bne.n	8002a60 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	08002aeb 	.word	0x08002aeb
 8002a78:	08002aa9 	.word	0x08002aa9
 8002a7c:	08002b07 	.word	0x08002b07

08002a80 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10e      	bne.n	8002adc <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f7fe fb5f 	bl	80011a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7fe fb3b 	bl	8001174 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0203 	bic.w	r2, r2, #3
 8002b22:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f043 0208 	orr.w	r2, r3, #8
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff ffa5 	bl	8002a94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	881a      	ldrh	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	1c9a      	adds	r2, r3, #2
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10e      	bne.n	8002ba6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b96:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ff6d 	bl	8002a80 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	b292      	uxth	r2, r2
 8002bc2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	1c9a      	adds	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10e      	bne.n	8002c04 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bf4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe face 	bl	80011a0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d13a      	bne.n	8002c9e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d109      	bne.n	8002c46 <I2S_IRQHandler+0x3a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d102      	bne.n	8002c46 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ffb4 	bl	8002bae <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	2b40      	cmp	r3, #64	; 0x40
 8002c4e:	d126      	bne.n	8002c9e <I2S_IRQHandler+0x92>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d11f      	bne.n	8002c9e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c6c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	f043 0202 	orr.w	r2, r3, #2
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff fefb 	bl	8002a94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d136      	bne.n	8002d18 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d109      	bne.n	8002cc8 <I2S_IRQHandler+0xbc>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbe:	2b80      	cmp	r3, #128	; 0x80
 8002cc0:	d102      	bne.n	8002cc8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ff45 	bl	8002b52 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d122      	bne.n	8002d18 <I2S_IRQHandler+0x10c>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d11b      	bne.n	8002d18 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cee:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f043 0204 	orr.w	r2, r3, #4
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff febe 	bl	8002a94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d002      	beq.n	8002d4c <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
 8002d48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d4a:	e160      	b.n	800300e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002d58:	887b      	ldrh	r3, [r7, #2]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e15a      	b.n	8003018 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e152      	b.n	8003018 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d002      	beq.n	8002d9e <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b05      	cmp	r3, #5
 8002d9c:	d114      	bne.n	8002dc8 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002da8:	887b      	ldrh	r3, [r7, #2]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002dbc:	887b      	ldrh	r3, [r7, #2]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	865a      	strh	r2, [r3, #50]	; 0x32
 8002dc6:	e00b      	b.n	8002de0 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	887a      	ldrh	r2, [r7, #2]
 8002dcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	887a      	ldrh	r2, [r7, #2]
 8002dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	887a      	ldrh	r2, [r7, #2]
 8002dde:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2205      	movs	r2, #5
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	4a8b      	ldr	r2, [pc, #556]	; (8003020 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	4a8a      	ldr	r2, [pc, #552]	; (8003024 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002dfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	4a89      	ldr	r2, [pc, #548]	; (8003028 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002e04:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	4a85      	ldr	r2, [pc, #532]	; (8003020 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	4a84      	ldr	r2, [pc, #528]	; (8003024 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002e14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	4a83      	ldr	r2, [pc, #524]	; (8003028 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002e1c:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e28:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d002      	beq.n	8002e38 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d16b      	bne.n	8002f10 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a79      	ldr	r2, [pc, #484]	; (800302c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002e4a:	4b79      	ldr	r3, [pc, #484]	; (8003030 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e4c:	e001      	b.n	8002e52 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002e4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e52:	330c      	adds	r3, #12
 8002e54:	4619      	mov	r1, r3
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f7fe ff6c 	bl	8001d3c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a70      	ldr	r2, [pc, #448]	; (800302c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002e6e:	4b70      	ldr	r3, [pc, #448]	; (8003030 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e70:	e001      	b.n	8002e76 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	496b      	ldr	r1, [pc, #428]	; (800302c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e7e:	428b      	cmp	r3, r1
 8002e80:	d101      	bne.n	8002e86 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002e82:	4b6b      	ldr	r3, [pc, #428]	; (8003030 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e84:	e001      	b.n	8002e8a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002e86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002e90:	f107 0308 	add.w	r3, r7, #8
 8002e94:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	6819      	ldr	r1, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f7fe ff46 	bl	8001d3c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0202 	orr.w	r2, r2, #2
 8002ebe:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ece:	f000 809e 	beq.w	800300e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a55      	ldr	r2, [pc, #340]	; (800302c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d101      	bne.n	8002ee0 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002edc:	4b54      	ldr	r3, [pc, #336]	; (8003030 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ede:	e001      	b.n	8002ee4 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002ee0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4950      	ldr	r1, [pc, #320]	; (800302c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002eec:	428b      	cmp	r3, r1
 8002eee:	d101      	bne.n	8002ef4 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002ef0:	4b4f      	ldr	r3, [pc, #316]	; (8003030 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ef2:	e001      	b.n	8002ef8 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002ef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002efc:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f0c:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002f0e:	e07e      	b.n	800300e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f1e:	d10a      	bne.n	8002f36 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002f36:	f107 0308 	add.w	r3, r7, #8
 8002f3a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6819      	ldr	r1, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a38      	ldr	r2, [pc, #224]	; (800302c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002f4e:	4b38      	ldr	r3, [pc, #224]	; (8003030 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f50:	e001      	b.n	8002f56 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f56:	330c      	adds	r3, #12
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f7fe feec 	bl	8001d3c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a30      	ldr	r2, [pc, #192]	; (800302c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002f6e:	4b30      	ldr	r3, [pc, #192]	; (8003030 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f70:	e001      	b.n	8002f76 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	492b      	ldr	r1, [pc, #172]	; (800302c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f7e:	428b      	cmp	r3, r1
 8002f80:	d101      	bne.n	8002f86 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002f82:	4b2b      	ldr	r3, [pc, #172]	; (8003030 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f84:	e001      	b.n	8002f8a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002f86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f8a:	f042 0202 	orr.w	r2, r2, #2
 8002f8e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	f7fe fec7 	bl	8001d3c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fcc:	d01e      	beq.n	800300c <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a16      	ldr	r2, [pc, #88]	; (800302c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002fd8:	4b15      	ldr	r3, [pc, #84]	; (8003030 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002fda:	e001      	b.n	8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002fdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4911      	ldr	r1, [pc, #68]	; (800302c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002fe8:	428b      	cmp	r3, r1
 8002fea:	d101      	bne.n	8002ff0 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002fec:	4b10      	ldr	r3, [pc, #64]	; (8003030 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002fee:	e001      	b.n	8002ff4 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002ff0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ff8:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003008:	61da      	str	r2, [r3, #28]
 800300a:	e000      	b.n	800300e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 800300c:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8003016:	7ffb      	ldrb	r3, [r7, #31]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3720      	adds	r7, #32
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	080032dd 	.word	0x080032dd
 8003024:	080032f9 	.word	0x080032f9
 8003028:	08003431 	.word	0x08003431
 800302c:	40003800 	.word	0x40003800
 8003030:	40003400 	.word	0x40003400

08003034 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4aa2      	ldr	r2, [pc, #648]	; (80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d101      	bne.n	8003052 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800304e:	4ba2      	ldr	r3, [pc, #648]	; (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003050:	e001      	b.n	8003056 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a9b      	ldr	r2, [pc, #620]	; (80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d101      	bne.n	8003070 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800306c:	4b9a      	ldr	r3, [pc, #616]	; (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800306e:	e001      	b.n	8003074 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003070:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003080:	d004      	beq.n	800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 8099 	bne.w	80031be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b02      	cmp	r3, #2
 8003094:	d107      	bne.n	80030a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fa05 	bl	80034b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d107      	bne.n	80030c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 faa8 	bl	8003610 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	2b40      	cmp	r3, #64	; 0x40
 80030c8:	d13a      	bne.n	8003140 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d035      	beq.n	8003140 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a7e      	ldr	r2, [pc, #504]	; (80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d101      	bne.n	80030e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80030de:	4b7e      	ldr	r3, [pc, #504]	; (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030e0:	e001      	b.n	80030e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80030e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4979      	ldr	r1, [pc, #484]	; (80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030ee:	428b      	cmp	r3, r1
 80030f0:	d101      	bne.n	80030f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80030f2:	4b79      	ldr	r3, [pc, #484]	; (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030f4:	e001      	b.n	80030fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80030f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030fe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800310e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	f043 0202 	orr.w	r2, r3, #2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff fcaa 	bl	8002a94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b08      	cmp	r3, #8
 8003148:	f040 80be 	bne.w	80032c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80b8 	beq.w	80032c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003166:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a59      	ldr	r2, [pc, #356]	; (80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003172:	4b59      	ldr	r3, [pc, #356]	; (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003174:	e001      	b.n	800317a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003176:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4954      	ldr	r1, [pc, #336]	; (80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003182:	428b      	cmp	r3, r1
 8003184:	d101      	bne.n	800318a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003186:	4b54      	ldr	r3, [pc, #336]	; (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003188:	e001      	b.n	800318e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800318a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800318e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003192:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	f043 0204 	orr.w	r2, r3, #4
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fc6c 	bl	8002a94 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031bc:	e084      	b.n	80032c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d107      	bne.n	80031d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f99e 	bl	8003514 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d107      	bne.n	80031f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f9dd 	bl	80035ac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b40      	cmp	r3, #64	; 0x40
 80031fa:	d12f      	bne.n	800325c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d02a      	beq.n	800325c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003214:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2e      	ldr	r2, [pc, #184]	; (80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003220:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003222:	e001      	b.n	8003228 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003224:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4929      	ldr	r1, [pc, #164]	; (80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003230:	428b      	cmp	r3, r1
 8003232:	d101      	bne.n	8003238 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003234:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003236:	e001      	b.n	800323c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003238:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800323c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003240:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f043 0202 	orr.w	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff fc1c 	bl	8002a94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b08      	cmp	r3, #8
 8003264:	d131      	bne.n	80032ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b00      	cmp	r3, #0
 800326e:	d02c      	beq.n	80032ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800327c:	e001      	b.n	8003282 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800327e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4912      	ldr	r1, [pc, #72]	; (80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800328a:	428b      	cmp	r3, r1
 800328c:	d101      	bne.n	8003292 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003290:	e001      	b.n	8003296 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003296:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800329a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032aa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	f043 0204 	orr.w	r2, r3, #4
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff fbe7 	bl	8002a94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032c6:	e000      	b.n	80032ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80032c8:	bf00      	nop
}
 80032ca:	bf00      	nop
 80032cc:	3720      	adds	r7, #32
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40003800 	.word	0x40003800
 80032d8:	40003400 	.word	0x40003400

080032dc <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f7fd fefe 	bl	80010ec <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 8084 	bne.w	8003418 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	429a      	cmp	r2, r3
 8003318:	d13c      	bne.n	8003394 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003328:	d006      	beq.n	8003338 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003334:	2b00      	cmp	r3, #0
 8003336:	d116      	bne.n	8003366 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a3a      	ldr	r2, [pc, #232]	; (8003428 <I2SEx_TxRxDMACplt+0x130>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d101      	bne.n	8003346 <I2SEx_TxRxDMACplt+0x4e>
 8003342:	4b3a      	ldr	r3, [pc, #232]	; (800342c <I2SEx_TxRxDMACplt+0x134>)
 8003344:	e001      	b.n	800334a <I2SEx_TxRxDMACplt+0x52>
 8003346:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4935      	ldr	r1, [pc, #212]	; (8003428 <I2SEx_TxRxDMACplt+0x130>)
 8003352:	428b      	cmp	r3, r1
 8003354:	d101      	bne.n	800335a <I2SEx_TxRxDMACplt+0x62>
 8003356:	4b35      	ldr	r3, [pc, #212]	; (800342c <I2SEx_TxRxDMACplt+0x134>)
 8003358:	e001      	b.n	800335e <I2SEx_TxRxDMACplt+0x66>
 800335a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	e007      	b.n	8003376 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0201 	bic.w	r2, r2, #1
 8003374:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7fd fece 	bl	8001130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	429a      	cmp	r2, r3
 800339c:	d13c      	bne.n	8003418 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ac:	d006      	beq.n	80033bc <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d108      	bne.n	80033ce <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0202 	bic.w	r2, r2, #2
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	e015      	b.n	80033fa <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a15      	ldr	r2, [pc, #84]	; (8003428 <I2SEx_TxRxDMACplt+0x130>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d101      	bne.n	80033dc <I2SEx_TxRxDMACplt+0xe4>
 80033d8:	4b14      	ldr	r3, [pc, #80]	; (800342c <I2SEx_TxRxDMACplt+0x134>)
 80033da:	e001      	b.n	80033e0 <I2SEx_TxRxDMACplt+0xe8>
 80033dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4910      	ldr	r1, [pc, #64]	; (8003428 <I2SEx_TxRxDMACplt+0x130>)
 80033e8:	428b      	cmp	r3, r1
 80033ea:	d101      	bne.n	80033f0 <I2SEx_TxRxDMACplt+0xf8>
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <I2SEx_TxRxDMACplt+0x134>)
 80033ee:	e001      	b.n	80033f4 <I2SEx_TxRxDMACplt+0xfc>
 80033f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f4:	f022 0202 	bic.w	r2, r2, #2
 80033f8:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7fd fe8c 	bl	8001130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7fd fe89 	bl	8001130 <HAL_I2SEx_TxRxCpltCallback>
}
 800341e:	bf00      	nop
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40003800 	.word	0x40003800
 800342c:	40003400 	.word	0x40003400

08003430 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0203 	bic.w	r2, r2, #3
 800344c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <I2SEx_TxRxDMAError+0x78>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d101      	bne.n	800345c <I2SEx_TxRxDMAError+0x2c>
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <I2SEx_TxRxDMAError+0x7c>)
 800345a:	e001      	b.n	8003460 <I2SEx_TxRxDMAError+0x30>
 800345c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4910      	ldr	r1, [pc, #64]	; (80034a8 <I2SEx_TxRxDMAError+0x78>)
 8003468:	428b      	cmp	r3, r1
 800346a:	d101      	bne.n	8003470 <I2SEx_TxRxDMAError+0x40>
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <I2SEx_TxRxDMAError+0x7c>)
 800346e:	e001      	b.n	8003474 <I2SEx_TxRxDMAError+0x44>
 8003470:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003474:	f022 0203 	bic.w	r2, r2, #3
 8003478:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f043 0208 	orr.w	r2, r3, #8
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7ff fafa 	bl	8002a94 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80034a0:	bf00      	nop
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40003800 	.word	0x40003800
 80034ac:	40003400 	.word	0x40003400

080034b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	1c99      	adds	r1, r3, #2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6251      	str	r1, [r2, #36]	; 0x24
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d113      	bne.n	800350a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d106      	bne.n	800350a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fd fe13 	bl	8001130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	1c99      	adds	r1, r3, #2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6251      	str	r1, [r2, #36]	; 0x24
 8003526:	8819      	ldrh	r1, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1d      	ldr	r2, [pc, #116]	; (80035a4 <I2SEx_TxISR_I2SExt+0x90>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <I2SEx_TxISR_I2SExt+0x22>
 8003532:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <I2SEx_TxISR_I2SExt+0x94>)
 8003534:	e001      	b.n	800353a <I2SEx_TxISR_I2SExt+0x26>
 8003536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800353a:	460a      	mov	r2, r1
 800353c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d121      	bne.n	800359a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <I2SEx_TxISR_I2SExt+0x90>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d101      	bne.n	8003564 <I2SEx_TxISR_I2SExt+0x50>
 8003560:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <I2SEx_TxISR_I2SExt+0x94>)
 8003562:	e001      	b.n	8003568 <I2SEx_TxISR_I2SExt+0x54>
 8003564:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	490d      	ldr	r1, [pc, #52]	; (80035a4 <I2SEx_TxISR_I2SExt+0x90>)
 8003570:	428b      	cmp	r3, r1
 8003572:	d101      	bne.n	8003578 <I2SEx_TxISR_I2SExt+0x64>
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <I2SEx_TxISR_I2SExt+0x94>)
 8003576:	e001      	b.n	800357c <I2SEx_TxISR_I2SExt+0x68>
 8003578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003580:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fd fdcb 	bl	8001130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40003800 	.word	0x40003800
 80035a8:	40003400 	.word	0x40003400

080035ac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68d8      	ldr	r0, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	1c99      	adds	r1, r3, #2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80035c4:	b282      	uxth	r2, r0
 80035c6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d113      	bne.n	8003608 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fd fd94 	bl	8001130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a20      	ldr	r2, [pc, #128]	; (80036a0 <I2SEx_RxISR_I2SExt+0x90>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <I2SEx_RxISR_I2SExt+0x16>
 8003622:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <I2SEx_RxISR_I2SExt+0x94>)
 8003624:	e001      	b.n	800362a <I2SEx_RxISR_I2SExt+0x1a>
 8003626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800362a:	68d8      	ldr	r0, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	1c99      	adds	r1, r3, #2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003636:	b282      	uxth	r2, r0
 8003638:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d121      	bne.n	8003696 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <I2SEx_RxISR_I2SExt+0x90>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d101      	bne.n	8003660 <I2SEx_RxISR_I2SExt+0x50>
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <I2SEx_RxISR_I2SExt+0x94>)
 800365e:	e001      	b.n	8003664 <I2SEx_RxISR_I2SExt+0x54>
 8003660:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	490d      	ldr	r1, [pc, #52]	; (80036a0 <I2SEx_RxISR_I2SExt+0x90>)
 800366c:	428b      	cmp	r3, r1
 800366e:	d101      	bne.n	8003674 <I2SEx_RxISR_I2SExt+0x64>
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <I2SEx_RxISR_I2SExt+0x94>)
 8003672:	e001      	b.n	8003678 <I2SEx_RxISR_I2SExt+0x68>
 8003674:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003678:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800367c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d106      	bne.n	8003696 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7fd fd4d 	bl	8001130 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40003800 	.word	0x40003800
 80036a4:	40003400 	.word	0x40003400

080036a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036aa:	b08f      	sub	sp, #60	; 0x3c
 80036ac:	af0a      	add	r7, sp, #40	; 0x28
 80036ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e10f      	b.n	80038da <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d106      	bne.n	80036da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f005 fb63 	bl	8008da0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2203      	movs	r2, #3
 80036de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 ffe6 	bl	80056ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	687e      	ldr	r6, [r7, #4]
 8003706:	466d      	mov	r5, sp
 8003708:	f106 0410 	add.w	r4, r6, #16
 800370c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800370e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003714:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003718:	e885 0003 	stmia.w	r5, {r0, r1}
 800371c:	1d33      	adds	r3, r6, #4
 800371e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003720:	6838      	ldr	r0, [r7, #0]
 8003722:	f001 febd 	bl	80054a0 <USB_CoreInit>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0d0      	b.n	80038da <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f001 ffd4 	bl	80056ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003744:	2300      	movs	r3, #0
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	e04a      	b.n	80037e0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	333d      	adds	r3, #61	; 0x3d
 800375a:	2201      	movs	r2, #1
 800375c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	333c      	adds	r3, #60	; 0x3c
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	b298      	uxth	r0, r3
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	3342      	adds	r3, #66	; 0x42
 8003786:	4602      	mov	r2, r0
 8003788:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800378a:	7bfa      	ldrb	r2, [r7, #15]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	333f      	adds	r3, #63	; 0x3f
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800379e:	7bfa      	ldrb	r2, [r7, #15]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	3344      	adds	r3, #68	; 0x44
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037b2:	7bfa      	ldrb	r2, [r7, #15]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	3348      	adds	r3, #72	; 0x48
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	3350      	adds	r3, #80	; 0x50
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	3301      	adds	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d3af      	bcc.n	800374a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
 80037ee:	e044      	b.n	800387a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	3301      	adds	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	7bfa      	ldrb	r2, [r7, #15]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	429a      	cmp	r2, r3
 8003882:	d3b5      	bcc.n	80037f0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	687e      	ldr	r6, [r7, #4]
 800388c:	466d      	mov	r5, sp
 800388e:	f106 0410 	add.w	r4, r6, #16
 8003892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800389a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800389e:	e885 0003 	stmia.w	r5, {r0, r1}
 80038a2:	1d33      	adds	r3, r6, #4
 80038a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038a6:	6838      	ldr	r0, [r7, #0]
 80038a8:	f001 ff4a 	bl	8005740 <USB_DevInit>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2202      	movs	r2, #2
 80038b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e00d      	b.n	80038da <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f002 ff92 	bl	80067fc <USB_DevDisconnect>

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_PCD_Start+0x1c>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e020      	b.n	8003940 <HAL_PCD_Start+0x5e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	2b01      	cmp	r3, #1
 800390c:	d109      	bne.n	8003922 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003912:	2b01      	cmp	r3, #1
 8003914:	d005      	beq.n	8003922 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f001 febe 	bl	80056a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f002 ff42 	bl	80067ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b08d      	sub	sp, #52	; 0x34
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f003 f800 	bl	8006964 <USB_GetMode>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	f040 839d 	bne.w	80040a6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f002 ff64 	bl	800683e <USB_ReadInterrupts>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 8393 	beq.w	80040a4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f002 ff5b 	bl	800683e <USB_ReadInterrupts>
 8003988:	4603      	mov	r3, r0
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d107      	bne.n	80039a2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f002 0202 	and.w	r2, r2, #2
 80039a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f002 ff49 	bl	800683e <USB_ReadInterrupts>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d161      	bne.n	8003a7a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699a      	ldr	r2, [r3, #24]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0210 	bic.w	r2, r2, #16
 80039c4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f003 020f 	and.w	r2, r3, #15
 80039d2:	4613      	mov	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	4413      	add	r3, r2
 80039e2:	3304      	adds	r3, #4
 80039e4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	0c5b      	lsrs	r3, r3, #17
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d124      	bne.n	8003a3c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d035      	beq.n	8003a6a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	6a38      	ldr	r0, [r7, #32]
 8003a12:	f002 fdaf 	bl	8006574 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a22:	441a      	add	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a34:	441a      	add	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	619a      	str	r2, [r3, #24]
 8003a3a:	e016      	b.n	8003a6a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	0c5b      	lsrs	r3, r3, #17
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	2b06      	cmp	r3, #6
 8003a46:	d110      	bne.n	8003a6a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a4e:	2208      	movs	r2, #8
 8003a50:	4619      	mov	r1, r3
 8003a52:	6a38      	ldr	r0, [r7, #32]
 8003a54:	f002 fd8e 	bl	8006574 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a64:	441a      	add	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699a      	ldr	r2, [r3, #24]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0210 	orr.w	r2, r2, #16
 8003a78:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 fedd 	bl	800683e <USB_ReadInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a8e:	d16e      	bne.n	8003b6e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f002 fee3 	bl	8006864 <USB_ReadDevAllOutEpInterrupt>
 8003a9e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003aa0:	e062      	b.n	8003b68 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d057      	beq.n	8003b5c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f002 ff08 	bl	80068cc <USB_ReadDevOutEPInterrupt>
 8003abc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00c      	beq.n	8003ae2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003ada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fdb1 	bl	8004644 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00c      	beq.n	8003b06 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af8:	461a      	mov	r2, r3
 8003afa:	2308      	movs	r3, #8
 8003afc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003afe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 feab 	bl	800485c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2310      	movs	r3, #16
 8003b20:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b38:	461a      	mov	r2, r3
 8003b3a:	2320      	movs	r3, #32
 8003b3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b54:	461a      	mov	r2, r3
 8003b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b5a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	3301      	adds	r3, #1
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d199      	bne.n	8003aa2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f002 fe63 	bl	800683e <USB_ReadInterrupts>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b82:	f040 80c0 	bne.w	8003d06 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f002 fe84 	bl	8006898 <USB_ReadDevAllInEpInterrupt>
 8003b90:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b96:	e0b2      	b.n	8003cfe <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80a7 	beq.w	8003cf2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f002 feaa 	bl	8006908 <USB_ReadDevInEPInterrupt>
 8003bb4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d057      	beq.n	8003c70 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	69f9      	ldr	r1, [r7, #28]
 8003bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003be0:	4013      	ands	r3, r2
 8003be2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d132      	bne.n	8003c64 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3348      	adds	r3, #72	; 0x48
 8003c0e:	6819      	ldr	r1, [r3, #0]
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4403      	add	r3, r0
 8003c1e:	3344      	adds	r3, #68	; 0x44
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4419      	add	r1, r3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4403      	add	r3, r0
 8003c32:	3348      	adds	r3, #72	; 0x48
 8003c34:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d113      	bne.n	8003c64 <HAL_PCD_IRQHandler+0x31c>
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	3350      	adds	r3, #80	; 0x50
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d108      	bne.n	8003c64 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2101      	movs	r1, #1
 8003c60:	f002 feb2 	bl	80069c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	4619      	mov	r1, r3
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f005 f927 	bl	8008ebe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d008      	beq.n	8003c8c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c86:	461a      	mov	r2, r3
 8003c88:	2308      	movs	r3, #8
 8003c8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d008      	beq.n	8003cc4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	2340      	movs	r3, #64	; 0x40
 8003cc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2302      	movs	r3, #2
 8003cde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003cea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fc1b 	bl	8004528 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f47f af49 	bne.w	8003b98 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f002 fd97 	bl	800683e <USB_ReadInterrupts>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d1a:	d122      	bne.n	8003d62 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d108      	bne.n	8003d4c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d42:	2100      	movs	r1, #0
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fe27 	bl	8004998 <HAL_PCDEx_LPM_Callback>
 8003d4a:	e002      	b.n	8003d52 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f005 f92d 	bl	8008fac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f002 fd69 	bl	800683e <USB_ReadInterrupts>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d76:	d112      	bne.n	8003d9e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d102      	bne.n	8003d8e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f005 f8e9 	bl	8008f60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d9c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f002 fd4b 	bl	800683e <USB_ReadInterrupts>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db2:	f040 80c7 	bne.w	8003f44 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2110      	movs	r1, #16
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 fe19 	bl	8005a08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dda:	e056      	b.n	8003e8a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	461a      	mov	r2, r3
 8003dea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e00:	0151      	lsls	r1, r2, #5
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	440a      	add	r2, r1
 8003e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e0e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e20:	0151      	lsls	r1, r2, #5
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	440a      	add	r2, r1
 8003e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e42:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e54:	0151      	lsls	r1, r2, #5
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	440a      	add	r2, r1
 8003e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e82:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	3301      	adds	r3, #1
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d3a3      	bcc.n	8003ddc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ea2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ea6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d016      	beq.n	8003ede <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec0:	f043 030b 	orr.w	r3, r3, #11
 8003ec4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed0:	69fa      	ldr	r2, [r7, #28]
 8003ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed6:	f043 030b 	orr.w	r3, r3, #11
 8003eda:	6453      	str	r3, [r2, #68]	; 0x44
 8003edc:	e015      	b.n	8003f0a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ef0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003ef4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f04:	f043 030b 	orr.w	r3, r3, #11
 8003f08:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f18:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f1c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f002 fd4a 	bl	80069c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f002 fc78 	bl	800683e <USB_ReadInterrupts>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f58:	d124      	bne.n	8003fa4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f002 fd0e 	bl	8006980 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 fdae 	bl	8005aca <USB_GetDevSpeed>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	461a      	mov	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681c      	ldr	r4, [r3, #0]
 8003f7a:	f001 f947 	bl	800520c <HAL_RCC_GetHCLKFreq>
 8003f7e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f001 faeb 	bl	8005564 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f004 ffbd 	bl	8008f0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f002 fc48 	bl	800683e <USB_ReadInterrupts>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d10a      	bne.n	8003fce <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f004 ff9a 	bl	8008ef2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f002 0208 	and.w	r2, r2, #8
 8003fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f002 fc33 	bl	800683e <USB_ReadInterrupts>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fe2:	d10f      	bne.n	8004004 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	4619      	mov	r1, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f004 fffc 	bl	8008fec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f002 fc18 	bl	800683e <USB_ReadInterrupts>
 800400e:	4603      	mov	r3, r0
 8004010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004018:	d10f      	bne.n	800403a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	b2db      	uxtb	r3, r3
 8004022:	4619      	mov	r1, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f004 ffcf 	bl	8008fc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f002 fbfd 	bl	800683e <USB_ReadInterrupts>
 8004044:	4603      	mov	r3, r0
 8004046:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800404a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404e:	d10a      	bne.n	8004066 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f004 ffdd 	bl	8009010 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695a      	ldr	r2, [r3, #20]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f002 fbe7 	bl	800683e <USB_ReadInterrupts>
 8004070:	4603      	mov	r3, r0
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b04      	cmp	r3, #4
 8004078:	d115      	bne.n	80040a6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f004 ffcd 	bl	800902c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
 80040a2:	e000      	b.n	80040a6 <HAL_PCD_IRQHandler+0x75e>
      return;
 80040a4:	bf00      	nop
    }
  }
}
 80040a6:	3734      	adds	r7, #52	; 0x34
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd90      	pop	{r4, r7, pc}

080040ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_PCD_SetAddress+0x1a>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e013      	b.n	80040ee <HAL_PCD_SetAddress+0x42>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f002 fb45 	bl	800676e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	4608      	mov	r0, r1
 8004100:	4611      	mov	r1, r2
 8004102:	461a      	mov	r2, r3
 8004104:	4603      	mov	r3, r0
 8004106:	70fb      	strb	r3, [r7, #3]
 8004108:	460b      	mov	r3, r1
 800410a:	803b      	strh	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004118:	2b00      	cmp	r3, #0
 800411a:	da0f      	bge.n	800413c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	f003 020f 	and.w	r2, r3, #15
 8004122:	4613      	mov	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	3338      	adds	r3, #56	; 0x38
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	3304      	adds	r3, #4
 8004132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	705a      	strb	r2, [r3, #1]
 800413a:	e00f      	b.n	800415c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 020f 	and.w	r2, r3, #15
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	3304      	adds	r3, #4
 8004154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	b2da      	uxtb	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004168:	883a      	ldrh	r2, [r7, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	78ba      	ldrb	r2, [r7, #2]
 8004172:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	785b      	ldrb	r3, [r3, #1]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004186:	78bb      	ldrb	r3, [r7, #2]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d102      	bne.n	8004192 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_PCD_EP_Open+0xaa>
 800419c:	2302      	movs	r3, #2
 800419e:	e00e      	b.n	80041be <HAL_PCD_EP_Open+0xc8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68f9      	ldr	r1, [r7, #12]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 fcb0 	bl	8005b14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80041bc:	7afb      	ldrb	r3, [r7, #11]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	460b      	mov	r3, r1
 80041d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	da0f      	bge.n	80041fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	f003 020f 	and.w	r2, r3, #15
 80041e0:	4613      	mov	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	3338      	adds	r3, #56	; 0x38
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	3304      	adds	r3, #4
 80041f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	705a      	strb	r2, [r3, #1]
 80041f8:	e00f      	b.n	800421a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f003 020f 	and.w	r2, r3, #15
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4413      	add	r3, r2
 8004210:	3304      	adds	r3, #4
 8004212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	b2da      	uxtb	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_PCD_EP_Close+0x6e>
 8004230:	2302      	movs	r3, #2
 8004232:	e00e      	b.n	8004252 <HAL_PCD_EP_Close+0x8c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68f9      	ldr	r1, [r7, #12]
 8004242:	4618      	mov	r0, r3
 8004244:	f001 fcee 	bl	8005c24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	460b      	mov	r3, r1
 8004268:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800426a:	7afb      	ldrb	r3, [r7, #11]
 800426c:	f003 020f 	and.w	r2, r3, #15
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	3304      	adds	r3, #4
 8004282:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2200      	movs	r2, #0
 8004294:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2200      	movs	r2, #0
 800429a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800429c:	7afb      	ldrb	r3, [r7, #11]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d102      	bne.n	80042b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042b6:	7afb      	ldrb	r3, [r7, #11]
 80042b8:	f003 030f 	and.w	r3, r3, #15
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d109      	bne.n	80042d4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	6979      	ldr	r1, [r7, #20]
 80042ce:	f001 ffc9 	bl	8006264 <USB_EP0StartXfer>
 80042d2:	e008      	b.n	80042e6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	6979      	ldr	r1, [r7, #20]
 80042e2:	f001 fd7b 	bl	8005ddc <USB_EPStartXfer>
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	f003 020f 	and.w	r2, r3, #15
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	607a      	str	r2, [r7, #4]
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	460b      	mov	r3, r1
 800432e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004330:	7afb      	ldrb	r3, [r7, #11]
 8004332:	f003 020f 	and.w	r2, r3, #15
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	3338      	adds	r3, #56	; 0x38
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	3304      	adds	r3, #4
 8004346:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2200      	movs	r2, #0
 8004358:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2201      	movs	r2, #1
 800435e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004360:	7afb      	ldrb	r3, [r7, #11]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	b2da      	uxtb	r2, r3
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d102      	bne.n	800437a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800437a:	7afb      	ldrb	r3, [r7, #11]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	6979      	ldr	r1, [r7, #20]
 8004392:	f001 ff67 	bl	8006264 <USB_EP0StartXfer>
 8004396:	e008      	b.n	80043aa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	461a      	mov	r2, r3
 80043a4:	6979      	ldr	r1, [r7, #20]
 80043a6:	f001 fd19 	bl	8005ddc <USB_EPStartXfer>
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f003 020f 	and.w	r2, r3, #15
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d901      	bls.n	80043d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e050      	b.n	8004474 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	da0f      	bge.n	80043fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	f003 020f 	and.w	r2, r3, #15
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	3338      	adds	r3, #56	; 0x38
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	3304      	adds	r3, #4
 80043f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	705a      	strb	r2, [r3, #1]
 80043f8:	e00d      	b.n	8004416 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	4613      	mov	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	4413      	add	r3, r2
 800440c:	3304      	adds	r3, #4
 800440e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	b2da      	uxtb	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_PCD_EP_SetStall+0x82>
 8004432:	2302      	movs	r3, #2
 8004434:	e01e      	b.n	8004474 <HAL_PCD_EP_SetStall+0xc0>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68f9      	ldr	r1, [r7, #12]
 8004444:	4618      	mov	r0, r3
 8004446:	f002 f8be 	bl	80065c6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	b2d9      	uxtb	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004464:	461a      	mov	r2, r3
 8004466:	f002 faaf 	bl	80069c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	f003 020f 	and.w	r2, r3, #15
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	429a      	cmp	r2, r3
 8004494:	d901      	bls.n	800449a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e042      	b.n	8004520 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800449a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	da0f      	bge.n	80044c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	f003 020f 	and.w	r2, r3, #15
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	3338      	adds	r3, #56	; 0x38
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	3304      	adds	r3, #4
 80044b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	705a      	strb	r2, [r3, #1]
 80044c0:	e00f      	b.n	80044e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	f003 020f 	and.w	r2, r3, #15
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4413      	add	r3, r2
 80044d8:	3304      	adds	r3, #4
 80044da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_PCD_EP_ClrStall+0x86>
 80044fe:	2302      	movs	r3, #2
 8004500:	e00e      	b.n	8004520 <HAL_PCD_EP_ClrStall+0xa4>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68f9      	ldr	r1, [r7, #12]
 8004510:	4618      	mov	r0, r3
 8004512:	f002 f8c6 	bl	80066a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af02      	add	r7, sp, #8
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	3338      	adds	r3, #56	; 0x38
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	4413      	add	r3, r2
 800454c:	3304      	adds	r3, #4
 800454e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	429a      	cmp	r2, r3
 800455a:	d901      	bls.n	8004560 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e06c      	b.n	800463a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	429a      	cmp	r2, r3
 8004574:	d902      	bls.n	800457c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	3303      	adds	r3, #3
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004584:	e02b      	b.n	80045de <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	429a      	cmp	r2, r3
 800459a:	d902      	bls.n	80045a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3303      	adds	r3, #3
 80045a6:	089b      	lsrs	r3, r3, #2
 80045a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	68d9      	ldr	r1, [r3, #12]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	4603      	mov	r3, r0
 80045c0:	6978      	ldr	r0, [r7, #20]
 80045c2:	f001 ffa2 	bl	800650a <USB_WritePacket>

    ep->xfer_buff  += len;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	441a      	add	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	441a      	add	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d809      	bhi.n	8004608 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d203      	bcs.n	8004608 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1be      	bne.n	8004586 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	429a      	cmp	r2, r3
 8004612:	d811      	bhi.n	8004638 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	2201      	movs	r2, #1
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	43db      	mvns	r3, r3
 800462e:	6939      	ldr	r1, [r7, #16]
 8004630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004634:	4013      	ands	r3, r2
 8004636:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	333c      	adds	r3, #60	; 0x3c
 800465c:	3304      	adds	r3, #4
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b01      	cmp	r3, #1
 8004678:	f040 80a0 	bne.w	80047bc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d015      	beq.n	80046b2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4a72      	ldr	r2, [pc, #456]	; (8004854 <PCD_EP_OutXfrComplete_int+0x210>)
 800468a:	4293      	cmp	r3, r2
 800468c:	f240 80dd 	bls.w	800484a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80d7 	beq.w	800484a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	461a      	mov	r2, r3
 80046aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ae:	6093      	str	r3, [r2, #8]
 80046b0:	e0cb      	b.n	800484a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d009      	beq.n	80046d0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c8:	461a      	mov	r2, r3
 80046ca:	2320      	movs	r3, #32
 80046cc:	6093      	str	r3, [r2, #8]
 80046ce:	e0bc      	b.n	800484a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f040 80b7 	bne.w	800484a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a5d      	ldr	r2, [pc, #372]	; (8004854 <PCD_EP_OutXfrComplete_int+0x210>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d90f      	bls.n	8004704 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fa:	461a      	mov	r2, r3
 80046fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004700:	6093      	str	r3, [r2, #8]
 8004702:	e0a2      	b.n	800484a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004716:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	0159      	lsls	r1, r3, #5
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	440b      	add	r3, r1
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800472a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4403      	add	r3, r0
 800473a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800473e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4403      	add	r3, r0
 8004762:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4419      	add	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	4613      	mov	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4403      	add	r3, r0
 8004778:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800477c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d114      	bne.n	80047ae <PCD_EP_OutXfrComplete_int+0x16a>
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d108      	bne.n	80047ae <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047a6:	461a      	mov	r2, r3
 80047a8:	2101      	movs	r1, #1
 80047aa:	f002 f90d 	bl	80069c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f004 fb67 	bl	8008e88 <HAL_PCD_DataOutStageCallback>
 80047ba:	e046      	b.n	800484a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4a26      	ldr	r2, [pc, #152]	; (8004858 <PCD_EP_OutXfrComplete_int+0x214>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d124      	bne.n	800480e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047da:	461a      	mov	r2, r3
 80047dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e0:	6093      	str	r3, [r2, #8]
 80047e2:	e032      	b.n	800484a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fa:	461a      	mov	r2, r3
 80047fc:	2320      	movs	r3, #32
 80047fe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f004 fb3e 	bl	8008e88 <HAL_PCD_DataOutStageCallback>
 800480c:	e01d      	b.n	800484a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d114      	bne.n	800483e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d108      	bne.n	800483e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004836:	461a      	mov	r2, r3
 8004838:	2100      	movs	r1, #0
 800483a:	f002 f8c5 	bl	80069c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f004 fb1f 	bl	8008e88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	4f54300a 	.word	0x4f54300a
 8004858:	4f54310a 	.word	0x4f54310a

0800485c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	333c      	adds	r3, #60	; 0x3c
 8004874:	3304      	adds	r3, #4
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d90e      	bls.n	80048b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004898:	2b00      	cmp	r3, #0
 800489a:	d009      	beq.n	80048b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a8:	461a      	mov	r2, r3
 80048aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f004 fad7 	bl	8008e64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d90c      	bls.n	80048d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d108      	bne.n	80048d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048d0:	461a      	mov	r2, r3
 80048d2:	2101      	movs	r1, #1
 80048d4:	f002 f878 	bl	80069c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	4f54300a 	.word	0x4f54300a

080048e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	70fb      	strb	r3, [r7, #3]
 80048f4:	4613      	mov	r3, r2
 80048f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d107      	bne.n	8004916 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004906:	883b      	ldrh	r3, [r7, #0]
 8004908:	0419      	lsls	r1, r3, #16
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	430a      	orrs	r2, r1
 8004912:	629a      	str	r2, [r3, #40]	; 0x28
 8004914:	e028      	b.n	8004968 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	0c1b      	lsrs	r3, r3, #16
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	4413      	add	r3, r2
 8004922:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004924:	2300      	movs	r3, #0
 8004926:	73fb      	strb	r3, [r7, #15]
 8004928:	e00d      	b.n	8004946 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	3340      	adds	r3, #64	; 0x40
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	4413      	add	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	3301      	adds	r3, #1
 8004944:	73fb      	strb	r3, [r7, #15]
 8004946:	7bfa      	ldrb	r2, [r7, #15]
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	3b01      	subs	r3, #1
 800494c:	429a      	cmp	r2, r3
 800494e:	d3ec      	bcc.n	800492a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004950:	883b      	ldrh	r3, [r7, #0]
 8004952:	0418      	lsls	r0, r3, #16
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6819      	ldr	r1, [r3, #0]
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	3b01      	subs	r3, #1
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	4302      	orrs	r2, r0
 8004960:	3340      	adds	r3, #64	; 0x40
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	887a      	ldrh	r2, [r7, #2]
 8004988:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e25b      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d075      	beq.n	8004aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ce:	4ba3      	ldr	r3, [pc, #652]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d00c      	beq.n	80049f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049da:	4ba0      	ldr	r3, [pc, #640]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d112      	bne.n	8004a0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049e6:	4b9d      	ldr	r3, [pc, #628]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f2:	d10b      	bne.n	8004a0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f4:	4b99      	ldr	r3, [pc, #612]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d05b      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x108>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d157      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e236      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a14:	d106      	bne.n	8004a24 <HAL_RCC_OscConfig+0x74>
 8004a16:	4b91      	ldr	r3, [pc, #580]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a90      	ldr	r2, [pc, #576]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	e01d      	b.n	8004a60 <HAL_RCC_OscConfig+0xb0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a2c:	d10c      	bne.n	8004a48 <HAL_RCC_OscConfig+0x98>
 8004a2e:	4b8b      	ldr	r3, [pc, #556]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a8a      	ldr	r2, [pc, #552]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	4b88      	ldr	r3, [pc, #544]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a87      	ldr	r2, [pc, #540]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e00b      	b.n	8004a60 <HAL_RCC_OscConfig+0xb0>
 8004a48:	4b84      	ldr	r3, [pc, #528]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a83      	ldr	r2, [pc, #524]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	4b81      	ldr	r3, [pc, #516]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a80      	ldr	r2, [pc, #512]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d013      	beq.n	8004a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a68:	f7fc ff5e 	bl	8001928 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a70:	f7fc ff5a 	bl	8001928 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	; 0x64
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e1fb      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a82:	4b76      	ldr	r3, [pc, #472]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0xc0>
 8004a8e:	e014      	b.n	8004aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a90:	f7fc ff4a 	bl	8001928 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a98:	f7fc ff46 	bl	8001928 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b64      	cmp	r3, #100	; 0x64
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e1e7      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aaa:	4b6c      	ldr	r3, [pc, #432]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0xe8>
 8004ab6:	e000      	b.n	8004aba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d063      	beq.n	8004b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ac6:	4b65      	ldr	r3, [pc, #404]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00b      	beq.n	8004aea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ad2:	4b62      	ldr	r3, [pc, #392]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ada:	2b08      	cmp	r3, #8
 8004adc:	d11c      	bne.n	8004b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ade:	4b5f      	ldr	r3, [pc, #380]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d116      	bne.n	8004b18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aea:	4b5c      	ldr	r3, [pc, #368]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_RCC_OscConfig+0x152>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d001      	beq.n	8004b02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e1bb      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b02:	4b56      	ldr	r3, [pc, #344]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	4952      	ldr	r1, [pc, #328]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b16:	e03a      	b.n	8004b8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d020      	beq.n	8004b62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b20:	4b4f      	ldr	r3, [pc, #316]	; (8004c60 <HAL_RCC_OscConfig+0x2b0>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b26:	f7fc feff 	bl	8001928 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b2e:	f7fc fefb 	bl	8001928 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e19c      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b40:	4b46      	ldr	r3, [pc, #280]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4c:	4b43      	ldr	r3, [pc, #268]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4940      	ldr	r1, [pc, #256]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	600b      	str	r3, [r1, #0]
 8004b60:	e015      	b.n	8004b8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b62:	4b3f      	ldr	r3, [pc, #252]	; (8004c60 <HAL_RCC_OscConfig+0x2b0>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fc fede 	bl	8001928 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b70:	f7fc feda 	bl	8001928 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e17b      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b82:	4b36      	ldr	r3, [pc, #216]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d030      	beq.n	8004bfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d016      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ba2:	4b30      	ldr	r3, [pc, #192]	; (8004c64 <HAL_RCC_OscConfig+0x2b4>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba8:	f7fc febe 	bl	8001928 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb0:	f7fc feba 	bl	8001928 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e15b      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc2:	4b26      	ldr	r3, [pc, #152]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x200>
 8004bce:	e015      	b.n	8004bfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd0:	4b24      	ldr	r3, [pc, #144]	; (8004c64 <HAL_RCC_OscConfig+0x2b4>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd6:	f7fc fea7 	bl	8001928 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bde:	f7fc fea3 	bl	8001928 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e144      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf0:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f0      	bne.n	8004bde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80a0 	beq.w	8004d4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10f      	bne.n	8004c3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	4a0e      	ldr	r2, [pc, #56]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c28:	6413      	str	r3, [r2, #64]	; 0x40
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c32:	60bb      	str	r3, [r7, #8]
 8004c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <HAL_RCC_OscConfig+0x2b8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d121      	bne.n	8004c8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c46:	4b08      	ldr	r3, [pc, #32]	; (8004c68 <HAL_RCC_OscConfig+0x2b8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a07      	ldr	r2, [pc, #28]	; (8004c68 <HAL_RCC_OscConfig+0x2b8>)
 8004c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c52:	f7fc fe69 	bl	8001928 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c58:	e011      	b.n	8004c7e <HAL_RCC_OscConfig+0x2ce>
 8004c5a:	bf00      	nop
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	42470000 	.word	0x42470000
 8004c64:	42470e80 	.word	0x42470e80
 8004c68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6c:	f7fc fe5c 	bl	8001928 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e0fd      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7e:	4b81      	ldr	r3, [pc, #516]	; (8004e84 <HAL_RCC_OscConfig+0x4d4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d106      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x2f0>
 8004c92:	4b7d      	ldr	r3, [pc, #500]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	4a7c      	ldr	r2, [pc, #496]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9e:	e01c      	b.n	8004cda <HAL_RCC_OscConfig+0x32a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	2b05      	cmp	r3, #5
 8004ca6:	d10c      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x312>
 8004ca8:	4b77      	ldr	r3, [pc, #476]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	4a76      	ldr	r2, [pc, #472]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004cae:	f043 0304 	orr.w	r3, r3, #4
 8004cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb4:	4b74      	ldr	r3, [pc, #464]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb8:	4a73      	ldr	r2, [pc, #460]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc0:	e00b      	b.n	8004cda <HAL_RCC_OscConfig+0x32a>
 8004cc2:	4b71      	ldr	r3, [pc, #452]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	4a70      	ldr	r2, [pc, #448]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004cc8:	f023 0301 	bic.w	r3, r3, #1
 8004ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cce:	4b6e      	ldr	r3, [pc, #440]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	4a6d      	ldr	r2, [pc, #436]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004cd4:	f023 0304 	bic.w	r3, r3, #4
 8004cd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d015      	beq.n	8004d0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce2:	f7fc fe21 	bl	8001928 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce8:	e00a      	b.n	8004d00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cea:	f7fc fe1d 	bl	8001928 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e0bc      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d00:	4b61      	ldr	r3, [pc, #388]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0ee      	beq.n	8004cea <HAL_RCC_OscConfig+0x33a>
 8004d0c:	e014      	b.n	8004d38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0e:	f7fc fe0b 	bl	8001928 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d14:	e00a      	b.n	8004d2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d16:	f7fc fe07 	bl	8001928 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e0a6      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d2c:	4b56      	ldr	r3, [pc, #344]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ee      	bne.n	8004d16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d105      	bne.n	8004d4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3e:	4b52      	ldr	r3, [pc, #328]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	4a51      	ldr	r2, [pc, #324]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8092 	beq.w	8004e78 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d54:	4b4c      	ldr	r3, [pc, #304]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 030c 	and.w	r3, r3, #12
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d05c      	beq.n	8004e1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d141      	bne.n	8004dec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d68:	4b48      	ldr	r3, [pc, #288]	; (8004e8c <HAL_RCC_OscConfig+0x4dc>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6e:	f7fc fddb 	bl	8001928 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d76:	f7fc fdd7 	bl	8001928 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e078      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d88:	4b3f      	ldr	r3, [pc, #252]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1f0      	bne.n	8004d76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	019b      	lsls	r3, r3, #6
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	3b01      	subs	r3, #1
 8004dae:	041b      	lsls	r3, r3, #16
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	061b      	lsls	r3, r3, #24
 8004db8:	4933      	ldr	r1, [pc, #204]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dbe:	4b33      	ldr	r3, [pc, #204]	; (8004e8c <HAL_RCC_OscConfig+0x4dc>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc4:	f7fc fdb0 	bl	8001928 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dcc:	f7fc fdac 	bl	8001928 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e04d      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dde:	4b2a      	ldr	r3, [pc, #168]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCC_OscConfig+0x41c>
 8004dea:	e045      	b.n	8004e78 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dec:	4b27      	ldr	r3, [pc, #156]	; (8004e8c <HAL_RCC_OscConfig+0x4dc>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df2:	f7fc fd99 	bl	8001928 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dfa:	f7fc fd95 	bl	8001928 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e036      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0c:	4b1e      	ldr	r3, [pc, #120]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f0      	bne.n	8004dfa <HAL_RCC_OscConfig+0x44a>
 8004e18:	e02e      	b.n	8004e78 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e029      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e26:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <HAL_RCC_OscConfig+0x4d8>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d11c      	bne.n	8004e74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d115      	bne.n	8004e74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e4e:	4013      	ands	r3, r2
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d10d      	bne.n	8004e74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d106      	bne.n	8004e74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d001      	beq.n	8004e78 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	40007000 	.word	0x40007000
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	42470060 	.word	0x42470060

08004e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0cc      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea4:	4b68      	ldr	r3, [pc, #416]	; (8005048 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d90c      	bls.n	8004ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb2:	4b65      	ldr	r3, [pc, #404]	; (8005048 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eba:	4b63      	ldr	r3, [pc, #396]	; (8005048 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0b8      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d020      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ee4:	4b59      	ldr	r3, [pc, #356]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	4a58      	ldr	r2, [pc, #352]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004efc:	4b53      	ldr	r3, [pc, #332]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4a52      	ldr	r2, [pc, #328]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f08:	4b50      	ldr	r3, [pc, #320]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	494d      	ldr	r1, [pc, #308]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d044      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d107      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2e:	4b47      	ldr	r3, [pc, #284]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d119      	bne.n	8004f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e07f      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d003      	beq.n	8004f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d107      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f4e:	4b3f      	ldr	r3, [pc, #252]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e06f      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5e:	4b3b      	ldr	r3, [pc, #236]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e067      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f6e:	4b37      	ldr	r3, [pc, #220]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f023 0203 	bic.w	r2, r3, #3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	4934      	ldr	r1, [pc, #208]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f80:	f7fc fcd2 	bl	8001928 <HAL_GetTick>
 8004f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f86:	e00a      	b.n	8004f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f88:	f7fc fcce 	bl	8001928 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e04f      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9e:	4b2b      	ldr	r3, [pc, #172]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 020c 	and.w	r2, r3, #12
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d1eb      	bne.n	8004f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb0:	4b25      	ldr	r3, [pc, #148]	; (8005048 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d20c      	bcs.n	8004fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fbe:	4b22      	ldr	r3, [pc, #136]	; (8005048 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc6:	4b20      	ldr	r3, [pc, #128]	; (8005048 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e032      	b.n	800503e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fe4:	4b19      	ldr	r3, [pc, #100]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4916      	ldr	r1, [pc, #88]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005002:	4b12      	ldr	r3, [pc, #72]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	490e      	ldr	r1, [pc, #56]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005016:	f000 f821 	bl	800505c <HAL_RCC_GetSysClockFreq>
 800501a:	4601      	mov	r1, r0
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	4a0a      	ldr	r2, [pc, #40]	; (8005050 <HAL_RCC_ClockConfig+0x1c0>)
 8005028:	5cd3      	ldrb	r3, [r2, r3]
 800502a:	fa21 f303 	lsr.w	r3, r1, r3
 800502e:	4a09      	ldr	r2, [pc, #36]	; (8005054 <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <HAL_RCC_ClockConfig+0x1c8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f7fc fc32 	bl	80018a0 <HAL_InitTick>

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40023c00 	.word	0x40023c00
 800504c:	40023800 	.word	0x40023800
 8005050:	0800d210 	.word	0x0800d210
 8005054:	2000040c 	.word	0x2000040c
 8005058:	20000410 	.word	0x20000410

0800505c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800505c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005062:	2300      	movs	r3, #0
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	2300      	movs	r3, #0
 800506c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005072:	4b63      	ldr	r3, [pc, #396]	; (8005200 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 030c 	and.w	r3, r3, #12
 800507a:	2b04      	cmp	r3, #4
 800507c:	d007      	beq.n	800508e <HAL_RCC_GetSysClockFreq+0x32>
 800507e:	2b08      	cmp	r3, #8
 8005080:	d008      	beq.n	8005094 <HAL_RCC_GetSysClockFreq+0x38>
 8005082:	2b00      	cmp	r3, #0
 8005084:	f040 80b4 	bne.w	80051f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005088:	4b5e      	ldr	r3, [pc, #376]	; (8005204 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800508a:	60bb      	str	r3, [r7, #8]
       break;
 800508c:	e0b3      	b.n	80051f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800508e:	4b5e      	ldr	r3, [pc, #376]	; (8005208 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005090:	60bb      	str	r3, [r7, #8]
      break;
 8005092:	e0b0      	b.n	80051f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005094:	4b5a      	ldr	r3, [pc, #360]	; (8005200 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800509c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800509e:	4b58      	ldr	r3, [pc, #352]	; (8005200 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d04a      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050aa:	4b55      	ldr	r3, [pc, #340]	; (8005200 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	099b      	lsrs	r3, r3, #6
 80050b0:	f04f 0400 	mov.w	r4, #0
 80050b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	ea03 0501 	and.w	r5, r3, r1
 80050c0:	ea04 0602 	and.w	r6, r4, r2
 80050c4:	4629      	mov	r1, r5
 80050c6:	4632      	mov	r2, r6
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	f04f 0400 	mov.w	r4, #0
 80050d0:	0154      	lsls	r4, r2, #5
 80050d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050d6:	014b      	lsls	r3, r1, #5
 80050d8:	4619      	mov	r1, r3
 80050da:	4622      	mov	r2, r4
 80050dc:	1b49      	subs	r1, r1, r5
 80050de:	eb62 0206 	sbc.w	r2, r2, r6
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	f04f 0400 	mov.w	r4, #0
 80050ea:	0194      	lsls	r4, r2, #6
 80050ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050f0:	018b      	lsls	r3, r1, #6
 80050f2:	1a5b      	subs	r3, r3, r1
 80050f4:	eb64 0402 	sbc.w	r4, r4, r2
 80050f8:	f04f 0100 	mov.w	r1, #0
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	00e2      	lsls	r2, r4, #3
 8005102:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005106:	00d9      	lsls	r1, r3, #3
 8005108:	460b      	mov	r3, r1
 800510a:	4614      	mov	r4, r2
 800510c:	195b      	adds	r3, r3, r5
 800510e:	eb44 0406 	adc.w	r4, r4, r6
 8005112:	f04f 0100 	mov.w	r1, #0
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	0262      	lsls	r2, r4, #9
 800511c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005120:	0259      	lsls	r1, r3, #9
 8005122:	460b      	mov	r3, r1
 8005124:	4614      	mov	r4, r2
 8005126:	4618      	mov	r0, r3
 8005128:	4621      	mov	r1, r4
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f04f 0400 	mov.w	r4, #0
 8005130:	461a      	mov	r2, r3
 8005132:	4623      	mov	r3, r4
 8005134:	f7fb fac0 	bl	80006b8 <__aeabi_uldivmod>
 8005138:	4603      	mov	r3, r0
 800513a:	460c      	mov	r4, r1
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	e049      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005140:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	099b      	lsrs	r3, r3, #6
 8005146:	f04f 0400 	mov.w	r4, #0
 800514a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	ea03 0501 	and.w	r5, r3, r1
 8005156:	ea04 0602 	and.w	r6, r4, r2
 800515a:	4629      	mov	r1, r5
 800515c:	4632      	mov	r2, r6
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	f04f 0400 	mov.w	r4, #0
 8005166:	0154      	lsls	r4, r2, #5
 8005168:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800516c:	014b      	lsls	r3, r1, #5
 800516e:	4619      	mov	r1, r3
 8005170:	4622      	mov	r2, r4
 8005172:	1b49      	subs	r1, r1, r5
 8005174:	eb62 0206 	sbc.w	r2, r2, r6
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	f04f 0400 	mov.w	r4, #0
 8005180:	0194      	lsls	r4, r2, #6
 8005182:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005186:	018b      	lsls	r3, r1, #6
 8005188:	1a5b      	subs	r3, r3, r1
 800518a:	eb64 0402 	sbc.w	r4, r4, r2
 800518e:	f04f 0100 	mov.w	r1, #0
 8005192:	f04f 0200 	mov.w	r2, #0
 8005196:	00e2      	lsls	r2, r4, #3
 8005198:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800519c:	00d9      	lsls	r1, r3, #3
 800519e:	460b      	mov	r3, r1
 80051a0:	4614      	mov	r4, r2
 80051a2:	195b      	adds	r3, r3, r5
 80051a4:	eb44 0406 	adc.w	r4, r4, r6
 80051a8:	f04f 0100 	mov.w	r1, #0
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	02a2      	lsls	r2, r4, #10
 80051b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051b6:	0299      	lsls	r1, r3, #10
 80051b8:	460b      	mov	r3, r1
 80051ba:	4614      	mov	r4, r2
 80051bc:	4618      	mov	r0, r3
 80051be:	4621      	mov	r1, r4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f04f 0400 	mov.w	r4, #0
 80051c6:	461a      	mov	r2, r3
 80051c8:	4623      	mov	r3, r4
 80051ca:	f7fb fa75 	bl	80006b8 <__aeabi_uldivmod>
 80051ce:	4603      	mov	r3, r0
 80051d0:	460c      	mov	r4, r1
 80051d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051d4:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	0c1b      	lsrs	r3, r3, #16
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	3301      	adds	r3, #1
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ec:	60bb      	str	r3, [r7, #8]
      break;
 80051ee:	e002      	b.n	80051f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051f0:	4b04      	ldr	r3, [pc, #16]	; (8005204 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051f2:	60bb      	str	r3, [r7, #8]
      break;
 80051f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051f6:	68bb      	ldr	r3, [r7, #8]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005200:	40023800 	.word	0x40023800
 8005204:	00f42400 	.word	0x00f42400
 8005208:	007a1200 	.word	0x007a1200

0800520c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005210:	4b03      	ldr	r3, [pc, #12]	; (8005220 <HAL_RCC_GetHCLKFreq+0x14>)
 8005212:	681b      	ldr	r3, [r3, #0]
}
 8005214:	4618      	mov	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	2000040c 	.word	0x2000040c

08005224 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d105      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005248:	2b00      	cmp	r3, #0
 800524a:	d035      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800524c:	4b62      	ldr	r3, [pc, #392]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005252:	f7fc fb69 	bl	8001928 <HAL_GetTick>
 8005256:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005258:	e008      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800525a:	f7fc fb65 	bl	8001928 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e0b0      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800526c:	4b5b      	ldr	r3, [pc, #364]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f0      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	019a      	lsls	r2, r3, #6
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	071b      	lsls	r3, r3, #28
 8005284:	4955      	ldr	r1, [pc, #340]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800528c:	4b52      	ldr	r3, [pc, #328]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005292:	f7fc fb49 	bl	8001928 <HAL_GetTick>
 8005296:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005298:	e008      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800529a:	f7fc fb45 	bl	8001928 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e090      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052ac:	4b4b      	ldr	r3, [pc, #300]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 8083 	beq.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	4b44      	ldr	r3, [pc, #272]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	4a43      	ldr	r2, [pc, #268]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d4:	6413      	str	r3, [r2, #64]	; 0x40
 80052d6:	4b41      	ldr	r3, [pc, #260]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052e2:	4b3f      	ldr	r3, [pc, #252]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a3e      	ldr	r2, [pc, #248]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052ee:	f7fc fb1b 	bl	8001928 <HAL_GetTick>
 80052f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052f4:	e008      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052f6:	f7fc fb17 	bl	8001928 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e062      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005308:	4b35      	ldr	r3, [pc, #212]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0f0      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005314:	4b31      	ldr	r3, [pc, #196]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d02f      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	429a      	cmp	r2, r3
 8005330:	d028      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005332:	4b2a      	ldr	r3, [pc, #168]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800533c:	4b29      	ldr	r3, [pc, #164]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005342:	4b28      	ldr	r3, [pc, #160]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005348:	4a24      	ldr	r2, [pc, #144]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800534e:	4b23      	ldr	r3, [pc, #140]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b01      	cmp	r3, #1
 8005358:	d114      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800535a:	f7fc fae5 	bl	8001928 <HAL_GetTick>
 800535e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005360:	e00a      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005362:	f7fc fae1 	bl	8001928 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005370:	4293      	cmp	r3, r2
 8005372:	d901      	bls.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e02a      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005378:	4b18      	ldr	r3, [pc, #96]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800537a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0ee      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005390:	d10d      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005392:	4b12      	ldr	r3, [pc, #72]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a6:	490d      	ldr	r1, [pc, #52]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	608b      	str	r3, [r1, #8]
 80053ac:	e005      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 80053ae:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053b8:	6093      	str	r3, [r2, #8]
 80053ba:	4b08      	ldr	r3, [pc, #32]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c6:	4905      	ldr	r1, [pc, #20]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	42470068 	.word	0x42470068
 80053dc:	40023800 	.word	0x40023800
 80053e0:	40007000 	.word	0x40007000
 80053e4:	42470e40 	.word	0x42470e40

080053e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d13d      	bne.n	8005482 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005406:	4b22      	ldr	r3, [pc, #136]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800540e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005416:	2b01      	cmp	r3, #1
 8005418:	d12f      	bne.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800541a:	4b1e      	ldr	r3, [pc, #120]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800541c:	617b      	str	r3, [r7, #20]
          break;
 800541e:	e02f      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800542c:	d108      	bne.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800542e:	4b18      	ldr	r3, [pc, #96]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005436:	4a18      	ldr	r2, [pc, #96]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	e007      	b.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005440:	4b13      	ldr	r3, [pc, #76]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005448:	4a14      	ldr	r2, [pc, #80]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800544a:	fbb2 f3f3 	udiv	r3, r2, r3
 800544e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005450:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005456:	099b      	lsrs	r3, r3, #6
 8005458:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	fb02 f303 	mul.w	r3, r2, r3
 8005462:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005464:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800546a:	0f1b      	lsrs	r3, r3, #28
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	fbb2 f3f3 	udiv	r3, r2, r3
 8005476:	617b      	str	r3, [r7, #20]
          break;
 8005478:	e002      	b.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
          break;
 800547e:	bf00      	nop
        }
      }
      break;
 8005480:	bf00      	nop
    }
  }
  return frequency;
 8005482:	697b      	ldr	r3, [r7, #20]
}
 8005484:	4618      	mov	r0, r3
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	40023800 	.word	0x40023800
 8005494:	00bb8000 	.word	0x00bb8000
 8005498:	007a1200 	.word	0x007a1200
 800549c:	00f42400 	.word	0x00f42400

080054a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054a0:	b084      	sub	sp, #16
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	f107 001c 	add.w	r0, r7, #28
 80054ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d122      	bne.n	80054fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d105      	bne.n	80054f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f001 fac6 	bl	8006a84 <USB_CoreReset>
 80054f8:	4603      	mov	r3, r0
 80054fa:	73fb      	strb	r3, [r7, #15]
 80054fc:	e01a      	b.n	8005534 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 faba 	bl	8006a84 <USB_CoreReset>
 8005510:	4603      	mov	r3, r0
 8005512:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	639a      	str	r2, [r3, #56]	; 0x38
 8005526:	e005      	b.n	8005534 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	2b01      	cmp	r3, #1
 8005538:	d10b      	bne.n	8005552 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f043 0206 	orr.w	r2, r3, #6
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f043 0220 	orr.w	r2, r3, #32
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005552:	7bfb      	ldrb	r3, [r7, #15]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800555e:	b004      	add	sp, #16
 8005560:	4770      	bx	lr
	...

08005564 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d165      	bne.n	8005644 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4a41      	ldr	r2, [pc, #260]	; (8005680 <USB_SetTurnaroundTime+0x11c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d906      	bls.n	800558e <USB_SetTurnaroundTime+0x2a>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4a40      	ldr	r2, [pc, #256]	; (8005684 <USB_SetTurnaroundTime+0x120>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d802      	bhi.n	800558e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005588:	230f      	movs	r3, #15
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e062      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4a3c      	ldr	r2, [pc, #240]	; (8005684 <USB_SetTurnaroundTime+0x120>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d906      	bls.n	80055a4 <USB_SetTurnaroundTime+0x40>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4a3b      	ldr	r2, [pc, #236]	; (8005688 <USB_SetTurnaroundTime+0x124>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d802      	bhi.n	80055a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800559e:	230e      	movs	r3, #14
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	e057      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4a38      	ldr	r2, [pc, #224]	; (8005688 <USB_SetTurnaroundTime+0x124>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d906      	bls.n	80055ba <USB_SetTurnaroundTime+0x56>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4a37      	ldr	r2, [pc, #220]	; (800568c <USB_SetTurnaroundTime+0x128>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d802      	bhi.n	80055ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055b4:	230d      	movs	r3, #13
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	e04c      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4a33      	ldr	r2, [pc, #204]	; (800568c <USB_SetTurnaroundTime+0x128>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d906      	bls.n	80055d0 <USB_SetTurnaroundTime+0x6c>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4a32      	ldr	r2, [pc, #200]	; (8005690 <USB_SetTurnaroundTime+0x12c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d802      	bhi.n	80055d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055ca:	230c      	movs	r3, #12
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e041      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4a2f      	ldr	r2, [pc, #188]	; (8005690 <USB_SetTurnaroundTime+0x12c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d906      	bls.n	80055e6 <USB_SetTurnaroundTime+0x82>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4a2e      	ldr	r2, [pc, #184]	; (8005694 <USB_SetTurnaroundTime+0x130>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d802      	bhi.n	80055e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055e0:	230b      	movs	r3, #11
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e036      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <USB_SetTurnaroundTime+0x130>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d906      	bls.n	80055fc <USB_SetTurnaroundTime+0x98>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4a29      	ldr	r2, [pc, #164]	; (8005698 <USB_SetTurnaroundTime+0x134>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d802      	bhi.n	80055fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80055f6:	230a      	movs	r3, #10
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e02b      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4a26      	ldr	r2, [pc, #152]	; (8005698 <USB_SetTurnaroundTime+0x134>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d906      	bls.n	8005612 <USB_SetTurnaroundTime+0xae>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4a25      	ldr	r2, [pc, #148]	; (800569c <USB_SetTurnaroundTime+0x138>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d802      	bhi.n	8005612 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800560c:	2309      	movs	r3, #9
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	e020      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4a21      	ldr	r2, [pc, #132]	; (800569c <USB_SetTurnaroundTime+0x138>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d906      	bls.n	8005628 <USB_SetTurnaroundTime+0xc4>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4a20      	ldr	r2, [pc, #128]	; (80056a0 <USB_SetTurnaroundTime+0x13c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d802      	bhi.n	8005628 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005622:	2308      	movs	r3, #8
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e015      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4a1d      	ldr	r2, [pc, #116]	; (80056a0 <USB_SetTurnaroundTime+0x13c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d906      	bls.n	800563e <USB_SetTurnaroundTime+0xda>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <USB_SetTurnaroundTime+0x140>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d802      	bhi.n	800563e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005638:	2307      	movs	r3, #7
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	e00a      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800563e:	2306      	movs	r3, #6
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	e007      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d102      	bne.n	8005650 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800564a:	2309      	movs	r3, #9
 800564c:	617b      	str	r3, [r7, #20]
 800564e:	e001      	b.n	8005654 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005650:	2309      	movs	r3, #9
 8005652:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	029b      	lsls	r3, r3, #10
 8005668:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800566c:	431a      	orrs	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	00d8acbf 	.word	0x00d8acbf
 8005684:	00e4e1bf 	.word	0x00e4e1bf
 8005688:	00f423ff 	.word	0x00f423ff
 800568c:	0106737f 	.word	0x0106737f
 8005690:	011a499f 	.word	0x011a499f
 8005694:	01312cff 	.word	0x01312cff
 8005698:	014ca43f 	.word	0x014ca43f
 800569c:	016e35ff 	.word	0x016e35ff
 80056a0:	01a6ab1f 	.word	0x01a6ab1f
 80056a4:	01e847ff 	.word	0x01e847ff

080056a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f043 0201 	orr.w	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f023 0201 	bic.w	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d106      	bne.n	8005718 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	e00b      	b.n	8005730 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	60da      	str	r2, [r3, #12]
 800572a:	e001      	b.n	8005730 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e003      	b.n	8005738 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005730:	2032      	movs	r0, #50	; 0x32
 8005732:	f7fc f905 	bl	8001940 <HAL_Delay>

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005740:	b084      	sub	sp, #16
 8005742:	b580      	push	{r7, lr}
 8005744:	b086      	sub	sp, #24
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800574e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	e009      	b.n	8005774 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	3340      	adds	r3, #64	; 0x40
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	2200      	movs	r2, #0
 800576c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	3301      	adds	r3, #1
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2b0e      	cmp	r3, #14
 8005778:	d9f2      	bls.n	8005760 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800577a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d11c      	bne.n	80057ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800578e:	f043 0302 	orr.w	r3, r3, #2
 8005792:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38
 80057b8:	e00b      	b.n	80057d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057d8:	461a      	mov	r2, r3
 80057da:	2300      	movs	r3, #0
 80057dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e4:	4619      	mov	r1, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ec:	461a      	mov	r2, r3
 80057ee:	680b      	ldr	r3, [r1, #0]
 80057f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d10c      	bne.n	8005812 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d104      	bne.n	8005808 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057fe:	2100      	movs	r1, #0
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f949 	bl	8005a98 <USB_SetDevSpeed>
 8005806:	e008      	b.n	800581a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005808:	2101      	movs	r1, #1
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f944 	bl	8005a98 <USB_SetDevSpeed>
 8005810:	e003      	b.n	800581a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005812:	2103      	movs	r1, #3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f93f 	bl	8005a98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800581a:	2110      	movs	r1, #16
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f8f3 	bl	8005a08 <USB_FlushTxFifo>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f911 	bl	8005a54 <USB_FlushRxFifo>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	461a      	mov	r2, r3
 8005844:	2300      	movs	r3, #0
 8005846:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	461a      	mov	r2, r3
 8005850:	2300      	movs	r3, #0
 8005852:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585a:	461a      	mov	r2, r3
 800585c:	2300      	movs	r3, #0
 800585e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005860:	2300      	movs	r3, #0
 8005862:	613b      	str	r3, [r7, #16]
 8005864:	e043      	b.n	80058ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800587c:	d118      	bne.n	80058b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005890:	461a      	mov	r2, r3
 8005892:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	e013      	b.n	80058c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a6:	461a      	mov	r2, r3
 80058a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	e008      	b.n	80058c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	461a      	mov	r2, r3
 80058be:	2300      	movs	r3, #0
 80058c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ce:	461a      	mov	r2, r3
 80058d0:	2300      	movs	r3, #0
 80058d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e0:	461a      	mov	r2, r3
 80058e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	3301      	adds	r3, #1
 80058ec:	613b      	str	r3, [r7, #16]
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d3b7      	bcc.n	8005866 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	e043      	b.n	8005984 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800590e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005912:	d118      	bne.n	8005946 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10a      	bne.n	8005930 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005926:	461a      	mov	r2, r3
 8005928:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	e013      	b.n	8005958 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593c:	461a      	mov	r2, r3
 800593e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	e008      	b.n	8005958 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	461a      	mov	r2, r3
 8005954:	2300      	movs	r3, #0
 8005956:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	461a      	mov	r2, r3
 8005966:	2300      	movs	r3, #0
 8005968:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005976:	461a      	mov	r2, r3
 8005978:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800597c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	3301      	adds	r3, #1
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	429a      	cmp	r2, r3
 800598a:	d3b7      	bcc.n	80058fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800599a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800599e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d105      	bne.n	80059c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f043 0210 	orr.w	r2, r3, #16
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <USB_DevInit+0x2c4>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d005      	beq.n	80059de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	f043 0208 	orr.w	r2, r3, #8
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d107      	bne.n	80059f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059ec:	f043 0304 	orr.w	r3, r3, #4
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a00:	b004      	add	sp, #16
 8005a02:	4770      	bx	lr
 8005a04:	803c3800 	.word	0x803c3800

08005a08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	019b      	lsls	r3, r3, #6
 8005a1a:	f043 0220 	orr.w	r2, r3, #32
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3301      	adds	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4a09      	ldr	r2, [pc, #36]	; (8005a50 <USB_FlushTxFifo+0x48>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e006      	b.n	8005a42 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d0f0      	beq.n	8005a22 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	00030d40 	.word	0x00030d40

08005a54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2210      	movs	r2, #16
 8005a64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a09      	ldr	r2, [pc, #36]	; (8005a94 <USB_FlushRxFifo+0x40>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d901      	bls.n	8005a78 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e006      	b.n	8005a86 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d0f0      	beq.n	8005a66 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	00030d40 	.word	0x00030d40

08005a98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	68f9      	ldr	r1, [r7, #12]
 8005ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b087      	sub	sp, #28
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 0306 	and.w	r3, r3, #6
 8005ae2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005aea:	2300      	movs	r3, #0
 8005aec:	75fb      	strb	r3, [r7, #23]
 8005aee:	e00a      	b.n	8005b06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d002      	beq.n	8005afc <USB_GetDevSpeed+0x32>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b06      	cmp	r3, #6
 8005afa:	d102      	bne.n	8005b02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005afc:	2302      	movs	r3, #2
 8005afe:	75fb      	strb	r3, [r7, #23]
 8005b00:	e001      	b.n	8005b06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b02:	230f      	movs	r3, #15
 8005b04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d13a      	bne.n	8005ba6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b36:	69da      	ldr	r2, [r3, #28]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	2101      	movs	r1, #1
 8005b42:	fa01 f303 	lsl.w	r3, r1, r3
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	68f9      	ldr	r1, [r7, #12]
 8005b4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d155      	bne.n	8005c14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	78db      	ldrb	r3, [r3, #3]
 8005b82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	059b      	lsls	r3, r3, #22
 8005b8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	e036      	b.n	8005c14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bac:	69da      	ldr	r2, [r3, #28]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbc:	041b      	lsls	r3, r3, #16
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d11a      	bne.n	8005c14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	78db      	ldrb	r3, [r3, #3]
 8005bf8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
	...

08005c24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d161      	bne.n	8005d04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c56:	d11f      	bne.n	8005c98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	2101      	movs	r1, #1
 8005caa:	fa01 f303 	lsl.w	r3, r1, r3
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	68f9      	ldr	r1, [r7, #12]
 8005cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb8:	4013      	ands	r3, r2
 8005cba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	2101      	movs	r1, #1
 8005cce:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	68f9      	ldr	r1, [r7, #12]
 8005cd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	0159      	lsls	r1, r3, #5
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	440b      	add	r3, r1
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4b35      	ldr	r3, [pc, #212]	; (8005dd4 <USB_DeactivateEndpoint+0x1b0>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	600b      	str	r3, [r1, #0]
 8005d02:	e060      	b.n	8005dc6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d1a:	d11f      	bne.n	8005d5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d72:	041b      	lsls	r3, r3, #16
 8005d74:	43db      	mvns	r3, r3
 8005d76:	68f9      	ldr	r1, [r7, #12]
 8005d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	2101      	movs	r1, #1
 8005d92:	fa01 f303 	lsl.w	r3, r1, r3
 8005d96:	041b      	lsls	r3, r3, #16
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	68f9      	ldr	r1, [r7, #12]
 8005d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da0:	4013      	ands	r3, r2
 8005da2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	0159      	lsls	r1, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	440b      	add	r3, r1
 8005dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <USB_DeactivateEndpoint+0x1b4>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	ec337800 	.word	0xec337800
 8005dd8:	eff37800 	.word	0xeff37800

08005ddc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	; 0x28
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	4613      	mov	r3, r2
 8005de8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	f040 815c 	bne.w	80060b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d132      	bne.n	8005e6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	0151      	lsls	r1, r2, #5
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	440a      	add	r2, r1
 8005e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	69fa      	ldr	r2, [r7, #28]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e64:	0cdb      	lsrs	r3, r3, #19
 8005e66:	04db      	lsls	r3, r3, #19
 8005e68:	6113      	str	r3, [r2, #16]
 8005e6a:	e074      	b.n	8005f56 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e86:	0cdb      	lsrs	r3, r3, #19
 8005e88:	04db      	lsls	r3, r3, #19
 8005e8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005eae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	6959      	ldr	r1, [r3, #20]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	440b      	add	r3, r1
 8005ec8:	1e59      	subs	r1, r3, #1
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ed2:	04d9      	lsls	r1, r3, #19
 8005ed4:	4b9d      	ldr	r3, [pc, #628]	; (800614c <USB_EPStartXfer+0x370>)
 8005ed6:	400b      	ands	r3, r1
 8005ed8:	69b9      	ldr	r1, [r7, #24]
 8005eda:	0148      	lsls	r0, r1, #5
 8005edc:	69f9      	ldr	r1, [r7, #28]
 8005ede:	4401      	add	r1, r0
 8005ee0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005efe:	69b9      	ldr	r1, [r7, #24]
 8005f00:	0148      	lsls	r0, r1, #5
 8005f02:	69f9      	ldr	r1, [r7, #28]
 8005f04:	4401      	add	r1, r0
 8005f06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	78db      	ldrb	r3, [r3, #3]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d11f      	bne.n	8005f56 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	0151      	lsls	r1, r2, #5
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	440a      	add	r2, r1
 8005f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005f34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f54:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d14b      	bne.n	8005ff4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d009      	beq.n	8005f78 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f70:	461a      	mov	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	78db      	ldrb	r3, [r3, #3]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d128      	bne.n	8005fd2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d110      	bne.n	8005fb2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005faa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	e00f      	b.n	8005fd2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	0151      	lsls	r1, r2, #5
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	e12f      	b.n	8006254 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	440a      	add	r2, r1
 800600a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006012:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	78db      	ldrb	r3, [r3, #3]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d015      	beq.n	8006048 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8117 	beq.w	8006254 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	2101      	movs	r1, #1
 8006038:	fa01 f303 	lsl.w	r3, r1, r3
 800603c:	69f9      	ldr	r1, [r7, #28]
 800603e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006042:	4313      	orrs	r3, r2
 8006044:	634b      	str	r3, [r1, #52]	; 0x34
 8006046:	e105      	b.n	8006254 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006054:	2b00      	cmp	r3, #0
 8006056:	d110      	bne.n	800607a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006072:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	e00f      	b.n	800609a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006098:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	68d9      	ldr	r1, [r3, #12]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	781a      	ldrb	r2, [r3, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	b298      	uxth	r0, r3
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4603      	mov	r3, r0
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 fa2b 	bl	800650a <USB_WritePacket>
 80060b4:	e0ce      	b.n	8006254 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d0:	0cdb      	lsrs	r3, r3, #19
 80060d2:	04db      	lsls	r3, r3, #19
 80060d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d126      	bne.n	8006150 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006118:	69b9      	ldr	r1, [r7, #24]
 800611a:	0148      	lsls	r0, r1, #5
 800611c:	69f9      	ldr	r1, [r7, #28]
 800611e:	4401      	add	r1, r0
 8006120:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006124:	4313      	orrs	r3, r2
 8006126:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006142:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006146:	6113      	str	r3, [r2, #16]
 8006148:	e036      	b.n	80061b8 <USB_EPStartXfer+0x3dc>
 800614a:	bf00      	nop
 800614c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	695a      	ldr	r2, [r3, #20]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	4413      	add	r3, r2
 800615a:	1e5a      	subs	r2, r3, #1
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	fbb2 f3f3 	udiv	r3, r2, r3
 8006164:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	8afb      	ldrh	r3, [r7, #22]
 8006176:	04d9      	lsls	r1, r3, #19
 8006178:	4b39      	ldr	r3, [pc, #228]	; (8006260 <USB_EPStartXfer+0x484>)
 800617a:	400b      	ands	r3, r1
 800617c:	69b9      	ldr	r1, [r7, #24]
 800617e:	0148      	lsls	r0, r1, #5
 8006180:	69f9      	ldr	r1, [r7, #28]
 8006182:	4401      	add	r1, r0
 8006184:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006188:	4313      	orrs	r3, r2
 800618a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006198:	691a      	ldr	r2, [r3, #16]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	8af9      	ldrh	r1, [r7, #22]
 80061a0:	fb01 f303 	mul.w	r3, r1, r3
 80061a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a8:	69b9      	ldr	r1, [r7, #24]
 80061aa:	0148      	lsls	r0, r1, #5
 80061ac:	69f9      	ldr	r1, [r7, #28]
 80061ae:	4401      	add	r1, r0
 80061b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061b4:	4313      	orrs	r3, r2
 80061b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d10d      	bne.n	80061da <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d009      	beq.n	80061da <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	68d9      	ldr	r1, [r3, #12]
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d6:	460a      	mov	r2, r1
 80061d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	78db      	ldrb	r3, [r3, #3]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d128      	bne.n	8006234 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d110      	bne.n	8006214 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	440a      	add	r2, r1
 8006208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800620c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e00f      	b.n	8006234 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	0151      	lsls	r1, r2, #5
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	440a      	add	r2, r1
 800622a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006232:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	0151      	lsls	r1, r2, #5
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	440a      	add	r2, r1
 800624a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800624e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006252:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3720      	adds	r7, #32
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	1ff80000 	.word	0x1ff80000

08006264 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	4613      	mov	r3, r2
 8006270:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	785b      	ldrb	r3, [r3, #1]
 8006280:	2b01      	cmp	r3, #1
 8006282:	f040 80cd 	bne.w	8006420 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d132      	bne.n	80062f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	0151      	lsls	r1, r2, #5
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	440a      	add	r2, r1
 80062a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ec:	0cdb      	lsrs	r3, r3, #19
 80062ee:	04db      	lsls	r3, r3, #19
 80062f0:	6113      	str	r3, [r2, #16]
 80062f2:	e04e      	b.n	8006392 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	440a      	add	r2, r1
 800630a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800630e:	0cdb      	lsrs	r3, r3, #19
 8006310:	04db      	lsls	r3, r3, #19
 8006312:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	440a      	add	r2, r1
 800632a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006332:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006336:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	695a      	ldr	r2, [r3, #20]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	429a      	cmp	r2, r3
 8006342:	d903      	bls.n	800634c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	0151      	lsls	r1, r2, #5
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	440a      	add	r2, r1
 8006362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006366:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800636a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006378:	691a      	ldr	r2, [r3, #16]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006382:	6939      	ldr	r1, [r7, #16]
 8006384:	0148      	lsls	r0, r1, #5
 8006386:	6979      	ldr	r1, [r7, #20]
 8006388:	4401      	add	r1, r0
 800638a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800638e:	4313      	orrs	r3, r2
 8006390:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d11e      	bne.n	80063d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d009      	beq.n	80063b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ac:	461a      	mov	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	0151      	lsls	r1, r2, #5
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	440a      	add	r2, r1
 80063ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	e092      	b.n	80064fc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d07e      	beq.n	80064fc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	2101      	movs	r1, #1
 8006410:	fa01 f303 	lsl.w	r3, r1, r3
 8006414:	6979      	ldr	r1, [r7, #20]
 8006416:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800641a:	4313      	orrs	r3, r2
 800641c:	634b      	str	r3, [r1, #52]	; 0x34
 800641e:	e06d      	b.n	80064fc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	440a      	add	r2, r1
 8006436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800643a:	0cdb      	lsrs	r3, r3, #19
 800643c:	04db      	lsls	r3, r3, #19
 800643e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	440a      	add	r2, r1
 8006456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800645a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800645e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006462:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006492:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064aa:	6939      	ldr	r1, [r7, #16]
 80064ac:	0148      	lsls	r0, r1, #5
 80064ae:	6979      	ldr	r1, [r7, #20]
 80064b0:	4401      	add	r1, r0
 80064b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064b6:	4313      	orrs	r3, r2
 80064b8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d10d      	bne.n	80064dc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d009      	beq.n	80064dc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	68d9      	ldr	r1, [r3, #12]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d8:	460a      	mov	r2, r1
 80064da:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800650a:	b480      	push	{r7}
 800650c:	b089      	sub	sp, #36	; 0x24
 800650e:	af00      	add	r7, sp, #0
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	4611      	mov	r1, r2
 8006516:	461a      	mov	r2, r3
 8006518:	460b      	mov	r3, r1
 800651a:	71fb      	strb	r3, [r7, #7]
 800651c:	4613      	mov	r3, r2
 800651e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006528:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800652c:	2b00      	cmp	r3, #0
 800652e:	d11a      	bne.n	8006566 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006530:	88bb      	ldrh	r3, [r7, #4]
 8006532:	3303      	adds	r3, #3
 8006534:	089b      	lsrs	r3, r3, #2
 8006536:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006538:	2300      	movs	r3, #0
 800653a:	61bb      	str	r3, [r7, #24]
 800653c:	e00f      	b.n	800655e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	031a      	lsls	r2, r3, #12
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	4413      	add	r3, r2
 8006546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800654a:	461a      	mov	r2, r3
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	3304      	adds	r3, #4
 8006556:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	3301      	adds	r3, #1
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	429a      	cmp	r2, r3
 8006564:	d3eb      	bcc.n	800653e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3724      	adds	r7, #36	; 0x24
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006574:	b480      	push	{r7}
 8006576:	b089      	sub	sp, #36	; 0x24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	4613      	mov	r3, r2
 8006580:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	3303      	adds	r3, #3
 800658e:	089b      	lsrs	r3, r3, #2
 8006590:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	e00b      	b.n	80065b0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	3304      	adds	r3, #4
 80065a8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	3301      	adds	r3, #1
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d3ef      	bcc.n	8006598 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80065b8:	69fb      	ldr	r3, [r7, #28]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3724      	adds	r7, #36	; 0x24
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b085      	sub	sp, #20
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	785b      	ldrb	r3, [r3, #1]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d12c      	bne.n	800663c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	db12      	blt.n	800661a <USB_EPSetStall+0x54>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00f      	beq.n	800661a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	440a      	add	r2, r1
 8006610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006614:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006618:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	440a      	add	r2, r1
 8006630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	e02b      	b.n	8006694 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	db12      	blt.n	8006674 <USB_EPSetStall+0xae>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00f      	beq.n	8006674 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	0151      	lsls	r1, r2, #5
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	440a      	add	r2, r1
 800666a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800666e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006672:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	0151      	lsls	r1, r2, #5
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	440a      	add	r2, r1
 800668a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800668e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b085      	sub	sp, #20
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	785b      	ldrb	r3, [r3, #1]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d128      	bne.n	8006710 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	78db      	ldrb	r3, [r3, #3]
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d003      	beq.n	80066ee <USB_EPClearStall+0x4c>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	78db      	ldrb	r3, [r3, #3]
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d138      	bne.n	8006760 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	0151      	lsls	r1, r2, #5
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	440a      	add	r2, r1
 8006704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	e027      	b.n	8006760 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	440a      	add	r2, r1
 8006726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800672a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800672e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	78db      	ldrb	r3, [r3, #3]
 8006734:	2b03      	cmp	r3, #3
 8006736:	d003      	beq.n	8006740 <USB_EPClearStall+0x9e>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	78db      	ldrb	r3, [r3, #3]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d10f      	bne.n	8006760 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	0151      	lsls	r1, r2, #5
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	440a      	add	r2, r1
 8006756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800675a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	460b      	mov	r3, r1
 8006778:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800678c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006790:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80067a2:	68f9      	ldr	r1, [r7, #12]
 80067a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067a8:	4313      	orrs	r3, r2
 80067aa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067d4:	f023 0303 	bic.w	r3, r3, #3
 80067d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067e8:	f023 0302 	bic.w	r3, r3, #2
 80067ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006816:	f023 0303 	bic.w	r3, r3, #3
 800681a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800682a:	f043 0302 	orr.w	r3, r3, #2
 800682e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4013      	ands	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006856:	68fb      	ldr	r3, [r7, #12]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	4013      	ands	r3, r2
 8006886:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	0c1b      	lsrs	r3, r3, #16
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	4013      	ands	r3, r2
 80068ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	b29b      	uxth	r3, r3
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80068dc:	78fb      	ldrb	r3, [r7, #3]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	4013      	ands	r3, r2
 80068f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068fa:	68bb      	ldr	r3, [r7, #8]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	f003 030f 	and.w	r3, r3, #15
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	fa22 f303 	lsr.w	r3, r2, r3
 8006938:	01db      	lsls	r3, r3, #7
 800693a:	b2db      	uxtb	r3, r3
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4013      	ands	r3, r2
 8006954:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006956:	68bb      	ldr	r3, [r7, #8]
}
 8006958:	4618      	mov	r0, r3
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	f003 0301 	and.w	r3, r3, #1
}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800699e:	f023 0307 	bic.w	r3, r3, #7
 80069a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
	...

080069c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	460b      	mov	r3, r1
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	333c      	adds	r3, #60	; 0x3c
 80069de:	3304      	adds	r3, #4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	4a26      	ldr	r2, [pc, #152]	; (8006a80 <USB_EP0_OutStart+0xb8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d90a      	bls.n	8006a02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069fc:	d101      	bne.n	8006a02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	e037      	b.n	8006a72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a08:	461a      	mov	r2, r3
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a30:	f043 0318 	orr.w	r3, r3, #24
 8006a34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a4a:	7afb      	ldrb	r3, [r7, #11]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d10f      	bne.n	8006a70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a56:	461a      	mov	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	4f54300a 	.word	0x4f54300a

08006a84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3301      	adds	r3, #1
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <USB_CoreReset+0x64>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d901      	bls.n	8006aa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e01b      	b.n	8006ada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	daf2      	bge.n	8006a90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f043 0201 	orr.w	r2, r3, #1
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3301      	adds	r3, #1
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4a09      	ldr	r2, [pc, #36]	; (8006ae8 <USB_CoreReset+0x64>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d901      	bls.n	8006acc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e006      	b.n	8006ada <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d0f0      	beq.n	8006aba <USB_CoreReset+0x36>

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	00030d40 	.word	0x00030d40

08006aec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006af8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006afc:	f004 fb8e 	bl	800b21c <malloc>
 8006b00:	4603      	mov	r3, r0
 8006b02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d105      	bne.n	8006b16 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006b12:	2302      	movs	r3, #2
 8006b14:	e066      	b.n	8006be4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	7c1b      	ldrb	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d119      	bne.n	8006b5a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	2181      	movs	r1, #129	; 0x81
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f002 faf1 	bl	8009116 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b3e:	2202      	movs	r2, #2
 8006b40:	2101      	movs	r1, #1
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f002 fae7 	bl	8009116 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2210      	movs	r2, #16
 8006b54:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006b58:	e016      	b.n	8006b88 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b5a:	2340      	movs	r3, #64	; 0x40
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	2181      	movs	r1, #129	; 0x81
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f002 fad8 	bl	8009116 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b6c:	2340      	movs	r3, #64	; 0x40
 8006b6e:	2202      	movs	r2, #2
 8006b70:	2101      	movs	r1, #1
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f002 facf 	bl	8009116 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2210      	movs	r2, #16
 8006b84:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b88:	2308      	movs	r3, #8
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	2182      	movs	r1, #130	; 0x82
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f002 fac1 	bl	8009116 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	7c1b      	ldrb	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bc8:	2101      	movs	r1, #1
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f002 fb92 	bl	80092f4 <USBD_LL_PrepareReceive>
 8006bd0:	e007      	b.n	8006be2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bd8:	2340      	movs	r3, #64	; 0x40
 8006bda:	2101      	movs	r1, #1
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f002 fb89 	bl	80092f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006bfc:	2181      	movs	r1, #129	; 0x81
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f002 faaf 	bl	8009162 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f002 faa8 	bl	8009162 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c1a:	2182      	movs	r1, #130	; 0x82
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f002 faa0 	bl	8009162 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00e      	beq.n	8006c5a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f004 faed 	bl	800b22c <free>
    pdev->pClassData = NULL;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c74:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d03a      	beq.n	8006d04 <USBD_CDC_Setup+0xa0>
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	f040 8097 	bne.w	8006dc2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	88db      	ldrh	r3, [r3, #6]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d029      	beq.n	8006cf0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	b25b      	sxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	da11      	bge.n	8006cca <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006cb2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	88d2      	ldrh	r2, [r2, #6]
 8006cb8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006cba:	6939      	ldr	r1, [r7, #16]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	88db      	ldrh	r3, [r3, #6]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 fa9d 	bl	8008202 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006cc8:	e082      	b.n	8006dd0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	785a      	ldrb	r2, [r3, #1]
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	88db      	ldrh	r3, [r3, #6]
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ce0:	6939      	ldr	r1, [r7, #16]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	88db      	ldrh	r3, [r3, #6]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f001 fab6 	bl	800825a <USBD_CtlPrepareRx>
    break;
 8006cee:	e06f      	b.n	8006dd0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	7850      	ldrb	r0, [r2, #1]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	4798      	blx	r3
    break;
 8006d02:	e065      	b.n	8006dd0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	2b0b      	cmp	r3, #11
 8006d0a:	d84f      	bhi.n	8006dac <USBD_CDC_Setup+0x148>
 8006d0c:	a201      	add	r2, pc, #4	; (adr r2, 8006d14 <USBD_CDC_Setup+0xb0>)
 8006d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d12:	bf00      	nop
 8006d14:	08006d45 	.word	0x08006d45
 8006d18:	08006dbb 	.word	0x08006dbb
 8006d1c:	08006dad 	.word	0x08006dad
 8006d20:	08006dad 	.word	0x08006dad
 8006d24:	08006dad 	.word	0x08006dad
 8006d28:	08006dad 	.word	0x08006dad
 8006d2c:	08006dad 	.word	0x08006dad
 8006d30:	08006dad 	.word	0x08006dad
 8006d34:	08006dad 	.word	0x08006dad
 8006d38:	08006dad 	.word	0x08006dad
 8006d3c:	08006d6d 	.word	0x08006d6d
 8006d40:	08006d95 	.word	0x08006d95
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d107      	bne.n	8006d5e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d4e:	f107 030c 	add.w	r3, r7, #12
 8006d52:	2202      	movs	r2, #2
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fa53 	bl	8008202 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006d5c:	e030      	b.n	8006dc0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 f9dd 	bl	8008120 <USBD_CtlError>
        ret = USBD_FAIL;
 8006d66:	2303      	movs	r3, #3
 8006d68:	75fb      	strb	r3, [r7, #23]
      break;
 8006d6a:	e029      	b.n	8006dc0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d107      	bne.n	8006d86 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d76:	f107 030f 	add.w	r3, r7, #15
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 fa3f 	bl	8008202 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006d84:	e01c      	b.n	8006dc0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 f9c9 	bl	8008120 <USBD_CtlError>
        ret = USBD_FAIL;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	75fb      	strb	r3, [r7, #23]
      break;
 8006d92:	e015      	b.n	8006dc0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d00f      	beq.n	8006dbe <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 f9bd 	bl	8008120 <USBD_CtlError>
        ret = USBD_FAIL;
 8006da6:	2303      	movs	r3, #3
 8006da8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006daa:	e008      	b.n	8006dbe <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f001 f9b6 	bl	8008120 <USBD_CtlError>
      ret = USBD_FAIL;
 8006db4:	2303      	movs	r3, #3
 8006db6:	75fb      	strb	r3, [r7, #23]
      break;
 8006db8:	e002      	b.n	8006dc0 <USBD_CDC_Setup+0x15c>
      break;
 8006dba:	bf00      	nop
 8006dbc:	e008      	b.n	8006dd0 <USBD_CDC_Setup+0x16c>
      break;
 8006dbe:	bf00      	nop
    }
    break;
 8006dc0:	e006      	b.n	8006dd0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 f9ab 	bl	8008120 <USBD_CtlError>
    ret = USBD_FAIL;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	75fb      	strb	r3, [r7, #23]
    break;
 8006dce:	bf00      	nop
  }

  return (uint8_t)ret;
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop

08006ddc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006dee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e049      	b.n	8006e92 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006e06:	78fa      	ldrb	r2, [r7, #3]
 8006e08:	6879      	ldr	r1, [r7, #4]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	440b      	add	r3, r1
 8006e14:	3318      	adds	r3, #24
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d029      	beq.n	8006e70 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e1c:	78fa      	ldrb	r2, [r7, #3]
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	3318      	adds	r3, #24
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	78f9      	ldrb	r1, [r7, #3]
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	460b      	mov	r3, r1
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	1a5b      	subs	r3, r3, r1
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4403      	add	r3, r0
 8006e3c:	3344      	adds	r3, #68	; 0x44
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e44:	fb03 f301 	mul.w	r3, r3, r1
 8006e48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d110      	bne.n	8006e70 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006e4e:	78fa      	ldrb	r2, [r7, #3]
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	4613      	mov	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	3318      	adds	r3, #24
 8006e5e:	2200      	movs	r2, #0
 8006e60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e62:	78f9      	ldrb	r1, [r7, #3]
 8006e64:	2300      	movs	r3, #0
 8006e66:	2200      	movs	r2, #0
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f002 fa22 	bl	80092b2 <USBD_LL_Transmit>
 8006e6e:	e00f      	b.n	8006e90 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006e8c:	78fa      	ldrb	r2, [r7, #3]
 8006e8e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e015      	b.n	8006ee8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f002 fa38 	bl	8009336 <USBD_LL_GetRxDataSize>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006efe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d015      	beq.n	8006f36 <USBD_CDC_EP0_RxReady+0x46>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f10:	2bff      	cmp	r3, #255	; 0xff
 8006f12:	d010      	beq.n	8006f36 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006f22:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f2a:	b292      	uxth	r2, r2
 8006f2c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	22ff      	movs	r2, #255	; 0xff
 8006f32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2243      	movs	r2, #67	; 0x43
 8006f4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006f4e:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	200004a0 	.word	0x200004a0

08006f60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2243      	movs	r2, #67	; 0x43
 8006f6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006f6e:	4b03      	ldr	r3, [pc, #12]	; (8006f7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	2000045c 	.word	0x2000045c

08006f80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2243      	movs	r2, #67	; 0x43
 8006f8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006f8e:	4b03      	ldr	r3, [pc, #12]	; (8006f9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	200004e4 	.word	0x200004e4

08006fa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	220a      	movs	r2, #10
 8006fac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006fae:	4b03      	ldr	r3, [pc, #12]	; (8006fbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	20000418 	.word	0x20000418

08006fc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e004      	b.n	8006fde <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b087      	sub	sp, #28
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ffc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	371c      	adds	r7, #28
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800702c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007052:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007054:	2301      	movs	r3, #1
 8007056:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007062:	2303      	movs	r3, #3
 8007064:	e01a      	b.n	800709c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800706c:	2b00      	cmp	r3, #0
 800706e:	d114      	bne.n	800709a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2201      	movs	r2, #1
 8007074:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800708e:	2181      	movs	r1, #129	; 0x81
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f002 f90e 	bl	80092b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80070be:	2303      	movs	r3, #3
 80070c0:	e016      	b.n	80070f0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	7c1b      	ldrb	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d109      	bne.n	80070de <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070d4:	2101      	movs	r1, #1
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f002 f90c 	bl	80092f4 <USBD_LL_PrepareReceive>
 80070dc:	e007      	b.n	80070ee <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070e4:	2340      	movs	r3, #64	; 0x40
 80070e6:	2101      	movs	r1, #1
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f002 f903 	bl	80092f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800710c:	2303      	movs	r3, #3
 800710e:	e025      	b.n	800715c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	79fa      	ldrb	r2, [r7, #7]
 800714e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f001 ff79 	bl	8009048 <USBD_LL_Init>
 8007156:	4603      	mov	r3, r0
 8007158:	75fb      	strb	r3, [r7, #23]

  return ret;
 800715a:	7dfb      	ldrb	r3, [r7, #23]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3718      	adds	r7, #24
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007178:	2303      	movs	r3, #3
 800717a:	e010      	b.n	800719e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718c:	f107 020e 	add.w	r2, r7, #14
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
 8007194:	4602      	mov	r2, r0
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 ff96 	bl	80090e0 <USBD_LL_Start>
 80071b4:	4603      	mov	r3, r0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071e0:	2303      	movs	r3, #3
 80071e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d009      	beq.n	8007202 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	78fa      	ldrb	r2, [r7, #3]
 80071f8:	4611      	mov	r1, r2
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	78fa      	ldrb	r2, [r7, #3]
 800722c:	4611      	mov	r1, r2
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
  }

  return USBD_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 ff2c 	bl	80080ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007262:	461a      	mov	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007270:	f003 031f 	and.w	r3, r3, #31
 8007274:	2b01      	cmp	r3, #1
 8007276:	d00e      	beq.n	8007296 <USBD_LL_SetupStage+0x5a>
 8007278:	2b01      	cmp	r3, #1
 800727a:	d302      	bcc.n	8007282 <USBD_LL_SetupStage+0x46>
 800727c:	2b02      	cmp	r3, #2
 800727e:	d014      	beq.n	80072aa <USBD_LL_SetupStage+0x6e>
 8007280:	e01d      	b.n	80072be <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007288:	4619      	mov	r1, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa18 	bl	80076c0 <USBD_StdDevReq>
 8007290:	4603      	mov	r3, r0
 8007292:	73fb      	strb	r3, [r7, #15]
      break;
 8007294:	e020      	b.n	80072d8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fa7c 	bl	800779c <USBD_StdItfReq>
 80072a4:	4603      	mov	r3, r0
 80072a6:	73fb      	strb	r3, [r7, #15]
      break;
 80072a8:	e016      	b.n	80072d8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fab8 	bl	8007828 <USBD_StdEPReq>
 80072b8:	4603      	mov	r3, r0
 80072ba:	73fb      	strb	r3, [r7, #15]
      break;
 80072bc:	e00c      	b.n	80072d8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 ff67 	bl	80091a0 <USBD_LL_StallEP>
 80072d2:	4603      	mov	r3, r0
 80072d4:	73fb      	strb	r3, [r7, #15]
      break;
 80072d6:	bf00      	nop
  }

  return ret;
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b086      	sub	sp, #24
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	460b      	mov	r3, r1
 80072ec:	607a      	str	r2, [r7, #4]
 80072ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072f0:	7afb      	ldrb	r3, [r7, #11]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d137      	bne.n	8007366 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007304:	2b03      	cmp	r3, #3
 8007306:	d14a      	bne.n	800739e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	429a      	cmp	r2, r3
 8007312:	d913      	bls.n	800733c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	1ad2      	subs	r2, r2, r3
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	4293      	cmp	r3, r2
 800732c:	bf28      	it	cs
 800732e:	4613      	movcs	r3, r2
 8007330:	461a      	mov	r2, r3
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 ffad 	bl	8008294 <USBD_CtlContinueRx>
 800733a:	e030      	b.n	800739e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00a      	beq.n	800735e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800734e:	2b03      	cmp	r3, #3
 8007350:	d105      	bne.n	800735e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 ffa9 	bl	80082b6 <USBD_CtlSendStatus>
 8007364:	e01b      	b.n	800739e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d013      	beq.n	800739a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007378:	2b03      	cmp	r3, #3
 800737a:	d10e      	bne.n	800739a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	7afa      	ldrb	r2, [r7, #11]
 8007386:	4611      	mov	r1, r2
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	4798      	blx	r3
 800738c:	4603      	mov	r3, r0
 800738e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007390:	7dfb      	ldrb	r3, [r7, #23]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	e002      	b.n	80073a0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800739a:	2303      	movs	r3, #3
 800739c:	e000      	b.n	80073a0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3718      	adds	r7, #24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	460b      	mov	r3, r1
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80073b6:	7afb      	ldrb	r3, [r7, #11]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d16a      	bne.n	8007492 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3314      	adds	r3, #20
 80073c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d155      	bne.n	8007478 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d914      	bls.n	8007402 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	1ad2      	subs	r2, r2, r3
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	461a      	mov	r2, r3
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 ff22 	bl	8008238 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073f4:	2300      	movs	r3, #0
 80073f6:	2200      	movs	r2, #0
 80073f8:	2100      	movs	r1, #0
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f001 ff7a 	bl	80092f4 <USBD_LL_PrepareReceive>
 8007400:	e03a      	b.n	8007478 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	429a      	cmp	r2, r3
 800740c:	d11c      	bne.n	8007448 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007416:	429a      	cmp	r2, r3
 8007418:	d316      	bcc.n	8007448 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007424:	429a      	cmp	r2, r3
 8007426:	d20f      	bcs.n	8007448 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007428:	2200      	movs	r2, #0
 800742a:	2100      	movs	r1, #0
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 ff03 	bl	8008238 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800743a:	2300      	movs	r3, #0
 800743c:	2200      	movs	r2, #0
 800743e:	2100      	movs	r1, #0
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f001 ff57 	bl	80092f4 <USBD_LL_PrepareReceive>
 8007446:	e017      	b.n	8007478 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00a      	beq.n	800746a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800745a:	2b03      	cmp	r3, #3
 800745c:	d105      	bne.n	800746a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800746a:	2180      	movs	r1, #128	; 0x80
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f001 fe97 	bl	80091a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 ff32 	bl	80082dc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800747e:	2b01      	cmp	r3, #1
 8007480:	d123      	bne.n	80074ca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f7ff fe9b 	bl	80071be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007490:	e01b      	b.n	80074ca <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d013      	beq.n	80074c6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d10e      	bne.n	80074c6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	7afa      	ldrb	r2, [r7, #11]
 80074b2:	4611      	mov	r1, r2
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	4798      	blx	r3
 80074b8:	4603      	mov	r3, r0
 80074ba:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	e002      	b.n	80074cc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e000      	b.n	80074cc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007500:	2b00      	cmp	r3, #0
 8007502:	d009      	beq.n	8007518 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6852      	ldr	r2, [r2, #4]
 8007510:	b2d2      	uxtb	r2, r2
 8007512:	4611      	mov	r1, r2
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007518:	2340      	movs	r3, #64	; 0x40
 800751a:	2200      	movs	r2, #0
 800751c:	2100      	movs	r1, #0
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 fdf9 	bl	8009116 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2240      	movs	r2, #64	; 0x40
 8007530:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007534:	2340      	movs	r3, #64	; 0x40
 8007536:	2200      	movs	r2, #0
 8007538:	2180      	movs	r1, #128	; 0x80
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 fdeb 	bl	8009116 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2240      	movs	r2, #64	; 0x40
 800754a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	78fa      	ldrb	r2, [r7, #3]
 8007566:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2204      	movs	r2, #4
 800758e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d105      	bne.n	80075be <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d10b      	bne.n	80075f6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	460b      	mov	r3, r1
 800760a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	460b      	mov	r3, r1
 8007624:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b082      	sub	sp, #8
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d009      	beq.n	8007678 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6852      	ldr	r2, [r2, #4]
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	4611      	mov	r1, r2
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	4798      	blx	r3
  }

  return USBD_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007682:	b480      	push	{r7}
 8007684:	b087      	sub	sp, #28
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	3301      	adds	r3, #1
 8007698:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076a0:	8a3b      	ldrh	r3, [r7, #16]
 80076a2:	021b      	lsls	r3, r3, #8
 80076a4:	b21a      	sxth	r2, r3
 80076a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	b21b      	sxth	r3, r3
 80076ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076b0:	89fb      	ldrh	r3, [r7, #14]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	371c      	adds	r7, #28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
	...

080076c0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d004      	beq.n	80076e4 <USBD_StdDevReq+0x24>
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d002      	beq.n	80076e4 <USBD_StdDevReq+0x24>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <USBD_StdDevReq+0x38>
 80076e2:	e050      	b.n	8007786 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
 80076f2:	4603      	mov	r3, r0
 80076f4:	73fb      	strb	r3, [r7, #15]
    break;
 80076f6:	e04b      	b.n	8007790 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	785b      	ldrb	r3, [r3, #1]
 80076fc:	2b09      	cmp	r3, #9
 80076fe:	d83c      	bhi.n	800777a <USBD_StdDevReq+0xba>
 8007700:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <USBD_StdDevReq+0x48>)
 8007702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007706:	bf00      	nop
 8007708:	0800775d 	.word	0x0800775d
 800770c:	08007771 	.word	0x08007771
 8007710:	0800777b 	.word	0x0800777b
 8007714:	08007767 	.word	0x08007767
 8007718:	0800777b 	.word	0x0800777b
 800771c:	0800773b 	.word	0x0800773b
 8007720:	08007731 	.word	0x08007731
 8007724:	0800777b 	.word	0x0800777b
 8007728:	08007753 	.word	0x08007753
 800772c:	08007745 	.word	0x08007745
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f9ce 	bl	8007ad4 <USBD_GetDescriptor>
      break;
 8007738:	e024      	b.n	8007784 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fb33 	bl	8007da8 <USBD_SetAddress>
      break;
 8007742:	e01f      	b.n	8007784 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fb70 	bl	8007e2c <USBD_SetConfig>
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]
      break;
 8007750:	e018      	b.n	8007784 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fc0d 	bl	8007f74 <USBD_GetConfig>
      break;
 800775a:	e013      	b.n	8007784 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fc3c 	bl	8007fdc <USBD_GetStatus>
      break;
 8007764:	e00e      	b.n	8007784 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fc6a 	bl	8008042 <USBD_SetFeature>
      break;
 800776e:	e009      	b.n	8007784 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fc79 	bl	800806a <USBD_ClrFeature>
      break;
 8007778:	e004      	b.n	8007784 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fccf 	bl	8008120 <USBD_CtlError>
      break;
 8007782:	bf00      	nop
    }
    break;
 8007784:	e004      	b.n	8007790 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fcc9 	bl	8008120 <USBD_CtlError>
    break;
 800778e:	bf00      	nop
  }

  return ret;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop

0800779c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077b2:	2b20      	cmp	r3, #32
 80077b4:	d003      	beq.n	80077be <USBD_StdItfReq+0x22>
 80077b6:	2b40      	cmp	r3, #64	; 0x40
 80077b8:	d001      	beq.n	80077be <USBD_StdItfReq+0x22>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d12a      	bne.n	8007814 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c4:	3b01      	subs	r3, #1
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d81d      	bhi.n	8007806 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	889b      	ldrh	r3, [r3, #4]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d813      	bhi.n	80077fc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
 80077e2:	4603      	mov	r3, r0
 80077e4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	88db      	ldrh	r3, [r3, #6]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d110      	bne.n	8007810 <USBD_StdItfReq+0x74>
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10d      	bne.n	8007810 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fd5e 	bl	80082b6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80077fa:	e009      	b.n	8007810 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fc8e 	bl	8008120 <USBD_CtlError>
      break;
 8007804:	e004      	b.n	8007810 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fc89 	bl	8008120 <USBD_CtlError>
      break;
 800780e:	e000      	b.n	8007812 <USBD_StdItfReq+0x76>
      break;
 8007810:	bf00      	nop
    }
    break;
 8007812:	e004      	b.n	800781e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fc82 	bl	8008120 <USBD_CtlError>
    break;
 800781c:	bf00      	nop
  }

  return ret;
 800781e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	889b      	ldrh	r3, [r3, #4]
 800783a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007844:	2b20      	cmp	r3, #32
 8007846:	d004      	beq.n	8007852 <USBD_StdEPReq+0x2a>
 8007848:	2b40      	cmp	r3, #64	; 0x40
 800784a:	d002      	beq.n	8007852 <USBD_StdEPReq+0x2a>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <USBD_StdEPReq+0x3e>
 8007850:	e135      	b.n	8007abe <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	4798      	blx	r3
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
    break;
 8007864:	e130      	b.n	8007ac8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	785b      	ldrb	r3, [r3, #1]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d03e      	beq.n	80078ec <USBD_StdEPReq+0xc4>
 800786e:	2b03      	cmp	r3, #3
 8007870:	d002      	beq.n	8007878 <USBD_StdEPReq+0x50>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d077      	beq.n	8007966 <USBD_StdEPReq+0x13e>
 8007876:	e11c      	b.n	8007ab2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787e:	2b02      	cmp	r3, #2
 8007880:	d002      	beq.n	8007888 <USBD_StdEPReq+0x60>
 8007882:	2b03      	cmp	r3, #3
 8007884:	d015      	beq.n	80078b2 <USBD_StdEPReq+0x8a>
 8007886:	e02b      	b.n	80078e0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00c      	beq.n	80078a8 <USBD_StdEPReq+0x80>
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	2b80      	cmp	r3, #128	; 0x80
 8007892:	d009      	beq.n	80078a8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f001 fc81 	bl	80091a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800789e:	2180      	movs	r1, #128	; 0x80
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 fc7d 	bl	80091a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078a6:	e020      	b.n	80078ea <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fc38 	bl	8008120 <USBD_CtlError>
        break;
 80078b0:	e01b      	b.n	80078ea <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	885b      	ldrh	r3, [r3, #2]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10e      	bne.n	80078d8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <USBD_StdEPReq+0xb0>
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b80      	cmp	r3, #128	; 0x80
 80078c4:	d008      	beq.n	80078d8 <USBD_StdEPReq+0xb0>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	88db      	ldrh	r3, [r3, #6]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d104      	bne.n	80078d8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 fc64 	bl	80091a0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fcec 	bl	80082b6 <USBD_CtlSendStatus>

        break;
 80078de:	e004      	b.n	80078ea <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fc1c 	bl	8008120 <USBD_CtlError>
        break;
 80078e8:	bf00      	nop
      }
      break;
 80078ea:	e0e7      	b.n	8007abc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d002      	beq.n	80078fc <USBD_StdEPReq+0xd4>
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d015      	beq.n	8007926 <USBD_StdEPReq+0xfe>
 80078fa:	e02d      	b.n	8007958 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00c      	beq.n	800791c <USBD_StdEPReq+0xf4>
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b80      	cmp	r3, #128	; 0x80
 8007906:	d009      	beq.n	800791c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 fc47 	bl	80091a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007912:	2180      	movs	r1, #128	; 0x80
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 fc43 	bl	80091a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800791a:	e023      	b.n	8007964 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fbfe 	bl	8008120 <USBD_CtlError>
        break;
 8007924:	e01e      	b.n	8007964 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	885b      	ldrh	r3, [r3, #2]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d119      	bne.n	8007962 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007934:	2b00      	cmp	r3, #0
 8007936:	d004      	beq.n	8007942 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 fc4e 	bl	80091de <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fcb7 	bl	80082b6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
        }
        break;
 8007956:	e004      	b.n	8007962 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fbe0 	bl	8008120 <USBD_CtlError>
        break;
 8007960:	e000      	b.n	8007964 <USBD_StdEPReq+0x13c>
        break;
 8007962:	bf00      	nop
      }
      break;
 8007964:	e0aa      	b.n	8007abc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796c:	2b02      	cmp	r3, #2
 800796e:	d002      	beq.n	8007976 <USBD_StdEPReq+0x14e>
 8007970:	2b03      	cmp	r3, #3
 8007972:	d032      	beq.n	80079da <USBD_StdEPReq+0x1b2>
 8007974:	e097      	b.n	8007aa6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <USBD_StdEPReq+0x164>
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	2b80      	cmp	r3, #128	; 0x80
 8007980:	d004      	beq.n	800798c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fbcb 	bl	8008120 <USBD_CtlError>
          break;
 800798a:	e091      	b.n	8007ab0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800798c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007990:	2b00      	cmp	r3, #0
 8007992:	da0b      	bge.n	80079ac <USBD_StdEPReq+0x184>
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800799a:	4613      	mov	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	3310      	adds	r3, #16
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	4413      	add	r3, r2
 80079a8:	3304      	adds	r3, #4
 80079aa:	e00b      	b.n	80079c4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	4413      	add	r3, r2
 80079c2:	3304      	adds	r3, #4
 80079c4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2202      	movs	r2, #2
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fc15 	bl	8008202 <USBD_CtlSendData>
        break;
 80079d8:	e06a      	b.n	8007ab0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80079da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	da11      	bge.n	8007a06 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	f003 020f 	and.w	r2, r3, #15
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	440b      	add	r3, r1
 80079f4:	3324      	adds	r3, #36	; 0x24
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d117      	bne.n	8007a2c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fb8e 	bl	8008120 <USBD_CtlError>
            break;
 8007a04:	e054      	b.n	8007ab0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	f003 020f 	and.w	r2, r3, #15
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	440b      	add	r3, r1
 8007a18:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d104      	bne.n	8007a2c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fb7b 	bl	8008120 <USBD_CtlError>
            break;
 8007a2a:	e041      	b.n	8007ab0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	da0b      	bge.n	8007a4c <USBD_StdEPReq+0x224>
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	3310      	adds	r3, #16
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	4413      	add	r3, r2
 8007a48:	3304      	adds	r3, #4
 8007a4a:	e00b      	b.n	8007a64 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	4413      	add	r3, r2
 8007a62:	3304      	adds	r3, #4
 8007a64:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <USBD_StdEPReq+0x24a>
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b80      	cmp	r3, #128	; 0x80
 8007a70:	d103      	bne.n	8007a7a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	e00e      	b.n	8007a98 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 fbcc 	bl	800921c <USBD_LL_IsStallEP>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	e002      	b.n	8007a98 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fbaf 	bl	8008202 <USBD_CtlSendData>
          break;
 8007aa4:	e004      	b.n	8007ab0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fb39 	bl	8008120 <USBD_CtlError>
        break;
 8007aae:	bf00      	nop
      }
      break;
 8007ab0:	e004      	b.n	8007abc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fb33 	bl	8008120 <USBD_CtlError>
      break;
 8007aba:	bf00      	nop
    }
    break;
 8007abc:	e004      	b.n	8007ac8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fb2d 	bl	8008120 <USBD_CtlError>
    break;
 8007ac6:	bf00      	nop
  }

  return ret;
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	885b      	ldrh	r3, [r3, #2]
 8007aee:	0a1b      	lsrs	r3, r3, #8
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	3b01      	subs	r3, #1
 8007af4:	2b06      	cmp	r3, #6
 8007af6:	f200 8128 	bhi.w	8007d4a <USBD_GetDescriptor+0x276>
 8007afa:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <USBD_GetDescriptor+0x2c>)
 8007afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b00:	08007b1d 	.word	0x08007b1d
 8007b04:	08007b35 	.word	0x08007b35
 8007b08:	08007b75 	.word	0x08007b75
 8007b0c:	08007d4b 	.word	0x08007d4b
 8007b10:	08007d4b 	.word	0x08007d4b
 8007b14:	08007ceb 	.word	0x08007ceb
 8007b18:	08007d17 	.word	0x08007d17
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	7c12      	ldrb	r2, [r2, #16]
 8007b28:	f107 0108 	add.w	r1, r7, #8
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
 8007b30:	60f8      	str	r0, [r7, #12]
    break;
 8007b32:	e112      	b.n	8007d5a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	7c1b      	ldrb	r3, [r3, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10d      	bne.n	8007b58 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b44:	f107 0208 	add.w	r2, r7, #8
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4798      	blx	r3
 8007b4c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3301      	adds	r3, #1
 8007b52:	2202      	movs	r2, #2
 8007b54:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007b56:	e100      	b.n	8007d5a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	f107 0208 	add.w	r2, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	2202      	movs	r2, #2
 8007b70:	701a      	strb	r2, [r3, #0]
    break;
 8007b72:	e0f2      	b.n	8007d5a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	885b      	ldrh	r3, [r3, #2]
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b05      	cmp	r3, #5
 8007b7c:	f200 80ac 	bhi.w	8007cd8 <USBD_GetDescriptor+0x204>
 8007b80:	a201      	add	r2, pc, #4	; (adr r2, 8007b88 <USBD_GetDescriptor+0xb4>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007ba1 	.word	0x08007ba1
 8007b8c:	08007bd5 	.word	0x08007bd5
 8007b90:	08007c09 	.word	0x08007c09
 8007b94:	08007c3d 	.word	0x08007c3d
 8007b98:	08007c71 	.word	0x08007c71
 8007b9c:	08007ca5 	.word	0x08007ca5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00b      	beq.n	8007bc4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	7c12      	ldrb	r2, [r2, #16]
 8007bb8:	f107 0108 	add.w	r1, r7, #8
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4798      	blx	r3
 8007bc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bc2:	e091      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 faaa 	bl	8008120 <USBD_CtlError>
        err++;
 8007bcc:	7afb      	ldrb	r3, [r7, #11]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	72fb      	strb	r3, [r7, #11]
      break;
 8007bd2:	e089      	b.n	8007ce8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	7c12      	ldrb	r2, [r2, #16]
 8007bec:	f107 0108 	add.w	r1, r7, #8
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4798      	blx	r3
 8007bf4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bf6:	e077      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fa90 	bl	8008120 <USBD_CtlError>
        err++;
 8007c00:	7afb      	ldrb	r3, [r7, #11]
 8007c02:	3301      	adds	r3, #1
 8007c04:	72fb      	strb	r3, [r7, #11]
      break;
 8007c06:	e06f      	b.n	8007ce8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00b      	beq.n	8007c2c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	7c12      	ldrb	r2, [r2, #16]
 8007c20:	f107 0108 	add.w	r1, r7, #8
 8007c24:	4610      	mov	r0, r2
 8007c26:	4798      	blx	r3
 8007c28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c2a:	e05d      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fa76 	bl	8008120 <USBD_CtlError>
        err++;
 8007c34:	7afb      	ldrb	r3, [r7, #11]
 8007c36:	3301      	adds	r3, #1
 8007c38:	72fb      	strb	r3, [r7, #11]
      break;
 8007c3a:	e055      	b.n	8007ce8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00b      	beq.n	8007c60 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	7c12      	ldrb	r2, [r2, #16]
 8007c54:	f107 0108 	add.w	r1, r7, #8
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c5e:	e043      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fa5c 	bl	8008120 <USBD_CtlError>
        err++;
 8007c68:	7afb      	ldrb	r3, [r7, #11]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c6e:	e03b      	b.n	8007ce8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00b      	beq.n	8007c94 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	7c12      	ldrb	r2, [r2, #16]
 8007c88:	f107 0108 	add.w	r1, r7, #8
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	4798      	blx	r3
 8007c90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c92:	e029      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fa42 	bl	8008120 <USBD_CtlError>
        err++;
 8007c9c:	7afb      	ldrb	r3, [r7, #11]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	72fb      	strb	r3, [r7, #11]
      break;
 8007ca2:	e021      	b.n	8007ce8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00b      	beq.n	8007cc8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	7c12      	ldrb	r2, [r2, #16]
 8007cbc:	f107 0108 	add.w	r1, r7, #8
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	4798      	blx	r3
 8007cc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cc6:	e00f      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fa28 	bl	8008120 <USBD_CtlError>
        err++;
 8007cd0:	7afb      	ldrb	r3, [r7, #11]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	72fb      	strb	r3, [r7, #11]
      break;
 8007cd6:	e007      	b.n	8007ce8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa20 	bl	8008120 <USBD_CtlError>
      err++;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007ce6:	bf00      	nop
    }
    break;
 8007ce8:	e037      	b.n	8007d5a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	7c1b      	ldrb	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d109      	bne.n	8007d06 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfa:	f107 0208 	add.w	r2, r7, #8
 8007cfe:	4610      	mov	r0, r2
 8007d00:	4798      	blx	r3
 8007d02:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d04:	e029      	b.n	8007d5a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fa09 	bl	8008120 <USBD_CtlError>
      err++;
 8007d0e:	7afb      	ldrb	r3, [r7, #11]
 8007d10:	3301      	adds	r3, #1
 8007d12:	72fb      	strb	r3, [r7, #11]
    break;
 8007d14:	e021      	b.n	8007d5a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	7c1b      	ldrb	r3, [r3, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10d      	bne.n	8007d3a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	f107 0208 	add.w	r2, r7, #8
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	4798      	blx	r3
 8007d2e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3301      	adds	r3, #1
 8007d34:	2207      	movs	r2, #7
 8007d36:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d38:	e00f      	b.n	8007d5a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f9ef 	bl	8008120 <USBD_CtlError>
      err++;
 8007d42:	7afb      	ldrb	r3, [r7, #11]
 8007d44:	3301      	adds	r3, #1
 8007d46:	72fb      	strb	r3, [r7, #11]
    break;
 8007d48:	e007      	b.n	8007d5a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f9e7 	bl	8008120 <USBD_CtlError>
    err++;
 8007d52:	7afb      	ldrb	r3, [r7, #11]
 8007d54:	3301      	adds	r3, #1
 8007d56:	72fb      	strb	r3, [r7, #11]
    break;
 8007d58:	bf00      	nop
  }

  if (err != 0U)
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d11e      	bne.n	8007d9e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	88db      	ldrh	r3, [r3, #6]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d016      	beq.n	8007d96 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007d68:	893b      	ldrh	r3, [r7, #8]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00e      	beq.n	8007d8c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	88da      	ldrh	r2, [r3, #6]
 8007d72:	893b      	ldrh	r3, [r7, #8]
 8007d74:	4293      	cmp	r3, r2
 8007d76:	bf28      	it	cs
 8007d78:	4613      	movcs	r3, r2
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d7e:	893b      	ldrh	r3, [r7, #8]
 8007d80:	461a      	mov	r2, r3
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fa3c 	bl	8008202 <USBD_CtlSendData>
 8007d8a:	e009      	b.n	8007da0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f9c6 	bl	8008120 <USBD_CtlError>
 8007d94:	e004      	b.n	8007da0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa8d 	bl	80082b6 <USBD_CtlSendStatus>
 8007d9c:	e000      	b.n	8007da0 <USBD_GetDescriptor+0x2cc>
    return;
 8007d9e:	bf00      	nop
    }
  }
}
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop

08007da8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	889b      	ldrh	r3, [r3, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d130      	bne.n	8007e1c <USBD_SetAddress+0x74>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	88db      	ldrh	r3, [r3, #6]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d12c      	bne.n	8007e1c <USBD_SetAddress+0x74>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	885b      	ldrh	r3, [r3, #2]
 8007dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc8:	d828      	bhi.n	8007e1c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	885b      	ldrh	r3, [r3, #2]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d104      	bne.n	8007dea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f99c 	bl	8008120 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de8:	e01c      	b.n	8007e24 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	7bfa      	ldrb	r2, [r7, #15]
 8007dee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f001 fa3c 	bl	8009274 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fa5a 	bl	80082b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d004      	beq.n	8007e12 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e10:	e008      	b.n	8007e24 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e1a:	e003      	b.n	8007e24 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f97e 	bl	8008120 <USBD_CtlError>
  }
}
 8007e24:	bf00      	nop
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	885b      	ldrh	r3, [r3, #2]
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	4b4b      	ldr	r3, [pc, #300]	; (8007f70 <USBD_SetConfig+0x144>)
 8007e42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e44:	4b4a      	ldr	r3, [pc, #296]	; (8007f70 <USBD_SetConfig+0x144>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d905      	bls.n	8007e58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f966 	bl	8008120 <USBD_CtlError>
    return USBD_FAIL;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e087      	b.n	8007f68 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d002      	beq.n	8007e68 <USBD_SetConfig+0x3c>
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d025      	beq.n	8007eb2 <USBD_SetConfig+0x86>
 8007e66:	e071      	b.n	8007f4c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007e68:	4b41      	ldr	r3, [pc, #260]	; (8007f70 <USBD_SetConfig+0x144>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01c      	beq.n	8007eaa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007e70:	4b3f      	ldr	r3, [pc, #252]	; (8007f70 <USBD_SetConfig+0x144>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	461a      	mov	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e7a:	4b3d      	ldr	r3, [pc, #244]	; (8007f70 <USBD_SetConfig+0x144>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff f9a7 	bl	80071d4 <USBD_SetClassConfig>
 8007e86:	4603      	mov	r3, r0
 8007e88:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f944 	bl	8008120 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007e98:	e065      	b.n	8007f66 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fa0b 	bl	80082b6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2203      	movs	r2, #3
 8007ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007ea8:	e05d      	b.n	8007f66 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa03 	bl	80082b6 <USBD_CtlSendStatus>
    break;
 8007eb0:	e059      	b.n	8007f66 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007eb2:	4b2f      	ldr	r3, [pc, #188]	; (8007f70 <USBD_SetConfig+0x144>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d112      	bne.n	8007ee0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007ec2:	4b2b      	ldr	r3, [pc, #172]	; (8007f70 <USBD_SetConfig+0x144>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ecc:	4b28      	ldr	r3, [pc, #160]	; (8007f70 <USBD_SetConfig+0x144>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff f99a 	bl	800720c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f9ec 	bl	80082b6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007ede:	e042      	b.n	8007f66 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007ee0:	4b23      	ldr	r3, [pc, #140]	; (8007f70 <USBD_SetConfig+0x144>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d02a      	beq.n	8007f44 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7ff f988 	bl	800720c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007efc:	4b1c      	ldr	r3, [pc, #112]	; (8007f70 <USBD_SetConfig+0x144>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f06:	4b1a      	ldr	r3, [pc, #104]	; (8007f70 <USBD_SetConfig+0x144>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff f961 	bl	80071d4 <USBD_SetClassConfig>
 8007f12:	4603      	mov	r3, r0
 8007f14:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00f      	beq.n	8007f3c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f8fe 	bl	8008120 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff f96d 	bl	800720c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2202      	movs	r2, #2
 8007f36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f3a:	e014      	b.n	8007f66 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f9ba 	bl	80082b6 <USBD_CtlSendStatus>
    break;
 8007f42:	e010      	b.n	8007f66 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f9b6 	bl	80082b6 <USBD_CtlSendStatus>
    break;
 8007f4a:	e00c      	b.n	8007f66 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f8e6 	bl	8008120 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f54:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <USBD_SetConfig+0x144>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7ff f956 	bl	800720c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007f60:	2303      	movs	r3, #3
 8007f62:	73fb      	strb	r3, [r7, #15]
    break;
 8007f64:	bf00      	nop
  }

  return ret;
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20000784 	.word	0x20000784

08007f74 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	88db      	ldrh	r3, [r3, #6]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d004      	beq.n	8007f90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f8c9 	bl	8008120 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007f8e:	e021      	b.n	8007fd4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	db17      	blt.n	8007fca <USBD_GetConfig+0x56>
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	dd02      	ble.n	8007fa4 <USBD_GetConfig+0x30>
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d00b      	beq.n	8007fba <USBD_GetConfig+0x46>
 8007fa2:	e012      	b.n	8007fca <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	3308      	adds	r3, #8
 8007fae:	2201      	movs	r2, #1
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f925 	bl	8008202 <USBD_CtlSendData>
      break;
 8007fb8:	e00c      	b.n	8007fd4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f91d 	bl	8008202 <USBD_CtlSendData>
      break;
 8007fc8:	e004      	b.n	8007fd4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f8a7 	bl	8008120 <USBD_CtlError>
      break;
 8007fd2:	bf00      	nop
}
 8007fd4:	bf00      	nop
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fec:	3b01      	subs	r3, #1
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d81e      	bhi.n	8008030 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	88db      	ldrh	r3, [r3, #6]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d004      	beq.n	8008004 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f88f 	bl	8008120 <USBD_CtlError>
      break;
 8008002:	e01a      	b.n	800803a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d005      	beq.n	8008020 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f043 0202 	orr.w	r2, r3, #2
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	330c      	adds	r3, #12
 8008024:	2202      	movs	r2, #2
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f8ea 	bl	8008202 <USBD_CtlSendData>
    break;
 800802e:	e004      	b.n	800803a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f874 	bl	8008120 <USBD_CtlError>
    break;
 8008038:	bf00      	nop
  }
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	885b      	ldrh	r3, [r3, #2]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d106      	bne.n	8008062 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f92a 	bl	80082b6 <USBD_CtlSendStatus>
  }
}
 8008062:	bf00      	nop
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800807a:	3b01      	subs	r3, #1
 800807c:	2b02      	cmp	r3, #2
 800807e:	d80b      	bhi.n	8008098 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	885b      	ldrh	r3, [r3, #2]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d10c      	bne.n	80080a2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f910 	bl	80082b6 <USBD_CtlSendStatus>
      }
      break;
 8008096:	e004      	b.n	80080a2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f840 	bl	8008120 <USBD_CtlError>
      break;
 80080a0:	e000      	b.n	80080a4 <USBD_ClrFeature+0x3a>
      break;
 80080a2:	bf00      	nop
  }
}
 80080a4:	bf00      	nop
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	781a      	ldrb	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3301      	adds	r3, #1
 80080c6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	781a      	ldrb	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f7ff fad3 	bl	8007682 <SWAPBYTE>
 80080dc:	4603      	mov	r3, r0
 80080de:	461a      	mov	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3301      	adds	r3, #1
 80080e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3301      	adds	r3, #1
 80080ee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f7ff fac6 	bl	8007682 <SWAPBYTE>
 80080f6:	4603      	mov	r3, r0
 80080f8:	461a      	mov	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3301      	adds	r3, #1
 8008108:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f7ff fab9 	bl	8007682 <SWAPBYTE>
 8008110:	4603      	mov	r3, r0
 8008112:	461a      	mov	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	80da      	strh	r2, [r3, #6]
}
 8008118:	bf00      	nop
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800812a:	2180      	movs	r1, #128	; 0x80
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 f837 	bl	80091a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008132:	2100      	movs	r1, #0
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 f833 	bl	80091a0 <USBD_LL_StallEP>
}
 800813a:	bf00      	nop
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b086      	sub	sp, #24
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d036      	beq.n	80081c6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800815c:	6938      	ldr	r0, [r7, #16]
 800815e:	f000 f836 	bl	80081ce <USBD_GetLen>
 8008162:	4603      	mov	r3, r0
 8008164:	3301      	adds	r3, #1
 8008166:	b29b      	uxth	r3, r3
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	b29a      	uxth	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008170:	7dfb      	ldrb	r3, [r7, #23]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	4413      	add	r3, r2
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	7812      	ldrb	r2, [r2, #0]
 800817a:	701a      	strb	r2, [r3, #0]
  idx++;
 800817c:	7dfb      	ldrb	r3, [r7, #23]
 800817e:	3301      	adds	r3, #1
 8008180:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	4413      	add	r3, r2
 8008188:	2203      	movs	r2, #3
 800818a:	701a      	strb	r2, [r3, #0]
  idx++;
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	3301      	adds	r3, #1
 8008190:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008192:	e013      	b.n	80081bc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	4413      	add	r3, r2
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	7812      	ldrb	r2, [r2, #0]
 800819e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	3301      	adds	r3, #1
 80081a4:	613b      	str	r3, [r7, #16]
    idx++;
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
 80081a8:	3301      	adds	r3, #1
 80081aa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	4413      	add	r3, r2
 80081b2:	2200      	movs	r2, #0
 80081b4:	701a      	strb	r2, [r3, #0]
    idx++;
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	3301      	adds	r3, #1
 80081ba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e7      	bne.n	8008194 <USBD_GetString+0x52>
 80081c4:	e000      	b.n	80081c8 <USBD_GetString+0x86>
    return;
 80081c6:	bf00      	nop
  }
}
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b085      	sub	sp, #20
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80081de:	e005      	b.n	80081ec <USBD_GetLen+0x1e>
  {
    len++;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	3301      	adds	r3, #1
 80081e4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	3301      	adds	r3, #1
 80081ea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1f5      	bne.n	80081e0 <USBD_GetLen+0x12>
  }

  return len;
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2202      	movs	r2, #2
 8008212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	2100      	movs	r1, #0
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f001 f842 	bl	80092b2 <USBD_LL_Transmit>

  return USBD_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	2100      	movs	r1, #0
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f001 f831 	bl	80092b2 <USBD_LL_Transmit>

  return USBD_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2203      	movs	r2, #3
 800826a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	2100      	movs	r1, #0
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f001 f835 	bl	80092f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	2100      	movs	r1, #0
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f001 f824 	bl	80092f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2204      	movs	r2, #4
 80082c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082c6:	2300      	movs	r3, #0
 80082c8:	2200      	movs	r2, #0
 80082ca:	2100      	movs	r1, #0
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 fff0 	bl	80092b2 <USBD_LL_Transmit>

  return USBD_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2205      	movs	r2, #5
 80082e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082ec:	2300      	movs	r3, #0
 80082ee:	2200      	movs	r2, #0
 80082f0:	2100      	movs	r1, #0
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fffe 	bl	80092f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 8008308:	4b10      	ldr	r3, [pc, #64]	; (800834c <MX_PDM2PCM_Init+0x48>)
 800830a:	2201      	movs	r2, #1
 800830c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800830e:	4b0f      	ldr	r3, [pc, #60]	; (800834c <MX_PDM2PCM_Init+0x48>)
 8008310:	2201      	movs	r2, #1
 8008312:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8008314:	4b0d      	ldr	r3, [pc, #52]	; (800834c <MX_PDM2PCM_Init+0x48>)
 8008316:	4a0e      	ldr	r2, [pc, #56]	; (8008350 <MX_PDM2PCM_Init+0x4c>)
 8008318:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800831a:	4b0c      	ldr	r3, [pc, #48]	; (800834c <MX_PDM2PCM_Init+0x48>)
 800831c:	2201      	movs	r2, #1
 800831e:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8008320:	4b0a      	ldr	r3, [pc, #40]	; (800834c <MX_PDM2PCM_Init+0x48>)
 8008322:	2201      	movs	r2, #1
 8008324:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8008326:	4809      	ldr	r0, [pc, #36]	; (800834c <MX_PDM2PCM_Init+0x48>)
 8008328:	f002 fd94 	bl	800ae54 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_16;
 800832c:	4b09      	ldr	r3, [pc, #36]	; (8008354 <MX_PDM2PCM_Init+0x50>)
 800832e:	2205      	movs	r2, #5
 8008330:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 1024;
 8008332:	4b08      	ldr	r3, [pc, #32]	; (8008354 <MX_PDM2PCM_Init+0x50>)
 8008334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008338:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800833a:	4b06      	ldr	r3, [pc, #24]	; (8008354 <MX_PDM2PCM_Init+0x50>)
 800833c:	2200      	movs	r2, #0
 800833e:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8008340:	4904      	ldr	r1, [pc, #16]	; (8008354 <MX_PDM2PCM_Init+0x50>)
 8008342:	4802      	ldr	r0, [pc, #8]	; (800834c <MX_PDM2PCM_Init+0x48>)
 8008344:	f002 fe10 	bl	800af68 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8008348:	bf00      	nop
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20011ac4 	.word	0x20011ac4
 8008350:	7d70a3d6 	.word	0x7d70a3d6
 8008354:	20011abc 	.word	0x20011abc

08008358 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800835c:	2200      	movs	r2, #0
 800835e:	4912      	ldr	r1, [pc, #72]	; (80083a8 <MX_USB_DEVICE_Init+0x50>)
 8008360:	4812      	ldr	r0, [pc, #72]	; (80083ac <MX_USB_DEVICE_Init+0x54>)
 8008362:	f7fe fec9 	bl	80070f8 <USBD_Init>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800836c:	f7f8 ffe0 	bl	8001330 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008370:	490f      	ldr	r1, [pc, #60]	; (80083b0 <MX_USB_DEVICE_Init+0x58>)
 8008372:	480e      	ldr	r0, [pc, #56]	; (80083ac <MX_USB_DEVICE_Init+0x54>)
 8008374:	f7fe fef6 	bl	8007164 <USBD_RegisterClass>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800837e:	f7f8 ffd7 	bl	8001330 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008382:	490c      	ldr	r1, [pc, #48]	; (80083b4 <MX_USB_DEVICE_Init+0x5c>)
 8008384:	4809      	ldr	r0, [pc, #36]	; (80083ac <MX_USB_DEVICE_Init+0x54>)
 8008386:	f7fe fe1b 	bl	8006fc0 <USBD_CDC_RegisterInterface>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008390:	f7f8 ffce 	bl	8001330 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008394:	4805      	ldr	r0, [pc, #20]	; (80083ac <MX_USB_DEVICE_Init+0x54>)
 8008396:	f7fe ff06 	bl	80071a6 <USBD_Start>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083a0:	f7f8 ffc6 	bl	8001330 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083a4:	bf00      	nop
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	2000053c 	.word	0x2000053c
 80083ac:	20011b10 	.word	0x20011b10
 80083b0:	20000424 	.word	0x20000424
 80083b4:	20000528 	.word	0x20000528

080083b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083bc:	2200      	movs	r2, #0
 80083be:	4905      	ldr	r1, [pc, #20]	; (80083d4 <CDC_Init_FS+0x1c>)
 80083c0:	4805      	ldr	r0, [pc, #20]	; (80083d8 <CDC_Init_FS+0x20>)
 80083c2:	f7fe fe12 	bl	8006fea <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083c6:	4905      	ldr	r1, [pc, #20]	; (80083dc <CDC_Init_FS+0x24>)
 80083c8:	4803      	ldr	r0, [pc, #12]	; (80083d8 <CDC_Init_FS+0x20>)
 80083ca:	f7fe fe27 	bl	800701c <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80083ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20011e64 	.word	0x20011e64
 80083d8:	20011b10 	.word	0x20011b10
 80083dc:	20011de4 	.word	0x20011de4

080083e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 80083e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	6039      	str	r1, [r7, #0]
 80083fa:	71fb      	strb	r3, [r7, #7]
 80083fc:	4613      	mov	r3, r2
 80083fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	2b23      	cmp	r3, #35	; 0x23
 8008404:	d866      	bhi.n	80084d4 <CDC_Control_FS+0xe4>
 8008406:	a201      	add	r2, pc, #4	; (adr r2, 800840c <CDC_Control_FS+0x1c>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	080084d5 	.word	0x080084d5
 8008410:	080084d5 	.word	0x080084d5
 8008414:	080084d5 	.word	0x080084d5
 8008418:	080084d5 	.word	0x080084d5
 800841c:	080084d5 	.word	0x080084d5
 8008420:	080084d5 	.word	0x080084d5
 8008424:	080084d5 	.word	0x080084d5
 8008428:	080084d5 	.word	0x080084d5
 800842c:	080084d5 	.word	0x080084d5
 8008430:	080084d5 	.word	0x080084d5
 8008434:	080084d5 	.word	0x080084d5
 8008438:	080084d5 	.word	0x080084d5
 800843c:	080084d5 	.word	0x080084d5
 8008440:	080084d5 	.word	0x080084d5
 8008444:	080084d5 	.word	0x080084d5
 8008448:	080084d5 	.word	0x080084d5
 800844c:	080084d5 	.word	0x080084d5
 8008450:	080084d5 	.word	0x080084d5
 8008454:	080084d5 	.word	0x080084d5
 8008458:	080084d5 	.word	0x080084d5
 800845c:	080084d5 	.word	0x080084d5
 8008460:	080084d5 	.word	0x080084d5
 8008464:	080084d5 	.word	0x080084d5
 8008468:	080084d5 	.word	0x080084d5
 800846c:	080084d5 	.word	0x080084d5
 8008470:	080084d5 	.word	0x080084d5
 8008474:	080084d5 	.word	0x080084d5
 8008478:	080084d5 	.word	0x080084d5
 800847c:	080084d5 	.word	0x080084d5
 8008480:	080084d5 	.word	0x080084d5
 8008484:	080084d5 	.word	0x080084d5
 8008488:	080084d5 	.word	0x080084d5
 800848c:	080084d5 	.word	0x080084d5
 8008490:	080084d5 	.word	0x080084d5
 8008494:	0800849d 	.word	0x0800849d
 8008498:	080084d5 	.word	0x080084d5

		break;

	case CDC_SET_CONTROL_LINE_STATE:
	{
		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	60fb      	str	r3, [r7, #12]
		if ((req->wValue & 0x0001) != 0)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	885b      	ldrh	r3, [r3, #2]
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d009      	beq.n	80084c0 <CDC_Control_FS+0xd0>
		{
			HOST_PORT_COM_OPEN = 1;
 80084ac:	4b0c      	ldr	r3, [pc, #48]	; (80084e0 <CDC_Control_FS+0xf0>)
 80084ae:	2201      	movs	r2, #1
 80084b0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80084b2:	2201      	movs	r2, #1
 80084b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084b8:	480a      	ldr	r0, [pc, #40]	; (80084e4 <CDC_Control_FS+0xf4>)
 80084ba:	f7fa f8b1 	bl	8002620 <HAL_GPIO_WritePin>
		else
		{
			HOST_PORT_COM_OPEN = 0;
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
		}
		break;
 80084be:	e00a      	b.n	80084d6 <CDC_Control_FS+0xe6>
			HOST_PORT_COM_OPEN = 0;
 80084c0:	4b07      	ldr	r3, [pc, #28]	; (80084e0 <CDC_Control_FS+0xf0>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80084c6:	2200      	movs	r2, #0
 80084c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084cc:	4805      	ldr	r0, [pc, #20]	; (80084e4 <CDC_Control_FS+0xf4>)
 80084ce:	f7fa f8a7 	bl	8002620 <HAL_GPIO_WritePin>
		break;
 80084d2:	e000      	b.n	80084d6 <CDC_Control_FS+0xe6>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80084d4:	bf00      	nop
	}

	return (USBD_OK);
 80084d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20000785 	.word	0x20000785
 80084e4:	40020c00 	.word	0x40020c00

080084e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t result = USBD_OK;;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73bb      	strb	r3, [r7, #14]
	static uint8_t rxLen;
	static uint8_t leftAlign;
	static uint8_t VT100cmdSeq;
	static uint8_t rxBufferFS[APP_RX_DATA_SIZE];
	static uint8_t txBufferFS[APP_TX_DATA_SIZE];
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80084f6:	2201      	movs	r2, #1
 80084f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80084fc:	4887      	ldr	r0, [pc, #540]	; (800871c <CDC_Receive_FS+0x234>)
 80084fe:	f7fa f88f 	bl	8002620 <HAL_GPIO_WritePin>

	/* Get data from serial com */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8008502:	6879      	ldr	r1, [r7, #4]
 8008504:	4886      	ldr	r0, [pc, #536]	; (8008720 <CDC_Receive_FS+0x238>)
 8008506:	f7fe fd89 	bl	800701c <USBD_CDC_SetRxBuffer>
	if ((result = USBD_CDC_ReceivePacket(&hUsbDeviceFS)) != USBD_OK)
 800850a:	4885      	ldr	r0, [pc, #532]	; (8008720 <CDC_Receive_FS+0x238>)
 800850c:	f7fe fdca 	bl	80070a4 <USBD_CDC_ReceivePacket>
 8008510:	4603      	mov	r3, r0
 8008512:	73bb      	strb	r3, [r7, #14]
 8008514:	7bbb      	ldrb	r3, [r7, #14]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <CDC_Receive_FS+0x44>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800851a:	2200      	movs	r2, #0
 800851c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008520:	487e      	ldr	r0, [pc, #504]	; (800871c <CDC_Receive_FS+0x234>)
 8008522:	f7fa f87d 	bl	8002620 <HAL_GPIO_WritePin>
		return result;
 8008526:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800852a:	e0f3      	b.n	8008714 <CDC_Receive_FS+0x22c>
	}

	for (uint8_t i = 0; i < (*Len); i++)
 800852c:	2300      	movs	r3, #0
 800852e:	73fb      	strb	r3, [r7, #15]
 8008530:	e0cd      	b.n	80086ce <CDC_Receive_FS+0x1e6>
	{
		/* Avoid buffer overflow */
		if (rxLen == APP_RX_DATA_SIZE-1)
 8008532:	4b7c      	ldr	r3, [pc, #496]	; (8008724 <CDC_Receive_FS+0x23c>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b7f      	cmp	r3, #127	; 0x7f
 8008538:	d102      	bne.n	8008540 <CDC_Receive_FS+0x58>
		{	rxLen = 0;
 800853a:	4b7a      	ldr	r3, [pc, #488]	; (8008724 <CDC_Receive_FS+0x23c>)
 800853c:	2200      	movs	r2, #0
 800853e:	701a      	strb	r2, [r3, #0]
		}

		/* Avoid VT100 cmd sequences (4 uint8_t)*/
		if(Buf[i] == '\033')
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	4413      	add	r3, r2
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2b1b      	cmp	r3, #27
 800854a:	d102      	bne.n	8008552 <CDC_Receive_FS+0x6a>
		{	VT100cmdSeq = 4;
 800854c:	4b76      	ldr	r3, [pc, #472]	; (8008728 <CDC_Receive_FS+0x240>)
 800854e:	2204      	movs	r2, #4
 8008550:	701a      	strb	r2, [r3, #0]
		}

		if(!VT100cmdSeq) // avoid VT100cmd
 8008552:	4b75      	ldr	r3, [pc, #468]	; (8008728 <CDC_Receive_FS+0x240>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	f040 80b0 	bne.w	80086bc <CDC_Receive_FS+0x1d4>
		{
			/* If Backspace key: clear the last char */
			if (Buf[i] == '\b')
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	4413      	add	r3, r2
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b08      	cmp	r3, #8
 8008566:	d12d      	bne.n	80085c4 <CDC_Receive_FS+0xdc>
			{
				if(leftAlign  && CDC_RX_DATA_PRINT)
 8008568:	4b70      	ldr	r3, [pc, #448]	; (800872c <CDC_Receive_FS+0x244>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 80ab 	beq.w	80086c8 <CDC_Receive_FS+0x1e0>
 8008572:	4b6f      	ldr	r3, [pc, #444]	; (8008730 <CDC_Receive_FS+0x248>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 80a6 	beq.w	80086c8 <CDC_Receive_FS+0x1e0>
				{
					memcpy(&txBufferFS[txLen], "\b \b", 3);
 800857c:	4b6d      	ldr	r3, [pc, #436]	; (8008734 <CDC_Receive_FS+0x24c>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	461a      	mov	r2, r3
 8008582:	4b6d      	ldr	r3, [pc, #436]	; (8008738 <CDC_Receive_FS+0x250>)
 8008584:	4413      	add	r3, r2
 8008586:	2203      	movs	r2, #3
 8008588:	496c      	ldr	r1, [pc, #432]	; (800873c <CDC_Receive_FS+0x254>)
 800858a:	4618      	mov	r0, r3
 800858c:	f002 fe56 	bl	800b23c <memcpy>
					txLen += 3;
 8008590:	4b68      	ldr	r3, [pc, #416]	; (8008734 <CDC_Receive_FS+0x24c>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	3303      	adds	r3, #3
 8008596:	b2da      	uxtb	r2, r3
 8008598:	4b66      	ldr	r3, [pc, #408]	; (8008734 <CDC_Receive_FS+0x24c>)
 800859a:	701a      	strb	r2, [r3, #0]
					txLen %= APP_TX_DATA_SIZE;
 800859c:	4b65      	ldr	r3, [pc, #404]	; (8008734 <CDC_Receive_FS+0x24c>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	4b63      	ldr	r3, [pc, #396]	; (8008734 <CDC_Receive_FS+0x24c>)
 80085a8:	701a      	strb	r2, [r3, #0]
					rxLen--;
 80085aa:	4b5e      	ldr	r3, [pc, #376]	; (8008724 <CDC_Receive_FS+0x23c>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	4b5c      	ldr	r3, [pc, #368]	; (8008724 <CDC_Receive_FS+0x23c>)
 80085b4:	701a      	strb	r2, [r3, #0]
					leftAlign--;
 80085b6:	4b5d      	ldr	r3, [pc, #372]	; (800872c <CDC_Receive_FS+0x244>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	4b5b      	ldr	r3, [pc, #364]	; (800872c <CDC_Receive_FS+0x244>)
 80085c0:	701a      	strb	r2, [r3, #0]
 80085c2:	e081      	b.n	80086c8 <CDC_Receive_FS+0x1e0>
				}
			}
			/* Else if Enter key: add a \n to terminal and extract output buffer */
			else if (Buf[i] == '\r' || Buf[i] == '\0')
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	4413      	add	r3, r2
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b0d      	cmp	r3, #13
 80085ce:	d005      	beq.n	80085dc <CDC_Receive_FS+0xf4>
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	4413      	add	r3, r2
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d143      	bne.n	8008664 <CDC_Receive_FS+0x17c>
			{
				if (CDC_RX_DATA_PRINT)
 80085dc:	4b54      	ldr	r3, [pc, #336]	; (8008730 <CDC_Receive_FS+0x248>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d019      	beq.n	8008618 <CDC_Receive_FS+0x130>
				{
					memcpy(&txBufferFS[txLen], "\r\nstm32@serial>> ", 17);
 80085e4:	4b53      	ldr	r3, [pc, #332]	; (8008734 <CDC_Receive_FS+0x24c>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	4b53      	ldr	r3, [pc, #332]	; (8008738 <CDC_Receive_FS+0x250>)
 80085ec:	4413      	add	r3, r2
 80085ee:	2211      	movs	r2, #17
 80085f0:	4953      	ldr	r1, [pc, #332]	; (8008740 <CDC_Receive_FS+0x258>)
 80085f2:	4618      	mov	r0, r3
 80085f4:	f002 fe22 	bl	800b23c <memcpy>
					txLen += 17;
 80085f8:	4b4e      	ldr	r3, [pc, #312]	; (8008734 <CDC_Receive_FS+0x24c>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	3311      	adds	r3, #17
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	4b4c      	ldr	r3, [pc, #304]	; (8008734 <CDC_Receive_FS+0x24c>)
 8008602:	701a      	strb	r2, [r3, #0]
					txLen %= APP_TX_DATA_SIZE;
 8008604:	4b4b      	ldr	r3, [pc, #300]	; (8008734 <CDC_Receive_FS+0x24c>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800860c:	b2da      	uxtb	r2, r3
 800860e:	4b49      	ldr	r3, [pc, #292]	; (8008734 <CDC_Receive_FS+0x24c>)
 8008610:	701a      	strb	r2, [r3, #0]
					leftAlign = 0;
 8008612:	4b46      	ldr	r3, [pc, #280]	; (800872c <CDC_Receive_FS+0x244>)
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
				}
				if(rxLen)
 8008618:	4b42      	ldr	r3, [pc, #264]	; (8008724 <CDC_Receive_FS+0x23c>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d053      	beq.n	80086c8 <CDC_Receive_FS+0x1e0>
				{
					rxBufferFS[rxLen++] = '\r';
 8008620:	4b40      	ldr	r3, [pc, #256]	; (8008724 <CDC_Receive_FS+0x23c>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	b2d1      	uxtb	r1, r2
 8008628:	4a3e      	ldr	r2, [pc, #248]	; (8008724 <CDC_Receive_FS+0x23c>)
 800862a:	7011      	strb	r1, [r2, #0]
 800862c:	461a      	mov	r2, r3
 800862e:	4b45      	ldr	r3, [pc, #276]	; (8008744 <CDC_Receive_FS+0x25c>)
 8008630:	210d      	movs	r1, #13
 8008632:	5499      	strb	r1, [r3, r2]
					rxBufferFS[rxLen++] = '\0';
 8008634:	4b3b      	ldr	r3, [pc, #236]	; (8008724 <CDC_Receive_FS+0x23c>)
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	b2d1      	uxtb	r1, r2
 800863c:	4a39      	ldr	r2, [pc, #228]	; (8008724 <CDC_Receive_FS+0x23c>)
 800863e:	7011      	strb	r1, [r2, #0]
 8008640:	461a      	mov	r2, r3
 8008642:	4b40      	ldr	r3, [pc, #256]	; (8008744 <CDC_Receive_FS+0x25c>)
 8008644:	2100      	movs	r1, #0
 8008646:	5499      	strb	r1, [r3, r2]
					memcpy(UserRxBufferFS, rxBufferFS, rxLen);
 8008648:	4b36      	ldr	r3, [pc, #216]	; (8008724 <CDC_Receive_FS+0x23c>)
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
 800864e:	493d      	ldr	r1, [pc, #244]	; (8008744 <CDC_Receive_FS+0x25c>)
 8008650:	483d      	ldr	r0, [pc, #244]	; (8008748 <CDC_Receive_FS+0x260>)
 8008652:	f002 fdf3 	bl	800b23c <memcpy>
					CDC_RX_DATA_PENDING = 1;
 8008656:	4b3d      	ldr	r3, [pc, #244]	; (800874c <CDC_Receive_FS+0x264>)
 8008658:	2201      	movs	r2, #1
 800865a:	701a      	strb	r2, [r3, #0]
					rxLen = 0;
 800865c:	4b31      	ldr	r3, [pc, #196]	; (8008724 <CDC_Receive_FS+0x23c>)
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]
				if(rxLen)
 8008662:	e031      	b.n	80086c8 <CDC_Receive_FS+0x1e0>
				}
			}
			/* Else get the character */
			else
			{
				if (CDC_RX_DATA_PRINT)
 8008664:	4b32      	ldr	r3, [pc, #200]	; (8008730 <CDC_Receive_FS+0x248>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d019      	beq.n	80086a0 <CDC_Receive_FS+0x1b8>
				{
					txBufferFS[txLen++] = Buf[i];
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	441a      	add	r2, r3
 8008672:	4b30      	ldr	r3, [pc, #192]	; (8008734 <CDC_Receive_FS+0x24c>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	1c59      	adds	r1, r3, #1
 8008678:	b2c8      	uxtb	r0, r1
 800867a:	492e      	ldr	r1, [pc, #184]	; (8008734 <CDC_Receive_FS+0x24c>)
 800867c:	7008      	strb	r0, [r1, #0]
 800867e:	4619      	mov	r1, r3
 8008680:	7812      	ldrb	r2, [r2, #0]
 8008682:	4b2d      	ldr	r3, [pc, #180]	; (8008738 <CDC_Receive_FS+0x250>)
 8008684:	545a      	strb	r2, [r3, r1]
					txLen %= APP_TX_DATA_SIZE;
 8008686:	4b2b      	ldr	r3, [pc, #172]	; (8008734 <CDC_Receive_FS+0x24c>)
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800868e:	b2da      	uxtb	r2, r3
 8008690:	4b28      	ldr	r3, [pc, #160]	; (8008734 <CDC_Receive_FS+0x24c>)
 8008692:	701a      	strb	r2, [r3, #0]
					leftAlign++;
 8008694:	4b25      	ldr	r3, [pc, #148]	; (800872c <CDC_Receive_FS+0x244>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	3301      	adds	r3, #1
 800869a:	b2da      	uxtb	r2, r3
 800869c:	4b23      	ldr	r3, [pc, #140]	; (800872c <CDC_Receive_FS+0x244>)
 800869e:	701a      	strb	r2, [r3, #0]
				}
				rxBufferFS[rxLen++] = Buf[i];
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	441a      	add	r2, r3
 80086a6:	4b1f      	ldr	r3, [pc, #124]	; (8008724 <CDC_Receive_FS+0x23c>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	1c59      	adds	r1, r3, #1
 80086ac:	b2c8      	uxtb	r0, r1
 80086ae:	491d      	ldr	r1, [pc, #116]	; (8008724 <CDC_Receive_FS+0x23c>)
 80086b0:	7008      	strb	r0, [r1, #0]
 80086b2:	4619      	mov	r1, r3
 80086b4:	7812      	ldrb	r2, [r2, #0]
 80086b6:	4b23      	ldr	r3, [pc, #140]	; (8008744 <CDC_Receive_FS+0x25c>)
 80086b8:	545a      	strb	r2, [r3, r1]
 80086ba:	e005      	b.n	80086c8 <CDC_Receive_FS+0x1e0>
			}
		}
		else
		{	VT100cmdSeq--;
 80086bc:	4b1a      	ldr	r3, [pc, #104]	; (8008728 <CDC_Receive_FS+0x240>)
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	4b18      	ldr	r3, [pc, #96]	; (8008728 <CDC_Receive_FS+0x240>)
 80086c6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < (*Len); i++)
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	3301      	adds	r3, #1
 80086cc:	73fb      	strb	r3, [r7, #15]
 80086ce:	7bfa      	ldrb	r2, [r7, #15]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	f4ff af2c 	bcc.w	8008532 <CDC_Receive_FS+0x4a>
		}
	}

	/* Send result to terminal */
	if(CDC_RX_DATA_PRINT && HOST_PORT_COM_OPEN)
 80086da:	4b15      	ldr	r3, [pc, #84]	; (8008730 <CDC_Receive_FS+0x248>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d010      	beq.n	8008704 <CDC_Receive_FS+0x21c>
 80086e2:	4b1b      	ldr	r3, [pc, #108]	; (8008750 <CDC_Receive_FS+0x268>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00c      	beq.n	8008704 <CDC_Receive_FS+0x21c>
	{
		if(CDC_Transmit_FS(txBufferFS, txLen) == USBD_OK)
 80086ea:	4b12      	ldr	r3, [pc, #72]	; (8008734 <CDC_Receive_FS+0x24c>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	4619      	mov	r1, r3
 80086f2:	4811      	ldr	r0, [pc, #68]	; (8008738 <CDC_Receive_FS+0x250>)
 80086f4:	f000 f82e 	bl	8008754 <CDC_Transmit_FS>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d102      	bne.n	8008704 <CDC_Receive_FS+0x21c>
		{	txLen = 0;
 80086fe:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <CDC_Receive_FS+0x24c>)
 8008700:	2200      	movs	r2, #0
 8008702:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008704:	2200      	movs	r2, #0
 8008706:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800870a:	4804      	ldr	r0, [pc, #16]	; (800871c <CDC_Receive_FS+0x234>)
 800870c:	f7f9 ff88 	bl	8002620 <HAL_GPIO_WritePin>

	return result;
 8008710:	f997 300e 	ldrsb.w	r3, [r7, #14]
  /* USER CODE END 6 */
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	40020c00 	.word	0x40020c00
 8008720:	20011b10 	.word	0x20011b10
 8008724:	20000787 	.word	0x20000787
 8008728:	20000788 	.word	0x20000788
 800872c:	20000789 	.word	0x20000789
 8008730:	20011de0 	.word	0x20011de0
 8008734:	2000078a 	.word	0x2000078a
 8008738:	2000078c 	.word	0x2000078c
 800873c:	0800d0b4 	.word	0x0800d0b4
 8008740:	0800d0b8 	.word	0x0800d0b8
 8008744:	2000080c 	.word	0x2000080c
 8008748:	20011de4 	.word	0x20011de4
 800874c:	20000786 	.word	0x20000786
 8008750:	20000785 	.word	0x20000785

08008754 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8008764:	2201      	movs	r2, #1
 8008766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800876a:	4815      	ldr	r0, [pc, #84]	; (80087c0 <CDC_Transmit_FS+0x6c>)
 800876c:	f7f9 ff58 	bl	8002620 <HAL_GPIO_WritePin>
	USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8008770:	4b14      	ldr	r3, [pc, #80]	; (80087c4 <CDC_Transmit_FS+0x70>)
 8008772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008776:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0U)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800877e:	2b00      	cmp	r3, #0
 8008780:	d007      	beq.n	8008792 <CDC_Transmit_FS+0x3e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008782:	2200      	movs	r2, #0
 8008784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008788:	480d      	ldr	r0, [pc, #52]	; (80087c0 <CDC_Transmit_FS+0x6c>)
 800878a:	f7f9 ff49 	bl	8002620 <HAL_GPIO_WritePin>
		return USBD_BUSY;
 800878e:	2301      	movs	r3, #1
 8008790:	e011      	b.n	80087b6 <CDC_Transmit_FS+0x62>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008792:	887b      	ldrh	r3, [r7, #2]
 8008794:	461a      	mov	r2, r3
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	480a      	ldr	r0, [pc, #40]	; (80087c4 <CDC_Transmit_FS+0x70>)
 800879a:	f7fe fc26 	bl	8006fea <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800879e:	4809      	ldr	r0, [pc, #36]	; (80087c4 <CDC_Transmit_FS+0x70>)
 80087a0:	f7fe fc50 	bl	8007044 <USBD_CDC_TransmitPacket>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80087a8:	2200      	movs	r2, #0
 80087aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80087ae:	4804      	ldr	r0, [pc, #16]	; (80087c0 <CDC_Transmit_FS+0x6c>)
 80087b0:	f7f9 ff36 	bl	8002620 <HAL_GPIO_WritePin>
  /* USER CODE END 7 */
  return result;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	40020c00 	.word	0x40020c00
 80087c4:	20011b10 	.word	0x20011b10

080087c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80087da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	371c      	adds	r7, #28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
	...

080087ec <_printf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void _printf(const char *format, ...)
{
 80087ec:	b40f      	push	{r0, r1, r2, r3}
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
	va_list arg;
	if (HOST_PORT_COM_OPEN)
 80087f4:	4b11      	ldr	r3, [pc, #68]	; (800883c <_printf+0x50>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d018      	beq.n	800882e <_printf+0x42>
	{
		va_start(arg, format);
 80087fc:	f107 0314 	add.w	r3, r7, #20
 8008800:	607b      	str	r3, [r7, #4]
		vsprintf((char*) UserTxBufferFS, format, arg);
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6939      	ldr	r1, [r7, #16]
 8008806:	480e      	ldr	r0, [pc, #56]	; (8008840 <_printf+0x54>)
 8008808:	f002 fe1a 	bl	800b440 <vsiprintf>
		va_end(arg);
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY)
 800880c:	bf00      	nop
 800880e:	4b0b      	ldr	r3, [pc, #44]	; (800883c <_printf+0x50>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00b      	beq.n	800882e <_printf+0x42>
 8008816:	480a      	ldr	r0, [pc, #40]	; (8008840 <_printf+0x54>)
 8008818:	f7f7 fce4 	bl	80001e4 <strlen>
 800881c:	4603      	mov	r3, r0
 800881e:	b29b      	uxth	r3, r3
 8008820:	4619      	mov	r1, r3
 8008822:	4807      	ldr	r0, [pc, #28]	; (8008840 <_printf+0x54>)
 8008824:	f7ff ff96 	bl	8008754 <CDC_Transmit_FS>
 8008828:	4603      	mov	r3, r0
 800882a:	2b01      	cmp	r3, #1
 800882c:	d0ef      	beq.n	800880e <_printf+0x22>
		{
		}
	}
}
 800882e:	bf00      	nop
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008838:	b004      	add	sp, #16
 800883a:	4770      	bx	lr
 800883c:	20000785 	.word	0x20000785
 8008840:	20011e64 	.word	0x20011e64

08008844 <_cprintf>:

void _cprintf(const char *format, ...)
{
 8008844:	b40f      	push	{r0, r1, r2, r3}
 8008846:	b5b0      	push	{r4, r5, r7, lr}
 8008848:	b084      	sub	sp, #16
 800884a:	af02      	add	r7, sp, #8
	va_list arg;
	uint32_t clktime;
	if (HOST_PORT_COM_OPEN)
 800884c:	4b38      	ldr	r3, [pc, #224]	; (8008930 <_cprintf+0xec>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d066      	beq.n	8008922 <_cprintf+0xde>
	{
		clktime = HAL_GetTick();
 8008854:	f7f9 f868 	bl	8001928 <HAL_GetTick>
 8008858:	6078      	str	r0, [r7, #4]
		va_start(arg, format);
 800885a:	f107 031c 	add.w	r3, r7, #28
 800885e:	603b      	str	r3, [r7, #0]
		sprintf((char*) UserTxBufferFS, "\r[%02lu:%02lu:%02lu.%03lu] ", (clktime/3600000)%100, (clktime/60000)%60, (clktime/1000)%60, clktime%1000);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a34      	ldr	r2, [pc, #208]	; (8008934 <_cprintf+0xf0>)
 8008864:	fba2 2303 	umull	r2, r3, r2, r3
 8008868:	0d5b      	lsrs	r3, r3, #21
 800886a:	4a33      	ldr	r2, [pc, #204]	; (8008938 <_cprintf+0xf4>)
 800886c:	fba2 1203 	umull	r1, r2, r2, r3
 8008870:	0950      	lsrs	r0, r2, #5
 8008872:	2264      	movs	r2, #100	; 0x64
 8008874:	fb02 f200 	mul.w	r2, r2, r0
 8008878:	1a98      	subs	r0, r3, r2
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a2f      	ldr	r2, [pc, #188]	; (800893c <_cprintf+0xf8>)
 800887e:	fba2 2303 	umull	r2, r3, r2, r3
 8008882:	0b9a      	lsrs	r2, r3, #14
 8008884:	4b2e      	ldr	r3, [pc, #184]	; (8008940 <_cprintf+0xfc>)
 8008886:	fba3 1302 	umull	r1, r3, r3, r2
 800888a:	0959      	lsrs	r1, r3, #5
 800888c:	460b      	mov	r3, r1
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	1a5b      	subs	r3, r3, r1
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	1ad1      	subs	r1, r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a2a      	ldr	r2, [pc, #168]	; (8008944 <_cprintf+0x100>)
 800889a:	fba2 2303 	umull	r2, r3, r2, r3
 800889e:	099c      	lsrs	r4, r3, #6
 80088a0:	4b27      	ldr	r3, [pc, #156]	; (8008940 <_cprintf+0xfc>)
 80088a2:	fba3 2304 	umull	r2, r3, r3, r4
 80088a6:	095a      	lsrs	r2, r3, #5
 80088a8:	4613      	mov	r3, r2
 80088aa:	011b      	lsls	r3, r3, #4
 80088ac:	1a9b      	subs	r3, r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	1ae2      	subs	r2, r4, r3
 80088b2:	687c      	ldr	r4, [r7, #4]
 80088b4:	4b23      	ldr	r3, [pc, #140]	; (8008944 <_cprintf+0x100>)
 80088b6:	fba3 5304 	umull	r5, r3, r3, r4
 80088ba:	099b      	lsrs	r3, r3, #6
 80088bc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80088c0:	fb05 f303 	mul.w	r3, r5, r3
 80088c4:	1ae3      	subs	r3, r4, r3
 80088c6:	9301      	str	r3, [sp, #4]
 80088c8:	9200      	str	r2, [sp, #0]
 80088ca:	460b      	mov	r3, r1
 80088cc:	4602      	mov	r2, r0
 80088ce:	491e      	ldr	r1, [pc, #120]	; (8008948 <_cprintf+0x104>)
 80088d0:	481e      	ldr	r0, [pc, #120]	; (800894c <_cprintf+0x108>)
 80088d2:	f002 fd7f 	bl	800b3d4 <siprintf>
		vsprintf((char*) &UserTxBufferFS[16], format, arg);
 80088d6:	683a      	ldr	r2, [r7, #0]
 80088d8:	69b9      	ldr	r1, [r7, #24]
 80088da:	481d      	ldr	r0, [pc, #116]	; (8008950 <_cprintf+0x10c>)
 80088dc:	f002 fdb0 	bl	800b440 <vsiprintf>
		va_end(arg);
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY)
 80088e0:	bf00      	nop
 80088e2:	4b13      	ldr	r3, [pc, #76]	; (8008930 <_cprintf+0xec>)
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00b      	beq.n	8008902 <_cprintf+0xbe>
 80088ea:	4818      	ldr	r0, [pc, #96]	; (800894c <_cprintf+0x108>)
 80088ec:	f7f7 fc7a 	bl	80001e4 <strlen>
 80088f0:	4603      	mov	r3, r0
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	4619      	mov	r1, r3
 80088f6:	4815      	ldr	r0, [pc, #84]	; (800894c <_cprintf+0x108>)
 80088f8:	f7ff ff2c 	bl	8008754 <CDC_Transmit_FS>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d0ef      	beq.n	80088e2 <_cprintf+0x9e>
		{
		}
		if(CDC_RX_DATA_PRINT)
 8008902:	4b14      	ldr	r3, [pc, #80]	; (8008954 <_cprintf+0x110>)
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00b      	beq.n	8008922 <_cprintf+0xde>
		{
			while(HOST_PORT_COM_OPEN && CDC_Transmit_FS((uint8_t *) "stm32@serial>> ", 15) == USBD_BUSY)
 800890a:	bf00      	nop
 800890c:	4b08      	ldr	r3, [pc, #32]	; (8008930 <_cprintf+0xec>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d006      	beq.n	8008922 <_cprintf+0xde>
 8008914:	210f      	movs	r1, #15
 8008916:	4810      	ldr	r0, [pc, #64]	; (8008958 <_cprintf+0x114>)
 8008918:	f7ff ff1c 	bl	8008754 <CDC_Transmit_FS>
 800891c:	4603      	mov	r3, r0
 800891e:	2b01      	cmp	r3, #1
 8008920:	d0f4      	beq.n	800890c <_cprintf+0xc8>
			{
			}
		}
	}

}
 8008922:	bf00      	nop
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800892c:	b004      	add	sp, #16
 800892e:	4770      	bx	lr
 8008930:	20000785 	.word	0x20000785
 8008934:	95217cb1 	.word	0x95217cb1
 8008938:	51eb851f 	.word	0x51eb851f
 800893c:	45e7b273 	.word	0x45e7b273
 8008940:	88888889 	.word	0x88888889
 8008944:	10624dd3 	.word	0x10624dd3
 8008948:	0800d0cc 	.word	0x0800d0cc
 800894c:	20011e64 	.word	0x20011e64
 8008950:	20011e74 	.word	0x20011e74
 8008954:	20011de0 	.word	0x20011de0
 8008958:	0800d0e8 	.word	0x0800d0e8

0800895c <_scanf>:

void _scanf(const char *format, ...)
{
 800895c:	b40f      	push	{r0, r1, r2, r3}
 800895e:	b580      	push	{r7, lr}
 8008960:	b082      	sub	sp, #8
 8008962:	af00      	add	r7, sp, #0
	while (!CDC_RX_DATA_PENDING && HOST_PORT_COM_OPEN)
 8008964:	e005      	b.n	8008972 <_scanf+0x16>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8008966:	2201      	movs	r2, #1
 8008968:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800896c:	4814      	ldr	r0, [pc, #80]	; (80089c0 <_scanf+0x64>)
 800896e:	f7f9 fe57 	bl	8002620 <HAL_GPIO_WritePin>
	while (!CDC_RX_DATA_PENDING && HOST_PORT_COM_OPEN)
 8008972:	4b14      	ldr	r3, [pc, #80]	; (80089c4 <_scanf+0x68>)
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	f083 0301 	eor.w	r3, r3, #1
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d003      	beq.n	8008988 <_scanf+0x2c>
 8008980:	4b11      	ldr	r3, [pc, #68]	; (80089c8 <_scanf+0x6c>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1ee      	bne.n	8008966 <_scanf+0xa>
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008988:	2200      	movs	r2, #0
 800898a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800898e:	480c      	ldr	r0, [pc, #48]	; (80089c0 <_scanf+0x64>)
 8008990:	f7f9 fe46 	bl	8002620 <HAL_GPIO_WritePin>
	if (CDC_RX_DATA_PENDING)
 8008994:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <_scanf+0x68>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00a      	beq.n	80089b2 <_scanf+0x56>
	{
		va_list arg;
		va_start(arg, format);
 800899c:	f107 0314 	add.w	r3, r7, #20
 80089a0:	607b      	str	r3, [r7, #4]
		vsscanf((char*) UserRxBufferFS, format, arg);
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	6939      	ldr	r1, [r7, #16]
 80089a6:	4809      	ldr	r0, [pc, #36]	; (80089cc <_scanf+0x70>)
 80089a8:	f002 fd78 	bl	800b49c <vsiscanf>
		va_end(arg);
		CDC_RX_DATA_PENDING = 0;
 80089ac:	4b05      	ldr	r3, [pc, #20]	; (80089c4 <_scanf+0x68>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	701a      	strb	r2, [r3, #0]
	}
}
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089bc:	b004      	add	sp, #16
 80089be:	4770      	bx	lr
 80089c0:	40020c00 	.word	0x40020c00
 80089c4:	20000786 	.word	0x20000786
 80089c8:	20000785 	.word	0x20000785
 80089cc:	20011de4 	.word	0x20011de4

080089d0 <_cspin>:

void _cspin(void)
{
 80089d0:	b5b0      	push	{r4, r5, r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af02      	add	r7, sp, #8
	static uint32_t clktime;
	if (HOST_PORT_COM_OPEN)
 80089d6:	4b2e      	ldr	r3, [pc, #184]	; (8008a90 <_cspin+0xc0>)
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d054      	beq.n	8008a88 <_cspin+0xb8>
	{
		clktime = HAL_GetTick();
 80089de:	f7f8 ffa3 	bl	8001928 <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	4b2b      	ldr	r3, [pc, #172]	; (8008a94 <_cspin+0xc4>)
 80089e6:	601a      	str	r2, [r3, #0]
		sprintf((char*) UserTxBufferFS, "\033[1A\r[%02lu:%02lu:%02lu.%03lu]\033[1B\r", (clktime/3600000)%100, (clktime/60000)%60, (clktime/1000)%60, clktime%1000);
 80089e8:	4b2a      	ldr	r3, [pc, #168]	; (8008a94 <_cspin+0xc4>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a2a      	ldr	r2, [pc, #168]	; (8008a98 <_cspin+0xc8>)
 80089ee:	fba2 2303 	umull	r2, r3, r2, r3
 80089f2:	0d5b      	lsrs	r3, r3, #21
 80089f4:	4a29      	ldr	r2, [pc, #164]	; (8008a9c <_cspin+0xcc>)
 80089f6:	fba2 1203 	umull	r1, r2, r2, r3
 80089fa:	0950      	lsrs	r0, r2, #5
 80089fc:	2264      	movs	r2, #100	; 0x64
 80089fe:	fb02 f200 	mul.w	r2, r2, r0
 8008a02:	1a98      	subs	r0, r3, r2
 8008a04:	4b23      	ldr	r3, [pc, #140]	; (8008a94 <_cspin+0xc4>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a25      	ldr	r2, [pc, #148]	; (8008aa0 <_cspin+0xd0>)
 8008a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0e:	0b9a      	lsrs	r2, r3, #14
 8008a10:	4b24      	ldr	r3, [pc, #144]	; (8008aa4 <_cspin+0xd4>)
 8008a12:	fba3 1302 	umull	r1, r3, r3, r2
 8008a16:	0959      	lsrs	r1, r3, #5
 8008a18:	460b      	mov	r3, r1
 8008a1a:	011b      	lsls	r3, r3, #4
 8008a1c:	1a5b      	subs	r3, r3, r1
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	1ad1      	subs	r1, r2, r3
 8008a22:	4b1c      	ldr	r3, [pc, #112]	; (8008a94 <_cspin+0xc4>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a20      	ldr	r2, [pc, #128]	; (8008aa8 <_cspin+0xd8>)
 8008a28:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2c:	099c      	lsrs	r4, r3, #6
 8008a2e:	4b1d      	ldr	r3, [pc, #116]	; (8008aa4 <_cspin+0xd4>)
 8008a30:	fba3 2304 	umull	r2, r3, r3, r4
 8008a34:	095a      	lsrs	r2, r3, #5
 8008a36:	4613      	mov	r3, r2
 8008a38:	011b      	lsls	r3, r3, #4
 8008a3a:	1a9b      	subs	r3, r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	1ae2      	subs	r2, r4, r3
 8008a40:	4b14      	ldr	r3, [pc, #80]	; (8008a94 <_cspin+0xc4>)
 8008a42:	681c      	ldr	r4, [r3, #0]
 8008a44:	4b18      	ldr	r3, [pc, #96]	; (8008aa8 <_cspin+0xd8>)
 8008a46:	fba3 5304 	umull	r5, r3, r3, r4
 8008a4a:	099b      	lsrs	r3, r3, #6
 8008a4c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8008a50:	fb05 f303 	mul.w	r3, r5, r3
 8008a54:	1ae3      	subs	r3, r4, r3
 8008a56:	9301      	str	r3, [sp, #4]
 8008a58:	9200      	str	r2, [sp, #0]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	4913      	ldr	r1, [pc, #76]	; (8008aac <_cspin+0xdc>)
 8008a60:	4813      	ldr	r0, [pc, #76]	; (8008ab0 <_cspin+0xe0>)
 8008a62:	f002 fcb7 	bl	800b3d4 <siprintf>
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY)
 8008a66:	bf00      	nop
 8008a68:	4b09      	ldr	r3, [pc, #36]	; (8008a90 <_cspin+0xc0>)
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00b      	beq.n	8008a88 <_cspin+0xb8>
 8008a70:	480f      	ldr	r0, [pc, #60]	; (8008ab0 <_cspin+0xe0>)
 8008a72:	f7f7 fbb7 	bl	80001e4 <strlen>
 8008a76:	4603      	mov	r3, r0
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	480c      	ldr	r0, [pc, #48]	; (8008ab0 <_cspin+0xe0>)
 8008a7e:	f7ff fe69 	bl	8008754 <CDC_Transmit_FS>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d0ef      	beq.n	8008a68 <_cspin+0x98>
		{
		}
	}
}
 8008a88:	bf00      	nop
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000785 	.word	0x20000785
 8008a94:	2000088c 	.word	0x2000088c
 8008a98:	95217cb1 	.word	0x95217cb1
 8008a9c:	51eb851f 	.word	0x51eb851f
 8008aa0:	45e7b273 	.word	0x45e7b273
 8008aa4:	88888889 	.word	0x88888889
 8008aa8:	10624dd3 	.word	0x10624dd3
 8008aac:	0800d0f8 	.word	0x0800d0f8
 8008ab0:	20011e64 	.word	0x20011e64

08008ab4 <CDC_Clear>:

void CDC_Clear(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
	if(CDC_RX_DATA_PRINT)
 8008ab8:	4b0f      	ldr	r3, [pc, #60]	; (8008af8 <CDC_Clear+0x44>)
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00c      	beq.n	8008ada <CDC_Clear+0x26>
	{
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS((uint8_t *)"\033[2Jstm32@serial>> ", 19) == USBD_BUSY)
 8008ac0:	bf00      	nop
 8008ac2:	4b0e      	ldr	r3, [pc, #56]	; (8008afc <CDC_Clear+0x48>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d013      	beq.n	8008af2 <CDC_Clear+0x3e>
 8008aca:	2113      	movs	r1, #19
 8008acc:	480c      	ldr	r0, [pc, #48]	; (8008b00 <CDC_Clear+0x4c>)
 8008ace:	f7ff fe41 	bl	8008754 <CDC_Transmit_FS>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d0f4      	beq.n	8008ac2 <CDC_Clear+0xe>
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS((uint8_t *)"\033[2J", 4) == USBD_BUSY)
		{
		}
	}

}
 8008ad8:	e00b      	b.n	8008af2 <CDC_Clear+0x3e>
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS((uint8_t *)"\033[2J", 4) == USBD_BUSY)
 8008ada:	bf00      	nop
 8008adc:	4b07      	ldr	r3, [pc, #28]	; (8008afc <CDC_Clear+0x48>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d006      	beq.n	8008af2 <CDC_Clear+0x3e>
 8008ae4:	2104      	movs	r1, #4
 8008ae6:	4807      	ldr	r0, [pc, #28]	; (8008b04 <CDC_Clear+0x50>)
 8008ae8:	f7ff fe34 	bl	8008754 <CDC_Transmit_FS>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d0f4      	beq.n	8008adc <CDC_Clear+0x28>
}
 8008af2:	bf00      	nop
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	20011de0 	.word	0x20011de0
 8008afc:	20000785 	.word	0x20000785
 8008b00:	0800d11c 	.word	0x0800d11c
 8008b04:	0800d130 	.word	0x0800d130

08008b08 <CDC_rxPrintf_ON>:
			_printf("\033[%dB", y);
		}
}

void CDC_rxPrintf_ON(void)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0
	if(!CDC_RX_DATA_PRINT)
 8008b0c:	4b0b      	ldr	r3, [pc, #44]	; (8008b3c <CDC_rxPrintf_ON+0x34>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	f083 0301 	eor.w	r3, r3, #1
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00e      	beq.n	8008b38 <CDC_rxPrintf_ON+0x30>
	{
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS((uint8_t *)"\rstm32@serial>> ", 16) == USBD_BUSY)
 8008b1a:	bf00      	nop
 8008b1c:	4b08      	ldr	r3, [pc, #32]	; (8008b40 <CDC_rxPrintf_ON+0x38>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d006      	beq.n	8008b32 <CDC_rxPrintf_ON+0x2a>
 8008b24:	2110      	movs	r1, #16
 8008b26:	4807      	ldr	r0, [pc, #28]	; (8008b44 <CDC_rxPrintf_ON+0x3c>)
 8008b28:	f7ff fe14 	bl	8008754 <CDC_Transmit_FS>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d0f4      	beq.n	8008b1c <CDC_rxPrintf_ON+0x14>
		{
		}
		CDC_RX_DATA_PRINT = TRUE;
 8008b32:	4b02      	ldr	r3, [pc, #8]	; (8008b3c <CDC_rxPrintf_ON+0x34>)
 8008b34:	2201      	movs	r2, #1
 8008b36:	701a      	strb	r2, [r3, #0]
	}
}
 8008b38:	bf00      	nop
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	20011de0 	.word	0x20011de0
 8008b40:	20000785 	.word	0x20000785
 8008b44:	0800d164 	.word	0x0800d164

08008b48 <CDC_rxPrintf_OFF>:

void CDC_rxPrintf_OFF(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
	if(CDC_RX_DATA_PRINT)
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	; (8008b78 <CDC_rxPrintf_OFF+0x30>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00e      	beq.n	8008b72 <CDC_rxPrintf_OFF+0x2a>
	{
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS((uint8_t *)"\r   \r\n\033[1A\r", 11) == USBD_BUSY)
 8008b54:	bf00      	nop
 8008b56:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <CDC_rxPrintf_OFF+0x34>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d006      	beq.n	8008b6c <CDC_rxPrintf_OFF+0x24>
 8008b5e:	210b      	movs	r1, #11
 8008b60:	4807      	ldr	r0, [pc, #28]	; (8008b80 <CDC_rxPrintf_OFF+0x38>)
 8008b62:	f7ff fdf7 	bl	8008754 <CDC_Transmit_FS>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d0f4      	beq.n	8008b56 <CDC_rxPrintf_OFF+0xe>
		{
		}
		CDC_RX_DATA_PRINT = FALSE;
 8008b6c:	4b02      	ldr	r3, [pc, #8]	; (8008b78 <CDC_rxPrintf_OFF+0x30>)
 8008b6e:	2200      	movs	r2, #0
 8008b70:	701a      	strb	r2, [r3, #0]
	}
}
 8008b72:	bf00      	nop
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20011de0 	.word	0x20011de0
 8008b7c:	20000785 	.word	0x20000785
 8008b80:	0800d178 	.word	0x0800d178

08008b84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	6039      	str	r1, [r7, #0]
 8008b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2212      	movs	r2, #18
 8008b94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b96:	4b03      	ldr	r3, [pc, #12]	; (8008ba4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	20000558 	.word	0x20000558

08008ba8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	6039      	str	r1, [r7, #0]
 8008bb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2204      	movs	r2, #4
 8008bb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bba:	4b03      	ldr	r3, [pc, #12]	; (8008bc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr
 8008bc8:	2000056c 	.word	0x2000056c

08008bcc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	6039      	str	r1, [r7, #0]
 8008bd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bd8:	79fb      	ldrb	r3, [r7, #7]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d105      	bne.n	8008bea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	4907      	ldr	r1, [pc, #28]	; (8008c00 <USBD_FS_ProductStrDescriptor+0x34>)
 8008be2:	4808      	ldr	r0, [pc, #32]	; (8008c04 <USBD_FS_ProductStrDescriptor+0x38>)
 8008be4:	f7ff faad 	bl	8008142 <USBD_GetString>
 8008be8:	e004      	b.n	8008bf4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	4904      	ldr	r1, [pc, #16]	; (8008c00 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bee:	4805      	ldr	r0, [pc, #20]	; (8008c04 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bf0:	f7ff faa7 	bl	8008142 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bf4:	4b02      	ldr	r3, [pc, #8]	; (8008c00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20011ee4 	.word	0x20011ee4
 8008c04:	0800d184 	.word	0x0800d184

08008c08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	6039      	str	r1, [r7, #0]
 8008c12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	4904      	ldr	r1, [pc, #16]	; (8008c28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c18:	4804      	ldr	r0, [pc, #16]	; (8008c2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c1a:	f7ff fa92 	bl	8008142 <USBD_GetString>
  return USBD_StrDesc;
 8008c1e:	4b02      	ldr	r3, [pc, #8]	; (8008c28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	20011ee4 	.word	0x20011ee4
 8008c2c:	0800d19c 	.word	0x0800d19c

08008c30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	6039      	str	r1, [r7, #0]
 8008c3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	221a      	movs	r2, #26
 8008c40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c42:	f000 f843 	bl	8008ccc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c46:	4b02      	ldr	r3, [pc, #8]	; (8008c50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	20000570 	.word	0x20000570

08008c54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	6039      	str	r1, [r7, #0]
 8008c5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c60:	79fb      	ldrb	r3, [r7, #7]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d105      	bne.n	8008c72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	4907      	ldr	r1, [pc, #28]	; (8008c88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c6a:	4808      	ldr	r0, [pc, #32]	; (8008c8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c6c:	f7ff fa69 	bl	8008142 <USBD_GetString>
 8008c70:	e004      	b.n	8008c7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	4904      	ldr	r1, [pc, #16]	; (8008c88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c76:	4805      	ldr	r0, [pc, #20]	; (8008c8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c78:	f7ff fa63 	bl	8008142 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c7c:	4b02      	ldr	r3, [pc, #8]	; (8008c88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20011ee4 	.word	0x20011ee4
 8008c8c:	0800d1b0 	.word	0x0800d1b0

08008c90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	6039      	str	r1, [r7, #0]
 8008c9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c9c:	79fb      	ldrb	r3, [r7, #7]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d105      	bne.n	8008cae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	4907      	ldr	r1, [pc, #28]	; (8008cc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ca6:	4808      	ldr	r0, [pc, #32]	; (8008cc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ca8:	f7ff fa4b 	bl	8008142 <USBD_GetString>
 8008cac:	e004      	b.n	8008cb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	4904      	ldr	r1, [pc, #16]	; (8008cc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cb2:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cb4:	f7ff fa45 	bl	8008142 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cb8:	4b02      	ldr	r3, [pc, #8]	; (8008cc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20011ee4 	.word	0x20011ee4
 8008cc8:	0800d1bc 	.word	0x0800d1bc

08008ccc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cd2:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <Get_SerialNum+0x44>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cd8:	4b0e      	ldr	r3, [pc, #56]	; (8008d14 <Get_SerialNum+0x48>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cde:	4b0e      	ldr	r3, [pc, #56]	; (8008d18 <Get_SerialNum+0x4c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4413      	add	r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d009      	beq.n	8008d06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008cf2:	2208      	movs	r2, #8
 8008cf4:	4909      	ldr	r1, [pc, #36]	; (8008d1c <Get_SerialNum+0x50>)
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 f814 	bl	8008d24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008cfc:	2204      	movs	r2, #4
 8008cfe:	4908      	ldr	r1, [pc, #32]	; (8008d20 <Get_SerialNum+0x54>)
 8008d00:	68b8      	ldr	r0, [r7, #8]
 8008d02:	f000 f80f 	bl	8008d24 <IntToUnicode>
  }
}
 8008d06:	bf00      	nop
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	1fff7a10 	.word	0x1fff7a10
 8008d14:	1fff7a14 	.word	0x1fff7a14
 8008d18:	1fff7a18 	.word	0x1fff7a18
 8008d1c:	20000572 	.word	0x20000572
 8008d20:	20000582 	.word	0x20000582

08008d24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d36:	2300      	movs	r3, #0
 8008d38:	75fb      	strb	r3, [r7, #23]
 8008d3a:	e027      	b.n	8008d8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	0f1b      	lsrs	r3, r3, #28
 8008d40:	2b09      	cmp	r3, #9
 8008d42:	d80b      	bhi.n	8008d5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	0f1b      	lsrs	r3, r3, #28
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	4619      	mov	r1, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	440b      	add	r3, r1
 8008d54:	3230      	adds	r2, #48	; 0x30
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	701a      	strb	r2, [r3, #0]
 8008d5a:	e00a      	b.n	8008d72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	0f1b      	lsrs	r3, r3, #28
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	4619      	mov	r1, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	440b      	add	r3, r1
 8008d6c:	3237      	adds	r2, #55	; 0x37
 8008d6e:	b2d2      	uxtb	r2, r2
 8008d70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	011b      	lsls	r3, r3, #4
 8008d76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d78:	7dfb      	ldrb	r3, [r7, #23]
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	4413      	add	r3, r2
 8008d82:	2200      	movs	r2, #0
 8008d84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	75fb      	strb	r3, [r7, #23]
 8008d8c:	7dfa      	ldrb	r2, [r7, #23]
 8008d8e:	79fb      	ldrb	r3, [r7, #7]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d3d3      	bcc.n	8008d3c <IntToUnicode+0x18>
  }
}
 8008d94:	bf00      	nop
 8008d96:	371c      	adds	r7, #28
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08a      	sub	sp, #40	; 0x28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008da8:	f107 0314 	add.w	r3, r7, #20
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	605a      	str	r2, [r3, #4]
 8008db2:	609a      	str	r2, [r3, #8]
 8008db4:	60da      	str	r2, [r3, #12]
 8008db6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dc0:	d147      	bne.n	8008e52 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	613b      	str	r3, [r7, #16]
 8008dc6:	4b25      	ldr	r3, [pc, #148]	; (8008e5c <HAL_PCD_MspInit+0xbc>)
 8008dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dca:	4a24      	ldr	r2, [pc, #144]	; (8008e5c <HAL_PCD_MspInit+0xbc>)
 8008dcc:	f043 0301 	orr.w	r3, r3, #1
 8008dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8008dd2:	4b22      	ldr	r3, [pc, #136]	; (8008e5c <HAL_PCD_MspInit+0xbc>)
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	613b      	str	r3, [r7, #16]
 8008ddc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008de4:	2300      	movs	r3, #0
 8008de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008de8:	2300      	movs	r3, #0
 8008dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008dec:	f107 0314 	add.w	r3, r7, #20
 8008df0:	4619      	mov	r1, r3
 8008df2:	481b      	ldr	r0, [pc, #108]	; (8008e60 <HAL_PCD_MspInit+0xc0>)
 8008df4:	f7f9 fa62 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008df8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dfe:	2302      	movs	r3, #2
 8008e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e06:	2300      	movs	r3, #0
 8008e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e0a:	230a      	movs	r3, #10
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e0e:	f107 0314 	add.w	r3, r7, #20
 8008e12:	4619      	mov	r1, r3
 8008e14:	4812      	ldr	r0, [pc, #72]	; (8008e60 <HAL_PCD_MspInit+0xc0>)
 8008e16:	f7f9 fa51 	bl	80022bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e1a:	4b10      	ldr	r3, [pc, #64]	; (8008e5c <HAL_PCD_MspInit+0xbc>)
 8008e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1e:	4a0f      	ldr	r2, [pc, #60]	; (8008e5c <HAL_PCD_MspInit+0xbc>)
 8008e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e24:	6353      	str	r3, [r2, #52]	; 0x34
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]
 8008e2a:	4b0c      	ldr	r3, [pc, #48]	; (8008e5c <HAL_PCD_MspInit+0xbc>)
 8008e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2e:	4a0b      	ldr	r2, [pc, #44]	; (8008e5c <HAL_PCD_MspInit+0xbc>)
 8008e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e34:	6453      	str	r3, [r2, #68]	; 0x44
 8008e36:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <HAL_PCD_MspInit+0xbc>)
 8008e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e42:	2200      	movs	r2, #0
 8008e44:	2100      	movs	r1, #0
 8008e46:	2043      	movs	r0, #67	; 0x43
 8008e48:	f7f8 fe77 	bl	8001b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e4c:	2043      	movs	r0, #67	; 0x43
 8008e4e:	f7f8 fe90 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e52:	bf00      	nop
 8008e54:	3728      	adds	r7, #40	; 0x28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	40023800 	.word	0x40023800
 8008e60:	40020000 	.word	0x40020000

08008e64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f7fe f9de 	bl	800723c <USBD_LL_SetupStage>
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008e9a:	78fa      	ldrb	r2, [r7, #3]
 8008e9c:	6879      	ldr	r1, [r7, #4]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	00db      	lsls	r3, r3, #3
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	440b      	add	r3, r1
 8008ea8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	f7fe fa16 	bl	80072e2 <USBD_LL_DataOutStage>
}
 8008eb6:	bf00      	nop
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b082      	sub	sp, #8
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008ed0:	78fa      	ldrb	r2, [r7, #3]
 8008ed2:	6879      	ldr	r1, [r7, #4]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	00db      	lsls	r3, r3, #3
 8008ed8:	1a9b      	subs	r3, r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	440b      	add	r3, r1
 8008ede:	3348      	adds	r3, #72	; 0x48
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	78fb      	ldrb	r3, [r7, #3]
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	f7fe fa5f 	bl	80073a8 <USBD_LL_DataInStage>
}
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b082      	sub	sp, #8
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fe fb63 	bl	80075cc <USBD_LL_SOF>
}
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f16:	2301      	movs	r3, #1
 8008f18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d102      	bne.n	8008f28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008f22:	2300      	movs	r3, #0
 8008f24:	73fb      	strb	r3, [r7, #15]
 8008f26:	e008      	b.n	8008f3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d102      	bne.n	8008f36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008f30:	2301      	movs	r3, #1
 8008f32:	73fb      	strb	r3, [r7, #15]
 8008f34:	e001      	b.n	8008f3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008f36:	f7f8 f9fb 	bl	8001330 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f40:	7bfa      	ldrb	r2, [r7, #15]
 8008f42:	4611      	mov	r1, r2
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fe fb06 	bl	8007556 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fe fabf 	bl	80074d4 <USBD_LL_Reset>
}
 8008f56:	bf00      	nop
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
	...

08008f60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe fb01 	bl	8007576 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	6812      	ldr	r2, [r2, #0]
 8008f82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f86:	f043 0301 	orr.w	r3, r3, #1
 8008f8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d005      	beq.n	8008fa0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f94:	4b04      	ldr	r3, [pc, #16]	; (8008fa8 <HAL_PCD_SuspendCallback+0x48>)
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	4a03      	ldr	r2, [pc, #12]	; (8008fa8 <HAL_PCD_SuspendCallback+0x48>)
 8008f9a:	f043 0306 	orr.w	r3, r3, #6
 8008f9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	e000ed00 	.word	0xe000ed00

08008fac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe faf0 	bl	80075a0 <USBD_LL_Resume>
}
 8008fc0:	bf00      	nop
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fda:	78fa      	ldrb	r2, [r7, #3]
 8008fdc:	4611      	mov	r1, r2
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fe fb1b 	bl	800761a <USBD_LL_IsoOUTIncomplete>
}
 8008fe4:	bf00      	nop
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ffe:	78fa      	ldrb	r2, [r7, #3]
 8009000:	4611      	mov	r1, r2
 8009002:	4618      	mov	r0, r3
 8009004:	f7fe fafc 	bl	8007600 <USBD_LL_IsoINIncomplete>
}
 8009008:	bf00      	nop
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800901e:	4618      	mov	r0, r3
 8009020:	f7fe fb08 	bl	8007634 <USBD_LL_DevConnected>
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800903a:	4618      	mov	r0, r3
 800903c:	f7fe fb05 	bl	800764a <USBD_LL_DevDisconnected>
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d13c      	bne.n	80090d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009058:	4a20      	ldr	r2, [pc, #128]	; (80090dc <USBD_LL_Init+0x94>)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a1e      	ldr	r2, [pc, #120]	; (80090dc <USBD_LL_Init+0x94>)
 8009064:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009068:	4b1c      	ldr	r3, [pc, #112]	; (80090dc <USBD_LL_Init+0x94>)
 800906a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800906e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009070:	4b1a      	ldr	r3, [pc, #104]	; (80090dc <USBD_LL_Init+0x94>)
 8009072:	2204      	movs	r2, #4
 8009074:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009076:	4b19      	ldr	r3, [pc, #100]	; (80090dc <USBD_LL_Init+0x94>)
 8009078:	2202      	movs	r2, #2
 800907a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800907c:	4b17      	ldr	r3, [pc, #92]	; (80090dc <USBD_LL_Init+0x94>)
 800907e:	2200      	movs	r2, #0
 8009080:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009082:	4b16      	ldr	r3, [pc, #88]	; (80090dc <USBD_LL_Init+0x94>)
 8009084:	2202      	movs	r2, #2
 8009086:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009088:	4b14      	ldr	r3, [pc, #80]	; (80090dc <USBD_LL_Init+0x94>)
 800908a:	2200      	movs	r2, #0
 800908c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800908e:	4b13      	ldr	r3, [pc, #76]	; (80090dc <USBD_LL_Init+0x94>)
 8009090:	2200      	movs	r2, #0
 8009092:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009094:	4b11      	ldr	r3, [pc, #68]	; (80090dc <USBD_LL_Init+0x94>)
 8009096:	2200      	movs	r2, #0
 8009098:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800909a:	4b10      	ldr	r3, [pc, #64]	; (80090dc <USBD_LL_Init+0x94>)
 800909c:	2200      	movs	r2, #0
 800909e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80090a0:	4b0e      	ldr	r3, [pc, #56]	; (80090dc <USBD_LL_Init+0x94>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80090a6:	480d      	ldr	r0, [pc, #52]	; (80090dc <USBD_LL_Init+0x94>)
 80090a8:	f7fa fafe 	bl	80036a8 <HAL_PCD_Init>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80090b2:	f7f8 f93d 	bl	8001330 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80090b6:	2180      	movs	r1, #128	; 0x80
 80090b8:	4808      	ldr	r0, [pc, #32]	; (80090dc <USBD_LL_Init+0x94>)
 80090ba:	f7fb fc5c 	bl	8004976 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80090be:	2240      	movs	r2, #64	; 0x40
 80090c0:	2100      	movs	r1, #0
 80090c2:	4806      	ldr	r0, [pc, #24]	; (80090dc <USBD_LL_Init+0x94>)
 80090c4:	f7fb fc10 	bl	80048e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80090c8:	2280      	movs	r2, #128	; 0x80
 80090ca:	2101      	movs	r1, #1
 80090cc:	4803      	ldr	r0, [pc, #12]	; (80090dc <USBD_LL_Init+0x94>)
 80090ce:	f7fb fc0b 	bl	80048e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	200120e4 	.word	0x200120e4

080090e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fa fbf3 	bl	80038e2 <HAL_PCD_Start>
 80090fc:	4603      	mov	r3, r0
 80090fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	4618      	mov	r0, r3
 8009104:	f000 f92a 	bl	800935c <USBD_Get_USB_Status>
 8009108:	4603      	mov	r3, r0
 800910a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800910c:	7bbb      	ldrb	r3, [r7, #14]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b084      	sub	sp, #16
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	4608      	mov	r0, r1
 8009120:	4611      	mov	r1, r2
 8009122:	461a      	mov	r2, r3
 8009124:	4603      	mov	r3, r0
 8009126:	70fb      	strb	r3, [r7, #3]
 8009128:	460b      	mov	r3, r1
 800912a:	70bb      	strb	r3, [r7, #2]
 800912c:	4613      	mov	r3, r2
 800912e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800913e:	78bb      	ldrb	r3, [r7, #2]
 8009140:	883a      	ldrh	r2, [r7, #0]
 8009142:	78f9      	ldrb	r1, [r7, #3]
 8009144:	f7fa ffd7 	bl	80040f6 <HAL_PCD_EP_Open>
 8009148:	4603      	mov	r3, r0
 800914a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	4618      	mov	r0, r3
 8009150:	f000 f904 	bl	800935c <USBD_Get_USB_Status>
 8009154:	4603      	mov	r3, r0
 8009156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009158:	7bbb      	ldrb	r3, [r7, #14]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	460b      	mov	r3, r1
 800916c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800917c:	78fa      	ldrb	r2, [r7, #3]
 800917e:	4611      	mov	r1, r2
 8009180:	4618      	mov	r0, r3
 8009182:	f7fb f820 	bl	80041c6 <HAL_PCD_EP_Close>
 8009186:	4603      	mov	r3, r0
 8009188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f8e5 	bl	800935c <USBD_Get_USB_Status>
 8009192:	4603      	mov	r3, r0
 8009194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009196:	7bbb      	ldrb	r3, [r7, #14]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091ba:	78fa      	ldrb	r2, [r7, #3]
 80091bc:	4611      	mov	r1, r2
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fb f8f8 	bl	80043b4 <HAL_PCD_EP_SetStall>
 80091c4:	4603      	mov	r3, r0
 80091c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 f8c6 	bl	800935c <USBD_Get_USB_Status>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b084      	sub	sp, #16
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091f8:	78fa      	ldrb	r2, [r7, #3]
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fb f93d 	bl	800447c <HAL_PCD_EP_ClrStall>
 8009202:	4603      	mov	r3, r0
 8009204:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009206:	7bfb      	ldrb	r3, [r7, #15]
 8009208:	4618      	mov	r0, r3
 800920a:	f000 f8a7 	bl	800935c <USBD_Get_USB_Status>
 800920e:	4603      	mov	r3, r0
 8009210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009212:	7bbb      	ldrb	r3, [r7, #14]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	460b      	mov	r3, r1
 8009226:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800922e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009234:	2b00      	cmp	r3, #0
 8009236:	da0b      	bge.n	8009250 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009238:	78fb      	ldrb	r3, [r7, #3]
 800923a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800923e:	68f9      	ldr	r1, [r7, #12]
 8009240:	4613      	mov	r3, r2
 8009242:	00db      	lsls	r3, r3, #3
 8009244:	1a9b      	subs	r3, r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	440b      	add	r3, r1
 800924a:	333e      	adds	r3, #62	; 0x3e
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	e00b      	b.n	8009268 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009256:	68f9      	ldr	r1, [r7, #12]
 8009258:	4613      	mov	r3, r2
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	1a9b      	subs	r3, r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	440b      	add	r3, r1
 8009262:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009266:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009268:	4618      	mov	r0, r3
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800928e:	78fa      	ldrb	r2, [r7, #3]
 8009290:	4611      	mov	r1, r2
 8009292:	4618      	mov	r0, r3
 8009294:	f7fa ff0a 	bl	80040ac <HAL_PCD_SetAddress>
 8009298:	4603      	mov	r3, r0
 800929a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 f85c 	bl	800935c <USBD_Get_USB_Status>
 80092a4:	4603      	mov	r3, r0
 80092a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b086      	sub	sp, #24
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	607a      	str	r2, [r7, #4]
 80092bc:	603b      	str	r3, [r7, #0]
 80092be:	460b      	mov	r3, r1
 80092c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092d0:	7af9      	ldrb	r1, [r7, #11]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	f7fb f823 	bl	8004320 <HAL_PCD_EP_Transmit>
 80092da:	4603      	mov	r3, r0
 80092dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092de:	7dfb      	ldrb	r3, [r7, #23]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 f83b 	bl	800935c <USBD_Get_USB_Status>
 80092e6:	4603      	mov	r3, r0
 80092e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	607a      	str	r2, [r7, #4]
 80092fe:	603b      	str	r3, [r7, #0]
 8009300:	460b      	mov	r3, r1
 8009302:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009312:	7af9      	ldrb	r1, [r7, #11]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	f7fa ff9f 	bl	800425a <HAL_PCD_EP_Receive>
 800931c:	4603      	mov	r3, r0
 800931e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009320:	7dfb      	ldrb	r3, [r7, #23]
 8009322:	4618      	mov	r0, r3
 8009324:	f000 f81a 	bl	800935c <USBD_Get_USB_Status>
 8009328:	4603      	mov	r3, r0
 800932a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800932c:	7dbb      	ldrb	r3, [r7, #22]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	460b      	mov	r3, r1
 8009340:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009348:	78fa      	ldrb	r2, [r7, #3]
 800934a:	4611      	mov	r1, r2
 800934c:	4618      	mov	r0, r3
 800934e:	f7fa ffcf 	bl	80042f0 <HAL_PCD_EP_GetRxCount>
 8009352:	4603      	mov	r3, r0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800936a:	79fb      	ldrb	r3, [r7, #7]
 800936c:	2b03      	cmp	r3, #3
 800936e:	d817      	bhi.n	80093a0 <USBD_Get_USB_Status+0x44>
 8009370:	a201      	add	r2, pc, #4	; (adr r2, 8009378 <USBD_Get_USB_Status+0x1c>)
 8009372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009376:	bf00      	nop
 8009378:	08009389 	.word	0x08009389
 800937c:	0800938f 	.word	0x0800938f
 8009380:	08009395 	.word	0x08009395
 8009384:	0800939b 	.word	0x0800939b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	73fb      	strb	r3, [r7, #15]
    break;
 800938c:	e00b      	b.n	80093a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800938e:	2303      	movs	r3, #3
 8009390:	73fb      	strb	r3, [r7, #15]
    break;
 8009392:	e008      	b.n	80093a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009394:	2301      	movs	r3, #1
 8009396:	73fb      	strb	r3, [r7, #15]
    break;
 8009398:	e005      	b.n	80093a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800939a:	2303      	movs	r3, #3
 800939c:	73fb      	strb	r3, [r7, #15]
    break;
 800939e:	e002      	b.n	80093a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093a0:	2303      	movs	r3, #3
 80093a2:	73fb      	strb	r3, [r7, #15]
    break;
 80093a4:	bf00      	nop
  }
  return usb_status;
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <D16_GENERIC>:
 80093b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	b089      	sub	sp, #36	; 0x24
 80093ba:	68d4      	ldr	r4, [r2, #12]
 80093bc:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80093be:	6993      	ldr	r3, [r2, #24]
 80093c0:	9407      	str	r4, [sp, #28]
 80093c2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80093c4:	9306      	str	r3, [sp, #24]
 80093c6:	9402      	str	r4, [sp, #8]
 80093c8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80093cc:	f8d2 b014 	ldr.w	fp, [r2, #20]
 80093d0:	69d3      	ldr	r3, [r2, #28]
 80093d2:	6896      	ldr	r6, [r2, #8]
 80093d4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80093d6:	9103      	str	r1, [sp, #12]
 80093d8:	2d00      	cmp	r5, #0
 80093da:	d066      	beq.n	80094aa <D16_GENERIC+0xf6>
 80093dc:	f004 0510 	and.w	r5, r4, #16
 80093e0:	f004 0420 	and.w	r4, r4, #32
 80093e4:	9504      	str	r5, [sp, #16]
 80093e6:	4938      	ldr	r1, [pc, #224]	; (80094c8 <D16_GENERIC+0x114>)
 80093e8:	9405      	str	r4, [sp, #20]
 80093ea:	f04f 0e00 	mov.w	lr, #0
 80093ee:	4635      	mov	r5, r6
 80093f0:	e04f      	b.n	8009492 <D16_GENERIC+0xde>
 80093f2:	5d87      	ldrb	r7, [r0, r6]
 80093f4:	7804      	ldrb	r4, [r0, #0]
 80093f6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80093fa:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 80093fe:	b2e6      	uxtb	r6, r4
 8009400:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009404:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009408:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800940c:	4433      	add	r3, r6
 800940e:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8009412:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8009416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800941a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800941e:	0aa3      	lsrs	r3, r4, #10
 8009420:	4c2a      	ldr	r4, [pc, #168]	; (80094cc <D16_GENERIC+0x118>)
 8009422:	fb26 5404 	smlad	r4, r6, r4, r5
 8009426:	4d2a      	ldr	r5, [pc, #168]	; (80094d0 <D16_GENERIC+0x11c>)
 8009428:	fb26 f505 	smuad	r5, r6, r5
 800942c:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8009430:	eb04 080a 	add.w	r8, r4, sl
 8009434:	eba8 080b 	sub.w	r8, r8, fp
 8009438:	4646      	mov	r6, r8
 800943a:	17f7      	asrs	r7, r6, #31
 800943c:	e9cd 6700 	strd	r6, r7, [sp]
 8009440:	9e04      	ldr	r6, [sp, #16]
 8009442:	f10e 0c01 	add.w	ip, lr, #1
 8009446:	b16e      	cbz	r6, 8009464 <D16_GENERIC+0xb0>
 8009448:	6a16      	ldr	r6, [r2, #32]
 800944a:	9f01      	ldr	r7, [sp, #4]
 800944c:	fba8 8906 	umull	r8, r9, r8, r6
 8009450:	fb06 9907 	mla	r9, r6, r7, r9
 8009454:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8009458:	f149 0900 	adc.w	r9, r9, #0
 800945c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8009460:	46a3      	mov	fp, r4
 8009462:	4654      	mov	r4, sl
 8009464:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8009466:	9f02      	ldr	r7, [sp, #8]
 8009468:	0424      	lsls	r4, r4, #16
 800946a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800946e:	f04f 0900 	mov.w	r9, #0
 8009472:	fb0e fe06 	mul.w	lr, lr, r6
 8009476:	fbc7 8904 	smlal	r8, r9, r7, r4
 800947a:	9e03      	ldr	r6, [sp, #12]
 800947c:	464f      	mov	r7, r9
 800947e:	10bc      	asrs	r4, r7, #2
 8009480:	f304 040f 	ssat	r4, #16, r4
 8009484:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8009488:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800948a:	fa1f fe8c 	uxth.w	lr, ip
 800948e:	4574      	cmp	r4, lr
 8009490:	d90a      	bls.n	80094a8 <D16_GENERIC+0xf4>
 8009492:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8009494:	2c01      	cmp	r4, #1
 8009496:	b2e6      	uxtb	r6, r4
 8009498:	d1ab      	bne.n	80093f2 <D16_GENERIC+0x3e>
 800949a:	9e05      	ldr	r6, [sp, #20]
 800949c:	f850 4b02 	ldr.w	r4, [r0], #2
 80094a0:	2e00      	cmp	r6, #0
 80094a2:	d0ac      	beq.n	80093fe <D16_GENERIC+0x4a>
 80094a4:	ba64      	rev16	r4, r4
 80094a6:	e7aa      	b.n	80093fe <D16_GENERIC+0x4a>
 80094a8:	462e      	mov	r6, r5
 80094aa:	9907      	ldr	r1, [sp, #28]
 80094ac:	61d3      	str	r3, [r2, #28]
 80094ae:	9b06      	ldr	r3, [sp, #24]
 80094b0:	6096      	str	r6, [r2, #8]
 80094b2:	2000      	movs	r0, #0
 80094b4:	60d1      	str	r1, [r2, #12]
 80094b6:	f8c2 a010 	str.w	sl, [r2, #16]
 80094ba:	f8c2 b014 	str.w	fp, [r2, #20]
 80094be:	6193      	str	r3, [r2, #24]
 80094c0:	b009      	add	sp, #36	; 0x24
 80094c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c6:	bf00      	nop
 80094c8:	20000000 	.word	0x20000000
 80094cc:	00030001 	.word	0x00030001
 80094d0:	00010003 	.word	0x00010003

080094d4 <D24_GENERIC>:
 80094d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d8:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80094da:	6993      	ldr	r3, [r2, #24]
 80094dc:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80094de:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80094e2:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80094e6:	6894      	ldr	r4, [r2, #8]
 80094e8:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80094ec:	b089      	sub	sp, #36	; 0x24
 80094ee:	9307      	str	r3, [sp, #28]
 80094f0:	9503      	str	r5, [sp, #12]
 80094f2:	69d3      	ldr	r3, [r2, #28]
 80094f4:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80094f6:	9104      	str	r1, [sp, #16]
 80094f8:	2e00      	cmp	r6, #0
 80094fa:	f000 8096 	beq.w	800962a <D24_GENERIC+0x156>
 80094fe:	f005 0610 	and.w	r6, r5, #16
 8009502:	f005 0520 	and.w	r5, r5, #32
 8009506:	4954      	ldr	r1, [pc, #336]	; (8009658 <D24_GENERIC+0x184>)
 8009508:	9605      	str	r6, [sp, #20]
 800950a:	9506      	str	r5, [sp, #24]
 800950c:	f04f 0e00 	mov.w	lr, #0
 8009510:	f8cd 9008 	str.w	r9, [sp, #8]
 8009514:	e06a      	b.n	80095ec <D24_GENERIC+0x118>
 8009516:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800951a:	f810 8007 	ldrb.w	r8, [r0, r7]
 800951e:	f890 c000 	ldrb.w	ip, [r0]
 8009522:	042d      	lsls	r5, r5, #16
 8009524:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8009528:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800952c:	44ac      	add	ip, r5
 800952e:	4438      	add	r0, r7
 8009530:	fa5f f68c 	uxtb.w	r6, ip
 8009534:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8009538:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800953c:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8009540:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009544:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8009548:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800954c:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8009550:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8009554:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009558:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800955c:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8009560:	4d3e      	ldr	r5, [pc, #248]	; (800965c <D24_GENERIC+0x188>)
 8009562:	fb26 b705 	smlad	r7, r6, r5, fp
 8009566:	4d3e      	ldr	r5, [pc, #248]	; (8009660 <D24_GENERIC+0x18c>)
 8009568:	fb26 4b05 	smlad	fp, r6, r5, r4
 800956c:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8009570:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8009574:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8009578:	2401      	movs	r4, #1
 800957a:	fb26 f604 	smuad	r6, r6, r4
 800957e:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8009582:	9f02      	ldr	r7, [sp, #8]
 8009584:	eb0e 0c04 	add.w	ip, lr, r4
 8009588:	eb08 0406 	add.w	r4, r8, r6
 800958c:	eb05 060a 	add.w	r6, r5, sl
 8009590:	1bf6      	subs	r6, r6, r7
 8009592:	4637      	mov	r7, r6
 8009594:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8009598:	e9cd 7800 	strd	r7, r8, [sp]
 800959c:	9f05      	ldr	r7, [sp, #20]
 800959e:	b177      	cbz	r7, 80095be <D24_GENERIC+0xea>
 80095a0:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80095a4:	9502      	str	r5, [sp, #8]
 80095a6:	fba6 9a08 	umull	r9, sl, r6, r8
 80095aa:	9e01      	ldr	r6, [sp, #4]
 80095ac:	fb08 aa06 	mla	sl, r8, r6, sl
 80095b0:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 80095b4:	f14a 0700 	adc.w	r7, sl, #0
 80095b8:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80095bc:	4655      	mov	r5, sl
 80095be:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80095c0:	9f03      	ldr	r7, [sp, #12]
 80095c2:	03ad      	lsls	r5, r5, #14
 80095c4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80095c8:	f04f 0900 	mov.w	r9, #0
 80095cc:	fb0e fe06 	mul.w	lr, lr, r6
 80095d0:	fbc7 8905 	smlal	r8, r9, r7, r5
 80095d4:	9e04      	ldr	r6, [sp, #16]
 80095d6:	464f      	mov	r7, r9
 80095d8:	10bd      	asrs	r5, r7, #2
 80095da:	f305 050f 	ssat	r5, #16, r5
 80095de:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 80095e2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80095e4:	fa1f fe8c 	uxth.w	lr, ip
 80095e8:	4575      	cmp	r5, lr
 80095ea:	d91c      	bls.n	8009626 <D24_GENERIC+0x152>
 80095ec:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80095ee:	b2ef      	uxtb	r7, r5
 80095f0:	2d01      	cmp	r5, #1
 80095f2:	b23e      	sxth	r6, r7
 80095f4:	d18f      	bne.n	8009516 <D24_GENERIC+0x42>
 80095f6:	9d06      	ldr	r5, [sp, #24]
 80095f8:	b15d      	cbz	r5, 8009612 <D24_GENERIC+0x13e>
 80095fa:	f01e 0f01 	tst.w	lr, #1
 80095fe:	d122      	bne.n	8009646 <D24_GENERIC+0x172>
 8009600:	7805      	ldrb	r5, [r0, #0]
 8009602:	78c7      	ldrb	r7, [r0, #3]
 8009604:	7846      	ldrb	r6, [r0, #1]
 8009606:	022d      	lsls	r5, r5, #8
 8009608:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800960c:	44b4      	add	ip, r6
 800960e:	3002      	adds	r0, #2
 8009610:	e78e      	b.n	8009530 <D24_GENERIC+0x5c>
 8009612:	7846      	ldrb	r6, [r0, #1]
 8009614:	f890 c002 	ldrb.w	ip, [r0, #2]
 8009618:	f810 5b03 	ldrb.w	r5, [r0], #3
 800961c:	0236      	lsls	r6, r6, #8
 800961e:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8009622:	44ac      	add	ip, r5
 8009624:	e784      	b.n	8009530 <D24_GENERIC+0x5c>
 8009626:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800962a:	61d3      	str	r3, [r2, #28]
 800962c:	9b07      	ldr	r3, [sp, #28]
 800962e:	6094      	str	r4, [r2, #8]
 8009630:	2000      	movs	r0, #0
 8009632:	f8c2 b00c 	str.w	fp, [r2, #12]
 8009636:	f8c2 a010 	str.w	sl, [r2, #16]
 800963a:	f8c2 9014 	str.w	r9, [r2, #20]
 800963e:	6193      	str	r3, [r2, #24]
 8009640:	b009      	add	sp, #36	; 0x24
 8009642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009646:	78c5      	ldrb	r5, [r0, #3]
 8009648:	7887      	ldrb	r7, [r0, #2]
 800964a:	f810 6b04 	ldrb.w	r6, [r0], #4
 800964e:	022d      	lsls	r5, r5, #8
 8009650:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8009654:	44b4      	add	ip, r6
 8009656:	e76b      	b.n	8009530 <D24_GENERIC+0x5c>
 8009658:	20000000 	.word	0x20000000
 800965c:	00030001 	.word	0x00030001
 8009660:	00060007 	.word	0x00060007

08009664 <D32_GENERIC>:
 8009664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009668:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800966a:	6993      	ldr	r3, [r2, #24]
 800966c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800966e:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8009672:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8009676:	69d6      	ldr	r6, [r2, #28]
 8009678:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800967c:	b089      	sub	sp, #36	; 0x24
 800967e:	9307      	str	r3, [sp, #28]
 8009680:	9403      	str	r4, [sp, #12]
 8009682:	6893      	ldr	r3, [r2, #8]
 8009684:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009686:	9104      	str	r1, [sp, #16]
 8009688:	2d00      	cmp	r5, #0
 800968a:	f000 809f 	beq.w	80097cc <D32_GENERIC+0x168>
 800968e:	f004 0510 	and.w	r5, r4, #16
 8009692:	f004 0420 	and.w	r4, r4, #32
 8009696:	9505      	str	r5, [sp, #20]
 8009698:	4953      	ldr	r1, [pc, #332]	; (80097e8 <D32_GENERIC+0x184>)
 800969a:	9406      	str	r4, [sp, #24]
 800969c:	f04f 0c00 	mov.w	ip, #0
 80096a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80096a4:	461d      	mov	r5, r3
 80096a6:	4617      	mov	r7, r2
 80096a8:	e077      	b.n	800979a <D32_GENERIC+0x136>
 80096aa:	f818 3003 	ldrb.w	r3, [r8, r3]
 80096ae:	f810 800e 	ldrb.w	r8, [r0, lr]
 80096b2:	f810 e002 	ldrb.w	lr, [r0, r2]
 80096b6:	7800      	ldrb	r0, [r0, #0]
 80096b8:	041b      	lsls	r3, r3, #16
 80096ba:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80096be:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80096c2:	4403      	add	r3, r0
 80096c4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80096c8:	b2dc      	uxtb	r4, r3
 80096ca:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80096ce:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80096d2:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80096d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80096da:	0e1b      	lsrs	r3, r3, #24
 80096dc:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 80096e0:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 80096e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096e8:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80096ec:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 80096f0:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 80096f4:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80096f8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80096fc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009700:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009704:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8009708:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800970c:	4b37      	ldr	r3, [pc, #220]	; (80097ec <D32_GENERIC+0x188>)
 800970e:	fb22 b403 	smlad	r4, r2, r3, fp
 8009712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009716:	fb2e 4803 	smlad	r8, lr, r3, r4
 800971a:	4b35      	ldr	r3, [pc, #212]	; (80097f0 <D32_GENERIC+0x18c>)
 800971c:	fb22 5503 	smlad	r5, r2, r3, r5
 8009720:	4b34      	ldr	r3, [pc, #208]	; (80097f4 <D32_GENERIC+0x190>)
 8009722:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8009726:	2301      	movs	r3, #1
 8009728:	fb22 f203 	smuad	r2, r2, r3
 800972c:	4b32      	ldr	r3, [pc, #200]	; (80097f8 <D32_GENERIC+0x194>)
 800972e:	fb2e 2503 	smlad	r5, lr, r3, r2
 8009732:	9b02      	ldr	r3, [sp, #8]
 8009734:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8009738:	eb04 080a 	add.w	r8, r4, sl
 800973c:	eba8 0803 	sub.w	r8, r8, r3
 8009740:	4642      	mov	r2, r8
 8009742:	17d3      	asrs	r3, r2, #31
 8009744:	e9cd 2300 	strd	r2, r3, [sp]
 8009748:	9b05      	ldr	r3, [sp, #20]
 800974a:	f10c 0e01 	add.w	lr, ip, #1
 800974e:	b16b      	cbz	r3, 800976c <D32_GENERIC+0x108>
 8009750:	6a3a      	ldr	r2, [r7, #32]
 8009752:	9b01      	ldr	r3, [sp, #4]
 8009754:	9402      	str	r4, [sp, #8]
 8009756:	fba8 8902 	umull	r8, r9, r8, r2
 800975a:	fb02 9903 	mla	r9, r2, r3, r9
 800975e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8009762:	f149 0900 	adc.w	r9, r9, #0
 8009766:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800976a:	4654      	mov	r4, sl
 800976c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800976e:	9a04      	ldr	r2, [sp, #16]
 8009770:	fb0c fc03 	mul.w	ip, ip, r3
 8009774:	9b03      	ldr	r3, [sp, #12]
 8009776:	0364      	lsls	r4, r4, #13
 8009778:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800977c:	f04f 0900 	mov.w	r9, #0
 8009780:	fbc3 8904 	smlal	r8, r9, r3, r4
 8009784:	464b      	mov	r3, r9
 8009786:	109b      	asrs	r3, r3, #2
 8009788:	f303 030f 	ssat	r3, #16, r3
 800978c:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8009790:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009792:	fa1f fc8e 	uxth.w	ip, lr
 8009796:	4563      	cmp	r3, ip
 8009798:	d914      	bls.n	80097c4 <D32_GENERIC+0x160>
 800979a:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800979c:	b2e2      	uxtb	r2, r4
 800979e:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 80097a2:	eb00 080e 	add.w	r8, r0, lr
 80097a6:	4253      	negs	r3, r2
 80097a8:	2c01      	cmp	r4, #1
 80097aa:	eb08 0403 	add.w	r4, r8, r3
 80097ae:	f47f af7c 	bne.w	80096aa <D32_GENERIC+0x46>
 80097b2:	1d02      	adds	r2, r0, #4
 80097b4:	6803      	ldr	r3, [r0, #0]
 80097b6:	9806      	ldr	r0, [sp, #24]
 80097b8:	b110      	cbz	r0, 80097c0 <D32_GENERIC+0x15c>
 80097ba:	ba5b      	rev16	r3, r3
 80097bc:	4610      	mov	r0, r2
 80097be:	e783      	b.n	80096c8 <D32_GENERIC+0x64>
 80097c0:	4610      	mov	r0, r2
 80097c2:	e781      	b.n	80096c8 <D32_GENERIC+0x64>
 80097c4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80097c8:	462b      	mov	r3, r5
 80097ca:	463a      	mov	r2, r7
 80097cc:	6093      	str	r3, [r2, #8]
 80097ce:	9b07      	ldr	r3, [sp, #28]
 80097d0:	f8c2 b00c 	str.w	fp, [r2, #12]
 80097d4:	2000      	movs	r0, #0
 80097d6:	61d6      	str	r6, [r2, #28]
 80097d8:	f8c2 a010 	str.w	sl, [r2, #16]
 80097dc:	f8c2 9014 	str.w	r9, [r2, #20]
 80097e0:	6193      	str	r3, [r2, #24]
 80097e2:	b009      	add	sp, #36	; 0x24
 80097e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e8:	20000000 	.word	0x20000000
 80097ec:	00060003 	.word	0x00060003
 80097f0:	000a000c 	.word	0x000a000c
 80097f4:	000c000a 	.word	0x000c000a
 80097f8:	00030006 	.word	0x00030006

080097fc <D48_GENERIC>:
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	b089      	sub	sp, #36	; 0x24
 8009802:	6953      	ldr	r3, [r2, #20]
 8009804:	68d4      	ldr	r4, [r2, #12]
 8009806:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009808:	9302      	str	r3, [sp, #8]
 800980a:	9400      	str	r4, [sp, #0]
 800980c:	6993      	ldr	r3, [r2, #24]
 800980e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009810:	9307      	str	r3, [sp, #28]
 8009812:	9403      	str	r4, [sp, #12]
 8009814:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8009818:	69d6      	ldr	r6, [r2, #28]
 800981a:	6893      	ldr	r3, [r2, #8]
 800981c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800981e:	9104      	str	r1, [sp, #16]
 8009820:	2d00      	cmp	r5, #0
 8009822:	f000 80c5 	beq.w	80099b0 <D48_GENERIC+0x1b4>
 8009826:	f004 0510 	and.w	r5, r4, #16
 800982a:	f004 0420 	and.w	r4, r4, #32
 800982e:	4967      	ldr	r1, [pc, #412]	; (80099cc <D48_GENERIC+0x1d0>)
 8009830:	9505      	str	r5, [sp, #20]
 8009832:	9406      	str	r4, [sp, #24]
 8009834:	f04f 0c00 	mov.w	ip, #0
 8009838:	4657      	mov	r7, sl
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	e09c      	b.n	8009978 <D48_GENERIC+0x17c>
 800983e:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8009842:	f810 b009 	ldrb.w	fp, [r0, r9]
 8009846:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800984a:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800984e:	7800      	ldrb	r0, [r0, #0]
 8009850:	0424      	lsls	r4, r4, #16
 8009852:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8009856:	f818 4005 	ldrb.w	r4, [r8, r5]
 800985a:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800985e:	44a8      	add	r8, r5
 8009860:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8009864:	eb0b 0500 	add.w	r5, fp, r0
 8009868:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800986c:	fa5f f885 	uxtb.w	r8, r5
 8009870:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8009874:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8009878:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800987c:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8009880:	0e2d      	lsrs	r5, r5, #24
 8009882:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8009886:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800988a:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800988e:	b2e6      	uxtb	r6, r4
 8009890:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8009894:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009898:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800989c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80098a0:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 80098a4:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 80098a8:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80098ac:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 80098b0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80098b4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80098b8:	f3c6 0909 	ubfx	r9, r6, #0, #10
 80098bc:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80098c0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80098c4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80098c8:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 80098cc:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 80098d0:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 80098d4:	4c3e      	ldr	r4, [pc, #248]	; (80099d0 <D48_GENERIC+0x1d4>)
 80098d6:	9d00      	ldr	r5, [sp, #0]
 80098d8:	fb2a 5404 	smlad	r4, sl, r4, r5
 80098dc:	4d3d      	ldr	r5, [pc, #244]	; (80099d4 <D48_GENERIC+0x1d8>)
 80098de:	fb28 4405 	smlad	r4, r8, r5, r4
 80098e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098e6:	fb2e 4b03 	smlad	fp, lr, r3, r4
 80098ea:	4c3b      	ldr	r4, [pc, #236]	; (80099d8 <D48_GENERIC+0x1dc>)
 80098ec:	9b01      	ldr	r3, [sp, #4]
 80098ee:	fb2a 3304 	smlad	r3, sl, r4, r3
 80098f2:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80098f6:	fb28 3304 	smlad	r3, r8, r4, r3
 80098fa:	4c38      	ldr	r4, [pc, #224]	; (80099dc <D48_GENERIC+0x1e0>)
 80098fc:	fb2e 3304 	smlad	r3, lr, r4, r3
 8009900:	2501      	movs	r5, #1
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	fb2a fa05 	smuad	sl, sl, r5
 8009908:	4b35      	ldr	r3, [pc, #212]	; (80099e0 <D48_GENERIC+0x1e4>)
 800990a:	fb28 a803 	smlad	r8, r8, r3, sl
 800990e:	4b35      	ldr	r3, [pc, #212]	; (80099e4 <D48_GENERIC+0x1e8>)
 8009910:	fb2e 8303 	smlad	r3, lr, r3, r8
 8009914:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8009918:	9301      	str	r3, [sp, #4]
 800991a:	9b02      	ldr	r3, [sp, #8]
 800991c:	eb04 0807 	add.w	r8, r4, r7
 8009920:	eba8 0803 	sub.w	r8, r8, r3
 8009924:	9b05      	ldr	r3, [sp, #20]
 8009926:	4465      	add	r5, ip
 8009928:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800992c:	b163      	cbz	r3, 8009948 <D48_GENERIC+0x14c>
 800992e:	6a17      	ldr	r7, [r2, #32]
 8009930:	9402      	str	r4, [sp, #8]
 8009932:	fba8 8907 	umull	r8, r9, r8, r7
 8009936:	fb07 990b 	mla	r9, r7, fp, r9
 800993a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800993e:	f149 0900 	adc.w	r9, r9, #0
 8009942:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8009946:	463c      	mov	r4, r7
 8009948:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800994c:	9b03      	ldr	r3, [sp, #12]
 800994e:	02e4      	lsls	r4, r4, #11
 8009950:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009954:	f04f 0900 	mov.w	r9, #0
 8009958:	fb0c fc0e 	mul.w	ip, ip, lr
 800995c:	fbc3 8904 	smlal	r8, r9, r3, r4
 8009960:	9b04      	ldr	r3, [sp, #16]
 8009962:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8009966:	f304 040f 	ssat	r4, #16, r4
 800996a:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800996e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009970:	fa1f fc85 	uxth.w	ip, r5
 8009974:	4564      	cmp	r4, ip
 8009976:	d919      	bls.n	80099ac <D48_GENERIC+0x1b0>
 8009978:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800997a:	fa5f fe84 	uxtb.w	lr, r4
 800997e:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8009982:	f1ce 0500 	rsb	r5, lr, #0
 8009986:	eb00 0b09 	add.w	fp, r0, r9
 800998a:	eb0b 0a05 	add.w	sl, fp, r5
 800998e:	2c01      	cmp	r4, #1
 8009990:	eb0a 0809 	add.w	r8, sl, r9
 8009994:	f47f af53 	bne.w	800983e <D48_GENERIC+0x42>
 8009998:	9b06      	ldr	r3, [sp, #24]
 800999a:	6805      	ldr	r5, [r0, #0]
 800999c:	6844      	ldr	r4, [r0, #4]
 800999e:	3006      	adds	r0, #6
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f43f af63 	beq.w	800986c <D48_GENERIC+0x70>
 80099a6:	ba6d      	rev16	r5, r5
 80099a8:	ba64      	rev16	r4, r4
 80099aa:	e75f      	b.n	800986c <D48_GENERIC+0x70>
 80099ac:	9b01      	ldr	r3, [sp, #4]
 80099ae:	46ba      	mov	sl, r7
 80099b0:	6093      	str	r3, [r2, #8]
 80099b2:	9b00      	ldr	r3, [sp, #0]
 80099b4:	60d3      	str	r3, [r2, #12]
 80099b6:	9b02      	ldr	r3, [sp, #8]
 80099b8:	6153      	str	r3, [r2, #20]
 80099ba:	9b07      	ldr	r3, [sp, #28]
 80099bc:	61d6      	str	r6, [r2, #28]
 80099be:	2000      	movs	r0, #0
 80099c0:	f8c2 a010 	str.w	sl, [r2, #16]
 80099c4:	6193      	str	r3, [r2, #24]
 80099c6:	b009      	add	sp, #36	; 0x24
 80099c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099cc:	20000000 	.word	0x20000000
 80099d0:	000f000a 	.word	0x000f000a
 80099d4:	00060003 	.word	0x00060003
 80099d8:	00150019 	.word	0x00150019
 80099dc:	00190015 	.word	0x00190015
 80099e0:	00030006 	.word	0x00030006
 80099e4:	000a000f 	.word	0x000a000f

080099e8 <D64_GENERIC>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	b089      	sub	sp, #36	; 0x24
 80099ee:	6913      	ldr	r3, [r2, #16]
 80099f0:	6895      	ldr	r5, [r2, #8]
 80099f2:	9303      	str	r3, [sp, #12]
 80099f4:	9501      	str	r5, [sp, #4]
 80099f6:	6953      	ldr	r3, [r2, #20]
 80099f8:	68d5      	ldr	r5, [r2, #12]
 80099fa:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80099fc:	9304      	str	r3, [sp, #16]
 80099fe:	9500      	str	r5, [sp, #0]
 8009a00:	6993      	ldr	r3, [r2, #24]
 8009a02:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009a04:	9307      	str	r3, [sp, #28]
 8009a06:	9505      	str	r5, [sp, #20]
 8009a08:	69d3      	ldr	r3, [r2, #28]
 8009a0a:	9106      	str	r1, [sp, #24]
 8009a0c:	2c00      	cmp	r4, #0
 8009a0e:	f000 80d9 	beq.w	8009bc4 <D64_GENERIC+0x1dc>
 8009a12:	6a11      	ldr	r1, [r2, #32]
 8009a14:	9102      	str	r1, [sp, #8]
 8009a16:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8009c04 <D64_GENERIC+0x21c>
 8009a1a:	f04f 0c00 	mov.w	ip, #0
 8009a1e:	4681      	mov	r9, r0
 8009a20:	e0c1      	b.n	8009ba6 <D64_GENERIC+0x1be>
 8009a22:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8009a26:	4274      	negs	r4, r6
 8009a28:	eb09 0708 	add.w	r7, r9, r8
 8009a2c:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8009a30:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8009a34:	5d38      	ldrb	r0, [r7, r4]
 8009a36:	5d29      	ldrb	r1, [r5, r4]
 8009a38:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8009a3c:	f819 a008 	ldrb.w	sl, [r9, r8]
 8009a40:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8009a44:	f899 7000 	ldrb.w	r7, [r9]
 8009a48:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8009a4c:	4425      	add	r5, r4
 8009a4e:	0409      	lsls	r1, r1, #16
 8009a50:	0400      	lsls	r0, r0, #16
 8009a52:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8009a56:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8009a5a:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8009a5e:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8009a62:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8009a66:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8009a6a:	4459      	add	r1, fp
 8009a6c:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8009a70:	4438      	add	r0, r7
 8009a72:	b2c5      	uxtb	r5, r0
 8009a74:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8009a78:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8009a7c:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8009a80:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8009a84:	0e00      	lsrs	r0, r0, #24
 8009a86:	eb03 0806 	add.w	r8, r3, r6
 8009a8a:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8009a8e:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8009a92:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009a96:	b2c8      	uxtb	r0, r1
 8009a98:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8009a9c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8009aa0:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8009aa4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8009aa8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8009aac:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8009ab0:	0e09      	lsrs	r1, r1, #24
 8009ab2:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8009ab6:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8009aba:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8009abe:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8009ac2:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8009ac6:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8009aca:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8009ace:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009ad2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009ad6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009ada:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8009ade:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009ae2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009ae6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009aea:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8009aee:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8009af2:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8009af6:	0a8b      	lsrs	r3, r1, #10
 8009af8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8009afc:	4939      	ldr	r1, [pc, #228]	; (8009be4 <D64_GENERIC+0x1fc>)
 8009afe:	9c00      	ldr	r4, [sp, #0]
 8009b00:	fb28 4101 	smlad	r1, r8, r1, r4
 8009b04:	4c38      	ldr	r4, [pc, #224]	; (8009be8 <D64_GENERIC+0x200>)
 8009b06:	fb27 1104 	smlad	r1, r7, r4, r1
 8009b0a:	4c38      	ldr	r4, [pc, #224]	; (8009bec <D64_GENERIC+0x204>)
 8009b0c:	fb20 1104 	smlad	r1, r0, r4, r1
 8009b10:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8009b14:	fb2a 1106 	smlad	r1, sl, r6, r1
 8009b18:	4c35      	ldr	r4, [pc, #212]	; (8009bf0 <D64_GENERIC+0x208>)
 8009b1a:	9d01      	ldr	r5, [sp, #4]
 8009b1c:	fb28 5404 	smlad	r4, r8, r4, r5
 8009b20:	4d33      	ldr	r5, [pc, #204]	; (8009bf0 <D64_GENERIC+0x208>)
 8009b22:	fb2a 4415 	smladx	r4, sl, r5, r4
 8009b26:	4d33      	ldr	r5, [pc, #204]	; (8009bf4 <D64_GENERIC+0x20c>)
 8009b28:	fb27 4405 	smlad	r4, r7, r5, r4
 8009b2c:	fb20 4415 	smladx	r4, r0, r5, r4
 8009b30:	2501      	movs	r5, #1
 8009b32:	9400      	str	r4, [sp, #0]
 8009b34:	fb28 f805 	smuad	r8, r8, r5
 8009b38:	4c2f      	ldr	r4, [pc, #188]	; (8009bf8 <D64_GENERIC+0x210>)
 8009b3a:	fb27 8704 	smlad	r7, r7, r4, r8
 8009b3e:	4c2f      	ldr	r4, [pc, #188]	; (8009bfc <D64_GENERIC+0x214>)
 8009b40:	fb20 7004 	smlad	r0, r0, r4, r7
 8009b44:	4c2e      	ldr	r4, [pc, #184]	; (8009c00 <D64_GENERIC+0x218>)
 8009b46:	fb2a 0004 	smlad	r0, sl, r4, r0
 8009b4a:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8009b4e:	9902      	ldr	r1, [sp, #8]
 8009b50:	9001      	str	r0, [sp, #4]
 8009b52:	b189      	cbz	r1, 8009b78 <D64_GENERIC+0x190>
 8009b54:	9803      	ldr	r0, [sp, #12]
 8009b56:	9c04      	ldr	r4, [sp, #16]
 8009b58:	9604      	str	r6, [sp, #16]
 8009b5a:	4430      	add	r0, r6
 8009b5c:	1b00      	subs	r0, r0, r4
 8009b5e:	17c5      	asrs	r5, r0, #31
 8009b60:	460f      	mov	r7, r1
 8009b62:	fba0 0101 	umull	r0, r1, r0, r1
 8009b66:	fb07 1105 	mla	r1, r7, r5, r1
 8009b6a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8009b6e:	f141 0100 	adc.w	r1, r1, #0
 8009b72:	0049      	lsls	r1, r1, #1
 8009b74:	9103      	str	r1, [sp, #12]
 8009b76:	460e      	mov	r6, r1
 8009b78:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8009b7a:	9905      	ldr	r1, [sp, #20]
 8009b7c:	9806      	ldr	r0, [sp, #24]
 8009b7e:	02b6      	lsls	r6, r6, #10
 8009b80:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8009b84:	f04f 0800 	mov.w	r8, #0
 8009b88:	fb0c f404 	mul.w	r4, ip, r4
 8009b8c:	fbc1 7806 	smlal	r7, r8, r1, r6
 8009b90:	4641      	mov	r1, r8
 8009b92:	1089      	asrs	r1, r1, #2
 8009b94:	f301 010f 	ssat	r1, #16, r1
 8009b98:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8009b9c:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8009b9e:	f10c 0c01 	add.w	ip, ip, #1
 8009ba2:	4561      	cmp	r1, ip
 8009ba4:	dd0e      	ble.n	8009bc4 <D64_GENERIC+0x1dc>
 8009ba6:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8009ba8:	2e01      	cmp	r6, #1
 8009baa:	f47f af3a 	bne.w	8009a22 <D64_GENERIC+0x3a>
 8009bae:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009bb0:	06b4      	lsls	r4, r6, #26
 8009bb2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8009bb6:	f109 0908 	add.w	r9, r9, #8
 8009bba:	f57f af5a 	bpl.w	8009a72 <D64_GENERIC+0x8a>
 8009bbe:	ba40      	rev16	r0, r0
 8009bc0:	ba49      	rev16	r1, r1
 8009bc2:	e756      	b.n	8009a72 <D64_GENERIC+0x8a>
 8009bc4:	61d3      	str	r3, [r2, #28]
 8009bc6:	9b03      	ldr	r3, [sp, #12]
 8009bc8:	9901      	ldr	r1, [sp, #4]
 8009bca:	6113      	str	r3, [r2, #16]
 8009bcc:	9b04      	ldr	r3, [sp, #16]
 8009bce:	6091      	str	r1, [r2, #8]
 8009bd0:	6153      	str	r3, [r2, #20]
 8009bd2:	9900      	ldr	r1, [sp, #0]
 8009bd4:	9b07      	ldr	r3, [sp, #28]
 8009bd6:	60d1      	str	r1, [r2, #12]
 8009bd8:	2000      	movs	r0, #0
 8009bda:	6193      	str	r3, [r2, #24]
 8009bdc:	b009      	add	sp, #36	; 0x24
 8009bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be2:	bf00      	nop
 8009be4:	001c0015 	.word	0x001c0015
 8009be8:	000f000a 	.word	0x000f000a
 8009bec:	00060003 	.word	0x00060003
 8009bf0:	0024002a 	.word	0x0024002a
 8009bf4:	002e0030 	.word	0x002e0030
 8009bf8:	00030006 	.word	0x00030006
 8009bfc:	000a000f 	.word	0x000a000f
 8009c00:	0015001c 	.word	0x0015001c
 8009c04:	20000000 	.word	0x20000000

08009c08 <D80_GENERIC>:
 8009c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0c:	b08b      	sub	sp, #44	; 0x2c
 8009c0e:	6914      	ldr	r4, [r2, #16]
 8009c10:	9404      	str	r4, [sp, #16]
 8009c12:	6954      	ldr	r4, [r2, #20]
 8009c14:	9405      	str	r4, [sp, #20]
 8009c16:	6994      	ldr	r4, [r2, #24]
 8009c18:	9409      	str	r4, [sp, #36]	; 0x24
 8009c1a:	6894      	ldr	r4, [r2, #8]
 8009c1c:	9402      	str	r4, [sp, #8]
 8009c1e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009c20:	68d4      	ldr	r4, [r2, #12]
 8009c22:	9401      	str	r4, [sp, #4]
 8009c24:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009c26:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8009c2a:	9406      	str	r4, [sp, #24]
 8009c2c:	9107      	str	r1, [sp, #28]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f000 810f 	beq.w	8009e52 <D80_GENERIC+0x24a>
 8009c34:	6a13      	ldr	r3, [r2, #32]
 8009c36:	9308      	str	r3, [sp, #32]
 8009c38:	2300      	movs	r3, #0
 8009c3a:	9200      	str	r2, [sp, #0]
 8009c3c:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8009ea4 <D80_GENERIC+0x29c>
 8009c40:	f8cd b00c 	str.w	fp, [sp, #12]
 8009c44:	461a      	mov	r2, r3
 8009c46:	e0ed      	b.n	8009e24 <D80_GENERIC+0x21c>
 8009c48:	fa5f fc8c 	uxtb.w	ip, ip
 8009c4c:	fa0f f48c 	sxth.w	r4, ip
 8009c50:	0066      	lsls	r6, r4, #1
 8009c52:	eb06 0804 	add.w	r8, r6, r4
 8009c56:	f1cc 0500 	rsb	r5, ip, #0
 8009c5a:	eb00 0108 	add.w	r1, r0, r8
 8009c5e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009c62:	194b      	adds	r3, r1, r5
 8009c64:	5d49      	ldrb	r1, [r1, r5]
 8009c66:	f810 a008 	ldrb.w	sl, [r0, r8]
 8009c6a:	f813 b004 	ldrb.w	fp, [r3, r4]
 8009c6e:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8009c72:	f890 8000 	ldrb.w	r8, [r0]
 8009c76:	eb03 0e04 	add.w	lr, r3, r4
 8009c7a:	eb0e 0705 	add.w	r7, lr, r5
 8009c7e:	0409      	lsls	r1, r1, #16
 8009c80:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8009c84:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8009c88:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8009c8c:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8009c90:	eb0a 0004 	add.w	r0, sl, r4
 8009c94:	041b      	lsls	r3, r3, #16
 8009c96:	f81a a004 	ldrb.w	sl, [sl, r4]
 8009c9a:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8009c9e:	5d44      	ldrb	r4, [r0, r5]
 8009ca0:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8009ca4:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8009ca8:	4428      	add	r0, r5
 8009caa:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8009cae:	4441      	add	r1, r8
 8009cb0:	4430      	add	r0, r6
 8009cb2:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8009cb6:	441f      	add	r7, r3
 8009cb8:	b2cd      	uxtb	r5, r1
 8009cba:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009cbe:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8009cc2:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8009cc6:	9b03      	ldr	r3, [sp, #12]
 8009cc8:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8009ccc:	0e09      	lsrs	r1, r1, #24
 8009cce:	4433      	add	r3, r6
 8009cd0:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8009cd4:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8009cd8:	b2fd      	uxtb	r5, r7
 8009cda:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8009cde:	469b      	mov	fp, r3
 8009ce0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8009ce4:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8009ce8:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8009cec:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8009cf0:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8009cf4:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8009cf8:	0e3b      	lsrs	r3, r7, #24
 8009cfa:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8009cfe:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8009d02:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009d06:	fa5f fe84 	uxtb.w	lr, r4
 8009d0a:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8009d0e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009d12:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8009d16:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8009d1a:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8009d1e:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8009d22:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8009d26:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8009d2a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d32:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009d36:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009d3a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009d3e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009d42:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8009d46:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8009d4a:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8009d4e:	0aa3      	lsrs	r3, r4, #10
 8009d50:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009d54:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009d58:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009d5c:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8009d60:	9303      	str	r3, [sp, #12]
 8009d62:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8009d66:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8009d6a:	4b42      	ldr	r3, [pc, #264]	; (8009e74 <D80_GENERIC+0x26c>)
 8009d6c:	9901      	ldr	r1, [sp, #4]
 8009d6e:	fb2b 1303 	smlad	r3, fp, r3, r1
 8009d72:	4941      	ldr	r1, [pc, #260]	; (8009e78 <D80_GENERIC+0x270>)
 8009d74:	fb28 3301 	smlad	r3, r8, r1, r3
 8009d78:	4940      	ldr	r1, [pc, #256]	; (8009e7c <D80_GENERIC+0x274>)
 8009d7a:	fb2c 3301 	smlad	r3, ip, r1, r3
 8009d7e:	4940      	ldr	r1, [pc, #256]	; (8009e80 <D80_GENERIC+0x278>)
 8009d80:	fb27 3301 	smlad	r3, r7, r1, r3
 8009d84:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009d88:	fb2e 3301 	smlad	r3, lr, r1, r3
 8009d8c:	493d      	ldr	r1, [pc, #244]	; (8009e84 <D80_GENERIC+0x27c>)
 8009d8e:	9c02      	ldr	r4, [sp, #8]
 8009d90:	fb2b 4401 	smlad	r4, fp, r1, r4
 8009d94:	493c      	ldr	r1, [pc, #240]	; (8009e88 <D80_GENERIC+0x280>)
 8009d96:	fb28 4401 	smlad	r4, r8, r1, r4
 8009d9a:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8009d9e:	fb2c 4101 	smlad	r1, ip, r1, r4
 8009da2:	4c3a      	ldr	r4, [pc, #232]	; (8009e8c <D80_GENERIC+0x284>)
 8009da4:	fb27 1104 	smlad	r1, r7, r4, r1
 8009da8:	4c39      	ldr	r4, [pc, #228]	; (8009e90 <D80_GENERIC+0x288>)
 8009daa:	fb2e 1104 	smlad	r1, lr, r4, r1
 8009dae:	9101      	str	r1, [sp, #4]
 8009db0:	2101      	movs	r1, #1
 8009db2:	fb2b fb01 	smuad	fp, fp, r1
 8009db6:	4937      	ldr	r1, [pc, #220]	; (8009e94 <D80_GENERIC+0x28c>)
 8009db8:	fb28 b801 	smlad	r8, r8, r1, fp
 8009dbc:	4d36      	ldr	r5, [pc, #216]	; (8009e98 <D80_GENERIC+0x290>)
 8009dbe:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8009dc2:	4d36      	ldr	r5, [pc, #216]	; (8009e9c <D80_GENERIC+0x294>)
 8009dc4:	fb27 c705 	smlad	r7, r7, r5, ip
 8009dc8:	4d35      	ldr	r5, [pc, #212]	; (8009ea0 <D80_GENERIC+0x298>)
 8009dca:	fb2e 7105 	smlad	r1, lr, r5, r7
 8009dce:	9102      	str	r1, [sp, #8]
 8009dd0:	9908      	ldr	r1, [sp, #32]
 8009dd2:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8009dd6:	b181      	cbz	r1, 8009dfa <D80_GENERIC+0x1f2>
 8009dd8:	9c04      	ldr	r4, [sp, #16]
 8009dda:	9d05      	ldr	r5, [sp, #20]
 8009ddc:	9305      	str	r3, [sp, #20]
 8009dde:	441c      	add	r4, r3
 8009de0:	1b64      	subs	r4, r4, r5
 8009de2:	17e7      	asrs	r7, r4, #31
 8009de4:	fba4 4501 	umull	r4, r5, r4, r1
 8009de8:	fb01 5507 	mla	r5, r1, r7, r5
 8009dec:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009df0:	f145 0500 	adc.w	r5, r5, #0
 8009df4:	0069      	lsls	r1, r5, #1
 8009df6:	9104      	str	r1, [sp, #16]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	9e00      	ldr	r6, [sp, #0]
 8009dfc:	9f06      	ldr	r7, [sp, #24]
 8009dfe:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8009e00:	025b      	lsls	r3, r3, #9
 8009e02:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009e06:	2500      	movs	r5, #0
 8009e08:	fb02 f101 	mul.w	r1, r2, r1
 8009e0c:	fbc7 4503 	smlal	r4, r5, r7, r3
 8009e10:	9c07      	ldr	r4, [sp, #28]
 8009e12:	10ab      	asrs	r3, r5, #2
 8009e14:	f303 030f 	ssat	r3, #16, r3
 8009e18:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8009e1c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8009e1e:	3201      	adds	r2, #1
 8009e20:	4293      	cmp	r3, r2
 8009e22:	dd13      	ble.n	8009e4c <D80_GENERIC+0x244>
 8009e24:	9b00      	ldr	r3, [sp, #0]
 8009e26:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8009e2a:	f1bc 0f01 	cmp.w	ip, #1
 8009e2e:	f47f af0b 	bne.w	8009c48 <D80_GENERIC+0x40>
 8009e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e34:	6884      	ldr	r4, [r0, #8]
 8009e36:	069b      	lsls	r3, r3, #26
 8009e38:	e890 0082 	ldmia.w	r0, {r1, r7}
 8009e3c:	f100 000a 	add.w	r0, r0, #10
 8009e40:	f57f af3a 	bpl.w	8009cb8 <D80_GENERIC+0xb0>
 8009e44:	ba49      	rev16	r1, r1
 8009e46:	ba7f      	rev16	r7, r7
 8009e48:	ba64      	rev16	r4, r4
 8009e4a:	e735      	b.n	8009cb8 <D80_GENERIC+0xb0>
 8009e4c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009e50:	4632      	mov	r2, r6
 8009e52:	9b02      	ldr	r3, [sp, #8]
 8009e54:	6093      	str	r3, [r2, #8]
 8009e56:	9b01      	ldr	r3, [sp, #4]
 8009e58:	60d3      	str	r3, [r2, #12]
 8009e5a:	9b04      	ldr	r3, [sp, #16]
 8009e5c:	6113      	str	r3, [r2, #16]
 8009e5e:	9b05      	ldr	r3, [sp, #20]
 8009e60:	6153      	str	r3, [r2, #20]
 8009e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e64:	f8c2 b01c 	str.w	fp, [r2, #28]
 8009e68:	2000      	movs	r0, #0
 8009e6a:	6193      	str	r3, [r2, #24]
 8009e6c:	b00b      	add	sp, #44	; 0x2c
 8009e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e72:	bf00      	nop
 8009e74:	002d0024 	.word	0x002d0024
 8009e78:	001c0015 	.word	0x001c0015
 8009e7c:	000f000a 	.word	0x000f000a
 8009e80:	00060003 	.word	0x00060003
 8009e84:	0037003f 	.word	0x0037003f
 8009e88:	00450049 	.word	0x00450049
 8009e8c:	00490045 	.word	0x00490045
 8009e90:	003f0037 	.word	0x003f0037
 8009e94:	00030006 	.word	0x00030006
 8009e98:	000a000f 	.word	0x000a000f
 8009e9c:	0015001c 	.word	0x0015001c
 8009ea0:	0024002d 	.word	0x0024002d
 8009ea4:	20000000 	.word	0x20000000

08009ea8 <D128_GENERIC>:
 8009ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	b093      	sub	sp, #76	; 0x4c
 8009eae:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009eb0:	9005      	str	r0, [sp, #20]
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	9201      	str	r2, [sp, #4]
 8009eb6:	6912      	ldr	r2, [r2, #16]
 8009eb8:	920c      	str	r2, [sp, #48]	; 0x30
 8009eba:	4602      	mov	r2, r0
 8009ebc:	6940      	ldr	r0, [r0, #20]
 8009ebe:	900d      	str	r0, [sp, #52]	; 0x34
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	4614      	mov	r4, r2
 8009ec4:	6992      	ldr	r2, [r2, #24]
 8009ec6:	9211      	str	r2, [sp, #68]	; 0x44
 8009ec8:	69c2      	ldr	r2, [r0, #28]
 8009eca:	9202      	str	r2, [sp, #8]
 8009ecc:	68e2      	ldr	r2, [r4, #12]
 8009ece:	6880      	ldr	r0, [r0, #8]
 8009ed0:	9203      	str	r2, [sp, #12]
 8009ed2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009ed4:	9004      	str	r0, [sp, #16]
 8009ed6:	920e      	str	r2, [sp, #56]	; 0x38
 8009ed8:	910f      	str	r1, [sp, #60]	; 0x3c
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 819b 	beq.w	800a216 <D128_GENERIC+0x36e>
 8009ee0:	6a23      	ldr	r3, [r4, #32]
 8009ee2:	9310      	str	r3, [sp, #64]	; 0x40
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800a290 <D128_GENERIC+0x3e8>
 8009eea:	9306      	str	r3, [sp, #24]
 8009eec:	e17a      	b.n	800a1e4 <D128_GENERIC+0x33c>
 8009eee:	b2d2      	uxtb	r2, r2
 8009ef0:	9d05      	ldr	r5, [sp, #20]
 8009ef2:	b214      	sxth	r4, r2
 8009ef4:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8009ef8:	4250      	negs	r0, r2
 8009efa:	eb05 010a 	add.w	r1, r5, sl
 8009efe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f02:	eb01 0800 	add.w	r8, r1, r0
 8009f06:	eb0b 0c04 	add.w	ip, fp, r4
 8009f0a:	eb08 070c 	add.w	r7, r8, ip
 8009f0e:	183b      	adds	r3, r7, r0
 8009f10:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8009f14:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8009f18:	eb0e 0604 	add.w	r6, lr, r4
 8009f1c:	9307      	str	r3, [sp, #28]
 8009f1e:	1833      	adds	r3, r6, r0
 8009f20:	9305      	str	r3, [sp, #20]
 8009f22:	462b      	mov	r3, r5
 8009f24:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8009f28:	f8cd a020 	str.w	sl, [sp, #32]
 8009f2c:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8009f30:	f813 c002 	ldrb.w	ip, [r3, r2]
 8009f34:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8009f38:	5c3a      	ldrb	r2, [r7, r0]
 8009f3a:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8009f3e:	781f      	ldrb	r7, [r3, #0]
 8009f40:	9b07      	ldr	r3, [sp, #28]
 8009f42:	9d05      	ldr	r5, [sp, #20]
 8009f44:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8009f48:	5c09      	ldrb	r1, [r1, r0]
 8009f4a:	9709      	str	r7, [sp, #36]	; 0x24
 8009f4c:	9307      	str	r3, [sp, #28]
 8009f4e:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8009f52:	5c33      	ldrb	r3, [r6, r0]
 8009f54:	0412      	lsls	r2, r2, #16
 8009f56:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8009f5a:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8009f5e:	9d08      	ldr	r5, [sp, #32]
 8009f60:	eb06 0a04 	add.w	sl, r6, r4
 8009f64:	0409      	lsls	r1, r1, #16
 8009f66:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8009f6a:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8009f6e:	5d36      	ldrb	r6, [r6, r4]
 8009f70:	9c05      	ldr	r4, [sp, #20]
 8009f72:	042d      	lsls	r5, r5, #16
 8009f74:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8009f78:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8009f7c:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8009f80:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8009f84:	eb0a 0c00 	add.w	ip, sl, r0
 8009f88:	041b      	lsls	r3, r3, #16
 8009f8a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8009f8e:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8009f92:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8009f96:	9d07      	ldr	r5, [sp, #28]
 8009f98:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8009f9c:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8009fa0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009fa2:	4458      	add	r0, fp
 8009fa4:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8009fa8:	9005      	str	r0, [sp, #20]
 8009faa:	4439      	add	r1, r7
 8009fac:	442a      	add	r2, r5
 8009fae:	44b2      	add	sl, r6
 8009fb0:	1918      	adds	r0, r3, r4
 8009fb2:	b2cb      	uxtb	r3, r1
 8009fb4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8009fb8:	9e02      	ldr	r6, [sp, #8]
 8009fba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009fbe:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8009fc2:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8009fc6:	441e      	add	r6, r3
 8009fc8:	0e09      	lsrs	r1, r1, #24
 8009fca:	4633      	mov	r3, r6
 8009fcc:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009fd0:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8009fd4:	b2d4      	uxtb	r4, r2
 8009fd6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009fda:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009fde:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8009fe2:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009fe6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009fea:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009fee:	0e12      	lsrs	r2, r2, #24
 8009ff0:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8009ff4:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8009ff8:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009ffc:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800a000:	9702      	str	r7, [sp, #8]
 800a002:	b2c2      	uxtb	r2, r0
 800a004:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800a008:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800a00c:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800a010:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800a014:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800a018:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800a01c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800a020:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800a024:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800a028:	0e00      	lsrs	r0, r0, #24
 800a02a:	fa5f f68a 	uxtb.w	r6, sl
 800a02e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a032:	9309      	str	r3, [sp, #36]	; 0x24
 800a034:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800a038:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800a03c:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800a040:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800a044:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a048:	950a      	str	r5, [sp, #40]	; 0x28
 800a04a:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800a04e:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800a052:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800a056:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a05a:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800a05e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a062:	920b      	str	r2, [sp, #44]	; 0x2c
 800a064:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800a068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a06a:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800a06e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a072:	9307      	str	r3, [sp, #28]
 800a074:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800a078:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800a07c:	9b02      	ldr	r3, [sp, #8]
 800a07e:	f8cd c008 	str.w	ip, [sp, #8]
 800a082:	4694      	mov	ip, r2
 800a084:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a086:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800a08a:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800a08e:	9a02      	ldr	r2, [sp, #8]
 800a090:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a094:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800a098:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a09c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a09e:	f8cd a020 	str.w	sl, [sp, #32]
 800a0a2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a0a6:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800a0aa:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a0ae:	9b07      	ldr	r3, [sp, #28]
 800a0b0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a0b4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800a0b8:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800a0bc:	9a08      	ldr	r2, [sp, #32]
 800a0be:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a0c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0c6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a0ca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a0ce:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800a0d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800a0d6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a0da:	0a96      	lsrs	r6, r2, #10
 800a0dc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a0e0:	9602      	str	r6, [sp, #8]
 800a0e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800a0e6:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800a0ea:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800a0ee:	4e53      	ldr	r6, [pc, #332]	; (800a23c <D128_GENERIC+0x394>)
 800a0f0:	9f03      	ldr	r7, [sp, #12]
 800a0f2:	fb2c 7606 	smlad	r6, ip, r6, r7
 800a0f6:	4f52      	ldr	r7, [pc, #328]	; (800a240 <D128_GENERIC+0x398>)
 800a0f8:	fb2a 6607 	smlad	r6, sl, r7, r6
 800a0fc:	4f51      	ldr	r7, [pc, #324]	; (800a244 <D128_GENERIC+0x39c>)
 800a0fe:	fb21 6607 	smlad	r6, r1, r7, r6
 800a102:	4f51      	ldr	r7, [pc, #324]	; (800a248 <D128_GENERIC+0x3a0>)
 800a104:	fb24 6607 	smlad	r6, r4, r7, r6
 800a108:	4f50      	ldr	r7, [pc, #320]	; (800a24c <D128_GENERIC+0x3a4>)
 800a10a:	fb28 6607 	smlad	r6, r8, r7, r6
 800a10e:	4f50      	ldr	r7, [pc, #320]	; (800a250 <D128_GENERIC+0x3a8>)
 800a110:	fb20 6607 	smlad	r6, r0, r7, r6
 800a114:	4f4f      	ldr	r7, [pc, #316]	; (800a254 <D128_GENERIC+0x3ac>)
 800a116:	fb23 6607 	smlad	r6, r3, r7, r6
 800a11a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800a11e:	fb25 6607 	smlad	r6, r5, r7, r6
 800a122:	4f4d      	ldr	r7, [pc, #308]	; (800a258 <D128_GENERIC+0x3b0>)
 800a124:	9a04      	ldr	r2, [sp, #16]
 800a126:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800a12a:	4a4c      	ldr	r2, [pc, #304]	; (800a25c <D128_GENERIC+0x3b4>)
 800a12c:	fb2a ee02 	smlad	lr, sl, r2, lr
 800a130:	4f4b      	ldr	r7, [pc, #300]	; (800a260 <D128_GENERIC+0x3b8>)
 800a132:	fb21 ee07 	smlad	lr, r1, r7, lr
 800a136:	4f4b      	ldr	r7, [pc, #300]	; (800a264 <D128_GENERIC+0x3bc>)
 800a138:	fb24 ee07 	smlad	lr, r4, r7, lr
 800a13c:	4f4a      	ldr	r7, [pc, #296]	; (800a268 <D128_GENERIC+0x3c0>)
 800a13e:	fb28 ee07 	smlad	lr, r8, r7, lr
 800a142:	4f4a      	ldr	r7, [pc, #296]	; (800a26c <D128_GENERIC+0x3c4>)
 800a144:	fb20 ee07 	smlad	lr, r0, r7, lr
 800a148:	4f49      	ldr	r7, [pc, #292]	; (800a270 <D128_GENERIC+0x3c8>)
 800a14a:	fb23 e707 	smlad	r7, r3, r7, lr
 800a14e:	f8df e144 	ldr.w	lr, [pc, #324]	; 800a294 <D128_GENERIC+0x3ec>
 800a152:	fb25 720e 	smlad	r2, r5, lr, r7
 800a156:	f04f 0b01 	mov.w	fp, #1
 800a15a:	9203      	str	r2, [sp, #12]
 800a15c:	fb2c fb0b 	smuad	fp, ip, fp
 800a160:	4f44      	ldr	r7, [pc, #272]	; (800a274 <D128_GENERIC+0x3cc>)
 800a162:	fb2a ba07 	smlad	sl, sl, r7, fp
 800a166:	4f44      	ldr	r7, [pc, #272]	; (800a278 <D128_GENERIC+0x3d0>)
 800a168:	fb21 aa07 	smlad	sl, r1, r7, sl
 800a16c:	4f43      	ldr	r7, [pc, #268]	; (800a27c <D128_GENERIC+0x3d4>)
 800a16e:	fb24 aa07 	smlad	sl, r4, r7, sl
 800a172:	4f43      	ldr	r7, [pc, #268]	; (800a280 <D128_GENERIC+0x3d8>)
 800a174:	fb28 a707 	smlad	r7, r8, r7, sl
 800a178:	4a42      	ldr	r2, [pc, #264]	; (800a284 <D128_GENERIC+0x3dc>)
 800a17a:	fb20 7702 	smlad	r7, r0, r2, r7
 800a17e:	4a42      	ldr	r2, [pc, #264]	; (800a288 <D128_GENERIC+0x3e0>)
 800a180:	fb23 7702 	smlad	r7, r3, r2, r7
 800a184:	4b41      	ldr	r3, [pc, #260]	; (800a28c <D128_GENERIC+0x3e4>)
 800a186:	fb25 7303 	smlad	r3, r5, r3, r7
 800a18a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a18c:	9304      	str	r3, [sp, #16]
 800a18e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800a192:	b185      	cbz	r5, 800a1b6 <D128_GENERIC+0x30e>
 800a194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a196:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a198:	960d      	str	r6, [sp, #52]	; 0x34
 800a19a:	4432      	add	r2, r6
 800a19c:	1a52      	subs	r2, r2, r1
 800a19e:	17d1      	asrs	r1, r2, #31
 800a1a0:	fba2 2305 	umull	r2, r3, r2, r5
 800a1a4:	fb05 3301 	mla	r3, r5, r1, r3
 800a1a8:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a1ac:	f143 0300 	adc.w	r3, r3, #0
 800a1b0:	005b      	lsls	r3, r3, #1
 800a1b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a1b4:	461e      	mov	r6, r3
 800a1b6:	9801      	ldr	r0, [sp, #4]
 800a1b8:	9c06      	ldr	r4, [sp, #24]
 800a1ba:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800a1bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a1be:	01f6      	lsls	r6, r6, #7
 800a1c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	fbc5 2306 	smlal	r2, r3, r5, r6
 800a1ca:	fb04 f101 	mul.w	r1, r4, r1
 800a1ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1d0:	109b      	asrs	r3, r3, #2
 800a1d2:	f303 030f 	ssat	r3, #16, r3
 800a1d6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800a1da:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800a1dc:	1c62      	adds	r2, r4, #1
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	9206      	str	r2, [sp, #24]
 800a1e2:	dd18      	ble.n	800a216 <D128_GENERIC+0x36e>
 800a1e4:	9b01      	ldr	r3, [sp, #4]
 800a1e6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a1e8:	2a01      	cmp	r2, #1
 800a1ea:	f47f ae80 	bne.w	8009eee <D128_GENERIC+0x46>
 800a1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f0:	9d05      	ldr	r5, [sp, #20]
 800a1f2:	069b      	lsls	r3, r3, #26
 800a1f4:	6829      	ldr	r1, [r5, #0]
 800a1f6:	686a      	ldr	r2, [r5, #4]
 800a1f8:	68a8      	ldr	r0, [r5, #8]
 800a1fa:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a1fe:	f105 0410 	add.w	r4, r5, #16
 800a202:	d506      	bpl.n	800a212 <D128_GENERIC+0x36a>
 800a204:	ba49      	rev16	r1, r1
 800a206:	ba52      	rev16	r2, r2
 800a208:	ba40      	rev16	r0, r0
 800a20a:	fa9a fa9a 	rev16.w	sl, sl
 800a20e:	9405      	str	r4, [sp, #20]
 800a210:	e6cf      	b.n	8009fb2 <D128_GENERIC+0x10a>
 800a212:	9405      	str	r4, [sp, #20]
 800a214:	e6cd      	b.n	8009fb2 <D128_GENERIC+0x10a>
 800a216:	9a01      	ldr	r2, [sp, #4]
 800a218:	9904      	ldr	r1, [sp, #16]
 800a21a:	6091      	str	r1, [r2, #8]
 800a21c:	9903      	ldr	r1, [sp, #12]
 800a21e:	60d1      	str	r1, [r2, #12]
 800a220:	9b02      	ldr	r3, [sp, #8]
 800a222:	61d3      	str	r3, [r2, #28]
 800a224:	4611      	mov	r1, r2
 800a226:	4613      	mov	r3, r2
 800a228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a22a:	610a      	str	r2, [r1, #16]
 800a22c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a22e:	6159      	str	r1, [r3, #20]
 800a230:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a232:	6199      	str	r1, [r3, #24]
 800a234:	2000      	movs	r0, #0
 800a236:	b013      	add	sp, #76	; 0x4c
 800a238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23c:	00780069 	.word	0x00780069
 800a240:	005b004e 	.word	0x005b004e
 800a244:	00420037 	.word	0x00420037
 800a248:	002d0024 	.word	0x002d0024
 800a24c:	001c0015 	.word	0x001c0015
 800a250:	000f000a 	.word	0x000f000a
 800a254:	00060003 	.word	0x00060003
 800a258:	00880096 	.word	0x00880096
 800a25c:	00a200ac 	.word	0x00a200ac
 800a260:	00b400ba 	.word	0x00b400ba
 800a264:	00be00c0 	.word	0x00be00c0
 800a268:	00c000be 	.word	0x00c000be
 800a26c:	00ba00b4 	.word	0x00ba00b4
 800a270:	00ac00a2 	.word	0x00ac00a2
 800a274:	00030006 	.word	0x00030006
 800a278:	000a000f 	.word	0x000a000f
 800a27c:	0015001c 	.word	0x0015001c
 800a280:	0024002d 	.word	0x0024002d
 800a284:	00370042 	.word	0x00370042
 800a288:	004e005b 	.word	0x004e005b
 800a28c:	00690078 	.word	0x00690078
 800a290:	20000000 	.word	0x20000000
 800a294:	00960088 	.word	0x00960088

0800a298 <D16_1CH_HTONS_VOL_HP>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	4691      	mov	r9, r2
 800a29e:	b083      	sub	sp, #12
 800a2a0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a2a2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800a2a6:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	4680      	mov	r8, r0
 800a2ae:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800a2b2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a2b6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a2ba:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800a2be:	9401      	str	r4, [sp, #4]
 800a2c0:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800a2c4:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800a2c8:	2a00      	cmp	r2, #0
 800a2ca:	d04e      	beq.n	800a36a <D16_1CH_HTONS_VOL_HP+0xd2>
 800a2cc:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800a378 <D16_1CH_HTONS_VOL_HP+0xe0>
 800a2d0:	1e8c      	subs	r4, r1, #2
 800a2d2:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800a2d6:	f858 2b02 	ldr.w	r2, [r8], #2
 800a2da:	ba52      	rev16	r2, r2
 800a2dc:	b2d6      	uxtb	r6, r2
 800a2de:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a2e2:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800a2e6:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800a2f0:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800a2f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a2fc:	0a93      	lsrs	r3, r2, #10
 800a2fe:	4a1c      	ldr	r2, [pc, #112]	; (800a370 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800a300:	fb21 5202 	smlad	r2, r1, r2, r5
 800a304:	4d1b      	ldr	r5, [pc, #108]	; (800a374 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800a306:	fb21 f505 	smuad	r5, r1, r5
 800a30a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800a30e:	4410      	add	r0, r2
 800a310:	1bc0      	subs	r0, r0, r7
 800a312:	17c7      	asrs	r7, r0, #31
 800a314:	fba0 010e 	umull	r0, r1, r0, lr
 800a318:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a31c:	fb0e 1107 	mla	r1, lr, r7, r1
 800a320:	f141 0100 	adc.w	r1, r1, #0
 800a324:	0448      	lsls	r0, r1, #17
 800a326:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a32a:	2700      	movs	r7, #0
 800a32c:	fbc0 670a 	smlal	r6, r7, r0, sl
 800a330:	45d8      	cmp	r8, fp
 800a332:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800a336:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800a33a:	4617      	mov	r7, r2
 800a33c:	f301 010f 	ssat	r1, #16, r1
 800a340:	f824 1f02 	strh.w	r1, [r4, #2]!
 800a344:	d1c7      	bne.n	800a2d6 <D16_1CH_HTONS_VOL_HP+0x3e>
 800a346:	9901      	ldr	r1, [sp, #4]
 800a348:	f8c9 301c 	str.w	r3, [r9, #28]
 800a34c:	9b00      	ldr	r3, [sp, #0]
 800a34e:	f8c9 0010 	str.w	r0, [r9, #16]
 800a352:	2000      	movs	r0, #0
 800a354:	f8c9 5008 	str.w	r5, [r9, #8]
 800a358:	f8c9 100c 	str.w	r1, [r9, #12]
 800a35c:	f8c9 2014 	str.w	r2, [r9, #20]
 800a360:	f8c9 3018 	str.w	r3, [r9, #24]
 800a364:	b003      	add	sp, #12
 800a366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36a:	463a      	mov	r2, r7
 800a36c:	4621      	mov	r1, r4
 800a36e:	e7eb      	b.n	800a348 <D16_1CH_HTONS_VOL_HP+0xb0>
 800a370:	00030001 	.word	0x00030001
 800a374:	00010003 	.word	0x00010003
 800a378:	20000000 	.word	0x20000000

0800a37c <D24_1CH_HTONS_VOL_HP>:
 800a37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a380:	b089      	sub	sp, #36	; 0x24
 800a382:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a384:	6996      	ldr	r6, [r2, #24]
 800a386:	9304      	str	r3, [sp, #16]
 800a388:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800a38a:	9207      	str	r2, [sp, #28]
 800a38c:	6915      	ldr	r5, [r2, #16]
 800a38e:	6954      	ldr	r4, [r2, #20]
 800a390:	9606      	str	r6, [sp, #24]
 800a392:	6893      	ldr	r3, [r2, #8]
 800a394:	69d6      	ldr	r6, [r2, #28]
 800a396:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800a39a:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800a39e:	9a04      	ldr	r2, [sp, #16]
 800a3a0:	9705      	str	r7, [sp, #20]
 800a3a2:	2a00      	cmp	r2, #0
 800a3a4:	d07e      	beq.n	800a4a4 <D24_1CH_HTONS_VOL_HP+0x128>
 800a3a6:	f1a1 0b02 	sub.w	fp, r1, #2
 800a3aa:	2700      	movs	r7, #0
 800a3ac:	46a8      	mov	r8, r5
 800a3ae:	f8cd b004 	str.w	fp, [sp, #4]
 800a3b2:	4655      	mov	r5, sl
 800a3b4:	46e3      	mov	fp, ip
 800a3b6:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800a4b0 <D24_1CH_HTONS_VOL_HP+0x134>
 800a3ba:	46ba      	mov	sl, r7
 800a3bc:	469c      	mov	ip, r3
 800a3be:	e055      	b.n	800a46c <D24_1CH_HTONS_VOL_HP+0xf0>
 800a3c0:	7802      	ldrb	r2, [r0, #0]
 800a3c2:	78c3      	ldrb	r3, [r0, #3]
 800a3c4:	7841      	ldrb	r1, [r0, #1]
 800a3c6:	0212      	lsls	r2, r2, #8
 800a3c8:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800a3cc:	440b      	add	r3, r1
 800a3ce:	3002      	adds	r0, #2
 800a3d0:	b2d9      	uxtb	r1, r3
 800a3d2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a3d6:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800a3da:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800a3de:	0c1b      	lsrs	r3, r3, #16
 800a3e0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800a3e4:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a3e8:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800a3ec:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800a3f0:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800a3f4:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800a3f8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a3fc:	4a2a      	ldr	r2, [pc, #168]	; (800a4a8 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800a3fe:	fb23 b102 	smlad	r1, r3, r2, fp
 800a402:	4a2a      	ldr	r2, [pc, #168]	; (800a4ac <D24_1CH_HTONS_VOL_HP+0x130>)
 800a404:	fb23 cb02 	smlad	fp, r3, r2, ip
 800a408:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800a40c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800a410:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800a414:	2201      	movs	r2, #1
 800a416:	fb23 f702 	smuad	r7, r3, r2
 800a41a:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800a41e:	eb01 0208 	add.w	r2, r1, r8
 800a422:	1b12      	subs	r2, r2, r4
 800a424:	17d4      	asrs	r4, r2, #31
 800a426:	fba2 2305 	umull	r2, r3, r2, r5
 800a42a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a42e:	fb05 3304 	mla	r3, r5, r4, r3
 800a432:	f143 0300 	adc.w	r3, r3, #0
 800a436:	9c05      	ldr	r4, [sp, #20]
 800a438:	03da      	lsls	r2, r3, #15
 800a43a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a43e:	f04f 0900 	mov.w	r9, #0
 800a442:	fbc4 8902 	smlal	r8, r9, r4, r2
 800a446:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a44a:	9a01      	ldr	r2, [sp, #4]
 800a44c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800a450:	9b03      	ldr	r3, [sp, #12]
 800a452:	109b      	asrs	r3, r3, #2
 800a454:	f303 030f 	ssat	r3, #16, r3
 800a458:	f822 3f02 	strh.w	r3, [r2, #2]!
 800a45c:	9b04      	ldr	r3, [sp, #16]
 800a45e:	9201      	str	r2, [sp, #4]
 800a460:	f10a 0a01 	add.w	sl, sl, #1
 800a464:	459a      	cmp	sl, r3
 800a466:	44bc      	add	ip, r7
 800a468:	460c      	mov	r4, r1
 800a46a:	d00b      	beq.n	800a484 <D24_1CH_HTONS_VOL_HP+0x108>
 800a46c:	f01a 0f01 	tst.w	sl, #1
 800a470:	d0a6      	beq.n	800a3c0 <D24_1CH_HTONS_VOL_HP+0x44>
 800a472:	78c2      	ldrb	r2, [r0, #3]
 800a474:	7883      	ldrb	r3, [r0, #2]
 800a476:	f810 1b04 	ldrb.w	r1, [r0], #4
 800a47a:	0212      	lsls	r2, r2, #8
 800a47c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800a480:	440b      	add	r3, r1
 800a482:	e7a5      	b.n	800a3d0 <D24_1CH_HTONS_VOL_HP+0x54>
 800a484:	4663      	mov	r3, ip
 800a486:	4645      	mov	r5, r8
 800a488:	46dc      	mov	ip, fp
 800a48a:	9807      	ldr	r0, [sp, #28]
 800a48c:	6141      	str	r1, [r0, #20]
 800a48e:	9906      	ldr	r1, [sp, #24]
 800a490:	6083      	str	r3, [r0, #8]
 800a492:	f8c0 c00c 	str.w	ip, [r0, #12]
 800a496:	61c6      	str	r6, [r0, #28]
 800a498:	6105      	str	r5, [r0, #16]
 800a49a:	6181      	str	r1, [r0, #24]
 800a49c:	2000      	movs	r0, #0
 800a49e:	b009      	add	sp, #36	; 0x24
 800a4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	e7f0      	b.n	800a48a <D24_1CH_HTONS_VOL_HP+0x10e>
 800a4a8:	00030001 	.word	0x00030001
 800a4ac:	00060007 	.word	0x00060007
 800a4b0:	20000000 	.word	0x20000000

0800a4b4 <D32_1CH_HTONS_VOL_HP>:
 800a4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b8:	4692      	mov	sl, r2
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a4be:	f8da 3018 	ldr.w	r3, [sl, #24]
 800a4c2:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800a4c6:	9304      	str	r3, [sp, #16]
 800a4c8:	f8da 4010 	ldr.w	r4, [sl, #16]
 800a4cc:	f8da 8014 	ldr.w	r8, [sl, #20]
 800a4d0:	f8da 601c 	ldr.w	r6, [sl, #28]
 800a4d4:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a4d8:	f8da e00c 	ldr.w	lr, [sl, #12]
 800a4dc:	9501      	str	r5, [sp, #4]
 800a4de:	f8da c020 	ldr.w	ip, [sl, #32]
 800a4e2:	2a00      	cmp	r2, #0
 800a4e4:	d07b      	beq.n	800a5de <D32_1CH_HTONS_VOL_HP+0x12a>
 800a4e6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a4ea:	4f3e      	ldr	r7, [pc, #248]	; (800a5e4 <D32_1CH_HTONS_VOL_HP+0x130>)
 800a4ec:	f8cd c00c 	str.w	ip, [sp, #12]
 800a4f0:	9202      	str	r2, [sp, #8]
 800a4f2:	460d      	mov	r5, r1
 800a4f4:	46a1      	mov	r9, r4
 800a4f6:	4684      	mov	ip, r0
 800a4f8:	f8cd a014 	str.w	sl, [sp, #20]
 800a4fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a500:	ba49      	rev16	r1, r1
 800a502:	b2c8      	uxtb	r0, r1
 800a504:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800a508:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800a50c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800a510:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a514:	0e09      	lsrs	r1, r1, #24
 800a516:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800a51a:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800a51e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a522:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800a526:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800a52a:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800a52e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a532:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800a536:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a53a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a53e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800a542:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800a546:	4a28      	ldr	r2, [pc, #160]	; (800a5e8 <D32_1CH_HTONS_VOL_HP+0x134>)
 800a548:	fb20 e202 	smlad	r2, r0, r2, lr
 800a54c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a550:	fb2a 2101 	smlad	r1, sl, r1, r2
 800a554:	4a25      	ldr	r2, [pc, #148]	; (800a5ec <D32_1CH_HTONS_VOL_HP+0x138>)
 800a556:	fb20 3302 	smlad	r3, r0, r2, r3
 800a55a:	4a25      	ldr	r2, [pc, #148]	; (800a5f0 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800a55c:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800a560:	2301      	movs	r3, #1
 800a562:	fb20 f003 	smuad	r0, r0, r3
 800a566:	4b23      	ldr	r3, [pc, #140]	; (800a5f4 <D32_1CH_HTONS_VOL_HP+0x140>)
 800a568:	fb2a 0303 	smlad	r3, sl, r3, r0
 800a56c:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800a570:	9c03      	ldr	r4, [sp, #12]
 800a572:	eb02 0009 	add.w	r0, r2, r9
 800a576:	eba0 0008 	sub.w	r0, r0, r8
 800a57a:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800a57e:	fba0 0104 	umull	r0, r1, r0, r4
 800a582:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a586:	fb04 110b 	mla	r1, r4, fp, r1
 800a58a:	f141 0100 	adc.w	r1, r1, #0
 800a58e:	9c01      	ldr	r4, [sp, #4]
 800a590:	0388      	lsls	r0, r1, #14
 800a592:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a596:	f04f 0900 	mov.w	r9, #0
 800a59a:	fbc0 8904 	smlal	r8, r9, r0, r4
 800a59e:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800a5a2:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800a5a6:	f300 000f 	ssat	r0, #16, r0
 800a5aa:	9902      	ldr	r1, [sp, #8]
 800a5ac:	f825 0b02 	strh.w	r0, [r5], #2
 800a5b0:	428d      	cmp	r5, r1
 800a5b2:	4690      	mov	r8, r2
 800a5b4:	d1a2      	bne.n	800a4fc <D32_1CH_HTONS_VOL_HP+0x48>
 800a5b6:	f8dd a014 	ldr.w	sl, [sp, #20]
 800a5ba:	464c      	mov	r4, r9
 800a5bc:	f8ca 3008 	str.w	r3, [sl, #8]
 800a5c0:	9b04      	ldr	r3, [sp, #16]
 800a5c2:	f8ca e00c 	str.w	lr, [sl, #12]
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	f8ca 601c 	str.w	r6, [sl, #28]
 800a5cc:	f8ca 4010 	str.w	r4, [sl, #16]
 800a5d0:	f8ca 2014 	str.w	r2, [sl, #20]
 800a5d4:	f8ca 3018 	str.w	r3, [sl, #24]
 800a5d8:	b007      	add	sp, #28
 800a5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5de:	4642      	mov	r2, r8
 800a5e0:	e7ec      	b.n	800a5bc <D32_1CH_HTONS_VOL_HP+0x108>
 800a5e2:	bf00      	nop
 800a5e4:	20000000 	.word	0x20000000
 800a5e8:	00060003 	.word	0x00060003
 800a5ec:	000a000c 	.word	0x000a000c
 800a5f0:	000c000a 	.word	0x000c000a
 800a5f4:	00030006 	.word	0x00030006

0800a5f8 <D48_1CH_HTONS_VOL_HP>:
 800a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	461c      	mov	r4, r3
 800a600:	b087      	sub	sp, #28
 800a602:	4625      	mov	r5, r4
 800a604:	4626      	mov	r6, r4
 800a606:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800a608:	9205      	str	r2, [sp, #20]
 800a60a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a60c:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800a610:	9501      	str	r5, [sp, #4]
 800a612:	4680      	mov	r8, r0
 800a614:	6a35      	ldr	r5, [r6, #32]
 800a616:	6918      	ldr	r0, [r3, #16]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	9304      	str	r3, [sp, #16]
 800a61c:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800a620:	68a3      	ldr	r3, [r4, #8]
 800a622:	9502      	str	r5, [sp, #8]
 800a624:	68e4      	ldr	r4, [r4, #12]
 800a626:	2a00      	cmp	r2, #0
 800a628:	f000 808c 	beq.w	800a744 <D48_1CH_HTONS_VOL_HP+0x14c>
 800a62c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a630:	4d45      	ldr	r5, [pc, #276]	; (800a748 <D48_1CH_HTONS_VOL_HP+0x150>)
 800a632:	9203      	str	r2, [sp, #12]
 800a634:	468c      	mov	ip, r1
 800a636:	e898 0044 	ldmia.w	r8, {r2, r6}
 800a63a:	f108 0806 	add.w	r8, r8, #6
 800a63e:	ba52      	rev16	r2, r2
 800a640:	ba76      	rev16	r6, r6
 800a642:	b2d7      	uxtb	r7, r2
 800a644:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a648:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800a64c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a650:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800a654:	0e12      	lsrs	r2, r2, #24
 800a656:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800a65a:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800a65e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a662:	fa5f fb86 	uxtb.w	fp, r6
 800a666:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a66a:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800a66e:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800a672:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800a676:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800a67a:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a67e:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800a682:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800a686:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a68a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a68e:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800a692:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a696:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a69a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a69e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800a6a2:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800a6a6:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800a6aa:	4a28      	ldr	r2, [pc, #160]	; (800a74c <D48_1CH_HTONS_VOL_HP+0x154>)
 800a6ac:	fb2a 4202 	smlad	r2, sl, r2, r4
 800a6b0:	4927      	ldr	r1, [pc, #156]	; (800a750 <D48_1CH_HTONS_VOL_HP+0x158>)
 800a6b2:	fb27 2201 	smlad	r2, r7, r1, r2
 800a6b6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a6ba:	fb26 2201 	smlad	r2, r6, r1, r2
 800a6be:	4925      	ldr	r1, [pc, #148]	; (800a754 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800a6c0:	fb2a 3401 	smlad	r4, sl, r1, r3
 800a6c4:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800a6c8:	fb27 4403 	smlad	r4, r7, r3, r4
 800a6cc:	4b22      	ldr	r3, [pc, #136]	; (800a758 <D48_1CH_HTONS_VOL_HP+0x160>)
 800a6ce:	fb26 4403 	smlad	r4, r6, r3, r4
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	fb2a fa01 	smuad	sl, sl, r1
 800a6d8:	4b20      	ldr	r3, [pc, #128]	; (800a75c <D48_1CH_HTONS_VOL_HP+0x164>)
 800a6da:	fb27 a703 	smlad	r7, r7, r3, sl
 800a6de:	4b20      	ldr	r3, [pc, #128]	; (800a760 <D48_1CH_HTONS_VOL_HP+0x168>)
 800a6e0:	fb26 7303 	smlad	r3, r6, r3, r7
 800a6e4:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800a6e8:	9e02      	ldr	r6, [sp, #8]
 800a6ea:	9f01      	ldr	r7, [sp, #4]
 800a6ec:	4410      	add	r0, r2
 800a6ee:	eba0 0009 	sub.w	r0, r0, r9
 800a6f2:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800a6f6:	fba0 0106 	umull	r0, r1, r0, r6
 800a6fa:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a6fe:	fb06 110a 	mla	r1, r6, sl, r1
 800a702:	f141 0100 	adc.w	r1, r1, #0
 800a706:	0308      	lsls	r0, r1, #12
 800a708:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800a70c:	f04f 0a00 	mov.w	sl, #0
 800a710:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800a714:	4657      	mov	r7, sl
 800a716:	10b8      	asrs	r0, r7, #2
 800a718:	f300 000f 	ssat	r0, #16, r0
 800a71c:	f82c 0b02 	strh.w	r0, [ip], #2
 800a720:	0048      	lsls	r0, r1, #1
 800a722:	9903      	ldr	r1, [sp, #12]
 800a724:	458c      	cmp	ip, r1
 800a726:	4691      	mov	r9, r2
 800a728:	d185      	bne.n	800a636 <D48_1CH_HTONS_VOL_HP+0x3e>
 800a72a:	9d05      	ldr	r5, [sp, #20]
 800a72c:	616a      	str	r2, [r5, #20]
 800a72e:	9a04      	ldr	r2, [sp, #16]
 800a730:	6128      	str	r0, [r5, #16]
 800a732:	2000      	movs	r0, #0
 800a734:	60ab      	str	r3, [r5, #8]
 800a736:	60ec      	str	r4, [r5, #12]
 800a738:	f8c5 e01c 	str.w	lr, [r5, #28]
 800a73c:	61aa      	str	r2, [r5, #24]
 800a73e:	b007      	add	sp, #28
 800a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a744:	464a      	mov	r2, r9
 800a746:	e7f0      	b.n	800a72a <D48_1CH_HTONS_VOL_HP+0x132>
 800a748:	20000000 	.word	0x20000000
 800a74c:	000f000a 	.word	0x000f000a
 800a750:	00060003 	.word	0x00060003
 800a754:	00150019 	.word	0x00150019
 800a758:	00190015 	.word	0x00190015
 800a75c:	00030006 	.word	0x00030006
 800a760:	000a000f 	.word	0x000a000f

0800a764 <D64_1CH_HTONS_VOL_HP>:
 800a764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a768:	b089      	sub	sp, #36	; 0x24
 800a76a:	4614      	mov	r4, r2
 800a76c:	9207      	str	r2, [sp, #28]
 800a76e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a770:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800a774:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800a778:	6992      	ldr	r2, [r2, #24]
 800a77a:	9206      	str	r2, [sp, #24]
 800a77c:	68e2      	ldr	r2, [r4, #12]
 800a77e:	9201      	str	r2, [sp, #4]
 800a780:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a782:	9203      	str	r2, [sp, #12]
 800a784:	6a22      	ldr	r2, [r4, #32]
 800a786:	69e5      	ldr	r5, [r4, #28]
 800a788:	68a6      	ldr	r6, [r4, #8]
 800a78a:	9204      	str	r2, [sp, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f000 80b0 	beq.w	800a8f2 <D64_1CH_HTONS_VOL_HP+0x18e>
 800a792:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a796:	4f58      	ldr	r7, [pc, #352]	; (800a8f8 <D64_1CH_HTONS_VOL_HP+0x194>)
 800a798:	9305      	str	r3, [sp, #20]
 800a79a:	9102      	str	r1, [sp, #8]
 800a79c:	f850 2b08 	ldr.w	r2, [r0], #8
 800a7a0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a7a4:	ba52      	rev16	r2, r2
 800a7a6:	fa93 f993 	rev16.w	r9, r3
 800a7aa:	b2d4      	uxtb	r4, r2
 800a7ac:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800a7b0:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800a7b4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a7b8:	9901      	ldr	r1, [sp, #4]
 800a7ba:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a7be:	0e12      	lsrs	r2, r2, #24
 800a7c0:	44ab      	add	fp, r5
 800a7c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a7c6:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800a7ca:	fa5f f289 	uxtb.w	r2, r9
 800a7ce:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800a7d2:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800a7d6:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800a7da:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a7de:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a7e2:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800a7e6:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800a7ea:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800a7ee:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800a7f2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800a7f6:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800a7fa:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800a7fe:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800a802:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800a806:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a80a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a80e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a816:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a81a:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800a81e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a822:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800a826:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a82a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800a82e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800a832:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a836:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800a83a:	4b30      	ldr	r3, [pc, #192]	; (800a8fc <D64_1CH_HTONS_VOL_HP+0x198>)
 800a83c:	fb2b 1303 	smlad	r3, fp, r3, r1
 800a840:	492f      	ldr	r1, [pc, #188]	; (800a900 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800a842:	fb24 3301 	smlad	r3, r4, r1, r3
 800a846:	492f      	ldr	r1, [pc, #188]	; (800a904 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800a848:	fb22 3301 	smlad	r3, r2, r1, r3
 800a84c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a850:	fb2e 390a 	smlad	r9, lr, sl, r3
 800a854:	4b2c      	ldr	r3, [pc, #176]	; (800a908 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800a856:	fb2b 6603 	smlad	r6, fp, r3, r6
 800a85a:	fb2e 6613 	smladx	r6, lr, r3, r6
 800a85e:	4b2b      	ldr	r3, [pc, #172]	; (800a90c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800a860:	fb24 6603 	smlad	r6, r4, r3, r6
 800a864:	fb22 6313 	smladx	r3, r2, r3, r6
 800a868:	f04f 0a01 	mov.w	sl, #1
 800a86c:	9301      	str	r3, [sp, #4]
 800a86e:	fb2b fb0a 	smuad	fp, fp, sl
 800a872:	4b27      	ldr	r3, [pc, #156]	; (800a910 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800a874:	fb24 ba03 	smlad	sl, r4, r3, fp
 800a878:	4b26      	ldr	r3, [pc, #152]	; (800a914 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800a87a:	fb22 a203 	smlad	r2, r2, r3, sl
 800a87e:	4b26      	ldr	r3, [pc, #152]	; (800a918 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800a880:	fb2e 2603 	smlad	r6, lr, r3, r2
 800a884:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800a888:	eb0a 020c 	add.w	r2, sl, ip
 800a88c:	9c04      	ldr	r4, [sp, #16]
 800a88e:	9903      	ldr	r1, [sp, #12]
 800a890:	eba2 0208 	sub.w	r2, r2, r8
 800a894:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a898:	fba2 2304 	umull	r2, r3, r2, r4
 800a89c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a8a0:	fb04 3309 	mla	r3, r4, r9, r3
 800a8a4:	f143 0300 	adc.w	r3, r3, #0
 800a8a8:	02da      	lsls	r2, r3, #11
 800a8aa:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a8ae:	f04f 0900 	mov.w	r9, #0
 800a8b2:	fbc1 8902 	smlal	r8, r9, r1, r2
 800a8b6:	9902      	ldr	r1, [sp, #8]
 800a8b8:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800a8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a8c0:	f302 020f 	ssat	r2, #16, r2
 800a8c4:	9b05      	ldr	r3, [sp, #20]
 800a8c6:	f821 2b02 	strh.w	r2, [r1], #2
 800a8ca:	4299      	cmp	r1, r3
 800a8cc:	9102      	str	r1, [sp, #8]
 800a8ce:	46d0      	mov	r8, sl
 800a8d0:	f47f af64 	bne.w	800a79c <D64_1CH_HTONS_VOL_HP+0x38>
 800a8d4:	9a07      	ldr	r2, [sp, #28]
 800a8d6:	9901      	ldr	r1, [sp, #4]
 800a8d8:	60d1      	str	r1, [r2, #12]
 800a8da:	9906      	ldr	r1, [sp, #24]
 800a8dc:	6096      	str	r6, [r2, #8]
 800a8de:	2000      	movs	r0, #0
 800a8e0:	61d5      	str	r5, [r2, #28]
 800a8e2:	f8c2 c010 	str.w	ip, [r2, #16]
 800a8e6:	f8c2 a014 	str.w	sl, [r2, #20]
 800a8ea:	6191      	str	r1, [r2, #24]
 800a8ec:	b009      	add	sp, #36	; 0x24
 800a8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f2:	46c2      	mov	sl, r8
 800a8f4:	4622      	mov	r2, r4
 800a8f6:	e7ee      	b.n	800a8d6 <D64_1CH_HTONS_VOL_HP+0x172>
 800a8f8:	20000000 	.word	0x20000000
 800a8fc:	001c0015 	.word	0x001c0015
 800a900:	000f000a 	.word	0x000f000a
 800a904:	00060003 	.word	0x00060003
 800a908:	0024002a 	.word	0x0024002a
 800a90c:	002e0030 	.word	0x002e0030
 800a910:	00030006 	.word	0x00030006
 800a914:	000a000f 	.word	0x000a000f
 800a918:	0015001c 	.word	0x0015001c

0800a91c <D80_1CH_HTONS_VOL_HP>:
 800a91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a920:	4613      	mov	r3, r2
 800a922:	b089      	sub	sp, #36	; 0x24
 800a924:	4686      	mov	lr, r0
 800a926:	6918      	ldr	r0, [r3, #16]
 800a928:	9000      	str	r0, [sp, #0]
 800a92a:	4618      	mov	r0, r3
 800a92c:	461c      	mov	r4, r3
 800a92e:	695b      	ldr	r3, [r3, #20]
 800a930:	9302      	str	r3, [sp, #8]
 800a932:	6983      	ldr	r3, [r0, #24]
 800a934:	9306      	str	r3, [sp, #24]
 800a936:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800a93a:	69c3      	ldr	r3, [r0, #28]
 800a93c:	68c0      	ldr	r0, [r0, #12]
 800a93e:	9207      	str	r2, [sp, #28]
 800a940:	9001      	str	r0, [sp, #4]
 800a942:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a944:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a946:	9003      	str	r0, [sp, #12]
 800a948:	6a20      	ldr	r0, [r4, #32]
 800a94a:	9004      	str	r0, [sp, #16]
 800a94c:	2a00      	cmp	r2, #0
 800a94e:	f000 80d2 	beq.w	800aaf6 <D80_1CH_HTONS_VOL_HP+0x1da>
 800a952:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a956:	4869      	ldr	r0, [pc, #420]	; (800aafc <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800a958:	9205      	str	r2, [sp, #20]
 800a95a:	461c      	mov	r4, r3
 800a95c:	f8de 5000 	ldr.w	r5, [lr]
 800a960:	f8de 2004 	ldr.w	r2, [lr, #4]
 800a964:	f8de 3008 	ldr.w	r3, [lr, #8]
 800a968:	f10e 0e0a 	add.w	lr, lr, #10
 800a96c:	ba6d      	rev16	r5, r5
 800a96e:	ba52      	rev16	r2, r2
 800a970:	fa93 fb93 	rev16.w	fp, r3
 800a974:	b2ee      	uxtb	r6, r5
 800a976:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800a97a:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800a97e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a982:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800a986:	eb04 0a07 	add.w	sl, r4, r7
 800a98a:	0e2d      	lsrs	r5, r5, #24
 800a98c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800a990:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800a994:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800a998:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800a99c:	b2d5      	uxtb	r5, r2
 800a99e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800a9a2:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800a9a6:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800a9aa:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a9ae:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800a9b2:	0e12      	lsrs	r2, r2, #24
 800a9b4:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800a9b8:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800a9bc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a9c0:	fa5f f48b 	uxtb.w	r4, fp
 800a9c4:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800a9c8:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800a9cc:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800a9d0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800a9d4:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800a9d8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a9dc:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800a9e0:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800a9e4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a9e8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a9ec:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a9f0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a9f4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a9f8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a9fc:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800aa00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa04:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800aa08:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800aa0c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800aa10:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800aa14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800aa18:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800aa1c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800aa20:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800aa24:	4d36      	ldr	r5, [pc, #216]	; (800ab00 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800aa26:	9f01      	ldr	r7, [sp, #4]
 800aa28:	fb23 7505 	smlad	r5, r3, r5, r7
 800aa2c:	4f35      	ldr	r7, [pc, #212]	; (800ab04 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800aa2e:	fb29 5507 	smlad	r5, r9, r7, r5
 800aa32:	4f35      	ldr	r7, [pc, #212]	; (800ab08 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800aa34:	fb28 5507 	smlad	r5, r8, r7, r5
 800aa38:	4f34      	ldr	r7, [pc, #208]	; (800ab0c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800aa3a:	fb22 5507 	smlad	r5, r2, r7, r5
 800aa3e:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800aa42:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800aa46:	4d32      	ldr	r5, [pc, #200]	; (800ab10 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800aa48:	fb23 cc05 	smlad	ip, r3, r5, ip
 800aa4c:	4d31      	ldr	r5, [pc, #196]	; (800ab14 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800aa4e:	fb29 cc05 	smlad	ip, r9, r5, ip
 800aa52:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800aa56:	fb28 c505 	smlad	r5, r8, r5, ip
 800aa5a:	4f2f      	ldr	r7, [pc, #188]	; (800ab18 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800aa5c:	fb22 5507 	smlad	r5, r2, r7, r5
 800aa60:	4f2e      	ldr	r7, [pc, #184]	; (800ab1c <D80_1CH_HTONS_VOL_HP+0x200>)
 800aa62:	fb26 5507 	smlad	r5, r6, r7, r5
 800aa66:	f04f 0a01 	mov.w	sl, #1
 800aa6a:	9501      	str	r5, [sp, #4]
 800aa6c:	fb23 fa0a 	smuad	sl, r3, sl
 800aa70:	4b2b      	ldr	r3, [pc, #172]	; (800ab20 <D80_1CH_HTONS_VOL_HP+0x204>)
 800aa72:	fb29 a903 	smlad	r9, r9, r3, sl
 800aa76:	4d2b      	ldr	r5, [pc, #172]	; (800ab24 <D80_1CH_HTONS_VOL_HP+0x208>)
 800aa78:	fb28 9805 	smlad	r8, r8, r5, r9
 800aa7c:	4d2a      	ldr	r5, [pc, #168]	; (800ab28 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800aa7e:	fb22 8205 	smlad	r2, r2, r5, r8
 800aa82:	4b2a      	ldr	r3, [pc, #168]	; (800ab2c <D80_1CH_HTONS_VOL_HP+0x210>)
 800aa84:	fb26 2c03 	smlad	ip, r6, r3, r2
 800aa88:	9b00      	ldr	r3, [sp, #0]
 800aa8a:	9d04      	ldr	r5, [sp, #16]
 800aa8c:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800aa90:	4453      	add	r3, sl
 800aa92:	461a      	mov	r2, r3
 800aa94:	9b02      	ldr	r3, [sp, #8]
 800aa96:	f8cd a008 	str.w	sl, [sp, #8]
 800aa9a:	1ad2      	subs	r2, r2, r3
 800aa9c:	17d7      	asrs	r7, r2, #31
 800aa9e:	fba2 2305 	umull	r2, r3, r2, r5
 800aaa2:	fb05 3307 	mla	r3, r5, r7, r3
 800aaa6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800aaaa:	f143 0300 	adc.w	r3, r3, #0
 800aaae:	9d03      	ldr	r5, [sp, #12]
 800aab0:	029a      	lsls	r2, r3, #10
 800aab2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aab6:	2700      	movs	r7, #0
 800aab8:	005b      	lsls	r3, r3, #1
 800aaba:	fbc5 6702 	smlal	r6, r7, r5, r2
 800aabe:	10ba      	asrs	r2, r7, #2
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	f302 020f 	ssat	r2, #16, r2
 800aac6:	9b05      	ldr	r3, [sp, #20]
 800aac8:	f821 2b02 	strh.w	r2, [r1], #2
 800aacc:	4299      	cmp	r1, r3
 800aace:	f47f af45 	bne.w	800a95c <D80_1CH_HTONS_VOL_HP+0x40>
 800aad2:	4623      	mov	r3, r4
 800aad4:	9907      	ldr	r1, [sp, #28]
 800aad6:	9801      	ldr	r0, [sp, #4]
 800aad8:	60c8      	str	r0, [r1, #12]
 800aada:	9a00      	ldr	r2, [sp, #0]
 800aadc:	f8c1 c008 	str.w	ip, [r1, #8]
 800aae0:	4608      	mov	r0, r1
 800aae2:	61cb      	str	r3, [r1, #28]
 800aae4:	610a      	str	r2, [r1, #16]
 800aae6:	f8c1 a014 	str.w	sl, [r1, #20]
 800aaea:	9906      	ldr	r1, [sp, #24]
 800aaec:	6181      	str	r1, [r0, #24]
 800aaee:	2000      	movs	r0, #0
 800aaf0:	b009      	add	sp, #36	; 0x24
 800aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf6:	f8dd a008 	ldr.w	sl, [sp, #8]
 800aafa:	e7eb      	b.n	800aad4 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800aafc:	20000000 	.word	0x20000000
 800ab00:	002d0024 	.word	0x002d0024
 800ab04:	001c0015 	.word	0x001c0015
 800ab08:	000f000a 	.word	0x000f000a
 800ab0c:	00060003 	.word	0x00060003
 800ab10:	0037003f 	.word	0x0037003f
 800ab14:	00450049 	.word	0x00450049
 800ab18:	00490045 	.word	0x00490045
 800ab1c:	003f0037 	.word	0x003f0037
 800ab20:	00030006 	.word	0x00030006
 800ab24:	000a000f 	.word	0x000a000f
 800ab28:	0015001c 	.word	0x0015001c
 800ab2c:	0024002d 	.word	0x0024002d

0800ab30 <D128_1CH_HTONS_VOL_HP>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	b093      	sub	sp, #76	; 0x4c
 800ab36:	4614      	mov	r4, r2
 800ab38:	9211      	str	r2, [sp, #68]	; 0x44
 800ab3a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800ab3c:	6912      	ldr	r2, [r2, #16]
 800ab3e:	9203      	str	r2, [sp, #12]
 800ab40:	4622      	mov	r2, r4
 800ab42:	4615      	mov	r5, r2
 800ab44:	6964      	ldr	r4, [r4, #20]
 800ab46:	9406      	str	r4, [sp, #24]
 800ab48:	4614      	mov	r4, r2
 800ab4a:	6992      	ldr	r2, [r2, #24]
 800ab4c:	9210      	str	r2, [sp, #64]	; 0x40
 800ab4e:	68ea      	ldr	r2, [r5, #12]
 800ab50:	9204      	str	r2, [sp, #16]
 800ab52:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800ab54:	69e6      	ldr	r6, [r4, #28]
 800ab56:	920d      	str	r2, [sp, #52]	; 0x34
 800ab58:	68a4      	ldr	r4, [r4, #8]
 800ab5a:	6a2a      	ldr	r2, [r5, #32]
 800ab5c:	9405      	str	r4, [sp, #20]
 800ab5e:	920e      	str	r2, [sp, #56]	; 0x38
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f000 8145 	beq.w	800adf0 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800ab66:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800ab6a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab6c:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800ae4c <D128_1CH_HTONS_VOL_HP+0x31c>
 800ab70:	9107      	str	r1, [sp, #28]
 800ab72:	f100 0310 	add.w	r3, r0, #16
 800ab76:	4699      	mov	r9, r3
 800ab78:	f1a9 0110 	sub.w	r1, r9, #16
 800ab7c:	c90e      	ldmia	r1, {r1, r2, r3}
 800ab7e:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800ab82:	ba49      	rev16	r1, r1
 800ab84:	ba52      	rev16	r2, r2
 800ab86:	ba5b      	rev16	r3, r3
 800ab88:	fa90 fa90 	rev16.w	sl, r0
 800ab8c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800ab90:	b2cc      	uxtb	r4, r1
 800ab92:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800ab96:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800ab9a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800ab9e:	0e09      	lsrs	r1, r1, #24
 800aba0:	4426      	add	r6, r4
 800aba2:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800aba6:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800abaa:	b2d0      	uxtb	r0, r2
 800abac:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800abb0:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800abb4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800abb8:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800abbc:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800abc0:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800abc4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800abc8:	0e12      	lsrs	r2, r2, #24
 800abca:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800abce:	9701      	str	r7, [sp, #4]
 800abd0:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800abd4:	4627      	mov	r7, r4
 800abd6:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800abda:	9702      	str	r7, [sp, #8]
 800abdc:	b2da      	uxtb	r2, r3
 800abde:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800abe2:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800abe6:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800abea:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800abee:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800abf2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800abf6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800abfa:	0e1b      	lsrs	r3, r3, #24
 800abfc:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800ac00:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800ac04:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800ac08:	fa5f f38a 	uxtb.w	r3, sl
 800ac0c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ac10:	960a      	str	r6, [sp, #40]	; 0x28
 800ac12:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800ac16:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800ac1a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ac1e:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800ac22:	950b      	str	r5, [sp, #44]	; 0x2c
 800ac24:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800ac28:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800ac2c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800ac30:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800ac34:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800ac38:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800ac3c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800ac40:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800ac44:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800ac48:	9308      	str	r3, [sp, #32]
 800ac4a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800ac4e:	9b01      	ldr	r3, [sp, #4]
 800ac50:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800ac54:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ac58:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800ac5c:	9b02      	ldr	r3, [sp, #8]
 800ac5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac62:	9302      	str	r3, [sp, #8]
 800ac64:	9b08      	ldr	r3, [sp, #32]
 800ac66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac6a:	9308      	str	r3, [sp, #32]
 800ac6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac6e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ac72:	950c      	str	r5, [sp, #48]	; 0x30
 800ac74:	461d      	mov	r5, r3
 800ac76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac78:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ac7c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ac80:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800ac84:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	9b02      	ldr	r3, [sp, #8]
 800ac8c:	9202      	str	r2, [sp, #8]
 800ac8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac92:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ac96:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ac9a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800ac9e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800aca2:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800aca6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800acaa:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800acae:	9b08      	ldr	r3, [sp, #32]
 800acb0:	9f01      	ldr	r7, [sp, #4]
 800acb2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800acb6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800acba:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800acbe:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800acc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800acc6:	46be      	mov	lr, r7
 800acc8:	0a96      	lsrs	r6, r2, #10
 800acca:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800acce:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800acd2:	4f49      	ldr	r7, [pc, #292]	; (800adf8 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800acd4:	9a04      	ldr	r2, [sp, #16]
 800acd6:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800acda:	4a48      	ldr	r2, [pc, #288]	; (800adfc <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800acdc:	fb2a ee02 	smlad	lr, sl, r2, lr
 800ace0:	4a47      	ldr	r2, [pc, #284]	; (800ae00 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800ace2:	fb21 ee02 	smlad	lr, r1, r2, lr
 800ace6:	4a47      	ldr	r2, [pc, #284]	; (800ae04 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800ace8:	fb24 ee02 	smlad	lr, r4, r2, lr
 800acec:	4a46      	ldr	r2, [pc, #280]	; (800ae08 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800acee:	9f02      	ldr	r7, [sp, #8]
 800acf0:	fb27 ee02 	smlad	lr, r7, r2, lr
 800acf4:	4a45      	ldr	r2, [pc, #276]	; (800ae0c <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800acf6:	fb20 ee02 	smlad	lr, r0, r2, lr
 800acfa:	4a45      	ldr	r2, [pc, #276]	; (800ae10 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800acfc:	fb23 e702 	smlad	r7, r3, r2, lr
 800ad00:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800ad04:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800ad08:	9f01      	ldr	r7, [sp, #4]
 800ad0a:	4a42      	ldr	r2, [pc, #264]	; (800ae14 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800ad0c:	46bc      	mov	ip, r7
 800ad0e:	9f05      	ldr	r7, [sp, #20]
 800ad10:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800ad14:	4a40      	ldr	r2, [pc, #256]	; (800ae18 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800ad16:	fb2a cc02 	smlad	ip, sl, r2, ip
 800ad1a:	4f40      	ldr	r7, [pc, #256]	; (800ae1c <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800ad1c:	fb21 cc07 	smlad	ip, r1, r7, ip
 800ad20:	4f3f      	ldr	r7, [pc, #252]	; (800ae20 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800ad22:	fb24 cc07 	smlad	ip, r4, r7, ip
 800ad26:	4f3f      	ldr	r7, [pc, #252]	; (800ae24 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800ad28:	9a02      	ldr	r2, [sp, #8]
 800ad2a:	fb22 cc07 	smlad	ip, r2, r7, ip
 800ad2e:	4f3e      	ldr	r7, [pc, #248]	; (800ae28 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800ad30:	fb20 cc07 	smlad	ip, r0, r7, ip
 800ad34:	4f3d      	ldr	r7, [pc, #244]	; (800ae2c <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800ad36:	fb23 c707 	smlad	r7, r3, r7, ip
 800ad3a:	f8df c114 	ldr.w	ip, [pc, #276]	; 800ae50 <D128_1CH_HTONS_VOL_HP+0x320>
 800ad3e:	fb25 720c 	smlad	r2, r5, ip, r7
 800ad42:	f04f 0b01 	mov.w	fp, #1
 800ad46:	9204      	str	r2, [sp, #16]
 800ad48:	9f01      	ldr	r7, [sp, #4]
 800ad4a:	fb27 fb0b 	smuad	fp, r7, fp
 800ad4e:	4f38      	ldr	r7, [pc, #224]	; (800ae30 <D128_1CH_HTONS_VOL_HP+0x300>)
 800ad50:	fb2a ba07 	smlad	sl, sl, r7, fp
 800ad54:	4f37      	ldr	r7, [pc, #220]	; (800ae34 <D128_1CH_HTONS_VOL_HP+0x304>)
 800ad56:	fb21 aa07 	smlad	sl, r1, r7, sl
 800ad5a:	4f37      	ldr	r7, [pc, #220]	; (800ae38 <D128_1CH_HTONS_VOL_HP+0x308>)
 800ad5c:	fb24 aa07 	smlad	sl, r4, r7, sl
 800ad60:	4f36      	ldr	r7, [pc, #216]	; (800ae3c <D128_1CH_HTONS_VOL_HP+0x30c>)
 800ad62:	9a02      	ldr	r2, [sp, #8]
 800ad64:	fb22 a707 	smlad	r7, r2, r7, sl
 800ad68:	4a35      	ldr	r2, [pc, #212]	; (800ae40 <D128_1CH_HTONS_VOL_HP+0x310>)
 800ad6a:	fb20 7702 	smlad	r7, r0, r2, r7
 800ad6e:	4a35      	ldr	r2, [pc, #212]	; (800ae44 <D128_1CH_HTONS_VOL_HP+0x314>)
 800ad70:	fb23 7702 	smlad	r7, r3, r2, r7
 800ad74:	4b34      	ldr	r3, [pc, #208]	; (800ae48 <D128_1CH_HTONS_VOL_HP+0x318>)
 800ad76:	fb25 7303 	smlad	r3, r5, r3, r7
 800ad7a:	9305      	str	r3, [sp, #20]
 800ad7c:	9b03      	ldr	r3, [sp, #12]
 800ad7e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ad80:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800ad84:	4473      	add	r3, lr
 800ad86:	461a      	mov	r2, r3
 800ad88:	9b06      	ldr	r3, [sp, #24]
 800ad8a:	f8cd e018 	str.w	lr, [sp, #24]
 800ad8e:	1ad2      	subs	r2, r2, r3
 800ad90:	17d1      	asrs	r1, r2, #31
 800ad92:	fba2 2304 	umull	r2, r3, r2, r4
 800ad96:	fb04 3301 	mla	r3, r4, r1, r3
 800ad9a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800ad9e:	f143 0300 	adc.w	r3, r3, #0
 800ada2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ada4:	021a      	lsls	r2, r3, #8
 800ada6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800adaa:	2100      	movs	r1, #0
 800adac:	fbc4 0102 	smlal	r0, r1, r4, r2
 800adb0:	108a      	asrs	r2, r1, #2
 800adb2:	9907      	ldr	r1, [sp, #28]
 800adb4:	f302 020f 	ssat	r2, #16, r2
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	f821 2b02 	strh.w	r2, [r1], #2
 800adbe:	9303      	str	r3, [sp, #12]
 800adc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adc2:	9107      	str	r1, [sp, #28]
 800adc4:	4299      	cmp	r1, r3
 800adc6:	f109 0910 	add.w	r9, r9, #16
 800adca:	f47f aed5 	bne.w	800ab78 <D128_1CH_HTONS_VOL_HP+0x48>
 800adce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800add0:	9905      	ldr	r1, [sp, #20]
 800add2:	6091      	str	r1, [r2, #8]
 800add4:	9904      	ldr	r1, [sp, #16]
 800add6:	60d1      	str	r1, [r2, #12]
 800add8:	4613      	mov	r3, r2
 800adda:	61d6      	str	r6, [r2, #28]
 800addc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800adde:	9a03      	ldr	r2, [sp, #12]
 800ade0:	611a      	str	r2, [r3, #16]
 800ade2:	2000      	movs	r0, #0
 800ade4:	f8c3 e014 	str.w	lr, [r3, #20]
 800ade8:	6199      	str	r1, [r3, #24]
 800adea:	b013      	add	sp, #76	; 0x4c
 800adec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf0:	f8dd e018 	ldr.w	lr, [sp, #24]
 800adf4:	e7eb      	b.n	800adce <D128_1CH_HTONS_VOL_HP+0x29e>
 800adf6:	bf00      	nop
 800adf8:	00780069 	.word	0x00780069
 800adfc:	005b004e 	.word	0x005b004e
 800ae00:	00420037 	.word	0x00420037
 800ae04:	002d0024 	.word	0x002d0024
 800ae08:	001c0015 	.word	0x001c0015
 800ae0c:	000f000a 	.word	0x000f000a
 800ae10:	00060003 	.word	0x00060003
 800ae14:	00880096 	.word	0x00880096
 800ae18:	00a200ac 	.word	0x00a200ac
 800ae1c:	00b400ba 	.word	0x00b400ba
 800ae20:	00be00c0 	.word	0x00be00c0
 800ae24:	00c000be 	.word	0x00c000be
 800ae28:	00ba00b4 	.word	0x00ba00b4
 800ae2c:	00ac00a2 	.word	0x00ac00a2
 800ae30:	00030006 	.word	0x00030006
 800ae34:	000a000f 	.word	0x000a000f
 800ae38:	0015001c 	.word	0x0015001c
 800ae3c:	0024002d 	.word	0x0024002d
 800ae40:	00370042 	.word	0x00370042
 800ae44:	004e005b 	.word	0x004e005b
 800ae48:	00690078 	.word	0x00690078
 800ae4c:	20000000 	.word	0x20000000
 800ae50:	00960088 	.word	0x00960088

0800ae54 <PDM_Filter_Init>:
 800ae54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae56:	2240      	movs	r2, #64	; 0x40
 800ae58:	4604      	mov	r4, r0
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	300c      	adds	r0, #12
 800ae5e:	f000 f9f8 	bl	800b252 <memset>
 800ae62:	493b      	ldr	r1, [pc, #236]	; (800af50 <PDM_Filter_Init+0xfc>)
 800ae64:	483b      	ldr	r0, [pc, #236]	; (800af54 <PDM_Filter_Init+0x100>)
 800ae66:	f000 f971 	bl	800b14c <CRC_Lock>
 800ae6a:	8822      	ldrh	r2, [r4, #0]
 800ae6c:	8963      	ldrh	r3, [r4, #10]
 800ae6e:	4938      	ldr	r1, [pc, #224]	; (800af50 <PDM_Filter_Init+0xfc>)
 800ae70:	8925      	ldrh	r5, [r4, #8]
 800ae72:	86a3      	strh	r3, [r4, #52]	; 0x34
 800ae74:	2801      	cmp	r0, #1
 800ae76:	f04f 0300 	mov.w	r3, #0
 800ae7a:	bf18      	it	ne
 800ae7c:	2100      	movne	r1, #0
 800ae7e:	2a01      	cmp	r2, #1
 800ae80:	6461      	str	r1, [r4, #68]	; 0x44
 800ae82:	86e5      	strh	r5, [r4, #54]	; 0x36
 800ae84:	61a3      	str	r3, [r4, #24]
 800ae86:	6123      	str	r3, [r4, #16]
 800ae88:	6163      	str	r3, [r4, #20]
 800ae8a:	60e3      	str	r3, [r4, #12]
 800ae8c:	6263      	str	r3, [r4, #36]	; 0x24
 800ae8e:	61e3      	str	r3, [r4, #28]
 800ae90:	6223      	str	r3, [r4, #32]
 800ae92:	6423      	str	r3, [r4, #64]	; 0x40
 800ae94:	d918      	bls.n	800aec8 <PDM_Filter_Init+0x74>
 800ae96:	2003      	movs	r0, #3
 800ae98:	2302      	movs	r3, #2
 800ae9a:	8862      	ldrh	r2, [r4, #2]
 800ae9c:	2a01      	cmp	r2, #1
 800ae9e:	d91d      	bls.n	800aedc <PDM_Filter_Init+0x88>
 800aea0:	2140      	movs	r1, #64	; 0x40
 800aea2:	2300      	movs	r3, #0
 800aea4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800aea6:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800aeaa:	6862      	ldr	r2, [r4, #4]
 800aeac:	bf04      	itt	eq
 800aeae:	6421      	streq	r1, [r4, #64]	; 0x40
 800aeb0:	460b      	moveq	r3, r1
 800aeb2:	b11a      	cbz	r2, 800aebc <PDM_Filter_Init+0x68>
 800aeb4:	f043 0310 	orr.w	r3, r3, #16
 800aeb8:	6423      	str	r3, [r4, #64]	; 0x40
 800aeba:	62e2      	str	r2, [r4, #44]	; 0x2c
 800aebc:	2200      	movs	r2, #0
 800aebe:	8722      	strh	r2, [r4, #56]	; 0x38
 800aec0:	b908      	cbnz	r0, 800aec6 <PDM_Filter_Init+0x72>
 800aec2:	3380      	adds	r3, #128	; 0x80
 800aec4:	6423      	str	r3, [r4, #64]	; 0x40
 800aec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aec8:	4d23      	ldr	r5, [pc, #140]	; (800af58 <PDM_Filter_Init+0x104>)
 800aeca:	d010      	beq.n	800aeee <PDM_Filter_Init+0x9a>
 800aecc:	782a      	ldrb	r2, [r5, #0]
 800aece:	2a01      	cmp	r2, #1
 800aed0:	d027      	beq.n	800af22 <PDM_Filter_Init+0xce>
 800aed2:	8862      	ldrh	r2, [r4, #2]
 800aed4:	2a01      	cmp	r2, #1
 800aed6:	f04f 0001 	mov.w	r0, #1
 800aeda:	d8e1      	bhi.n	800aea0 <PDM_Filter_Init+0x4c>
 800aedc:	d001      	beq.n	800aee2 <PDM_Filter_Init+0x8e>
 800aede:	4618      	mov	r0, r3
 800aee0:	e7de      	b.n	800aea0 <PDM_Filter_Init+0x4c>
 800aee2:	2220      	movs	r2, #32
 800aee4:	4618      	mov	r0, r3
 800aee6:	6422      	str	r2, [r4, #64]	; 0x40
 800aee8:	4613      	mov	r3, r2
 800aeea:	2160      	movs	r1, #96	; 0x60
 800aeec:	e7da      	b.n	800aea4 <PDM_Filter_Init+0x50>
 800aeee:	7829      	ldrb	r1, [r5, #0]
 800aef0:	2900      	cmp	r1, #0
 800aef2:	d1ee      	bne.n	800aed2 <PDM_Filter_Init+0x7e>
 800aef4:	4919      	ldr	r1, [pc, #100]	; (800af5c <PDM_Filter_Init+0x108>)
 800aef6:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800af64 <PDM_Filter_Init+0x110>
 800aefa:	4f19      	ldr	r7, [pc, #100]	; (800af60 <PDM_Filter_Init+0x10c>)
 800aefc:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800af00:	684a      	ldr	r2, [r1, #4]
 800af02:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800af06:	ea02 0007 	and.w	r0, r2, r7
 800af0a:	4303      	orrs	r3, r0
 800af0c:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800af10:	4413      	add	r3, r2
 800af12:	f841 3f04 	str.w	r3, [r1, #4]!
 800af16:	428e      	cmp	r6, r1
 800af18:	d1f2      	bne.n	800af00 <PDM_Filter_Init+0xac>
 800af1a:	2001      	movs	r0, #1
 800af1c:	7028      	strb	r0, [r5, #0]
 800af1e:	2300      	movs	r3, #0
 800af20:	e7bb      	b.n	800ae9a <PDM_Filter_Init+0x46>
 800af22:	490e      	ldr	r1, [pc, #56]	; (800af5c <PDM_Filter_Init+0x108>)
 800af24:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800af64 <PDM_Filter_Init+0x110>
 800af28:	4f0d      	ldr	r7, [pc, #52]	; (800af60 <PDM_Filter_Init+0x10c>)
 800af2a:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800af2e:	684a      	ldr	r2, [r1, #4]
 800af30:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800af34:	ea02 0007 	and.w	r0, r2, r7
 800af38:	4303      	orrs	r3, r0
 800af3a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800af3e:	4413      	add	r3, r2
 800af40:	f841 3f04 	str.w	r3, [r1, #4]!
 800af44:	428e      	cmp	r6, r1
 800af46:	d1f2      	bne.n	800af2e <PDM_Filter_Init+0xda>
 800af48:	2300      	movs	r3, #0
 800af4a:	702b      	strb	r3, [r5, #0]
 800af4c:	e7c1      	b.n	800aed2 <PDM_Filter_Init+0x7e>
 800af4e:	bf00      	nop
 800af50:	b5e8b5cd 	.word	0xb5e8b5cd
 800af54:	f407a5c2 	.word	0xf407a5c2
 800af58:	2000077c 	.word	0x2000077c
 800af5c:	1ffffffc 	.word	0x1ffffffc
 800af60:	000ffc00 	.word	0x000ffc00
 800af64:	3ff00000 	.word	0x3ff00000

0800af68 <PDM_Filter_setConfig>:
 800af68:	4b66      	ldr	r3, [pc, #408]	; (800b104 <PDM_Filter_setConfig+0x19c>)
 800af6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d001      	beq.n	800af74 <PDM_Filter_setConfig+0xc>
 800af70:	2004      	movs	r0, #4
 800af72:	4770      	bx	lr
 800af74:	b530      	push	{r4, r5, lr}
 800af76:	880a      	ldrh	r2, [r1, #0]
 800af78:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800af7a:	ed2d 8b04 	vpush	{d8-d9}
 800af7e:	4604      	mov	r4, r0
 800af80:	460d      	mov	r5, r1
 800af82:	1e51      	subs	r1, r2, #1
 800af84:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800af88:	2906      	cmp	r1, #6
 800af8a:	b083      	sub	sp, #12
 800af8c:	6420      	str	r0, [r4, #64]	; 0x40
 800af8e:	d91a      	bls.n	800afc6 <PDM_Filter_setConfig+0x5e>
 800af90:	2008      	movs	r0, #8
 800af92:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800af96:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800af9a:	4299      	cmp	r1, r3
 800af9c:	d07e      	beq.n	800b09c <PDM_Filter_setConfig+0x134>
 800af9e:	f113 0f0c 	cmn.w	r3, #12
 800afa2:	da2a      	bge.n	800affa <PDM_Filter_setConfig+0x92>
 800afa4:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800afa8:	3040      	adds	r0, #64	; 0x40
 800afaa:	80ab      	strh	r3, [r5, #4]
 800afac:	8622      	strh	r2, [r4, #48]	; 0x30
 800afae:	886b      	ldrh	r3, [r5, #2]
 800afb0:	8663      	strh	r3, [r4, #50]	; 0x32
 800afb2:	b920      	cbnz	r0, 800afbe <PDM_Filter_setConfig+0x56>
 800afb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afba:	6423      	str	r3, [r4, #64]	; 0x40
 800afbc:	2000      	movs	r0, #0
 800afbe:	b003      	add	sp, #12
 800afc0:	ecbd 8b04 	vpop	{d8-d9}
 800afc4:	bd30      	pop	{r4, r5, pc}
 800afc6:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800afc8:	4291      	cmp	r1, r2
 800afca:	d06c      	beq.n	800b0a6 <PDM_Filter_setConfig+0x13e>
 800afcc:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800afd0:	f023 0301 	bic.w	r3, r3, #1
 800afd4:	4313      	orrs	r3, r2
 800afd6:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800afda:	6423      	str	r3, [r4, #64]	; 0x40
 800afdc:	2970      	cmp	r1, #112	; 0x70
 800afde:	f003 030f 	and.w	r3, r3, #15
 800afe2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800afe6:	d066      	beq.n	800b0b6 <PDM_Filter_setConfig+0x14e>
 800afe8:	2b06      	cmp	r3, #6
 800afea:	f200 8089 	bhi.w	800b100 <PDM_Filter_setConfig+0x198>
 800afee:	e8df f003 	tbb	[pc, r3]
 800aff2:	4f52      	.short	0x4f52
 800aff4:	3d43494c 	.word	0x3d43494c
 800aff8:	46          	.byte	0x46
 800aff9:	00          	.byte	0x00
 800affa:	2b33      	cmp	r3, #51	; 0x33
 800affc:	dc32      	bgt.n	800b064 <PDM_Filter_setConfig+0xfc>
 800affe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b000:	f002 020f 	and.w	r2, r2, #15
 800b004:	3a01      	subs	r2, #1
 800b006:	2a06      	cmp	r2, #6
 800b008:	d872      	bhi.n	800b0f0 <PDM_Filter_setConfig+0x188>
 800b00a:	493f      	ldr	r1, [pc, #252]	; (800b108 <PDM_Filter_setConfig+0x1a0>)
 800b00c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b010:	ed92 9a00 	vldr	s18, [r2]
 800b014:	ed92 8a07 	vldr	s16, [r2, #28]
 800b018:	9001      	str	r0, [sp, #4]
 800b01a:	ee07 3a90 	vmov	s15, r3
 800b01e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b022:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800b026:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800b02a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800b02e:	f001 fa43 	bl	800c4b8 <powf>
 800b032:	eddf 0a36 	vldr	s1, [pc, #216]	; 800b10c <PDM_Filter_setConfig+0x1a4>
 800b036:	eef0 8a40 	vmov.f32	s17, s0
 800b03a:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800b03e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b042:	f001 fa39 	bl	800c4b8 <powf>
 800b046:	ee28 8a28 	vmul.f32	s16, s16, s17
 800b04a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b04e:	f001 fa0d 	bl	800c46c <roundf>
 800b052:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800b056:	88ab      	ldrh	r3, [r5, #4]
 800b058:	882a      	ldrh	r2, [r5, #0]
 800b05a:	9801      	ldr	r0, [sp, #4]
 800b05c:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800b060:	8723      	strh	r3, [r4, #56]	; 0x38
 800b062:	e7a3      	b.n	800afac <PDM_Filter_setConfig+0x44>
 800b064:	2333      	movs	r3, #51	; 0x33
 800b066:	3040      	adds	r0, #64	; 0x40
 800b068:	80ab      	strh	r3, [r5, #4]
 800b06a:	e79f      	b.n	800afac <PDM_Filter_setConfig+0x44>
 800b06c:	4b28      	ldr	r3, [pc, #160]	; (800b110 <PDM_Filter_setConfig+0x1a8>)
 800b06e:	64a3      	str	r3, [r4, #72]	; 0x48
 800b070:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800b074:	2000      	movs	r0, #0
 800b076:	e792      	b.n	800af9e <PDM_Filter_setConfig+0x36>
 800b078:	4b26      	ldr	r3, [pc, #152]	; (800b114 <PDM_Filter_setConfig+0x1ac>)
 800b07a:	64a3      	str	r3, [r4, #72]	; 0x48
 800b07c:	e7f8      	b.n	800b070 <PDM_Filter_setConfig+0x108>
 800b07e:	4b26      	ldr	r3, [pc, #152]	; (800b118 <PDM_Filter_setConfig+0x1b0>)
 800b080:	64a3      	str	r3, [r4, #72]	; 0x48
 800b082:	e7f5      	b.n	800b070 <PDM_Filter_setConfig+0x108>
 800b084:	4b25      	ldr	r3, [pc, #148]	; (800b11c <PDM_Filter_setConfig+0x1b4>)
 800b086:	64a3      	str	r3, [r4, #72]	; 0x48
 800b088:	e7f2      	b.n	800b070 <PDM_Filter_setConfig+0x108>
 800b08a:	4b25      	ldr	r3, [pc, #148]	; (800b120 <PDM_Filter_setConfig+0x1b8>)
 800b08c:	64a3      	str	r3, [r4, #72]	; 0x48
 800b08e:	e7ef      	b.n	800b070 <PDM_Filter_setConfig+0x108>
 800b090:	4b24      	ldr	r3, [pc, #144]	; (800b124 <PDM_Filter_setConfig+0x1bc>)
 800b092:	64a3      	str	r3, [r4, #72]	; 0x48
 800b094:	e7ec      	b.n	800b070 <PDM_Filter_setConfig+0x108>
 800b096:	4b24      	ldr	r3, [pc, #144]	; (800b128 <PDM_Filter_setConfig+0x1c0>)
 800b098:	64a3      	str	r3, [r4, #72]	; 0x48
 800b09a:	e7e9      	b.n	800b070 <PDM_Filter_setConfig+0x108>
 800b09c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800b09e:	4291      	cmp	r1, r2
 800b0a0:	f47f af7d 	bne.w	800af9e <PDM_Filter_setConfig+0x36>
 800b0a4:	e783      	b.n	800afae <PDM_Filter_setConfig+0x46>
 800b0a6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800b0aa:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800b0ae:	4299      	cmp	r1, r3
 800b0b0:	d023      	beq.n	800b0fa <PDM_Filter_setConfig+0x192>
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	e773      	b.n	800af9e <PDM_Filter_setConfig+0x36>
 800b0b6:	2b06      	cmp	r3, #6
 800b0b8:	d822      	bhi.n	800b100 <PDM_Filter_setConfig+0x198>
 800b0ba:	e8df f003 	tbb	[pc, r3]
 800b0be:	1316      	.short	0x1316
 800b0c0:	070a0d10 	.word	0x070a0d10
 800b0c4:	04          	.byte	0x04
 800b0c5:	00          	.byte	0x00
 800b0c6:	4b19      	ldr	r3, [pc, #100]	; (800b12c <PDM_Filter_setConfig+0x1c4>)
 800b0c8:	64a3      	str	r3, [r4, #72]	; 0x48
 800b0ca:	e7d1      	b.n	800b070 <PDM_Filter_setConfig+0x108>
 800b0cc:	4b18      	ldr	r3, [pc, #96]	; (800b130 <PDM_Filter_setConfig+0x1c8>)
 800b0ce:	64a3      	str	r3, [r4, #72]	; 0x48
 800b0d0:	e7ce      	b.n	800b070 <PDM_Filter_setConfig+0x108>
 800b0d2:	4b18      	ldr	r3, [pc, #96]	; (800b134 <PDM_Filter_setConfig+0x1cc>)
 800b0d4:	64a3      	str	r3, [r4, #72]	; 0x48
 800b0d6:	e7cb      	b.n	800b070 <PDM_Filter_setConfig+0x108>
 800b0d8:	4b17      	ldr	r3, [pc, #92]	; (800b138 <PDM_Filter_setConfig+0x1d0>)
 800b0da:	64a3      	str	r3, [r4, #72]	; 0x48
 800b0dc:	e7c8      	b.n	800b070 <PDM_Filter_setConfig+0x108>
 800b0de:	4b17      	ldr	r3, [pc, #92]	; (800b13c <PDM_Filter_setConfig+0x1d4>)
 800b0e0:	64a3      	str	r3, [r4, #72]	; 0x48
 800b0e2:	e7c5      	b.n	800b070 <PDM_Filter_setConfig+0x108>
 800b0e4:	4b16      	ldr	r3, [pc, #88]	; (800b140 <PDM_Filter_setConfig+0x1d8>)
 800b0e6:	64a3      	str	r3, [r4, #72]	; 0x48
 800b0e8:	e7c2      	b.n	800b070 <PDM_Filter_setConfig+0x108>
 800b0ea:	4b16      	ldr	r3, [pc, #88]	; (800b144 <PDM_Filter_setConfig+0x1dc>)
 800b0ec:	64a3      	str	r3, [r4, #72]	; 0x48
 800b0ee:	e7bf      	b.n	800b070 <PDM_Filter_setConfig+0x108>
 800b0f0:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800b148 <PDM_Filter_setConfig+0x1e0>
 800b0f4:	eeb0 9a48 	vmov.f32	s18, s16
 800b0f8:	e78e      	b.n	800b018 <PDM_Filter_setConfig+0xb0>
 800b0fa:	886b      	ldrh	r3, [r5, #2]
 800b0fc:	8663      	strh	r3, [r4, #50]	; 0x32
 800b0fe:	e759      	b.n	800afb4 <PDM_Filter_setConfig+0x4c>
 800b100:	2000      	movs	r0, #0
 800b102:	e746      	b.n	800af92 <PDM_Filter_setConfig+0x2a>
 800b104:	b5e8b5cd 	.word	0xb5e8b5cd
 800b108:	0800d1cc 	.word	0x0800d1cc
 800b10c:	42000000 	.word	0x42000000
 800b110:	080094d5 	.word	0x080094d5
 800b114:	080093b5 	.word	0x080093b5
 800b118:	08009665 	.word	0x08009665
 800b11c:	08009ea9 	.word	0x08009ea9
 800b120:	08009c09 	.word	0x08009c09
 800b124:	080099e9 	.word	0x080099e9
 800b128:	080097fd 	.word	0x080097fd
 800b12c:	0800a4b5 	.word	0x0800a4b5
 800b130:	0800a37d 	.word	0x0800a37d
 800b134:	0800a299 	.word	0x0800a299
 800b138:	0800ab31 	.word	0x0800ab31
 800b13c:	0800a91d 	.word	0x0800a91d
 800b140:	0800a765 	.word	0x0800a765
 800b144:	0800a5f9 	.word	0x0800a5f9
 800b148:	00000000 	.word	0x00000000

0800b14c <CRC_Lock>:
 800b14c:	4a17      	ldr	r2, [pc, #92]	; (800b1ac <CRC_Lock+0x60>)
 800b14e:	6813      	ldr	r3, [r2, #0]
 800b150:	b410      	push	{r4}
 800b152:	f023 0301 	bic.w	r3, r3, #1
 800b156:	4c16      	ldr	r4, [pc, #88]	; (800b1b0 <CRC_Lock+0x64>)
 800b158:	6013      	str	r3, [r2, #0]
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	b933      	cbnz	r3, 800b16c <CRC_Lock+0x20>
 800b15e:	4b15      	ldr	r3, [pc, #84]	; (800b1b4 <CRC_Lock+0x68>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b166:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b16a:	d00f      	beq.n	800b18c <CRC_Lock+0x40>
 800b16c:	4a12      	ldr	r2, [pc, #72]	; (800b1b8 <CRC_Lock+0x6c>)
 800b16e:	2301      	movs	r3, #1
 800b170:	6013      	str	r3, [r2, #0]
 800b172:	6813      	ldr	r3, [r2, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1fc      	bne.n	800b172 <CRC_Lock+0x26>
 800b178:	4b10      	ldr	r3, [pc, #64]	; (800b1bc <CRC_Lock+0x70>)
 800b17a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b17e:	6018      	str	r0, [r3, #0]
 800b180:	6818      	ldr	r0, [r3, #0]
 800b182:	1a08      	subs	r0, r1, r0
 800b184:	fab0 f080 	clz	r0, r0
 800b188:	0940      	lsrs	r0, r0, #5
 800b18a:	4770      	bx	lr
 800b18c:	4a0c      	ldr	r2, [pc, #48]	; (800b1c0 <CRC_Lock+0x74>)
 800b18e:	2301      	movs	r3, #1
 800b190:	6013      	str	r3, [r2, #0]
 800b192:	6813      	ldr	r3, [r2, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1fc      	bne.n	800b192 <CRC_Lock+0x46>
 800b198:	4b0a      	ldr	r3, [pc, #40]	; (800b1c4 <CRC_Lock+0x78>)
 800b19a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b19e:	6018      	str	r0, [r3, #0]
 800b1a0:	6818      	ldr	r0, [r3, #0]
 800b1a2:	1a40      	subs	r0, r0, r1
 800b1a4:	fab0 f080 	clz	r0, r0
 800b1a8:	0940      	lsrs	r0, r0, #5
 800b1aa:	4770      	bx	lr
 800b1ac:	e0002000 	.word	0xe0002000
 800b1b0:	e0042000 	.word	0xe0042000
 800b1b4:	5c001000 	.word	0x5c001000
 800b1b8:	40023008 	.word	0x40023008
 800b1bc:	40023000 	.word	0x40023000
 800b1c0:	58024c08 	.word	0x58024c08
 800b1c4:	58024c00 	.word	0x58024c00

0800b1c8 <__errno>:
 800b1c8:	4b01      	ldr	r3, [pc, #4]	; (800b1d0 <__errno+0x8>)
 800b1ca:	6818      	ldr	r0, [r3, #0]
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	2000058c 	.word	0x2000058c

0800b1d4 <__libc_init_array>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	4e0d      	ldr	r6, [pc, #52]	; (800b20c <__libc_init_array+0x38>)
 800b1d8:	4c0d      	ldr	r4, [pc, #52]	; (800b210 <__libc_init_array+0x3c>)
 800b1da:	1ba4      	subs	r4, r4, r6
 800b1dc:	10a4      	asrs	r4, r4, #2
 800b1de:	2500      	movs	r5, #0
 800b1e0:	42a5      	cmp	r5, r4
 800b1e2:	d109      	bne.n	800b1f8 <__libc_init_array+0x24>
 800b1e4:	4e0b      	ldr	r6, [pc, #44]	; (800b214 <__libc_init_array+0x40>)
 800b1e6:	4c0c      	ldr	r4, [pc, #48]	; (800b218 <__libc_init_array+0x44>)
 800b1e8:	f001 fe6c 	bl	800cec4 <_init>
 800b1ec:	1ba4      	subs	r4, r4, r6
 800b1ee:	10a4      	asrs	r4, r4, #2
 800b1f0:	2500      	movs	r5, #0
 800b1f2:	42a5      	cmp	r5, r4
 800b1f4:	d105      	bne.n	800b202 <__libc_init_array+0x2e>
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b1fc:	4798      	blx	r3
 800b1fe:	3501      	adds	r5, #1
 800b200:	e7ee      	b.n	800b1e0 <__libc_init_array+0xc>
 800b202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b206:	4798      	blx	r3
 800b208:	3501      	adds	r5, #1
 800b20a:	e7f2      	b.n	800b1f2 <__libc_init_array+0x1e>
 800b20c:	0800d410 	.word	0x0800d410
 800b210:	0800d410 	.word	0x0800d410
 800b214:	0800d410 	.word	0x0800d410
 800b218:	0800d414 	.word	0x0800d414

0800b21c <malloc>:
 800b21c:	4b02      	ldr	r3, [pc, #8]	; (800b228 <malloc+0xc>)
 800b21e:	4601      	mov	r1, r0
 800b220:	6818      	ldr	r0, [r3, #0]
 800b222:	f000 b86d 	b.w	800b300 <_malloc_r>
 800b226:	bf00      	nop
 800b228:	2000058c 	.word	0x2000058c

0800b22c <free>:
 800b22c:	4b02      	ldr	r3, [pc, #8]	; (800b238 <free+0xc>)
 800b22e:	4601      	mov	r1, r0
 800b230:	6818      	ldr	r0, [r3, #0]
 800b232:	f000 b817 	b.w	800b264 <_free_r>
 800b236:	bf00      	nop
 800b238:	2000058c 	.word	0x2000058c

0800b23c <memcpy>:
 800b23c:	b510      	push	{r4, lr}
 800b23e:	1e43      	subs	r3, r0, #1
 800b240:	440a      	add	r2, r1
 800b242:	4291      	cmp	r1, r2
 800b244:	d100      	bne.n	800b248 <memcpy+0xc>
 800b246:	bd10      	pop	{r4, pc}
 800b248:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b24c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b250:	e7f7      	b.n	800b242 <memcpy+0x6>

0800b252 <memset>:
 800b252:	4402      	add	r2, r0
 800b254:	4603      	mov	r3, r0
 800b256:	4293      	cmp	r3, r2
 800b258:	d100      	bne.n	800b25c <memset+0xa>
 800b25a:	4770      	bx	lr
 800b25c:	f803 1b01 	strb.w	r1, [r3], #1
 800b260:	e7f9      	b.n	800b256 <memset+0x4>
	...

0800b264 <_free_r>:
 800b264:	b538      	push	{r3, r4, r5, lr}
 800b266:	4605      	mov	r5, r0
 800b268:	2900      	cmp	r1, #0
 800b26a:	d045      	beq.n	800b2f8 <_free_r+0x94>
 800b26c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b270:	1f0c      	subs	r4, r1, #4
 800b272:	2b00      	cmp	r3, #0
 800b274:	bfb8      	it	lt
 800b276:	18e4      	addlt	r4, r4, r3
 800b278:	f000 f91a 	bl	800b4b0 <__malloc_lock>
 800b27c:	4a1f      	ldr	r2, [pc, #124]	; (800b2fc <_free_r+0x98>)
 800b27e:	6813      	ldr	r3, [r2, #0]
 800b280:	4610      	mov	r0, r2
 800b282:	b933      	cbnz	r3, 800b292 <_free_r+0x2e>
 800b284:	6063      	str	r3, [r4, #4]
 800b286:	6014      	str	r4, [r2, #0]
 800b288:	4628      	mov	r0, r5
 800b28a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b28e:	f000 b910 	b.w	800b4b2 <__malloc_unlock>
 800b292:	42a3      	cmp	r3, r4
 800b294:	d90c      	bls.n	800b2b0 <_free_r+0x4c>
 800b296:	6821      	ldr	r1, [r4, #0]
 800b298:	1862      	adds	r2, r4, r1
 800b29a:	4293      	cmp	r3, r2
 800b29c:	bf04      	itt	eq
 800b29e:	681a      	ldreq	r2, [r3, #0]
 800b2a0:	685b      	ldreq	r3, [r3, #4]
 800b2a2:	6063      	str	r3, [r4, #4]
 800b2a4:	bf04      	itt	eq
 800b2a6:	1852      	addeq	r2, r2, r1
 800b2a8:	6022      	streq	r2, [r4, #0]
 800b2aa:	6004      	str	r4, [r0, #0]
 800b2ac:	e7ec      	b.n	800b288 <_free_r+0x24>
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	685a      	ldr	r2, [r3, #4]
 800b2b2:	b10a      	cbz	r2, 800b2b8 <_free_r+0x54>
 800b2b4:	42a2      	cmp	r2, r4
 800b2b6:	d9fa      	bls.n	800b2ae <_free_r+0x4a>
 800b2b8:	6819      	ldr	r1, [r3, #0]
 800b2ba:	1858      	adds	r0, r3, r1
 800b2bc:	42a0      	cmp	r0, r4
 800b2be:	d10b      	bne.n	800b2d8 <_free_r+0x74>
 800b2c0:	6820      	ldr	r0, [r4, #0]
 800b2c2:	4401      	add	r1, r0
 800b2c4:	1858      	adds	r0, r3, r1
 800b2c6:	4282      	cmp	r2, r0
 800b2c8:	6019      	str	r1, [r3, #0]
 800b2ca:	d1dd      	bne.n	800b288 <_free_r+0x24>
 800b2cc:	6810      	ldr	r0, [r2, #0]
 800b2ce:	6852      	ldr	r2, [r2, #4]
 800b2d0:	605a      	str	r2, [r3, #4]
 800b2d2:	4401      	add	r1, r0
 800b2d4:	6019      	str	r1, [r3, #0]
 800b2d6:	e7d7      	b.n	800b288 <_free_r+0x24>
 800b2d8:	d902      	bls.n	800b2e0 <_free_r+0x7c>
 800b2da:	230c      	movs	r3, #12
 800b2dc:	602b      	str	r3, [r5, #0]
 800b2de:	e7d3      	b.n	800b288 <_free_r+0x24>
 800b2e0:	6820      	ldr	r0, [r4, #0]
 800b2e2:	1821      	adds	r1, r4, r0
 800b2e4:	428a      	cmp	r2, r1
 800b2e6:	bf04      	itt	eq
 800b2e8:	6811      	ldreq	r1, [r2, #0]
 800b2ea:	6852      	ldreq	r2, [r2, #4]
 800b2ec:	6062      	str	r2, [r4, #4]
 800b2ee:	bf04      	itt	eq
 800b2f0:	1809      	addeq	r1, r1, r0
 800b2f2:	6021      	streq	r1, [r4, #0]
 800b2f4:	605c      	str	r4, [r3, #4]
 800b2f6:	e7c7      	b.n	800b288 <_free_r+0x24>
 800b2f8:	bd38      	pop	{r3, r4, r5, pc}
 800b2fa:	bf00      	nop
 800b2fc:	20000890 	.word	0x20000890

0800b300 <_malloc_r>:
 800b300:	b570      	push	{r4, r5, r6, lr}
 800b302:	1ccd      	adds	r5, r1, #3
 800b304:	f025 0503 	bic.w	r5, r5, #3
 800b308:	3508      	adds	r5, #8
 800b30a:	2d0c      	cmp	r5, #12
 800b30c:	bf38      	it	cc
 800b30e:	250c      	movcc	r5, #12
 800b310:	2d00      	cmp	r5, #0
 800b312:	4606      	mov	r6, r0
 800b314:	db01      	blt.n	800b31a <_malloc_r+0x1a>
 800b316:	42a9      	cmp	r1, r5
 800b318:	d903      	bls.n	800b322 <_malloc_r+0x22>
 800b31a:	230c      	movs	r3, #12
 800b31c:	6033      	str	r3, [r6, #0]
 800b31e:	2000      	movs	r0, #0
 800b320:	bd70      	pop	{r4, r5, r6, pc}
 800b322:	f000 f8c5 	bl	800b4b0 <__malloc_lock>
 800b326:	4a21      	ldr	r2, [pc, #132]	; (800b3ac <_malloc_r+0xac>)
 800b328:	6814      	ldr	r4, [r2, #0]
 800b32a:	4621      	mov	r1, r4
 800b32c:	b991      	cbnz	r1, 800b354 <_malloc_r+0x54>
 800b32e:	4c20      	ldr	r4, [pc, #128]	; (800b3b0 <_malloc_r+0xb0>)
 800b330:	6823      	ldr	r3, [r4, #0]
 800b332:	b91b      	cbnz	r3, 800b33c <_malloc_r+0x3c>
 800b334:	4630      	mov	r0, r6
 800b336:	f000 f83d 	bl	800b3b4 <_sbrk_r>
 800b33a:	6020      	str	r0, [r4, #0]
 800b33c:	4629      	mov	r1, r5
 800b33e:	4630      	mov	r0, r6
 800b340:	f000 f838 	bl	800b3b4 <_sbrk_r>
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	d124      	bne.n	800b392 <_malloc_r+0x92>
 800b348:	230c      	movs	r3, #12
 800b34a:	6033      	str	r3, [r6, #0]
 800b34c:	4630      	mov	r0, r6
 800b34e:	f000 f8b0 	bl	800b4b2 <__malloc_unlock>
 800b352:	e7e4      	b.n	800b31e <_malloc_r+0x1e>
 800b354:	680b      	ldr	r3, [r1, #0]
 800b356:	1b5b      	subs	r3, r3, r5
 800b358:	d418      	bmi.n	800b38c <_malloc_r+0x8c>
 800b35a:	2b0b      	cmp	r3, #11
 800b35c:	d90f      	bls.n	800b37e <_malloc_r+0x7e>
 800b35e:	600b      	str	r3, [r1, #0]
 800b360:	50cd      	str	r5, [r1, r3]
 800b362:	18cc      	adds	r4, r1, r3
 800b364:	4630      	mov	r0, r6
 800b366:	f000 f8a4 	bl	800b4b2 <__malloc_unlock>
 800b36a:	f104 000b 	add.w	r0, r4, #11
 800b36e:	1d23      	adds	r3, r4, #4
 800b370:	f020 0007 	bic.w	r0, r0, #7
 800b374:	1ac3      	subs	r3, r0, r3
 800b376:	d0d3      	beq.n	800b320 <_malloc_r+0x20>
 800b378:	425a      	negs	r2, r3
 800b37a:	50e2      	str	r2, [r4, r3]
 800b37c:	e7d0      	b.n	800b320 <_malloc_r+0x20>
 800b37e:	428c      	cmp	r4, r1
 800b380:	684b      	ldr	r3, [r1, #4]
 800b382:	bf16      	itet	ne
 800b384:	6063      	strne	r3, [r4, #4]
 800b386:	6013      	streq	r3, [r2, #0]
 800b388:	460c      	movne	r4, r1
 800b38a:	e7eb      	b.n	800b364 <_malloc_r+0x64>
 800b38c:	460c      	mov	r4, r1
 800b38e:	6849      	ldr	r1, [r1, #4]
 800b390:	e7cc      	b.n	800b32c <_malloc_r+0x2c>
 800b392:	1cc4      	adds	r4, r0, #3
 800b394:	f024 0403 	bic.w	r4, r4, #3
 800b398:	42a0      	cmp	r0, r4
 800b39a:	d005      	beq.n	800b3a8 <_malloc_r+0xa8>
 800b39c:	1a21      	subs	r1, r4, r0
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f000 f808 	bl	800b3b4 <_sbrk_r>
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	d0cf      	beq.n	800b348 <_malloc_r+0x48>
 800b3a8:	6025      	str	r5, [r4, #0]
 800b3aa:	e7db      	b.n	800b364 <_malloc_r+0x64>
 800b3ac:	20000890 	.word	0x20000890
 800b3b0:	20000894 	.word	0x20000894

0800b3b4 <_sbrk_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4c06      	ldr	r4, [pc, #24]	; (800b3d0 <_sbrk_r+0x1c>)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	6023      	str	r3, [r4, #0]
 800b3c0:	f7f6 f9d6 	bl	8001770 <_sbrk>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_sbrk_r+0x1a>
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_sbrk_r+0x1a>
 800b3cc:	602b      	str	r3, [r5, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	200124ec 	.word	0x200124ec

0800b3d4 <siprintf>:
 800b3d4:	b40e      	push	{r1, r2, r3}
 800b3d6:	b500      	push	{lr}
 800b3d8:	b09c      	sub	sp, #112	; 0x70
 800b3da:	ab1d      	add	r3, sp, #116	; 0x74
 800b3dc:	9002      	str	r0, [sp, #8]
 800b3de:	9006      	str	r0, [sp, #24]
 800b3e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3e4:	4809      	ldr	r0, [pc, #36]	; (800b40c <siprintf+0x38>)
 800b3e6:	9107      	str	r1, [sp, #28]
 800b3e8:	9104      	str	r1, [sp, #16]
 800b3ea:	4909      	ldr	r1, [pc, #36]	; (800b410 <siprintf+0x3c>)
 800b3ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3f0:	9105      	str	r1, [sp, #20]
 800b3f2:	6800      	ldr	r0, [r0, #0]
 800b3f4:	9301      	str	r3, [sp, #4]
 800b3f6:	a902      	add	r1, sp, #8
 800b3f8:	f000 f8b6 	bl	800b568 <_svfiprintf_r>
 800b3fc:	9b02      	ldr	r3, [sp, #8]
 800b3fe:	2200      	movs	r2, #0
 800b400:	701a      	strb	r2, [r3, #0]
 800b402:	b01c      	add	sp, #112	; 0x70
 800b404:	f85d eb04 	ldr.w	lr, [sp], #4
 800b408:	b003      	add	sp, #12
 800b40a:	4770      	bx	lr
 800b40c:	2000058c 	.word	0x2000058c
 800b410:	ffff0208 	.word	0xffff0208

0800b414 <_vsiprintf_r>:
 800b414:	b500      	push	{lr}
 800b416:	b09b      	sub	sp, #108	; 0x6c
 800b418:	9100      	str	r1, [sp, #0]
 800b41a:	9104      	str	r1, [sp, #16]
 800b41c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b420:	9105      	str	r1, [sp, #20]
 800b422:	9102      	str	r1, [sp, #8]
 800b424:	4905      	ldr	r1, [pc, #20]	; (800b43c <_vsiprintf_r+0x28>)
 800b426:	9103      	str	r1, [sp, #12]
 800b428:	4669      	mov	r1, sp
 800b42a:	f000 f89d 	bl	800b568 <_svfiprintf_r>
 800b42e:	9b00      	ldr	r3, [sp, #0]
 800b430:	2200      	movs	r2, #0
 800b432:	701a      	strb	r2, [r3, #0]
 800b434:	b01b      	add	sp, #108	; 0x6c
 800b436:	f85d fb04 	ldr.w	pc, [sp], #4
 800b43a:	bf00      	nop
 800b43c:	ffff0208 	.word	0xffff0208

0800b440 <vsiprintf>:
 800b440:	4613      	mov	r3, r2
 800b442:	460a      	mov	r2, r1
 800b444:	4601      	mov	r1, r0
 800b446:	4802      	ldr	r0, [pc, #8]	; (800b450 <vsiprintf+0x10>)
 800b448:	6800      	ldr	r0, [r0, #0]
 800b44a:	f7ff bfe3 	b.w	800b414 <_vsiprintf_r>
 800b44e:	bf00      	nop
 800b450:	2000058c 	.word	0x2000058c

0800b454 <_vsiscanf_r>:
 800b454:	b570      	push	{r4, r5, r6, lr}
 800b456:	b09a      	sub	sp, #104	; 0x68
 800b458:	4604      	mov	r4, r0
 800b45a:	461e      	mov	r6, r3
 800b45c:	4608      	mov	r0, r1
 800b45e:	f44f 7301 	mov.w	r3, #516	; 0x204
 800b462:	4615      	mov	r5, r2
 800b464:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b468:	9100      	str	r1, [sp, #0]
 800b46a:	9104      	str	r1, [sp, #16]
 800b46c:	f7f4 feba 	bl	80001e4 <strlen>
 800b470:	4b09      	ldr	r3, [pc, #36]	; (800b498 <_vsiscanf_r+0x44>)
 800b472:	9309      	str	r3, [sp, #36]	; 0x24
 800b474:	2100      	movs	r1, #0
 800b476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b47a:	9001      	str	r0, [sp, #4]
 800b47c:	9005      	str	r0, [sp, #20]
 800b47e:	910d      	str	r1, [sp, #52]	; 0x34
 800b480:	9112      	str	r1, [sp, #72]	; 0x48
 800b482:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b486:	462a      	mov	r2, r5
 800b488:	4633      	mov	r3, r6
 800b48a:	4669      	mov	r1, sp
 800b48c:	4620      	mov	r0, r4
 800b48e:	f000 f9bd 	bl	800b80c <__ssvfiscanf_r>
 800b492:	b01a      	add	sp, #104	; 0x68
 800b494:	bd70      	pop	{r4, r5, r6, pc}
 800b496:	bf00      	nop
 800b498:	0800c0d1 	.word	0x0800c0d1

0800b49c <vsiscanf>:
 800b49c:	4613      	mov	r3, r2
 800b49e:	460a      	mov	r2, r1
 800b4a0:	4601      	mov	r1, r0
 800b4a2:	4802      	ldr	r0, [pc, #8]	; (800b4ac <vsiscanf+0x10>)
 800b4a4:	6800      	ldr	r0, [r0, #0]
 800b4a6:	f7ff bfd5 	b.w	800b454 <_vsiscanf_r>
 800b4aa:	bf00      	nop
 800b4ac:	2000058c 	.word	0x2000058c

0800b4b0 <__malloc_lock>:
 800b4b0:	4770      	bx	lr

0800b4b2 <__malloc_unlock>:
 800b4b2:	4770      	bx	lr

0800b4b4 <__ssputs_r>:
 800b4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b8:	688e      	ldr	r6, [r1, #8]
 800b4ba:	429e      	cmp	r6, r3
 800b4bc:	4682      	mov	sl, r0
 800b4be:	460c      	mov	r4, r1
 800b4c0:	4690      	mov	r8, r2
 800b4c2:	4699      	mov	r9, r3
 800b4c4:	d837      	bhi.n	800b536 <__ssputs_r+0x82>
 800b4c6:	898a      	ldrh	r2, [r1, #12]
 800b4c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4cc:	d031      	beq.n	800b532 <__ssputs_r+0x7e>
 800b4ce:	6825      	ldr	r5, [r4, #0]
 800b4d0:	6909      	ldr	r1, [r1, #16]
 800b4d2:	1a6f      	subs	r7, r5, r1
 800b4d4:	6965      	ldr	r5, [r4, #20]
 800b4d6:	2302      	movs	r3, #2
 800b4d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4dc:	fb95 f5f3 	sdiv	r5, r5, r3
 800b4e0:	f109 0301 	add.w	r3, r9, #1
 800b4e4:	443b      	add	r3, r7
 800b4e6:	429d      	cmp	r5, r3
 800b4e8:	bf38      	it	cc
 800b4ea:	461d      	movcc	r5, r3
 800b4ec:	0553      	lsls	r3, r2, #21
 800b4ee:	d530      	bpl.n	800b552 <__ssputs_r+0x9e>
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	f7ff ff05 	bl	800b300 <_malloc_r>
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	b950      	cbnz	r0, 800b510 <__ssputs_r+0x5c>
 800b4fa:	230c      	movs	r3, #12
 800b4fc:	f8ca 3000 	str.w	r3, [sl]
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b506:	81a3      	strh	r3, [r4, #12]
 800b508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b510:	463a      	mov	r2, r7
 800b512:	6921      	ldr	r1, [r4, #16]
 800b514:	f7ff fe92 	bl	800b23c <memcpy>
 800b518:	89a3      	ldrh	r3, [r4, #12]
 800b51a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b51e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b522:	81a3      	strh	r3, [r4, #12]
 800b524:	6126      	str	r6, [r4, #16]
 800b526:	6165      	str	r5, [r4, #20]
 800b528:	443e      	add	r6, r7
 800b52a:	1bed      	subs	r5, r5, r7
 800b52c:	6026      	str	r6, [r4, #0]
 800b52e:	60a5      	str	r5, [r4, #8]
 800b530:	464e      	mov	r6, r9
 800b532:	454e      	cmp	r6, r9
 800b534:	d900      	bls.n	800b538 <__ssputs_r+0x84>
 800b536:	464e      	mov	r6, r9
 800b538:	4632      	mov	r2, r6
 800b53a:	4641      	mov	r1, r8
 800b53c:	6820      	ldr	r0, [r4, #0]
 800b53e:	f000 ff41 	bl	800c3c4 <memmove>
 800b542:	68a3      	ldr	r3, [r4, #8]
 800b544:	1b9b      	subs	r3, r3, r6
 800b546:	60a3      	str	r3, [r4, #8]
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	441e      	add	r6, r3
 800b54c:	6026      	str	r6, [r4, #0]
 800b54e:	2000      	movs	r0, #0
 800b550:	e7dc      	b.n	800b50c <__ssputs_r+0x58>
 800b552:	462a      	mov	r2, r5
 800b554:	f000 ff4f 	bl	800c3f6 <_realloc_r>
 800b558:	4606      	mov	r6, r0
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d1e2      	bne.n	800b524 <__ssputs_r+0x70>
 800b55e:	6921      	ldr	r1, [r4, #16]
 800b560:	4650      	mov	r0, sl
 800b562:	f7ff fe7f 	bl	800b264 <_free_r>
 800b566:	e7c8      	b.n	800b4fa <__ssputs_r+0x46>

0800b568 <_svfiprintf_r>:
 800b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	461d      	mov	r5, r3
 800b56e:	898b      	ldrh	r3, [r1, #12]
 800b570:	061f      	lsls	r7, r3, #24
 800b572:	b09d      	sub	sp, #116	; 0x74
 800b574:	4680      	mov	r8, r0
 800b576:	460c      	mov	r4, r1
 800b578:	4616      	mov	r6, r2
 800b57a:	d50f      	bpl.n	800b59c <_svfiprintf_r+0x34>
 800b57c:	690b      	ldr	r3, [r1, #16]
 800b57e:	b96b      	cbnz	r3, 800b59c <_svfiprintf_r+0x34>
 800b580:	2140      	movs	r1, #64	; 0x40
 800b582:	f7ff febd 	bl	800b300 <_malloc_r>
 800b586:	6020      	str	r0, [r4, #0]
 800b588:	6120      	str	r0, [r4, #16]
 800b58a:	b928      	cbnz	r0, 800b598 <_svfiprintf_r+0x30>
 800b58c:	230c      	movs	r3, #12
 800b58e:	f8c8 3000 	str.w	r3, [r8]
 800b592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b596:	e0c8      	b.n	800b72a <_svfiprintf_r+0x1c2>
 800b598:	2340      	movs	r3, #64	; 0x40
 800b59a:	6163      	str	r3, [r4, #20]
 800b59c:	2300      	movs	r3, #0
 800b59e:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a0:	2320      	movs	r3, #32
 800b5a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5a6:	2330      	movs	r3, #48	; 0x30
 800b5a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5ac:	9503      	str	r5, [sp, #12]
 800b5ae:	f04f 0b01 	mov.w	fp, #1
 800b5b2:	4637      	mov	r7, r6
 800b5b4:	463d      	mov	r5, r7
 800b5b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b5ba:	b10b      	cbz	r3, 800b5c0 <_svfiprintf_r+0x58>
 800b5bc:	2b25      	cmp	r3, #37	; 0x25
 800b5be:	d13e      	bne.n	800b63e <_svfiprintf_r+0xd6>
 800b5c0:	ebb7 0a06 	subs.w	sl, r7, r6
 800b5c4:	d00b      	beq.n	800b5de <_svfiprintf_r+0x76>
 800b5c6:	4653      	mov	r3, sl
 800b5c8:	4632      	mov	r2, r6
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	4640      	mov	r0, r8
 800b5ce:	f7ff ff71 	bl	800b4b4 <__ssputs_r>
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	f000 80a4 	beq.w	800b720 <_svfiprintf_r+0x1b8>
 800b5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5da:	4453      	add	r3, sl
 800b5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800b5de:	783b      	ldrb	r3, [r7, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f000 809d 	beq.w	800b720 <_svfiprintf_r+0x1b8>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5f0:	9304      	str	r3, [sp, #16]
 800b5f2:	9307      	str	r3, [sp, #28]
 800b5f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5f8:	931a      	str	r3, [sp, #104]	; 0x68
 800b5fa:	462f      	mov	r7, r5
 800b5fc:	2205      	movs	r2, #5
 800b5fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b602:	4850      	ldr	r0, [pc, #320]	; (800b744 <_svfiprintf_r+0x1dc>)
 800b604:	f7f4 fdfc 	bl	8000200 <memchr>
 800b608:	9b04      	ldr	r3, [sp, #16]
 800b60a:	b9d0      	cbnz	r0, 800b642 <_svfiprintf_r+0xda>
 800b60c:	06d9      	lsls	r1, r3, #27
 800b60e:	bf44      	itt	mi
 800b610:	2220      	movmi	r2, #32
 800b612:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b616:	071a      	lsls	r2, r3, #28
 800b618:	bf44      	itt	mi
 800b61a:	222b      	movmi	r2, #43	; 0x2b
 800b61c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b620:	782a      	ldrb	r2, [r5, #0]
 800b622:	2a2a      	cmp	r2, #42	; 0x2a
 800b624:	d015      	beq.n	800b652 <_svfiprintf_r+0xea>
 800b626:	9a07      	ldr	r2, [sp, #28]
 800b628:	462f      	mov	r7, r5
 800b62a:	2000      	movs	r0, #0
 800b62c:	250a      	movs	r5, #10
 800b62e:	4639      	mov	r1, r7
 800b630:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b634:	3b30      	subs	r3, #48	; 0x30
 800b636:	2b09      	cmp	r3, #9
 800b638:	d94d      	bls.n	800b6d6 <_svfiprintf_r+0x16e>
 800b63a:	b1b8      	cbz	r0, 800b66c <_svfiprintf_r+0x104>
 800b63c:	e00f      	b.n	800b65e <_svfiprintf_r+0xf6>
 800b63e:	462f      	mov	r7, r5
 800b640:	e7b8      	b.n	800b5b4 <_svfiprintf_r+0x4c>
 800b642:	4a40      	ldr	r2, [pc, #256]	; (800b744 <_svfiprintf_r+0x1dc>)
 800b644:	1a80      	subs	r0, r0, r2
 800b646:	fa0b f000 	lsl.w	r0, fp, r0
 800b64a:	4318      	orrs	r0, r3
 800b64c:	9004      	str	r0, [sp, #16]
 800b64e:	463d      	mov	r5, r7
 800b650:	e7d3      	b.n	800b5fa <_svfiprintf_r+0x92>
 800b652:	9a03      	ldr	r2, [sp, #12]
 800b654:	1d11      	adds	r1, r2, #4
 800b656:	6812      	ldr	r2, [r2, #0]
 800b658:	9103      	str	r1, [sp, #12]
 800b65a:	2a00      	cmp	r2, #0
 800b65c:	db01      	blt.n	800b662 <_svfiprintf_r+0xfa>
 800b65e:	9207      	str	r2, [sp, #28]
 800b660:	e004      	b.n	800b66c <_svfiprintf_r+0x104>
 800b662:	4252      	negs	r2, r2
 800b664:	f043 0302 	orr.w	r3, r3, #2
 800b668:	9207      	str	r2, [sp, #28]
 800b66a:	9304      	str	r3, [sp, #16]
 800b66c:	783b      	ldrb	r3, [r7, #0]
 800b66e:	2b2e      	cmp	r3, #46	; 0x2e
 800b670:	d10c      	bne.n	800b68c <_svfiprintf_r+0x124>
 800b672:	787b      	ldrb	r3, [r7, #1]
 800b674:	2b2a      	cmp	r3, #42	; 0x2a
 800b676:	d133      	bne.n	800b6e0 <_svfiprintf_r+0x178>
 800b678:	9b03      	ldr	r3, [sp, #12]
 800b67a:	1d1a      	adds	r2, r3, #4
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	9203      	str	r2, [sp, #12]
 800b680:	2b00      	cmp	r3, #0
 800b682:	bfb8      	it	lt
 800b684:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b688:	3702      	adds	r7, #2
 800b68a:	9305      	str	r3, [sp, #20]
 800b68c:	4d2e      	ldr	r5, [pc, #184]	; (800b748 <_svfiprintf_r+0x1e0>)
 800b68e:	7839      	ldrb	r1, [r7, #0]
 800b690:	2203      	movs	r2, #3
 800b692:	4628      	mov	r0, r5
 800b694:	f7f4 fdb4 	bl	8000200 <memchr>
 800b698:	b138      	cbz	r0, 800b6aa <_svfiprintf_r+0x142>
 800b69a:	2340      	movs	r3, #64	; 0x40
 800b69c:	1b40      	subs	r0, r0, r5
 800b69e:	fa03 f000 	lsl.w	r0, r3, r0
 800b6a2:	9b04      	ldr	r3, [sp, #16]
 800b6a4:	4303      	orrs	r3, r0
 800b6a6:	3701      	adds	r7, #1
 800b6a8:	9304      	str	r3, [sp, #16]
 800b6aa:	7839      	ldrb	r1, [r7, #0]
 800b6ac:	4827      	ldr	r0, [pc, #156]	; (800b74c <_svfiprintf_r+0x1e4>)
 800b6ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6b2:	2206      	movs	r2, #6
 800b6b4:	1c7e      	adds	r6, r7, #1
 800b6b6:	f7f4 fda3 	bl	8000200 <memchr>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d038      	beq.n	800b730 <_svfiprintf_r+0x1c8>
 800b6be:	4b24      	ldr	r3, [pc, #144]	; (800b750 <_svfiprintf_r+0x1e8>)
 800b6c0:	bb13      	cbnz	r3, 800b708 <_svfiprintf_r+0x1a0>
 800b6c2:	9b03      	ldr	r3, [sp, #12]
 800b6c4:	3307      	adds	r3, #7
 800b6c6:	f023 0307 	bic.w	r3, r3, #7
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	9303      	str	r3, [sp, #12]
 800b6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d0:	444b      	add	r3, r9
 800b6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6d4:	e76d      	b.n	800b5b2 <_svfiprintf_r+0x4a>
 800b6d6:	fb05 3202 	mla	r2, r5, r2, r3
 800b6da:	2001      	movs	r0, #1
 800b6dc:	460f      	mov	r7, r1
 800b6de:	e7a6      	b.n	800b62e <_svfiprintf_r+0xc6>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	3701      	adds	r7, #1
 800b6e4:	9305      	str	r3, [sp, #20]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	250a      	movs	r5, #10
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6f0:	3a30      	subs	r2, #48	; 0x30
 800b6f2:	2a09      	cmp	r2, #9
 800b6f4:	d903      	bls.n	800b6fe <_svfiprintf_r+0x196>
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d0c8      	beq.n	800b68c <_svfiprintf_r+0x124>
 800b6fa:	9105      	str	r1, [sp, #20]
 800b6fc:	e7c6      	b.n	800b68c <_svfiprintf_r+0x124>
 800b6fe:	fb05 2101 	mla	r1, r5, r1, r2
 800b702:	2301      	movs	r3, #1
 800b704:	4607      	mov	r7, r0
 800b706:	e7f0      	b.n	800b6ea <_svfiprintf_r+0x182>
 800b708:	ab03      	add	r3, sp, #12
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	4622      	mov	r2, r4
 800b70e:	4b11      	ldr	r3, [pc, #68]	; (800b754 <_svfiprintf_r+0x1ec>)
 800b710:	a904      	add	r1, sp, #16
 800b712:	4640      	mov	r0, r8
 800b714:	f3af 8000 	nop.w
 800b718:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b71c:	4681      	mov	r9, r0
 800b71e:	d1d6      	bne.n	800b6ce <_svfiprintf_r+0x166>
 800b720:	89a3      	ldrh	r3, [r4, #12]
 800b722:	065b      	lsls	r3, r3, #25
 800b724:	f53f af35 	bmi.w	800b592 <_svfiprintf_r+0x2a>
 800b728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b72a:	b01d      	add	sp, #116	; 0x74
 800b72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b730:	ab03      	add	r3, sp, #12
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	4622      	mov	r2, r4
 800b736:	4b07      	ldr	r3, [pc, #28]	; (800b754 <_svfiprintf_r+0x1ec>)
 800b738:	a904      	add	r1, sp, #16
 800b73a:	4640      	mov	r0, r8
 800b73c:	f000 fa2c 	bl	800bb98 <_printf_i>
 800b740:	e7ea      	b.n	800b718 <_svfiprintf_r+0x1b0>
 800b742:	bf00      	nop
 800b744:	0800d228 	.word	0x0800d228
 800b748:	0800d22e 	.word	0x0800d22e
 800b74c:	0800d232 	.word	0x0800d232
 800b750:	00000000 	.word	0x00000000
 800b754:	0800b4b5 	.word	0x0800b4b5

0800b758 <_sungetc_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	1c4b      	adds	r3, r1, #1
 800b75c:	4614      	mov	r4, r2
 800b75e:	d103      	bne.n	800b768 <_sungetc_r+0x10>
 800b760:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b764:	4628      	mov	r0, r5
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	8993      	ldrh	r3, [r2, #12]
 800b76a:	f023 0320 	bic.w	r3, r3, #32
 800b76e:	8193      	strh	r3, [r2, #12]
 800b770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b772:	6852      	ldr	r2, [r2, #4]
 800b774:	b2cd      	uxtb	r5, r1
 800b776:	b18b      	cbz	r3, 800b79c <_sungetc_r+0x44>
 800b778:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b77a:	4293      	cmp	r3, r2
 800b77c:	dd08      	ble.n	800b790 <_sungetc_r+0x38>
 800b77e:	6823      	ldr	r3, [r4, #0]
 800b780:	1e5a      	subs	r2, r3, #1
 800b782:	6022      	str	r2, [r4, #0]
 800b784:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b788:	6863      	ldr	r3, [r4, #4]
 800b78a:	3301      	adds	r3, #1
 800b78c:	6063      	str	r3, [r4, #4]
 800b78e:	e7e9      	b.n	800b764 <_sungetc_r+0xc>
 800b790:	4621      	mov	r1, r4
 800b792:	f000 fdb9 	bl	800c308 <__submore>
 800b796:	2800      	cmp	r0, #0
 800b798:	d0f1      	beq.n	800b77e <_sungetc_r+0x26>
 800b79a:	e7e1      	b.n	800b760 <_sungetc_r+0x8>
 800b79c:	6921      	ldr	r1, [r4, #16]
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	b151      	cbz	r1, 800b7b8 <_sungetc_r+0x60>
 800b7a2:	4299      	cmp	r1, r3
 800b7a4:	d208      	bcs.n	800b7b8 <_sungetc_r+0x60>
 800b7a6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b7aa:	42a9      	cmp	r1, r5
 800b7ac:	d104      	bne.n	800b7b8 <_sungetc_r+0x60>
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	3201      	adds	r2, #1
 800b7b2:	6023      	str	r3, [r4, #0]
 800b7b4:	6062      	str	r2, [r4, #4]
 800b7b6:	e7d5      	b.n	800b764 <_sungetc_r+0xc>
 800b7b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b7bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7c0:	6363      	str	r3, [r4, #52]	; 0x34
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	63a3      	str	r3, [r4, #56]	; 0x38
 800b7c6:	4623      	mov	r3, r4
 800b7c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e7dc      	b.n	800b78c <_sungetc_r+0x34>

0800b7d2 <__ssrefill_r>:
 800b7d2:	b510      	push	{r4, lr}
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b7d8:	b169      	cbz	r1, 800b7f6 <__ssrefill_r+0x24>
 800b7da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7de:	4299      	cmp	r1, r3
 800b7e0:	d001      	beq.n	800b7e6 <__ssrefill_r+0x14>
 800b7e2:	f7ff fd3f 	bl	800b264 <_free_r>
 800b7e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7e8:	6063      	str	r3, [r4, #4]
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	6360      	str	r0, [r4, #52]	; 0x34
 800b7ee:	b113      	cbz	r3, 800b7f6 <__ssrefill_r+0x24>
 800b7f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b7f2:	6023      	str	r3, [r4, #0]
 800b7f4:	bd10      	pop	{r4, pc}
 800b7f6:	6923      	ldr	r3, [r4, #16]
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	6063      	str	r3, [r4, #4]
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	f043 0320 	orr.w	r3, r3, #32
 800b804:	81a3      	strh	r3, [r4, #12]
 800b806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b80a:	e7f3      	b.n	800b7f4 <__ssrefill_r+0x22>

0800b80c <__ssvfiscanf_r>:
 800b80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b810:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b814:	460c      	mov	r4, r1
 800b816:	2100      	movs	r1, #0
 800b818:	9144      	str	r1, [sp, #272]	; 0x110
 800b81a:	9145      	str	r1, [sp, #276]	; 0x114
 800b81c:	499f      	ldr	r1, [pc, #636]	; (800ba9c <__ssvfiscanf_r+0x290>)
 800b81e:	91a0      	str	r1, [sp, #640]	; 0x280
 800b820:	f10d 0804 	add.w	r8, sp, #4
 800b824:	499e      	ldr	r1, [pc, #632]	; (800baa0 <__ssvfiscanf_r+0x294>)
 800b826:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800baa4 <__ssvfiscanf_r+0x298>
 800b82a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b82e:	4606      	mov	r6, r0
 800b830:	4692      	mov	sl, r2
 800b832:	91a1      	str	r1, [sp, #644]	; 0x284
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	270a      	movs	r7, #10
 800b838:	f89a 3000 	ldrb.w	r3, [sl]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f000 812a 	beq.w	800ba96 <__ssvfiscanf_r+0x28a>
 800b842:	4655      	mov	r5, sl
 800b844:	f000 fd9e 	bl	800c384 <__locale_ctype_ptr>
 800b848:	f815 bb01 	ldrb.w	fp, [r5], #1
 800b84c:	4458      	add	r0, fp
 800b84e:	7843      	ldrb	r3, [r0, #1]
 800b850:	f013 0308 	ands.w	r3, r3, #8
 800b854:	d01c      	beq.n	800b890 <__ssvfiscanf_r+0x84>
 800b856:	6863      	ldr	r3, [r4, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	dd12      	ble.n	800b882 <__ssvfiscanf_r+0x76>
 800b85c:	f000 fd92 	bl	800c384 <__locale_ctype_ptr>
 800b860:	6823      	ldr	r3, [r4, #0]
 800b862:	781a      	ldrb	r2, [r3, #0]
 800b864:	4410      	add	r0, r2
 800b866:	7842      	ldrb	r2, [r0, #1]
 800b868:	0712      	lsls	r2, r2, #28
 800b86a:	d401      	bmi.n	800b870 <__ssvfiscanf_r+0x64>
 800b86c:	46aa      	mov	sl, r5
 800b86e:	e7e3      	b.n	800b838 <__ssvfiscanf_r+0x2c>
 800b870:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b872:	3201      	adds	r2, #1
 800b874:	9245      	str	r2, [sp, #276]	; 0x114
 800b876:	6862      	ldr	r2, [r4, #4]
 800b878:	3301      	adds	r3, #1
 800b87a:	3a01      	subs	r2, #1
 800b87c:	6062      	str	r2, [r4, #4]
 800b87e:	6023      	str	r3, [r4, #0]
 800b880:	e7e9      	b.n	800b856 <__ssvfiscanf_r+0x4a>
 800b882:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b884:	4621      	mov	r1, r4
 800b886:	4630      	mov	r0, r6
 800b888:	4798      	blx	r3
 800b88a:	2800      	cmp	r0, #0
 800b88c:	d0e6      	beq.n	800b85c <__ssvfiscanf_r+0x50>
 800b88e:	e7ed      	b.n	800b86c <__ssvfiscanf_r+0x60>
 800b890:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800b894:	f040 8082 	bne.w	800b99c <__ssvfiscanf_r+0x190>
 800b898:	9343      	str	r3, [sp, #268]	; 0x10c
 800b89a:	9341      	str	r3, [sp, #260]	; 0x104
 800b89c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800b8a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b8a2:	d103      	bne.n	800b8ac <__ssvfiscanf_r+0xa0>
 800b8a4:	2310      	movs	r3, #16
 800b8a6:	9341      	str	r3, [sp, #260]	; 0x104
 800b8a8:	f10a 0502 	add.w	r5, sl, #2
 800b8ac:	46aa      	mov	sl, r5
 800b8ae:	f815 1b01 	ldrb.w	r1, [r5], #1
 800b8b2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b8b6:	2a09      	cmp	r2, #9
 800b8b8:	d922      	bls.n	800b900 <__ssvfiscanf_r+0xf4>
 800b8ba:	2203      	movs	r2, #3
 800b8bc:	4879      	ldr	r0, [pc, #484]	; (800baa4 <__ssvfiscanf_r+0x298>)
 800b8be:	f7f4 fc9f 	bl	8000200 <memchr>
 800b8c2:	b138      	cbz	r0, 800b8d4 <__ssvfiscanf_r+0xc8>
 800b8c4:	eba0 0309 	sub.w	r3, r0, r9
 800b8c8:	2001      	movs	r0, #1
 800b8ca:	4098      	lsls	r0, r3
 800b8cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b8ce:	4318      	orrs	r0, r3
 800b8d0:	9041      	str	r0, [sp, #260]	; 0x104
 800b8d2:	46aa      	mov	sl, r5
 800b8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b8d8:	2b67      	cmp	r3, #103	; 0x67
 800b8da:	f10a 0501 	add.w	r5, sl, #1
 800b8de:	d82b      	bhi.n	800b938 <__ssvfiscanf_r+0x12c>
 800b8e0:	2b65      	cmp	r3, #101	; 0x65
 800b8e2:	f080 809f 	bcs.w	800ba24 <__ssvfiscanf_r+0x218>
 800b8e6:	2b47      	cmp	r3, #71	; 0x47
 800b8e8:	d810      	bhi.n	800b90c <__ssvfiscanf_r+0x100>
 800b8ea:	2b45      	cmp	r3, #69	; 0x45
 800b8ec:	f080 809a 	bcs.w	800ba24 <__ssvfiscanf_r+0x218>
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d06c      	beq.n	800b9ce <__ssvfiscanf_r+0x1c2>
 800b8f4:	2b25      	cmp	r3, #37	; 0x25
 800b8f6:	d051      	beq.n	800b99c <__ssvfiscanf_r+0x190>
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	9347      	str	r3, [sp, #284]	; 0x11c
 800b8fc:	9742      	str	r7, [sp, #264]	; 0x108
 800b8fe:	e027      	b.n	800b950 <__ssvfiscanf_r+0x144>
 800b900:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b902:	fb07 1303 	mla	r3, r7, r3, r1
 800b906:	3b30      	subs	r3, #48	; 0x30
 800b908:	9343      	str	r3, [sp, #268]	; 0x10c
 800b90a:	e7cf      	b.n	800b8ac <__ssvfiscanf_r+0xa0>
 800b90c:	2b5b      	cmp	r3, #91	; 0x5b
 800b90e:	d06a      	beq.n	800b9e6 <__ssvfiscanf_r+0x1da>
 800b910:	d80c      	bhi.n	800b92c <__ssvfiscanf_r+0x120>
 800b912:	2b58      	cmp	r3, #88	; 0x58
 800b914:	d1f0      	bne.n	800b8f8 <__ssvfiscanf_r+0xec>
 800b916:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b91c:	9241      	str	r2, [sp, #260]	; 0x104
 800b91e:	2210      	movs	r2, #16
 800b920:	9242      	str	r2, [sp, #264]	; 0x108
 800b922:	2b6e      	cmp	r3, #110	; 0x6e
 800b924:	bf8c      	ite	hi
 800b926:	2304      	movhi	r3, #4
 800b928:	2303      	movls	r3, #3
 800b92a:	e010      	b.n	800b94e <__ssvfiscanf_r+0x142>
 800b92c:	2b63      	cmp	r3, #99	; 0x63
 800b92e:	d065      	beq.n	800b9fc <__ssvfiscanf_r+0x1f0>
 800b930:	2b64      	cmp	r3, #100	; 0x64
 800b932:	d1e1      	bne.n	800b8f8 <__ssvfiscanf_r+0xec>
 800b934:	9742      	str	r7, [sp, #264]	; 0x108
 800b936:	e7f4      	b.n	800b922 <__ssvfiscanf_r+0x116>
 800b938:	2b70      	cmp	r3, #112	; 0x70
 800b93a:	d04b      	beq.n	800b9d4 <__ssvfiscanf_r+0x1c8>
 800b93c:	d826      	bhi.n	800b98c <__ssvfiscanf_r+0x180>
 800b93e:	2b6e      	cmp	r3, #110	; 0x6e
 800b940:	d062      	beq.n	800ba08 <__ssvfiscanf_r+0x1fc>
 800b942:	d84c      	bhi.n	800b9de <__ssvfiscanf_r+0x1d2>
 800b944:	2b69      	cmp	r3, #105	; 0x69
 800b946:	d1d7      	bne.n	800b8f8 <__ssvfiscanf_r+0xec>
 800b948:	2300      	movs	r3, #0
 800b94a:	9342      	str	r3, [sp, #264]	; 0x108
 800b94c:	2303      	movs	r3, #3
 800b94e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b950:	6863      	ldr	r3, [r4, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	dd68      	ble.n	800ba28 <__ssvfiscanf_r+0x21c>
 800b956:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b958:	0659      	lsls	r1, r3, #25
 800b95a:	d407      	bmi.n	800b96c <__ssvfiscanf_r+0x160>
 800b95c:	f000 fd12 	bl	800c384 <__locale_ctype_ptr>
 800b960:	6823      	ldr	r3, [r4, #0]
 800b962:	781a      	ldrb	r2, [r3, #0]
 800b964:	4410      	add	r0, r2
 800b966:	7842      	ldrb	r2, [r0, #1]
 800b968:	0712      	lsls	r2, r2, #28
 800b96a:	d464      	bmi.n	800ba36 <__ssvfiscanf_r+0x22a>
 800b96c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b96e:	2b02      	cmp	r3, #2
 800b970:	dc73      	bgt.n	800ba5a <__ssvfiscanf_r+0x24e>
 800b972:	466b      	mov	r3, sp
 800b974:	4622      	mov	r2, r4
 800b976:	a941      	add	r1, sp, #260	; 0x104
 800b978:	4630      	mov	r0, r6
 800b97a:	f000 fa1f 	bl	800bdbc <_scanf_chars>
 800b97e:	2801      	cmp	r0, #1
 800b980:	f000 8089 	beq.w	800ba96 <__ssvfiscanf_r+0x28a>
 800b984:	2802      	cmp	r0, #2
 800b986:	f47f af71 	bne.w	800b86c <__ssvfiscanf_r+0x60>
 800b98a:	e01d      	b.n	800b9c8 <__ssvfiscanf_r+0x1bc>
 800b98c:	2b75      	cmp	r3, #117	; 0x75
 800b98e:	d0d1      	beq.n	800b934 <__ssvfiscanf_r+0x128>
 800b990:	2b78      	cmp	r3, #120	; 0x78
 800b992:	d0c0      	beq.n	800b916 <__ssvfiscanf_r+0x10a>
 800b994:	2b73      	cmp	r3, #115	; 0x73
 800b996:	d1af      	bne.n	800b8f8 <__ssvfiscanf_r+0xec>
 800b998:	2302      	movs	r3, #2
 800b99a:	e7d8      	b.n	800b94e <__ssvfiscanf_r+0x142>
 800b99c:	6863      	ldr	r3, [r4, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	dd0c      	ble.n	800b9bc <__ssvfiscanf_r+0x1b0>
 800b9a2:	6823      	ldr	r3, [r4, #0]
 800b9a4:	781a      	ldrb	r2, [r3, #0]
 800b9a6:	455a      	cmp	r2, fp
 800b9a8:	d175      	bne.n	800ba96 <__ssvfiscanf_r+0x28a>
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	6862      	ldr	r2, [r4, #4]
 800b9ae:	6023      	str	r3, [r4, #0]
 800b9b0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b9b2:	3a01      	subs	r2, #1
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	6062      	str	r2, [r4, #4]
 800b9b8:	9345      	str	r3, [sp, #276]	; 0x114
 800b9ba:	e757      	b.n	800b86c <__ssvfiscanf_r+0x60>
 800b9bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b9be:	4621      	mov	r1, r4
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	4798      	blx	r3
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d0ec      	beq.n	800b9a2 <__ssvfiscanf_r+0x196>
 800b9c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	d159      	bne.n	800ba82 <__ssvfiscanf_r+0x276>
 800b9ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9d2:	e05c      	b.n	800ba8e <__ssvfiscanf_r+0x282>
 800b9d4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b9d6:	f042 0220 	orr.w	r2, r2, #32
 800b9da:	9241      	str	r2, [sp, #260]	; 0x104
 800b9dc:	e79b      	b.n	800b916 <__ssvfiscanf_r+0x10a>
 800b9de:	2308      	movs	r3, #8
 800b9e0:	9342      	str	r3, [sp, #264]	; 0x108
 800b9e2:	2304      	movs	r3, #4
 800b9e4:	e7b3      	b.n	800b94e <__ssvfiscanf_r+0x142>
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	4640      	mov	r0, r8
 800b9ea:	f000 fb3f 	bl	800c06c <__sccl>
 800b9ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b9f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9f4:	9341      	str	r3, [sp, #260]	; 0x104
 800b9f6:	4605      	mov	r5, r0
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e7a8      	b.n	800b94e <__ssvfiscanf_r+0x142>
 800b9fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b9fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba02:	9341      	str	r3, [sp, #260]	; 0x104
 800ba04:	2300      	movs	r3, #0
 800ba06:	e7a2      	b.n	800b94e <__ssvfiscanf_r+0x142>
 800ba08:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ba0a:	06c3      	lsls	r3, r0, #27
 800ba0c:	f53f af2e 	bmi.w	800b86c <__ssvfiscanf_r+0x60>
 800ba10:	9b00      	ldr	r3, [sp, #0]
 800ba12:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ba14:	1d19      	adds	r1, r3, #4
 800ba16:	9100      	str	r1, [sp, #0]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	07c0      	lsls	r0, r0, #31
 800ba1c:	bf4c      	ite	mi
 800ba1e:	801a      	strhmi	r2, [r3, #0]
 800ba20:	601a      	strpl	r2, [r3, #0]
 800ba22:	e723      	b.n	800b86c <__ssvfiscanf_r+0x60>
 800ba24:	2305      	movs	r3, #5
 800ba26:	e792      	b.n	800b94e <__ssvfiscanf_r+0x142>
 800ba28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba2a:	4621      	mov	r1, r4
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	4798      	blx	r3
 800ba30:	2800      	cmp	r0, #0
 800ba32:	d090      	beq.n	800b956 <__ssvfiscanf_r+0x14a>
 800ba34:	e7c8      	b.n	800b9c8 <__ssvfiscanf_r+0x1bc>
 800ba36:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ba38:	3201      	adds	r2, #1
 800ba3a:	9245      	str	r2, [sp, #276]	; 0x114
 800ba3c:	6862      	ldr	r2, [r4, #4]
 800ba3e:	3a01      	subs	r2, #1
 800ba40:	2a00      	cmp	r2, #0
 800ba42:	6062      	str	r2, [r4, #4]
 800ba44:	dd02      	ble.n	800ba4c <__ssvfiscanf_r+0x240>
 800ba46:	3301      	adds	r3, #1
 800ba48:	6023      	str	r3, [r4, #0]
 800ba4a:	e787      	b.n	800b95c <__ssvfiscanf_r+0x150>
 800ba4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba4e:	4621      	mov	r1, r4
 800ba50:	4630      	mov	r0, r6
 800ba52:	4798      	blx	r3
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d081      	beq.n	800b95c <__ssvfiscanf_r+0x150>
 800ba58:	e7b6      	b.n	800b9c8 <__ssvfiscanf_r+0x1bc>
 800ba5a:	2b04      	cmp	r3, #4
 800ba5c:	dc06      	bgt.n	800ba6c <__ssvfiscanf_r+0x260>
 800ba5e:	466b      	mov	r3, sp
 800ba60:	4622      	mov	r2, r4
 800ba62:	a941      	add	r1, sp, #260	; 0x104
 800ba64:	4630      	mov	r0, r6
 800ba66:	f000 fa0d 	bl	800be84 <_scanf_i>
 800ba6a:	e788      	b.n	800b97e <__ssvfiscanf_r+0x172>
 800ba6c:	4b0e      	ldr	r3, [pc, #56]	; (800baa8 <__ssvfiscanf_r+0x29c>)
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f43f aefc 	beq.w	800b86c <__ssvfiscanf_r+0x60>
 800ba74:	466b      	mov	r3, sp
 800ba76:	4622      	mov	r2, r4
 800ba78:	a941      	add	r1, sp, #260	; 0x104
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	f3af 8000 	nop.w
 800ba80:	e77d      	b.n	800b97e <__ssvfiscanf_r+0x172>
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ba88:	bf18      	it	ne
 800ba8a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800ba8e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800ba92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba96:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ba98:	e7f9      	b.n	800ba8e <__ssvfiscanf_r+0x282>
 800ba9a:	bf00      	nop
 800ba9c:	0800b759 	.word	0x0800b759
 800baa0:	0800b7d3 	.word	0x0800b7d3
 800baa4:	0800d22e 	.word	0x0800d22e
 800baa8:	00000000 	.word	0x00000000

0800baac <_printf_common>:
 800baac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab0:	4691      	mov	r9, r2
 800bab2:	461f      	mov	r7, r3
 800bab4:	688a      	ldr	r2, [r1, #8]
 800bab6:	690b      	ldr	r3, [r1, #16]
 800bab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800babc:	4293      	cmp	r3, r2
 800babe:	bfb8      	it	lt
 800bac0:	4613      	movlt	r3, r2
 800bac2:	f8c9 3000 	str.w	r3, [r9]
 800bac6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800baca:	4606      	mov	r6, r0
 800bacc:	460c      	mov	r4, r1
 800bace:	b112      	cbz	r2, 800bad6 <_printf_common+0x2a>
 800bad0:	3301      	adds	r3, #1
 800bad2:	f8c9 3000 	str.w	r3, [r9]
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	0699      	lsls	r1, r3, #26
 800bada:	bf42      	ittt	mi
 800badc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bae0:	3302      	addmi	r3, #2
 800bae2:	f8c9 3000 	strmi.w	r3, [r9]
 800bae6:	6825      	ldr	r5, [r4, #0]
 800bae8:	f015 0506 	ands.w	r5, r5, #6
 800baec:	d107      	bne.n	800bafe <_printf_common+0x52>
 800baee:	f104 0a19 	add.w	sl, r4, #25
 800baf2:	68e3      	ldr	r3, [r4, #12]
 800baf4:	f8d9 2000 	ldr.w	r2, [r9]
 800baf8:	1a9b      	subs	r3, r3, r2
 800bafa:	42ab      	cmp	r3, r5
 800bafc:	dc28      	bgt.n	800bb50 <_printf_common+0xa4>
 800bafe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bb02:	6822      	ldr	r2, [r4, #0]
 800bb04:	3300      	adds	r3, #0
 800bb06:	bf18      	it	ne
 800bb08:	2301      	movne	r3, #1
 800bb0a:	0692      	lsls	r2, r2, #26
 800bb0c:	d42d      	bmi.n	800bb6a <_printf_common+0xbe>
 800bb0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb12:	4639      	mov	r1, r7
 800bb14:	4630      	mov	r0, r6
 800bb16:	47c0      	blx	r8
 800bb18:	3001      	adds	r0, #1
 800bb1a:	d020      	beq.n	800bb5e <_printf_common+0xb2>
 800bb1c:	6823      	ldr	r3, [r4, #0]
 800bb1e:	68e5      	ldr	r5, [r4, #12]
 800bb20:	f8d9 2000 	ldr.w	r2, [r9]
 800bb24:	f003 0306 	and.w	r3, r3, #6
 800bb28:	2b04      	cmp	r3, #4
 800bb2a:	bf08      	it	eq
 800bb2c:	1aad      	subeq	r5, r5, r2
 800bb2e:	68a3      	ldr	r3, [r4, #8]
 800bb30:	6922      	ldr	r2, [r4, #16]
 800bb32:	bf0c      	ite	eq
 800bb34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb38:	2500      	movne	r5, #0
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	bfc4      	itt	gt
 800bb3e:	1a9b      	subgt	r3, r3, r2
 800bb40:	18ed      	addgt	r5, r5, r3
 800bb42:	f04f 0900 	mov.w	r9, #0
 800bb46:	341a      	adds	r4, #26
 800bb48:	454d      	cmp	r5, r9
 800bb4a:	d11a      	bne.n	800bb82 <_printf_common+0xd6>
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	e008      	b.n	800bb62 <_printf_common+0xb6>
 800bb50:	2301      	movs	r3, #1
 800bb52:	4652      	mov	r2, sl
 800bb54:	4639      	mov	r1, r7
 800bb56:	4630      	mov	r0, r6
 800bb58:	47c0      	blx	r8
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	d103      	bne.n	800bb66 <_printf_common+0xba>
 800bb5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb66:	3501      	adds	r5, #1
 800bb68:	e7c3      	b.n	800baf2 <_printf_common+0x46>
 800bb6a:	18e1      	adds	r1, r4, r3
 800bb6c:	1c5a      	adds	r2, r3, #1
 800bb6e:	2030      	movs	r0, #48	; 0x30
 800bb70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb74:	4422      	add	r2, r4
 800bb76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb7e:	3302      	adds	r3, #2
 800bb80:	e7c5      	b.n	800bb0e <_printf_common+0x62>
 800bb82:	2301      	movs	r3, #1
 800bb84:	4622      	mov	r2, r4
 800bb86:	4639      	mov	r1, r7
 800bb88:	4630      	mov	r0, r6
 800bb8a:	47c0      	blx	r8
 800bb8c:	3001      	adds	r0, #1
 800bb8e:	d0e6      	beq.n	800bb5e <_printf_common+0xb2>
 800bb90:	f109 0901 	add.w	r9, r9, #1
 800bb94:	e7d8      	b.n	800bb48 <_printf_common+0x9c>
	...

0800bb98 <_printf_i>:
 800bb98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bba0:	460c      	mov	r4, r1
 800bba2:	7e09      	ldrb	r1, [r1, #24]
 800bba4:	b085      	sub	sp, #20
 800bba6:	296e      	cmp	r1, #110	; 0x6e
 800bba8:	4617      	mov	r7, r2
 800bbaa:	4606      	mov	r6, r0
 800bbac:	4698      	mov	r8, r3
 800bbae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbb0:	f000 80b3 	beq.w	800bd1a <_printf_i+0x182>
 800bbb4:	d822      	bhi.n	800bbfc <_printf_i+0x64>
 800bbb6:	2963      	cmp	r1, #99	; 0x63
 800bbb8:	d036      	beq.n	800bc28 <_printf_i+0x90>
 800bbba:	d80a      	bhi.n	800bbd2 <_printf_i+0x3a>
 800bbbc:	2900      	cmp	r1, #0
 800bbbe:	f000 80b9 	beq.w	800bd34 <_printf_i+0x19c>
 800bbc2:	2958      	cmp	r1, #88	; 0x58
 800bbc4:	f000 8083 	beq.w	800bcce <_printf_i+0x136>
 800bbc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bbd0:	e032      	b.n	800bc38 <_printf_i+0xa0>
 800bbd2:	2964      	cmp	r1, #100	; 0x64
 800bbd4:	d001      	beq.n	800bbda <_printf_i+0x42>
 800bbd6:	2969      	cmp	r1, #105	; 0x69
 800bbd8:	d1f6      	bne.n	800bbc8 <_printf_i+0x30>
 800bbda:	6820      	ldr	r0, [r4, #0]
 800bbdc:	6813      	ldr	r3, [r2, #0]
 800bbde:	0605      	lsls	r5, r0, #24
 800bbe0:	f103 0104 	add.w	r1, r3, #4
 800bbe4:	d52a      	bpl.n	800bc3c <_printf_i+0xa4>
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	6011      	str	r1, [r2, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	da03      	bge.n	800bbf6 <_printf_i+0x5e>
 800bbee:	222d      	movs	r2, #45	; 0x2d
 800bbf0:	425b      	negs	r3, r3
 800bbf2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bbf6:	486f      	ldr	r0, [pc, #444]	; (800bdb4 <_printf_i+0x21c>)
 800bbf8:	220a      	movs	r2, #10
 800bbfa:	e039      	b.n	800bc70 <_printf_i+0xd8>
 800bbfc:	2973      	cmp	r1, #115	; 0x73
 800bbfe:	f000 809d 	beq.w	800bd3c <_printf_i+0x1a4>
 800bc02:	d808      	bhi.n	800bc16 <_printf_i+0x7e>
 800bc04:	296f      	cmp	r1, #111	; 0x6f
 800bc06:	d020      	beq.n	800bc4a <_printf_i+0xb2>
 800bc08:	2970      	cmp	r1, #112	; 0x70
 800bc0a:	d1dd      	bne.n	800bbc8 <_printf_i+0x30>
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	f043 0320 	orr.w	r3, r3, #32
 800bc12:	6023      	str	r3, [r4, #0]
 800bc14:	e003      	b.n	800bc1e <_printf_i+0x86>
 800bc16:	2975      	cmp	r1, #117	; 0x75
 800bc18:	d017      	beq.n	800bc4a <_printf_i+0xb2>
 800bc1a:	2978      	cmp	r1, #120	; 0x78
 800bc1c:	d1d4      	bne.n	800bbc8 <_printf_i+0x30>
 800bc1e:	2378      	movs	r3, #120	; 0x78
 800bc20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc24:	4864      	ldr	r0, [pc, #400]	; (800bdb8 <_printf_i+0x220>)
 800bc26:	e055      	b.n	800bcd4 <_printf_i+0x13c>
 800bc28:	6813      	ldr	r3, [r2, #0]
 800bc2a:	1d19      	adds	r1, r3, #4
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	6011      	str	r1, [r2, #0]
 800bc30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e08c      	b.n	800bd56 <_printf_i+0x1be>
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	6011      	str	r1, [r2, #0]
 800bc40:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc44:	bf18      	it	ne
 800bc46:	b21b      	sxthne	r3, r3
 800bc48:	e7cf      	b.n	800bbea <_printf_i+0x52>
 800bc4a:	6813      	ldr	r3, [r2, #0]
 800bc4c:	6825      	ldr	r5, [r4, #0]
 800bc4e:	1d18      	adds	r0, r3, #4
 800bc50:	6010      	str	r0, [r2, #0]
 800bc52:	0628      	lsls	r0, r5, #24
 800bc54:	d501      	bpl.n	800bc5a <_printf_i+0xc2>
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	e002      	b.n	800bc60 <_printf_i+0xc8>
 800bc5a:	0668      	lsls	r0, r5, #25
 800bc5c:	d5fb      	bpl.n	800bc56 <_printf_i+0xbe>
 800bc5e:	881b      	ldrh	r3, [r3, #0]
 800bc60:	4854      	ldr	r0, [pc, #336]	; (800bdb4 <_printf_i+0x21c>)
 800bc62:	296f      	cmp	r1, #111	; 0x6f
 800bc64:	bf14      	ite	ne
 800bc66:	220a      	movne	r2, #10
 800bc68:	2208      	moveq	r2, #8
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc70:	6865      	ldr	r5, [r4, #4]
 800bc72:	60a5      	str	r5, [r4, #8]
 800bc74:	2d00      	cmp	r5, #0
 800bc76:	f2c0 8095 	blt.w	800bda4 <_printf_i+0x20c>
 800bc7a:	6821      	ldr	r1, [r4, #0]
 800bc7c:	f021 0104 	bic.w	r1, r1, #4
 800bc80:	6021      	str	r1, [r4, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d13d      	bne.n	800bd02 <_printf_i+0x16a>
 800bc86:	2d00      	cmp	r5, #0
 800bc88:	f040 808e 	bne.w	800bda8 <_printf_i+0x210>
 800bc8c:	4665      	mov	r5, ip
 800bc8e:	2a08      	cmp	r2, #8
 800bc90:	d10b      	bne.n	800bcaa <_printf_i+0x112>
 800bc92:	6823      	ldr	r3, [r4, #0]
 800bc94:	07db      	lsls	r3, r3, #31
 800bc96:	d508      	bpl.n	800bcaa <_printf_i+0x112>
 800bc98:	6923      	ldr	r3, [r4, #16]
 800bc9a:	6862      	ldr	r2, [r4, #4]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	bfde      	ittt	le
 800bca0:	2330      	movle	r3, #48	; 0x30
 800bca2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bca6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bcaa:	ebac 0305 	sub.w	r3, ip, r5
 800bcae:	6123      	str	r3, [r4, #16]
 800bcb0:	f8cd 8000 	str.w	r8, [sp]
 800bcb4:	463b      	mov	r3, r7
 800bcb6:	aa03      	add	r2, sp, #12
 800bcb8:	4621      	mov	r1, r4
 800bcba:	4630      	mov	r0, r6
 800bcbc:	f7ff fef6 	bl	800baac <_printf_common>
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	d14d      	bne.n	800bd60 <_printf_i+0x1c8>
 800bcc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcc8:	b005      	add	sp, #20
 800bcca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcce:	4839      	ldr	r0, [pc, #228]	; (800bdb4 <_printf_i+0x21c>)
 800bcd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bcd4:	6813      	ldr	r3, [r2, #0]
 800bcd6:	6821      	ldr	r1, [r4, #0]
 800bcd8:	1d1d      	adds	r5, r3, #4
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	6015      	str	r5, [r2, #0]
 800bcde:	060a      	lsls	r2, r1, #24
 800bce0:	d50b      	bpl.n	800bcfa <_printf_i+0x162>
 800bce2:	07ca      	lsls	r2, r1, #31
 800bce4:	bf44      	itt	mi
 800bce6:	f041 0120 	orrmi.w	r1, r1, #32
 800bcea:	6021      	strmi	r1, [r4, #0]
 800bcec:	b91b      	cbnz	r3, 800bcf6 <_printf_i+0x15e>
 800bcee:	6822      	ldr	r2, [r4, #0]
 800bcf0:	f022 0220 	bic.w	r2, r2, #32
 800bcf4:	6022      	str	r2, [r4, #0]
 800bcf6:	2210      	movs	r2, #16
 800bcf8:	e7b7      	b.n	800bc6a <_printf_i+0xd2>
 800bcfa:	064d      	lsls	r5, r1, #25
 800bcfc:	bf48      	it	mi
 800bcfe:	b29b      	uxthmi	r3, r3
 800bd00:	e7ef      	b.n	800bce2 <_printf_i+0x14a>
 800bd02:	4665      	mov	r5, ip
 800bd04:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd08:	fb02 3311 	mls	r3, r2, r1, r3
 800bd0c:	5cc3      	ldrb	r3, [r0, r3]
 800bd0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bd12:	460b      	mov	r3, r1
 800bd14:	2900      	cmp	r1, #0
 800bd16:	d1f5      	bne.n	800bd04 <_printf_i+0x16c>
 800bd18:	e7b9      	b.n	800bc8e <_printf_i+0xf6>
 800bd1a:	6813      	ldr	r3, [r2, #0]
 800bd1c:	6825      	ldr	r5, [r4, #0]
 800bd1e:	6961      	ldr	r1, [r4, #20]
 800bd20:	1d18      	adds	r0, r3, #4
 800bd22:	6010      	str	r0, [r2, #0]
 800bd24:	0628      	lsls	r0, r5, #24
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	d501      	bpl.n	800bd2e <_printf_i+0x196>
 800bd2a:	6019      	str	r1, [r3, #0]
 800bd2c:	e002      	b.n	800bd34 <_printf_i+0x19c>
 800bd2e:	066a      	lsls	r2, r5, #25
 800bd30:	d5fb      	bpl.n	800bd2a <_printf_i+0x192>
 800bd32:	8019      	strh	r1, [r3, #0]
 800bd34:	2300      	movs	r3, #0
 800bd36:	6123      	str	r3, [r4, #16]
 800bd38:	4665      	mov	r5, ip
 800bd3a:	e7b9      	b.n	800bcb0 <_printf_i+0x118>
 800bd3c:	6813      	ldr	r3, [r2, #0]
 800bd3e:	1d19      	adds	r1, r3, #4
 800bd40:	6011      	str	r1, [r2, #0]
 800bd42:	681d      	ldr	r5, [r3, #0]
 800bd44:	6862      	ldr	r2, [r4, #4]
 800bd46:	2100      	movs	r1, #0
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f7f4 fa59 	bl	8000200 <memchr>
 800bd4e:	b108      	cbz	r0, 800bd54 <_printf_i+0x1bc>
 800bd50:	1b40      	subs	r0, r0, r5
 800bd52:	6060      	str	r0, [r4, #4]
 800bd54:	6863      	ldr	r3, [r4, #4]
 800bd56:	6123      	str	r3, [r4, #16]
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd5e:	e7a7      	b.n	800bcb0 <_printf_i+0x118>
 800bd60:	6923      	ldr	r3, [r4, #16]
 800bd62:	462a      	mov	r2, r5
 800bd64:	4639      	mov	r1, r7
 800bd66:	4630      	mov	r0, r6
 800bd68:	47c0      	blx	r8
 800bd6a:	3001      	adds	r0, #1
 800bd6c:	d0aa      	beq.n	800bcc4 <_printf_i+0x12c>
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	079b      	lsls	r3, r3, #30
 800bd72:	d413      	bmi.n	800bd9c <_printf_i+0x204>
 800bd74:	68e0      	ldr	r0, [r4, #12]
 800bd76:	9b03      	ldr	r3, [sp, #12]
 800bd78:	4298      	cmp	r0, r3
 800bd7a:	bfb8      	it	lt
 800bd7c:	4618      	movlt	r0, r3
 800bd7e:	e7a3      	b.n	800bcc8 <_printf_i+0x130>
 800bd80:	2301      	movs	r3, #1
 800bd82:	464a      	mov	r2, r9
 800bd84:	4639      	mov	r1, r7
 800bd86:	4630      	mov	r0, r6
 800bd88:	47c0      	blx	r8
 800bd8a:	3001      	adds	r0, #1
 800bd8c:	d09a      	beq.n	800bcc4 <_printf_i+0x12c>
 800bd8e:	3501      	adds	r5, #1
 800bd90:	68e3      	ldr	r3, [r4, #12]
 800bd92:	9a03      	ldr	r2, [sp, #12]
 800bd94:	1a9b      	subs	r3, r3, r2
 800bd96:	42ab      	cmp	r3, r5
 800bd98:	dcf2      	bgt.n	800bd80 <_printf_i+0x1e8>
 800bd9a:	e7eb      	b.n	800bd74 <_printf_i+0x1dc>
 800bd9c:	2500      	movs	r5, #0
 800bd9e:	f104 0919 	add.w	r9, r4, #25
 800bda2:	e7f5      	b.n	800bd90 <_printf_i+0x1f8>
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1ac      	bne.n	800bd02 <_printf_i+0x16a>
 800bda8:	7803      	ldrb	r3, [r0, #0]
 800bdaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdb2:	e76c      	b.n	800bc8e <_printf_i+0xf6>
 800bdb4:	0800d239 	.word	0x0800d239
 800bdb8:	0800d24a 	.word	0x0800d24a

0800bdbc <_scanf_chars>:
 800bdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc0:	4615      	mov	r5, r2
 800bdc2:	688a      	ldr	r2, [r1, #8]
 800bdc4:	4680      	mov	r8, r0
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	b932      	cbnz	r2, 800bdd8 <_scanf_chars+0x1c>
 800bdca:	698a      	ldr	r2, [r1, #24]
 800bdcc:	2a00      	cmp	r2, #0
 800bdce:	bf14      	ite	ne
 800bdd0:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800bdd4:	2201      	moveq	r2, #1
 800bdd6:	608a      	str	r2, [r1, #8]
 800bdd8:	6822      	ldr	r2, [r4, #0]
 800bdda:	06d1      	lsls	r1, r2, #27
 800bddc:	bf5f      	itttt	pl
 800bdde:	681a      	ldrpl	r2, [r3, #0]
 800bde0:	1d11      	addpl	r1, r2, #4
 800bde2:	6019      	strpl	r1, [r3, #0]
 800bde4:	6817      	ldrpl	r7, [r2, #0]
 800bde6:	2600      	movs	r6, #0
 800bde8:	69a3      	ldr	r3, [r4, #24]
 800bdea:	b1db      	cbz	r3, 800be24 <_scanf_chars+0x68>
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d107      	bne.n	800be00 <_scanf_chars+0x44>
 800bdf0:	682b      	ldr	r3, [r5, #0]
 800bdf2:	6962      	ldr	r2, [r4, #20]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	5cd3      	ldrb	r3, [r2, r3]
 800bdf8:	b9a3      	cbnz	r3, 800be24 <_scanf_chars+0x68>
 800bdfa:	2e00      	cmp	r6, #0
 800bdfc:	d132      	bne.n	800be64 <_scanf_chars+0xa8>
 800bdfe:	e006      	b.n	800be0e <_scanf_chars+0x52>
 800be00:	2b02      	cmp	r3, #2
 800be02:	d007      	beq.n	800be14 <_scanf_chars+0x58>
 800be04:	2e00      	cmp	r6, #0
 800be06:	d12d      	bne.n	800be64 <_scanf_chars+0xa8>
 800be08:	69a3      	ldr	r3, [r4, #24]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d12a      	bne.n	800be64 <_scanf_chars+0xa8>
 800be0e:	2001      	movs	r0, #1
 800be10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be14:	f000 fab6 	bl	800c384 <__locale_ctype_ptr>
 800be18:	682b      	ldr	r3, [r5, #0]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	4418      	add	r0, r3
 800be1e:	7843      	ldrb	r3, [r0, #1]
 800be20:	071b      	lsls	r3, r3, #28
 800be22:	d4ef      	bmi.n	800be04 <_scanf_chars+0x48>
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	06da      	lsls	r2, r3, #27
 800be28:	bf5e      	ittt	pl
 800be2a:	682b      	ldrpl	r3, [r5, #0]
 800be2c:	781b      	ldrbpl	r3, [r3, #0]
 800be2e:	703b      	strbpl	r3, [r7, #0]
 800be30:	682a      	ldr	r2, [r5, #0]
 800be32:	686b      	ldr	r3, [r5, #4]
 800be34:	f102 0201 	add.w	r2, r2, #1
 800be38:	602a      	str	r2, [r5, #0]
 800be3a:	68a2      	ldr	r2, [r4, #8]
 800be3c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800be40:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800be44:	606b      	str	r3, [r5, #4]
 800be46:	f106 0601 	add.w	r6, r6, #1
 800be4a:	bf58      	it	pl
 800be4c:	3701      	addpl	r7, #1
 800be4e:	60a2      	str	r2, [r4, #8]
 800be50:	b142      	cbz	r2, 800be64 <_scanf_chars+0xa8>
 800be52:	2b00      	cmp	r3, #0
 800be54:	dcc8      	bgt.n	800bde8 <_scanf_chars+0x2c>
 800be56:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800be5a:	4629      	mov	r1, r5
 800be5c:	4640      	mov	r0, r8
 800be5e:	4798      	blx	r3
 800be60:	2800      	cmp	r0, #0
 800be62:	d0c1      	beq.n	800bde8 <_scanf_chars+0x2c>
 800be64:	6823      	ldr	r3, [r4, #0]
 800be66:	f013 0310 	ands.w	r3, r3, #16
 800be6a:	d105      	bne.n	800be78 <_scanf_chars+0xbc>
 800be6c:	68e2      	ldr	r2, [r4, #12]
 800be6e:	3201      	adds	r2, #1
 800be70:	60e2      	str	r2, [r4, #12]
 800be72:	69a2      	ldr	r2, [r4, #24]
 800be74:	b102      	cbz	r2, 800be78 <_scanf_chars+0xbc>
 800be76:	703b      	strb	r3, [r7, #0]
 800be78:	6923      	ldr	r3, [r4, #16]
 800be7a:	441e      	add	r6, r3
 800be7c:	6126      	str	r6, [r4, #16]
 800be7e:	2000      	movs	r0, #0
 800be80:	e7c6      	b.n	800be10 <_scanf_chars+0x54>
	...

0800be84 <_scanf_i>:
 800be84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be88:	469a      	mov	sl, r3
 800be8a:	4b74      	ldr	r3, [pc, #464]	; (800c05c <_scanf_i+0x1d8>)
 800be8c:	460c      	mov	r4, r1
 800be8e:	4683      	mov	fp, r0
 800be90:	4616      	mov	r6, r2
 800be92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be96:	b087      	sub	sp, #28
 800be98:	ab03      	add	r3, sp, #12
 800be9a:	68a7      	ldr	r7, [r4, #8]
 800be9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bea0:	4b6f      	ldr	r3, [pc, #444]	; (800c060 <_scanf_i+0x1dc>)
 800bea2:	69a1      	ldr	r1, [r4, #24]
 800bea4:	4a6f      	ldr	r2, [pc, #444]	; (800c064 <_scanf_i+0x1e0>)
 800bea6:	2903      	cmp	r1, #3
 800bea8:	bf08      	it	eq
 800beaa:	461a      	moveq	r2, r3
 800beac:	1e7b      	subs	r3, r7, #1
 800beae:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800beb2:	bf84      	itt	hi
 800beb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800beb8:	60a3      	strhi	r3, [r4, #8]
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	9200      	str	r2, [sp, #0]
 800bebe:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bec2:	bf88      	it	hi
 800bec4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bec8:	f104 091c 	add.w	r9, r4, #28
 800becc:	6023      	str	r3, [r4, #0]
 800bece:	bf8c      	ite	hi
 800bed0:	197f      	addhi	r7, r7, r5
 800bed2:	2700      	movls	r7, #0
 800bed4:	464b      	mov	r3, r9
 800bed6:	f04f 0800 	mov.w	r8, #0
 800beda:	9301      	str	r3, [sp, #4]
 800bedc:	6831      	ldr	r1, [r6, #0]
 800bede:	ab03      	add	r3, sp, #12
 800bee0:	2202      	movs	r2, #2
 800bee2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bee6:	7809      	ldrb	r1, [r1, #0]
 800bee8:	f7f4 f98a 	bl	8000200 <memchr>
 800beec:	9b01      	ldr	r3, [sp, #4]
 800beee:	b330      	cbz	r0, 800bf3e <_scanf_i+0xba>
 800bef0:	f1b8 0f01 	cmp.w	r8, #1
 800bef4:	d15a      	bne.n	800bfac <_scanf_i+0x128>
 800bef6:	6862      	ldr	r2, [r4, #4]
 800bef8:	b92a      	cbnz	r2, 800bf06 <_scanf_i+0x82>
 800befa:	6822      	ldr	r2, [r4, #0]
 800befc:	2108      	movs	r1, #8
 800befe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf02:	6061      	str	r1, [r4, #4]
 800bf04:	6022      	str	r2, [r4, #0]
 800bf06:	6822      	ldr	r2, [r4, #0]
 800bf08:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bf0c:	6022      	str	r2, [r4, #0]
 800bf0e:	68a2      	ldr	r2, [r4, #8]
 800bf10:	1e51      	subs	r1, r2, #1
 800bf12:	60a1      	str	r1, [r4, #8]
 800bf14:	b19a      	cbz	r2, 800bf3e <_scanf_i+0xba>
 800bf16:	6832      	ldr	r2, [r6, #0]
 800bf18:	1c51      	adds	r1, r2, #1
 800bf1a:	6031      	str	r1, [r6, #0]
 800bf1c:	7812      	ldrb	r2, [r2, #0]
 800bf1e:	701a      	strb	r2, [r3, #0]
 800bf20:	1c5d      	adds	r5, r3, #1
 800bf22:	6873      	ldr	r3, [r6, #4]
 800bf24:	3b01      	subs	r3, #1
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	6073      	str	r3, [r6, #4]
 800bf2a:	dc07      	bgt.n	800bf3c <_scanf_i+0xb8>
 800bf2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bf30:	4631      	mov	r1, r6
 800bf32:	4658      	mov	r0, fp
 800bf34:	4798      	blx	r3
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f040 8086 	bne.w	800c048 <_scanf_i+0x1c4>
 800bf3c:	462b      	mov	r3, r5
 800bf3e:	f108 0801 	add.w	r8, r8, #1
 800bf42:	f1b8 0f03 	cmp.w	r8, #3
 800bf46:	d1c8      	bne.n	800beda <_scanf_i+0x56>
 800bf48:	6862      	ldr	r2, [r4, #4]
 800bf4a:	b90a      	cbnz	r2, 800bf50 <_scanf_i+0xcc>
 800bf4c:	220a      	movs	r2, #10
 800bf4e:	6062      	str	r2, [r4, #4]
 800bf50:	6862      	ldr	r2, [r4, #4]
 800bf52:	4945      	ldr	r1, [pc, #276]	; (800c068 <_scanf_i+0x1e4>)
 800bf54:	6960      	ldr	r0, [r4, #20]
 800bf56:	9301      	str	r3, [sp, #4]
 800bf58:	1a89      	subs	r1, r1, r2
 800bf5a:	f000 f887 	bl	800c06c <__sccl>
 800bf5e:	9b01      	ldr	r3, [sp, #4]
 800bf60:	f04f 0800 	mov.w	r8, #0
 800bf64:	461d      	mov	r5, r3
 800bf66:	68a3      	ldr	r3, [r4, #8]
 800bf68:	6822      	ldr	r2, [r4, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d03a      	beq.n	800bfe4 <_scanf_i+0x160>
 800bf6e:	6831      	ldr	r1, [r6, #0]
 800bf70:	6960      	ldr	r0, [r4, #20]
 800bf72:	f891 c000 	ldrb.w	ip, [r1]
 800bf76:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d032      	beq.n	800bfe4 <_scanf_i+0x160>
 800bf7e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bf82:	d121      	bne.n	800bfc8 <_scanf_i+0x144>
 800bf84:	0510      	lsls	r0, r2, #20
 800bf86:	d51f      	bpl.n	800bfc8 <_scanf_i+0x144>
 800bf88:	f108 0801 	add.w	r8, r8, #1
 800bf8c:	b117      	cbz	r7, 800bf94 <_scanf_i+0x110>
 800bf8e:	3301      	adds	r3, #1
 800bf90:	3f01      	subs	r7, #1
 800bf92:	60a3      	str	r3, [r4, #8]
 800bf94:	6873      	ldr	r3, [r6, #4]
 800bf96:	3b01      	subs	r3, #1
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	6073      	str	r3, [r6, #4]
 800bf9c:	dd1b      	ble.n	800bfd6 <_scanf_i+0x152>
 800bf9e:	6833      	ldr	r3, [r6, #0]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	6033      	str	r3, [r6, #0]
 800bfa4:	68a3      	ldr	r3, [r4, #8]
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	60a3      	str	r3, [r4, #8]
 800bfaa:	e7dc      	b.n	800bf66 <_scanf_i+0xe2>
 800bfac:	f1b8 0f02 	cmp.w	r8, #2
 800bfb0:	d1ad      	bne.n	800bf0e <_scanf_i+0x8a>
 800bfb2:	6822      	ldr	r2, [r4, #0]
 800bfb4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bfb8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bfbc:	d1bf      	bne.n	800bf3e <_scanf_i+0xba>
 800bfbe:	2110      	movs	r1, #16
 800bfc0:	6061      	str	r1, [r4, #4]
 800bfc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bfc6:	e7a1      	b.n	800bf0c <_scanf_i+0x88>
 800bfc8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bfcc:	6022      	str	r2, [r4, #0]
 800bfce:	780b      	ldrb	r3, [r1, #0]
 800bfd0:	702b      	strb	r3, [r5, #0]
 800bfd2:	3501      	adds	r5, #1
 800bfd4:	e7de      	b.n	800bf94 <_scanf_i+0x110>
 800bfd6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bfda:	4631      	mov	r1, r6
 800bfdc:	4658      	mov	r0, fp
 800bfde:	4798      	blx	r3
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	d0df      	beq.n	800bfa4 <_scanf_i+0x120>
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	05d9      	lsls	r1, r3, #23
 800bfe8:	d50c      	bpl.n	800c004 <_scanf_i+0x180>
 800bfea:	454d      	cmp	r5, r9
 800bfec:	d908      	bls.n	800c000 <_scanf_i+0x17c>
 800bfee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bff6:	4632      	mov	r2, r6
 800bff8:	4658      	mov	r0, fp
 800bffa:	4798      	blx	r3
 800bffc:	1e6f      	subs	r7, r5, #1
 800bffe:	463d      	mov	r5, r7
 800c000:	454d      	cmp	r5, r9
 800c002:	d029      	beq.n	800c058 <_scanf_i+0x1d4>
 800c004:	6822      	ldr	r2, [r4, #0]
 800c006:	f012 0210 	ands.w	r2, r2, #16
 800c00a:	d113      	bne.n	800c034 <_scanf_i+0x1b0>
 800c00c:	702a      	strb	r2, [r5, #0]
 800c00e:	6863      	ldr	r3, [r4, #4]
 800c010:	9e00      	ldr	r6, [sp, #0]
 800c012:	4649      	mov	r1, r9
 800c014:	4658      	mov	r0, fp
 800c016:	47b0      	blx	r6
 800c018:	f8da 3000 	ldr.w	r3, [sl]
 800c01c:	6821      	ldr	r1, [r4, #0]
 800c01e:	1d1a      	adds	r2, r3, #4
 800c020:	f8ca 2000 	str.w	r2, [sl]
 800c024:	f011 0f20 	tst.w	r1, #32
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	d010      	beq.n	800c04e <_scanf_i+0x1ca>
 800c02c:	6018      	str	r0, [r3, #0]
 800c02e:	68e3      	ldr	r3, [r4, #12]
 800c030:	3301      	adds	r3, #1
 800c032:	60e3      	str	r3, [r4, #12]
 800c034:	eba5 0509 	sub.w	r5, r5, r9
 800c038:	44a8      	add	r8, r5
 800c03a:	6925      	ldr	r5, [r4, #16]
 800c03c:	4445      	add	r5, r8
 800c03e:	6125      	str	r5, [r4, #16]
 800c040:	2000      	movs	r0, #0
 800c042:	b007      	add	sp, #28
 800c044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c048:	f04f 0800 	mov.w	r8, #0
 800c04c:	e7ca      	b.n	800bfe4 <_scanf_i+0x160>
 800c04e:	07ca      	lsls	r2, r1, #31
 800c050:	bf4c      	ite	mi
 800c052:	8018      	strhmi	r0, [r3, #0]
 800c054:	6018      	strpl	r0, [r3, #0]
 800c056:	e7ea      	b.n	800c02e <_scanf_i+0x1aa>
 800c058:	2001      	movs	r0, #1
 800c05a:	e7f2      	b.n	800c042 <_scanf_i+0x1be>
 800c05c:	0800d204 	.word	0x0800d204
 800c060:	0800c1cd 	.word	0x0800c1cd
 800c064:	0800c2e5 	.word	0x0800c2e5
 800c068:	0800d26b 	.word	0x0800d26b

0800c06c <__sccl>:
 800c06c:	b570      	push	{r4, r5, r6, lr}
 800c06e:	780b      	ldrb	r3, [r1, #0]
 800c070:	2b5e      	cmp	r3, #94	; 0x5e
 800c072:	bf13      	iteet	ne
 800c074:	1c4a      	addne	r2, r1, #1
 800c076:	1c8a      	addeq	r2, r1, #2
 800c078:	784b      	ldrbeq	r3, [r1, #1]
 800c07a:	2100      	movne	r1, #0
 800c07c:	bf08      	it	eq
 800c07e:	2101      	moveq	r1, #1
 800c080:	1e44      	subs	r4, r0, #1
 800c082:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800c086:	f804 1f01 	strb.w	r1, [r4, #1]!
 800c08a:	42ac      	cmp	r4, r5
 800c08c:	d1fb      	bne.n	800c086 <__sccl+0x1a>
 800c08e:	b913      	cbnz	r3, 800c096 <__sccl+0x2a>
 800c090:	3a01      	subs	r2, #1
 800c092:	4610      	mov	r0, r2
 800c094:	bd70      	pop	{r4, r5, r6, pc}
 800c096:	f081 0401 	eor.w	r4, r1, #1
 800c09a:	54c4      	strb	r4, [r0, r3]
 800c09c:	1c51      	adds	r1, r2, #1
 800c09e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800c0a2:	2d2d      	cmp	r5, #45	; 0x2d
 800c0a4:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 800c0a8:	460a      	mov	r2, r1
 800c0aa:	d006      	beq.n	800c0ba <__sccl+0x4e>
 800c0ac:	2d5d      	cmp	r5, #93	; 0x5d
 800c0ae:	d0f0      	beq.n	800c092 <__sccl+0x26>
 800c0b0:	b90d      	cbnz	r5, 800c0b6 <__sccl+0x4a>
 800c0b2:	4632      	mov	r2, r6
 800c0b4:	e7ed      	b.n	800c092 <__sccl+0x26>
 800c0b6:	462b      	mov	r3, r5
 800c0b8:	e7ef      	b.n	800c09a <__sccl+0x2e>
 800c0ba:	780e      	ldrb	r6, [r1, #0]
 800c0bc:	2e5d      	cmp	r6, #93	; 0x5d
 800c0be:	d0fa      	beq.n	800c0b6 <__sccl+0x4a>
 800c0c0:	42b3      	cmp	r3, r6
 800c0c2:	dcf8      	bgt.n	800c0b6 <__sccl+0x4a>
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	429e      	cmp	r6, r3
 800c0c8:	54c4      	strb	r4, [r0, r3]
 800c0ca:	dcfb      	bgt.n	800c0c4 <__sccl+0x58>
 800c0cc:	3102      	adds	r1, #2
 800c0ce:	e7e6      	b.n	800c09e <__sccl+0x32>

0800c0d0 <__seofread>:
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	4770      	bx	lr

0800c0d4 <_strtol_l.isra.0>:
 800c0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d8:	4680      	mov	r8, r0
 800c0da:	4689      	mov	r9, r1
 800c0dc:	4692      	mov	sl, r2
 800c0de:	461e      	mov	r6, r3
 800c0e0:	460f      	mov	r7, r1
 800c0e2:	463d      	mov	r5, r7
 800c0e4:	9808      	ldr	r0, [sp, #32]
 800c0e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0ea:	f000 f947 	bl	800c37c <__locale_ctype_ptr_l>
 800c0ee:	4420      	add	r0, r4
 800c0f0:	7843      	ldrb	r3, [r0, #1]
 800c0f2:	f013 0308 	ands.w	r3, r3, #8
 800c0f6:	d132      	bne.n	800c15e <_strtol_l.isra.0+0x8a>
 800c0f8:	2c2d      	cmp	r4, #45	; 0x2d
 800c0fa:	d132      	bne.n	800c162 <_strtol_l.isra.0+0x8e>
 800c0fc:	787c      	ldrb	r4, [r7, #1]
 800c0fe:	1cbd      	adds	r5, r7, #2
 800c100:	2201      	movs	r2, #1
 800c102:	2e00      	cmp	r6, #0
 800c104:	d05d      	beq.n	800c1c2 <_strtol_l.isra.0+0xee>
 800c106:	2e10      	cmp	r6, #16
 800c108:	d109      	bne.n	800c11e <_strtol_l.isra.0+0x4a>
 800c10a:	2c30      	cmp	r4, #48	; 0x30
 800c10c:	d107      	bne.n	800c11e <_strtol_l.isra.0+0x4a>
 800c10e:	782b      	ldrb	r3, [r5, #0]
 800c110:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c114:	2b58      	cmp	r3, #88	; 0x58
 800c116:	d14f      	bne.n	800c1b8 <_strtol_l.isra.0+0xe4>
 800c118:	786c      	ldrb	r4, [r5, #1]
 800c11a:	2610      	movs	r6, #16
 800c11c:	3502      	adds	r5, #2
 800c11e:	2a00      	cmp	r2, #0
 800c120:	bf14      	ite	ne
 800c122:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c126:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c12a:	2700      	movs	r7, #0
 800c12c:	fbb1 fcf6 	udiv	ip, r1, r6
 800c130:	4638      	mov	r0, r7
 800c132:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c136:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c13a:	2b09      	cmp	r3, #9
 800c13c:	d817      	bhi.n	800c16e <_strtol_l.isra.0+0x9a>
 800c13e:	461c      	mov	r4, r3
 800c140:	42a6      	cmp	r6, r4
 800c142:	dd23      	ble.n	800c18c <_strtol_l.isra.0+0xb8>
 800c144:	1c7b      	adds	r3, r7, #1
 800c146:	d007      	beq.n	800c158 <_strtol_l.isra.0+0x84>
 800c148:	4584      	cmp	ip, r0
 800c14a:	d31c      	bcc.n	800c186 <_strtol_l.isra.0+0xb2>
 800c14c:	d101      	bne.n	800c152 <_strtol_l.isra.0+0x7e>
 800c14e:	45a6      	cmp	lr, r4
 800c150:	db19      	blt.n	800c186 <_strtol_l.isra.0+0xb2>
 800c152:	fb00 4006 	mla	r0, r0, r6, r4
 800c156:	2701      	movs	r7, #1
 800c158:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c15c:	e7eb      	b.n	800c136 <_strtol_l.isra.0+0x62>
 800c15e:	462f      	mov	r7, r5
 800c160:	e7bf      	b.n	800c0e2 <_strtol_l.isra.0+0xe>
 800c162:	2c2b      	cmp	r4, #43	; 0x2b
 800c164:	bf04      	itt	eq
 800c166:	1cbd      	addeq	r5, r7, #2
 800c168:	787c      	ldrbeq	r4, [r7, #1]
 800c16a:	461a      	mov	r2, r3
 800c16c:	e7c9      	b.n	800c102 <_strtol_l.isra.0+0x2e>
 800c16e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c172:	2b19      	cmp	r3, #25
 800c174:	d801      	bhi.n	800c17a <_strtol_l.isra.0+0xa6>
 800c176:	3c37      	subs	r4, #55	; 0x37
 800c178:	e7e2      	b.n	800c140 <_strtol_l.isra.0+0x6c>
 800c17a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c17e:	2b19      	cmp	r3, #25
 800c180:	d804      	bhi.n	800c18c <_strtol_l.isra.0+0xb8>
 800c182:	3c57      	subs	r4, #87	; 0x57
 800c184:	e7dc      	b.n	800c140 <_strtol_l.isra.0+0x6c>
 800c186:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c18a:	e7e5      	b.n	800c158 <_strtol_l.isra.0+0x84>
 800c18c:	1c7b      	adds	r3, r7, #1
 800c18e:	d108      	bne.n	800c1a2 <_strtol_l.isra.0+0xce>
 800c190:	2322      	movs	r3, #34	; 0x22
 800c192:	f8c8 3000 	str.w	r3, [r8]
 800c196:	4608      	mov	r0, r1
 800c198:	f1ba 0f00 	cmp.w	sl, #0
 800c19c:	d107      	bne.n	800c1ae <_strtol_l.isra.0+0xda>
 800c19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1a2:	b102      	cbz	r2, 800c1a6 <_strtol_l.isra.0+0xd2>
 800c1a4:	4240      	negs	r0, r0
 800c1a6:	f1ba 0f00 	cmp.w	sl, #0
 800c1aa:	d0f8      	beq.n	800c19e <_strtol_l.isra.0+0xca>
 800c1ac:	b10f      	cbz	r7, 800c1b2 <_strtol_l.isra.0+0xde>
 800c1ae:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c1b2:	f8ca 9000 	str.w	r9, [sl]
 800c1b6:	e7f2      	b.n	800c19e <_strtol_l.isra.0+0xca>
 800c1b8:	2430      	movs	r4, #48	; 0x30
 800c1ba:	2e00      	cmp	r6, #0
 800c1bc:	d1af      	bne.n	800c11e <_strtol_l.isra.0+0x4a>
 800c1be:	2608      	movs	r6, #8
 800c1c0:	e7ad      	b.n	800c11e <_strtol_l.isra.0+0x4a>
 800c1c2:	2c30      	cmp	r4, #48	; 0x30
 800c1c4:	d0a3      	beq.n	800c10e <_strtol_l.isra.0+0x3a>
 800c1c6:	260a      	movs	r6, #10
 800c1c8:	e7a9      	b.n	800c11e <_strtol_l.isra.0+0x4a>
	...

0800c1cc <_strtol_r>:
 800c1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1ce:	4c06      	ldr	r4, [pc, #24]	; (800c1e8 <_strtol_r+0x1c>)
 800c1d0:	4d06      	ldr	r5, [pc, #24]	; (800c1ec <_strtol_r+0x20>)
 800c1d2:	6824      	ldr	r4, [r4, #0]
 800c1d4:	6a24      	ldr	r4, [r4, #32]
 800c1d6:	2c00      	cmp	r4, #0
 800c1d8:	bf08      	it	eq
 800c1da:	462c      	moveq	r4, r5
 800c1dc:	9400      	str	r4, [sp, #0]
 800c1de:	f7ff ff79 	bl	800c0d4 <_strtol_l.isra.0>
 800c1e2:	b003      	add	sp, #12
 800c1e4:	bd30      	pop	{r4, r5, pc}
 800c1e6:	bf00      	nop
 800c1e8:	2000058c 	.word	0x2000058c
 800c1ec:	200005f0 	.word	0x200005f0

0800c1f0 <_strtoul_l.isra.0>:
 800c1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f4:	4680      	mov	r8, r0
 800c1f6:	4689      	mov	r9, r1
 800c1f8:	4692      	mov	sl, r2
 800c1fa:	461e      	mov	r6, r3
 800c1fc:	460f      	mov	r7, r1
 800c1fe:	463d      	mov	r5, r7
 800c200:	9808      	ldr	r0, [sp, #32]
 800c202:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c206:	f000 f8b9 	bl	800c37c <__locale_ctype_ptr_l>
 800c20a:	4420      	add	r0, r4
 800c20c:	7843      	ldrb	r3, [r0, #1]
 800c20e:	f013 0308 	ands.w	r3, r3, #8
 800c212:	d130      	bne.n	800c276 <_strtoul_l.isra.0+0x86>
 800c214:	2c2d      	cmp	r4, #45	; 0x2d
 800c216:	d130      	bne.n	800c27a <_strtoul_l.isra.0+0x8a>
 800c218:	787c      	ldrb	r4, [r7, #1]
 800c21a:	1cbd      	adds	r5, r7, #2
 800c21c:	2101      	movs	r1, #1
 800c21e:	2e00      	cmp	r6, #0
 800c220:	d05c      	beq.n	800c2dc <_strtoul_l.isra.0+0xec>
 800c222:	2e10      	cmp	r6, #16
 800c224:	d109      	bne.n	800c23a <_strtoul_l.isra.0+0x4a>
 800c226:	2c30      	cmp	r4, #48	; 0x30
 800c228:	d107      	bne.n	800c23a <_strtoul_l.isra.0+0x4a>
 800c22a:	782b      	ldrb	r3, [r5, #0]
 800c22c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c230:	2b58      	cmp	r3, #88	; 0x58
 800c232:	d14e      	bne.n	800c2d2 <_strtoul_l.isra.0+0xe2>
 800c234:	786c      	ldrb	r4, [r5, #1]
 800c236:	2610      	movs	r6, #16
 800c238:	3502      	adds	r5, #2
 800c23a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c23e:	2300      	movs	r3, #0
 800c240:	fbb2 f2f6 	udiv	r2, r2, r6
 800c244:	fb06 fc02 	mul.w	ip, r6, r2
 800c248:	ea6f 0c0c 	mvn.w	ip, ip
 800c24c:	4618      	mov	r0, r3
 800c24e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c252:	2f09      	cmp	r7, #9
 800c254:	d817      	bhi.n	800c286 <_strtoul_l.isra.0+0x96>
 800c256:	463c      	mov	r4, r7
 800c258:	42a6      	cmp	r6, r4
 800c25a:	dd23      	ble.n	800c2a4 <_strtoul_l.isra.0+0xb4>
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	db1e      	blt.n	800c29e <_strtoul_l.isra.0+0xae>
 800c260:	4282      	cmp	r2, r0
 800c262:	d31c      	bcc.n	800c29e <_strtoul_l.isra.0+0xae>
 800c264:	d101      	bne.n	800c26a <_strtoul_l.isra.0+0x7a>
 800c266:	45a4      	cmp	ip, r4
 800c268:	db19      	blt.n	800c29e <_strtoul_l.isra.0+0xae>
 800c26a:	fb00 4006 	mla	r0, r0, r6, r4
 800c26e:	2301      	movs	r3, #1
 800c270:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c274:	e7eb      	b.n	800c24e <_strtoul_l.isra.0+0x5e>
 800c276:	462f      	mov	r7, r5
 800c278:	e7c1      	b.n	800c1fe <_strtoul_l.isra.0+0xe>
 800c27a:	2c2b      	cmp	r4, #43	; 0x2b
 800c27c:	bf04      	itt	eq
 800c27e:	1cbd      	addeq	r5, r7, #2
 800c280:	787c      	ldrbeq	r4, [r7, #1]
 800c282:	4619      	mov	r1, r3
 800c284:	e7cb      	b.n	800c21e <_strtoul_l.isra.0+0x2e>
 800c286:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c28a:	2f19      	cmp	r7, #25
 800c28c:	d801      	bhi.n	800c292 <_strtoul_l.isra.0+0xa2>
 800c28e:	3c37      	subs	r4, #55	; 0x37
 800c290:	e7e2      	b.n	800c258 <_strtoul_l.isra.0+0x68>
 800c292:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c296:	2f19      	cmp	r7, #25
 800c298:	d804      	bhi.n	800c2a4 <_strtoul_l.isra.0+0xb4>
 800c29a:	3c57      	subs	r4, #87	; 0x57
 800c29c:	e7dc      	b.n	800c258 <_strtoul_l.isra.0+0x68>
 800c29e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2a2:	e7e5      	b.n	800c270 <_strtoul_l.isra.0+0x80>
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	da09      	bge.n	800c2bc <_strtoul_l.isra.0+0xcc>
 800c2a8:	2322      	movs	r3, #34	; 0x22
 800c2aa:	f8c8 3000 	str.w	r3, [r8]
 800c2ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2b2:	f1ba 0f00 	cmp.w	sl, #0
 800c2b6:	d107      	bne.n	800c2c8 <_strtoul_l.isra.0+0xd8>
 800c2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2bc:	b101      	cbz	r1, 800c2c0 <_strtoul_l.isra.0+0xd0>
 800c2be:	4240      	negs	r0, r0
 800c2c0:	f1ba 0f00 	cmp.w	sl, #0
 800c2c4:	d0f8      	beq.n	800c2b8 <_strtoul_l.isra.0+0xc8>
 800c2c6:	b10b      	cbz	r3, 800c2cc <_strtoul_l.isra.0+0xdc>
 800c2c8:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c2cc:	f8ca 9000 	str.w	r9, [sl]
 800c2d0:	e7f2      	b.n	800c2b8 <_strtoul_l.isra.0+0xc8>
 800c2d2:	2430      	movs	r4, #48	; 0x30
 800c2d4:	2e00      	cmp	r6, #0
 800c2d6:	d1b0      	bne.n	800c23a <_strtoul_l.isra.0+0x4a>
 800c2d8:	2608      	movs	r6, #8
 800c2da:	e7ae      	b.n	800c23a <_strtoul_l.isra.0+0x4a>
 800c2dc:	2c30      	cmp	r4, #48	; 0x30
 800c2de:	d0a4      	beq.n	800c22a <_strtoul_l.isra.0+0x3a>
 800c2e0:	260a      	movs	r6, #10
 800c2e2:	e7aa      	b.n	800c23a <_strtoul_l.isra.0+0x4a>

0800c2e4 <_strtoul_r>:
 800c2e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2e6:	4c06      	ldr	r4, [pc, #24]	; (800c300 <_strtoul_r+0x1c>)
 800c2e8:	4d06      	ldr	r5, [pc, #24]	; (800c304 <_strtoul_r+0x20>)
 800c2ea:	6824      	ldr	r4, [r4, #0]
 800c2ec:	6a24      	ldr	r4, [r4, #32]
 800c2ee:	2c00      	cmp	r4, #0
 800c2f0:	bf08      	it	eq
 800c2f2:	462c      	moveq	r4, r5
 800c2f4:	9400      	str	r4, [sp, #0]
 800c2f6:	f7ff ff7b 	bl	800c1f0 <_strtoul_l.isra.0>
 800c2fa:	b003      	add	sp, #12
 800c2fc:	bd30      	pop	{r4, r5, pc}
 800c2fe:	bf00      	nop
 800c300:	2000058c 	.word	0x2000058c
 800c304:	200005f0 	.word	0x200005f0

0800c308 <__submore>:
 800c308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c30c:	460c      	mov	r4, r1
 800c30e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c314:	4299      	cmp	r1, r3
 800c316:	d11d      	bne.n	800c354 <__submore+0x4c>
 800c318:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c31c:	f7fe fff0 	bl	800b300 <_malloc_r>
 800c320:	b918      	cbnz	r0, 800c32a <__submore+0x22>
 800c322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c32a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c32e:	63a3      	str	r3, [r4, #56]	; 0x38
 800c330:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c334:	6360      	str	r0, [r4, #52]	; 0x34
 800c336:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c33a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c33e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c342:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c346:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c34a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c34e:	6020      	str	r0, [r4, #0]
 800c350:	2000      	movs	r0, #0
 800c352:	e7e8      	b.n	800c326 <__submore+0x1e>
 800c354:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c356:	0077      	lsls	r7, r6, #1
 800c358:	463a      	mov	r2, r7
 800c35a:	f000 f84c 	bl	800c3f6 <_realloc_r>
 800c35e:	4605      	mov	r5, r0
 800c360:	2800      	cmp	r0, #0
 800c362:	d0de      	beq.n	800c322 <__submore+0x1a>
 800c364:	eb00 0806 	add.w	r8, r0, r6
 800c368:	4601      	mov	r1, r0
 800c36a:	4632      	mov	r2, r6
 800c36c:	4640      	mov	r0, r8
 800c36e:	f7fe ff65 	bl	800b23c <memcpy>
 800c372:	f8c4 8000 	str.w	r8, [r4]
 800c376:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c37a:	e7e9      	b.n	800c350 <__submore+0x48>

0800c37c <__locale_ctype_ptr_l>:
 800c37c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c380:	4770      	bx	lr
	...

0800c384 <__locale_ctype_ptr>:
 800c384:	4b04      	ldr	r3, [pc, #16]	; (800c398 <__locale_ctype_ptr+0x14>)
 800c386:	4a05      	ldr	r2, [pc, #20]	; (800c39c <__locale_ctype_ptr+0x18>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	6a1b      	ldr	r3, [r3, #32]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	bf08      	it	eq
 800c390:	4613      	moveq	r3, r2
 800c392:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c396:	4770      	bx	lr
 800c398:	2000058c 	.word	0x2000058c
 800c39c:	200005f0 	.word	0x200005f0

0800c3a0 <__ascii_mbtowc>:
 800c3a0:	b082      	sub	sp, #8
 800c3a2:	b901      	cbnz	r1, 800c3a6 <__ascii_mbtowc+0x6>
 800c3a4:	a901      	add	r1, sp, #4
 800c3a6:	b142      	cbz	r2, 800c3ba <__ascii_mbtowc+0x1a>
 800c3a8:	b14b      	cbz	r3, 800c3be <__ascii_mbtowc+0x1e>
 800c3aa:	7813      	ldrb	r3, [r2, #0]
 800c3ac:	600b      	str	r3, [r1, #0]
 800c3ae:	7812      	ldrb	r2, [r2, #0]
 800c3b0:	1c10      	adds	r0, r2, #0
 800c3b2:	bf18      	it	ne
 800c3b4:	2001      	movne	r0, #1
 800c3b6:	b002      	add	sp, #8
 800c3b8:	4770      	bx	lr
 800c3ba:	4610      	mov	r0, r2
 800c3bc:	e7fb      	b.n	800c3b6 <__ascii_mbtowc+0x16>
 800c3be:	f06f 0001 	mvn.w	r0, #1
 800c3c2:	e7f8      	b.n	800c3b6 <__ascii_mbtowc+0x16>

0800c3c4 <memmove>:
 800c3c4:	4288      	cmp	r0, r1
 800c3c6:	b510      	push	{r4, lr}
 800c3c8:	eb01 0302 	add.w	r3, r1, r2
 800c3cc:	d807      	bhi.n	800c3de <memmove+0x1a>
 800c3ce:	1e42      	subs	r2, r0, #1
 800c3d0:	4299      	cmp	r1, r3
 800c3d2:	d00a      	beq.n	800c3ea <memmove+0x26>
 800c3d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3d8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c3dc:	e7f8      	b.n	800c3d0 <memmove+0xc>
 800c3de:	4283      	cmp	r3, r0
 800c3e0:	d9f5      	bls.n	800c3ce <memmove+0xa>
 800c3e2:	1881      	adds	r1, r0, r2
 800c3e4:	1ad2      	subs	r2, r2, r3
 800c3e6:	42d3      	cmn	r3, r2
 800c3e8:	d100      	bne.n	800c3ec <memmove+0x28>
 800c3ea:	bd10      	pop	{r4, pc}
 800c3ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c3f4:	e7f7      	b.n	800c3e6 <memmove+0x22>

0800c3f6 <_realloc_r>:
 800c3f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3f8:	4607      	mov	r7, r0
 800c3fa:	4614      	mov	r4, r2
 800c3fc:	460e      	mov	r6, r1
 800c3fe:	b921      	cbnz	r1, 800c40a <_realloc_r+0x14>
 800c400:	4611      	mov	r1, r2
 800c402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c406:	f7fe bf7b 	b.w	800b300 <_malloc_r>
 800c40a:	b922      	cbnz	r2, 800c416 <_realloc_r+0x20>
 800c40c:	f7fe ff2a 	bl	800b264 <_free_r>
 800c410:	4625      	mov	r5, r4
 800c412:	4628      	mov	r0, r5
 800c414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c416:	f000 f821 	bl	800c45c <_malloc_usable_size_r>
 800c41a:	42a0      	cmp	r0, r4
 800c41c:	d20f      	bcs.n	800c43e <_realloc_r+0x48>
 800c41e:	4621      	mov	r1, r4
 800c420:	4638      	mov	r0, r7
 800c422:	f7fe ff6d 	bl	800b300 <_malloc_r>
 800c426:	4605      	mov	r5, r0
 800c428:	2800      	cmp	r0, #0
 800c42a:	d0f2      	beq.n	800c412 <_realloc_r+0x1c>
 800c42c:	4631      	mov	r1, r6
 800c42e:	4622      	mov	r2, r4
 800c430:	f7fe ff04 	bl	800b23c <memcpy>
 800c434:	4631      	mov	r1, r6
 800c436:	4638      	mov	r0, r7
 800c438:	f7fe ff14 	bl	800b264 <_free_r>
 800c43c:	e7e9      	b.n	800c412 <_realloc_r+0x1c>
 800c43e:	4635      	mov	r5, r6
 800c440:	e7e7      	b.n	800c412 <_realloc_r+0x1c>

0800c442 <__ascii_wctomb>:
 800c442:	b149      	cbz	r1, 800c458 <__ascii_wctomb+0x16>
 800c444:	2aff      	cmp	r2, #255	; 0xff
 800c446:	bf85      	ittet	hi
 800c448:	238a      	movhi	r3, #138	; 0x8a
 800c44a:	6003      	strhi	r3, [r0, #0]
 800c44c:	700a      	strbls	r2, [r1, #0]
 800c44e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c452:	bf98      	it	ls
 800c454:	2001      	movls	r0, #1
 800c456:	4770      	bx	lr
 800c458:	4608      	mov	r0, r1
 800c45a:	4770      	bx	lr

0800c45c <_malloc_usable_size_r>:
 800c45c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c460:	1f18      	subs	r0, r3, #4
 800c462:	2b00      	cmp	r3, #0
 800c464:	bfbc      	itt	lt
 800c466:	580b      	ldrlt	r3, [r1, r0]
 800c468:	18c0      	addlt	r0, r0, r3
 800c46a:	4770      	bx	lr

0800c46c <roundf>:
 800c46c:	ee10 0a10 	vmov	r0, s0
 800c470:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c474:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800c478:	2a16      	cmp	r2, #22
 800c47a:	dc15      	bgt.n	800c4a8 <roundf+0x3c>
 800c47c:	2a00      	cmp	r2, #0
 800c47e:	da08      	bge.n	800c492 <roundf+0x26>
 800c480:	3201      	adds	r2, #1
 800c482:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800c486:	d101      	bne.n	800c48c <roundf+0x20>
 800c488:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800c48c:	ee00 3a10 	vmov	s0, r3
 800c490:	4770      	bx	lr
 800c492:	4908      	ldr	r1, [pc, #32]	; (800c4b4 <roundf+0x48>)
 800c494:	4111      	asrs	r1, r2
 800c496:	4208      	tst	r0, r1
 800c498:	d0fa      	beq.n	800c490 <roundf+0x24>
 800c49a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c49e:	4113      	asrs	r3, r2
 800c4a0:	4403      	add	r3, r0
 800c4a2:	ea23 0301 	bic.w	r3, r3, r1
 800c4a6:	e7f1      	b.n	800c48c <roundf+0x20>
 800c4a8:	2a80      	cmp	r2, #128	; 0x80
 800c4aa:	d1f1      	bne.n	800c490 <roundf+0x24>
 800c4ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	007fffff 	.word	0x007fffff

0800c4b8 <powf>:
 800c4b8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c4bc:	ed2d 8b04 	vpush	{d8-d9}
 800c4c0:	4ca7      	ldr	r4, [pc, #668]	; (800c760 <powf+0x2a8>)
 800c4c2:	b08a      	sub	sp, #40	; 0x28
 800c4c4:	eef0 8a40 	vmov.f32	s17, s0
 800c4c8:	eeb0 8a60 	vmov.f32	s16, s1
 800c4cc:	f000 f958 	bl	800c780 <__ieee754_powf>
 800c4d0:	f994 5000 	ldrsb.w	r5, [r4]
 800c4d4:	1c6b      	adds	r3, r5, #1
 800c4d6:	eeb0 9a40 	vmov.f32	s18, s0
 800c4da:	4626      	mov	r6, r4
 800c4dc:	d05f      	beq.n	800c59e <powf+0xe6>
 800c4de:	eeb4 8a48 	vcmp.f32	s16, s16
 800c4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4e6:	d65a      	bvs.n	800c59e <powf+0xe6>
 800c4e8:	eef4 8a68 	vcmp.f32	s17, s17
 800c4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f0:	d721      	bvc.n	800c536 <powf+0x7e>
 800c4f2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4fa:	d150      	bne.n	800c59e <powf+0xe6>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	9300      	str	r3, [sp, #0]
 800c500:	4b98      	ldr	r3, [pc, #608]	; (800c764 <powf+0x2ac>)
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	ee18 0a90 	vmov	r0, s17
 800c508:	2300      	movs	r3, #0
 800c50a:	9308      	str	r3, [sp, #32]
 800c50c:	f7f4 f82c 	bl	8000568 <__aeabi_f2d>
 800c510:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c514:	ee18 0a10 	vmov	r0, s16
 800c518:	f7f4 f826 	bl	8000568 <__aeabi_f2d>
 800c51c:	4b92      	ldr	r3, [pc, #584]	; (800c768 <powf+0x2b0>)
 800c51e:	2200      	movs	r2, #0
 800c520:	2d02      	cmp	r5, #2
 800c522:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c526:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c52a:	d032      	beq.n	800c592 <powf+0xda>
 800c52c:	4668      	mov	r0, sp
 800c52e:	f000 fbea 	bl	800cd06 <matherr>
 800c532:	bb40      	cbnz	r0, 800c586 <powf+0xce>
 800c534:	e065      	b.n	800c602 <powf+0x14a>
 800c536:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800c76c <powf+0x2b4>
 800c53a:	eef4 8a69 	vcmp.f32	s17, s19
 800c53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c542:	d163      	bne.n	800c60c <powf+0x154>
 800c544:	eeb4 8a69 	vcmp.f32	s16, s19
 800c548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c54c:	d12e      	bne.n	800c5ac <powf+0xf4>
 800c54e:	2301      	movs	r3, #1
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	4b84      	ldr	r3, [pc, #528]	; (800c764 <powf+0x2ac>)
 800c554:	9301      	str	r3, [sp, #4]
 800c556:	ee18 0a90 	vmov	r0, s17
 800c55a:	2300      	movs	r3, #0
 800c55c:	9308      	str	r3, [sp, #32]
 800c55e:	f7f4 f803 	bl	8000568 <__aeabi_f2d>
 800c562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c566:	ee18 0a10 	vmov	r0, s16
 800c56a:	f7f3 fffd 	bl	8000568 <__aeabi_f2d>
 800c56e:	2200      	movs	r2, #0
 800c570:	2300      	movs	r3, #0
 800c572:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c576:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c57a:	2d00      	cmp	r5, #0
 800c57c:	d0d6      	beq.n	800c52c <powf+0x74>
 800c57e:	4b7a      	ldr	r3, [pc, #488]	; (800c768 <powf+0x2b0>)
 800c580:	2200      	movs	r2, #0
 800c582:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c586:	9b08      	ldr	r3, [sp, #32]
 800c588:	b11b      	cbz	r3, 800c592 <powf+0xda>
 800c58a:	f7fe fe1d 	bl	800b1c8 <__errno>
 800c58e:	9b08      	ldr	r3, [sp, #32]
 800c590:	6003      	str	r3, [r0, #0]
 800c592:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c596:	f7f4 f83f 	bl	8000618 <__aeabi_d2f>
 800c59a:	ee09 0a10 	vmov	s18, r0
 800c59e:	eeb0 0a49 	vmov.f32	s0, s18
 800c5a2:	b00a      	add	sp, #40	; 0x28
 800c5a4:	ecbd 8b04 	vpop	{d8-d9}
 800c5a8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c5ac:	eeb0 0a48 	vmov.f32	s0, s16
 800c5b0:	f000 fbb2 	bl	800cd18 <finitef>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d0f2      	beq.n	800c59e <powf+0xe6>
 800c5b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c0:	d5ed      	bpl.n	800c59e <powf+0xe6>
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	4b67      	ldr	r3, [pc, #412]	; (800c764 <powf+0x2ac>)
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	ee18 0a90 	vmov	r0, s17
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	9308      	str	r3, [sp, #32]
 800c5d2:	f7f3 ffc9 	bl	8000568 <__aeabi_f2d>
 800c5d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5da:	ee18 0a10 	vmov	r0, s16
 800c5de:	f7f3 ffc3 	bl	8000568 <__aeabi_f2d>
 800c5e2:	f994 3000 	ldrsb.w	r3, [r4]
 800c5e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5ea:	b923      	cbnz	r3, 800c5f6 <powf+0x13e>
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c5f4:	e79a      	b.n	800c52c <powf+0x74>
 800c5f6:	495e      	ldr	r1, [pc, #376]	; (800c770 <powf+0x2b8>)
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d194      	bne.n	800c52c <powf+0x74>
 800c602:	f7fe fde1 	bl	800b1c8 <__errno>
 800c606:	2321      	movs	r3, #33	; 0x21
 800c608:	6003      	str	r3, [r0, #0]
 800c60a:	e7bc      	b.n	800c586 <powf+0xce>
 800c60c:	f000 fb84 	bl	800cd18 <finitef>
 800c610:	4605      	mov	r5, r0
 800c612:	2800      	cmp	r0, #0
 800c614:	d173      	bne.n	800c6fe <powf+0x246>
 800c616:	eeb0 0a68 	vmov.f32	s0, s17
 800c61a:	f000 fb7d 	bl	800cd18 <finitef>
 800c61e:	2800      	cmp	r0, #0
 800c620:	d06d      	beq.n	800c6fe <powf+0x246>
 800c622:	eeb0 0a48 	vmov.f32	s0, s16
 800c626:	f000 fb77 	bl	800cd18 <finitef>
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d067      	beq.n	800c6fe <powf+0x246>
 800c62e:	ee18 0a90 	vmov	r0, s17
 800c632:	f7f3 ff99 	bl	8000568 <__aeabi_f2d>
 800c636:	4680      	mov	r8, r0
 800c638:	ee18 0a10 	vmov	r0, s16
 800c63c:	4689      	mov	r9, r1
 800c63e:	f7f3 ff93 	bl	8000568 <__aeabi_f2d>
 800c642:	eeb4 9a49 	vcmp.f32	s18, s18
 800c646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c64a:	f994 4000 	ldrsb.w	r4, [r4]
 800c64e:	4b45      	ldr	r3, [pc, #276]	; (800c764 <powf+0x2ac>)
 800c650:	d713      	bvc.n	800c67a <powf+0x1c2>
 800c652:	2201      	movs	r2, #1
 800c654:	e9cd 2300 	strd	r2, r3, [sp]
 800c658:	9508      	str	r5, [sp, #32]
 800c65a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c65e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c662:	2c00      	cmp	r4, #0
 800c664:	d0c2      	beq.n	800c5ec <powf+0x134>
 800c666:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800c66a:	ee17 0a90 	vmov	r0, s15
 800c66e:	f7f3 ff7b 	bl	8000568 <__aeabi_f2d>
 800c672:	2c02      	cmp	r4, #2
 800c674:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c678:	e7c2      	b.n	800c600 <powf+0x148>
 800c67a:	2203      	movs	r2, #3
 800c67c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c680:	e9cd 2300 	strd	r2, r3, [sp]
 800c684:	9508      	str	r5, [sp, #32]
 800c686:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c68a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c68e:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c692:	b9fc      	cbnz	r4, 800c6d4 <powf+0x21c>
 800c694:	4b37      	ldr	r3, [pc, #220]	; (800c774 <powf+0x2bc>)
 800c696:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c69a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c6a6:	d553      	bpl.n	800c750 <powf+0x298>
 800c6a8:	eeb0 0a48 	vmov.f32	s0, s16
 800c6ac:	f000 fb44 	bl	800cd38 <rintf>
 800c6b0:	eeb4 0a48 	vcmp.f32	s0, s16
 800c6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b8:	d004      	beq.n	800c6c4 <powf+0x20c>
 800c6ba:	4b2f      	ldr	r3, [pc, #188]	; (800c778 <powf+0x2c0>)
 800c6bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c6c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c6c4:	f996 3000 	ldrsb.w	r3, [r6]
 800c6c8:	2b02      	cmp	r3, #2
 800c6ca:	d141      	bne.n	800c750 <powf+0x298>
 800c6cc:	f7fe fd7c 	bl	800b1c8 <__errno>
 800c6d0:	2322      	movs	r3, #34	; 0x22
 800c6d2:	e799      	b.n	800c608 <powf+0x150>
 800c6d4:	4b29      	ldr	r3, [pc, #164]	; (800c77c <powf+0x2c4>)
 800c6d6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c6da:	2200      	movs	r2, #0
 800c6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c6e4:	d5ee      	bpl.n	800c6c4 <powf+0x20c>
 800c6e6:	eeb0 0a48 	vmov.f32	s0, s16
 800c6ea:	f000 fb25 	bl	800cd38 <rintf>
 800c6ee:	eeb4 0a48 	vcmp.f32	s0, s16
 800c6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f6:	d0e5      	beq.n	800c6c4 <powf+0x20c>
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	4b1d      	ldr	r3, [pc, #116]	; (800c770 <powf+0x2b8>)
 800c6fc:	e7e0      	b.n	800c6c0 <powf+0x208>
 800c6fe:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c706:	f47f af4a 	bne.w	800c59e <powf+0xe6>
 800c70a:	eeb0 0a68 	vmov.f32	s0, s17
 800c70e:	f000 fb03 	bl	800cd18 <finitef>
 800c712:	2800      	cmp	r0, #0
 800c714:	f43f af43 	beq.w	800c59e <powf+0xe6>
 800c718:	eeb0 0a48 	vmov.f32	s0, s16
 800c71c:	f000 fafc 	bl	800cd18 <finitef>
 800c720:	2800      	cmp	r0, #0
 800c722:	f43f af3c 	beq.w	800c59e <powf+0xe6>
 800c726:	2304      	movs	r3, #4
 800c728:	9300      	str	r3, [sp, #0]
 800c72a:	4b0e      	ldr	r3, [pc, #56]	; (800c764 <powf+0x2ac>)
 800c72c:	9301      	str	r3, [sp, #4]
 800c72e:	ee18 0a90 	vmov	r0, s17
 800c732:	2300      	movs	r3, #0
 800c734:	9308      	str	r3, [sp, #32]
 800c736:	f7f3 ff17 	bl	8000568 <__aeabi_f2d>
 800c73a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c73e:	ee18 0a10 	vmov	r0, s16
 800c742:	f7f3 ff11 	bl	8000568 <__aeabi_f2d>
 800c746:	2200      	movs	r2, #0
 800c748:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c74c:	2300      	movs	r3, #0
 800c74e:	e7b7      	b.n	800c6c0 <powf+0x208>
 800c750:	4668      	mov	r0, sp
 800c752:	f000 fad8 	bl	800cd06 <matherr>
 800c756:	2800      	cmp	r0, #0
 800c758:	f47f af15 	bne.w	800c586 <powf+0xce>
 800c75c:	e7b6      	b.n	800c6cc <powf+0x214>
 800c75e:	bf00      	nop
 800c760:	2000075c 	.word	0x2000075c
 800c764:	0800d3e3 	.word	0x0800d3e3
 800c768:	3ff00000 	.word	0x3ff00000
 800c76c:	00000000 	.word	0x00000000
 800c770:	fff00000 	.word	0xfff00000
 800c774:	47efffff 	.word	0x47efffff
 800c778:	c7efffff 	.word	0xc7efffff
 800c77c:	7ff00000 	.word	0x7ff00000

0800c780 <__ieee754_powf>:
 800c780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c784:	ee10 5a90 	vmov	r5, s1
 800c788:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800c78c:	ed2d 8b02 	vpush	{d8}
 800c790:	eeb0 8a40 	vmov.f32	s16, s0
 800c794:	eef0 8a60 	vmov.f32	s17, s1
 800c798:	f000 8293 	beq.w	800ccc2 <__ieee754_powf+0x542>
 800c79c:	ee10 8a10 	vmov	r8, s0
 800c7a0:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800c7a4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c7a8:	dc06      	bgt.n	800c7b8 <__ieee754_powf+0x38>
 800c7aa:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800c7ae:	dd0a      	ble.n	800c7c6 <__ieee754_powf+0x46>
 800c7b0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c7b4:	f000 8285 	beq.w	800ccc2 <__ieee754_powf+0x542>
 800c7b8:	ecbd 8b02 	vpop	{d8}
 800c7bc:	48d9      	ldr	r0, [pc, #868]	; (800cb24 <__ieee754_powf+0x3a4>)
 800c7be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c2:	f000 bab3 	b.w	800cd2c <nanf>
 800c7c6:	f1b8 0f00 	cmp.w	r8, #0
 800c7ca:	da1d      	bge.n	800c808 <__ieee754_powf+0x88>
 800c7cc:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800c7d0:	da2c      	bge.n	800c82c <__ieee754_powf+0xac>
 800c7d2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c7d6:	db30      	blt.n	800c83a <__ieee754_powf+0xba>
 800c7d8:	15fb      	asrs	r3, r7, #23
 800c7da:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c7de:	fa47 f603 	asr.w	r6, r7, r3
 800c7e2:	fa06 f303 	lsl.w	r3, r6, r3
 800c7e6:	42bb      	cmp	r3, r7
 800c7e8:	d127      	bne.n	800c83a <__ieee754_powf+0xba>
 800c7ea:	f006 0601 	and.w	r6, r6, #1
 800c7ee:	f1c6 0602 	rsb	r6, r6, #2
 800c7f2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c7f6:	d122      	bne.n	800c83e <__ieee754_powf+0xbe>
 800c7f8:	2d00      	cmp	r5, #0
 800c7fa:	f280 8268 	bge.w	800ccce <__ieee754_powf+0x54e>
 800c7fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c802:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c806:	e00d      	b.n	800c824 <__ieee754_powf+0xa4>
 800c808:	2600      	movs	r6, #0
 800c80a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800c80e:	d1f0      	bne.n	800c7f2 <__ieee754_powf+0x72>
 800c810:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c814:	f000 8255 	beq.w	800ccc2 <__ieee754_powf+0x542>
 800c818:	dd0a      	ble.n	800c830 <__ieee754_powf+0xb0>
 800c81a:	2d00      	cmp	r5, #0
 800c81c:	f280 8254 	bge.w	800ccc8 <__ieee754_powf+0x548>
 800c820:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800cb28 <__ieee754_powf+0x3a8>
 800c824:	ecbd 8b02 	vpop	{d8}
 800c828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c82c:	2602      	movs	r6, #2
 800c82e:	e7ec      	b.n	800c80a <__ieee754_powf+0x8a>
 800c830:	2d00      	cmp	r5, #0
 800c832:	daf5      	bge.n	800c820 <__ieee754_powf+0xa0>
 800c834:	eeb1 0a68 	vneg.f32	s0, s17
 800c838:	e7f4      	b.n	800c824 <__ieee754_powf+0xa4>
 800c83a:	2600      	movs	r6, #0
 800c83c:	e7d9      	b.n	800c7f2 <__ieee754_powf+0x72>
 800c83e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800c842:	d102      	bne.n	800c84a <__ieee754_powf+0xca>
 800c844:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c848:	e7ec      	b.n	800c824 <__ieee754_powf+0xa4>
 800c84a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800c84e:	eeb0 0a48 	vmov.f32	s0, s16
 800c852:	d108      	bne.n	800c866 <__ieee754_powf+0xe6>
 800c854:	f1b8 0f00 	cmp.w	r8, #0
 800c858:	db05      	blt.n	800c866 <__ieee754_powf+0xe6>
 800c85a:	ecbd 8b02 	vpop	{d8}
 800c85e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c862:	f000 ba4d 	b.w	800cd00 <__ieee754_sqrtf>
 800c866:	f000 fa50 	bl	800cd0a <fabsf>
 800c86a:	b124      	cbz	r4, 800c876 <__ieee754_powf+0xf6>
 800c86c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800c870:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c874:	d117      	bne.n	800c8a6 <__ieee754_powf+0x126>
 800c876:	2d00      	cmp	r5, #0
 800c878:	bfbc      	itt	lt
 800c87a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800c87e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c882:	f1b8 0f00 	cmp.w	r8, #0
 800c886:	dacd      	bge.n	800c824 <__ieee754_powf+0xa4>
 800c888:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800c88c:	ea54 0306 	orrs.w	r3, r4, r6
 800c890:	d104      	bne.n	800c89c <__ieee754_powf+0x11c>
 800c892:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c896:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c89a:	e7c3      	b.n	800c824 <__ieee754_powf+0xa4>
 800c89c:	2e01      	cmp	r6, #1
 800c89e:	d1c1      	bne.n	800c824 <__ieee754_powf+0xa4>
 800c8a0:	eeb1 0a40 	vneg.f32	s0, s0
 800c8a4:	e7be      	b.n	800c824 <__ieee754_powf+0xa4>
 800c8a6:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800c8aa:	3801      	subs	r0, #1
 800c8ac:	ea56 0300 	orrs.w	r3, r6, r0
 800c8b0:	d104      	bne.n	800c8bc <__ieee754_powf+0x13c>
 800c8b2:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c8b6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c8ba:	e7b3      	b.n	800c824 <__ieee754_powf+0xa4>
 800c8bc:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800c8c0:	dd6d      	ble.n	800c99e <__ieee754_powf+0x21e>
 800c8c2:	4b9a      	ldr	r3, [pc, #616]	; (800cb2c <__ieee754_powf+0x3ac>)
 800c8c4:	429c      	cmp	r4, r3
 800c8c6:	dc06      	bgt.n	800c8d6 <__ieee754_powf+0x156>
 800c8c8:	2d00      	cmp	r5, #0
 800c8ca:	daa9      	bge.n	800c820 <__ieee754_powf+0xa0>
 800c8cc:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800cb30 <__ieee754_powf+0x3b0>
 800c8d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c8d4:	e7a6      	b.n	800c824 <__ieee754_powf+0xa4>
 800c8d6:	4b97      	ldr	r3, [pc, #604]	; (800cb34 <__ieee754_powf+0x3b4>)
 800c8d8:	429c      	cmp	r4, r3
 800c8da:	dd02      	ble.n	800c8e2 <__ieee754_powf+0x162>
 800c8dc:	2d00      	cmp	r5, #0
 800c8de:	dcf5      	bgt.n	800c8cc <__ieee754_powf+0x14c>
 800c8e0:	e79e      	b.n	800c820 <__ieee754_powf+0xa0>
 800c8e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c8e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c8ea:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800cb38 <__ieee754_powf+0x3b8>
 800c8ee:	eef1 6a40 	vneg.f32	s13, s0
 800c8f2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c8f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c8fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c8fe:	eee7 7a40 	vfms.f32	s15, s14, s0
 800c902:	ee60 0a00 	vmul.f32	s1, s0, s0
 800c906:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800cb3c <__ieee754_powf+0x3bc>
 800c90a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800c90e:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800cb40 <__ieee754_powf+0x3c0>
 800c912:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800c916:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c91a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800cb44 <__ieee754_powf+0x3c4>
 800c91e:	eeb0 6a67 	vmov.f32	s12, s15
 800c922:	eea0 6a07 	vfma.f32	s12, s0, s14
 800c926:	ee16 3a10 	vmov	r3, s12
 800c92a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c92e:	f023 030f 	bic.w	r3, r3, #15
 800c932:	ee00 3a90 	vmov	s1, r3
 800c936:	eee6 0a87 	vfma.f32	s1, s13, s14
 800c93a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c93e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800c942:	f025 050f 	bic.w	r5, r5, #15
 800c946:	ee07 5a10 	vmov	s14, r5
 800c94a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c94e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c952:	ee07 3a90 	vmov	s15, r3
 800c956:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c95a:	3e01      	subs	r6, #1
 800c95c:	ea56 0200 	orrs.w	r2, r6, r0
 800c960:	ee07 5a10 	vmov	s14, r5
 800c964:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c968:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c96c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c970:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c974:	ee17 4a10 	vmov	r4, s14
 800c978:	bf08      	it	eq
 800c97a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800c97e:	2c00      	cmp	r4, #0
 800c980:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c984:	f340 8184 	ble.w	800cc90 <__ieee754_powf+0x510>
 800c988:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800c98c:	f340 80fc 	ble.w	800cb88 <__ieee754_powf+0x408>
 800c990:	eddf 7a67 	vldr	s15, [pc, #412]	; 800cb30 <__ieee754_powf+0x3b0>
 800c994:	ee28 0a27 	vmul.f32	s0, s16, s15
 800c998:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c99c:	e742      	b.n	800c824 <__ieee754_powf+0xa4>
 800c99e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800c9a2:	bfbf      	itttt	lt
 800c9a4:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800cb48 <__ieee754_powf+0x3c8>
 800c9a8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c9ac:	f06f 0217 	mvnlt.w	r2, #23
 800c9b0:	ee17 4a90 	vmovlt	r4, s15
 800c9b4:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800c9b8:	bfa8      	it	ge
 800c9ba:	2200      	movge	r2, #0
 800c9bc:	3b7f      	subs	r3, #127	; 0x7f
 800c9be:	4413      	add	r3, r2
 800c9c0:	4a62      	ldr	r2, [pc, #392]	; (800cb4c <__ieee754_powf+0x3cc>)
 800c9c2:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800c9c6:	4294      	cmp	r4, r2
 800c9c8:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800c9cc:	dd06      	ble.n	800c9dc <__ieee754_powf+0x25c>
 800c9ce:	4a60      	ldr	r2, [pc, #384]	; (800cb50 <__ieee754_powf+0x3d0>)
 800c9d0:	4294      	cmp	r4, r2
 800c9d2:	f340 80a5 	ble.w	800cb20 <__ieee754_powf+0x3a0>
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c9dc:	2400      	movs	r4, #0
 800c9de:	4a5d      	ldr	r2, [pc, #372]	; (800cb54 <__ieee754_powf+0x3d4>)
 800c9e0:	00a7      	lsls	r7, r4, #2
 800c9e2:	443a      	add	r2, r7
 800c9e4:	ee07 1a90 	vmov	s15, r1
 800c9e8:	ed92 7a00 	vldr	s14, [r2]
 800c9ec:	4a5a      	ldr	r2, [pc, #360]	; (800cb58 <__ieee754_powf+0x3d8>)
 800c9ee:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c9f2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c9f6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800c9fa:	1049      	asrs	r1, r1, #1
 800c9fc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800ca00:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800ca04:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800ca08:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800ca0c:	ee06 1a10 	vmov	s12, r1
 800ca10:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800ca14:	ee14 ca90 	vmov	ip, s9
 800ca18:	ea02 0c0c 	and.w	ip, r2, ip
 800ca1c:	ee05 ca10 	vmov	s10, ip
 800ca20:	eeb1 4a45 	vneg.f32	s8, s10
 800ca24:	eee4 5a06 	vfma.f32	s11, s8, s12
 800ca28:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ca2c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800cb5c <__ieee754_powf+0x3dc>
 800ca30:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800ca34:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800ca38:	eee4 5a06 	vfma.f32	s11, s8, s12
 800ca3c:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800ca40:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800ca44:	eddf 5a46 	vldr	s11, [pc, #280]	; 800cb60 <__ieee754_powf+0x3e0>
 800ca48:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ca4c:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb64 <__ieee754_powf+0x3e4>
 800ca50:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ca54:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800cb38 <__ieee754_powf+0x3b8>
 800ca58:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ca5c:	eddf 5a42 	vldr	s11, [pc, #264]	; 800cb68 <__ieee754_powf+0x3e8>
 800ca60:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ca64:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800cb6c <__ieee754_powf+0x3ec>
 800ca68:	ee75 6a24 	vadd.f32	s13, s10, s9
 800ca6c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ca70:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ca74:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800ca78:	eef0 7a65 	vmov.f32	s15, s11
 800ca7c:	eee3 6a87 	vfma.f32	s13, s7, s14
 800ca80:	eee5 7a05 	vfma.f32	s15, s10, s10
 800ca84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca88:	ee17 1a90 	vmov	r1, s15
 800ca8c:	4011      	ands	r1, r2
 800ca8e:	ee07 1a90 	vmov	s15, r1
 800ca92:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800ca96:	eddf 5a36 	vldr	s11, [pc, #216]	; 800cb70 <__ieee754_powf+0x3f0>
 800ca9a:	eea4 7a05 	vfma.f32	s14, s8, s10
 800ca9e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800caa2:	ee27 7a24 	vmul.f32	s14, s14, s9
 800caa6:	eea7 7a86 	vfma.f32	s14, s15, s12
 800caaa:	eeb0 6a47 	vmov.f32	s12, s14
 800caae:	eea5 6a27 	vfma.f32	s12, s10, s15
 800cab2:	ee16 1a10 	vmov	r1, s12
 800cab6:	4011      	ands	r1, r2
 800cab8:	ee06 1a90 	vmov	s13, r1
 800cabc:	eee4 6a27 	vfma.f32	s13, s8, s15
 800cac0:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800cb74 <__ieee754_powf+0x3f4>
 800cac4:	ee37 7a66 	vsub.f32	s14, s14, s13
 800cac8:	ee06 1a10 	vmov	s12, r1
 800cacc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cad0:	eddf 7a29 	vldr	s15, [pc, #164]	; 800cb78 <__ieee754_powf+0x3f8>
 800cad4:	4929      	ldr	r1, [pc, #164]	; (800cb7c <__ieee754_powf+0x3fc>)
 800cad6:	eea6 7a27 	vfma.f32	s14, s12, s15
 800cada:	4439      	add	r1, r7
 800cadc:	edd1 7a00 	vldr	s15, [r1]
 800cae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cae4:	ee07 3a90 	vmov	s15, r3
 800cae8:	eef0 0a47 	vmov.f32	s1, s14
 800caec:	4b24      	ldr	r3, [pc, #144]	; (800cb80 <__ieee754_powf+0x400>)
 800caee:	eee6 0a25 	vfma.f32	s1, s12, s11
 800caf2:	443b      	add	r3, r7
 800caf4:	ed93 5a00 	vldr	s10, [r3]
 800caf8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cafc:	ee70 0a85 	vadd.f32	s1, s1, s10
 800cb00:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800cb04:	ee17 3a90 	vmov	r3, s15
 800cb08:	4013      	ands	r3, r2
 800cb0a:	ee07 3a90 	vmov	s15, r3
 800cb0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cb12:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800cb16:	eee6 7a65 	vfms.f32	s15, s12, s11
 800cb1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb1e:	e70e      	b.n	800c93e <__ieee754_powf+0x1be>
 800cb20:	2401      	movs	r4, #1
 800cb22:	e75c      	b.n	800c9de <__ieee754_powf+0x25e>
 800cb24:	0800d22d 	.word	0x0800d22d
 800cb28:	00000000 	.word	0x00000000
 800cb2c:	3f7ffff7 	.word	0x3f7ffff7
 800cb30:	7149f2ca 	.word	0x7149f2ca
 800cb34:	3f800007 	.word	0x3f800007
 800cb38:	3eaaaaab 	.word	0x3eaaaaab
 800cb3c:	36eca570 	.word	0x36eca570
 800cb40:	3fb8aa3b 	.word	0x3fb8aa3b
 800cb44:	3fb8aa00 	.word	0x3fb8aa00
 800cb48:	4b800000 	.word	0x4b800000
 800cb4c:	001cc471 	.word	0x001cc471
 800cb50:	005db3d6 	.word	0x005db3d6
 800cb54:	0800d3e8 	.word	0x0800d3e8
 800cb58:	fffff000 	.word	0xfffff000
 800cb5c:	3e6c3255 	.word	0x3e6c3255
 800cb60:	3e53f142 	.word	0x3e53f142
 800cb64:	3e8ba305 	.word	0x3e8ba305
 800cb68:	3edb6db7 	.word	0x3edb6db7
 800cb6c:	3f19999a 	.word	0x3f19999a
 800cb70:	3f763800 	.word	0x3f763800
 800cb74:	3f76384f 	.word	0x3f76384f
 800cb78:	369dc3a0 	.word	0x369dc3a0
 800cb7c:	0800d3f8 	.word	0x0800d3f8
 800cb80:	0800d3f0 	.word	0x0800d3f0
 800cb84:	3338aa3c 	.word	0x3338aa3c
 800cb88:	f040 8092 	bne.w	800ccb0 <__ieee754_powf+0x530>
 800cb8c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800cb84 <__ieee754_powf+0x404>
 800cb90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cb94:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800cb98:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cb9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba0:	f73f aef6 	bgt.w	800c990 <__ieee754_powf+0x210>
 800cba4:	15db      	asrs	r3, r3, #23
 800cba6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800cbaa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cbae:	4103      	asrs	r3, r0
 800cbb0:	4423      	add	r3, r4
 800cbb2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cbb6:	4947      	ldr	r1, [pc, #284]	; (800ccd4 <__ieee754_powf+0x554>)
 800cbb8:	3a7f      	subs	r2, #127	; 0x7f
 800cbba:	4111      	asrs	r1, r2
 800cbbc:	ea23 0101 	bic.w	r1, r3, r1
 800cbc0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800cbc4:	ee07 1a10 	vmov	s14, r1
 800cbc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800cbcc:	f1c2 0217 	rsb	r2, r2, #23
 800cbd0:	4110      	asrs	r0, r2
 800cbd2:	2c00      	cmp	r4, #0
 800cbd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbd8:	bfb8      	it	lt
 800cbda:	4240      	neglt	r0, r0
 800cbdc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800cbe0:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ccd8 <__ieee754_powf+0x558>
 800cbe4:	ee17 3a10 	vmov	r3, s14
 800cbe8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cbec:	f023 030f 	bic.w	r3, r3, #15
 800cbf0:	ee07 3a10 	vmov	s14, r3
 800cbf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbf8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800cbfc:	eddf 7a37 	vldr	s15, [pc, #220]	; 800ccdc <__ieee754_powf+0x55c>
 800cc00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc04:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800cc08:	eddf 6a35 	vldr	s13, [pc, #212]	; 800cce0 <__ieee754_powf+0x560>
 800cc0c:	eeb0 0a67 	vmov.f32	s0, s15
 800cc10:	eea7 0a26 	vfma.f32	s0, s14, s13
 800cc14:	eeb0 6a40 	vmov.f32	s12, s0
 800cc18:	eea7 6a66 	vfms.f32	s12, s14, s13
 800cc1c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cc20:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cc24:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800cce4 <__ieee754_powf+0x564>
 800cc28:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800cce8 <__ieee754_powf+0x568>
 800cc2c:	eea7 6a26 	vfma.f32	s12, s14, s13
 800cc30:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800ccec <__ieee754_powf+0x56c>
 800cc34:	eee6 6a07 	vfma.f32	s13, s12, s14
 800cc38:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ccf0 <__ieee754_powf+0x570>
 800cc3c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800cc40:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800ccf4 <__ieee754_powf+0x574>
 800cc44:	eee6 6a07 	vfma.f32	s13, s12, s14
 800cc48:	eeb0 6a40 	vmov.f32	s12, s0
 800cc4c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800cc50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cc54:	eeb0 7a46 	vmov.f32	s14, s12
 800cc58:	ee77 6a66 	vsub.f32	s13, s14, s13
 800cc5c:	ee20 6a06 	vmul.f32	s12, s0, s12
 800cc60:	eee0 7a27 	vfma.f32	s15, s0, s15
 800cc64:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800cc68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc6c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cc70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cc74:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cc78:	ee10 3a10 	vmov	r3, s0
 800cc7c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800cc80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc84:	da1a      	bge.n	800ccbc <__ieee754_powf+0x53c>
 800cc86:	f000 f8b1 	bl	800cdec <scalbnf>
 800cc8a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800cc8e:	e5c9      	b.n	800c824 <__ieee754_powf+0xa4>
 800cc90:	4a19      	ldr	r2, [pc, #100]	; (800ccf8 <__ieee754_powf+0x578>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	dd02      	ble.n	800cc9c <__ieee754_powf+0x51c>
 800cc96:	eddf 7a19 	vldr	s15, [pc, #100]	; 800ccfc <__ieee754_powf+0x57c>
 800cc9a:	e67b      	b.n	800c994 <__ieee754_powf+0x214>
 800cc9c:	d108      	bne.n	800ccb0 <__ieee754_powf+0x530>
 800cc9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cca2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800cca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccaa:	f6ff af7b 	blt.w	800cba4 <__ieee754_powf+0x424>
 800ccae:	e7f2      	b.n	800cc96 <__ieee754_powf+0x516>
 800ccb0:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ccb4:	f73f af76 	bgt.w	800cba4 <__ieee754_powf+0x424>
 800ccb8:	2000      	movs	r0, #0
 800ccba:	e78f      	b.n	800cbdc <__ieee754_powf+0x45c>
 800ccbc:	ee00 3a10 	vmov	s0, r3
 800ccc0:	e7e3      	b.n	800cc8a <__ieee754_powf+0x50a>
 800ccc2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ccc6:	e5ad      	b.n	800c824 <__ieee754_powf+0xa4>
 800ccc8:	eeb0 0a68 	vmov.f32	s0, s17
 800cccc:	e5aa      	b.n	800c824 <__ieee754_powf+0xa4>
 800ccce:	eeb0 0a48 	vmov.f32	s0, s16
 800ccd2:	e5a7      	b.n	800c824 <__ieee754_powf+0xa4>
 800ccd4:	007fffff 	.word	0x007fffff
 800ccd8:	3f317218 	.word	0x3f317218
 800ccdc:	35bfbe8c 	.word	0x35bfbe8c
 800cce0:	3f317200 	.word	0x3f317200
 800cce4:	3331bb4c 	.word	0x3331bb4c
 800cce8:	b5ddea0e 	.word	0xb5ddea0e
 800ccec:	388ab355 	.word	0x388ab355
 800ccf0:	bb360b61 	.word	0xbb360b61
 800ccf4:	3e2aaaab 	.word	0x3e2aaaab
 800ccf8:	43160000 	.word	0x43160000
 800ccfc:	0da24260 	.word	0x0da24260

0800cd00 <__ieee754_sqrtf>:
 800cd00:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cd04:	4770      	bx	lr

0800cd06 <matherr>:
 800cd06:	2000      	movs	r0, #0
 800cd08:	4770      	bx	lr

0800cd0a <fabsf>:
 800cd0a:	ee10 3a10 	vmov	r3, s0
 800cd0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd12:	ee00 3a10 	vmov	s0, r3
 800cd16:	4770      	bx	lr

0800cd18 <finitef>:
 800cd18:	ee10 3a10 	vmov	r3, s0
 800cd1c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800cd20:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800cd24:	bfac      	ite	ge
 800cd26:	2000      	movge	r0, #0
 800cd28:	2001      	movlt	r0, #1
 800cd2a:	4770      	bx	lr

0800cd2c <nanf>:
 800cd2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cd34 <nanf+0x8>
 800cd30:	4770      	bx	lr
 800cd32:	bf00      	nop
 800cd34:	7fc00000 	.word	0x7fc00000

0800cd38 <rintf>:
 800cd38:	b513      	push	{r0, r1, r4, lr}
 800cd3a:	ee10 1a10 	vmov	r1, s0
 800cd3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd42:	0ddc      	lsrs	r4, r3, #23
 800cd44:	3c7f      	subs	r4, #127	; 0x7f
 800cd46:	2c16      	cmp	r4, #22
 800cd48:	dc46      	bgt.n	800cdd8 <rintf+0xa0>
 800cd4a:	b32b      	cbz	r3, 800cd98 <rintf+0x60>
 800cd4c:	2c00      	cmp	r4, #0
 800cd4e:	ee10 2a10 	vmov	r2, s0
 800cd52:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800cd56:	da21      	bge.n	800cd9c <rintf+0x64>
 800cd58:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800cd5c:	425b      	negs	r3, r3
 800cd5e:	4a21      	ldr	r2, [pc, #132]	; (800cde4 <rintf+0xac>)
 800cd60:	0a5b      	lsrs	r3, r3, #9
 800cd62:	0d09      	lsrs	r1, r1, #20
 800cd64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd68:	0509      	lsls	r1, r1, #20
 800cd6a:	430b      	orrs	r3, r1
 800cd6c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800cd70:	ee07 3a90 	vmov	s15, r3
 800cd74:	edd2 6a00 	vldr	s13, [r2]
 800cd78:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800cd7c:	ed8d 7a01 	vstr	s14, [sp, #4]
 800cd80:	eddd 7a01 	vldr	s15, [sp, #4]
 800cd84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cd88:	ee17 3a90 	vmov	r3, s15
 800cd8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd90:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800cd94:	ee00 3a10 	vmov	s0, r3
 800cd98:	b002      	add	sp, #8
 800cd9a:	bd10      	pop	{r4, pc}
 800cd9c:	4b12      	ldr	r3, [pc, #72]	; (800cde8 <rintf+0xb0>)
 800cd9e:	4123      	asrs	r3, r4
 800cda0:	4219      	tst	r1, r3
 800cda2:	d0f9      	beq.n	800cd98 <rintf+0x60>
 800cda4:	085b      	lsrs	r3, r3, #1
 800cda6:	4219      	tst	r1, r3
 800cda8:	d006      	beq.n	800cdb8 <rintf+0x80>
 800cdaa:	ea21 0203 	bic.w	r2, r1, r3
 800cdae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cdb2:	fa43 f404 	asr.w	r4, r3, r4
 800cdb6:	4322      	orrs	r2, r4
 800cdb8:	4b0a      	ldr	r3, [pc, #40]	; (800cde4 <rintf+0xac>)
 800cdba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cdbe:	ed90 7a00 	vldr	s14, [r0]
 800cdc2:	ee07 2a90 	vmov	s15, r2
 800cdc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdca:	edcd 7a01 	vstr	s15, [sp, #4]
 800cdce:	ed9d 0a01 	vldr	s0, [sp, #4]
 800cdd2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cdd6:	e7df      	b.n	800cd98 <rintf+0x60>
 800cdd8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cddc:	d3dc      	bcc.n	800cd98 <rintf+0x60>
 800cdde:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cde2:	e7d9      	b.n	800cd98 <rintf+0x60>
 800cde4:	0800d400 	.word	0x0800d400
 800cde8:	007fffff 	.word	0x007fffff

0800cdec <scalbnf>:
 800cdec:	b508      	push	{r3, lr}
 800cdee:	ee10 2a10 	vmov	r2, s0
 800cdf2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800cdf6:	ed2d 8b02 	vpush	{d8}
 800cdfa:	eef0 0a40 	vmov.f32	s1, s0
 800cdfe:	d004      	beq.n	800ce0a <scalbnf+0x1e>
 800ce00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ce04:	d306      	bcc.n	800ce14 <scalbnf+0x28>
 800ce06:	ee70 0a00 	vadd.f32	s1, s0, s0
 800ce0a:	ecbd 8b02 	vpop	{d8}
 800ce0e:	eeb0 0a60 	vmov.f32	s0, s1
 800ce12:	bd08      	pop	{r3, pc}
 800ce14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce18:	d21c      	bcs.n	800ce54 <scalbnf+0x68>
 800ce1a:	4b1f      	ldr	r3, [pc, #124]	; (800ce98 <scalbnf+0xac>)
 800ce1c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ce9c <scalbnf+0xb0>
 800ce20:	4298      	cmp	r0, r3
 800ce22:	ee60 0a27 	vmul.f32	s1, s0, s15
 800ce26:	db10      	blt.n	800ce4a <scalbnf+0x5e>
 800ce28:	ee10 2a90 	vmov	r2, s1
 800ce2c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800ce30:	3b19      	subs	r3, #25
 800ce32:	4403      	add	r3, r0
 800ce34:	2bfe      	cmp	r3, #254	; 0xfe
 800ce36:	dd0f      	ble.n	800ce58 <scalbnf+0x6c>
 800ce38:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800cea0 <scalbnf+0xb4>
 800ce3c:	eeb0 0a48 	vmov.f32	s0, s16
 800ce40:	f000 f834 	bl	800ceac <copysignf>
 800ce44:	ee60 0a08 	vmul.f32	s1, s0, s16
 800ce48:	e7df      	b.n	800ce0a <scalbnf+0x1e>
 800ce4a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800cea4 <scalbnf+0xb8>
 800ce4e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ce52:	e7da      	b.n	800ce0a <scalbnf+0x1e>
 800ce54:	0ddb      	lsrs	r3, r3, #23
 800ce56:	e7ec      	b.n	800ce32 <scalbnf+0x46>
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	dd06      	ble.n	800ce6a <scalbnf+0x7e>
 800ce5c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800ce60:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800ce64:	ee00 3a90 	vmov	s1, r3
 800ce68:	e7cf      	b.n	800ce0a <scalbnf+0x1e>
 800ce6a:	f113 0f16 	cmn.w	r3, #22
 800ce6e:	da06      	bge.n	800ce7e <scalbnf+0x92>
 800ce70:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ce74:	4298      	cmp	r0, r3
 800ce76:	dcdf      	bgt.n	800ce38 <scalbnf+0x4c>
 800ce78:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800cea4 <scalbnf+0xb8>
 800ce7c:	e7de      	b.n	800ce3c <scalbnf+0x50>
 800ce7e:	3319      	adds	r3, #25
 800ce80:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800ce84:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800ce88:	eddf 7a07 	vldr	s15, [pc, #28]	; 800cea8 <scalbnf+0xbc>
 800ce8c:	ee07 3a10 	vmov	s14, r3
 800ce90:	ee67 0a27 	vmul.f32	s1, s14, s15
 800ce94:	e7b9      	b.n	800ce0a <scalbnf+0x1e>
 800ce96:	bf00      	nop
 800ce98:	ffff3cb0 	.word	0xffff3cb0
 800ce9c:	4c000000 	.word	0x4c000000
 800cea0:	7149f2ca 	.word	0x7149f2ca
 800cea4:	0da24260 	.word	0x0da24260
 800cea8:	33000000 	.word	0x33000000

0800ceac <copysignf>:
 800ceac:	ee10 3a10 	vmov	r3, s0
 800ceb0:	ee10 2a90 	vmov	r2, s1
 800ceb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ceb8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800cebc:	4313      	orrs	r3, r2
 800cebe:	ee00 3a10 	vmov	s0, r3
 800cec2:	4770      	bx	lr

0800cec4 <_init>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	bf00      	nop
 800cec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceca:	bc08      	pop	{r3}
 800cecc:	469e      	mov	lr, r3
 800cece:	4770      	bx	lr

0800ced0 <_fini>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	bf00      	nop
 800ced4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced6:	bc08      	pop	{r3}
 800ced8:	469e      	mov	lr, r3
 800ceda:	4770      	bx	lr
