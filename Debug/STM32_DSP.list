
STM32_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009510  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800993c  0800993c  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800993c  0800993c  0001993c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009944  08009944  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009944  08009944  00019944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009948  08009948  00019948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800994c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b98  20000350  08009c9c  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008ee8  08009c9c  00028ee8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dd5  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000344d  00000000  00000000  00036155  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  000395a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  0003a380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023c97  00000000  00000000  0003afd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f2c9  00000000  00000000  0005ec67  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c658b  00000000  00000000  0006df30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001344bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f90  00000000  00000000  00134538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009688 	.word	0x08009688

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	08009688 	.word	0x08009688

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b090      	sub	sp, #64	; 0x40
 8000584:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000586:	f000 fd0f 	bl	8000fa8 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800058a:	f000 f859 	bl	8000640 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800058e:	f000 f931 	bl	80007f4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000592:	f000 f907 	bl	80007a4 <MX_DMA_Init>
	MX_I2S2_Init();
 8000596:	f000 f8d5 	bl	8000744 <MX_I2S2_Init>
	MX_USB_DEVICE_Init();
 800059a:	f007 f91d 	bl	80077d8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	HAL_I2SEx_TransmitReceive_DMA(&hi2s2, I2S2_txBuffer, I2S2_rxBuffer, I2S2_BUFFER_LENGTH/2);
 800059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a2:	4a1d      	ldr	r2, [pc, #116]	; (8000618 <main+0x98>)
 80005a4:	491d      	ldr	r1, [pc, #116]	; (800061c <main+0x9c>)
 80005a6:	481e      	ldr	r0, [pc, #120]	; (8000620 <main+0xa0>)
 80005a8:	f001 fe24 	bl	80021f4 <HAL_I2SEx_TransmitReceive_DMA>
	HAL_Delay(1500);
 80005ac:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005b0:	f000 fd6c 	bl	800108c <HAL_Delay>
	CDC_Printf("\r\n ================");
 80005b4:	481b      	ldr	r0, [pc, #108]	; (8000624 <main+0xa4>)
 80005b6:	f007 fac9 	bl	8007b4c <CDC_Printf>
	CDC_Printf("\r\n *** DSP V0.0 ***");
 80005ba:	481b      	ldr	r0, [pc, #108]	; (8000628 <main+0xa8>)
 80005bc:	f007 fac6 	bl	8007b4c <CDC_Printf>
	CDC_Printf("\r\n ================\r\n\n");
 80005c0:	481a      	ldr	r0, [pc, #104]	; (800062c <main+0xac>)
 80005c2:	f007 fac3 	bl	8007b4c <CDC_Printf>
	if(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14))
 80005c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ca:	4819      	ldr	r0, [pc, #100]	; (8000630 <main+0xb0>)
 80005cc:	f001 fb9a 	bl	8001d04 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d103      	bne.n	80005de <main+0x5e>
	{
		CDC_Printf("[ OK ] Initialization\r\n");
 80005d6:	4817      	ldr	r0, [pc, #92]	; (8000634 <main+0xb4>)
 80005d8:	f007 fab8 	bl	8007b4c <CDC_Printf>
 80005dc:	e002      	b.n	80005e4 <main+0x64>
	}
	else
	{
		CDC_Printf("[ ER ] Initialization\r\n");
 80005de:	4816      	ldr	r0, [pc, #88]	; (8000638 <main+0xb8>)
 80005e0:	f007 fab4 	bl	8007b4c <CDC_Printf>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ea:	4811      	ldr	r0, [pc, #68]	; (8000630 <main+0xb0>)
 80005ec:	f001 fba2 	bl	8001d34 <HAL_GPIO_WritePin>
		CDC_Scanf("%s", cmd);
 80005f0:	463b      	mov	r3, r7
 80005f2:	4619      	mov	r1, r3
 80005f4:	4811      	ldr	r0, [pc, #68]	; (800063c <main+0xbc>)
 80005f6:	f007 fad1 	bl	8007b9c <CDC_Scanf>
		HAL_Delay(500);
 80005fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005fe:	f000 fd45 	bl	800108c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <main+0xb0>)
 800060a:	f001 fb93 	bl	8001d34 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800060e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000612:	f000 fd3b 	bl	800108c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000616:	e7e5      	b.n	80005e4 <main+0x64>
 8000618:	20004400 	.word	0x20004400
 800061c:	20000400 	.word	0x20000400
 8000620:	200084c0 	.word	0x200084c0
 8000624:	080096a0 	.word	0x080096a0
 8000628:	080096b4 	.word	0x080096b4
 800062c:	080096c8 	.word	0x080096c8
 8000630:	40020c00 	.word	0x40020c00
 8000634:	080096e0 	.word	0x080096e0
 8000638:	080096f8 	.word	0x080096f8
 800063c:	08009710 	.word	0x08009710

08000640 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b098      	sub	sp, #96	; 0x60
 8000644:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000646:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f007 ff2d 	bl	80084ae <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	4b31      	ldr	r3, [pc, #196]	; (800073c <SystemClock_Config+0xfc>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	4a30      	ldr	r2, [pc, #192]	; (800073c <SystemClock_Config+0xfc>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
 8000682:	4b2e      	ldr	r3, [pc, #184]	; (800073c <SystemClock_Config+0xfc>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068e:	2300      	movs	r3, #0
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <SystemClock_Config+0x100>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a2a      	ldr	r2, [pc, #168]	; (8000740 <SystemClock_Config+0x100>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069c:	6013      	str	r3, [r2, #0]
 800069e:	4b28      	ldr	r3, [pc, #160]	; (8000740 <SystemClock_Config+0x100>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006aa:	2301      	movs	r3, #1
 80006ac:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80006be:	2308      	movs	r3, #8
 80006c0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 80006c2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c6:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 fbd5 	bl	8003e84 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 80006e0:	f000 fa88 	bl	8000bf4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 80006e4:	230f      	movs	r3, #15
 80006e6:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fe2e 	bl	8004364 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 800070e:	f000 fa71 	bl	8000bf4 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000712:	2301      	movs	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000716:	23c0      	movs	r3, #192	; 0xc0
 8000718:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	4618      	mov	r0, r3
 8000724:	f003 ffe8 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xf2>
	{
		Error_Handler();
 800072e:	f000 fa61 	bl	8000bf4 <Error_Handler>
	}
}
 8000732:	bf00      	nop
 8000734:	3760      	adds	r7, #96	; 0x60
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_I2S2_Init>:
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2S2_Init 0 */
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */
	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_I2S2_Init+0x54>)
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <MX_I2S2_Init+0x58>)
 800074c:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2S2_Init+0x54>)
 8000750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000754:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_I2S2_Init+0x54>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_I2S2_Init+0x54>)
 800075e:	2203      	movs	r2, #3
 8000760:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_I2S2_Init+0x54>)
 8000764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000768:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_I2S2_Init+0x54>)
 800076c:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <MX_I2S2_Init+0x5c>)
 800076e:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_I2S2_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_I2S2_Init+0x54>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_I2S2_Init+0x54>)
 800077e:	2201      	movs	r2, #1
 8000780:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_I2S2_Init+0x54>)
 8000784:	f001 faf0 	bl	8001d68 <HAL_I2S_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_I2S2_Init+0x4e>
	{
		Error_Handler();
 800078e:	f000 fa31 	bl	8000bf4 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */
	/* USER CODE END I2S2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200084c0 	.word	0x200084c0
 800079c:	40003800 	.word	0x40003800
 80007a0:	00017700 	.word	0x00017700

080007a4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_DMA_Init+0x4c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <MX_DMA_Init+0x4c>)
 80007b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_DMA_Init+0x4c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	200e      	movs	r0, #14
 80007cc:	f000 fd5b 	bl	8001286 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007d0:	200e      	movs	r0, #14
 80007d2:	f000 fd74 	bl	80012be <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	200f      	movs	r0, #15
 80007dc:	f000 fd53 	bl	8001286 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007e0:	200f      	movs	r0, #15
 80007e2:	f000 fd6c 	bl	80012be <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	4b81      	ldr	r3, [pc, #516]	; (8000a14 <MX_GPIO_Init+0x220>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a80      	ldr	r2, [pc, #512]	; (8000a14 <MX_GPIO_Init+0x220>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b7e      	ldr	r3, [pc, #504]	; (8000a14 <MX_GPIO_Init+0x220>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	4b7a      	ldr	r3, [pc, #488]	; (8000a14 <MX_GPIO_Init+0x220>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a79      	ldr	r2, [pc, #484]	; (8000a14 <MX_GPIO_Init+0x220>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <MX_GPIO_Init+0x220>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b73      	ldr	r3, [pc, #460]	; (8000a14 <MX_GPIO_Init+0x220>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a72      	ldr	r2, [pc, #456]	; (8000a14 <MX_GPIO_Init+0x220>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b70      	ldr	r3, [pc, #448]	; (8000a14 <MX_GPIO_Init+0x220>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b6c      	ldr	r3, [pc, #432]	; (8000a14 <MX_GPIO_Init+0x220>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a6b      	ldr	r2, [pc, #428]	; (8000a14 <MX_GPIO_Init+0x220>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b69      	ldr	r3, [pc, #420]	; (8000a14 <MX_GPIO_Init+0x220>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b65      	ldr	r3, [pc, #404]	; (8000a14 <MX_GPIO_Init+0x220>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a64      	ldr	r2, [pc, #400]	; (8000a14 <MX_GPIO_Init+0x220>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b62      	ldr	r3, [pc, #392]	; (8000a14 <MX_GPIO_Init+0x220>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b5e      	ldr	r3, [pc, #376]	; (8000a14 <MX_GPIO_Init+0x220>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a5d      	ldr	r2, [pc, #372]	; (8000a14 <MX_GPIO_Init+0x220>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b5b      	ldr	r3, [pc, #364]	; (8000a14 <MX_GPIO_Init+0x220>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2108      	movs	r1, #8
 80008b6:	4858      	ldr	r0, [pc, #352]	; (8000a18 <MX_GPIO_Init+0x224>)
 80008b8:	f001 fa3c 	bl	8001d34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2101      	movs	r1, #1
 80008c0:	4856      	ldr	r0, [pc, #344]	; (8000a1c <MX_GPIO_Init+0x228>)
 80008c2:	f001 fa37 	bl	8001d34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008cc:	4854      	ldr	r0, [pc, #336]	; (8000a20 <MX_GPIO_Init+0x22c>)
 80008ce:	f001 fa31 	bl	8001d34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008d2:	2308      	movs	r3, #8
 80008d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	484b      	ldr	r0, [pc, #300]	; (8000a18 <MX_GPIO_Init+0x224>)
 80008ea:	f001 f871 	bl	80019d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4845      	ldr	r0, [pc, #276]	; (8000a1c <MX_GPIO_Init+0x228>)
 8000906:	f001 f863 	bl	80019d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800090a:	2301      	movs	r3, #1
 800090c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800090e:	4b45      	ldr	r3, [pc, #276]	; (8000a24 <MX_GPIO_Init+0x230>)
 8000910:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4842      	ldr	r0, [pc, #264]	; (8000a28 <MX_GPIO_Init+0x234>)
 800091e:	f001 f857 	bl	80019d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000922:	2310      	movs	r3, #16
 8000924:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000932:	2306      	movs	r3, #6
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	483a      	ldr	r0, [pc, #232]	; (8000a28 <MX_GPIO_Init+0x234>)
 800093e:	f001 f847 	bl	80019d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 8000942:	23e0      	movs	r3, #224	; 0xe0
 8000944:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4832      	ldr	r0, [pc, #200]	; (8000a28 <MX_GPIO_Init+0x234>)
 800095e:	f001 f837 	bl	80019d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000962:	2304      	movs	r3, #4
 8000964:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	482d      	ldr	r0, [pc, #180]	; (8000a2c <MX_GPIO_Init+0x238>)
 8000976:	f001 f82b 	bl	80019d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 800097a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800097e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4823      	ldr	r0, [pc, #140]	; (8000a20 <MX_GPIO_Init+0x22c>)
 8000994:	f001 f81c 	bl	80019d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 8000998:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800099c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009aa:	2306      	movs	r3, #6
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4819      	ldr	r0, [pc, #100]	; (8000a1c <MX_GPIO_Init+0x228>)
 80009b6:	f001 f80b 	bl	80019d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ba:	2320      	movs	r3, #32
 80009bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4814      	ldr	r0, [pc, #80]	; (8000a20 <MX_GPIO_Init+0x22c>)
 80009ce:	f000 ffff 	bl	80019d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 80009d2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d8:	2312      	movs	r3, #18
 80009da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009dc:	2301      	movs	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e4:	2304      	movs	r3, #4
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <MX_GPIO_Init+0x238>)
 80009f0:	f000 ffee 	bl	80019d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <MX_GPIO_Init+0x230>)
 80009fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_GPIO_Init+0x224>)
 8000a08:	f000 ffe2 	bl	80019d0 <HAL_GPIO_Init>

}
 8000a0c:	bf00      	nop
 8000a0e:	3730      	adds	r7, #48	; 0x30
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	10120000 	.word	0x10120000
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400

08000a30 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	3b04      	subs	r3, #4
 8000a40:	6018      	str	r0, [r3, #0]
	int32_t L_Channel[I2S2_BUFFER_LENGTH/8];
	int32_t R_Channel[I2S2_BUFFER_LENGTH/8];
	PmodI2S2_AudioRead_24b(I2S2_rxBuffer, L_Channel, R_Channel, I2S2_BUFFER_LENGTH/2);
 8000a42:	f107 0208 	add.w	r2, r7, #8
 8000a46:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000a4a:	f101 0108 	add.w	r1, r1, #8
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	480a      	ldr	r0, [pc, #40]	; (8000a7c <HAL_I2SEx_TxRxHalfCpltCallback+0x4c>)
 8000a54:	f000 f840 	bl	8000ad8 <PmodI2S2_AudioRead_24b>
	/*
	 * PROCESS HERE
	 */
	PmodI2S2_AudioWrite_24b(I2S2_txBuffer, L_Channel, R_Channel, I2S2_BUFFER_LENGTH/2);
 8000a58:	f107 0208 	add.w	r2, r7, #8
 8000a5c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000a60:	f101 0108 	add.w	r1, r1, #8
 8000a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <HAL_I2SEx_TxRxHalfCpltCallback+0x50>)
 8000a6a:	f000 f876 	bl	8000b5a <PmodI2S2_AudioWrite_24b>
}
 8000a6e:	bf00      	nop
 8000a70:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20004400 	.word	0x20004400
 8000a80:	20000400 	.word	0x20000400

08000a84 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	3b04      	subs	r3, #4
 8000a94:	6018      	str	r0, [r3, #0]
	int32_t L_Channel[I2S2_BUFFER_LENGTH/8];
	int32_t R_Channel[I2S2_BUFFER_LENGTH/8];
	PmodI2S2_AudioRead_24b(&I2S2_rxBuffer[I2S2_BUFFER_LENGTH/2], L_Channel, R_Channel, I2S2_BUFFER_LENGTH/2);
 8000a96:	f107 0208 	add.w	r2, r7, #8
 8000a9a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000a9e:	f101 0108 	add.w	r1, r1, #8
 8000aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa6:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <HAL_I2SEx_TxRxCpltCallback+0x4c>)
 8000aa8:	f000 f816 	bl	8000ad8 <PmodI2S2_AudioRead_24b>
	/*
	 * PROCESS HERE
	 */
	PmodI2S2_AudioWrite_24b(&I2S2_txBuffer[I2S2_BUFFER_LENGTH/2], L_Channel, R_Channel, I2S2_BUFFER_LENGTH/2);
 8000aac:	f107 0208 	add.w	r2, r7, #8
 8000ab0:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8000ab4:	f101 0108 	add.w	r1, r1, #8
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <HAL_I2SEx_TxRxCpltCallback+0x50>)
 8000abe:	f000 f84c 	bl	8000b5a <PmodI2S2_AudioWrite_24b>
}
 8000ac2:	bf00      	nop
 8000ac4:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20006400 	.word	0x20006400
 8000ad4:	20002400 	.word	0x20002400

08000ad8 <PmodI2S2_AudioRead_24b>:

void PmodI2S2_AudioRead_24b(uint16_t * rxBuf, int32_t * L_Channel, int32_t * R_Channel, uint32_t Len)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	603b      	str	r3, [r7, #0]
	for (uint32_t i = 0; i+3 < Len; i+=4)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	e02b      	b.n	8000b44 <PmodI2S2_AudioRead_24b+0x6c>
	{
		L_Channel[i/4] = (int32_t) (rxBuf[i]   << 16) | rxBuf[i+1];
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	041a      	lsls	r2, r3, #16
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3301      	adds	r3, #1
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	68f9      	ldr	r1, [r7, #12]
 8000b00:	440b      	add	r3, r1
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f023 0303 	bic.w	r3, r3, #3
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	440b      	add	r3, r1
 8000b10:	4302      	orrs	r2, r0
 8000b12:	601a      	str	r2, [r3, #0]
		R_Channel[i/4] = (int32_t) (rxBuf[i+2] << 16) | rxBuf[i+3];
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	3302      	adds	r3, #2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	041a      	lsls	r2, r3, #16
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3303      	adds	r3, #3
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	68f9      	ldr	r1, [r7, #12]
 8000b2a:	440b      	add	r3, r1
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f023 0303 	bic.w	r3, r3, #3
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	440b      	add	r3, r1
 8000b3a:	4302      	orrs	r2, r0
 8000b3c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i+3 < Len; i+=4)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3304      	adds	r3, #4
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3303      	adds	r3, #3
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d8ce      	bhi.n	8000aec <PmodI2S2_AudioRead_24b+0x14>
	}
}
 8000b4e:	bf00      	nop
 8000b50:	371c      	adds	r7, #28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PmodI2S2_AudioWrite_24b>:
void PmodI2S2_AudioWrite_24b(uint16_t * txBuf, int32_t * L_Channel, int32_t * R_Channel, uint32_t Len)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b087      	sub	sp, #28
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	603b      	str	r3, [r7, #0]
	for (uint32_t i = 0; i+3 < Len; i+=4)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e037      	b.n	8000bde <PmodI2S2_AudioWrite_24b+0x84>
	{
		txBuf[i]   = (L_Channel[i/4] >> 16) & 0xFFFF;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f023 0303 	bic.w	r3, r3, #3
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	4413      	add	r3, r2
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	0c19      	lsrs	r1, r3, #16
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	4413      	add	r3, r2
 8000b84:	b28a      	uxth	r2, r1
 8000b86:	801a      	strh	r2, [r3, #0]
	    txBuf[i+1] =  L_Channel[i/4] & 0xFFFF;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	f023 0303 	bic.w	r3, r3, #3
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	4413      	add	r3, r2
 8000b92:	6819      	ldr	r1, [r3, #0]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3301      	adds	r3, #1
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b28a      	uxth	r2, r1
 8000ba0:	801a      	strh	r2, [r3, #0]
	    txBuf[i+2] = (R_Channel[i/4] >> 16) & 0xFFFF;
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f023 0303 	bic.w	r3, r3, #3
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	0c19      	lsrs	r1, r3, #16
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b28a      	uxth	r2, r1
 8000bbc:	801a      	strh	r2, [r3, #0]
	    txBuf[i+3] =  R_Channel[i/4] & 0xFFFF;
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f023 0303 	bic.w	r3, r3, #3
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	6819      	ldr	r1, [r3, #0]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3303      	adds	r3, #3
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b28a      	uxth	r2, r1
 8000bd6:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i+3 < Len; i+=4)
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3304      	adds	r3, #4
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3303      	adds	r3, #3
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d8c2      	bhi.n	8000b6e <PmodI2S2_AudioWrite_24b+0x14>
	}
}
 8000be8:	bf00      	nop
 8000bea:	371c      	adds	r7, #28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bfe:	4802      	ldr	r0, [pc, #8]	; (8000c08 <Error_Handler+0x14>)
 8000c00:	f001 f898 	bl	8001d34 <HAL_GPIO_WritePin>
	/* USER CODE END Error_Handler_Debug */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40020c00 	.word	0x40020c00

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c4a:	2007      	movs	r0, #7
 8000c4c:	f000 fb10 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a62      	ldr	r2, [pc, #392]	; (8000e04 <HAL_I2S_MspInit+0x1a8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	f040 80be 	bne.w	8000dfc <HAL_I2S_MspInit+0x1a0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	4b60      	ldr	r3, [pc, #384]	; (8000e08 <HAL_I2S_MspInit+0x1ac>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a5f      	ldr	r2, [pc, #380]	; (8000e08 <HAL_I2S_MspInit+0x1ac>)
 8000c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b5d      	ldr	r3, [pc, #372]	; (8000e08 <HAL_I2S_MspInit+0x1ac>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b59      	ldr	r3, [pc, #356]	; (8000e08 <HAL_I2S_MspInit+0x1ac>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	4a58      	ldr	r2, [pc, #352]	; (8000e08 <HAL_I2S_MspInit+0x1ac>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cac:	4b56      	ldr	r3, [pc, #344]	; (8000e08 <HAL_I2S_MspInit+0x1ac>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b52      	ldr	r3, [pc, #328]	; (8000e08 <HAL_I2S_MspInit+0x1ac>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	4a51      	ldr	r2, [pc, #324]	; (8000e08 <HAL_I2S_MspInit+0x1ac>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc8:	4b4f      	ldr	r3, [pc, #316]	; (8000e08 <HAL_I2S_MspInit+0x1ac>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000ce4:	2306      	movs	r3, #6
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4847      	ldr	r0, [pc, #284]	; (8000e0c <HAL_I2S_MspInit+0x1b0>)
 8000cf0:	f000 fe6e 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin|GPIO_PIN_6;
 8000cf4:	2348      	movs	r3, #72	; 0x48
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d04:	2305      	movs	r3, #5
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	483f      	ldr	r0, [pc, #252]	; (8000e0c <HAL_I2S_MspInit+0x1b0>)
 8000d10:	f000 fe5e 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d26:	2305      	movs	r3, #5
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4837      	ldr	r0, [pc, #220]	; (8000e10 <HAL_I2S_MspInit+0x1b4>)
 8000d32:	f000 fe4d 	bl	80019d0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000d36:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <HAL_I2S_MspInit+0x1b8>)
 8000d38:	4a37      	ldr	r2, [pc, #220]	; (8000e18 <HAL_I2S_MspInit+0x1bc>)
 8000d3a:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000d3c:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <HAL_I2S_MspInit+0x1b8>)
 8000d3e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d42:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d44:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <HAL_I2S_MspInit+0x1b8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4a:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <HAL_I2S_MspInit+0x1b8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d50:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <HAL_I2S_MspInit+0x1b8>)
 8000d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d56:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d58:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <HAL_I2S_MspInit+0x1b8>)
 8000d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d5e:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d60:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <HAL_I2S_MspInit+0x1b8>)
 8000d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d66:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000d68:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <HAL_I2S_MspInit+0x1b8>)
 8000d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d6e:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d70:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <HAL_I2S_MspInit+0x1b8>)
 8000d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d76:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <HAL_I2S_MspInit+0x1b8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000d7e:	4825      	ldr	r0, [pc, #148]	; (8000e14 <HAL_I2S_MspInit+0x1b8>)
 8000d80:	f000 fab8 	bl	80012f4 <HAL_DMA_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8000d8a:	f7ff ff33 	bl	8000bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a20      	ldr	r2, [pc, #128]	; (8000e14 <HAL_I2S_MspInit+0x1b8>)
 8000d92:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d94:	4a1f      	ldr	r2, [pc, #124]	; (8000e14 <HAL_I2S_MspInit+0x1b8>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <HAL_I2S_MspInit+0x1c0>)
 8000d9c:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <HAL_I2S_MspInit+0x1c4>)
 8000d9e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <HAL_I2S_MspInit+0x1c0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <HAL_I2S_MspInit+0x1c0>)
 8000da8:	2240      	movs	r2, #64	; 0x40
 8000daa:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <HAL_I2S_MspInit+0x1c0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <HAL_I2S_MspInit+0x1c0>)
 8000db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_I2S_MspInit+0x1c0>)
 8000dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dc0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_I2S_MspInit+0x1c0>)
 8000dc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_I2S_MspInit+0x1c0>)
 8000dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_I2S_MspInit+0x1c0>)
 8000dd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dd8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_I2S_MspInit+0x1c0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000de0:	480e      	ldr	r0, [pc, #56]	; (8000e1c <HAL_I2S_MspInit+0x1c0>)
 8000de2:	f000 fa87 	bl	80012f4 <HAL_DMA_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 8000dec:	f7ff ff02 	bl	8000bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_I2S_MspInit+0x1c0>)
 8000df4:	639a      	str	r2, [r3, #56]	; 0x38
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_I2S_MspInit+0x1c0>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40003800 	.word	0x40003800
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020800 	.word	0x40020800
 8000e10:	40020400 	.word	0x40020400
 8000e14:	20008400 	.word	0x20008400
 8000e18:	40026058 	.word	0x40026058
 8000e1c:	20008460 	.word	0x20008460
 8000e20:	40026070 	.word	0x40026070

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler+0x4>

08000e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e78:	f000 f8e8 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <DMA1_Stream3_IRQHandler+0x10>)
 8000e86:	f000 fb3b 	bl	8001500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20008400 	.word	0x20008400

08000e94 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <DMA1_Stream4_IRQHandler+0x10>)
 8000e9a:	f000 fb31 	bl	8001500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20008460 	.word	0x20008460

08000ea8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <OTG_FS_IRQHandler+0x10>)
 8000eae:	f001 ffb5 	bl	8002e1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20008adc 	.word	0x20008adc

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f007 fa9a 	bl	8008424 <__errno>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20020000 	.word	0x20020000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	2000036c 	.word	0x2000036c
 8000f24:	20008ee8 	.word	0x20008ee8

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <SystemInit+0x28>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <SystemInit+0x28>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SystemInit+0x28>)
 8000f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f42:	609a      	str	r2, [r3, #8]
#endif
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f5a:	e003      	b.n	8000f64 <LoopCopyDataInit>

08000f5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f62:	3104      	adds	r1, #4

08000f64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f6c:	d3f6      	bcc.n	8000f5c <CopyDataInit>
  ldr  r2, =_sbss
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f70:	e002      	b.n	8000f78 <LoopFillZerobss>

08000f72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f74:	f842 3b04 	str.w	r3, [r2], #4

08000f78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f7c:	d3f9      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f7e:	f7ff ffd3 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f82:	f007 fa55 	bl	8008430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f86:	f7ff fafb 	bl	8000580 <main>
  bx  lr    
 8000f8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f90:	0800994c 	.word	0x0800994c
  ldr  r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f98:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 8000f9c:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 8000fa0:	20008ee8 	.word	0x20008ee8

08000fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f94d 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fe16 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f965 	bl	80012da <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001028:	f000 f92d 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000000 	.word	0x20000000
 8001044:	20000008 	.word	0x20000008
 8001048:	20000004 	.word	0x20000004

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008
 8001070:	20008508 	.word	0x20008508

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20008508 	.word	0x20008508

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010a4:	d005      	beq.n	80010b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_Delay+0x40>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b2:	bf00      	nop
 80010b4:	f7ff ffde 	bl	8001074 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f7      	bhi.n	80010b4 <HAL_Delay+0x28>
  {
  }
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000008 	.word	0x20000008

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff29 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff3e 	bl	8001118 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff8e 	bl	80011c4 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff31 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa2 	bl	800122c <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff feb8 	bl	8001074 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e099      	b.n	8001444 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2202      	movs	r2, #2
 800131c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001330:	e00f      	b.n	8001352 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001332:	f7ff fe9f 	bl	8001074 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b05      	cmp	r3, #5
 800133e:	d908      	bls.n	8001352 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2220      	movs	r2, #32
 8001344:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2203      	movs	r2, #3
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e078      	b.n	8001444 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1e8      	bne.n	8001332 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <HAL_DMA_Init+0x158>)
 800136c:	4013      	ands	r3, r2
 800136e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d107      	bne.n	80013bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	4313      	orrs	r3, r2
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f023 0307 	bic.w	r3, r3, #7
 80013d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	4313      	orrs	r3, r2
 80013dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d117      	bne.n	8001416 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00e      	beq.n	8001416 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 fa6f 	bl	80018dc <DMA_CheckFifoParam>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2240      	movs	r2, #64	; 0x40
 8001408:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001412:	2301      	movs	r3, #1
 8001414:	e016      	b.n	8001444 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fa26 	bl	8001870 <DMA_CalcBaseAndBitshift>
 8001424:	4603      	mov	r3, r0
 8001426:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142c:	223f      	movs	r2, #63	; 0x3f
 800142e:	409a      	lsls	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	f010803f 	.word	0xf010803f

08001450 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800146e:	2b01      	cmp	r3, #1
 8001470:	d101      	bne.n	8001476 <HAL_DMA_Start_IT+0x26>
 8001472:	2302      	movs	r3, #2
 8001474:	e040      	b.n	80014f8 <HAL_DMA_Start_IT+0xa8>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b01      	cmp	r3, #1
 8001488:	d12f      	bne.n	80014ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2202      	movs	r2, #2
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 f9b8 	bl	8001814 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a8:	223f      	movs	r2, #63	; 0x3f
 80014aa:	409a      	lsls	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0216 	orr.w	r2, r2, #22
 80014be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0208 	orr.w	r2, r2, #8
 80014d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e005      	b.n	80014f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014f2:	2302      	movs	r3, #2
 80014f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800150c:	4b92      	ldr	r3, [pc, #584]	; (8001758 <HAL_DMA_IRQHandler+0x258>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a92      	ldr	r2, [pc, #584]	; (800175c <HAL_DMA_IRQHandler+0x25c>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	0a9b      	lsrs	r3, r3, #10
 8001518:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152a:	2208      	movs	r2, #8
 800152c:	409a      	lsls	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d01a      	beq.n	800156c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0204 	bic.w	r2, r2, #4
 8001552:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001558:	2208      	movs	r2, #8
 800155a:	409a      	lsls	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001564:	f043 0201 	orr.w	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001570:	2201      	movs	r2, #1
 8001572:	409a      	lsls	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d012      	beq.n	80015a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00b      	beq.n	80015a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158e:	2201      	movs	r2, #1
 8001590:	409a      	lsls	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159a:	f043 0202 	orr.w	r2, r3, #2
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a6:	2204      	movs	r2, #4
 80015a8:	409a      	lsls	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4013      	ands	r3, r2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d012      	beq.n	80015d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00b      	beq.n	80015d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c4:	2204      	movs	r2, #4
 80015c6:	409a      	lsls	r2, r3
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d0:	f043 0204 	orr.w	r2, r3, #4
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015dc:	2210      	movs	r2, #16
 80015de:	409a      	lsls	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d043      	beq.n	8001670 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d03c      	beq.n	8001670 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fa:	2210      	movs	r2, #16
 80015fc:	409a      	lsls	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d018      	beq.n	8001642 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d108      	bne.n	8001630 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	2b00      	cmp	r3, #0
 8001624:	d024      	beq.n	8001670 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
 800162e:	e01f      	b.n	8001670 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001634:	2b00      	cmp	r3, #0
 8001636:	d01b      	beq.n	8001670 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	4798      	blx	r3
 8001640:	e016      	b.n	8001670 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d107      	bne.n	8001660 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0208 	bic.w	r2, r2, #8
 800165e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	2220      	movs	r2, #32
 8001676:	409a      	lsls	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 808e 	beq.w	800179e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8086 	beq.w	800179e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001696:	2220      	movs	r2, #32
 8001698:	409a      	lsls	r2, r3
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	d136      	bne.n	8001718 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0216 	bic.w	r2, r2, #22
 80016b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d103      	bne.n	80016da <HAL_DMA_IRQHandler+0x1da>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d007      	beq.n	80016ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0208 	bic.w	r2, r2, #8
 80016e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	223f      	movs	r2, #63	; 0x3f
 80016f0:	409a      	lsls	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800170a:	2b00      	cmp	r3, #0
 800170c:	d07d      	beq.n	800180a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	4798      	blx	r3
        }
        return;
 8001716:	e078      	b.n	800180a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d01c      	beq.n	8001760 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d108      	bne.n	8001746 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001738:	2b00      	cmp	r3, #0
 800173a:	d030      	beq.n	800179e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	4798      	blx	r3
 8001744:	e02b      	b.n	800179e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800174a:	2b00      	cmp	r3, #0
 800174c:	d027      	beq.n	800179e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
 8001756:	e022      	b.n	800179e <HAL_DMA_IRQHandler+0x29e>
 8001758:	20000000 	.word	0x20000000
 800175c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10f      	bne.n	800178e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0210 	bic.w	r2, r2, #16
 800177c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d032      	beq.n	800180c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d022      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2205      	movs	r2, #5
 80017b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0201 	bic.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	3301      	adds	r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d307      	bcc.n	80017e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f2      	bne.n	80017ca <HAL_DMA_IRQHandler+0x2ca>
 80017e4:	e000      	b.n	80017e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017e6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4798      	blx	r3
 8001808:	e000      	b.n	800180c <HAL_DMA_IRQHandler+0x30c>
        return;
 800180a:	bf00      	nop
    }
  }
}
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop

08001814 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001830:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b40      	cmp	r3, #64	; 0x40
 8001840:	d108      	bne.n	8001854 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001852:	e007      	b.n	8001864 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	60da      	str	r2, [r3, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	3b10      	subs	r3, #16
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <DMA_CalcBaseAndBitshift+0x64>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	091b      	lsrs	r3, r3, #4
 8001888:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800188a:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <DMA_CalcBaseAndBitshift+0x68>)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d909      	bls.n	80018b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018a6:	f023 0303 	bic.w	r3, r3, #3
 80018aa:	1d1a      	adds	r2, r3, #4
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	659a      	str	r2, [r3, #88]	; 0x58
 80018b0:	e007      	b.n	80018c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018ba:	f023 0303 	bic.w	r3, r3, #3
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	aaaaaaab 	.word	0xaaaaaaab
 80018d8:	08009778 	.word	0x08009778

080018dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d11f      	bne.n	8001936 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d855      	bhi.n	80019a8 <DMA_CheckFifoParam+0xcc>
 80018fc:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <DMA_CheckFifoParam+0x28>)
 80018fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001902:	bf00      	nop
 8001904:	08001915 	.word	0x08001915
 8001908:	08001927 	.word	0x08001927
 800190c:	08001915 	.word	0x08001915
 8001910:	080019a9 	.word	0x080019a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d045      	beq.n	80019ac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001924:	e042      	b.n	80019ac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800192e:	d13f      	bne.n	80019b0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001934:	e03c      	b.n	80019b0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800193e:	d121      	bne.n	8001984 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b03      	cmp	r3, #3
 8001944:	d836      	bhi.n	80019b4 <DMA_CheckFifoParam+0xd8>
 8001946:	a201      	add	r2, pc, #4	; (adr r2, 800194c <DMA_CheckFifoParam+0x70>)
 8001948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194c:	0800195d 	.word	0x0800195d
 8001950:	08001963 	.word	0x08001963
 8001954:	0800195d 	.word	0x0800195d
 8001958:	08001975 	.word	0x08001975
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
      break;
 8001960:	e02f      	b.n	80019c2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d024      	beq.n	80019b8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001972:	e021      	b.n	80019b8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800197c:	d11e      	bne.n	80019bc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001982:	e01b      	b.n	80019bc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d902      	bls.n	8001990 <DMA_CheckFifoParam+0xb4>
 800198a:	2b03      	cmp	r3, #3
 800198c:	d003      	beq.n	8001996 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800198e:	e018      	b.n	80019c2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
      break;
 8001994:	e015      	b.n	80019c2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00e      	beq.n	80019c0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
      break;
 80019a6:	e00b      	b.n	80019c0 <DMA_CheckFifoParam+0xe4>
      break;
 80019a8:	bf00      	nop
 80019aa:	e00a      	b.n	80019c2 <DMA_CheckFifoParam+0xe6>
      break;
 80019ac:	bf00      	nop
 80019ae:	e008      	b.n	80019c2 <DMA_CheckFifoParam+0xe6>
      break;
 80019b0:	bf00      	nop
 80019b2:	e006      	b.n	80019c2 <DMA_CheckFifoParam+0xe6>
      break;
 80019b4:	bf00      	nop
 80019b6:	e004      	b.n	80019c2 <DMA_CheckFifoParam+0xe6>
      break;
 80019b8:	bf00      	nop
 80019ba:	e002      	b.n	80019c2 <DMA_CheckFifoParam+0xe6>
      break;   
 80019bc:	bf00      	nop
 80019be:	e000      	b.n	80019c2 <DMA_CheckFifoParam+0xe6>
      break;
 80019c0:	bf00      	nop
    }
  } 
  
  return status; 
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e16b      	b.n	8001cc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f040 815a 	bne.w	8001cbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d00b      	beq.n	8001a2a <HAL_GPIO_Init+0x5a>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d007      	beq.n	8001a2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a1e:	2b11      	cmp	r3, #17
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b12      	cmp	r3, #18
 8001a28:	d130      	bne.n	8001a8c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 0201 	and.w	r2, r3, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0xfc>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b12      	cmp	r3, #18
 8001aca:	d123      	bne.n	8001b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	69b9      	ldr	r1, [r7, #24]
 8001b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0203 	and.w	r2, r3, #3
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80b4 	beq.w	8001cbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_GPIO_Init+0x308>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a5e      	ldr	r2, [pc, #376]	; (8001cd8 <HAL_GPIO_Init+0x308>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <HAL_GPIO_Init+0x308>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b72:	4a5a      	ldr	r2, [pc, #360]	; (8001cdc <HAL_GPIO_Init+0x30c>)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a51      	ldr	r2, [pc, #324]	; (8001ce0 <HAL_GPIO_Init+0x310>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d02b      	beq.n	8001bf6 <HAL_GPIO_Init+0x226>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a50      	ldr	r2, [pc, #320]	; (8001ce4 <HAL_GPIO_Init+0x314>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d025      	beq.n	8001bf2 <HAL_GPIO_Init+0x222>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_GPIO_Init+0x318>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01f      	beq.n	8001bee <HAL_GPIO_Init+0x21e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <HAL_GPIO_Init+0x31c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_GPIO_Init+0x21a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_GPIO_Init+0x320>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x216>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4c      	ldr	r2, [pc, #304]	; (8001cf4 <HAL_GPIO_Init+0x324>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x212>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <HAL_GPIO_Init+0x328>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x20e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4a      	ldr	r2, [pc, #296]	; (8001cfc <HAL_GPIO_Init+0x32c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x20a>
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	e00e      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bda:	2308      	movs	r3, #8
 8001bdc:	e00c      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bde:	2306      	movs	r3, #6
 8001be0:	e00a      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001be2:	2305      	movs	r3, #5
 8001be4:	e008      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e004      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e002      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_Init+0x228>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	f002 0203 	and.w	r2, r2, #3
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4093      	lsls	r3, r2
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c08:	4934      	ldr	r1, [pc, #208]	; (8001cdc <HAL_GPIO_Init+0x30c>)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c16:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c3a:	4a31      	ldr	r2, [pc, #196]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c40:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c64:	4a26      	ldr	r2, [pc, #152]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c6a:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb8:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <HAL_GPIO_Init+0x330>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	f67f ae90 	bls.w	80019ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ccc:	bf00      	nop
 8001cce:	3724      	adds	r7, #36	; 0x24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40021400 	.word	0x40021400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40021c00 	.word	0x40021c00
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e001      	b.n	8001d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
 8001d40:	4613      	mov	r3, r2
 8001d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d44:	787b      	ldrb	r3, [r7, #1]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d50:	e003      	b.n	8001d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	041a      	lsls	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	619a      	str	r2, [r3, #24]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e128      	b.n	8001fcc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a90      	ldr	r2, [pc, #576]	; (8001fd4 <HAL_I2S_Init+0x26c>)
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7fe ff61 	bl	8000c5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001db0:	f023 030f 	bic.w	r3, r3, #15
 8001db4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d060      	beq.n	8001e88 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001dce:	2310      	movs	r3, #16
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e001      	b.n	8001dd8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d802      	bhi.n	8001de6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f002 fd68 	bl	80048bc <HAL_RCCEx_GetPeriphCLKFreq>
 8001dec:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df6:	d125      	bne.n	8001e44 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d010      	beq.n	8001e22 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	461a      	mov	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	3305      	adds	r3, #5
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	e01f      	b.n	8001e62 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	461a      	mov	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	3305      	adds	r3, #5
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	e00e      	b.n	8001e62 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	461a      	mov	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	3305      	adds	r3, #5
 8001e60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4a5c      	ldr	r2, [pc, #368]	; (8001fd8 <HAL_I2S_Init+0x270>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	08db      	lsrs	r3, r3, #3
 8001e6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	085b      	lsrs	r3, r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	e003      	b.n	8001e90 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d902      	bls.n	8001e9c <HAL_I2S_Init+0x134>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	2bff      	cmp	r3, #255	; 0xff
 8001e9a:	d907      	bls.n	8001eac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	f043 0210 	orr.w	r2, r3, #16
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e08f      	b.n	8001fcc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	ea42 0103 	orr.w	r1, r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001eca:	f023 030f 	bic.w	r3, r3, #15
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6851      	ldr	r1, [r2, #4]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6892      	ldr	r2, [r2, #8]
 8001ed6:	4311      	orrs	r1, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68d2      	ldr	r2, [r2, #12]
 8001edc:	4311      	orrs	r1, r2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6992      	ldr	r2, [r2, #24]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d161      	bne.n	8001fbc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a38      	ldr	r2, [pc, #224]	; (8001fdc <HAL_I2S_Init+0x274>)
 8001efc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a37      	ldr	r2, [pc, #220]	; (8001fe0 <HAL_I2S_Init+0x278>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_I2S_Init+0x1a4>
 8001f08:	4b36      	ldr	r3, [pc, #216]	; (8001fe4 <HAL_I2S_Init+0x27c>)
 8001f0a:	e001      	b.n	8001f10 <HAL_I2S_Init+0x1a8>
 8001f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	4932      	ldr	r1, [pc, #200]	; (8001fe0 <HAL_I2S_Init+0x278>)
 8001f18:	428a      	cmp	r2, r1
 8001f1a:	d101      	bne.n	8001f20 <HAL_I2S_Init+0x1b8>
 8001f1c:	4a31      	ldr	r2, [pc, #196]	; (8001fe4 <HAL_I2S_Init+0x27c>)
 8001f1e:	e001      	b.n	8001f24 <HAL_I2S_Init+0x1bc>
 8001f20:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001f24:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f28:	f023 030f 	bic.w	r3, r3, #15
 8001f2c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a2b      	ldr	r2, [pc, #172]	; (8001fe0 <HAL_I2S_Init+0x278>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d101      	bne.n	8001f3c <HAL_I2S_Init+0x1d4>
 8001f38:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <HAL_I2S_Init+0x27c>)
 8001f3a:	e001      	b.n	8001f40 <HAL_I2S_Init+0x1d8>
 8001f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f40:	2202      	movs	r2, #2
 8001f42:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a25      	ldr	r2, [pc, #148]	; (8001fe0 <HAL_I2S_Init+0x278>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <HAL_I2S_Init+0x1ea>
 8001f4e:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_I2S_Init+0x27c>)
 8001f50:	e001      	b.n	8001f56 <HAL_I2S_Init+0x1ee>
 8001f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f62:	d003      	beq.n	8001f6c <HAL_I2S_Init+0x204>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d103      	bne.n	8001f74 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	e001      	b.n	8001f78 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	b299      	uxth	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001f8e:	4303      	orrs	r3, r0
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	430b      	orrs	r3, r1
 8001f94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	897b      	ldrh	r3, [r7, #10]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fa4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HAL_I2S_Init+0x278>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_I2S_Init+0x24c>
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <HAL_I2S_Init+0x27c>)
 8001fb2:	e001      	b.n	8001fb8 <HAL_I2S_Init+0x250>
 8001fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fb8:	897a      	ldrh	r2, [r7, #10]
 8001fba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	080020df 	.word	0x080020df
 8001fd8:	cccccccd 	.word	0xcccccccd
 8001fdc:	08002509 	.word	0x08002509
 8001fe0:	40003800 	.word	0x40003800
 8001fe4:	40003400 	.word	0x40003400

08001fe8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	881a      	ldrh	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	1c9a      	adds	r2, r3, #2
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10e      	bne.n	8002078 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002068:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffb8 	bl	8001fe8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002092:	b292      	uxth	r2, r2
 8002094:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	1c9a      	adds	r2, r3, #2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10e      	bne.n	80020d6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020c6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff93 	bl	8001ffc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d13a      	bne.n	8002170 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d109      	bne.n	8002118 <I2S_IRQHandler+0x3a>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210e:	2b40      	cmp	r3, #64	; 0x40
 8002110:	d102      	bne.n	8002118 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffb4 	bl	8002080 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d126      	bne.n	8002170 <I2S_IRQHandler+0x92>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b20      	cmp	r3, #32
 800212e:	d11f      	bne.n	8002170 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800213e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f043 0202 	orr.w	r2, r3, #2
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ff50 	bl	8002010 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b03      	cmp	r3, #3
 800217a:	d136      	bne.n	80021ea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d109      	bne.n	800219a <I2S_IRQHandler+0xbc>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002190:	2b80      	cmp	r3, #128	; 0x80
 8002192:	d102      	bne.n	800219a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff45 	bl	8002024 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d122      	bne.n	80021ea <I2S_IRQHandler+0x10c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d11b      	bne.n	80021ea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021c0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	f043 0204 	orr.w	r2, r3, #4
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff13 	bl	8002010 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d002      	beq.n	8002220 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800221e:	e160      	b.n	80024e2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 800222c:	887b      	ldrh	r3, [r7, #2]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e15a      	b.n	80024ec <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002242:	2302      	movs	r3, #2
 8002244:	e152      	b.n	80024ec <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d002      	beq.n	8002272 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b05      	cmp	r3, #5
 8002270:	d114      	bne.n	800229c <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002290:	887b      	ldrh	r3, [r7, #2]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	865a      	strh	r2, [r3, #50]	; 0x32
 800229a:	e00b      	b.n	80022b4 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	887a      	ldrh	r2, [r7, #2]
 80022a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	887a      	ldrh	r2, [r7, #2]
 80022a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	887a      	ldrh	r2, [r7, #2]
 80022b2:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2205      	movs	r2, #5
 80022be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	4a8b      	ldr	r2, [pc, #556]	; (80024f4 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	4a8a      	ldr	r2, [pc, #552]	; (80024f8 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80022d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	4a89      	ldr	r2, [pc, #548]	; (80024fc <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80022d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	4a85      	ldr	r2, [pc, #532]	; (80024f4 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	4a84      	ldr	r2, [pc, #528]	; (80024f8 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80022e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	4a83      	ldr	r2, [pc, #524]	; (80024fc <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80022f0:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fc:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002304:	d002      	beq.n	800230c <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d16b      	bne.n	80023e4 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a79      	ldr	r2, [pc, #484]	; (8002500 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800231e:	4b79      	ldr	r3, [pc, #484]	; (8002504 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002320:	e001      	b.n	8002326 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002322:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002326:	330c      	adds	r3, #12
 8002328:	4619      	mov	r1, r3
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002332:	b29b      	uxth	r3, r3
 8002334:	f7ff f88c 	bl	8001450 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a70      	ldr	r2, [pc, #448]	; (8002500 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002342:	4b70      	ldr	r3, [pc, #448]	; (8002504 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002344:	e001      	b.n	800234a <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002346:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	496b      	ldr	r1, [pc, #428]	; (8002500 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002352:	428b      	cmp	r3, r1
 8002354:	d101      	bne.n	800235a <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002356:	4b6b      	ldr	r3, [pc, #428]	; (8002504 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002358:	e001      	b.n	800235e <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 800235a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002364:	f107 0308 	add.w	r3, r7, #8
 8002368:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	6819      	ldr	r1, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	330c      	adds	r3, #12
 8002378:	461a      	mov	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237e:	b29b      	uxth	r3, r3
 8002380:	f7ff f866 	bl	8001450 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0202 	orr.w	r2, r2, #2
 8002392:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a2:	f000 809e 	beq.w	80024e2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a55      	ldr	r2, [pc, #340]	; (8002500 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d101      	bne.n	80023b4 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80023b0:	4b54      	ldr	r3, [pc, #336]	; (8002504 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80023b2:	e001      	b.n	80023b8 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80023b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023b8:	69da      	ldr	r2, [r3, #28]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4950      	ldr	r1, [pc, #320]	; (8002500 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80023c0:	428b      	cmp	r3, r1
 80023c2:	d101      	bne.n	80023c8 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80023c4:	4b4f      	ldr	r3, [pc, #316]	; (8002504 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80023c6:	e001      	b.n	80023cc <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80023c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023d0:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023e0:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80023e2:	e07e      	b.n	80024e2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023f2:	d10a      	bne.n	800240a <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800240a:	f107 0308 	add.w	r3, r7, #8
 800240e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6819      	ldr	r1, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a38      	ldr	r2, [pc, #224]	; (8002500 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002422:	4b38      	ldr	r3, [pc, #224]	; (8002504 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002424:	e001      	b.n	800242a <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002426:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800242a:	330c      	adds	r3, #12
 800242c:	461a      	mov	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002432:	b29b      	uxth	r3, r3
 8002434:	f7ff f80c 	bl	8001450 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a30      	ldr	r2, [pc, #192]	; (8002500 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002442:	4b30      	ldr	r3, [pc, #192]	; (8002504 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002444:	e001      	b.n	800244a <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002446:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	492b      	ldr	r1, [pc, #172]	; (8002500 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002452:	428b      	cmp	r3, r1
 8002454:	d101      	bne.n	800245a <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002456:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002458:	e001      	b.n	800245e <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 800245a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800245e:	f042 0202 	orr.w	r2, r2, #2
 8002462:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	4619      	mov	r1, r3
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800247c:	b29b      	uxth	r3, r3
 800247e:	f7fe ffe7 	bl	8001450 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a0:	d01e      	beq.n	80024e0 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a16      	ldr	r2, [pc, #88]	; (8002500 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d101      	bne.n	80024b0 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80024ae:	e001      	b.n	80024b4 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80024b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4911      	ldr	r1, [pc, #68]	; (8002500 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80024bc:	428b      	cmp	r3, r1
 80024be:	d101      	bne.n	80024c4 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80024c0:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80024c2:	e001      	b.n	80024c8 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80024c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024cc:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69da      	ldr	r2, [r3, #28]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024dc:	61da      	str	r2, [r3, #28]
 80024de:	e000      	b.n	80024e2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80024e0:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 80024ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	080027b1 	.word	0x080027b1
 80024f8:	080027cd 	.word	0x080027cd
 80024fc:	08002905 	.word	0x08002905
 8002500:	40003800 	.word	0x40003800
 8002504:	40003400 	.word	0x40003400

08002508 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4aa2      	ldr	r2, [pc, #648]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002522:	4ba2      	ldr	r3, [pc, #648]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002524:	e001      	b.n	800252a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002526:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a9b      	ldr	r2, [pc, #620]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002540:	4b9a      	ldr	r3, [pc, #616]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002542:	e001      	b.n	8002548 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002554:	d004      	beq.n	8002560 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 8099 	bne.w	8002692 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b02      	cmp	r3, #2
 8002568:	d107      	bne.n	800257a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fa05 	bl	8002984 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d107      	bne.n	8002594 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 faa8 	bl	8002ae4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b40      	cmp	r3, #64	; 0x40
 800259c:	d13a      	bne.n	8002614 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d035      	beq.n	8002614 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a7e      	ldr	r2, [pc, #504]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80025b2:	4b7e      	ldr	r3, [pc, #504]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80025b4:	e001      	b.n	80025ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80025b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4979      	ldr	r1, [pc, #484]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025c2:	428b      	cmp	r3, r1
 80025c4:	d101      	bne.n	80025ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80025c6:	4b79      	ldr	r3, [pc, #484]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80025c8:	e001      	b.n	80025ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80025ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f043 0202 	orr.w	r2, r3, #2
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff fcfe 	bl	8002010 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b08      	cmp	r3, #8
 800261c:	f040 80be 	bne.w	800279c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80b8 	beq.w	800279c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800263a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a59      	ldr	r2, [pc, #356]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002646:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002648:	e001      	b.n	800264e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800264a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4954      	ldr	r1, [pc, #336]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002656:	428b      	cmp	r3, r1
 8002658:	d101      	bne.n	800265e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800265a:	4b54      	ldr	r3, [pc, #336]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800265c:	e001      	b.n	8002662 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800265e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002662:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002666:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002668:	2300      	movs	r3, #0
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f043 0204 	orr.w	r2, r3, #4
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fcc0 	bl	8002010 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002690:	e084      	b.n	800279c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b02      	cmp	r3, #2
 800269a:	d107      	bne.n	80026ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f99e 	bl	80029e8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d107      	bne.n	80026c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f9dd 	bl	8002a80 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d12f      	bne.n	8002730 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d02a      	beq.n	8002730 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a2e      	ldr	r2, [pc, #184]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80026f4:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80026f6:	e001      	b.n	80026fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80026f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4929      	ldr	r1, [pc, #164]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002704:	428b      	cmp	r3, r1
 8002706:	d101      	bne.n	800270c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002708:	4b28      	ldr	r3, [pc, #160]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800270a:	e001      	b.n	8002710 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800270c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002714:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f043 0202 	orr.w	r2, r3, #2
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff fc70 	bl	8002010 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b08      	cmp	r3, #8
 8002738:	d131      	bne.n	800279e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d02c      	beq.n	800279e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a17      	ldr	r2, [pc, #92]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d101      	bne.n	8002752 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800274e:	4b17      	ldr	r3, [pc, #92]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002750:	e001      	b.n	8002756 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002752:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4912      	ldr	r1, [pc, #72]	; (80027a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800275e:	428b      	cmp	r3, r1
 8002760:	d101      	bne.n	8002766 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002764:	e001      	b.n	800276a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002766:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800276a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800276e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800277e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	f043 0204 	orr.w	r2, r3, #4
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff fc3b 	bl	8002010 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800279a:	e000      	b.n	800279e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800279c:	bf00      	nop
}
 800279e:	bf00      	nop
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40003800 	.word	0x40003800
 80027ac:	40003400 	.word	0x40003400

080027b0 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7fe f936 	bl	8000a30 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 8084 	bne.w	80028ec <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d13c      	bne.n	8002868 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027fc:	d006      	beq.n	800280c <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002808:	2b00      	cmp	r3, #0
 800280a:	d116      	bne.n	800283a <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a3a      	ldr	r2, [pc, #232]	; (80028fc <I2SEx_TxRxDMACplt+0x130>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <I2SEx_TxRxDMACplt+0x4e>
 8002816:	4b3a      	ldr	r3, [pc, #232]	; (8002900 <I2SEx_TxRxDMACplt+0x134>)
 8002818:	e001      	b.n	800281e <I2SEx_TxRxDMACplt+0x52>
 800281a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4935      	ldr	r1, [pc, #212]	; (80028fc <I2SEx_TxRxDMACplt+0x130>)
 8002826:	428b      	cmp	r3, r1
 8002828:	d101      	bne.n	800282e <I2SEx_TxRxDMACplt+0x62>
 800282a:	4b35      	ldr	r3, [pc, #212]	; (8002900 <I2SEx_TxRxDMACplt+0x134>)
 800282c:	e001      	b.n	8002832 <I2SEx_TxRxDMACplt+0x66>
 800282e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	e007      	b.n	800284a <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7fe f90e 	bl	8000a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	d13c      	bne.n	80028ec <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002880:	d006      	beq.n	8002890 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800288c:	2b00      	cmp	r3, #0
 800288e:	d108      	bne.n	80028a2 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0202 	bic.w	r2, r2, #2
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	e015      	b.n	80028ce <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a15      	ldr	r2, [pc, #84]	; (80028fc <I2SEx_TxRxDMACplt+0x130>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d101      	bne.n	80028b0 <I2SEx_TxRxDMACplt+0xe4>
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <I2SEx_TxRxDMACplt+0x134>)
 80028ae:	e001      	b.n	80028b4 <I2SEx_TxRxDMACplt+0xe8>
 80028b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4910      	ldr	r1, [pc, #64]	; (80028fc <I2SEx_TxRxDMACplt+0x130>)
 80028bc:	428b      	cmp	r3, r1
 80028be:	d101      	bne.n	80028c4 <I2SEx_TxRxDMACplt+0xf8>
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <I2SEx_TxRxDMACplt+0x134>)
 80028c2:	e001      	b.n	80028c8 <I2SEx_TxRxDMACplt+0xfc>
 80028c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028c8:	f022 0202 	bic.w	r2, r2, #2
 80028cc:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f7fe f8cc 	bl	8000a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7fe f8c9 	bl	8000a84 <HAL_I2SEx_TxRxCpltCallback>
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40003800 	.word	0x40003800
 8002900:	40003400 	.word	0x40003400

08002904 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0203 	bic.w	r2, r2, #3
 8002920:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a15      	ldr	r2, [pc, #84]	; (800297c <I2SEx_TxRxDMAError+0x78>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d101      	bne.n	8002930 <I2SEx_TxRxDMAError+0x2c>
 800292c:	4b14      	ldr	r3, [pc, #80]	; (8002980 <I2SEx_TxRxDMAError+0x7c>)
 800292e:	e001      	b.n	8002934 <I2SEx_TxRxDMAError+0x30>
 8002930:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4910      	ldr	r1, [pc, #64]	; (800297c <I2SEx_TxRxDMAError+0x78>)
 800293c:	428b      	cmp	r3, r1
 800293e:	d101      	bne.n	8002944 <I2SEx_TxRxDMAError+0x40>
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <I2SEx_TxRxDMAError+0x7c>)
 8002942:	e001      	b.n	8002948 <I2SEx_TxRxDMAError+0x44>
 8002944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002948:	f022 0203 	bic.w	r2, r2, #3
 800294c:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f043 0208 	orr.w	r2, r3, #8
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f7ff fb4e 	bl	8002010 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40003800 	.word	0x40003800
 8002980:	40003400 	.word	0x40003400

08002984 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	1c99      	adds	r1, r3, #2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6251      	str	r1, [r2, #36]	; 0x24
 8002996:	881a      	ldrh	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d113      	bne.n	80029de <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7fe f853 	bl	8000a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	1c99      	adds	r1, r3, #2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6251      	str	r1, [r2, #36]	; 0x24
 80029fa:	8819      	ldrh	r1, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <I2SEx_TxISR_I2SExt+0x90>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d101      	bne.n	8002a0a <I2SEx_TxISR_I2SExt+0x22>
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <I2SEx_TxISR_I2SExt+0x94>)
 8002a08:	e001      	b.n	8002a0e <I2SEx_TxISR_I2SExt+0x26>
 8002a0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a0e:	460a      	mov	r2, r1
 8002a10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d121      	bne.n	8002a6e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <I2SEx_TxISR_I2SExt+0x90>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d101      	bne.n	8002a38 <I2SEx_TxISR_I2SExt+0x50>
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <I2SEx_TxISR_I2SExt+0x94>)
 8002a36:	e001      	b.n	8002a3c <I2SEx_TxISR_I2SExt+0x54>
 8002a38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	490d      	ldr	r1, [pc, #52]	; (8002a78 <I2SEx_TxISR_I2SExt+0x90>)
 8002a44:	428b      	cmp	r3, r1
 8002a46:	d101      	bne.n	8002a4c <I2SEx_TxISR_I2SExt+0x64>
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <I2SEx_TxISR_I2SExt+0x94>)
 8002a4a:	e001      	b.n	8002a50 <I2SEx_TxISR_I2SExt+0x68>
 8002a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d106      	bne.n	8002a6e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7fe f80b 	bl	8000a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40003800 	.word	0x40003800
 8002a7c:	40003400 	.word	0x40003400

08002a80 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68d8      	ldr	r0, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	1c99      	adds	r1, r3, #2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002a98:	b282      	uxth	r2, r0
 8002a9a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d113      	bne.n	8002adc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ac2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fd ffd4 	bl	8000a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a20      	ldr	r2, [pc, #128]	; (8002b74 <I2SEx_RxISR_I2SExt+0x90>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d101      	bne.n	8002afa <I2SEx_RxISR_I2SExt+0x16>
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <I2SEx_RxISR_I2SExt+0x94>)
 8002af8:	e001      	b.n	8002afe <I2SEx_RxISR_I2SExt+0x1a>
 8002afa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002afe:	68d8      	ldr	r0, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	1c99      	adds	r1, r3, #2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002b0a:	b282      	uxth	r2, r0
 8002b0c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d121      	bne.n	8002b6a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <I2SEx_RxISR_I2SExt+0x90>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d101      	bne.n	8002b34 <I2SEx_RxISR_I2SExt+0x50>
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <I2SEx_RxISR_I2SExt+0x94>)
 8002b32:	e001      	b.n	8002b38 <I2SEx_RxISR_I2SExt+0x54>
 8002b34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	490d      	ldr	r1, [pc, #52]	; (8002b74 <I2SEx_RxISR_I2SExt+0x90>)
 8002b40:	428b      	cmp	r3, r1
 8002b42:	d101      	bne.n	8002b48 <I2SEx_RxISR_I2SExt+0x64>
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <I2SEx_RxISR_I2SExt+0x94>)
 8002b46:	e001      	b.n	8002b4c <I2SEx_RxISR_I2SExt+0x68>
 8002b48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b50:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d106      	bne.n	8002b6a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7fd ff8d 	bl	8000a84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40003800 	.word	0x40003800
 8002b78:	40003400 	.word	0x40003400

08002b7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7e:	b08f      	sub	sp, #60	; 0x3c
 8002b80:	af0a      	add	r7, sp, #40	; 0x28
 8002b82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e10f      	b.n	8002dae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f005 f931 	bl	8007e10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f001 ffe6 	bl	8004b9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	687e      	ldr	r6, [r7, #4]
 8002bda:	466d      	mov	r5, sp
 8002bdc:	f106 0410 	add.w	r4, r6, #16
 8002be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bec:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bf0:	1d33      	adds	r3, r6, #4
 8002bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bf4:	6838      	ldr	r0, [r7, #0]
 8002bf6:	f001 febd 	bl	8004974 <USB_CoreInit>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0d0      	b.n	8002dae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 ffd4 	bl	8004bc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
 8002c1c:	e04a      	b.n	8002cb4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	333d      	adds	r3, #61	; 0x3d
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	333c      	adds	r3, #60	; 0x3c
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	b298      	uxth	r0, r3
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	3342      	adds	r3, #66	; 0x42
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	333f      	adds	r3, #63	; 0x3f
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3344      	adds	r3, #68	; 0x44
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3348      	adds	r3, #72	; 0x48
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3350      	adds	r3, #80	; 0x50
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d3af      	bcc.n	8002c1e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
 8002cc2:	e044      	b.n	8002d4e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d3b5      	bcc.n	8002cc4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	687e      	ldr	r6, [r7, #4]
 8002d60:	466d      	mov	r5, sp
 8002d62:	f106 0410 	add.w	r4, r6, #16
 8002d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d76:	1d33      	adds	r3, r6, #4
 8002d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d7a:	6838      	ldr	r0, [r7, #0]
 8002d7c:	f001 ff4a 	bl	8004c14 <USB_DevInit>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00d      	b.n	8002dae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 ff92 	bl	8005cd0 <USB_DevDisconnect>

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002db6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_PCD_Start+0x1c>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e020      	b.n	8002e14 <HAL_PCD_Start+0x5e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d109      	bne.n	8002df6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d005      	beq.n	8002df6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f001 febe 	bl	8004b7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f002 ff42 	bl	8005c8e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b08d      	sub	sp, #52	; 0x34
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f003 f800 	bl	8005e38 <USB_GetMode>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 839d 	bne.w	800357a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 ff64 	bl	8005d12 <USB_ReadInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8393 	beq.w	8003578 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 ff5b 	bl	8005d12 <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d107      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f002 0202 	and.w	r2, r2, #2
 8002e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f002 ff49 	bl	8005d12 <USB_ReadInterrupts>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d161      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	699a      	ldr	r2, [r3, #24]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0210 	bic.w	r2, r2, #16
 8002e98:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	0c5b      	lsrs	r3, r3, #17
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d124      	bne.n	8002f10 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d035      	beq.n	8002f3e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6a38      	ldr	r0, [r7, #32]
 8002ee6:	f002 fdaf 	bl	8005a48 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ef6:	441a      	add	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f08:	441a      	add	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	619a      	str	r2, [r3, #24]
 8002f0e:	e016      	b.n	8002f3e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	0c5b      	lsrs	r3, r3, #17
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	2b06      	cmp	r3, #6
 8002f1a:	d110      	bne.n	8002f3e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f22:	2208      	movs	r2, #8
 8002f24:	4619      	mov	r1, r3
 8002f26:	6a38      	ldr	r0, [r7, #32]
 8002f28:	f002 fd8e 	bl	8005a48 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f38:	441a      	add	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0210 	orr.w	r2, r2, #16
 8002f4c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f002 fedd 	bl	8005d12 <USB_ReadInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f62:	d16e      	bne.n	8003042 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f002 fee3 	bl	8005d38 <USB_ReadDevAllOutEpInterrupt>
 8002f72:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f74:	e062      	b.n	800303c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d057      	beq.n	8003030 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f002 ff08 	bl	8005da0 <USB_ReadDevOutEPInterrupt>
 8002f90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00c      	beq.n	8002fb6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2301      	movs	r3, #1
 8002fac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fdb1 	bl	8003b18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00c      	beq.n	8002fda <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2308      	movs	r3, #8
 8002fd0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 feab 	bl	8003d30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2310      	movs	r3, #16
 8002ff4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	4413      	add	r3, r2
 8003008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300c:	461a      	mov	r2, r3
 800300e:	2320      	movs	r3, #32
 8003010:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003028:	461a      	mov	r2, r3
 800302a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800302e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	3301      	adds	r3, #1
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	2b00      	cmp	r3, #0
 8003040:	d199      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f002 fe63 	bl	8005d12 <USB_ReadInterrupts>
 800304c:	4603      	mov	r3, r0
 800304e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003056:	f040 80c0 	bne.w	80031da <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f002 fe84 	bl	8005d6c <USB_ReadDevAllInEpInterrupt>
 8003064:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800306a:	e0b2      	b.n	80031d2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80a7 	beq.w	80031c6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f002 feaa 	bl	8005ddc <USB_ReadDevInEPInterrupt>
 8003088:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d057      	beq.n	8003144 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	2201      	movs	r2, #1
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69f9      	ldr	r1, [r7, #28]
 80030b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030b4:	4013      	ands	r3, r2
 80030b6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c4:	461a      	mov	r2, r3
 80030c6:	2301      	movs	r3, #1
 80030c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d132      	bne.n	8003138 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	3348      	adds	r3, #72	; 0x48
 80030e2:	6819      	ldr	r1, [r3, #0]
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4403      	add	r3, r0
 80030f2:	3344      	adds	r3, #68	; 0x44
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4419      	add	r1, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4403      	add	r3, r0
 8003106:	3348      	adds	r3, #72	; 0x48
 8003108:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	d113      	bne.n	8003138 <HAL_PCD_IRQHandler+0x31c>
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	3350      	adds	r3, #80	; 0x50
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d108      	bne.n	8003138 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003130:	461a      	mov	r2, r3
 8003132:	2101      	movs	r1, #1
 8003134:	f002 feb2 	bl	8005e9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	b2db      	uxtb	r3, r3
 800313c:	4619      	mov	r1, r3
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f004 fef5 	bl	8007f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315a:	461a      	mov	r2, r3
 800315c:	2308      	movs	r3, #8
 800315e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003176:	461a      	mov	r2, r3
 8003178:	2310      	movs	r3, #16
 800317a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003192:	461a      	mov	r2, r3
 8003194:	2340      	movs	r3, #64	; 0x40
 8003196:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ae:	461a      	mov	r2, r3
 80031b0:	2302      	movs	r3, #2
 80031b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fc1b 	bl	80039fc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	3301      	adds	r3, #1
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f47f af49 	bne.w	800306c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f002 fd97 	bl	8005d12 <USB_ReadInterrupts>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ee:	d122      	bne.n	8003236 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031fe:	f023 0301 	bic.w	r3, r3, #1
 8003202:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800320a:	2b01      	cmp	r3, #1
 800320c:	d108      	bne.n	8003220 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003216:	2100      	movs	r1, #0
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fe27 	bl	8003e6c <HAL_PCDEx_LPM_Callback>
 800321e:	e002      	b.n	8003226 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f004 fefb 	bl	800801c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003234:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f002 fd69 	bl	8005d12 <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324a:	d112      	bne.n	8003272 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d102      	bne.n	8003262 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f004 feb7 	bl	8007fd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003270:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f002 fd4b 	bl	8005d12 <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003286:	f040 80c7 	bne.w	8003418 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2110      	movs	r1, #16
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 fe19 	bl	8004edc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ae:	e056      	b.n	800335e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032bc:	461a      	mov	r2, r3
 80032be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d4:	0151      	lsls	r1, r2, #5
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	440a      	add	r2, r1
 80032da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032e2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f4:	0151      	lsls	r1, r2, #5
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	440a      	add	r2, r1
 80032fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003302:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003310:	461a      	mov	r2, r3
 8003312:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003316:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003328:	0151      	lsls	r1, r2, #5
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	440a      	add	r2, r1
 800332e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003332:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003336:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003348:	0151      	lsls	r1, r2, #5
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	440a      	add	r2, r1
 800334e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003352:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003356:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	3301      	adds	r3, #1
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003364:	429a      	cmp	r2, r3
 8003366:	d3a3      	bcc.n	80032b0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003376:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800337a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	2b00      	cmp	r3, #0
 8003382:	d016      	beq.n	80033b2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003394:	f043 030b 	orr.w	r3, r3, #11
 8003398:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033aa:	f043 030b 	orr.w	r3, r3, #11
 80033ae:	6453      	str	r3, [r2, #68]	; 0x44
 80033b0:	e015      	b.n	80033de <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033c4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80033c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d8:	f043 030b 	orr.w	r3, r3, #11
 80033dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003402:	461a      	mov	r2, r3
 8003404:	f002 fd4a 	bl	8005e9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003416:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f002 fc78 	bl	8005d12 <USB_ReadInterrupts>
 8003422:	4603      	mov	r3, r0
 8003424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342c:	d124      	bne.n	8003478 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f002 fd0e 	bl	8005e54 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f001 fdae 	bl	8004f9e <USB_GetDevSpeed>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681c      	ldr	r4, [r3, #0]
 800344e:	f001 f947 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8003452:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	4620      	mov	r0, r4
 800345e:	f001 faeb 	bl	8004a38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f004 fd8b 	bl	8007f7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003476:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f002 fc48 	bl	8005d12 <USB_ReadInterrupts>
 8003482:	4603      	mov	r3, r0
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b08      	cmp	r3, #8
 800348a:	d10a      	bne.n	80034a2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f004 fd68 	bl	8007f62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f002 0208 	and.w	r2, r2, #8
 80034a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 fc33 	bl	8005d12 <USB_ReadInterrupts>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b6:	d10f      	bne.n	80034d8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	4619      	mov	r1, r3
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f004 fdca 	bl	800805c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 fc18 	bl	8005d12 <USB_ReadInterrupts>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ec:	d10f      	bne.n	800350e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	4619      	mov	r1, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f004 fd9d 	bl	8008038 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800350c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f002 fbfd 	bl	8005d12 <USB_ReadInterrupts>
 8003518:	4603      	mov	r3, r0
 800351a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003522:	d10a      	bne.n	800353a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f004 fdab 	bl	8008080 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003538:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f002 fbe7 	bl	8005d12 <USB_ReadInterrupts>
 8003544:	4603      	mov	r3, r0
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b04      	cmp	r3, #4
 800354c:	d115      	bne.n	800357a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f004 fd9b 	bl	800809c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	e000      	b.n	800357a <HAL_PCD_IRQHandler+0x75e>
      return;
 8003578:	bf00      	nop
    }
  }
}
 800357a:	3734      	adds	r7, #52	; 0x34
 800357c:	46bd      	mov	sp, r7
 800357e:	bd90      	pop	{r4, r7, pc}

08003580 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_PCD_SetAddress+0x1a>
 8003596:	2302      	movs	r3, #2
 8003598:	e013      	b.n	80035c2 <HAL_PCD_SetAddress+0x42>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 fb45 	bl	8005c42 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	4608      	mov	r0, r1
 80035d4:	4611      	mov	r1, r2
 80035d6:	461a      	mov	r2, r3
 80035d8:	4603      	mov	r3, r0
 80035da:	70fb      	strb	r3, [r7, #3]
 80035dc:	460b      	mov	r3, r1
 80035de:	803b      	strh	r3, [r7, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da0f      	bge.n	8003610 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	f003 020f 	and.w	r2, r3, #15
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	3338      	adds	r3, #56	; 0x38
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	4413      	add	r3, r2
 8003604:	3304      	adds	r3, #4
 8003606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	705a      	strb	r2, [r3, #1]
 800360e:	e00f      	b.n	8003630 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	f003 020f 	and.w	r2, r3, #15
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	3304      	adds	r3, #4
 8003628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	b2da      	uxtb	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800363c:	883a      	ldrh	r2, [r7, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	78ba      	ldrb	r2, [r7, #2]
 8003646:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d004      	beq.n	800365a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800365a:	78bb      	ldrb	r3, [r7, #2]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d102      	bne.n	8003666 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_PCD_EP_Open+0xaa>
 8003670:	2302      	movs	r3, #2
 8003672:	e00e      	b.n	8003692 <HAL_PCD_EP_Open+0xc8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68f9      	ldr	r1, [r7, #12]
 8003682:	4618      	mov	r0, r3
 8003684:	f001 fcb0 	bl	8004fe8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003690:	7afb      	ldrb	r3, [r7, #11]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	da0f      	bge.n	80036ce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	f003 020f 	and.w	r2, r3, #15
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	3338      	adds	r3, #56	; 0x38
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	3304      	adds	r3, #4
 80036c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	705a      	strb	r2, [r3, #1]
 80036cc:	e00f      	b.n	80036ee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	f003 020f 	and.w	r2, r3, #15
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	3304      	adds	r3, #4
 80036e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_PCD_EP_Close+0x6e>
 8003704:	2302      	movs	r3, #2
 8003706:	e00e      	b.n	8003726 <HAL_PCD_EP_Close+0x8c>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68f9      	ldr	r1, [r7, #12]
 8003716:	4618      	mov	r0, r3
 8003718:	f001 fcee 	bl	80050f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	460b      	mov	r3, r1
 800373c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800373e:	7afb      	ldrb	r3, [r7, #11]
 8003740:	f003 020f 	and.w	r2, r3, #15
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	3304      	adds	r3, #4
 8003756:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2200      	movs	r2, #0
 8003768:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003770:	7afb      	ldrb	r3, [r7, #11]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	b2da      	uxtb	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d102      	bne.n	800378a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800378a:	7afb      	ldrb	r3, [r7, #11]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	461a      	mov	r2, r3
 80037a0:	6979      	ldr	r1, [r7, #20]
 80037a2:	f001 ffc9 	bl	8005738 <USB_EP0StartXfer>
 80037a6:	e008      	b.n	80037ba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	6979      	ldr	r1, [r7, #20]
 80037b6:	f001 fd7b 	bl	80052b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	f003 020f 	and.w	r2, r3, #15
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	460b      	mov	r3, r1
 8003802:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003804:	7afb      	ldrb	r3, [r7, #11]
 8003806:	f003 020f 	and.w	r2, r3, #15
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	3338      	adds	r3, #56	; 0x38
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	3304      	adds	r3, #4
 800381a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2200      	movs	r2, #0
 800382c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2201      	movs	r2, #1
 8003832:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003834:	7afb      	ldrb	r3, [r7, #11]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	b2da      	uxtb	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d102      	bne.n	800384e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800384e:	7afb      	ldrb	r3, [r7, #11]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	6979      	ldr	r1, [r7, #20]
 8003866:	f001 ff67 	bl	8005738 <USB_EP0StartXfer>
 800386a:	e008      	b.n	800387e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	461a      	mov	r2, r3
 8003878:	6979      	ldr	r1, [r7, #20]
 800387a:	f001 fd19 	bl	80052b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	f003 020f 	and.w	r2, r3, #15
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d901      	bls.n	80038a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e050      	b.n	8003948 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	da0f      	bge.n	80038ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ae:	78fb      	ldrb	r3, [r7, #3]
 80038b0:	f003 020f 	and.w	r2, r3, #15
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	3338      	adds	r3, #56	; 0x38
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	4413      	add	r3, r2
 80038c2:	3304      	adds	r3, #4
 80038c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	705a      	strb	r2, [r3, #1]
 80038cc:	e00d      	b.n	80038ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038ce:	78fa      	ldrb	r2, [r7, #3]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4413      	add	r3, r2
 80038e0:	3304      	adds	r3, #4
 80038e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_PCD_EP_SetStall+0x82>
 8003906:	2302      	movs	r3, #2
 8003908:	e01e      	b.n	8003948 <HAL_PCD_EP_SetStall+0xc0>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	4618      	mov	r0, r3
 800391a:	f002 f8be 	bl	8005a9a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	b2d9      	uxtb	r1, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003938:	461a      	mov	r2, r3
 800393a:	f002 faaf 	bl	8005e9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	f003 020f 	and.w	r2, r3, #15
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	429a      	cmp	r2, r3
 8003968:	d901      	bls.n	800396e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e042      	b.n	80039f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800396e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003972:	2b00      	cmp	r3, #0
 8003974:	da0f      	bge.n	8003996 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	f003 020f 	and.w	r2, r3, #15
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	3338      	adds	r3, #56	; 0x38
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	3304      	adds	r3, #4
 800398c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	705a      	strb	r2, [r3, #1]
 8003994:	e00f      	b.n	80039b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	f003 020f 	and.w	r2, r3, #15
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	3304      	adds	r3, #4
 80039ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_PCD_EP_ClrStall+0x86>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e00e      	b.n	80039f4 <HAL_PCD_EP_ClrStall+0xa4>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f002 f8c6 	bl	8005b76 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	3338      	adds	r3, #56	; 0x38
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	4413      	add	r3, r2
 8003a20:	3304      	adds	r3, #4
 8003a22:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d901      	bls.n	8003a34 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e06c      	b.n	8003b0e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d902      	bls.n	8003a50 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	3303      	adds	r3, #3
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a58:	e02b      	b.n	8003ab2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d902      	bls.n	8003a76 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3303      	adds	r3, #3
 8003a7a:	089b      	lsrs	r3, r3, #2
 8003a7c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	68d9      	ldr	r1, [r3, #12]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	4603      	mov	r3, r0
 8003a94:	6978      	ldr	r0, [r7, #20]
 8003a96:	f001 ffa2 	bl	80059de <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	441a      	add	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	441a      	add	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d809      	bhi.n	8003adc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d203      	bcs.n	8003adc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1be      	bne.n	8003a5a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d811      	bhi.n	8003b0c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	2201      	movs	r2, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	6939      	ldr	r1, [r7, #16]
 8003b04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b08:	4013      	ands	r3, r2
 8003b0a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	333c      	adds	r3, #60	; 0x3c
 8003b30:	3304      	adds	r3, #4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	f040 80a0 	bne.w	8003c90 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d015      	beq.n	8003b86 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a72      	ldr	r2, [pc, #456]	; (8003d28 <PCD_EP_OutXfrComplete_int+0x210>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	f240 80dd 	bls.w	8003d1e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80d7 	beq.w	8003d1e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b82:	6093      	str	r3, [r2, #8]
 8003b84:	e0cb      	b.n	8003d1e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	6093      	str	r3, [r2, #8]
 8003ba2:	e0bc      	b.n	8003d1e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f040 80b7 	bne.w	8003d1e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a5d      	ldr	r2, [pc, #372]	; (8003d28 <PCD_EP_OutXfrComplete_int+0x210>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d90f      	bls.n	8003bd8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd4:	6093      	str	r3, [r2, #8]
 8003bd6:	e0a2      	b.n	8003d1e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003bea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	0159      	lsls	r1, r3, #5
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	440b      	add	r3, r1
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003bfe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4403      	add	r3, r0
 8003c0e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c12:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4403      	add	r3, r0
 8003c36:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4419      	add	r1, r3
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4403      	add	r3, r0
 8003c4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c50:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d114      	bne.n	8003c82 <PCD_EP_OutXfrComplete_int+0x16a>
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d108      	bne.n	8003c82 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	f002 f90d 	bl	8005e9c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	4619      	mov	r1, r3
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f004 f935 	bl	8007ef8 <HAL_PCD_DataOutStageCallback>
 8003c8e:	e046      	b.n	8003d1e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a26      	ldr	r2, [pc, #152]	; (8003d2c <PCD_EP_OutXfrComplete_int+0x214>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d124      	bne.n	8003ce2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cb4:	6093      	str	r3, [r2, #8]
 8003cb6:	e032      	b.n	8003d1e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2320      	movs	r3, #32
 8003cd2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f004 f90c 	bl	8007ef8 <HAL_PCD_DataOutStageCallback>
 8003ce0:	e01d      	b.n	8003d1e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d114      	bne.n	8003d12 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d108      	bne.n	8003d12 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	f002 f8c5 	bl	8005e9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	4619      	mov	r1, r3
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f004 f8ed 	bl	8007ef8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	4f54300a 	.word	0x4f54300a
 8003d2c:	4f54310a 	.word	0x4f54310a

08003d30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	333c      	adds	r3, #60	; 0x3c
 8003d48:	3304      	adds	r3, #4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a15      	ldr	r2, [pc, #84]	; (8003db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d90e      	bls.n	8003d84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d009      	beq.n	8003d84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f004 f8a5 	bl	8007ed4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d90c      	bls.n	8003dac <PCD_EP_OutSetupPacket_int+0x7c>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d108      	bne.n	8003dac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003da4:	461a      	mov	r2, r3
 8003da6:	2101      	movs	r1, #1
 8003da8:	f002 f878 	bl	8005e9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	4f54300a 	.word	0x4f54300a

08003dbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	70fb      	strb	r3, [r7, #3]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d107      	bne.n	8003dea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003dda:	883b      	ldrh	r3, [r7, #0]
 8003ddc:	0419      	lsls	r1, r3, #16
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	629a      	str	r2, [r3, #40]	; 0x28
 8003de8:	e028      	b.n	8003e3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4413      	add	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]
 8003dfc:	e00d      	b.n	8003e1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	3340      	adds	r3, #64	; 0x40
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	0c1b      	lsrs	r3, r3, #16
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	4413      	add	r3, r2
 8003e12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	3301      	adds	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d3ec      	bcc.n	8003dfe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e24:	883b      	ldrh	r3, [r7, #0]
 8003e26:	0418      	lsls	r0, r3, #16
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6819      	ldr	r1, [r3, #0]
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	4302      	orrs	r2, r0
 8003e34:	3340      	adds	r3, #64	; 0x40
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	460b      	mov	r3, r1
 8003e54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	887a      	ldrh	r2, [r7, #2]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e25b      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d075      	beq.n	8003f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ea2:	4ba3      	ldr	r3, [pc, #652]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d00c      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eae:	4ba0      	ldr	r3, [pc, #640]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d112      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eba:	4b9d      	ldr	r3, [pc, #628]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	4b99      	ldr	r3, [pc, #612]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d05b      	beq.n	8003f8c <HAL_RCC_OscConfig+0x108>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d157      	bne.n	8003f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e236      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee8:	d106      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x74>
 8003eea:	4b91      	ldr	r3, [pc, #580]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a90      	ldr	r2, [pc, #576]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e01d      	b.n	8003f34 <HAL_RCC_OscConfig+0xb0>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x98>
 8003f02:	4b8b      	ldr	r3, [pc, #556]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a8a      	ldr	r2, [pc, #552]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a87      	ldr	r2, [pc, #540]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_OscConfig+0xb0>
 8003f1c:	4b84      	ldr	r3, [pc, #528]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a83      	ldr	r2, [pc, #524]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4b81      	ldr	r3, [pc, #516]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a80      	ldr	r2, [pc, #512]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d013      	beq.n	8003f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fd f89a 	bl	8001074 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fd f896 	bl	8001074 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e1fb      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	4b76      	ldr	r3, [pc, #472]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0xc0>
 8003f62:	e014      	b.n	8003f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fd f886 	bl	8001074 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7fd f882 	bl	8001074 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	; 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e1e7      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7e:	4b6c      	ldr	r3, [pc, #432]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0xe8>
 8003f8a:	e000      	b.n	8003f8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d063      	beq.n	8004062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f9a:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa6:	4b62      	ldr	r3, [pc, #392]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d11c      	bne.n	8003fec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb2:	4b5f      	ldr	r3, [pc, #380]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d116      	bne.n	8003fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x152>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e1bb      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd6:	4b56      	ldr	r3, [pc, #344]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4952      	ldr	r1, [pc, #328]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	e03a      	b.n	8004062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	4b4f      	ldr	r3, [pc, #316]	; (8004134 <HAL_RCC_OscConfig+0x2b0>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffa:	f7fd f83b 	bl	8001074 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004002:	f7fd f837 	bl	8001074 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e19c      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	4b46      	ldr	r3, [pc, #280]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4b43      	ldr	r3, [pc, #268]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4940      	ldr	r1, [pc, #256]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
 8004034:	e015      	b.n	8004062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004036:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <HAL_RCC_OscConfig+0x2b0>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fd f81a 	bl	8001074 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004044:	f7fd f816 	bl	8001074 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e17b      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	4b36      	ldr	r3, [pc, #216]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d030      	beq.n	80040d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004076:	4b30      	ldr	r3, [pc, #192]	; (8004138 <HAL_RCC_OscConfig+0x2b4>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407c:	f7fc fffa 	bl	8001074 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004084:	f7fc fff6 	bl	8001074 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e15b      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	4b26      	ldr	r3, [pc, #152]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x200>
 80040a2:	e015      	b.n	80040d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a4:	4b24      	ldr	r3, [pc, #144]	; (8004138 <HAL_RCC_OscConfig+0x2b4>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040aa:	f7fc ffe3 	bl	8001074 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b2:	f7fc ffdf 	bl	8001074 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e144      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 80040c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f0      	bne.n	80040b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80a0 	beq.w	800421e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040e2:	4b13      	ldr	r3, [pc, #76]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	4a0e      	ldr	r2, [pc, #56]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fc:	6413      	str	r3, [r2, #64]	; 0x40
 80040fe:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800410a:	2301      	movs	r3, #1
 800410c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410e:	4b0b      	ldr	r3, [pc, #44]	; (800413c <HAL_RCC_OscConfig+0x2b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d121      	bne.n	800415e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <HAL_RCC_OscConfig+0x2b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a07      	ldr	r2, [pc, #28]	; (800413c <HAL_RCC_OscConfig+0x2b8>)
 8004120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004126:	f7fc ffa5 	bl	8001074 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412c:	e011      	b.n	8004152 <HAL_RCC_OscConfig+0x2ce>
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
 8004134:	42470000 	.word	0x42470000
 8004138:	42470e80 	.word	0x42470e80
 800413c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004140:	f7fc ff98 	bl	8001074 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0fd      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004152:	4b81      	ldr	r3, [pc, #516]	; (8004358 <HAL_RCC_OscConfig+0x4d4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d106      	bne.n	8004174 <HAL_RCC_OscConfig+0x2f0>
 8004166:	4b7d      	ldr	r3, [pc, #500]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	4a7c      	ldr	r2, [pc, #496]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6713      	str	r3, [r2, #112]	; 0x70
 8004172:	e01c      	b.n	80041ae <HAL_RCC_OscConfig+0x32a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b05      	cmp	r3, #5
 800417a:	d10c      	bne.n	8004196 <HAL_RCC_OscConfig+0x312>
 800417c:	4b77      	ldr	r3, [pc, #476]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	4a76      	ldr	r2, [pc, #472]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 8004182:	f043 0304 	orr.w	r3, r3, #4
 8004186:	6713      	str	r3, [r2, #112]	; 0x70
 8004188:	4b74      	ldr	r3, [pc, #464]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418c:	4a73      	ldr	r2, [pc, #460]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	6713      	str	r3, [r2, #112]	; 0x70
 8004194:	e00b      	b.n	80041ae <HAL_RCC_OscConfig+0x32a>
 8004196:	4b71      	ldr	r3, [pc, #452]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	4a70      	ldr	r2, [pc, #448]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70
 80041a2:	4b6e      	ldr	r3, [pc, #440]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	4a6d      	ldr	r2, [pc, #436]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 80041a8:	f023 0304 	bic.w	r3, r3, #4
 80041ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d015      	beq.n	80041e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b6:	f7fc ff5d 	bl	8001074 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041bc:	e00a      	b.n	80041d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041be:	f7fc ff59 	bl	8001074 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e0bc      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d4:	4b61      	ldr	r3, [pc, #388]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0ee      	beq.n	80041be <HAL_RCC_OscConfig+0x33a>
 80041e0:	e014      	b.n	800420c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e2:	f7fc ff47 	bl	8001074 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e8:	e00a      	b.n	8004200 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ea:	f7fc ff43 	bl	8001074 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e0a6      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004200:	4b56      	ldr	r3, [pc, #344]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1ee      	bne.n	80041ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d105      	bne.n	800421e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004212:	4b52      	ldr	r3, [pc, #328]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	4a51      	ldr	r2, [pc, #324]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 8004218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8092 	beq.w	800434c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004228:	4b4c      	ldr	r3, [pc, #304]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b08      	cmp	r3, #8
 8004232:	d05c      	beq.n	80042ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d141      	bne.n	80042c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423c:	4b48      	ldr	r3, [pc, #288]	; (8004360 <HAL_RCC_OscConfig+0x4dc>)
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004242:	f7fc ff17 	bl	8001074 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424a:	f7fc ff13 	bl	8001074 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e078      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425c:	4b3f      	ldr	r3, [pc, #252]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f0      	bne.n	800424a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	019b      	lsls	r3, r3, #6
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	3b01      	subs	r3, #1
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	061b      	lsls	r3, r3, #24
 800428c:	4933      	ldr	r1, [pc, #204]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004292:	4b33      	ldr	r3, [pc, #204]	; (8004360 <HAL_RCC_OscConfig+0x4dc>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fc feec 	bl	8001074 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a0:	f7fc fee8 	bl	8001074 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e04d      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b2:	4b2a      	ldr	r3, [pc, #168]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x41c>
 80042be:	e045      	b.n	800434c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c0:	4b27      	ldr	r3, [pc, #156]	; (8004360 <HAL_RCC_OscConfig+0x4dc>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c6:	f7fc fed5 	bl	8001074 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ce:	f7fc fed1 	bl	8001074 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e036      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e0:	4b1e      	ldr	r3, [pc, #120]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCC_OscConfig+0x44a>
 80042ec:	e02e      	b.n	800434c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e029      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042fa:	4b18      	ldr	r3, [pc, #96]	; (800435c <HAL_RCC_OscConfig+0x4d8>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	429a      	cmp	r2, r3
 800430c:	d11c      	bne.n	8004348 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d115      	bne.n	8004348 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004322:	4013      	ands	r3, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004328:	4293      	cmp	r3, r2
 800432a:	d10d      	bne.n	8004348 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d106      	bne.n	8004348 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d001      	beq.n	800434c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40007000 	.word	0x40007000
 800435c:	40023800 	.word	0x40023800
 8004360:	42470060 	.word	0x42470060

08004364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0cc      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004378:	4b68      	ldr	r3, [pc, #416]	; (800451c <HAL_RCC_ClockConfig+0x1b8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d90c      	bls.n	80043a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b65      	ldr	r3, [pc, #404]	; (800451c <HAL_RCC_ClockConfig+0x1b8>)
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438e:	4b63      	ldr	r3, [pc, #396]	; (800451c <HAL_RCC_ClockConfig+0x1b8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0b8      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d020      	beq.n	80043ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043b8:	4b59      	ldr	r3, [pc, #356]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	4a58      	ldr	r2, [pc, #352]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d0:	4b53      	ldr	r3, [pc, #332]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4a52      	ldr	r2, [pc, #328]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043dc:	4b50      	ldr	r3, [pc, #320]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	494d      	ldr	r1, [pc, #308]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d044      	beq.n	8004484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d107      	bne.n	8004412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	4b47      	ldr	r3, [pc, #284]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d119      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e07f      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d003      	beq.n	8004422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800441e:	2b03      	cmp	r3, #3
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004422:	4b3f      	ldr	r3, [pc, #252]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e06f      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004432:	4b3b      	ldr	r3, [pc, #236]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e067      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004442:	4b37      	ldr	r3, [pc, #220]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4934      	ldr	r1, [pc, #208]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	4313      	orrs	r3, r2
 8004452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004454:	f7fc fe0e 	bl	8001074 <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	e00a      	b.n	8004472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445c:	f7fc fe0a 	bl	8001074 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	; 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e04f      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004472:	4b2b      	ldr	r3, [pc, #172]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 020c 	and.w	r2, r3, #12
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	429a      	cmp	r2, r3
 8004482:	d1eb      	bne.n	800445c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004484:	4b25      	ldr	r3, [pc, #148]	; (800451c <HAL_RCC_ClockConfig+0x1b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d20c      	bcs.n	80044ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <HAL_RCC_ClockConfig+0x1b8>)
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800449a:	4b20      	ldr	r3, [pc, #128]	; (800451c <HAL_RCC_ClockConfig+0x1b8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e032      	b.n	8004512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b8:	4b19      	ldr	r3, [pc, #100]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4916      	ldr	r1, [pc, #88]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044d6:	4b12      	ldr	r3, [pc, #72]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	490e      	ldr	r1, [pc, #56]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ea:	f000 f821 	bl	8004530 <HAL_RCC_GetSysClockFreq>
 80044ee:	4601      	mov	r1, r0
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	4a0a      	ldr	r2, [pc, #40]	; (8004524 <HAL_RCC_ClockConfig+0x1c0>)
 80044fc:	5cd3      	ldrb	r3, [r2, r3]
 80044fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004502:	4a09      	ldr	r2, [pc, #36]	; (8004528 <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004506:	4b09      	ldr	r3, [pc, #36]	; (800452c <HAL_RCC_ClockConfig+0x1c8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fc fd6e 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40023c00 	.word	0x40023c00
 8004520:	40023800 	.word	0x40023800
 8004524:	08009768 	.word	0x08009768
 8004528:	20000000 	.word	0x20000000
 800452c:	20000004 	.word	0x20000004

08004530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	2300      	movs	r3, #0
 8004540:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004546:	4b63      	ldr	r3, [pc, #396]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b04      	cmp	r3, #4
 8004550:	d007      	beq.n	8004562 <HAL_RCC_GetSysClockFreq+0x32>
 8004552:	2b08      	cmp	r3, #8
 8004554:	d008      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x38>
 8004556:	2b00      	cmp	r3, #0
 8004558:	f040 80b4 	bne.w	80046c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800455c:	4b5e      	ldr	r3, [pc, #376]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800455e:	60bb      	str	r3, [r7, #8]
       break;
 8004560:	e0b3      	b.n	80046ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004562:	4b5e      	ldr	r3, [pc, #376]	; (80046dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004564:	60bb      	str	r3, [r7, #8]
      break;
 8004566:	e0b0      	b.n	80046ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004568:	4b5a      	ldr	r3, [pc, #360]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004570:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004572:	4b58      	ldr	r3, [pc, #352]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d04a      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457e:	4b55      	ldr	r3, [pc, #340]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	099b      	lsrs	r3, r3, #6
 8004584:	f04f 0400 	mov.w	r4, #0
 8004588:	f240 11ff 	movw	r1, #511	; 0x1ff
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	ea03 0501 	and.w	r5, r3, r1
 8004594:	ea04 0602 	and.w	r6, r4, r2
 8004598:	4629      	mov	r1, r5
 800459a:	4632      	mov	r2, r6
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	f04f 0400 	mov.w	r4, #0
 80045a4:	0154      	lsls	r4, r2, #5
 80045a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045aa:	014b      	lsls	r3, r1, #5
 80045ac:	4619      	mov	r1, r3
 80045ae:	4622      	mov	r2, r4
 80045b0:	1b49      	subs	r1, r1, r5
 80045b2:	eb62 0206 	sbc.w	r2, r2, r6
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	f04f 0400 	mov.w	r4, #0
 80045be:	0194      	lsls	r4, r2, #6
 80045c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045c4:	018b      	lsls	r3, r1, #6
 80045c6:	1a5b      	subs	r3, r3, r1
 80045c8:	eb64 0402 	sbc.w	r4, r4, r2
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	00e2      	lsls	r2, r4, #3
 80045d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045da:	00d9      	lsls	r1, r3, #3
 80045dc:	460b      	mov	r3, r1
 80045de:	4614      	mov	r4, r2
 80045e0:	195b      	adds	r3, r3, r5
 80045e2:	eb44 0406 	adc.w	r4, r4, r6
 80045e6:	f04f 0100 	mov.w	r1, #0
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	0262      	lsls	r2, r4, #9
 80045f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80045f4:	0259      	lsls	r1, r3, #9
 80045f6:	460b      	mov	r3, r1
 80045f8:	4614      	mov	r4, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	4621      	mov	r1, r4
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f04f 0400 	mov.w	r4, #0
 8004604:	461a      	mov	r2, r3
 8004606:	4623      	mov	r3, r4
 8004608:	f7fb fe3a 	bl	8000280 <__aeabi_uldivmod>
 800460c:	4603      	mov	r3, r0
 800460e:	460c      	mov	r4, r1
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	e049      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004614:	4b2f      	ldr	r3, [pc, #188]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	099b      	lsrs	r3, r3, #6
 800461a:	f04f 0400 	mov.w	r4, #0
 800461e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	ea03 0501 	and.w	r5, r3, r1
 800462a:	ea04 0602 	and.w	r6, r4, r2
 800462e:	4629      	mov	r1, r5
 8004630:	4632      	mov	r2, r6
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	f04f 0400 	mov.w	r4, #0
 800463a:	0154      	lsls	r4, r2, #5
 800463c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004640:	014b      	lsls	r3, r1, #5
 8004642:	4619      	mov	r1, r3
 8004644:	4622      	mov	r2, r4
 8004646:	1b49      	subs	r1, r1, r5
 8004648:	eb62 0206 	sbc.w	r2, r2, r6
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	f04f 0400 	mov.w	r4, #0
 8004654:	0194      	lsls	r4, r2, #6
 8004656:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800465a:	018b      	lsls	r3, r1, #6
 800465c:	1a5b      	subs	r3, r3, r1
 800465e:	eb64 0402 	sbc.w	r4, r4, r2
 8004662:	f04f 0100 	mov.w	r1, #0
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	00e2      	lsls	r2, r4, #3
 800466c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004670:	00d9      	lsls	r1, r3, #3
 8004672:	460b      	mov	r3, r1
 8004674:	4614      	mov	r4, r2
 8004676:	195b      	adds	r3, r3, r5
 8004678:	eb44 0406 	adc.w	r4, r4, r6
 800467c:	f04f 0100 	mov.w	r1, #0
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	02a2      	lsls	r2, r4, #10
 8004686:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800468a:	0299      	lsls	r1, r3, #10
 800468c:	460b      	mov	r3, r1
 800468e:	4614      	mov	r4, r2
 8004690:	4618      	mov	r0, r3
 8004692:	4621      	mov	r1, r4
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f04f 0400 	mov.w	r4, #0
 800469a:	461a      	mov	r2, r3
 800469c:	4623      	mov	r3, r4
 800469e:	f7fb fdef 	bl	8000280 <__aeabi_uldivmod>
 80046a2:	4603      	mov	r3, r0
 80046a4:	460c      	mov	r4, r1
 80046a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046a8:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	3301      	adds	r3, #1
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c0:	60bb      	str	r3, [r7, #8]
      break;
 80046c2:	e002      	b.n	80046ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046c4:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046c6:	60bb      	str	r3, [r7, #8]
      break;
 80046c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ca:	68bb      	ldr	r3, [r7, #8]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d4:	40023800 	.word	0x40023800
 80046d8:	00f42400 	.word	0x00f42400
 80046dc:	007a1200 	.word	0x007a1200

080046e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e4:	4b03      	ldr	r3, [pc, #12]	; (80046f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046e6:	681b      	ldr	r3, [r3, #0]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000000 	.word	0x20000000

080046f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d105      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800471c:	2b00      	cmp	r3, #0
 800471e:	d035      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004720:	4b62      	ldr	r3, [pc, #392]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004726:	f7fc fca5 	bl	8001074 <HAL_GetTick>
 800472a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800472c:	e008      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800472e:	f7fc fca1 	bl	8001074 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e0b0      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004740:	4b5b      	ldr	r3, [pc, #364]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f0      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	019a      	lsls	r2, r3, #6
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	071b      	lsls	r3, r3, #28
 8004758:	4955      	ldr	r1, [pc, #340]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004760:	4b52      	ldr	r3, [pc, #328]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004766:	f7fc fc85 	bl	8001074 <HAL_GetTick>
 800476a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800476e:	f7fc fc81 	bl	8001074 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e090      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004780:	4b4b      	ldr	r3, [pc, #300]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8083 	beq.w	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	4b44      	ldr	r3, [pc, #272]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	4a43      	ldr	r2, [pc, #268]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a8:	6413      	str	r3, [r2, #64]	; 0x40
 80047aa:	4b41      	ldr	r3, [pc, #260]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047b6:	4b3f      	ldr	r3, [pc, #252]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a3e      	ldr	r2, [pc, #248]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047c2:	f7fc fc57 	bl	8001074 <HAL_GetTick>
 80047c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fc fc53 	bl	8001074 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e062      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047dc:	4b35      	ldr	r3, [pc, #212]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047e8:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d02f      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	429a      	cmp	r2, r3
 8004804:	d028      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004806:	4b2a      	ldr	r3, [pc, #168]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004810:	4b29      	ldr	r3, [pc, #164]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004816:	4b28      	ldr	r3, [pc, #160]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800481c:	4a24      	ldr	r2, [pc, #144]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004822:	4b23      	ldr	r3, [pc, #140]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b01      	cmp	r3, #1
 800482c:	d114      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800482e:	f7fc fc21 	bl	8001074 <HAL_GetTick>
 8004832:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004834:	e00a      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f7fc fc1d 	bl	8001074 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f241 3288 	movw	r2, #5000	; 0x1388
 8004844:	4293      	cmp	r3, r2
 8004846:	d901      	bls.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e02a      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484c:	4b18      	ldr	r3, [pc, #96]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0ee      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004864:	d10d      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487a:	490d      	ldr	r1, [pc, #52]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800487c:	4313      	orrs	r3, r2
 800487e:	608b      	str	r3, [r1, #8]
 8004880:	e005      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004882:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	4a0a      	ldr	r2, [pc, #40]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004888:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800488c:	6093      	str	r3, [r2, #8]
 800488e:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004890:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800489a:	4905      	ldr	r1, [pc, #20]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800489c:	4313      	orrs	r3, r2
 800489e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	42470068 	.word	0x42470068
 80048b0:	40023800 	.word	0x40023800
 80048b4:	40007000 	.word	0x40007000
 80048b8:	42470e40 	.word	0x42470e40

080048bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d13d      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048da:	4b22      	ldr	r3, [pc, #136]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048e2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d004      	beq.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d12f      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048ee:	4b1e      	ldr	r3, [pc, #120]	; (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048f0:	617b      	str	r3, [r7, #20]
          break;
 80048f2:	e02f      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048f4:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004900:	d108      	bne.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004902:	4b18      	ldr	r3, [pc, #96]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800490a:	4a18      	ldr	r2, [pc, #96]	; (800496c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e007      	b.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004914:	4b13      	ldr	r3, [pc, #76]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800491c:	4a14      	ldr	r2, [pc, #80]	; (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800491e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004922:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492a:	099b      	lsrs	r3, r3, #6
 800492c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004938:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800493a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800493e:	0f1b      	lsrs	r3, r3, #28
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	617b      	str	r3, [r7, #20]
          break;
 800494c:	e002      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
          break;
 8004952:	bf00      	nop
        }
      }
      break;
 8004954:	bf00      	nop
    }
  }
  return frequency;
 8004956:	697b      	ldr	r3, [r7, #20]
}
 8004958:	4618      	mov	r0, r3
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	40023800 	.word	0x40023800
 8004968:	00bb8000 	.word	0x00bb8000
 800496c:	007a1200 	.word	0x007a1200
 8004970:	00f42400 	.word	0x00f42400

08004974 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004974:	b084      	sub	sp, #16
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	f107 001c 	add.w	r0, r7, #28
 8004982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	2b01      	cmp	r3, #1
 800498a:	d122      	bne.n	80049d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d105      	bne.n	80049c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f001 fac6 	bl	8005f58 <USB_CoreReset>
 80049cc:	4603      	mov	r3, r0
 80049ce:	73fb      	strb	r3, [r7, #15]
 80049d0:	e01a      	b.n	8004a08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f001 faba 	bl	8005f58 <USB_CoreReset>
 80049e4:	4603      	mov	r3, r0
 80049e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	639a      	str	r2, [r3, #56]	; 0x38
 80049fa:	e005      	b.n	8004a08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d10b      	bne.n	8004a26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f043 0206 	orr.w	r2, r3, #6
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f043 0220 	orr.w	r2, r3, #32
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a32:	b004      	add	sp, #16
 8004a34:	4770      	bx	lr
	...

08004a38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	4613      	mov	r3, r2
 8004a44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d165      	bne.n	8004b18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4a41      	ldr	r2, [pc, #260]	; (8004b54 <USB_SetTurnaroundTime+0x11c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d906      	bls.n	8004a62 <USB_SetTurnaroundTime+0x2a>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4a40      	ldr	r2, [pc, #256]	; (8004b58 <USB_SetTurnaroundTime+0x120>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d802      	bhi.n	8004a62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a5c:	230f      	movs	r3, #15
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	e062      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4a3c      	ldr	r2, [pc, #240]	; (8004b58 <USB_SetTurnaroundTime+0x120>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d906      	bls.n	8004a78 <USB_SetTurnaroundTime+0x40>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4a3b      	ldr	r2, [pc, #236]	; (8004b5c <USB_SetTurnaroundTime+0x124>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d802      	bhi.n	8004a78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a72:	230e      	movs	r3, #14
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	e057      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4a38      	ldr	r2, [pc, #224]	; (8004b5c <USB_SetTurnaroundTime+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d906      	bls.n	8004a8e <USB_SetTurnaroundTime+0x56>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4a37      	ldr	r2, [pc, #220]	; (8004b60 <USB_SetTurnaroundTime+0x128>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d802      	bhi.n	8004a8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a88:	230d      	movs	r3, #13
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e04c      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4a33      	ldr	r2, [pc, #204]	; (8004b60 <USB_SetTurnaroundTime+0x128>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d906      	bls.n	8004aa4 <USB_SetTurnaroundTime+0x6c>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4a32      	ldr	r2, [pc, #200]	; (8004b64 <USB_SetTurnaroundTime+0x12c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d802      	bhi.n	8004aa4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a9e:	230c      	movs	r3, #12
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	e041      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4a2f      	ldr	r2, [pc, #188]	; (8004b64 <USB_SetTurnaroundTime+0x12c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d906      	bls.n	8004aba <USB_SetTurnaroundTime+0x82>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4a2e      	ldr	r2, [pc, #184]	; (8004b68 <USB_SetTurnaroundTime+0x130>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d802      	bhi.n	8004aba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ab4:	230b      	movs	r3, #11
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	e036      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4a2a      	ldr	r2, [pc, #168]	; (8004b68 <USB_SetTurnaroundTime+0x130>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d906      	bls.n	8004ad0 <USB_SetTurnaroundTime+0x98>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4a29      	ldr	r2, [pc, #164]	; (8004b6c <USB_SetTurnaroundTime+0x134>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d802      	bhi.n	8004ad0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004aca:	230a      	movs	r3, #10
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	e02b      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4a26      	ldr	r2, [pc, #152]	; (8004b6c <USB_SetTurnaroundTime+0x134>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d906      	bls.n	8004ae6 <USB_SetTurnaroundTime+0xae>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4a25      	ldr	r2, [pc, #148]	; (8004b70 <USB_SetTurnaroundTime+0x138>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d802      	bhi.n	8004ae6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ae0:	2309      	movs	r3, #9
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	e020      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4a21      	ldr	r2, [pc, #132]	; (8004b70 <USB_SetTurnaroundTime+0x138>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d906      	bls.n	8004afc <USB_SetTurnaroundTime+0xc4>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <USB_SetTurnaroundTime+0x13c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d802      	bhi.n	8004afc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004af6:	2308      	movs	r3, #8
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e015      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4a1d      	ldr	r2, [pc, #116]	; (8004b74 <USB_SetTurnaroundTime+0x13c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d906      	bls.n	8004b12 <USB_SetTurnaroundTime+0xda>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4a1c      	ldr	r2, [pc, #112]	; (8004b78 <USB_SetTurnaroundTime+0x140>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d802      	bhi.n	8004b12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b0c:	2307      	movs	r3, #7
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e00a      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b12:	2306      	movs	r3, #6
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e007      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b1e:	2309      	movs	r3, #9
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	e001      	b.n	8004b28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b24:	2309      	movs	r3, #9
 8004b26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	029b      	lsls	r3, r3, #10
 8004b3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b40:	431a      	orrs	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	371c      	adds	r7, #28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	00d8acbf 	.word	0x00d8acbf
 8004b58:	00e4e1bf 	.word	0x00e4e1bf
 8004b5c:	00f423ff 	.word	0x00f423ff
 8004b60:	0106737f 	.word	0x0106737f
 8004b64:	011a499f 	.word	0x011a499f
 8004b68:	01312cff 	.word	0x01312cff
 8004b6c:	014ca43f 	.word	0x014ca43f
 8004b70:	016e35ff 	.word	0x016e35ff
 8004b74:	01a6ab1f 	.word	0x01a6ab1f
 8004b78:	01e847ff 	.word	0x01e847ff

08004b7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f043 0201 	orr.w	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f023 0201 	bic.w	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d106      	bne.n	8004bec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60da      	str	r2, [r3, #12]
 8004bea:	e00b      	b.n	8004c04 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60da      	str	r2, [r3, #12]
 8004bfe:	e001      	b.n	8004c04 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e003      	b.n	8004c0c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c04:	2032      	movs	r0, #50	; 0x32
 8004c06:	f7fc fa41 	bl	800108c <HAL_Delay>

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c14:	b084      	sub	sp, #16
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	e009      	b.n	8004c48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	3340      	adds	r3, #64	; 0x40
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	2200      	movs	r2, #0
 8004c40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	3301      	adds	r3, #1
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b0e      	cmp	r3, #14
 8004c4c:	d9f2      	bls.n	8004c34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d11c      	bne.n	8004c8e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c62:	f043 0302 	orr.w	r3, r3, #2
 8004c66:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c8c:	e00b      	b.n	8004ca6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cac:	461a      	mov	r2, r3
 8004cae:	2300      	movs	r3, #0
 8004cb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	4619      	mov	r1, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	680b      	ldr	r3, [r1, #0]
 8004cc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d10c      	bne.n	8004ce6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d104      	bne.n	8004cdc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f949 	bl	8004f6c <USB_SetDevSpeed>
 8004cda:	e008      	b.n	8004cee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cdc:	2101      	movs	r1, #1
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f944 	bl	8004f6c <USB_SetDevSpeed>
 8004ce4:	e003      	b.n	8004cee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ce6:	2103      	movs	r1, #3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f93f 	bl	8004f6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cee:	2110      	movs	r1, #16
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f8f3 	bl	8004edc <USB_FlushTxFifo>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f911 	bl	8004f28 <USB_FlushRxFifo>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d16:	461a      	mov	r2, r3
 8004d18:	2300      	movs	r3, #0
 8004d1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	461a      	mov	r2, r3
 8004d24:	2300      	movs	r3, #0
 8004d26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d34:	2300      	movs	r3, #0
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	e043      	b.n	8004dc2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d50:	d118      	bne.n	8004d84 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	461a      	mov	r2, r3
 8004d66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	e013      	b.n	8004d96 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e008      	b.n	8004d96 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	461a      	mov	r2, r3
 8004d92:	2300      	movs	r3, #0
 8004d94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da2:	461a      	mov	r2, r3
 8004da4:	2300      	movs	r3, #0
 8004da6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db4:	461a      	mov	r2, r3
 8004db6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d3b7      	bcc.n	8004d3a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	e043      	b.n	8004e58 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004de6:	d118      	bne.n	8004e1a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e013      	b.n	8004e2c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e10:	461a      	mov	r2, r3
 8004e12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	e008      	b.n	8004e2c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	461a      	mov	r2, r3
 8004e28:	2300      	movs	r3, #0
 8004e2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	3301      	adds	r3, #1
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d3b7      	bcc.n	8004dd0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d105      	bne.n	8004e94 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f043 0210 	orr.w	r2, r3, #16
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	4b0f      	ldr	r3, [pc, #60]	; (8004ed8 <USB_DevInit+0x2c4>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f043 0208 	orr.w	r2, r3, #8
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d107      	bne.n	8004ec8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ec0:	f043 0304 	orr.w	r3, r3, #4
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ed4:	b004      	add	sp, #16
 8004ed6:	4770      	bx	lr
 8004ed8:	803c3800 	.word	0x803c3800

08004edc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	019b      	lsls	r3, r3, #6
 8004eee:	f043 0220 	orr.w	r2, r3, #32
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <USB_FlushTxFifo+0x48>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d901      	bls.n	8004f08 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e006      	b.n	8004f16 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d0f0      	beq.n	8004ef6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	00030d40 	.word	0x00030d40

08004f28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2210      	movs	r2, #16
 8004f38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <USB_FlushRxFifo+0x40>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d901      	bls.n	8004f4c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e006      	b.n	8004f5a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d0f0      	beq.n	8004f3a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	00030d40 	.word	0x00030d40

08004f6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b087      	sub	sp, #28
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0306 	and.w	r3, r3, #6
 8004fb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	75fb      	strb	r3, [r7, #23]
 8004fc2:	e00a      	b.n	8004fda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d002      	beq.n	8004fd0 <USB_GetDevSpeed+0x32>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b06      	cmp	r3, #6
 8004fce:	d102      	bne.n	8004fd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	75fb      	strb	r3, [r7, #23]
 8004fd4:	e001      	b.n	8004fda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004fd6:	230f      	movs	r3, #15
 8004fd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	785b      	ldrb	r3, [r3, #1]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d13a      	bne.n	800507a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	2101      	movs	r1, #1
 8005016:	fa01 f303 	lsl.w	r3, r1, r3
 800501a:	b29b      	uxth	r3, r3
 800501c:	68f9      	ldr	r1, [r7, #12]
 800501e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005022:	4313      	orrs	r3, r2
 8005024:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d155      	bne.n	80050e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	78db      	ldrb	r3, [r3, #3]
 8005056:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005058:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	059b      	lsls	r3, r3, #22
 800505e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005060:	4313      	orrs	r3, r2
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	e036      	b.n	80050e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005080:	69da      	ldr	r2, [r3, #28]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	2101      	movs	r1, #1
 800508c:	fa01 f303 	lsl.w	r3, r1, r3
 8005090:	041b      	lsls	r3, r3, #16
 8005092:	68f9      	ldr	r1, [r7, #12]
 8005094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005098:	4313      	orrs	r3, r2
 800509a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d11a      	bne.n	80050e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	78db      	ldrb	r3, [r3, #3]
 80050cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050ce:	430b      	orrs	r3, r1
 80050d0:	4313      	orrs	r3, r2
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d161      	bne.n	80051d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800512a:	d11f      	bne.n	800516c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	0151      	lsls	r1, r2, #5
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	440a      	add	r2, r1
 8005142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005146:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800514a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005166:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800516a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	2101      	movs	r1, #1
 800517e:	fa01 f303 	lsl.w	r3, r1, r3
 8005182:	b29b      	uxth	r3, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	68f9      	ldr	r1, [r7, #12]
 8005188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800518c:	4013      	ands	r3, r2
 800518e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	2101      	movs	r1, #1
 80051a2:	fa01 f303 	lsl.w	r3, r1, r3
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	68f9      	ldr	r1, [r7, #12]
 80051ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051b0:	4013      	ands	r3, r2
 80051b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	0159      	lsls	r1, r3, #5
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	440b      	add	r3, r1
 80051ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ce:	4619      	mov	r1, r3
 80051d0:	4b35      	ldr	r3, [pc, #212]	; (80052a8 <USB_DeactivateEndpoint+0x1b0>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	600b      	str	r3, [r1, #0]
 80051d6:	e060      	b.n	800529a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ee:	d11f      	bne.n	8005230 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	0151      	lsls	r1, r2, #5
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	440a      	add	r2, r1
 8005206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800520e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	0151      	lsls	r1, r2, #5
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	440a      	add	r2, r1
 8005226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800522e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	2101      	movs	r1, #1
 8005242:	fa01 f303 	lsl.w	r3, r1, r3
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	43db      	mvns	r3, r3
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005250:	4013      	ands	r3, r2
 8005252:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f303 	lsl.w	r3, r1, r3
 800526a:	041b      	lsls	r3, r3, #16
 800526c:	43db      	mvns	r3, r3
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005274:	4013      	ands	r3, r2
 8005276:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	0159      	lsls	r1, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	440b      	add	r3, r1
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	4619      	mov	r1, r3
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <USB_DeactivateEndpoint+0x1b4>)
 8005296:	4013      	ands	r3, r2
 8005298:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	ec337800 	.word	0xec337800
 80052ac:	eff37800 	.word	0xeff37800

080052b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08a      	sub	sp, #40	; 0x28
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	f040 815c 	bne.w	800558a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d132      	bne.n	8005340 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	0151      	lsls	r1, r2, #5
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	440a      	add	r2, r1
 80052f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005318:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800531c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	440a      	add	r2, r1
 8005334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005338:	0cdb      	lsrs	r3, r3, #19
 800533a:	04db      	lsls	r3, r3, #19
 800533c:	6113      	str	r3, [r2, #16]
 800533e:	e074      	b.n	800542a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	440a      	add	r2, r1
 8005356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535a:	0cdb      	lsrs	r3, r3, #19
 800535c:	04db      	lsls	r3, r3, #19
 800535e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800537e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005382:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6959      	ldr	r1, [r3, #20]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	440b      	add	r3, r1
 800539c:	1e59      	subs	r1, r3, #1
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80053a6:	04d9      	lsls	r1, r3, #19
 80053a8:	4b9d      	ldr	r3, [pc, #628]	; (8005620 <USB_EPStartXfer+0x370>)
 80053aa:	400b      	ands	r3, r1
 80053ac:	69b9      	ldr	r1, [r7, #24]
 80053ae:	0148      	lsls	r0, r1, #5
 80053b0:	69f9      	ldr	r1, [r7, #28]
 80053b2:	4401      	add	r1, r0
 80053b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053b8:	4313      	orrs	r3, r2
 80053ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d2:	69b9      	ldr	r1, [r7, #24]
 80053d4:	0148      	lsls	r0, r1, #5
 80053d6:	69f9      	ldr	r1, [r7, #28]
 80053d8:	4401      	add	r1, r0
 80053da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053de:	4313      	orrs	r3, r2
 80053e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	78db      	ldrb	r3, [r3, #3]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d11f      	bne.n	800542a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	0151      	lsls	r1, r2, #5
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	440a      	add	r2, r1
 8005400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005404:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005408:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	440a      	add	r2, r1
 8005420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005424:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005428:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800542a:	79fb      	ldrb	r3, [r7, #7]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d14b      	bne.n	80054c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d009      	beq.n	800544c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	461a      	mov	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	78db      	ldrb	r3, [r3, #3]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d128      	bne.n	80054a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005460:	2b00      	cmp	r3, #0
 8005462:	d110      	bne.n	8005486 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	0151      	lsls	r1, r2, #5
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	440a      	add	r2, r1
 800547a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e00f      	b.n	80054a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	440a      	add	r2, r1
 800549c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	e12f      	b.n	8005728 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	0151      	lsls	r1, r2, #5
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	440a      	add	r2, r1
 80054de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	78db      	ldrb	r3, [r3, #3]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d015      	beq.n	800551c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 8117 	beq.w	8005728 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	2101      	movs	r1, #1
 800550c:	fa01 f303 	lsl.w	r3, r1, r3
 8005510:	69f9      	ldr	r1, [r7, #28]
 8005512:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005516:	4313      	orrs	r3, r2
 8005518:	634b      	str	r3, [r1, #52]	; 0x34
 800551a:	e105      	b.n	8005728 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d110      	bne.n	800554e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005546:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	e00f      	b.n	800556e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	68d9      	ldr	r1, [r3, #12]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	781a      	ldrb	r2, [r3, #0]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	b298      	uxth	r0, r3
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	4603      	mov	r3, r0
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 fa2b 	bl	80059de <USB_WritePacket>
 8005588:	e0ce      	b.n	8005728 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a4:	0cdb      	lsrs	r3, r3, #19
 80055a6:	04db      	lsls	r3, r3, #19
 80055a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	0151      	lsls	r1, r2, #5
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	440a      	add	r2, r1
 80055c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d126      	bne.n	8005624 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ec:	69b9      	ldr	r1, [r7, #24]
 80055ee:	0148      	lsls	r0, r1, #5
 80055f0:	69f9      	ldr	r1, [r7, #28]
 80055f2:	4401      	add	r1, r0
 80055f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055f8:	4313      	orrs	r3, r2
 80055fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005616:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800561a:	6113      	str	r3, [r2, #16]
 800561c:	e036      	b.n	800568c <USB_EPStartXfer+0x3dc>
 800561e:	bf00      	nop
 8005620:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	695a      	ldr	r2, [r3, #20]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4413      	add	r3, r2
 800562e:	1e5a      	subs	r2, r3, #1
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	fbb2 f3f3 	udiv	r3, r2, r3
 8005638:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	8afb      	ldrh	r3, [r7, #22]
 800564a:	04d9      	lsls	r1, r3, #19
 800564c:	4b39      	ldr	r3, [pc, #228]	; (8005734 <USB_EPStartXfer+0x484>)
 800564e:	400b      	ands	r3, r1
 8005650:	69b9      	ldr	r1, [r7, #24]
 8005652:	0148      	lsls	r0, r1, #5
 8005654:	69f9      	ldr	r1, [r7, #28]
 8005656:	4401      	add	r1, r0
 8005658:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800565c:	4313      	orrs	r3, r2
 800565e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	8af9      	ldrh	r1, [r7, #22]
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800567c:	69b9      	ldr	r1, [r7, #24]
 800567e:	0148      	lsls	r0, r1, #5
 8005680:	69f9      	ldr	r1, [r7, #28]
 8005682:	4401      	add	r1, r0
 8005684:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005688:	4313      	orrs	r3, r2
 800568a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d10d      	bne.n	80056ae <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	68d9      	ldr	r1, [r3, #12]
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	460a      	mov	r2, r1
 80056ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	78db      	ldrb	r3, [r3, #3]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d128      	bne.n	8005708 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d110      	bne.n	80056e8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	e00f      	b.n	8005708 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005706:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005722:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005726:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	1ff80000 	.word	0x1ff80000

08005738 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b01      	cmp	r3, #1
 8005756:	f040 80cd 	bne.w	80058f4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d132      	bne.n	80057c8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005780:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005784:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	440a      	add	r2, r1
 800579c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c0:	0cdb      	lsrs	r3, r3, #19
 80057c2:	04db      	lsls	r3, r3, #19
 80057c4:	6113      	str	r3, [r2, #16]
 80057c6:	e04e      	b.n	8005866 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e2:	0cdb      	lsrs	r3, r3, #19
 80057e4:	04db      	lsls	r3, r3, #19
 80057e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005802:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005806:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800580a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	429a      	cmp	r2, r3
 8005816:	d903      	bls.n	8005820 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800583e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005856:	6939      	ldr	r1, [r7, #16]
 8005858:	0148      	lsls	r0, r1, #5
 800585a:	6979      	ldr	r1, [r7, #20]
 800585c:	4401      	add	r1, r0
 800585e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005862:	4313      	orrs	r3, r2
 8005864:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d11e      	bne.n	80058aa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d009      	beq.n	8005888 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	461a      	mov	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	e092      	b.n	80059d0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	0151      	lsls	r1, r2, #5
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	440a      	add	r2, r1
 80058c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058c8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d07e      	beq.n	80059d0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	2101      	movs	r1, #1
 80058e4:	fa01 f303 	lsl.w	r3, r1, r3
 80058e8:	6979      	ldr	r1, [r7, #20]
 80058ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ee:	4313      	orrs	r3, r2
 80058f0:	634b      	str	r3, [r1, #52]	; 0x34
 80058f2:	e06d      	b.n	80059d0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	0151      	lsls	r1, r2, #5
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	440a      	add	r2, r1
 800590a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800590e:	0cdb      	lsrs	r3, r3, #19
 8005910:	04db      	lsls	r3, r3, #19
 8005912:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	0151      	lsls	r1, r2, #5
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	440a      	add	r2, r1
 800592a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800592e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005932:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005936:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	0151      	lsls	r1, r2, #5
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	440a      	add	r2, r1
 800595e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005962:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005966:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800597e:	6939      	ldr	r1, [r7, #16]
 8005980:	0148      	lsls	r0, r1, #5
 8005982:	6979      	ldr	r1, [r7, #20]
 8005984:	4401      	add	r1, r0
 8005986:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800598a:	4313      	orrs	r3, r2
 800598c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d10d      	bne.n	80059b0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d009      	beq.n	80059b0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	68d9      	ldr	r1, [r3, #12]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	460a      	mov	r2, r1
 80059ae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059de:	b480      	push	{r7}
 80059e0:	b089      	sub	sp, #36	; 0x24
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	4611      	mov	r1, r2
 80059ea:	461a      	mov	r2, r3
 80059ec:	460b      	mov	r3, r1
 80059ee:	71fb      	strb	r3, [r7, #7]
 80059f0:	4613      	mov	r3, r2
 80059f2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80059fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d11a      	bne.n	8005a3a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a04:	88bb      	ldrh	r3, [r7, #4]
 8005a06:	3303      	adds	r3, #3
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61bb      	str	r3, [r7, #24]
 8005a10:	e00f      	b.n	8005a32 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	031a      	lsls	r2, r3, #12
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1e:	461a      	mov	r2, r3
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d3eb      	bcc.n	8005a12 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3724      	adds	r7, #36	; 0x24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b089      	sub	sp, #36	; 0x24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	4613      	mov	r3, r2
 8005a54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	3303      	adds	r3, #3
 8005a62:	089b      	lsrs	r3, r3, #2
 8005a64:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005a66:	2300      	movs	r3, #0
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	e00b      	b.n	8005a84 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	3301      	adds	r3, #1
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d3ef      	bcc.n	8005a6c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005a8c:	69fb      	ldr	r3, [r7, #28]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3724      	adds	r7, #36	; 0x24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b085      	sub	sp, #20
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d12c      	bne.n	8005b10 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	db12      	blt.n	8005aee <USB_EPSetStall+0x54>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00f      	beq.n	8005aee <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005aec:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	e02b      	b.n	8005b68 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	db12      	blt.n	8005b48 <USB_EPSetStall+0xae>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00f      	beq.n	8005b48 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b46:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d128      	bne.n	8005be4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	78db      	ldrb	r3, [r3, #3]
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d003      	beq.n	8005bc2 <USB_EPClearStall+0x4c>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	78db      	ldrb	r3, [r3, #3]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d138      	bne.n	8005c34 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e027      	b.n	8005c34 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	78db      	ldrb	r3, [r3, #3]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d003      	beq.n	8005c14 <USB_EPClearStall+0x9e>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	78db      	ldrb	r3, [r3, #3]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d10f      	bne.n	8005c34 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c32:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c60:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c64:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c76:	68f9      	ldr	r1, [r7, #12]
 8005c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ca8:	f023 0303 	bic.w	r3, r3, #3
 8005cac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cbc:	f023 0302 	bic.w	r3, r3, #2
 8005cc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfe:	f043 0302 	orr.w	r3, r3, #2
 8005d02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4013      	ands	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	0c1b      	lsrs	r3, r3, #16
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	b29b      	uxth	r3, r3
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005dce:	68bb      	ldr	r3, [r7, #8]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0c:	01db      	lsls	r3, r3, #7
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4013      	ands	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f003 0301 	and.w	r3, r3, #1
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e72:	f023 0307 	bic.w	r3, r3, #7
 8005e76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	333c      	adds	r3, #60	; 0x3c
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4a26      	ldr	r2, [pc, #152]	; (8005f54 <USB_EP0_OutStart+0xb8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d90a      	bls.n	8005ed6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ed0:	d101      	bne.n	8005ed6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e037      	b.n	8005f46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	461a      	mov	r2, r3
 8005ede:	2300      	movs	r3, #0
 8005ee0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ef4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f04:	f043 0318 	orr.w	r3, r3, #24
 8005f08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f1e:	7afb      	ldrb	r3, [r7, #11]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d10f      	bne.n	8005f44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	4f54300a 	.word	0x4f54300a

08005f58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3301      	adds	r3, #1
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <USB_CoreReset+0x64>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e01b      	b.n	8005fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	daf2      	bge.n	8005f64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f043 0201 	orr.w	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4a09      	ldr	r2, [pc, #36]	; (8005fbc <USB_CoreReset+0x64>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d901      	bls.n	8005fa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e006      	b.n	8005fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d0f0      	beq.n	8005f8e <USB_CoreReset+0x36>

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	00030d40 	.word	0x00030d40

08005fc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fcc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fd0:	f002 fa52 	bl	8008478 <malloc>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d105      	bne.n	8005fea <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e066      	b.n	80060b8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	7c1b      	ldrb	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d119      	bne.n	800602e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ffe:	2202      	movs	r2, #2
 8006000:	2181      	movs	r1, #129	; 0x81
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f002 f8bf 	bl	8008186 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800600e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006012:	2202      	movs	r2, #2
 8006014:	2101      	movs	r1, #1
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f002 f8b5 	bl	8008186 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2210      	movs	r2, #16
 8006028:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800602c:	e016      	b.n	800605c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800602e:	2340      	movs	r3, #64	; 0x40
 8006030:	2202      	movs	r2, #2
 8006032:	2181      	movs	r1, #129	; 0x81
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f002 f8a6 	bl	8008186 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006040:	2340      	movs	r3, #64	; 0x40
 8006042:	2202      	movs	r2, #2
 8006044:	2101      	movs	r1, #1
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f002 f89d 	bl	8008186 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2210      	movs	r2, #16
 8006058:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800605c:	2308      	movs	r3, #8
 800605e:	2203      	movs	r2, #3
 8006060:	2182      	movs	r1, #130	; 0x82
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f002 f88f 	bl	8008186 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	7c1b      	ldrb	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d109      	bne.n	80060a6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800609c:	2101      	movs	r1, #1
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f002 f960 	bl	8008364 <USBD_LL_PrepareReceive>
 80060a4:	e007      	b.n	80060b6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060ac:	2340      	movs	r3, #64	; 0x40
 80060ae:	2101      	movs	r1, #1
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f002 f957 	bl	8008364 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80060d0:	2181      	movs	r1, #129	; 0x81
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f002 f87d 	bl	80081d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80060de:	2101      	movs	r1, #1
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f002 f876 	bl	80081d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80060ee:	2182      	movs	r1, #130	; 0x82
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f002 f86e 	bl	80081d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00e      	beq.n	800612e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006120:	4618      	mov	r0, r3
 8006122:	f002 f9b1 	bl	8008488 <free>
    pdev->pClassData = NULL;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800612e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006148:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800615e:	2b00      	cmp	r3, #0
 8006160:	d03a      	beq.n	80061d8 <USBD_CDC_Setup+0xa0>
 8006162:	2b20      	cmp	r3, #32
 8006164:	f040 8097 	bne.w	8006296 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	88db      	ldrh	r3, [r3, #6]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d029      	beq.n	80061c4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	b25b      	sxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	da11      	bge.n	800619e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006186:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	88d2      	ldrh	r2, [r2, #6]
 800618c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800618e:	6939      	ldr	r1, [r7, #16]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	88db      	ldrh	r3, [r3, #6]
 8006194:	461a      	mov	r2, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 fa9d 	bl	80076d6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800619c:	e082      	b.n	80062a4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	785a      	ldrb	r2, [r3, #1]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	88db      	ldrh	r3, [r3, #6]
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80061b4:	6939      	ldr	r1, [r7, #16]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	88db      	ldrh	r3, [r3, #6]
 80061ba:	461a      	mov	r2, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f001 fab6 	bl	800772e <USBD_CtlPrepareRx>
    break;
 80061c2:	e06f      	b.n	80062a4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	7850      	ldrb	r0, [r2, #1]
 80061d0:	2200      	movs	r2, #0
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	4798      	blx	r3
    break;
 80061d6:	e065      	b.n	80062a4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b0b      	cmp	r3, #11
 80061de:	d84f      	bhi.n	8006280 <USBD_CDC_Setup+0x148>
 80061e0:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <USBD_CDC_Setup+0xb0>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	08006219 	.word	0x08006219
 80061ec:	0800628f 	.word	0x0800628f
 80061f0:	08006281 	.word	0x08006281
 80061f4:	08006281 	.word	0x08006281
 80061f8:	08006281 	.word	0x08006281
 80061fc:	08006281 	.word	0x08006281
 8006200:	08006281 	.word	0x08006281
 8006204:	08006281 	.word	0x08006281
 8006208:	08006281 	.word	0x08006281
 800620c:	08006281 	.word	0x08006281
 8006210:	08006241 	.word	0x08006241
 8006214:	08006269 	.word	0x08006269
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800621e:	2b03      	cmp	r3, #3
 8006220:	d107      	bne.n	8006232 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006222:	f107 030c 	add.w	r3, r7, #12
 8006226:	2202      	movs	r2, #2
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 fa53 	bl	80076d6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006230:	e030      	b.n	8006294 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 f9dd 	bl	80075f4 <USBD_CtlError>
        ret = USBD_FAIL;
 800623a:	2303      	movs	r3, #3
 800623c:	75fb      	strb	r3, [r7, #23]
      break;
 800623e:	e029      	b.n	8006294 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006246:	2b03      	cmp	r3, #3
 8006248:	d107      	bne.n	800625a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800624a:	f107 030f 	add.w	r3, r7, #15
 800624e:	2201      	movs	r2, #1
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 fa3f 	bl	80076d6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006258:	e01c      	b.n	8006294 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f001 f9c9 	bl	80075f4 <USBD_CtlError>
        ret = USBD_FAIL;
 8006262:	2303      	movs	r3, #3
 8006264:	75fb      	strb	r3, [r7, #23]
      break;
 8006266:	e015      	b.n	8006294 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800626e:	2b03      	cmp	r3, #3
 8006270:	d00f      	beq.n	8006292 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 f9bd 	bl	80075f4 <USBD_CtlError>
        ret = USBD_FAIL;
 800627a:	2303      	movs	r3, #3
 800627c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800627e:	e008      	b.n	8006292 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 f9b6 	bl	80075f4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006288:	2303      	movs	r3, #3
 800628a:	75fb      	strb	r3, [r7, #23]
      break;
 800628c:	e002      	b.n	8006294 <USBD_CDC_Setup+0x15c>
      break;
 800628e:	bf00      	nop
 8006290:	e008      	b.n	80062a4 <USBD_CDC_Setup+0x16c>
      break;
 8006292:	bf00      	nop
    }
    break;
 8006294:	e006      	b.n	80062a4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f001 f9ab 	bl	80075f4 <USBD_CtlError>
    ret = USBD_FAIL;
 800629e:	2303      	movs	r3, #3
 80062a0:	75fb      	strb	r3, [r7, #23]
    break;
 80062a2:	bf00      	nop
  }

  return (uint8_t)ret;
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop

080062b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e049      	b.n	8006366 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80062da:	78fa      	ldrb	r2, [r7, #3]
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	3318      	adds	r3, #24
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d029      	beq.n	8006344 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80062f0:	78fa      	ldrb	r2, [r7, #3]
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	4613      	mov	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	440b      	add	r3, r1
 80062fe:	3318      	adds	r3, #24
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	78f9      	ldrb	r1, [r7, #3]
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	460b      	mov	r3, r1
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	1a5b      	subs	r3, r3, r1
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4403      	add	r3, r0
 8006310:	3344      	adds	r3, #68	; 0x44
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	fbb2 f1f3 	udiv	r1, r2, r3
 8006318:	fb03 f301 	mul.w	r3, r3, r1
 800631c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800631e:	2b00      	cmp	r3, #0
 8006320:	d110      	bne.n	8006344 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006322:	78fa      	ldrb	r2, [r7, #3]
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	3318      	adds	r3, #24
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006336:	78f9      	ldrb	r1, [r7, #3]
 8006338:	2300      	movs	r3, #0
 800633a:	2200      	movs	r2, #0
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 fff0 	bl	8008322 <USBD_LL_Transmit>
 8006342:	e00f      	b.n	8006364 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006360:	78fa      	ldrb	r2, [r7, #3]
 8006362:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	460b      	mov	r3, r1
 8006378:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006380:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800638c:	2303      	movs	r3, #3
 800638e:	e015      	b.n	80063bc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f002 f806 	bl	80083a6 <USBD_LL_GetRxDataSize>
 800639a:	4602      	mov	r2, r0
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80063b6:	4611      	mov	r1, r2
 80063b8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063d2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d015      	beq.n	800640a <USBD_CDC_EP0_RxReady+0x46>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80063e4:	2bff      	cmp	r3, #255	; 0xff
 80063e6:	d010      	beq.n	800640a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80063f6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063fe:	b292      	uxth	r2, r2
 8006400:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	22ff      	movs	r2, #255	; 0xff
 8006406:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2243      	movs	r2, #67	; 0x43
 8006420:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006422:	4b03      	ldr	r3, [pc, #12]	; (8006430 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006424:	4618      	mov	r0, r3
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	20000094 	.word	0x20000094

08006434 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2243      	movs	r2, #67	; 0x43
 8006440:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006442:	4b03      	ldr	r3, [pc, #12]	; (8006450 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	20000050 	.word	0x20000050

08006454 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2243      	movs	r2, #67	; 0x43
 8006460:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006462:	4b03      	ldr	r3, [pc, #12]	; (8006470 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	200000d8 	.word	0x200000d8

08006474 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	220a      	movs	r2, #10
 8006480:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006482:	4b03      	ldr	r3, [pc, #12]	; (8006490 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006484:	4618      	mov	r0, r3
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	2000000c 	.word	0x2000000c

08006494 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e004      	b.n	80064b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80064be:	b480      	push	{r7}
 80064c0:	b087      	sub	sp, #28
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064d0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006500:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006526:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006528:	2301      	movs	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006536:	2303      	movs	r3, #3
 8006538:	e01a      	b.n	8006570 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006540:	2b00      	cmp	r3, #0
 8006542:	d114      	bne.n	800656e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2201      	movs	r2, #1
 8006548:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006562:	2181      	movs	r1, #129	; 0x81
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 fedc 	bl	8008322 <USBD_LL_Transmit>

    ret = USBD_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006586:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006592:	2303      	movs	r3, #3
 8006594:	e016      	b.n	80065c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	7c1b      	ldrb	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d109      	bne.n	80065b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065a8:	2101      	movs	r1, #1
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f001 feda 	bl	8008364 <USBD_LL_PrepareReceive>
 80065b0:	e007      	b.n	80065c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065b8:	2340      	movs	r3, #64	; 0x40
 80065ba:	2101      	movs	r1, #1
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f001 fed1 	bl	8008364 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	4613      	mov	r3, r2
 80065d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e025      	b.n	8006630 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	79fa      	ldrb	r2, [r7, #7]
 8006622:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f001 fd47 	bl	80080b8 <USBD_LL_Init>
 800662a:	4603      	mov	r3, r0
 800662c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800662e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800664c:	2303      	movs	r3, #3
 800664e:	e010      	b.n	8006672 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	f107 020e 	add.w	r2, r7, #14
 8006664:	4610      	mov	r0, r2
 8006666:	4798      	blx	r3
 8006668:	4602      	mov	r2, r0
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 fd64 	bl	8008150 <USBD_LL_Start>
 8006688:	4603      	mov	r3, r0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80066b4:	2303      	movs	r3, #3
 80066b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d009      	beq.n	80066d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	78fa      	ldrb	r2, [r7, #3]
 80066cc:	4611      	mov	r1, r2
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	4798      	blx	r3
 80066d2:	4603      	mov	r3, r0
 80066d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d007      	beq.n	8006706 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	78fa      	ldrb	r2, [r7, #3]
 8006700:	4611      	mov	r1, r2
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	4798      	blx	r3
  }

  return USBD_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f000 ff2c 	bl	8007580 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006736:	461a      	mov	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	2b01      	cmp	r3, #1
 800674a:	d00e      	beq.n	800676a <USBD_LL_SetupStage+0x5a>
 800674c:	2b01      	cmp	r3, #1
 800674e:	d302      	bcc.n	8006756 <USBD_LL_SetupStage+0x46>
 8006750:	2b02      	cmp	r3, #2
 8006752:	d014      	beq.n	800677e <USBD_LL_SetupStage+0x6e>
 8006754:	e01d      	b.n	8006792 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa18 	bl	8006b94 <USBD_StdDevReq>
 8006764:	4603      	mov	r3, r0
 8006766:	73fb      	strb	r3, [r7, #15]
      break;
 8006768:	e020      	b.n	80067ac <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa7c 	bl	8006c70 <USBD_StdItfReq>
 8006778:	4603      	mov	r3, r0
 800677a:	73fb      	strb	r3, [r7, #15]
      break;
 800677c:	e016      	b.n	80067ac <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fab8 	bl	8006cfc <USBD_StdEPReq>
 800678c:	4603      	mov	r3, r0
 800678e:	73fb      	strb	r3, [r7, #15]
      break;
 8006790:	e00c      	b.n	80067ac <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006798:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800679c:	b2db      	uxtb	r3, r3
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 fd35 	bl	8008210 <USBD_LL_StallEP>
 80067a6:	4603      	mov	r3, r0
 80067a8:	73fb      	strb	r3, [r7, #15]
      break;
 80067aa:	bf00      	nop
  }

  return ret;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b086      	sub	sp, #24
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	460b      	mov	r3, r1
 80067c0:	607a      	str	r2, [r7, #4]
 80067c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80067c4:	7afb      	ldrb	r3, [r7, #11]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d137      	bne.n	800683a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d14a      	bne.n	8006872 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d913      	bls.n	8006810 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	1ad2      	subs	r2, r2, r3
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	4293      	cmp	r3, r2
 8006800:	bf28      	it	cs
 8006802:	4613      	movcs	r3, r2
 8006804:	461a      	mov	r2, r3
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 ffad 	bl	8007768 <USBD_CtlContinueRx>
 800680e:	e030      	b.n	8006872 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006822:	2b03      	cmp	r3, #3
 8006824:	d105      	bne.n	8006832 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 ffa9 	bl	800778a <USBD_CtlSendStatus>
 8006838:	e01b      	b.n	8006872 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d013      	beq.n	800686e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800684c:	2b03      	cmp	r3, #3
 800684e:	d10e      	bne.n	800686e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	7afa      	ldrb	r2, [r7, #11]
 800685a:	4611      	mov	r1, r2
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	4798      	blx	r3
 8006860:	4603      	mov	r3, r0
 8006862:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	e002      	b.n	8006874 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800686e:	2303      	movs	r3, #3
 8006870:	e000      	b.n	8006874 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	460b      	mov	r3, r1
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800688a:	7afb      	ldrb	r3, [r7, #11]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d16a      	bne.n	8006966 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3314      	adds	r3, #20
 8006894:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800689c:	2b02      	cmp	r3, #2
 800689e:	d155      	bne.n	800694c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d914      	bls.n	80068d6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	1ad2      	subs	r2, r2, r3
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	461a      	mov	r2, r3
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 ff22 	bl	800770c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068c8:	2300      	movs	r3, #0
 80068ca:	2200      	movs	r2, #0
 80068cc:	2100      	movs	r1, #0
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f001 fd48 	bl	8008364 <USBD_LL_PrepareReceive>
 80068d4:	e03a      	b.n	800694c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d11c      	bne.n	800691c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d316      	bcc.n	800691c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d20f      	bcs.n	800691c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068fc:	2200      	movs	r2, #0
 80068fe:	2100      	movs	r1, #0
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 ff03 	bl	800770c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800690e:	2300      	movs	r3, #0
 8006910:	2200      	movs	r2, #0
 8006912:	2100      	movs	r1, #0
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f001 fd25 	bl	8008364 <USBD_LL_PrepareReceive>
 800691a:	e017      	b.n	800694c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800692e:	2b03      	cmp	r3, #3
 8006930:	d105      	bne.n	800693e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800693e:	2180      	movs	r1, #128	; 0x80
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f001 fc65 	bl	8008210 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 ff32 	bl	80077b0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006952:	2b01      	cmp	r3, #1
 8006954:	d123      	bne.n	800699e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f7ff fe9b 	bl	8006692 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006964:	e01b      	b.n	800699e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d013      	beq.n	800699a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006978:	2b03      	cmp	r3, #3
 800697a:	d10e      	bne.n	800699a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	7afa      	ldrb	r2, [r7, #11]
 8006986:	4611      	mov	r1, r2
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	4798      	blx	r3
 800698c:	4603      	mov	r3, r0
 800698e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006990:	7dfb      	ldrb	r3, [r7, #23]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006996:	7dfb      	ldrb	r3, [r7, #23]
 8006998:	e002      	b.n	80069a0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800699a:	2303      	movs	r3, #3
 800699c:	e000      	b.n	80069a0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d009      	beq.n	80069ec <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6852      	ldr	r2, [r2, #4]
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	4611      	mov	r1, r2
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069ec:	2340      	movs	r3, #64	; 0x40
 80069ee:	2200      	movs	r2, #0
 80069f0:	2100      	movs	r1, #0
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 fbc7 	bl	8008186 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2240      	movs	r2, #64	; 0x40
 8006a04:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a08:	2340      	movs	r3, #64	; 0x40
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2180      	movs	r1, #128	; 0x80
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 fbb9 	bl	8008186 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2240      	movs	r2, #64	; 0x40
 8006a1e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	78fa      	ldrb	r2, [r7, #3]
 8006a3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2204      	movs	r2, #4
 8006a62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d105      	bne.n	8006a92 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d10b      	bne.n	8006aca <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	460b      	mov	r3, r1
 8006af8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d009      	beq.n	8006b4c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6852      	ldr	r2, [r2, #4]
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	4611      	mov	r1, r2
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	4798      	blx	r3
  }

  return USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b087      	sub	sp, #28
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b74:	8a3b      	ldrh	r3, [r7, #16]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	b21a      	sxth	r2, r3
 8006b7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	b21b      	sxth	r3, r3
 8006b82:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b84:	89fb      	ldrh	r3, [r7, #14]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
	...

08006b94 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d004      	beq.n	8006bb8 <USBD_StdDevReq+0x24>
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d002      	beq.n	8006bb8 <USBD_StdDevReq+0x24>
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <USBD_StdDevReq+0x38>
 8006bb6:	e050      	b.n	8006c5a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8006bca:	e04b      	b.n	8006c64 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	785b      	ldrb	r3, [r3, #1]
 8006bd0:	2b09      	cmp	r3, #9
 8006bd2:	d83c      	bhi.n	8006c4e <USBD_StdDevReq+0xba>
 8006bd4:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <USBD_StdDevReq+0x48>)
 8006bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bda:	bf00      	nop
 8006bdc:	08006c31 	.word	0x08006c31
 8006be0:	08006c45 	.word	0x08006c45
 8006be4:	08006c4f 	.word	0x08006c4f
 8006be8:	08006c3b 	.word	0x08006c3b
 8006bec:	08006c4f 	.word	0x08006c4f
 8006bf0:	08006c0f 	.word	0x08006c0f
 8006bf4:	08006c05 	.word	0x08006c05
 8006bf8:	08006c4f 	.word	0x08006c4f
 8006bfc:	08006c27 	.word	0x08006c27
 8006c00:	08006c19 	.word	0x08006c19
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f9ce 	bl	8006fa8 <USBD_GetDescriptor>
      break;
 8006c0c:	e024      	b.n	8006c58 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fb33 	bl	800727c <USBD_SetAddress>
      break;
 8006c16:	e01f      	b.n	8006c58 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fb70 	bl	8007300 <USBD_SetConfig>
 8006c20:	4603      	mov	r3, r0
 8006c22:	73fb      	strb	r3, [r7, #15]
      break;
 8006c24:	e018      	b.n	8006c58 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fc0d 	bl	8007448 <USBD_GetConfig>
      break;
 8006c2e:	e013      	b.n	8006c58 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fc3c 	bl	80074b0 <USBD_GetStatus>
      break;
 8006c38:	e00e      	b.n	8006c58 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fc6a 	bl	8007516 <USBD_SetFeature>
      break;
 8006c42:	e009      	b.n	8006c58 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fc79 	bl	800753e <USBD_ClrFeature>
      break;
 8006c4c:	e004      	b.n	8006c58 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fccf 	bl	80075f4 <USBD_CtlError>
      break;
 8006c56:	bf00      	nop
    }
    break;
 8006c58:	e004      	b.n	8006c64 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fcc9 	bl	80075f4 <USBD_CtlError>
    break;
 8006c62:	bf00      	nop
  }

  return ret;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop

08006c70 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d003      	beq.n	8006c92 <USBD_StdItfReq+0x22>
 8006c8a:	2b40      	cmp	r3, #64	; 0x40
 8006c8c:	d001      	beq.n	8006c92 <USBD_StdItfReq+0x22>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d12a      	bne.n	8006ce8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d81d      	bhi.n	8006cda <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	889b      	ldrh	r3, [r3, #4]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d813      	bhi.n	8006cd0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	4798      	blx	r3
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	88db      	ldrh	r3, [r3, #6]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d110      	bne.n	8006ce4 <USBD_StdItfReq+0x74>
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10d      	bne.n	8006ce4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fd5e 	bl	800778a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006cce:	e009      	b.n	8006ce4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fc8e 	bl	80075f4 <USBD_CtlError>
      break;
 8006cd8:	e004      	b.n	8006ce4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fc89 	bl	80075f4 <USBD_CtlError>
      break;
 8006ce2:	e000      	b.n	8006ce6 <USBD_StdItfReq+0x76>
      break;
 8006ce4:	bf00      	nop
    }
    break;
 8006ce6:	e004      	b.n	8006cf2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fc82 	bl	80075f4 <USBD_CtlError>
    break;
 8006cf0:	bf00      	nop
  }

  return ret;
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	889b      	ldrh	r3, [r3, #4]
 8006d0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d004      	beq.n	8006d26 <USBD_StdEPReq+0x2a>
 8006d1c:	2b40      	cmp	r3, #64	; 0x40
 8006d1e:	d002      	beq.n	8006d26 <USBD_StdEPReq+0x2a>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00a      	beq.n	8006d3a <USBD_StdEPReq+0x3e>
 8006d24:	e135      	b.n	8006f92 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]
    break;
 8006d38:	e130      	b.n	8006f9c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	785b      	ldrb	r3, [r3, #1]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d03e      	beq.n	8006dc0 <USBD_StdEPReq+0xc4>
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d002      	beq.n	8006d4c <USBD_StdEPReq+0x50>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d077      	beq.n	8006e3a <USBD_StdEPReq+0x13e>
 8006d4a:	e11c      	b.n	8006f86 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d002      	beq.n	8006d5c <USBD_StdEPReq+0x60>
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d015      	beq.n	8006d86 <USBD_StdEPReq+0x8a>
 8006d5a:	e02b      	b.n	8006db4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d5c:	7bbb      	ldrb	r3, [r7, #14]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00c      	beq.n	8006d7c <USBD_StdEPReq+0x80>
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b80      	cmp	r3, #128	; 0x80
 8006d66:	d009      	beq.n	8006d7c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 fa4f 	bl	8008210 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d72:	2180      	movs	r1, #128	; 0x80
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 fa4b 	bl	8008210 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006d7a:	e020      	b.n	8006dbe <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fc38 	bl	80075f4 <USBD_CtlError>
        break;
 8006d84:	e01b      	b.n	8006dbe <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	885b      	ldrh	r3, [r3, #2]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10e      	bne.n	8006dac <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00b      	beq.n	8006dac <USBD_StdEPReq+0xb0>
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	2b80      	cmp	r3, #128	; 0x80
 8006d98:	d008      	beq.n	8006dac <USBD_StdEPReq+0xb0>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	88db      	ldrh	r3, [r3, #6]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d104      	bne.n	8006dac <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 fa32 	bl	8008210 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fcec 	bl	800778a <USBD_CtlSendStatus>

        break;
 8006db2:	e004      	b.n	8006dbe <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fc1c 	bl	80075f4 <USBD_CtlError>
        break;
 8006dbc:	bf00      	nop
      }
      break;
 8006dbe:	e0e7      	b.n	8006f90 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d002      	beq.n	8006dd0 <USBD_StdEPReq+0xd4>
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d015      	beq.n	8006dfa <USBD_StdEPReq+0xfe>
 8006dce:	e02d      	b.n	8006e2c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00c      	beq.n	8006df0 <USBD_StdEPReq+0xf4>
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	2b80      	cmp	r3, #128	; 0x80
 8006dda:	d009      	beq.n	8006df0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 fa15 	bl	8008210 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006de6:	2180      	movs	r1, #128	; 0x80
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fa11 	bl	8008210 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006dee:	e023      	b.n	8006e38 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fbfe 	bl	80075f4 <USBD_CtlError>
        break;
 8006df8:	e01e      	b.n	8006e38 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	885b      	ldrh	r3, [r3, #2]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d119      	bne.n	8006e36 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 fa1c 	bl	800824e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fcb7 	bl	800778a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	4798      	blx	r3
        }
        break;
 8006e2a:	e004      	b.n	8006e36 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fbe0 	bl	80075f4 <USBD_CtlError>
        break;
 8006e34:	e000      	b.n	8006e38 <USBD_StdEPReq+0x13c>
        break;
 8006e36:	bf00      	nop
      }
      break;
 8006e38:	e0aa      	b.n	8006f90 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d002      	beq.n	8006e4a <USBD_StdEPReq+0x14e>
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d032      	beq.n	8006eae <USBD_StdEPReq+0x1b2>
 8006e48:	e097      	b.n	8006f7a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d007      	beq.n	8006e60 <USBD_StdEPReq+0x164>
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	2b80      	cmp	r3, #128	; 0x80
 8006e54:	d004      	beq.n	8006e60 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fbcb 	bl	80075f4 <USBD_CtlError>
          break;
 8006e5e:	e091      	b.n	8006f84 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	da0b      	bge.n	8006e80 <USBD_StdEPReq+0x184>
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	3310      	adds	r3, #16
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	e00b      	b.n	8006e98 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	4413      	add	r3, r2
 8006e96:	3304      	adds	r3, #4
 8006e98:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fc15 	bl	80076d6 <USBD_CtlSendData>
        break;
 8006eac:	e06a      	b.n	8006f84 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006eae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	da11      	bge.n	8006eda <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	f003 020f 	and.w	r2, r3, #15
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3324      	adds	r3, #36	; 0x24
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d117      	bne.n	8006f00 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fb8e 	bl	80075f4 <USBD_CtlError>
            break;
 8006ed8:	e054      	b.n	8006f84 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006eda:	7bbb      	ldrb	r3, [r7, #14]
 8006edc:	f003 020f 	and.w	r2, r3, #15
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	440b      	add	r3, r1
 8006eec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d104      	bne.n	8006f00 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fb7b 	bl	80075f4 <USBD_CtlError>
            break;
 8006efe:	e041      	b.n	8006f84 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	da0b      	bge.n	8006f20 <USBD_StdEPReq+0x224>
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	3310      	adds	r3, #16
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	e00b      	b.n	8006f38 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006f20:	7bbb      	ldrb	r3, [r7, #14]
 8006f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	4413      	add	r3, r2
 8006f36:	3304      	adds	r3, #4
 8006f38:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <USBD_StdEPReq+0x24a>
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	2b80      	cmp	r3, #128	; 0x80
 8006f44:	d103      	bne.n	8006f4e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	e00e      	b.n	8006f6c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 f99a 	bl	800828c <USBD_LL_IsStallEP>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2201      	movs	r2, #1
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	e002      	b.n	8006f6c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fbaf 	bl	80076d6 <USBD_CtlSendData>
          break;
 8006f78:	e004      	b.n	8006f84 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fb39 	bl	80075f4 <USBD_CtlError>
        break;
 8006f82:	bf00      	nop
      }
      break;
 8006f84:	e004      	b.n	8006f90 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fb33 	bl	80075f4 <USBD_CtlError>
      break;
 8006f8e:	bf00      	nop
    }
    break;
 8006f90:	e004      	b.n	8006f9c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fb2d 	bl	80075f4 <USBD_CtlError>
    break;
 8006f9a:	bf00      	nop
  }

  return ret;
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
	...

08006fa8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	885b      	ldrh	r3, [r3, #2]
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	2b06      	cmp	r3, #6
 8006fca:	f200 8128 	bhi.w	800721e <USBD_GetDescriptor+0x276>
 8006fce:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <USBD_GetDescriptor+0x2c>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08006ff1 	.word	0x08006ff1
 8006fd8:	08007009 	.word	0x08007009
 8006fdc:	08007049 	.word	0x08007049
 8006fe0:	0800721f 	.word	0x0800721f
 8006fe4:	0800721f 	.word	0x0800721f
 8006fe8:	080071bf 	.word	0x080071bf
 8006fec:	080071eb 	.word	0x080071eb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	7c12      	ldrb	r2, [r2, #16]
 8006ffc:	f107 0108 	add.w	r1, r7, #8
 8007000:	4610      	mov	r0, r2
 8007002:	4798      	blx	r3
 8007004:	60f8      	str	r0, [r7, #12]
    break;
 8007006:	e112      	b.n	800722e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	7c1b      	ldrb	r3, [r3, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10d      	bne.n	800702c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007018:	f107 0208 	add.w	r2, r7, #8
 800701c:	4610      	mov	r0, r2
 800701e:	4798      	blx	r3
 8007020:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3301      	adds	r3, #1
 8007026:	2202      	movs	r2, #2
 8007028:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800702a:	e100      	b.n	800722e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	f107 0208 	add.w	r2, r7, #8
 8007038:	4610      	mov	r0, r2
 800703a:	4798      	blx	r3
 800703c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3301      	adds	r3, #1
 8007042:	2202      	movs	r2, #2
 8007044:	701a      	strb	r2, [r3, #0]
    break;
 8007046:	e0f2      	b.n	800722e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	885b      	ldrh	r3, [r3, #2]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b05      	cmp	r3, #5
 8007050:	f200 80ac 	bhi.w	80071ac <USBD_GetDescriptor+0x204>
 8007054:	a201      	add	r2, pc, #4	; (adr r2, 800705c <USBD_GetDescriptor+0xb4>)
 8007056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705a:	bf00      	nop
 800705c:	08007075 	.word	0x08007075
 8007060:	080070a9 	.word	0x080070a9
 8007064:	080070dd 	.word	0x080070dd
 8007068:	08007111 	.word	0x08007111
 800706c:	08007145 	.word	0x08007145
 8007070:	08007179 	.word	0x08007179
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00b      	beq.n	8007098 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	7c12      	ldrb	r2, [r2, #16]
 800708c:	f107 0108 	add.w	r1, r7, #8
 8007090:	4610      	mov	r0, r2
 8007092:	4798      	blx	r3
 8007094:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007096:	e091      	b.n	80071bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 faaa 	bl	80075f4 <USBD_CtlError>
        err++;
 80070a0:	7afb      	ldrb	r3, [r7, #11]
 80070a2:	3301      	adds	r3, #1
 80070a4:	72fb      	strb	r3, [r7, #11]
      break;
 80070a6:	e089      	b.n	80071bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00b      	beq.n	80070cc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	7c12      	ldrb	r2, [r2, #16]
 80070c0:	f107 0108 	add.w	r1, r7, #8
 80070c4:	4610      	mov	r0, r2
 80070c6:	4798      	blx	r3
 80070c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070ca:	e077      	b.n	80071bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fa90 	bl	80075f4 <USBD_CtlError>
        err++;
 80070d4:	7afb      	ldrb	r3, [r7, #11]
 80070d6:	3301      	adds	r3, #1
 80070d8:	72fb      	strb	r3, [r7, #11]
      break;
 80070da:	e06f      	b.n	80071bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00b      	beq.n	8007100 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	7c12      	ldrb	r2, [r2, #16]
 80070f4:	f107 0108 	add.w	r1, r7, #8
 80070f8:	4610      	mov	r0, r2
 80070fa:	4798      	blx	r3
 80070fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070fe:	e05d      	b.n	80071bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa76 	bl	80075f4 <USBD_CtlError>
        err++;
 8007108:	7afb      	ldrb	r3, [r7, #11]
 800710a:	3301      	adds	r3, #1
 800710c:	72fb      	strb	r3, [r7, #11]
      break;
 800710e:	e055      	b.n	80071bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00b      	beq.n	8007134 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	7c12      	ldrb	r2, [r2, #16]
 8007128:	f107 0108 	add.w	r1, r7, #8
 800712c:	4610      	mov	r0, r2
 800712e:	4798      	blx	r3
 8007130:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007132:	e043      	b.n	80071bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fa5c 	bl	80075f4 <USBD_CtlError>
        err++;
 800713c:	7afb      	ldrb	r3, [r7, #11]
 800713e:	3301      	adds	r3, #1
 8007140:	72fb      	strb	r3, [r7, #11]
      break;
 8007142:	e03b      	b.n	80071bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00b      	beq.n	8007168 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	7c12      	ldrb	r2, [r2, #16]
 800715c:	f107 0108 	add.w	r1, r7, #8
 8007160:	4610      	mov	r0, r2
 8007162:	4798      	blx	r3
 8007164:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007166:	e029      	b.n	80071bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fa42 	bl	80075f4 <USBD_CtlError>
        err++;
 8007170:	7afb      	ldrb	r3, [r7, #11]
 8007172:	3301      	adds	r3, #1
 8007174:	72fb      	strb	r3, [r7, #11]
      break;
 8007176:	e021      	b.n	80071bc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00b      	beq.n	800719c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	7c12      	ldrb	r2, [r2, #16]
 8007190:	f107 0108 	add.w	r1, r7, #8
 8007194:	4610      	mov	r0, r2
 8007196:	4798      	blx	r3
 8007198:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800719a:	e00f      	b.n	80071bc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa28 	bl	80075f4 <USBD_CtlError>
        err++;
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	3301      	adds	r3, #1
 80071a8:	72fb      	strb	r3, [r7, #11]
      break;
 80071aa:	e007      	b.n	80071bc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa20 	bl	80075f4 <USBD_CtlError>
      err++;
 80071b4:	7afb      	ldrb	r3, [r7, #11]
 80071b6:	3301      	adds	r3, #1
 80071b8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80071ba:	bf00      	nop
    }
    break;
 80071bc:	e037      	b.n	800722e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	7c1b      	ldrb	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ce:	f107 0208 	add.w	r2, r7, #8
 80071d2:	4610      	mov	r0, r2
 80071d4:	4798      	blx	r3
 80071d6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80071d8:	e029      	b.n	800722e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fa09 	bl	80075f4 <USBD_CtlError>
      err++;
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	3301      	adds	r3, #1
 80071e6:	72fb      	strb	r3, [r7, #11]
    break;
 80071e8:	e021      	b.n	800722e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	7c1b      	ldrb	r3, [r3, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10d      	bne.n	800720e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fa:	f107 0208 	add.w	r2, r7, #8
 80071fe:	4610      	mov	r0, r2
 8007200:	4798      	blx	r3
 8007202:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3301      	adds	r3, #1
 8007208:	2207      	movs	r2, #7
 800720a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800720c:	e00f      	b.n	800722e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f9ef 	bl	80075f4 <USBD_CtlError>
      err++;
 8007216:	7afb      	ldrb	r3, [r7, #11]
 8007218:	3301      	adds	r3, #1
 800721a:	72fb      	strb	r3, [r7, #11]
    break;
 800721c:	e007      	b.n	800722e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f9e7 	bl	80075f4 <USBD_CtlError>
    err++;
 8007226:	7afb      	ldrb	r3, [r7, #11]
 8007228:	3301      	adds	r3, #1
 800722a:	72fb      	strb	r3, [r7, #11]
    break;
 800722c:	bf00      	nop
  }

  if (err != 0U)
 800722e:	7afb      	ldrb	r3, [r7, #11]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d11e      	bne.n	8007272 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	88db      	ldrh	r3, [r3, #6]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d016      	beq.n	800726a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800723c:	893b      	ldrh	r3, [r7, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00e      	beq.n	8007260 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	88da      	ldrh	r2, [r3, #6]
 8007246:	893b      	ldrh	r3, [r7, #8]
 8007248:	4293      	cmp	r3, r2
 800724a:	bf28      	it	cs
 800724c:	4613      	movcs	r3, r2
 800724e:	b29b      	uxth	r3, r3
 8007250:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007252:	893b      	ldrh	r3, [r7, #8]
 8007254:	461a      	mov	r2, r3
 8007256:	68f9      	ldr	r1, [r7, #12]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fa3c 	bl	80076d6 <USBD_CtlSendData>
 800725e:	e009      	b.n	8007274 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f9c6 	bl	80075f4 <USBD_CtlError>
 8007268:	e004      	b.n	8007274 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa8d 	bl	800778a <USBD_CtlSendStatus>
 8007270:	e000      	b.n	8007274 <USBD_GetDescriptor+0x2cc>
    return;
 8007272:	bf00      	nop
    }
  }
}
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop

0800727c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	889b      	ldrh	r3, [r3, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d130      	bne.n	80072f0 <USBD_SetAddress+0x74>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	88db      	ldrh	r3, [r3, #6]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d12c      	bne.n	80072f0 <USBD_SetAddress+0x74>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	885b      	ldrh	r3, [r3, #2]
 800729a:	2b7f      	cmp	r3, #127	; 0x7f
 800729c:	d828      	bhi.n	80072f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	885b      	ldrh	r3, [r3, #2]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d104      	bne.n	80072be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f99c 	bl	80075f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072bc:	e01c      	b.n	80072f8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	7bfa      	ldrb	r2, [r7, #15]
 80072c2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 f80a 	bl	80082e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fa5a 	bl	800778a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d004      	beq.n	80072e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e4:	e008      	b.n	80072f8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ee:	e003      	b.n	80072f8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f97e 	bl	80075f4 <USBD_CtlError>
  }
}
 80072f8:	bf00      	nop
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	885b      	ldrh	r3, [r3, #2]
 8007312:	b2da      	uxtb	r2, r3
 8007314:	4b4b      	ldr	r3, [pc, #300]	; (8007444 <USBD_SetConfig+0x144>)
 8007316:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007318:	4b4a      	ldr	r3, [pc, #296]	; (8007444 <USBD_SetConfig+0x144>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d905      	bls.n	800732c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f966 	bl	80075f4 <USBD_CtlError>
    return USBD_FAIL;
 8007328:	2303      	movs	r3, #3
 800732a:	e087      	b.n	800743c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007332:	2b02      	cmp	r3, #2
 8007334:	d002      	beq.n	800733c <USBD_SetConfig+0x3c>
 8007336:	2b03      	cmp	r3, #3
 8007338:	d025      	beq.n	8007386 <USBD_SetConfig+0x86>
 800733a:	e071      	b.n	8007420 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800733c:	4b41      	ldr	r3, [pc, #260]	; (8007444 <USBD_SetConfig+0x144>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d01c      	beq.n	800737e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007344:	4b3f      	ldr	r3, [pc, #252]	; (8007444 <USBD_SetConfig+0x144>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800734e:	4b3d      	ldr	r3, [pc, #244]	; (8007444 <USBD_SetConfig+0x144>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff f9a7 	bl	80066a8 <USBD_SetClassConfig>
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f944 	bl	80075f4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800736c:	e065      	b.n	800743a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa0b 	bl	800778a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2203      	movs	r2, #3
 8007378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800737c:	e05d      	b.n	800743a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa03 	bl	800778a <USBD_CtlSendStatus>
    break;
 8007384:	e059      	b.n	800743a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007386:	4b2f      	ldr	r3, [pc, #188]	; (8007444 <USBD_SetConfig+0x144>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d112      	bne.n	80073b4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2202      	movs	r2, #2
 8007392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007396:	4b2b      	ldr	r3, [pc, #172]	; (8007444 <USBD_SetConfig+0x144>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073a0:	4b28      	ldr	r3, [pc, #160]	; (8007444 <USBD_SetConfig+0x144>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7ff f99a 	bl	80066e0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f9ec 	bl	800778a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80073b2:	e042      	b.n	800743a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80073b4:	4b23      	ldr	r3, [pc, #140]	; (8007444 <USBD_SetConfig+0x144>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d02a      	beq.n	8007418 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7ff f988 	bl	80066e0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80073d0:	4b1c      	ldr	r3, [pc, #112]	; (8007444 <USBD_SetConfig+0x144>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80073da:	4b1a      	ldr	r3, [pc, #104]	; (8007444 <USBD_SetConfig+0x144>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff f961 	bl	80066a8 <USBD_SetClassConfig>
 80073e6:	4603      	mov	r3, r0
 80073e8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00f      	beq.n	8007410 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f8fe 	bl	80075f4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff f96d 	bl	80066e0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2202      	movs	r2, #2
 800740a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800740e:	e014      	b.n	800743a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f9ba 	bl	800778a <USBD_CtlSendStatus>
    break;
 8007416:	e010      	b.n	800743a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f9b6 	bl	800778a <USBD_CtlSendStatus>
    break;
 800741e:	e00c      	b.n	800743a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f8e6 	bl	80075f4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007428:	4b06      	ldr	r3, [pc, #24]	; (8007444 <USBD_SetConfig+0x144>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7ff f956 	bl	80066e0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007434:	2303      	movs	r3, #3
 8007436:	73fb      	strb	r3, [r7, #15]
    break;
 8007438:	bf00      	nop
  }

  return ret;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20000370 	.word	0x20000370

08007448 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	88db      	ldrh	r3, [r3, #6]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d004      	beq.n	8007464 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f8c9 	bl	80075f4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007462:	e021      	b.n	80074a8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800746a:	2b01      	cmp	r3, #1
 800746c:	db17      	blt.n	800749e <USBD_GetConfig+0x56>
 800746e:	2b02      	cmp	r3, #2
 8007470:	dd02      	ble.n	8007478 <USBD_GetConfig+0x30>
 8007472:	2b03      	cmp	r3, #3
 8007474:	d00b      	beq.n	800748e <USBD_GetConfig+0x46>
 8007476:	e012      	b.n	800749e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3308      	adds	r3, #8
 8007482:	2201      	movs	r2, #1
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f925 	bl	80076d6 <USBD_CtlSendData>
      break;
 800748c:	e00c      	b.n	80074a8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3304      	adds	r3, #4
 8007492:	2201      	movs	r2, #1
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f91d 	bl	80076d6 <USBD_CtlSendData>
      break;
 800749c:	e004      	b.n	80074a8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f8a7 	bl	80075f4 <USBD_CtlError>
      break;
 80074a6:	bf00      	nop
}
 80074a8:	bf00      	nop
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c0:	3b01      	subs	r3, #1
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d81e      	bhi.n	8007504 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	88db      	ldrh	r3, [r3, #6]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d004      	beq.n	80074d8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f88f 	bl	80075f4 <USBD_CtlError>
      break;
 80074d6:	e01a      	b.n	800750e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f043 0202 	orr.w	r2, r3, #2
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	330c      	adds	r3, #12
 80074f8:	2202      	movs	r2, #2
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f8ea 	bl	80076d6 <USBD_CtlSendData>
    break;
 8007502:	e004      	b.n	800750e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f874 	bl	80075f4 <USBD_CtlError>
    break;
 800750c:	bf00      	nop
  }
}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	885b      	ldrh	r3, [r3, #2]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d106      	bne.n	8007536 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f92a 	bl	800778a <USBD_CtlSendStatus>
  }
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b082      	sub	sp, #8
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754e:	3b01      	subs	r3, #1
 8007550:	2b02      	cmp	r3, #2
 8007552:	d80b      	bhi.n	800756c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	885b      	ldrh	r3, [r3, #2]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d10c      	bne.n	8007576 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f910 	bl	800778a <USBD_CtlSendStatus>
      }
      break;
 800756a:	e004      	b.n	8007576 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f840 	bl	80075f4 <USBD_CtlError>
      break;
 8007574:	e000      	b.n	8007578 <USBD_ClrFeature+0x3a>
      break;
 8007576:	bf00      	nop
  }
}
 8007578:	bf00      	nop
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	781a      	ldrb	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3301      	adds	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	781a      	ldrb	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3301      	adds	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f7ff fad3 	bl	8006b56 <SWAPBYTE>
 80075b0:	4603      	mov	r3, r0
 80075b2:	461a      	mov	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3301      	adds	r3, #1
 80075bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3301      	adds	r3, #1
 80075c2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f7ff fac6 	bl	8006b56 <SWAPBYTE>
 80075ca:	4603      	mov	r3, r0
 80075cc:	461a      	mov	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3301      	adds	r3, #1
 80075d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3301      	adds	r3, #1
 80075dc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7ff fab9 	bl	8006b56 <SWAPBYTE>
 80075e4:	4603      	mov	r3, r0
 80075e6:	461a      	mov	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	80da      	strh	r2, [r3, #6]
}
 80075ec:	bf00      	nop
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80075fe:	2180      	movs	r1, #128	; 0x80
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fe05 	bl	8008210 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007606:	2100      	movs	r1, #0
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fe01 	bl	8008210 <USBD_LL_StallEP>
}
 800760e:	bf00      	nop
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b086      	sub	sp, #24
 800761a:	af00      	add	r7, sp, #0
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d036      	beq.n	800769a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007630:	6938      	ldr	r0, [r7, #16]
 8007632:	f000 f836 	bl	80076a2 <USBD_GetLen>
 8007636:	4603      	mov	r3, r0
 8007638:	3301      	adds	r3, #1
 800763a:	b29b      	uxth	r3, r3
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	4413      	add	r3, r2
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	7812      	ldrb	r2, [r2, #0]
 800764e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	3301      	adds	r3, #1
 8007654:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007656:	7dfb      	ldrb	r3, [r7, #23]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	4413      	add	r3, r2
 800765c:	2203      	movs	r2, #3
 800765e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007660:	7dfb      	ldrb	r3, [r7, #23]
 8007662:	3301      	adds	r3, #1
 8007664:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007666:	e013      	b.n	8007690 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007668:	7dfb      	ldrb	r3, [r7, #23]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	4413      	add	r3, r2
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	7812      	ldrb	r2, [r2, #0]
 8007672:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	3301      	adds	r3, #1
 8007678:	613b      	str	r3, [r7, #16]
    idx++;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	3301      	adds	r3, #1
 800767e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	4413      	add	r3, r2
 8007686:	2200      	movs	r2, #0
 8007688:	701a      	strb	r2, [r3, #0]
    idx++;
 800768a:	7dfb      	ldrb	r3, [r7, #23]
 800768c:	3301      	adds	r3, #1
 800768e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e7      	bne.n	8007668 <USBD_GetString+0x52>
 8007698:	e000      	b.n	800769c <USBD_GetString+0x86>
    return;
 800769a:	bf00      	nop
  }
}
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80076b2:	e005      	b.n	80076c0 <USBD_GetLen+0x1e>
  {
    len++;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	3301      	adds	r3, #1
 80076b8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	3301      	adds	r3, #1
 80076be:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1f5      	bne.n	80076b4 <USBD_GetLen+0x12>
  }

  return len;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2202      	movs	r2, #2
 80076e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	2100      	movs	r1, #0
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fe10 	bl	8008322 <USBD_LL_Transmit>

  return USBD_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	2100      	movs	r1, #0
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 fdff 	bl	8008322 <USBD_LL_Transmit>

  return USBD_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2203      	movs	r2, #3
 800773e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	2100      	movs	r1, #0
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fe03 	bl	8008364 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	2100      	movs	r1, #0
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 fdf2 	bl	8008364 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2204      	movs	r2, #4
 8007796:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800779a:	2300      	movs	r3, #0
 800779c:	2200      	movs	r2, #0
 800779e:	2100      	movs	r1, #0
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fdbe 	bl	8008322 <USBD_LL_Transmit>

  return USBD_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2205      	movs	r2, #5
 80077bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077c0:	2300      	movs	r3, #0
 80077c2:	2200      	movs	r2, #0
 80077c4:	2100      	movs	r1, #0
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fdcc 	bl	8008364 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80077dc:	2200      	movs	r2, #0
 80077de:	4912      	ldr	r1, [pc, #72]	; (8007828 <MX_USB_DEVICE_Init+0x50>)
 80077e0:	4812      	ldr	r0, [pc, #72]	; (800782c <MX_USB_DEVICE_Init+0x54>)
 80077e2:	f7fe fef3 	bl	80065cc <USBD_Init>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80077ec:	f7f9 fa02 	bl	8000bf4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80077f0:	490f      	ldr	r1, [pc, #60]	; (8007830 <MX_USB_DEVICE_Init+0x58>)
 80077f2:	480e      	ldr	r0, [pc, #56]	; (800782c <MX_USB_DEVICE_Init+0x54>)
 80077f4:	f7fe ff20 	bl	8006638 <USBD_RegisterClass>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80077fe:	f7f9 f9f9 	bl	8000bf4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007802:	490c      	ldr	r1, [pc, #48]	; (8007834 <MX_USB_DEVICE_Init+0x5c>)
 8007804:	4809      	ldr	r0, [pc, #36]	; (800782c <MX_USB_DEVICE_Init+0x54>)
 8007806:	f7fe fe45 	bl	8006494 <USBD_CDC_RegisterInterface>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007810:	f7f9 f9f0 	bl	8000bf4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007814:	4805      	ldr	r0, [pc, #20]	; (800782c <MX_USB_DEVICE_Init+0x54>)
 8007816:	f7fe ff30 	bl	800667a <USBD_Start>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007820:	f7f9 f9e8 	bl	8000bf4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007824:	bf00      	nop
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20000130 	.word	0x20000130
 800782c:	2000850c 	.word	0x2000850c
 8007830:	20000018 	.word	0x20000018
 8007834:	2000011c 	.word	0x2000011c

08007838 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800783c:	2200      	movs	r2, #0
 800783e:	4905      	ldr	r1, [pc, #20]	; (8007854 <CDC_Init_FS+0x1c>)
 8007840:	4805      	ldr	r0, [pc, #20]	; (8007858 <CDC_Init_FS+0x20>)
 8007842:	f7fe fe3c 	bl	80064be <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007846:	4905      	ldr	r1, [pc, #20]	; (800785c <CDC_Init_FS+0x24>)
 8007848:	4803      	ldr	r0, [pc, #12]	; (8007858 <CDC_Init_FS+0x20>)
 800784a:	f7fe fe51 	bl	80064f0 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800784e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007850:	4618      	mov	r0, r3
 8007852:	bd80      	pop	{r7, pc}
 8007854:	2000885c 	.word	0x2000885c
 8007858:	2000850c 	.word	0x2000850c
 800785c:	200087dc 	.word	0x200087dc

08007860 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007860:	b480      	push	{r7}
 8007862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8007864:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007866:	4618      	mov	r0, r3
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	6039      	str	r1, [r7, #0]
 800787a:	71fb      	strb	r3, [r7, #7]
 800787c:	4613      	mov	r3, r2
 800787e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	2b23      	cmp	r3, #35	; 0x23
 8007884:	d866      	bhi.n	8007954 <CDC_Control_FS+0xe4>
 8007886:	a201      	add	r2, pc, #4	; (adr r2, 800788c <CDC_Control_FS+0x1c>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	08007955 	.word	0x08007955
 8007890:	08007955 	.word	0x08007955
 8007894:	08007955 	.word	0x08007955
 8007898:	08007955 	.word	0x08007955
 800789c:	08007955 	.word	0x08007955
 80078a0:	08007955 	.word	0x08007955
 80078a4:	08007955 	.word	0x08007955
 80078a8:	08007955 	.word	0x08007955
 80078ac:	08007955 	.word	0x08007955
 80078b0:	08007955 	.word	0x08007955
 80078b4:	08007955 	.word	0x08007955
 80078b8:	08007955 	.word	0x08007955
 80078bc:	08007955 	.word	0x08007955
 80078c0:	08007955 	.word	0x08007955
 80078c4:	08007955 	.word	0x08007955
 80078c8:	08007955 	.word	0x08007955
 80078cc:	08007955 	.word	0x08007955
 80078d0:	08007955 	.word	0x08007955
 80078d4:	08007955 	.word	0x08007955
 80078d8:	08007955 	.word	0x08007955
 80078dc:	08007955 	.word	0x08007955
 80078e0:	08007955 	.word	0x08007955
 80078e4:	08007955 	.word	0x08007955
 80078e8:	08007955 	.word	0x08007955
 80078ec:	08007955 	.word	0x08007955
 80078f0:	08007955 	.word	0x08007955
 80078f4:	08007955 	.word	0x08007955
 80078f8:	08007955 	.word	0x08007955
 80078fc:	08007955 	.word	0x08007955
 8007900:	08007955 	.word	0x08007955
 8007904:	08007955 	.word	0x08007955
 8007908:	08007955 	.word	0x08007955
 800790c:	08007955 	.word	0x08007955
 8007910:	08007955 	.word	0x08007955
 8007914:	0800791d 	.word	0x0800791d
 8007918:	08007955 	.word	0x08007955

		break;

	case CDC_SET_CONTROL_LINE_STATE:
	{
		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	60fb      	str	r3, [r7, #12]
		if ((req->wValue & 0x0001) != 0)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	885b      	ldrh	r3, [r3, #2]
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d009      	beq.n	8007940 <CDC_Control_FS+0xd0>
		{
			HOST_PORT_COM_OPEN = 1;
 800792c:	4b0c      	ldr	r3, [pc, #48]	; (8007960 <CDC_Control_FS+0xf0>)
 800792e:	2201      	movs	r2, #1
 8007930:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8007932:	2201      	movs	r2, #1
 8007934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007938:	480a      	ldr	r0, [pc, #40]	; (8007964 <CDC_Control_FS+0xf4>)
 800793a:	f7fa f9fb 	bl	8001d34 <HAL_GPIO_WritePin>
		else
		{
			HOST_PORT_COM_OPEN = 0;
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
		}
		break;
 800793e:	e00a      	b.n	8007956 <CDC_Control_FS+0xe6>
			HOST_PORT_COM_OPEN = 0;
 8007940:	4b07      	ldr	r3, [pc, #28]	; (8007960 <CDC_Control_FS+0xf0>)
 8007942:	2200      	movs	r2, #0
 8007944:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8007946:	2200      	movs	r2, #0
 8007948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800794c:	4805      	ldr	r0, [pc, #20]	; (8007964 <CDC_Control_FS+0xf4>)
 800794e:	f7fa f9f1 	bl	8001d34 <HAL_GPIO_WritePin>
		break;
 8007952:	e000      	b.n	8007956 <CDC_Control_FS+0xe6>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8007954:	bf00      	nop
	}

	return (USBD_OK);
 8007956:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	20000371 	.word	0x20000371
 8007964:	40020c00 	.word	0x40020c00

08007968 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
	static uint8_t txLen;
	static uint8_t rxLen;
	static uint8_t RX_Buf_Temp[APP_RX_DATA_SIZE];

	/* Get data from serial com */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	4851      	ldr	r0, [pc, #324]	; (8007abc <CDC_Receive_FS+0x154>)
 8007976:	f7fe fdbb 	bl	80064f0 <USBD_CDC_SetRxBuffer>
	if (USBD_CDC_ReceivePacket(&hUsbDeviceFS) != USBD_OK)
 800797a:	4850      	ldr	r0, [pc, #320]	; (8007abc <CDC_Receive_FS+0x154>)
 800797c:	f7fe fdfc 	bl	8006578 <USBD_CDC_ReceivePacket>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <CDC_Receive_FS+0x22>
	{
		return (USBD_BUSY);
 8007986:	2301      	movs	r3, #1
 8007988:	e093      	b.n	8007ab2 <CDC_Receive_FS+0x14a>
	}

	for (uint8_t i = 0; i < (*Len); i++)
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]
 800798e:	e07a      	b.n	8007a86 <CDC_Receive_FS+0x11e>
	{

		/* Avoid buffer overflow */
		if (txLen == APP_TX_DATA_SIZE)
 8007990:	4b4b      	ldr	r3, [pc, #300]	; (8007ac0 <CDC_Receive_FS+0x158>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b80      	cmp	r3, #128	; 0x80
 8007996:	d102      	bne.n	800799e <CDC_Receive_FS+0x36>
		{
			txLen = 0;
 8007998:	4b49      	ldr	r3, [pc, #292]	; (8007ac0 <CDC_Receive_FS+0x158>)
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]
		}
		if (rxLen == APP_RX_DATA_SIZE)
 800799e:	4b49      	ldr	r3, [pc, #292]	; (8007ac4 <CDC_Receive_FS+0x15c>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b80      	cmp	r3, #128	; 0x80
 80079a4:	d102      	bne.n	80079ac <CDC_Receive_FS+0x44>
		{
			rxLen = 0;
 80079a6:	4b47      	ldr	r3, [pc, #284]	; (8007ac4 <CDC_Receive_FS+0x15c>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	701a      	strb	r2, [r3, #0]
		}

		/* If Backspace key: clear the last char */
		if ((UserTxBufferFS[txLen++] = Buf[i]) == '\b')
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	441a      	add	r2, r3
 80079b2:	4b43      	ldr	r3, [pc, #268]	; (8007ac0 <CDC_Receive_FS+0x158>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	1c59      	adds	r1, r3, #1
 80079b8:	b2c8      	uxtb	r0, r1
 80079ba:	4941      	ldr	r1, [pc, #260]	; (8007ac0 <CDC_Receive_FS+0x158>)
 80079bc:	7008      	strb	r0, [r1, #0]
 80079be:	7811      	ldrb	r1, [r2, #0]
 80079c0:	4a41      	ldr	r2, [pc, #260]	; (8007ac8 <CDC_Receive_FS+0x160>)
 80079c2:	54d1      	strb	r1, [r2, r3]
 80079c4:	4a40      	ldr	r2, [pc, #256]	; (8007ac8 <CDC_Receive_FS+0x160>)
 80079c6:	5cd3      	ldrb	r3, [r2, r3]
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d11e      	bne.n	8007a0a <CDC_Receive_FS+0xa2>
		{
			UserTxBufferFS[txLen++] = ' ';
 80079cc:	4b3c      	ldr	r3, [pc, #240]	; (8007ac0 <CDC_Receive_FS+0x158>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	b2d1      	uxtb	r1, r2
 80079d4:	4a3a      	ldr	r2, [pc, #232]	; (8007ac0 <CDC_Receive_FS+0x158>)
 80079d6:	7011      	strb	r1, [r2, #0]
 80079d8:	461a      	mov	r2, r3
 80079da:	4b3b      	ldr	r3, [pc, #236]	; (8007ac8 <CDC_Receive_FS+0x160>)
 80079dc:	2120      	movs	r1, #32
 80079de:	5499      	strb	r1, [r3, r2]
			UserTxBufferFS[txLen++] = '\b';
 80079e0:	4b37      	ldr	r3, [pc, #220]	; (8007ac0 <CDC_Receive_FS+0x158>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	b2d1      	uxtb	r1, r2
 80079e8:	4a35      	ldr	r2, [pc, #212]	; (8007ac0 <CDC_Receive_FS+0x158>)
 80079ea:	7011      	strb	r1, [r2, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	4b36      	ldr	r3, [pc, #216]	; (8007ac8 <CDC_Receive_FS+0x160>)
 80079f0:	2108      	movs	r1, #8
 80079f2:	5499      	strb	r1, [r3, r2]
			if (rxLen)
 80079f4:	4b33      	ldr	r3, [pc, #204]	; (8007ac4 <CDC_Receive_FS+0x15c>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d041      	beq.n	8007a80 <CDC_Receive_FS+0x118>
			{
				rxLen--;
 80079fc:	4b31      	ldr	r3, [pc, #196]	; (8007ac4 <CDC_Receive_FS+0x15c>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	4b2f      	ldr	r3, [pc, #188]	; (8007ac4 <CDC_Receive_FS+0x15c>)
 8007a06:	701a      	strb	r2, [r3, #0]
 8007a08:	e03a      	b.n	8007a80 <CDC_Receive_FS+0x118>
			}
		}
		/* Else if Enter key: add a \n to terminal and extract output buffer */
		else if (Buf[i] == '\r' || Buf[i] == '\0')
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	4413      	add	r3, r2
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b0d      	cmp	r3, #13
 8007a14:	d005      	beq.n	8007a22 <CDC_Receive_FS+0xba>
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d121      	bne.n	8007a66 <CDC_Receive_FS+0xfe>
		{
			UserTxBufferFS[txLen++] = '\n';
 8007a22:	4b27      	ldr	r3, [pc, #156]	; (8007ac0 <CDC_Receive_FS+0x158>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	b2d1      	uxtb	r1, r2
 8007a2a:	4a25      	ldr	r2, [pc, #148]	; (8007ac0 <CDC_Receive_FS+0x158>)
 8007a2c:	7011      	strb	r1, [r2, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	4b25      	ldr	r3, [pc, #148]	; (8007ac8 <CDC_Receive_FS+0x160>)
 8007a32:	210a      	movs	r1, #10
 8007a34:	5499      	strb	r1, [r3, r2]
			RX_Buf_Temp[rxLen++] = '\0';
 8007a36:	4b23      	ldr	r3, [pc, #140]	; (8007ac4 <CDC_Receive_FS+0x15c>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	b2d1      	uxtb	r1, r2
 8007a3e:	4a21      	ldr	r2, [pc, #132]	; (8007ac4 <CDC_Receive_FS+0x15c>)
 8007a40:	7011      	strb	r1, [r2, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	4b21      	ldr	r3, [pc, #132]	; (8007acc <CDC_Receive_FS+0x164>)
 8007a46:	2100      	movs	r1, #0
 8007a48:	5499      	strb	r1, [r3, r2]
			memcpy(UserRxBufferFS, RX_Buf_Temp, rxLen);
 8007a4a:	4b1e      	ldr	r3, [pc, #120]	; (8007ac4 <CDC_Receive_FS+0x15c>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	491e      	ldr	r1, [pc, #120]	; (8007acc <CDC_Receive_FS+0x164>)
 8007a52:	481f      	ldr	r0, [pc, #124]	; (8007ad0 <CDC_Receive_FS+0x168>)
 8007a54:	f000 fd20 	bl	8008498 <memcpy>
			CDC_RX_DATA_INWAIT = 1;
 8007a58:	4b1e      	ldr	r3, [pc, #120]	; (8007ad4 <CDC_Receive_FS+0x16c>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	701a      	strb	r2, [r3, #0]
			rxLen = 0;
 8007a5e:	4b19      	ldr	r3, [pc, #100]	; (8007ac4 <CDC_Receive_FS+0x15c>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	701a      	strb	r2, [r3, #0]
 8007a64:	e00c      	b.n	8007a80 <CDC_Receive_FS+0x118>
		}
		/* Else only copy data */
		else
		{
			RX_Buf_Temp[rxLen++] = Buf[i];
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	441a      	add	r2, r3
 8007a6c:	4b15      	ldr	r3, [pc, #84]	; (8007ac4 <CDC_Receive_FS+0x15c>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	1c59      	adds	r1, r3, #1
 8007a72:	b2c8      	uxtb	r0, r1
 8007a74:	4913      	ldr	r1, [pc, #76]	; (8007ac4 <CDC_Receive_FS+0x15c>)
 8007a76:	7008      	strb	r0, [r1, #0]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	7812      	ldrb	r2, [r2, #0]
 8007a7c:	4b13      	ldr	r3, [pc, #76]	; (8007acc <CDC_Receive_FS+0x164>)
 8007a7e:	545a      	strb	r2, [r3, r1]
	for (uint8_t i = 0; i < (*Len); i++)
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	3301      	adds	r3, #1
 8007a84:	73fb      	strb	r3, [r7, #15]
 8007a86:	7bfa      	ldrb	r2, [r7, #15]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	f4ff af7f 	bcc.w	8007990 <CDC_Receive_FS+0x28>
		}
	}

	/* Send result to terminal */
	if (CDC_Transmit_FS(UserTxBufferFS, txLen) == USBD_OK)
 8007a92:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <CDC_Receive_FS+0x158>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	4619      	mov	r1, r3
 8007a9a:	480b      	ldr	r0, [pc, #44]	; (8007ac8 <CDC_Receive_FS+0x160>)
 8007a9c:	f000 f81c 	bl	8007ad8 <CDC_Transmit_FS>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d104      	bne.n	8007ab0 <CDC_Receive_FS+0x148>
	{
		txLen = 0;
 8007aa6:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <CDC_Receive_FS+0x158>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		return (USBD_BUSY);
	}
	return (USBD_OK);
 8007aac:	2300      	movs	r3, #0
 8007aae:	e000      	b.n	8007ab2 <CDC_Receive_FS+0x14a>
		return (USBD_BUSY);
 8007ab0:	2301      	movs	r3, #1
  /* USER CODE END 6 */
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	2000850c 	.word	0x2000850c
 8007ac0:	20000373 	.word	0x20000373
 8007ac4:	20000374 	.word	0x20000374
 8007ac8:	2000885c 	.word	0x2000885c
 8007acc:	20000378 	.word	0x20000378
 8007ad0:	200087dc 	.word	0x200087dc
 8007ad4:	20000372 	.word	0x20000372

08007ad8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8007ae8:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <CDC_Transmit_FS+0x4c>)
 8007aea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aee:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e00e      	b.n	8007b1c <CDC_Transmit_FS+0x44>
	}

	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007afe:	887b      	ldrh	r3, [r7, #2]
 8007b00:	461a      	mov	r2, r3
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	4807      	ldr	r0, [pc, #28]	; (8007b24 <CDC_Transmit_FS+0x4c>)
 8007b06:	f7fe fcda 	bl	80064be <USBD_CDC_SetTxBuffer>

	if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK)
 8007b0a:	4806      	ldr	r0, [pc, #24]	; (8007b24 <CDC_Transmit_FS+0x4c>)
 8007b0c:	f7fe fd04 	bl	8006518 <USBD_CDC_TransmitPacket>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d101      	bne.n	8007b1a <CDC_Transmit_FS+0x42>
	{
		return USBD_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	e000      	b.n	8007b1c <CDC_Transmit_FS+0x44>
	}
	else
	{
		return USBD_BUSY;
 8007b1a:	2301      	movs	r3, #1
	}

  /* USER CODE END 7 */
  return result;
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	2000850c 	.word	0x2000850c

08007b28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	4613      	mov	r3, r2
 8007b34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
	...

08007b4c <CDC_Printf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void CDC_Printf(const char *format, ...)
{
 8007b4c:	b40f      	push	{r0, r1, r2, r3}
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
	if (HOST_PORT_COM_OPEN)
 8007b54:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <CDC_Printf+0x48>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d013      	beq.n	8007b84 <CDC_Printf+0x38>
	{
		/* Format the string */
		va_list arg;
		va_start(arg, format);
 8007b5c:	f107 0314 	add.w	r3, r7, #20
 8007b60:	607b      	str	r3, [r7, #4]
		vsprintf((char*) UserTxBufferFS, format, arg);
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6939      	ldr	r1, [r7, #16]
 8007b66:	480c      	ldr	r0, [pc, #48]	; (8007b98 <CDC_Printf+0x4c>)
 8007b68:	f000 fd78 	bl	800865c <vsiprintf>
		va_end(arg);

		/* Transmit the buffer through serial communication */
		CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS));
 8007b6c:	480a      	ldr	r0, [pc, #40]	; (8007b98 <CDC_Printf+0x4c>)
 8007b6e:	f7f8 fb2f 	bl	80001d0 <strlen>
 8007b72:	4603      	mov	r3, r0
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	4619      	mov	r1, r3
 8007b78:	4807      	ldr	r0, [pc, #28]	; (8007b98 <CDC_Printf+0x4c>)
 8007b7a:	f7ff ffad 	bl	8007ad8 <CDC_Transmit_FS>
		HAL_Delay(1);
 8007b7e:	2001      	movs	r0, #1
 8007b80:	f7f9 fa84 	bl	800108c <HAL_Delay>
	}
}
 8007b84:	bf00      	nop
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b8e:	b004      	add	sp, #16
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	20000371 	.word	0x20000371
 8007b98:	2000885c 	.word	0x2000885c

08007b9c <CDC_Scanf>:

void CDC_Scanf(const char *format, ...)
{
 8007b9c:	b40f      	push	{r0, r1, r2, r3}
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
	/* Wait for Enter key */
	while (!CDC_RX_DATA_INWAIT && HOST_PORT_COM_OPEN)
 8007ba4:	bf00      	nop
 8007ba6:	4b10      	ldr	r3, [pc, #64]	; (8007be8 <CDC_Scanf+0x4c>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	f083 0301 	eor.w	r3, r3, #1
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <CDC_Scanf+0x20>
 8007bb4:	4b0d      	ldr	r3, [pc, #52]	; (8007bec <CDC_Scanf+0x50>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f4      	bne.n	8007ba6 <CDC_Scanf+0xa>
	{
	}

	if (CDC_RX_DATA_INWAIT)
 8007bbc:	4b0a      	ldr	r3, [pc, #40]	; (8007be8 <CDC_Scanf+0x4c>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00a      	beq.n	8007bda <CDC_Scanf+0x3e>
	{
		/* Extract data from string */
		va_list arg;
		va_start(arg, format);
 8007bc4:	f107 0314 	add.w	r3, r7, #20
 8007bc8:	607b      	str	r3, [r7, #4]
		vsscanf((char*) UserRxBufferFS, format, arg);
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6939      	ldr	r1, [r7, #16]
 8007bce:	4808      	ldr	r0, [pc, #32]	; (8007bf0 <CDC_Scanf+0x54>)
 8007bd0:	f000 fd72 	bl	80086b8 <vsiscanf>
		va_end(arg);
		CDC_RX_DATA_INWAIT = 0;
 8007bd4:	4b04      	ldr	r3, [pc, #16]	; (8007be8 <CDC_Scanf+0x4c>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	701a      	strb	r2, [r3, #0]
	}
}
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007be4:	b004      	add	sp, #16
 8007be6:	4770      	bx	lr
 8007be8:	20000372 	.word	0x20000372
 8007bec:	20000371 	.word	0x20000371
 8007bf0:	200087dc 	.word	0x200087dc

08007bf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	6039      	str	r1, [r7, #0]
 8007bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2212      	movs	r2, #18
 8007c04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c06:	4b03      	ldr	r3, [pc, #12]	; (8007c14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	2000014c 	.word	0x2000014c

08007c18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	6039      	str	r1, [r7, #0]
 8007c22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2204      	movs	r2, #4
 8007c28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c2a:	4b03      	ldr	r3, [pc, #12]	; (8007c38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	20000160 	.word	0x20000160

08007c3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	6039      	str	r1, [r7, #0]
 8007c46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d105      	bne.n	8007c5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	4907      	ldr	r1, [pc, #28]	; (8007c70 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c52:	4808      	ldr	r0, [pc, #32]	; (8007c74 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c54:	f7ff fcdf 	bl	8007616 <USBD_GetString>
 8007c58:	e004      	b.n	8007c64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	4904      	ldr	r1, [pc, #16]	; (8007c70 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c5e:	4805      	ldr	r0, [pc, #20]	; (8007c74 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c60:	f7ff fcd9 	bl	8007616 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c64:	4b02      	ldr	r3, [pc, #8]	; (8007c70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	200088dc 	.word	0x200088dc
 8007c74:	08009714 	.word	0x08009714

08007c78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6039      	str	r1, [r7, #0]
 8007c82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	4904      	ldr	r1, [pc, #16]	; (8007c98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c88:	4804      	ldr	r0, [pc, #16]	; (8007c9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c8a:	f7ff fcc4 	bl	8007616 <USBD_GetString>
  return USBD_StrDesc;
 8007c8e:	4b02      	ldr	r3, [pc, #8]	; (8007c98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	200088dc 	.word	0x200088dc
 8007c9c:	0800972c 	.word	0x0800972c

08007ca0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	6039      	str	r1, [r7, #0]
 8007caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	221a      	movs	r2, #26
 8007cb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007cb2:	f000 f843 	bl	8007d3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007cb6:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	20000164 	.word	0x20000164

08007cc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	6039      	str	r1, [r7, #0]
 8007cce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007cd0:	79fb      	ldrb	r3, [r7, #7]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d105      	bne.n	8007ce2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	4907      	ldr	r1, [pc, #28]	; (8007cf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cda:	4808      	ldr	r0, [pc, #32]	; (8007cfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cdc:	f7ff fc9b 	bl	8007616 <USBD_GetString>
 8007ce0:	e004      	b.n	8007cec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	4904      	ldr	r1, [pc, #16]	; (8007cf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ce6:	4805      	ldr	r0, [pc, #20]	; (8007cfc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ce8:	f7ff fc95 	bl	8007616 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cec:	4b02      	ldr	r3, [pc, #8]	; (8007cf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	200088dc 	.word	0x200088dc
 8007cfc:	08009740 	.word	0x08009740

08007d00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	6039      	str	r1, [r7, #0]
 8007d0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d105      	bne.n	8007d1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	4907      	ldr	r1, [pc, #28]	; (8007d34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d16:	4808      	ldr	r0, [pc, #32]	; (8007d38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d18:	f7ff fc7d 	bl	8007616 <USBD_GetString>
 8007d1c:	e004      	b.n	8007d28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	4904      	ldr	r1, [pc, #16]	; (8007d34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d22:	4805      	ldr	r0, [pc, #20]	; (8007d38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d24:	f7ff fc77 	bl	8007616 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d28:	4b02      	ldr	r3, [pc, #8]	; (8007d34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	200088dc 	.word	0x200088dc
 8007d38:	0800974c 	.word	0x0800974c

08007d3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d42:	4b0f      	ldr	r3, [pc, #60]	; (8007d80 <Get_SerialNum+0x44>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d48:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <Get_SerialNum+0x48>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d4e:	4b0e      	ldr	r3, [pc, #56]	; (8007d88 <Get_SerialNum+0x4c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4413      	add	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d62:	2208      	movs	r2, #8
 8007d64:	4909      	ldr	r1, [pc, #36]	; (8007d8c <Get_SerialNum+0x50>)
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 f814 	bl	8007d94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d6c:	2204      	movs	r2, #4
 8007d6e:	4908      	ldr	r1, [pc, #32]	; (8007d90 <Get_SerialNum+0x54>)
 8007d70:	68b8      	ldr	r0, [r7, #8]
 8007d72:	f000 f80f 	bl	8007d94 <IntToUnicode>
  }
}
 8007d76:	bf00      	nop
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	1fff7a10 	.word	0x1fff7a10
 8007d84:	1fff7a14 	.word	0x1fff7a14
 8007d88:	1fff7a18 	.word	0x1fff7a18
 8007d8c:	20000166 	.word	0x20000166
 8007d90:	20000176 	.word	0x20000176

08007d94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007da6:	2300      	movs	r3, #0
 8007da8:	75fb      	strb	r3, [r7, #23]
 8007daa:	e027      	b.n	8007dfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	0f1b      	lsrs	r3, r3, #28
 8007db0:	2b09      	cmp	r3, #9
 8007db2:	d80b      	bhi.n	8007dcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	0f1b      	lsrs	r3, r3, #28
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	005b      	lsls	r3, r3, #1
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	440b      	add	r3, r1
 8007dc4:	3230      	adds	r2, #48	; 0x30
 8007dc6:	b2d2      	uxtb	r2, r2
 8007dc8:	701a      	strb	r2, [r3, #0]
 8007dca:	e00a      	b.n	8007de2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	0f1b      	lsrs	r3, r3, #28
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	440b      	add	r3, r1
 8007ddc:	3237      	adds	r2, #55	; 0x37
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	011b      	lsls	r3, r3, #4
 8007de6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	3301      	adds	r3, #1
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	4413      	add	r3, r2
 8007df2:	2200      	movs	r2, #0
 8007df4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	75fb      	strb	r3, [r7, #23]
 8007dfc:	7dfa      	ldrb	r2, [r7, #23]
 8007dfe:	79fb      	ldrb	r3, [r7, #7]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d3d3      	bcc.n	8007dac <IntToUnicode+0x18>
  }
}
 8007e04:	bf00      	nop
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08a      	sub	sp, #40	; 0x28
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e18:	f107 0314 	add.w	r3, r7, #20
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	605a      	str	r2, [r3, #4]
 8007e22:	609a      	str	r2, [r3, #8]
 8007e24:	60da      	str	r2, [r3, #12]
 8007e26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e30:	d147      	bne.n	8007ec2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e32:	2300      	movs	r3, #0
 8007e34:	613b      	str	r3, [r7, #16]
 8007e36:	4b25      	ldr	r3, [pc, #148]	; (8007ecc <HAL_PCD_MspInit+0xbc>)
 8007e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3a:	4a24      	ldr	r2, [pc, #144]	; (8007ecc <HAL_PCD_MspInit+0xbc>)
 8007e3c:	f043 0301 	orr.w	r3, r3, #1
 8007e40:	6313      	str	r3, [r2, #48]	; 0x30
 8007e42:	4b22      	ldr	r3, [pc, #136]	; (8007ecc <HAL_PCD_MspInit+0xbc>)
 8007e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	613b      	str	r3, [r7, #16]
 8007e4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e54:	2300      	movs	r3, #0
 8007e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e5c:	f107 0314 	add.w	r3, r7, #20
 8007e60:	4619      	mov	r1, r3
 8007e62:	481b      	ldr	r0, [pc, #108]	; (8007ed0 <HAL_PCD_MspInit+0xc0>)
 8007e64:	f7f9 fdb4 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e6e:	2302      	movs	r3, #2
 8007e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e76:	2300      	movs	r3, #0
 8007e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e7a:	230a      	movs	r3, #10
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e7e:	f107 0314 	add.w	r3, r7, #20
 8007e82:	4619      	mov	r1, r3
 8007e84:	4812      	ldr	r0, [pc, #72]	; (8007ed0 <HAL_PCD_MspInit+0xc0>)
 8007e86:	f7f9 fda3 	bl	80019d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e8a:	4b10      	ldr	r3, [pc, #64]	; (8007ecc <HAL_PCD_MspInit+0xbc>)
 8007e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8e:	4a0f      	ldr	r2, [pc, #60]	; (8007ecc <HAL_PCD_MspInit+0xbc>)
 8007e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e94:	6353      	str	r3, [r2, #52]	; 0x34
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	4b0c      	ldr	r3, [pc, #48]	; (8007ecc <HAL_PCD_MspInit+0xbc>)
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e9e:	4a0b      	ldr	r2, [pc, #44]	; (8007ecc <HAL_PCD_MspInit+0xbc>)
 8007ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8007ea6:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <HAL_PCD_MspInit+0xbc>)
 8007ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	2043      	movs	r0, #67	; 0x43
 8007eb8:	f7f9 f9e5 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ebc:	2043      	movs	r0, #67	; 0x43
 8007ebe:	f7f9 f9fe 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ec2:	bf00      	nop
 8007ec4:	3728      	adds	r7, #40	; 0x28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	40023800 	.word	0x40023800
 8007ed0:	40020000 	.word	0x40020000

08007ed4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	f7fe fc10 	bl	8006710 <USBD_LL_SetupStage>
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007f0a:	78fa      	ldrb	r2, [r7, #3]
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	1a9b      	subs	r3, r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	440b      	add	r3, r1
 8007f18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	4619      	mov	r1, r3
 8007f22:	f7fe fc48 	bl	80067b6 <USBD_LL_DataOutStage>
}
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b082      	sub	sp, #8
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	460b      	mov	r3, r1
 8007f38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	4613      	mov	r3, r2
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	1a9b      	subs	r3, r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	440b      	add	r3, r1
 8007f4e:	3348      	adds	r3, #72	; 0x48
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	4619      	mov	r1, r3
 8007f56:	f7fe fc91 	bl	800687c <USBD_LL_DataInStage>
}
 8007f5a:	bf00      	nop
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe fd95 	bl	8006aa0 <USBD_LL_SOF>
}
 8007f76:	bf00      	nop
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f86:	2301      	movs	r3, #1
 8007f88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d102      	bne.n	8007f98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]
 8007f96:	e008      	b.n	8007faa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d102      	bne.n	8007fa6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	73fb      	strb	r3, [r7, #15]
 8007fa4:	e001      	b.n	8007faa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007fa6:	f7f8 fe25 	bl	8000bf4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fb0:	7bfa      	ldrb	r2, [r7, #15]
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fe fd38 	bl	8006a2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fe fcf1 	bl	80069a8 <USBD_LL_Reset>
}
 8007fc6:	bf00      	nop
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fd33 	bl	8006a4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ff6:	f043 0301 	orr.w	r3, r3, #1
 8007ffa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008004:	4b04      	ldr	r3, [pc, #16]	; (8008018 <HAL_PCD_SuspendCallback+0x48>)
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	4a03      	ldr	r2, [pc, #12]	; (8008018 <HAL_PCD_SuspendCallback+0x48>)
 800800a:	f043 0306 	orr.w	r3, r3, #6
 800800e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	e000ed00 	.word	0xe000ed00

0800801c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe fd22 	bl	8006a74 <USBD_LL_Resume>
}
 8008030:	bf00      	nop
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800804a:	78fa      	ldrb	r2, [r7, #3]
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f7fe fd4d 	bl	8006aee <USBD_LL_IsoOUTIncomplete>
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800806e:	78fa      	ldrb	r2, [r7, #3]
 8008070:	4611      	mov	r1, r2
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fd2e 	bl	8006ad4 <USBD_LL_IsoINIncomplete>
}
 8008078:	bf00      	nop
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe fd3a 	bl	8006b08 <USBD_LL_DevConnected>
}
 8008094:	bf00      	nop
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fe fd37 	bl	8006b1e <USBD_LL_DevDisconnected>
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d13c      	bne.n	8008142 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80080c8:	4a20      	ldr	r2, [pc, #128]	; (800814c <USBD_LL_Init+0x94>)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a1e      	ldr	r2, [pc, #120]	; (800814c <USBD_LL_Init+0x94>)
 80080d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80080d8:	4b1c      	ldr	r3, [pc, #112]	; (800814c <USBD_LL_Init+0x94>)
 80080da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80080de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80080e0:	4b1a      	ldr	r3, [pc, #104]	; (800814c <USBD_LL_Init+0x94>)
 80080e2:	2204      	movs	r2, #4
 80080e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80080e6:	4b19      	ldr	r3, [pc, #100]	; (800814c <USBD_LL_Init+0x94>)
 80080e8:	2202      	movs	r2, #2
 80080ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80080ec:	4b17      	ldr	r3, [pc, #92]	; (800814c <USBD_LL_Init+0x94>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80080f2:	4b16      	ldr	r3, [pc, #88]	; (800814c <USBD_LL_Init+0x94>)
 80080f4:	2202      	movs	r2, #2
 80080f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80080f8:	4b14      	ldr	r3, [pc, #80]	; (800814c <USBD_LL_Init+0x94>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80080fe:	4b13      	ldr	r3, [pc, #76]	; (800814c <USBD_LL_Init+0x94>)
 8008100:	2200      	movs	r2, #0
 8008102:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008104:	4b11      	ldr	r3, [pc, #68]	; (800814c <USBD_LL_Init+0x94>)
 8008106:	2200      	movs	r2, #0
 8008108:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800810a:	4b10      	ldr	r3, [pc, #64]	; (800814c <USBD_LL_Init+0x94>)
 800810c:	2200      	movs	r2, #0
 800810e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008110:	4b0e      	ldr	r3, [pc, #56]	; (800814c <USBD_LL_Init+0x94>)
 8008112:	2200      	movs	r2, #0
 8008114:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008116:	480d      	ldr	r0, [pc, #52]	; (800814c <USBD_LL_Init+0x94>)
 8008118:	f7fa fd30 	bl	8002b7c <HAL_PCD_Init>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008122:	f7f8 fd67 	bl	8000bf4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008126:	2180      	movs	r1, #128	; 0x80
 8008128:	4808      	ldr	r0, [pc, #32]	; (800814c <USBD_LL_Init+0x94>)
 800812a:	f7fb fe8e 	bl	8003e4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800812e:	2240      	movs	r2, #64	; 0x40
 8008130:	2100      	movs	r1, #0
 8008132:	4806      	ldr	r0, [pc, #24]	; (800814c <USBD_LL_Init+0x94>)
 8008134:	f7fb fe42 	bl	8003dbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008138:	2280      	movs	r2, #128	; 0x80
 800813a:	2101      	movs	r1, #1
 800813c:	4803      	ldr	r0, [pc, #12]	; (800814c <USBD_LL_Init+0x94>)
 800813e:	f7fb fe3d 	bl	8003dbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20008adc 	.word	0x20008adc

08008150 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008166:	4618      	mov	r0, r3
 8008168:	f7fa fe25 	bl	8002db6 <HAL_PCD_Start>
 800816c:	4603      	mov	r3, r0
 800816e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	4618      	mov	r0, r3
 8008174:	f000 f92a 	bl	80083cc <USBD_Get_USB_Status>
 8008178:	4603      	mov	r3, r0
 800817a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800817c:	7bbb      	ldrb	r3, [r7, #14]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	4608      	mov	r0, r1
 8008190:	4611      	mov	r1, r2
 8008192:	461a      	mov	r2, r3
 8008194:	4603      	mov	r3, r0
 8008196:	70fb      	strb	r3, [r7, #3]
 8008198:	460b      	mov	r3, r1
 800819a:	70bb      	strb	r3, [r7, #2]
 800819c:	4613      	mov	r3, r2
 800819e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80081ae:	78bb      	ldrb	r3, [r7, #2]
 80081b0:	883a      	ldrh	r2, [r7, #0]
 80081b2:	78f9      	ldrb	r1, [r7, #3]
 80081b4:	f7fb fa09 	bl	80035ca <HAL_PCD_EP_Open>
 80081b8:	4603      	mov	r3, r0
 80081ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 f904 	bl	80083cc <USBD_Get_USB_Status>
 80081c4:	4603      	mov	r3, r0
 80081c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	460b      	mov	r3, r1
 80081dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081ec:	78fa      	ldrb	r2, [r7, #3]
 80081ee:	4611      	mov	r1, r2
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fb fa52 	bl	800369a <HAL_PCD_EP_Close>
 80081f6:	4603      	mov	r3, r0
 80081f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 f8e5 	bl	80083cc <USBD_Get_USB_Status>
 8008202:	4603      	mov	r3, r0
 8008204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008206:	7bbb      	ldrb	r3, [r7, #14]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800822a:	78fa      	ldrb	r2, [r7, #3]
 800822c:	4611      	mov	r1, r2
 800822e:	4618      	mov	r0, r3
 8008230:	f7fb fb2a 	bl	8003888 <HAL_PCD_EP_SetStall>
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 f8c6 	bl	80083cc <USBD_Get_USB_Status>
 8008240:	4603      	mov	r3, r0
 8008242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008244:	7bbb      	ldrb	r3, [r7, #14]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	460b      	mov	r3, r1
 8008258:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008268:	78fa      	ldrb	r2, [r7, #3]
 800826a:	4611      	mov	r1, r2
 800826c:	4618      	mov	r0, r3
 800826e:	f7fb fb6f 	bl	8003950 <HAL_PCD_EP_ClrStall>
 8008272:	4603      	mov	r3, r0
 8008274:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	4618      	mov	r0, r3
 800827a:	f000 f8a7 	bl	80083cc <USBD_Get_USB_Status>
 800827e:	4603      	mov	r3, r0
 8008280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008282:	7bbb      	ldrb	r3, [r7, #14]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800829e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	da0b      	bge.n	80082c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	4613      	mov	r3, r2
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	1a9b      	subs	r3, r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	440b      	add	r3, r1
 80082ba:	333e      	adds	r3, #62	; 0x3e
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	e00b      	b.n	80082d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082c6:	68f9      	ldr	r1, [r7, #12]
 80082c8:	4613      	mov	r3, r2
 80082ca:	00db      	lsls	r3, r3, #3
 80082cc:	1a9b      	subs	r3, r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80082d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082fe:	78fa      	ldrb	r2, [r7, #3]
 8008300:	4611      	mov	r1, r2
 8008302:	4618      	mov	r0, r3
 8008304:	f7fb f93c 	bl	8003580 <HAL_PCD_SetAddress>
 8008308:	4603      	mov	r3, r0
 800830a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	4618      	mov	r0, r3
 8008310:	f000 f85c 	bl	80083cc <USBD_Get_USB_Status>
 8008314:	4603      	mov	r3, r0
 8008316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008318:	7bbb      	ldrb	r3, [r7, #14]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b086      	sub	sp, #24
 8008326:	af00      	add	r7, sp, #0
 8008328:	60f8      	str	r0, [r7, #12]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
 800832e:	460b      	mov	r3, r1
 8008330:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008340:	7af9      	ldrb	r1, [r7, #11]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	f7fb fa55 	bl	80037f4 <HAL_PCD_EP_Transmit>
 800834a:	4603      	mov	r3, r0
 800834c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	4618      	mov	r0, r3
 8008352:	f000 f83b 	bl	80083cc <USBD_Get_USB_Status>
 8008356:	4603      	mov	r3, r0
 8008358:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800835a:	7dbb      	ldrb	r3, [r7, #22]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	607a      	str	r2, [r7, #4]
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	460b      	mov	r3, r1
 8008372:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008382:	7af9      	ldrb	r1, [r7, #11]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	f7fb f9d1 	bl	800372e <HAL_PCD_EP_Receive>
 800838c:	4603      	mov	r3, r0
 800838e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008390:	7dfb      	ldrb	r3, [r7, #23]
 8008392:	4618      	mov	r0, r3
 8008394:	f000 f81a 	bl	80083cc <USBD_Get_USB_Status>
 8008398:	4603      	mov	r3, r0
 800839a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800839c:	7dbb      	ldrb	r3, [r7, #22]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3718      	adds	r7, #24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083b8:	78fa      	ldrb	r2, [r7, #3]
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fb fa01 	bl	80037c4 <HAL_PCD_EP_GetRxCount>
 80083c2:	4603      	mov	r3, r0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d817      	bhi.n	8008410 <USBD_Get_USB_Status+0x44>
 80083e0:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <USBD_Get_USB_Status+0x1c>)
 80083e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e6:	bf00      	nop
 80083e8:	080083f9 	.word	0x080083f9
 80083ec:	080083ff 	.word	0x080083ff
 80083f0:	08008405 	.word	0x08008405
 80083f4:	0800840b 	.word	0x0800840b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	73fb      	strb	r3, [r7, #15]
    break;
 80083fc:	e00b      	b.n	8008416 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083fe:	2303      	movs	r3, #3
 8008400:	73fb      	strb	r3, [r7, #15]
    break;
 8008402:	e008      	b.n	8008416 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008404:	2301      	movs	r3, #1
 8008406:	73fb      	strb	r3, [r7, #15]
    break;
 8008408:	e005      	b.n	8008416 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800840a:	2303      	movs	r3, #3
 800840c:	73fb      	strb	r3, [r7, #15]
    break;
 800840e:	e002      	b.n	8008416 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008410:	2303      	movs	r3, #3
 8008412:	73fb      	strb	r3, [r7, #15]
    break;
 8008414:	bf00      	nop
  }
  return usb_status;
 8008416:	7bfb      	ldrb	r3, [r7, #15]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <__errno>:
 8008424:	4b01      	ldr	r3, [pc, #4]	; (800842c <__errno+0x8>)
 8008426:	6818      	ldr	r0, [r3, #0]
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	20000180 	.word	0x20000180

08008430 <__libc_init_array>:
 8008430:	b570      	push	{r4, r5, r6, lr}
 8008432:	4e0d      	ldr	r6, [pc, #52]	; (8008468 <__libc_init_array+0x38>)
 8008434:	4c0d      	ldr	r4, [pc, #52]	; (800846c <__libc_init_array+0x3c>)
 8008436:	1ba4      	subs	r4, r4, r6
 8008438:	10a4      	asrs	r4, r4, #2
 800843a:	2500      	movs	r5, #0
 800843c:	42a5      	cmp	r5, r4
 800843e:	d109      	bne.n	8008454 <__libc_init_array+0x24>
 8008440:	4e0b      	ldr	r6, [pc, #44]	; (8008470 <__libc_init_array+0x40>)
 8008442:	4c0c      	ldr	r4, [pc, #48]	; (8008474 <__libc_init_array+0x44>)
 8008444:	f001 f920 	bl	8009688 <_init>
 8008448:	1ba4      	subs	r4, r4, r6
 800844a:	10a4      	asrs	r4, r4, #2
 800844c:	2500      	movs	r5, #0
 800844e:	42a5      	cmp	r5, r4
 8008450:	d105      	bne.n	800845e <__libc_init_array+0x2e>
 8008452:	bd70      	pop	{r4, r5, r6, pc}
 8008454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008458:	4798      	blx	r3
 800845a:	3501      	adds	r5, #1
 800845c:	e7ee      	b.n	800843c <__libc_init_array+0xc>
 800845e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008462:	4798      	blx	r3
 8008464:	3501      	adds	r5, #1
 8008466:	e7f2      	b.n	800844e <__libc_init_array+0x1e>
 8008468:	08009944 	.word	0x08009944
 800846c:	08009944 	.word	0x08009944
 8008470:	08009944 	.word	0x08009944
 8008474:	08009948 	.word	0x08009948

08008478 <malloc>:
 8008478:	4b02      	ldr	r3, [pc, #8]	; (8008484 <malloc+0xc>)
 800847a:	4601      	mov	r1, r0
 800847c:	6818      	ldr	r0, [r3, #0]
 800847e:	f000 b86d 	b.w	800855c <_malloc_r>
 8008482:	bf00      	nop
 8008484:	20000180 	.word	0x20000180

08008488 <free>:
 8008488:	4b02      	ldr	r3, [pc, #8]	; (8008494 <free+0xc>)
 800848a:	4601      	mov	r1, r0
 800848c:	6818      	ldr	r0, [r3, #0]
 800848e:	f000 b817 	b.w	80084c0 <_free_r>
 8008492:	bf00      	nop
 8008494:	20000180 	.word	0x20000180

08008498 <memcpy>:
 8008498:	b510      	push	{r4, lr}
 800849a:	1e43      	subs	r3, r0, #1
 800849c:	440a      	add	r2, r1
 800849e:	4291      	cmp	r1, r2
 80084a0:	d100      	bne.n	80084a4 <memcpy+0xc>
 80084a2:	bd10      	pop	{r4, pc}
 80084a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ac:	e7f7      	b.n	800849e <memcpy+0x6>

080084ae <memset>:
 80084ae:	4402      	add	r2, r0
 80084b0:	4603      	mov	r3, r0
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d100      	bne.n	80084b8 <memset+0xa>
 80084b6:	4770      	bx	lr
 80084b8:	f803 1b01 	strb.w	r1, [r3], #1
 80084bc:	e7f9      	b.n	80084b2 <memset+0x4>
	...

080084c0 <_free_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4605      	mov	r5, r0
 80084c4:	2900      	cmp	r1, #0
 80084c6:	d045      	beq.n	8008554 <_free_r+0x94>
 80084c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084cc:	1f0c      	subs	r4, r1, #4
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	bfb8      	it	lt
 80084d2:	18e4      	addlt	r4, r4, r3
 80084d4:	f000 f8fa 	bl	80086cc <__malloc_lock>
 80084d8:	4a1f      	ldr	r2, [pc, #124]	; (8008558 <_free_r+0x98>)
 80084da:	6813      	ldr	r3, [r2, #0]
 80084dc:	4610      	mov	r0, r2
 80084de:	b933      	cbnz	r3, 80084ee <_free_r+0x2e>
 80084e0:	6063      	str	r3, [r4, #4]
 80084e2:	6014      	str	r4, [r2, #0]
 80084e4:	4628      	mov	r0, r5
 80084e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084ea:	f000 b8f0 	b.w	80086ce <__malloc_unlock>
 80084ee:	42a3      	cmp	r3, r4
 80084f0:	d90c      	bls.n	800850c <_free_r+0x4c>
 80084f2:	6821      	ldr	r1, [r4, #0]
 80084f4:	1862      	adds	r2, r4, r1
 80084f6:	4293      	cmp	r3, r2
 80084f8:	bf04      	itt	eq
 80084fa:	681a      	ldreq	r2, [r3, #0]
 80084fc:	685b      	ldreq	r3, [r3, #4]
 80084fe:	6063      	str	r3, [r4, #4]
 8008500:	bf04      	itt	eq
 8008502:	1852      	addeq	r2, r2, r1
 8008504:	6022      	streq	r2, [r4, #0]
 8008506:	6004      	str	r4, [r0, #0]
 8008508:	e7ec      	b.n	80084e4 <_free_r+0x24>
 800850a:	4613      	mov	r3, r2
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	b10a      	cbz	r2, 8008514 <_free_r+0x54>
 8008510:	42a2      	cmp	r2, r4
 8008512:	d9fa      	bls.n	800850a <_free_r+0x4a>
 8008514:	6819      	ldr	r1, [r3, #0]
 8008516:	1858      	adds	r0, r3, r1
 8008518:	42a0      	cmp	r0, r4
 800851a:	d10b      	bne.n	8008534 <_free_r+0x74>
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	4401      	add	r1, r0
 8008520:	1858      	adds	r0, r3, r1
 8008522:	4282      	cmp	r2, r0
 8008524:	6019      	str	r1, [r3, #0]
 8008526:	d1dd      	bne.n	80084e4 <_free_r+0x24>
 8008528:	6810      	ldr	r0, [r2, #0]
 800852a:	6852      	ldr	r2, [r2, #4]
 800852c:	605a      	str	r2, [r3, #4]
 800852e:	4401      	add	r1, r0
 8008530:	6019      	str	r1, [r3, #0]
 8008532:	e7d7      	b.n	80084e4 <_free_r+0x24>
 8008534:	d902      	bls.n	800853c <_free_r+0x7c>
 8008536:	230c      	movs	r3, #12
 8008538:	602b      	str	r3, [r5, #0]
 800853a:	e7d3      	b.n	80084e4 <_free_r+0x24>
 800853c:	6820      	ldr	r0, [r4, #0]
 800853e:	1821      	adds	r1, r4, r0
 8008540:	428a      	cmp	r2, r1
 8008542:	bf04      	itt	eq
 8008544:	6811      	ldreq	r1, [r2, #0]
 8008546:	6852      	ldreq	r2, [r2, #4]
 8008548:	6062      	str	r2, [r4, #4]
 800854a:	bf04      	itt	eq
 800854c:	1809      	addeq	r1, r1, r0
 800854e:	6021      	streq	r1, [r4, #0]
 8008550:	605c      	str	r4, [r3, #4]
 8008552:	e7c7      	b.n	80084e4 <_free_r+0x24>
 8008554:	bd38      	pop	{r3, r4, r5, pc}
 8008556:	bf00      	nop
 8008558:	200003f8 	.word	0x200003f8

0800855c <_malloc_r>:
 800855c:	b570      	push	{r4, r5, r6, lr}
 800855e:	1ccd      	adds	r5, r1, #3
 8008560:	f025 0503 	bic.w	r5, r5, #3
 8008564:	3508      	adds	r5, #8
 8008566:	2d0c      	cmp	r5, #12
 8008568:	bf38      	it	cc
 800856a:	250c      	movcc	r5, #12
 800856c:	2d00      	cmp	r5, #0
 800856e:	4606      	mov	r6, r0
 8008570:	db01      	blt.n	8008576 <_malloc_r+0x1a>
 8008572:	42a9      	cmp	r1, r5
 8008574:	d903      	bls.n	800857e <_malloc_r+0x22>
 8008576:	230c      	movs	r3, #12
 8008578:	6033      	str	r3, [r6, #0]
 800857a:	2000      	movs	r0, #0
 800857c:	bd70      	pop	{r4, r5, r6, pc}
 800857e:	f000 f8a5 	bl	80086cc <__malloc_lock>
 8008582:	4a21      	ldr	r2, [pc, #132]	; (8008608 <_malloc_r+0xac>)
 8008584:	6814      	ldr	r4, [r2, #0]
 8008586:	4621      	mov	r1, r4
 8008588:	b991      	cbnz	r1, 80085b0 <_malloc_r+0x54>
 800858a:	4c20      	ldr	r4, [pc, #128]	; (800860c <_malloc_r+0xb0>)
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	b91b      	cbnz	r3, 8008598 <_malloc_r+0x3c>
 8008590:	4630      	mov	r0, r6
 8008592:	f000 f83d 	bl	8008610 <_sbrk_r>
 8008596:	6020      	str	r0, [r4, #0]
 8008598:	4629      	mov	r1, r5
 800859a:	4630      	mov	r0, r6
 800859c:	f000 f838 	bl	8008610 <_sbrk_r>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d124      	bne.n	80085ee <_malloc_r+0x92>
 80085a4:	230c      	movs	r3, #12
 80085a6:	6033      	str	r3, [r6, #0]
 80085a8:	4630      	mov	r0, r6
 80085aa:	f000 f890 	bl	80086ce <__malloc_unlock>
 80085ae:	e7e4      	b.n	800857a <_malloc_r+0x1e>
 80085b0:	680b      	ldr	r3, [r1, #0]
 80085b2:	1b5b      	subs	r3, r3, r5
 80085b4:	d418      	bmi.n	80085e8 <_malloc_r+0x8c>
 80085b6:	2b0b      	cmp	r3, #11
 80085b8:	d90f      	bls.n	80085da <_malloc_r+0x7e>
 80085ba:	600b      	str	r3, [r1, #0]
 80085bc:	50cd      	str	r5, [r1, r3]
 80085be:	18cc      	adds	r4, r1, r3
 80085c0:	4630      	mov	r0, r6
 80085c2:	f000 f884 	bl	80086ce <__malloc_unlock>
 80085c6:	f104 000b 	add.w	r0, r4, #11
 80085ca:	1d23      	adds	r3, r4, #4
 80085cc:	f020 0007 	bic.w	r0, r0, #7
 80085d0:	1ac3      	subs	r3, r0, r3
 80085d2:	d0d3      	beq.n	800857c <_malloc_r+0x20>
 80085d4:	425a      	negs	r2, r3
 80085d6:	50e2      	str	r2, [r4, r3]
 80085d8:	e7d0      	b.n	800857c <_malloc_r+0x20>
 80085da:	428c      	cmp	r4, r1
 80085dc:	684b      	ldr	r3, [r1, #4]
 80085de:	bf16      	itet	ne
 80085e0:	6063      	strne	r3, [r4, #4]
 80085e2:	6013      	streq	r3, [r2, #0]
 80085e4:	460c      	movne	r4, r1
 80085e6:	e7eb      	b.n	80085c0 <_malloc_r+0x64>
 80085e8:	460c      	mov	r4, r1
 80085ea:	6849      	ldr	r1, [r1, #4]
 80085ec:	e7cc      	b.n	8008588 <_malloc_r+0x2c>
 80085ee:	1cc4      	adds	r4, r0, #3
 80085f0:	f024 0403 	bic.w	r4, r4, #3
 80085f4:	42a0      	cmp	r0, r4
 80085f6:	d005      	beq.n	8008604 <_malloc_r+0xa8>
 80085f8:	1a21      	subs	r1, r4, r0
 80085fa:	4630      	mov	r0, r6
 80085fc:	f000 f808 	bl	8008610 <_sbrk_r>
 8008600:	3001      	adds	r0, #1
 8008602:	d0cf      	beq.n	80085a4 <_malloc_r+0x48>
 8008604:	6025      	str	r5, [r4, #0]
 8008606:	e7db      	b.n	80085c0 <_malloc_r+0x64>
 8008608:	200003f8 	.word	0x200003f8
 800860c:	200003fc 	.word	0x200003fc

08008610 <_sbrk_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4c06      	ldr	r4, [pc, #24]	; (800862c <_sbrk_r+0x1c>)
 8008614:	2300      	movs	r3, #0
 8008616:	4605      	mov	r5, r0
 8008618:	4608      	mov	r0, r1
 800861a:	6023      	str	r3, [r4, #0]
 800861c:	f7f8 fc4e 	bl	8000ebc <_sbrk>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_sbrk_r+0x1a>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	b103      	cbz	r3, 800862a <_sbrk_r+0x1a>
 8008628:	602b      	str	r3, [r5, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	20008ee4 	.word	0x20008ee4

08008630 <_vsiprintf_r>:
 8008630:	b500      	push	{lr}
 8008632:	b09b      	sub	sp, #108	; 0x6c
 8008634:	9100      	str	r1, [sp, #0]
 8008636:	9104      	str	r1, [sp, #16]
 8008638:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800863c:	9105      	str	r1, [sp, #20]
 800863e:	9102      	str	r1, [sp, #8]
 8008640:	4905      	ldr	r1, [pc, #20]	; (8008658 <_vsiprintf_r+0x28>)
 8008642:	9103      	str	r1, [sp, #12]
 8008644:	4669      	mov	r1, sp
 8008646:	f000 f89d 	bl	8008784 <_svfiprintf_r>
 800864a:	9b00      	ldr	r3, [sp, #0]
 800864c:	2200      	movs	r2, #0
 800864e:	701a      	strb	r2, [r3, #0]
 8008650:	b01b      	add	sp, #108	; 0x6c
 8008652:	f85d fb04 	ldr.w	pc, [sp], #4
 8008656:	bf00      	nop
 8008658:	ffff0208 	.word	0xffff0208

0800865c <vsiprintf>:
 800865c:	4613      	mov	r3, r2
 800865e:	460a      	mov	r2, r1
 8008660:	4601      	mov	r1, r0
 8008662:	4802      	ldr	r0, [pc, #8]	; (800866c <vsiprintf+0x10>)
 8008664:	6800      	ldr	r0, [r0, #0]
 8008666:	f7ff bfe3 	b.w	8008630 <_vsiprintf_r>
 800866a:	bf00      	nop
 800866c:	20000180 	.word	0x20000180

08008670 <_vsiscanf_r>:
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	b09a      	sub	sp, #104	; 0x68
 8008674:	4604      	mov	r4, r0
 8008676:	461e      	mov	r6, r3
 8008678:	4608      	mov	r0, r1
 800867a:	f44f 7301 	mov.w	r3, #516	; 0x204
 800867e:	4615      	mov	r5, r2
 8008680:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008684:	9100      	str	r1, [sp, #0]
 8008686:	9104      	str	r1, [sp, #16]
 8008688:	f7f7 fda2 	bl	80001d0 <strlen>
 800868c:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <_vsiscanf_r+0x44>)
 800868e:	9309      	str	r3, [sp, #36]	; 0x24
 8008690:	2100      	movs	r1, #0
 8008692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008696:	9001      	str	r0, [sp, #4]
 8008698:	9005      	str	r0, [sp, #20]
 800869a:	910d      	str	r1, [sp, #52]	; 0x34
 800869c:	9112      	str	r1, [sp, #72]	; 0x48
 800869e:	f8ad 300e 	strh.w	r3, [sp, #14]
 80086a2:	462a      	mov	r2, r5
 80086a4:	4633      	mov	r3, r6
 80086a6:	4669      	mov	r1, sp
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 f9bd 	bl	8008a28 <__ssvfiscanf_r>
 80086ae:	b01a      	add	sp, #104	; 0x68
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	bf00      	nop
 80086b4:	080092ed 	.word	0x080092ed

080086b8 <vsiscanf>:
 80086b8:	4613      	mov	r3, r2
 80086ba:	460a      	mov	r2, r1
 80086bc:	4601      	mov	r1, r0
 80086be:	4802      	ldr	r0, [pc, #8]	; (80086c8 <vsiscanf+0x10>)
 80086c0:	6800      	ldr	r0, [r0, #0]
 80086c2:	f7ff bfd5 	b.w	8008670 <_vsiscanf_r>
 80086c6:	bf00      	nop
 80086c8:	20000180 	.word	0x20000180

080086cc <__malloc_lock>:
 80086cc:	4770      	bx	lr

080086ce <__malloc_unlock>:
 80086ce:	4770      	bx	lr

080086d0 <__ssputs_r>:
 80086d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086d4:	688e      	ldr	r6, [r1, #8]
 80086d6:	429e      	cmp	r6, r3
 80086d8:	4682      	mov	sl, r0
 80086da:	460c      	mov	r4, r1
 80086dc:	4690      	mov	r8, r2
 80086de:	4699      	mov	r9, r3
 80086e0:	d837      	bhi.n	8008752 <__ssputs_r+0x82>
 80086e2:	898a      	ldrh	r2, [r1, #12]
 80086e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086e8:	d031      	beq.n	800874e <__ssputs_r+0x7e>
 80086ea:	6825      	ldr	r5, [r4, #0]
 80086ec:	6909      	ldr	r1, [r1, #16]
 80086ee:	1a6f      	subs	r7, r5, r1
 80086f0:	6965      	ldr	r5, [r4, #20]
 80086f2:	2302      	movs	r3, #2
 80086f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80086fc:	f109 0301 	add.w	r3, r9, #1
 8008700:	443b      	add	r3, r7
 8008702:	429d      	cmp	r5, r3
 8008704:	bf38      	it	cc
 8008706:	461d      	movcc	r5, r3
 8008708:	0553      	lsls	r3, r2, #21
 800870a:	d530      	bpl.n	800876e <__ssputs_r+0x9e>
 800870c:	4629      	mov	r1, r5
 800870e:	f7ff ff25 	bl	800855c <_malloc_r>
 8008712:	4606      	mov	r6, r0
 8008714:	b950      	cbnz	r0, 800872c <__ssputs_r+0x5c>
 8008716:	230c      	movs	r3, #12
 8008718:	f8ca 3000 	str.w	r3, [sl]
 800871c:	89a3      	ldrh	r3, [r4, #12]
 800871e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008722:	81a3      	strh	r3, [r4, #12]
 8008724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800872c:	463a      	mov	r2, r7
 800872e:	6921      	ldr	r1, [r4, #16]
 8008730:	f7ff feb2 	bl	8008498 <memcpy>
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800873a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873e:	81a3      	strh	r3, [r4, #12]
 8008740:	6126      	str	r6, [r4, #16]
 8008742:	6165      	str	r5, [r4, #20]
 8008744:	443e      	add	r6, r7
 8008746:	1bed      	subs	r5, r5, r7
 8008748:	6026      	str	r6, [r4, #0]
 800874a:	60a5      	str	r5, [r4, #8]
 800874c:	464e      	mov	r6, r9
 800874e:	454e      	cmp	r6, r9
 8008750:	d900      	bls.n	8008754 <__ssputs_r+0x84>
 8008752:	464e      	mov	r6, r9
 8008754:	4632      	mov	r2, r6
 8008756:	4641      	mov	r1, r8
 8008758:	6820      	ldr	r0, [r4, #0]
 800875a:	f000 ff41 	bl	80095e0 <memmove>
 800875e:	68a3      	ldr	r3, [r4, #8]
 8008760:	1b9b      	subs	r3, r3, r6
 8008762:	60a3      	str	r3, [r4, #8]
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	441e      	add	r6, r3
 8008768:	6026      	str	r6, [r4, #0]
 800876a:	2000      	movs	r0, #0
 800876c:	e7dc      	b.n	8008728 <__ssputs_r+0x58>
 800876e:	462a      	mov	r2, r5
 8008770:	f000 ff4f 	bl	8009612 <_realloc_r>
 8008774:	4606      	mov	r6, r0
 8008776:	2800      	cmp	r0, #0
 8008778:	d1e2      	bne.n	8008740 <__ssputs_r+0x70>
 800877a:	6921      	ldr	r1, [r4, #16]
 800877c:	4650      	mov	r0, sl
 800877e:	f7ff fe9f 	bl	80084c0 <_free_r>
 8008782:	e7c8      	b.n	8008716 <__ssputs_r+0x46>

08008784 <_svfiprintf_r>:
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	461d      	mov	r5, r3
 800878a:	898b      	ldrh	r3, [r1, #12]
 800878c:	061f      	lsls	r7, r3, #24
 800878e:	b09d      	sub	sp, #116	; 0x74
 8008790:	4680      	mov	r8, r0
 8008792:	460c      	mov	r4, r1
 8008794:	4616      	mov	r6, r2
 8008796:	d50f      	bpl.n	80087b8 <_svfiprintf_r+0x34>
 8008798:	690b      	ldr	r3, [r1, #16]
 800879a:	b96b      	cbnz	r3, 80087b8 <_svfiprintf_r+0x34>
 800879c:	2140      	movs	r1, #64	; 0x40
 800879e:	f7ff fedd 	bl	800855c <_malloc_r>
 80087a2:	6020      	str	r0, [r4, #0]
 80087a4:	6120      	str	r0, [r4, #16]
 80087a6:	b928      	cbnz	r0, 80087b4 <_svfiprintf_r+0x30>
 80087a8:	230c      	movs	r3, #12
 80087aa:	f8c8 3000 	str.w	r3, [r8]
 80087ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087b2:	e0c8      	b.n	8008946 <_svfiprintf_r+0x1c2>
 80087b4:	2340      	movs	r3, #64	; 0x40
 80087b6:	6163      	str	r3, [r4, #20]
 80087b8:	2300      	movs	r3, #0
 80087ba:	9309      	str	r3, [sp, #36]	; 0x24
 80087bc:	2320      	movs	r3, #32
 80087be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087c2:	2330      	movs	r3, #48	; 0x30
 80087c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087c8:	9503      	str	r5, [sp, #12]
 80087ca:	f04f 0b01 	mov.w	fp, #1
 80087ce:	4637      	mov	r7, r6
 80087d0:	463d      	mov	r5, r7
 80087d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80087d6:	b10b      	cbz	r3, 80087dc <_svfiprintf_r+0x58>
 80087d8:	2b25      	cmp	r3, #37	; 0x25
 80087da:	d13e      	bne.n	800885a <_svfiprintf_r+0xd6>
 80087dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80087e0:	d00b      	beq.n	80087fa <_svfiprintf_r+0x76>
 80087e2:	4653      	mov	r3, sl
 80087e4:	4632      	mov	r2, r6
 80087e6:	4621      	mov	r1, r4
 80087e8:	4640      	mov	r0, r8
 80087ea:	f7ff ff71 	bl	80086d0 <__ssputs_r>
 80087ee:	3001      	adds	r0, #1
 80087f0:	f000 80a4 	beq.w	800893c <_svfiprintf_r+0x1b8>
 80087f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f6:	4453      	add	r3, sl
 80087f8:	9309      	str	r3, [sp, #36]	; 0x24
 80087fa:	783b      	ldrb	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 809d 	beq.w	800893c <_svfiprintf_r+0x1b8>
 8008802:	2300      	movs	r3, #0
 8008804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800880c:	9304      	str	r3, [sp, #16]
 800880e:	9307      	str	r3, [sp, #28]
 8008810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008814:	931a      	str	r3, [sp, #104]	; 0x68
 8008816:	462f      	mov	r7, r5
 8008818:	2205      	movs	r2, #5
 800881a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800881e:	4850      	ldr	r0, [pc, #320]	; (8008960 <_svfiprintf_r+0x1dc>)
 8008820:	f7f7 fcde 	bl	80001e0 <memchr>
 8008824:	9b04      	ldr	r3, [sp, #16]
 8008826:	b9d0      	cbnz	r0, 800885e <_svfiprintf_r+0xda>
 8008828:	06d9      	lsls	r1, r3, #27
 800882a:	bf44      	itt	mi
 800882c:	2220      	movmi	r2, #32
 800882e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008832:	071a      	lsls	r2, r3, #28
 8008834:	bf44      	itt	mi
 8008836:	222b      	movmi	r2, #43	; 0x2b
 8008838:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800883c:	782a      	ldrb	r2, [r5, #0]
 800883e:	2a2a      	cmp	r2, #42	; 0x2a
 8008840:	d015      	beq.n	800886e <_svfiprintf_r+0xea>
 8008842:	9a07      	ldr	r2, [sp, #28]
 8008844:	462f      	mov	r7, r5
 8008846:	2000      	movs	r0, #0
 8008848:	250a      	movs	r5, #10
 800884a:	4639      	mov	r1, r7
 800884c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008850:	3b30      	subs	r3, #48	; 0x30
 8008852:	2b09      	cmp	r3, #9
 8008854:	d94d      	bls.n	80088f2 <_svfiprintf_r+0x16e>
 8008856:	b1b8      	cbz	r0, 8008888 <_svfiprintf_r+0x104>
 8008858:	e00f      	b.n	800887a <_svfiprintf_r+0xf6>
 800885a:	462f      	mov	r7, r5
 800885c:	e7b8      	b.n	80087d0 <_svfiprintf_r+0x4c>
 800885e:	4a40      	ldr	r2, [pc, #256]	; (8008960 <_svfiprintf_r+0x1dc>)
 8008860:	1a80      	subs	r0, r0, r2
 8008862:	fa0b f000 	lsl.w	r0, fp, r0
 8008866:	4318      	orrs	r0, r3
 8008868:	9004      	str	r0, [sp, #16]
 800886a:	463d      	mov	r5, r7
 800886c:	e7d3      	b.n	8008816 <_svfiprintf_r+0x92>
 800886e:	9a03      	ldr	r2, [sp, #12]
 8008870:	1d11      	adds	r1, r2, #4
 8008872:	6812      	ldr	r2, [r2, #0]
 8008874:	9103      	str	r1, [sp, #12]
 8008876:	2a00      	cmp	r2, #0
 8008878:	db01      	blt.n	800887e <_svfiprintf_r+0xfa>
 800887a:	9207      	str	r2, [sp, #28]
 800887c:	e004      	b.n	8008888 <_svfiprintf_r+0x104>
 800887e:	4252      	negs	r2, r2
 8008880:	f043 0302 	orr.w	r3, r3, #2
 8008884:	9207      	str	r2, [sp, #28]
 8008886:	9304      	str	r3, [sp, #16]
 8008888:	783b      	ldrb	r3, [r7, #0]
 800888a:	2b2e      	cmp	r3, #46	; 0x2e
 800888c:	d10c      	bne.n	80088a8 <_svfiprintf_r+0x124>
 800888e:	787b      	ldrb	r3, [r7, #1]
 8008890:	2b2a      	cmp	r3, #42	; 0x2a
 8008892:	d133      	bne.n	80088fc <_svfiprintf_r+0x178>
 8008894:	9b03      	ldr	r3, [sp, #12]
 8008896:	1d1a      	adds	r2, r3, #4
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	9203      	str	r2, [sp, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	bfb8      	it	lt
 80088a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088a4:	3702      	adds	r7, #2
 80088a6:	9305      	str	r3, [sp, #20]
 80088a8:	4d2e      	ldr	r5, [pc, #184]	; (8008964 <_svfiprintf_r+0x1e0>)
 80088aa:	7839      	ldrb	r1, [r7, #0]
 80088ac:	2203      	movs	r2, #3
 80088ae:	4628      	mov	r0, r5
 80088b0:	f7f7 fc96 	bl	80001e0 <memchr>
 80088b4:	b138      	cbz	r0, 80088c6 <_svfiprintf_r+0x142>
 80088b6:	2340      	movs	r3, #64	; 0x40
 80088b8:	1b40      	subs	r0, r0, r5
 80088ba:	fa03 f000 	lsl.w	r0, r3, r0
 80088be:	9b04      	ldr	r3, [sp, #16]
 80088c0:	4303      	orrs	r3, r0
 80088c2:	3701      	adds	r7, #1
 80088c4:	9304      	str	r3, [sp, #16]
 80088c6:	7839      	ldrb	r1, [r7, #0]
 80088c8:	4827      	ldr	r0, [pc, #156]	; (8008968 <_svfiprintf_r+0x1e4>)
 80088ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088ce:	2206      	movs	r2, #6
 80088d0:	1c7e      	adds	r6, r7, #1
 80088d2:	f7f7 fc85 	bl	80001e0 <memchr>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d038      	beq.n	800894c <_svfiprintf_r+0x1c8>
 80088da:	4b24      	ldr	r3, [pc, #144]	; (800896c <_svfiprintf_r+0x1e8>)
 80088dc:	bb13      	cbnz	r3, 8008924 <_svfiprintf_r+0x1a0>
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	3307      	adds	r3, #7
 80088e2:	f023 0307 	bic.w	r3, r3, #7
 80088e6:	3308      	adds	r3, #8
 80088e8:	9303      	str	r3, [sp, #12]
 80088ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ec:	444b      	add	r3, r9
 80088ee:	9309      	str	r3, [sp, #36]	; 0x24
 80088f0:	e76d      	b.n	80087ce <_svfiprintf_r+0x4a>
 80088f2:	fb05 3202 	mla	r2, r5, r2, r3
 80088f6:	2001      	movs	r0, #1
 80088f8:	460f      	mov	r7, r1
 80088fa:	e7a6      	b.n	800884a <_svfiprintf_r+0xc6>
 80088fc:	2300      	movs	r3, #0
 80088fe:	3701      	adds	r7, #1
 8008900:	9305      	str	r3, [sp, #20]
 8008902:	4619      	mov	r1, r3
 8008904:	250a      	movs	r5, #10
 8008906:	4638      	mov	r0, r7
 8008908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800890c:	3a30      	subs	r2, #48	; 0x30
 800890e:	2a09      	cmp	r2, #9
 8008910:	d903      	bls.n	800891a <_svfiprintf_r+0x196>
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0c8      	beq.n	80088a8 <_svfiprintf_r+0x124>
 8008916:	9105      	str	r1, [sp, #20]
 8008918:	e7c6      	b.n	80088a8 <_svfiprintf_r+0x124>
 800891a:	fb05 2101 	mla	r1, r5, r1, r2
 800891e:	2301      	movs	r3, #1
 8008920:	4607      	mov	r7, r0
 8008922:	e7f0      	b.n	8008906 <_svfiprintf_r+0x182>
 8008924:	ab03      	add	r3, sp, #12
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	4622      	mov	r2, r4
 800892a:	4b11      	ldr	r3, [pc, #68]	; (8008970 <_svfiprintf_r+0x1ec>)
 800892c:	a904      	add	r1, sp, #16
 800892e:	4640      	mov	r0, r8
 8008930:	f3af 8000 	nop.w
 8008934:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008938:	4681      	mov	r9, r0
 800893a:	d1d6      	bne.n	80088ea <_svfiprintf_r+0x166>
 800893c:	89a3      	ldrh	r3, [r4, #12]
 800893e:	065b      	lsls	r3, r3, #25
 8008940:	f53f af35 	bmi.w	80087ae <_svfiprintf_r+0x2a>
 8008944:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008946:	b01d      	add	sp, #116	; 0x74
 8008948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894c:	ab03      	add	r3, sp, #12
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	4622      	mov	r2, r4
 8008952:	4b07      	ldr	r3, [pc, #28]	; (8008970 <_svfiprintf_r+0x1ec>)
 8008954:	a904      	add	r1, sp, #16
 8008956:	4640      	mov	r0, r8
 8008958:	f000 fa2c 	bl	8008db4 <_printf_i>
 800895c:	e7ea      	b.n	8008934 <_svfiprintf_r+0x1b0>
 800895e:	bf00      	nop
 8008960:	08009780 	.word	0x08009780
 8008964:	08009786 	.word	0x08009786
 8008968:	0800978a 	.word	0x0800978a
 800896c:	00000000 	.word	0x00000000
 8008970:	080086d1 	.word	0x080086d1

08008974 <_sungetc_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	1c4b      	adds	r3, r1, #1
 8008978:	4614      	mov	r4, r2
 800897a:	d103      	bne.n	8008984 <_sungetc_r+0x10>
 800897c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008980:	4628      	mov	r0, r5
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	8993      	ldrh	r3, [r2, #12]
 8008986:	f023 0320 	bic.w	r3, r3, #32
 800898a:	8193      	strh	r3, [r2, #12]
 800898c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800898e:	6852      	ldr	r2, [r2, #4]
 8008990:	b2cd      	uxtb	r5, r1
 8008992:	b18b      	cbz	r3, 80089b8 <_sungetc_r+0x44>
 8008994:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008996:	4293      	cmp	r3, r2
 8008998:	dd08      	ble.n	80089ac <_sungetc_r+0x38>
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	1e5a      	subs	r2, r3, #1
 800899e:	6022      	str	r2, [r4, #0]
 80089a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80089a4:	6863      	ldr	r3, [r4, #4]
 80089a6:	3301      	adds	r3, #1
 80089a8:	6063      	str	r3, [r4, #4]
 80089aa:	e7e9      	b.n	8008980 <_sungetc_r+0xc>
 80089ac:	4621      	mov	r1, r4
 80089ae:	f000 fdb9 	bl	8009524 <__submore>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d0f1      	beq.n	800899a <_sungetc_r+0x26>
 80089b6:	e7e1      	b.n	800897c <_sungetc_r+0x8>
 80089b8:	6921      	ldr	r1, [r4, #16]
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	b151      	cbz	r1, 80089d4 <_sungetc_r+0x60>
 80089be:	4299      	cmp	r1, r3
 80089c0:	d208      	bcs.n	80089d4 <_sungetc_r+0x60>
 80089c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80089c6:	42a9      	cmp	r1, r5
 80089c8:	d104      	bne.n	80089d4 <_sungetc_r+0x60>
 80089ca:	3b01      	subs	r3, #1
 80089cc:	3201      	adds	r2, #1
 80089ce:	6023      	str	r3, [r4, #0]
 80089d0:	6062      	str	r2, [r4, #4]
 80089d2:	e7d5      	b.n	8008980 <_sungetc_r+0xc>
 80089d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80089d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089dc:	6363      	str	r3, [r4, #52]	; 0x34
 80089de:	2303      	movs	r3, #3
 80089e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80089e2:	4623      	mov	r3, r4
 80089e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	2301      	movs	r3, #1
 80089ec:	e7dc      	b.n	80089a8 <_sungetc_r+0x34>

080089ee <__ssrefill_r>:
 80089ee:	b510      	push	{r4, lr}
 80089f0:	460c      	mov	r4, r1
 80089f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80089f4:	b169      	cbz	r1, 8008a12 <__ssrefill_r+0x24>
 80089f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089fa:	4299      	cmp	r1, r3
 80089fc:	d001      	beq.n	8008a02 <__ssrefill_r+0x14>
 80089fe:	f7ff fd5f 	bl	80084c0 <_free_r>
 8008a02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a04:	6063      	str	r3, [r4, #4]
 8008a06:	2000      	movs	r0, #0
 8008a08:	6360      	str	r0, [r4, #52]	; 0x34
 8008a0a:	b113      	cbz	r3, 8008a12 <__ssrefill_r+0x24>
 8008a0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a0e:	6023      	str	r3, [r4, #0]
 8008a10:	bd10      	pop	{r4, pc}
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	2300      	movs	r3, #0
 8008a18:	6063      	str	r3, [r4, #4]
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	f043 0320 	orr.w	r3, r3, #32
 8008a20:	81a3      	strh	r3, [r4, #12]
 8008a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a26:	e7f3      	b.n	8008a10 <__ssrefill_r+0x22>

08008a28 <__ssvfiscanf_r>:
 8008a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008a30:	460c      	mov	r4, r1
 8008a32:	2100      	movs	r1, #0
 8008a34:	9144      	str	r1, [sp, #272]	; 0x110
 8008a36:	9145      	str	r1, [sp, #276]	; 0x114
 8008a38:	499f      	ldr	r1, [pc, #636]	; (8008cb8 <__ssvfiscanf_r+0x290>)
 8008a3a:	91a0      	str	r1, [sp, #640]	; 0x280
 8008a3c:	f10d 0804 	add.w	r8, sp, #4
 8008a40:	499e      	ldr	r1, [pc, #632]	; (8008cbc <__ssvfiscanf_r+0x294>)
 8008a42:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8008cc0 <__ssvfiscanf_r+0x298>
 8008a46:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	4692      	mov	sl, r2
 8008a4e:	91a1      	str	r1, [sp, #644]	; 0x284
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	270a      	movs	r7, #10
 8008a54:	f89a 3000 	ldrb.w	r3, [sl]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 812a 	beq.w	8008cb2 <__ssvfiscanf_r+0x28a>
 8008a5e:	4655      	mov	r5, sl
 8008a60:	f000 fd9e 	bl	80095a0 <__locale_ctype_ptr>
 8008a64:	f815 bb01 	ldrb.w	fp, [r5], #1
 8008a68:	4458      	add	r0, fp
 8008a6a:	7843      	ldrb	r3, [r0, #1]
 8008a6c:	f013 0308 	ands.w	r3, r3, #8
 8008a70:	d01c      	beq.n	8008aac <__ssvfiscanf_r+0x84>
 8008a72:	6863      	ldr	r3, [r4, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	dd12      	ble.n	8008a9e <__ssvfiscanf_r+0x76>
 8008a78:	f000 fd92 	bl	80095a0 <__locale_ctype_ptr>
 8008a7c:	6823      	ldr	r3, [r4, #0]
 8008a7e:	781a      	ldrb	r2, [r3, #0]
 8008a80:	4410      	add	r0, r2
 8008a82:	7842      	ldrb	r2, [r0, #1]
 8008a84:	0712      	lsls	r2, r2, #28
 8008a86:	d401      	bmi.n	8008a8c <__ssvfiscanf_r+0x64>
 8008a88:	46aa      	mov	sl, r5
 8008a8a:	e7e3      	b.n	8008a54 <__ssvfiscanf_r+0x2c>
 8008a8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a8e:	3201      	adds	r2, #1
 8008a90:	9245      	str	r2, [sp, #276]	; 0x114
 8008a92:	6862      	ldr	r2, [r4, #4]
 8008a94:	3301      	adds	r3, #1
 8008a96:	3a01      	subs	r2, #1
 8008a98:	6062      	str	r2, [r4, #4]
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	e7e9      	b.n	8008a72 <__ssvfiscanf_r+0x4a>
 8008a9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	4798      	blx	r3
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d0e6      	beq.n	8008a78 <__ssvfiscanf_r+0x50>
 8008aaa:	e7ed      	b.n	8008a88 <__ssvfiscanf_r+0x60>
 8008aac:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008ab0:	f040 8082 	bne.w	8008bb8 <__ssvfiscanf_r+0x190>
 8008ab4:	9343      	str	r3, [sp, #268]	; 0x10c
 8008ab6:	9341      	str	r3, [sp, #260]	; 0x104
 8008ab8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008abc:	2b2a      	cmp	r3, #42	; 0x2a
 8008abe:	d103      	bne.n	8008ac8 <__ssvfiscanf_r+0xa0>
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	9341      	str	r3, [sp, #260]	; 0x104
 8008ac4:	f10a 0502 	add.w	r5, sl, #2
 8008ac8:	46aa      	mov	sl, r5
 8008aca:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008ace:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008ad2:	2a09      	cmp	r2, #9
 8008ad4:	d922      	bls.n	8008b1c <__ssvfiscanf_r+0xf4>
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	4879      	ldr	r0, [pc, #484]	; (8008cc0 <__ssvfiscanf_r+0x298>)
 8008ada:	f7f7 fb81 	bl	80001e0 <memchr>
 8008ade:	b138      	cbz	r0, 8008af0 <__ssvfiscanf_r+0xc8>
 8008ae0:	eba0 0309 	sub.w	r3, r0, r9
 8008ae4:	2001      	movs	r0, #1
 8008ae6:	4098      	lsls	r0, r3
 8008ae8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008aea:	4318      	orrs	r0, r3
 8008aec:	9041      	str	r0, [sp, #260]	; 0x104
 8008aee:	46aa      	mov	sl, r5
 8008af0:	f89a 3000 	ldrb.w	r3, [sl]
 8008af4:	2b67      	cmp	r3, #103	; 0x67
 8008af6:	f10a 0501 	add.w	r5, sl, #1
 8008afa:	d82b      	bhi.n	8008b54 <__ssvfiscanf_r+0x12c>
 8008afc:	2b65      	cmp	r3, #101	; 0x65
 8008afe:	f080 809f 	bcs.w	8008c40 <__ssvfiscanf_r+0x218>
 8008b02:	2b47      	cmp	r3, #71	; 0x47
 8008b04:	d810      	bhi.n	8008b28 <__ssvfiscanf_r+0x100>
 8008b06:	2b45      	cmp	r3, #69	; 0x45
 8008b08:	f080 809a 	bcs.w	8008c40 <__ssvfiscanf_r+0x218>
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d06c      	beq.n	8008bea <__ssvfiscanf_r+0x1c2>
 8008b10:	2b25      	cmp	r3, #37	; 0x25
 8008b12:	d051      	beq.n	8008bb8 <__ssvfiscanf_r+0x190>
 8008b14:	2303      	movs	r3, #3
 8008b16:	9347      	str	r3, [sp, #284]	; 0x11c
 8008b18:	9742      	str	r7, [sp, #264]	; 0x108
 8008b1a:	e027      	b.n	8008b6c <__ssvfiscanf_r+0x144>
 8008b1c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008b1e:	fb07 1303 	mla	r3, r7, r3, r1
 8008b22:	3b30      	subs	r3, #48	; 0x30
 8008b24:	9343      	str	r3, [sp, #268]	; 0x10c
 8008b26:	e7cf      	b.n	8008ac8 <__ssvfiscanf_r+0xa0>
 8008b28:	2b5b      	cmp	r3, #91	; 0x5b
 8008b2a:	d06a      	beq.n	8008c02 <__ssvfiscanf_r+0x1da>
 8008b2c:	d80c      	bhi.n	8008b48 <__ssvfiscanf_r+0x120>
 8008b2e:	2b58      	cmp	r3, #88	; 0x58
 8008b30:	d1f0      	bne.n	8008b14 <__ssvfiscanf_r+0xec>
 8008b32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b38:	9241      	str	r2, [sp, #260]	; 0x104
 8008b3a:	2210      	movs	r2, #16
 8008b3c:	9242      	str	r2, [sp, #264]	; 0x108
 8008b3e:	2b6e      	cmp	r3, #110	; 0x6e
 8008b40:	bf8c      	ite	hi
 8008b42:	2304      	movhi	r3, #4
 8008b44:	2303      	movls	r3, #3
 8008b46:	e010      	b.n	8008b6a <__ssvfiscanf_r+0x142>
 8008b48:	2b63      	cmp	r3, #99	; 0x63
 8008b4a:	d065      	beq.n	8008c18 <__ssvfiscanf_r+0x1f0>
 8008b4c:	2b64      	cmp	r3, #100	; 0x64
 8008b4e:	d1e1      	bne.n	8008b14 <__ssvfiscanf_r+0xec>
 8008b50:	9742      	str	r7, [sp, #264]	; 0x108
 8008b52:	e7f4      	b.n	8008b3e <__ssvfiscanf_r+0x116>
 8008b54:	2b70      	cmp	r3, #112	; 0x70
 8008b56:	d04b      	beq.n	8008bf0 <__ssvfiscanf_r+0x1c8>
 8008b58:	d826      	bhi.n	8008ba8 <__ssvfiscanf_r+0x180>
 8008b5a:	2b6e      	cmp	r3, #110	; 0x6e
 8008b5c:	d062      	beq.n	8008c24 <__ssvfiscanf_r+0x1fc>
 8008b5e:	d84c      	bhi.n	8008bfa <__ssvfiscanf_r+0x1d2>
 8008b60:	2b69      	cmp	r3, #105	; 0x69
 8008b62:	d1d7      	bne.n	8008b14 <__ssvfiscanf_r+0xec>
 8008b64:	2300      	movs	r3, #0
 8008b66:	9342      	str	r3, [sp, #264]	; 0x108
 8008b68:	2303      	movs	r3, #3
 8008b6a:	9347      	str	r3, [sp, #284]	; 0x11c
 8008b6c:	6863      	ldr	r3, [r4, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	dd68      	ble.n	8008c44 <__ssvfiscanf_r+0x21c>
 8008b72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b74:	0659      	lsls	r1, r3, #25
 8008b76:	d407      	bmi.n	8008b88 <__ssvfiscanf_r+0x160>
 8008b78:	f000 fd12 	bl	80095a0 <__locale_ctype_ptr>
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	781a      	ldrb	r2, [r3, #0]
 8008b80:	4410      	add	r0, r2
 8008b82:	7842      	ldrb	r2, [r0, #1]
 8008b84:	0712      	lsls	r2, r2, #28
 8008b86:	d464      	bmi.n	8008c52 <__ssvfiscanf_r+0x22a>
 8008b88:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	dc73      	bgt.n	8008c76 <__ssvfiscanf_r+0x24e>
 8008b8e:	466b      	mov	r3, sp
 8008b90:	4622      	mov	r2, r4
 8008b92:	a941      	add	r1, sp, #260	; 0x104
 8008b94:	4630      	mov	r0, r6
 8008b96:	f000 fa1f 	bl	8008fd8 <_scanf_chars>
 8008b9a:	2801      	cmp	r0, #1
 8008b9c:	f000 8089 	beq.w	8008cb2 <__ssvfiscanf_r+0x28a>
 8008ba0:	2802      	cmp	r0, #2
 8008ba2:	f47f af71 	bne.w	8008a88 <__ssvfiscanf_r+0x60>
 8008ba6:	e01d      	b.n	8008be4 <__ssvfiscanf_r+0x1bc>
 8008ba8:	2b75      	cmp	r3, #117	; 0x75
 8008baa:	d0d1      	beq.n	8008b50 <__ssvfiscanf_r+0x128>
 8008bac:	2b78      	cmp	r3, #120	; 0x78
 8008bae:	d0c0      	beq.n	8008b32 <__ssvfiscanf_r+0x10a>
 8008bb0:	2b73      	cmp	r3, #115	; 0x73
 8008bb2:	d1af      	bne.n	8008b14 <__ssvfiscanf_r+0xec>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	e7d8      	b.n	8008b6a <__ssvfiscanf_r+0x142>
 8008bb8:	6863      	ldr	r3, [r4, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	dd0c      	ble.n	8008bd8 <__ssvfiscanf_r+0x1b0>
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	781a      	ldrb	r2, [r3, #0]
 8008bc2:	455a      	cmp	r2, fp
 8008bc4:	d175      	bne.n	8008cb2 <__ssvfiscanf_r+0x28a>
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	6862      	ldr	r2, [r4, #4]
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008bce:	3a01      	subs	r2, #1
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	6062      	str	r2, [r4, #4]
 8008bd4:	9345      	str	r3, [sp, #276]	; 0x114
 8008bd6:	e757      	b.n	8008a88 <__ssvfiscanf_r+0x60>
 8008bd8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008bda:	4621      	mov	r1, r4
 8008bdc:	4630      	mov	r0, r6
 8008bde:	4798      	blx	r3
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d0ec      	beq.n	8008bbe <__ssvfiscanf_r+0x196>
 8008be4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d159      	bne.n	8008c9e <__ssvfiscanf_r+0x276>
 8008bea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bee:	e05c      	b.n	8008caa <__ssvfiscanf_r+0x282>
 8008bf0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008bf2:	f042 0220 	orr.w	r2, r2, #32
 8008bf6:	9241      	str	r2, [sp, #260]	; 0x104
 8008bf8:	e79b      	b.n	8008b32 <__ssvfiscanf_r+0x10a>
 8008bfa:	2308      	movs	r3, #8
 8008bfc:	9342      	str	r3, [sp, #264]	; 0x108
 8008bfe:	2304      	movs	r3, #4
 8008c00:	e7b3      	b.n	8008b6a <__ssvfiscanf_r+0x142>
 8008c02:	4629      	mov	r1, r5
 8008c04:	4640      	mov	r0, r8
 8008c06:	f000 fb3f 	bl	8009288 <__sccl>
 8008c0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c10:	9341      	str	r3, [sp, #260]	; 0x104
 8008c12:	4605      	mov	r5, r0
 8008c14:	2301      	movs	r3, #1
 8008c16:	e7a8      	b.n	8008b6a <__ssvfiscanf_r+0x142>
 8008c18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1e:	9341      	str	r3, [sp, #260]	; 0x104
 8008c20:	2300      	movs	r3, #0
 8008c22:	e7a2      	b.n	8008b6a <__ssvfiscanf_r+0x142>
 8008c24:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008c26:	06c3      	lsls	r3, r0, #27
 8008c28:	f53f af2e 	bmi.w	8008a88 <__ssvfiscanf_r+0x60>
 8008c2c:	9b00      	ldr	r3, [sp, #0]
 8008c2e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c30:	1d19      	adds	r1, r3, #4
 8008c32:	9100      	str	r1, [sp, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	07c0      	lsls	r0, r0, #31
 8008c38:	bf4c      	ite	mi
 8008c3a:	801a      	strhmi	r2, [r3, #0]
 8008c3c:	601a      	strpl	r2, [r3, #0]
 8008c3e:	e723      	b.n	8008a88 <__ssvfiscanf_r+0x60>
 8008c40:	2305      	movs	r3, #5
 8008c42:	e792      	b.n	8008b6a <__ssvfiscanf_r+0x142>
 8008c44:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c46:	4621      	mov	r1, r4
 8008c48:	4630      	mov	r0, r6
 8008c4a:	4798      	blx	r3
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d090      	beq.n	8008b72 <__ssvfiscanf_r+0x14a>
 8008c50:	e7c8      	b.n	8008be4 <__ssvfiscanf_r+0x1bc>
 8008c52:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c54:	3201      	adds	r2, #1
 8008c56:	9245      	str	r2, [sp, #276]	; 0x114
 8008c58:	6862      	ldr	r2, [r4, #4]
 8008c5a:	3a01      	subs	r2, #1
 8008c5c:	2a00      	cmp	r2, #0
 8008c5e:	6062      	str	r2, [r4, #4]
 8008c60:	dd02      	ble.n	8008c68 <__ssvfiscanf_r+0x240>
 8008c62:	3301      	adds	r3, #1
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	e787      	b.n	8008b78 <__ssvfiscanf_r+0x150>
 8008c68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	4798      	blx	r3
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d081      	beq.n	8008b78 <__ssvfiscanf_r+0x150>
 8008c74:	e7b6      	b.n	8008be4 <__ssvfiscanf_r+0x1bc>
 8008c76:	2b04      	cmp	r3, #4
 8008c78:	dc06      	bgt.n	8008c88 <__ssvfiscanf_r+0x260>
 8008c7a:	466b      	mov	r3, sp
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	a941      	add	r1, sp, #260	; 0x104
 8008c80:	4630      	mov	r0, r6
 8008c82:	f000 fa0d 	bl	80090a0 <_scanf_i>
 8008c86:	e788      	b.n	8008b9a <__ssvfiscanf_r+0x172>
 8008c88:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <__ssvfiscanf_r+0x29c>)
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f43f aefc 	beq.w	8008a88 <__ssvfiscanf_r+0x60>
 8008c90:	466b      	mov	r3, sp
 8008c92:	4622      	mov	r2, r4
 8008c94:	a941      	add	r1, sp, #260	; 0x104
 8008c96:	4630      	mov	r0, r6
 8008c98:	f3af 8000 	nop.w
 8008c9c:	e77d      	b.n	8008b9a <__ssvfiscanf_r+0x172>
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008ca4:	bf18      	it	ne
 8008ca6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008caa:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008cb4:	e7f9      	b.n	8008caa <__ssvfiscanf_r+0x282>
 8008cb6:	bf00      	nop
 8008cb8:	08008975 	.word	0x08008975
 8008cbc:	080089ef 	.word	0x080089ef
 8008cc0:	08009786 	.word	0x08009786
 8008cc4:	00000000 	.word	0x00000000

08008cc8 <_printf_common>:
 8008cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ccc:	4691      	mov	r9, r2
 8008cce:	461f      	mov	r7, r3
 8008cd0:	688a      	ldr	r2, [r1, #8]
 8008cd2:	690b      	ldr	r3, [r1, #16]
 8008cd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	bfb8      	it	lt
 8008cdc:	4613      	movlt	r3, r2
 8008cde:	f8c9 3000 	str.w	r3, [r9]
 8008ce2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	460c      	mov	r4, r1
 8008cea:	b112      	cbz	r2, 8008cf2 <_printf_common+0x2a>
 8008cec:	3301      	adds	r3, #1
 8008cee:	f8c9 3000 	str.w	r3, [r9]
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	0699      	lsls	r1, r3, #26
 8008cf6:	bf42      	ittt	mi
 8008cf8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008cfc:	3302      	addmi	r3, #2
 8008cfe:	f8c9 3000 	strmi.w	r3, [r9]
 8008d02:	6825      	ldr	r5, [r4, #0]
 8008d04:	f015 0506 	ands.w	r5, r5, #6
 8008d08:	d107      	bne.n	8008d1a <_printf_common+0x52>
 8008d0a:	f104 0a19 	add.w	sl, r4, #25
 8008d0e:	68e3      	ldr	r3, [r4, #12]
 8008d10:	f8d9 2000 	ldr.w	r2, [r9]
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	42ab      	cmp	r3, r5
 8008d18:	dc28      	bgt.n	8008d6c <_printf_common+0xa4>
 8008d1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008d1e:	6822      	ldr	r2, [r4, #0]
 8008d20:	3300      	adds	r3, #0
 8008d22:	bf18      	it	ne
 8008d24:	2301      	movne	r3, #1
 8008d26:	0692      	lsls	r2, r2, #26
 8008d28:	d42d      	bmi.n	8008d86 <_printf_common+0xbe>
 8008d2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d2e:	4639      	mov	r1, r7
 8008d30:	4630      	mov	r0, r6
 8008d32:	47c0      	blx	r8
 8008d34:	3001      	adds	r0, #1
 8008d36:	d020      	beq.n	8008d7a <_printf_common+0xb2>
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	68e5      	ldr	r5, [r4, #12]
 8008d3c:	f8d9 2000 	ldr.w	r2, [r9]
 8008d40:	f003 0306 	and.w	r3, r3, #6
 8008d44:	2b04      	cmp	r3, #4
 8008d46:	bf08      	it	eq
 8008d48:	1aad      	subeq	r5, r5, r2
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	6922      	ldr	r2, [r4, #16]
 8008d4e:	bf0c      	ite	eq
 8008d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d54:	2500      	movne	r5, #0
 8008d56:	4293      	cmp	r3, r2
 8008d58:	bfc4      	itt	gt
 8008d5a:	1a9b      	subgt	r3, r3, r2
 8008d5c:	18ed      	addgt	r5, r5, r3
 8008d5e:	f04f 0900 	mov.w	r9, #0
 8008d62:	341a      	adds	r4, #26
 8008d64:	454d      	cmp	r5, r9
 8008d66:	d11a      	bne.n	8008d9e <_printf_common+0xd6>
 8008d68:	2000      	movs	r0, #0
 8008d6a:	e008      	b.n	8008d7e <_printf_common+0xb6>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	4652      	mov	r2, sl
 8008d70:	4639      	mov	r1, r7
 8008d72:	4630      	mov	r0, r6
 8008d74:	47c0      	blx	r8
 8008d76:	3001      	adds	r0, #1
 8008d78:	d103      	bne.n	8008d82 <_printf_common+0xba>
 8008d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d82:	3501      	adds	r5, #1
 8008d84:	e7c3      	b.n	8008d0e <_printf_common+0x46>
 8008d86:	18e1      	adds	r1, r4, r3
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	2030      	movs	r0, #48	; 0x30
 8008d8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d90:	4422      	add	r2, r4
 8008d92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d9a:	3302      	adds	r3, #2
 8008d9c:	e7c5      	b.n	8008d2a <_printf_common+0x62>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	4622      	mov	r2, r4
 8008da2:	4639      	mov	r1, r7
 8008da4:	4630      	mov	r0, r6
 8008da6:	47c0      	blx	r8
 8008da8:	3001      	adds	r0, #1
 8008daa:	d0e6      	beq.n	8008d7a <_printf_common+0xb2>
 8008dac:	f109 0901 	add.w	r9, r9, #1
 8008db0:	e7d8      	b.n	8008d64 <_printf_common+0x9c>
	...

08008db4 <_printf_i>:
 8008db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008db8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	7e09      	ldrb	r1, [r1, #24]
 8008dc0:	b085      	sub	sp, #20
 8008dc2:	296e      	cmp	r1, #110	; 0x6e
 8008dc4:	4617      	mov	r7, r2
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	4698      	mov	r8, r3
 8008dca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dcc:	f000 80b3 	beq.w	8008f36 <_printf_i+0x182>
 8008dd0:	d822      	bhi.n	8008e18 <_printf_i+0x64>
 8008dd2:	2963      	cmp	r1, #99	; 0x63
 8008dd4:	d036      	beq.n	8008e44 <_printf_i+0x90>
 8008dd6:	d80a      	bhi.n	8008dee <_printf_i+0x3a>
 8008dd8:	2900      	cmp	r1, #0
 8008dda:	f000 80b9 	beq.w	8008f50 <_printf_i+0x19c>
 8008dde:	2958      	cmp	r1, #88	; 0x58
 8008de0:	f000 8083 	beq.w	8008eea <_printf_i+0x136>
 8008de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008de8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008dec:	e032      	b.n	8008e54 <_printf_i+0xa0>
 8008dee:	2964      	cmp	r1, #100	; 0x64
 8008df0:	d001      	beq.n	8008df6 <_printf_i+0x42>
 8008df2:	2969      	cmp	r1, #105	; 0x69
 8008df4:	d1f6      	bne.n	8008de4 <_printf_i+0x30>
 8008df6:	6820      	ldr	r0, [r4, #0]
 8008df8:	6813      	ldr	r3, [r2, #0]
 8008dfa:	0605      	lsls	r5, r0, #24
 8008dfc:	f103 0104 	add.w	r1, r3, #4
 8008e00:	d52a      	bpl.n	8008e58 <_printf_i+0xa4>
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6011      	str	r1, [r2, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	da03      	bge.n	8008e12 <_printf_i+0x5e>
 8008e0a:	222d      	movs	r2, #45	; 0x2d
 8008e0c:	425b      	negs	r3, r3
 8008e0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008e12:	486f      	ldr	r0, [pc, #444]	; (8008fd0 <_printf_i+0x21c>)
 8008e14:	220a      	movs	r2, #10
 8008e16:	e039      	b.n	8008e8c <_printf_i+0xd8>
 8008e18:	2973      	cmp	r1, #115	; 0x73
 8008e1a:	f000 809d 	beq.w	8008f58 <_printf_i+0x1a4>
 8008e1e:	d808      	bhi.n	8008e32 <_printf_i+0x7e>
 8008e20:	296f      	cmp	r1, #111	; 0x6f
 8008e22:	d020      	beq.n	8008e66 <_printf_i+0xb2>
 8008e24:	2970      	cmp	r1, #112	; 0x70
 8008e26:	d1dd      	bne.n	8008de4 <_printf_i+0x30>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	f043 0320 	orr.w	r3, r3, #32
 8008e2e:	6023      	str	r3, [r4, #0]
 8008e30:	e003      	b.n	8008e3a <_printf_i+0x86>
 8008e32:	2975      	cmp	r1, #117	; 0x75
 8008e34:	d017      	beq.n	8008e66 <_printf_i+0xb2>
 8008e36:	2978      	cmp	r1, #120	; 0x78
 8008e38:	d1d4      	bne.n	8008de4 <_printf_i+0x30>
 8008e3a:	2378      	movs	r3, #120	; 0x78
 8008e3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e40:	4864      	ldr	r0, [pc, #400]	; (8008fd4 <_printf_i+0x220>)
 8008e42:	e055      	b.n	8008ef0 <_printf_i+0x13c>
 8008e44:	6813      	ldr	r3, [r2, #0]
 8008e46:	1d19      	adds	r1, r3, #4
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6011      	str	r1, [r2, #0]
 8008e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e54:	2301      	movs	r3, #1
 8008e56:	e08c      	b.n	8008f72 <_printf_i+0x1be>
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	6011      	str	r1, [r2, #0]
 8008e5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e60:	bf18      	it	ne
 8008e62:	b21b      	sxthne	r3, r3
 8008e64:	e7cf      	b.n	8008e06 <_printf_i+0x52>
 8008e66:	6813      	ldr	r3, [r2, #0]
 8008e68:	6825      	ldr	r5, [r4, #0]
 8008e6a:	1d18      	adds	r0, r3, #4
 8008e6c:	6010      	str	r0, [r2, #0]
 8008e6e:	0628      	lsls	r0, r5, #24
 8008e70:	d501      	bpl.n	8008e76 <_printf_i+0xc2>
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	e002      	b.n	8008e7c <_printf_i+0xc8>
 8008e76:	0668      	lsls	r0, r5, #25
 8008e78:	d5fb      	bpl.n	8008e72 <_printf_i+0xbe>
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	4854      	ldr	r0, [pc, #336]	; (8008fd0 <_printf_i+0x21c>)
 8008e7e:	296f      	cmp	r1, #111	; 0x6f
 8008e80:	bf14      	ite	ne
 8008e82:	220a      	movne	r2, #10
 8008e84:	2208      	moveq	r2, #8
 8008e86:	2100      	movs	r1, #0
 8008e88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e8c:	6865      	ldr	r5, [r4, #4]
 8008e8e:	60a5      	str	r5, [r4, #8]
 8008e90:	2d00      	cmp	r5, #0
 8008e92:	f2c0 8095 	blt.w	8008fc0 <_printf_i+0x20c>
 8008e96:	6821      	ldr	r1, [r4, #0]
 8008e98:	f021 0104 	bic.w	r1, r1, #4
 8008e9c:	6021      	str	r1, [r4, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d13d      	bne.n	8008f1e <_printf_i+0x16a>
 8008ea2:	2d00      	cmp	r5, #0
 8008ea4:	f040 808e 	bne.w	8008fc4 <_printf_i+0x210>
 8008ea8:	4665      	mov	r5, ip
 8008eaa:	2a08      	cmp	r2, #8
 8008eac:	d10b      	bne.n	8008ec6 <_printf_i+0x112>
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	07db      	lsls	r3, r3, #31
 8008eb2:	d508      	bpl.n	8008ec6 <_printf_i+0x112>
 8008eb4:	6923      	ldr	r3, [r4, #16]
 8008eb6:	6862      	ldr	r2, [r4, #4]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	bfde      	ittt	le
 8008ebc:	2330      	movle	r3, #48	; 0x30
 8008ebe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ec2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008ec6:	ebac 0305 	sub.w	r3, ip, r5
 8008eca:	6123      	str	r3, [r4, #16]
 8008ecc:	f8cd 8000 	str.w	r8, [sp]
 8008ed0:	463b      	mov	r3, r7
 8008ed2:	aa03      	add	r2, sp, #12
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f7ff fef6 	bl	8008cc8 <_printf_common>
 8008edc:	3001      	adds	r0, #1
 8008ede:	d14d      	bne.n	8008f7c <_printf_i+0x1c8>
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ee4:	b005      	add	sp, #20
 8008ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eea:	4839      	ldr	r0, [pc, #228]	; (8008fd0 <_printf_i+0x21c>)
 8008eec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008ef0:	6813      	ldr	r3, [r2, #0]
 8008ef2:	6821      	ldr	r1, [r4, #0]
 8008ef4:	1d1d      	adds	r5, r3, #4
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6015      	str	r5, [r2, #0]
 8008efa:	060a      	lsls	r2, r1, #24
 8008efc:	d50b      	bpl.n	8008f16 <_printf_i+0x162>
 8008efe:	07ca      	lsls	r2, r1, #31
 8008f00:	bf44      	itt	mi
 8008f02:	f041 0120 	orrmi.w	r1, r1, #32
 8008f06:	6021      	strmi	r1, [r4, #0]
 8008f08:	b91b      	cbnz	r3, 8008f12 <_printf_i+0x15e>
 8008f0a:	6822      	ldr	r2, [r4, #0]
 8008f0c:	f022 0220 	bic.w	r2, r2, #32
 8008f10:	6022      	str	r2, [r4, #0]
 8008f12:	2210      	movs	r2, #16
 8008f14:	e7b7      	b.n	8008e86 <_printf_i+0xd2>
 8008f16:	064d      	lsls	r5, r1, #25
 8008f18:	bf48      	it	mi
 8008f1a:	b29b      	uxthmi	r3, r3
 8008f1c:	e7ef      	b.n	8008efe <_printf_i+0x14a>
 8008f1e:	4665      	mov	r5, ip
 8008f20:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f24:	fb02 3311 	mls	r3, r2, r1, r3
 8008f28:	5cc3      	ldrb	r3, [r0, r3]
 8008f2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f2e:	460b      	mov	r3, r1
 8008f30:	2900      	cmp	r1, #0
 8008f32:	d1f5      	bne.n	8008f20 <_printf_i+0x16c>
 8008f34:	e7b9      	b.n	8008eaa <_printf_i+0xf6>
 8008f36:	6813      	ldr	r3, [r2, #0]
 8008f38:	6825      	ldr	r5, [r4, #0]
 8008f3a:	6961      	ldr	r1, [r4, #20]
 8008f3c:	1d18      	adds	r0, r3, #4
 8008f3e:	6010      	str	r0, [r2, #0]
 8008f40:	0628      	lsls	r0, r5, #24
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	d501      	bpl.n	8008f4a <_printf_i+0x196>
 8008f46:	6019      	str	r1, [r3, #0]
 8008f48:	e002      	b.n	8008f50 <_printf_i+0x19c>
 8008f4a:	066a      	lsls	r2, r5, #25
 8008f4c:	d5fb      	bpl.n	8008f46 <_printf_i+0x192>
 8008f4e:	8019      	strh	r1, [r3, #0]
 8008f50:	2300      	movs	r3, #0
 8008f52:	6123      	str	r3, [r4, #16]
 8008f54:	4665      	mov	r5, ip
 8008f56:	e7b9      	b.n	8008ecc <_printf_i+0x118>
 8008f58:	6813      	ldr	r3, [r2, #0]
 8008f5a:	1d19      	adds	r1, r3, #4
 8008f5c:	6011      	str	r1, [r2, #0]
 8008f5e:	681d      	ldr	r5, [r3, #0]
 8008f60:	6862      	ldr	r2, [r4, #4]
 8008f62:	2100      	movs	r1, #0
 8008f64:	4628      	mov	r0, r5
 8008f66:	f7f7 f93b 	bl	80001e0 <memchr>
 8008f6a:	b108      	cbz	r0, 8008f70 <_printf_i+0x1bc>
 8008f6c:	1b40      	subs	r0, r0, r5
 8008f6e:	6060      	str	r0, [r4, #4]
 8008f70:	6863      	ldr	r3, [r4, #4]
 8008f72:	6123      	str	r3, [r4, #16]
 8008f74:	2300      	movs	r3, #0
 8008f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f7a:	e7a7      	b.n	8008ecc <_printf_i+0x118>
 8008f7c:	6923      	ldr	r3, [r4, #16]
 8008f7e:	462a      	mov	r2, r5
 8008f80:	4639      	mov	r1, r7
 8008f82:	4630      	mov	r0, r6
 8008f84:	47c0      	blx	r8
 8008f86:	3001      	adds	r0, #1
 8008f88:	d0aa      	beq.n	8008ee0 <_printf_i+0x12c>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	079b      	lsls	r3, r3, #30
 8008f8e:	d413      	bmi.n	8008fb8 <_printf_i+0x204>
 8008f90:	68e0      	ldr	r0, [r4, #12]
 8008f92:	9b03      	ldr	r3, [sp, #12]
 8008f94:	4298      	cmp	r0, r3
 8008f96:	bfb8      	it	lt
 8008f98:	4618      	movlt	r0, r3
 8008f9a:	e7a3      	b.n	8008ee4 <_printf_i+0x130>
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	464a      	mov	r2, r9
 8008fa0:	4639      	mov	r1, r7
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	47c0      	blx	r8
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	d09a      	beq.n	8008ee0 <_printf_i+0x12c>
 8008faa:	3501      	adds	r5, #1
 8008fac:	68e3      	ldr	r3, [r4, #12]
 8008fae:	9a03      	ldr	r2, [sp, #12]
 8008fb0:	1a9b      	subs	r3, r3, r2
 8008fb2:	42ab      	cmp	r3, r5
 8008fb4:	dcf2      	bgt.n	8008f9c <_printf_i+0x1e8>
 8008fb6:	e7eb      	b.n	8008f90 <_printf_i+0x1dc>
 8008fb8:	2500      	movs	r5, #0
 8008fba:	f104 0919 	add.w	r9, r4, #25
 8008fbe:	e7f5      	b.n	8008fac <_printf_i+0x1f8>
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1ac      	bne.n	8008f1e <_printf_i+0x16a>
 8008fc4:	7803      	ldrb	r3, [r0, #0]
 8008fc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fce:	e76c      	b.n	8008eaa <_printf_i+0xf6>
 8008fd0:	08009791 	.word	0x08009791
 8008fd4:	080097a2 	.word	0x080097a2

08008fd8 <_scanf_chars>:
 8008fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fdc:	4615      	mov	r5, r2
 8008fde:	688a      	ldr	r2, [r1, #8]
 8008fe0:	4680      	mov	r8, r0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	b932      	cbnz	r2, 8008ff4 <_scanf_chars+0x1c>
 8008fe6:	698a      	ldr	r2, [r1, #24]
 8008fe8:	2a00      	cmp	r2, #0
 8008fea:	bf14      	ite	ne
 8008fec:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8008ff0:	2201      	moveq	r2, #1
 8008ff2:	608a      	str	r2, [r1, #8]
 8008ff4:	6822      	ldr	r2, [r4, #0]
 8008ff6:	06d1      	lsls	r1, r2, #27
 8008ff8:	bf5f      	itttt	pl
 8008ffa:	681a      	ldrpl	r2, [r3, #0]
 8008ffc:	1d11      	addpl	r1, r2, #4
 8008ffe:	6019      	strpl	r1, [r3, #0]
 8009000:	6817      	ldrpl	r7, [r2, #0]
 8009002:	2600      	movs	r6, #0
 8009004:	69a3      	ldr	r3, [r4, #24]
 8009006:	b1db      	cbz	r3, 8009040 <_scanf_chars+0x68>
 8009008:	2b01      	cmp	r3, #1
 800900a:	d107      	bne.n	800901c <_scanf_chars+0x44>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	6962      	ldr	r2, [r4, #20]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	5cd3      	ldrb	r3, [r2, r3]
 8009014:	b9a3      	cbnz	r3, 8009040 <_scanf_chars+0x68>
 8009016:	2e00      	cmp	r6, #0
 8009018:	d132      	bne.n	8009080 <_scanf_chars+0xa8>
 800901a:	e006      	b.n	800902a <_scanf_chars+0x52>
 800901c:	2b02      	cmp	r3, #2
 800901e:	d007      	beq.n	8009030 <_scanf_chars+0x58>
 8009020:	2e00      	cmp	r6, #0
 8009022:	d12d      	bne.n	8009080 <_scanf_chars+0xa8>
 8009024:	69a3      	ldr	r3, [r4, #24]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d12a      	bne.n	8009080 <_scanf_chars+0xa8>
 800902a:	2001      	movs	r0, #1
 800902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009030:	f000 fab6 	bl	80095a0 <__locale_ctype_ptr>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	4418      	add	r0, r3
 800903a:	7843      	ldrb	r3, [r0, #1]
 800903c:	071b      	lsls	r3, r3, #28
 800903e:	d4ef      	bmi.n	8009020 <_scanf_chars+0x48>
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	06da      	lsls	r2, r3, #27
 8009044:	bf5e      	ittt	pl
 8009046:	682b      	ldrpl	r3, [r5, #0]
 8009048:	781b      	ldrbpl	r3, [r3, #0]
 800904a:	703b      	strbpl	r3, [r7, #0]
 800904c:	682a      	ldr	r2, [r5, #0]
 800904e:	686b      	ldr	r3, [r5, #4]
 8009050:	f102 0201 	add.w	r2, r2, #1
 8009054:	602a      	str	r2, [r5, #0]
 8009056:	68a2      	ldr	r2, [r4, #8]
 8009058:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800905c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009060:	606b      	str	r3, [r5, #4]
 8009062:	f106 0601 	add.w	r6, r6, #1
 8009066:	bf58      	it	pl
 8009068:	3701      	addpl	r7, #1
 800906a:	60a2      	str	r2, [r4, #8]
 800906c:	b142      	cbz	r2, 8009080 <_scanf_chars+0xa8>
 800906e:	2b00      	cmp	r3, #0
 8009070:	dcc8      	bgt.n	8009004 <_scanf_chars+0x2c>
 8009072:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009076:	4629      	mov	r1, r5
 8009078:	4640      	mov	r0, r8
 800907a:	4798      	blx	r3
 800907c:	2800      	cmp	r0, #0
 800907e:	d0c1      	beq.n	8009004 <_scanf_chars+0x2c>
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	f013 0310 	ands.w	r3, r3, #16
 8009086:	d105      	bne.n	8009094 <_scanf_chars+0xbc>
 8009088:	68e2      	ldr	r2, [r4, #12]
 800908a:	3201      	adds	r2, #1
 800908c:	60e2      	str	r2, [r4, #12]
 800908e:	69a2      	ldr	r2, [r4, #24]
 8009090:	b102      	cbz	r2, 8009094 <_scanf_chars+0xbc>
 8009092:	703b      	strb	r3, [r7, #0]
 8009094:	6923      	ldr	r3, [r4, #16]
 8009096:	441e      	add	r6, r3
 8009098:	6126      	str	r6, [r4, #16]
 800909a:	2000      	movs	r0, #0
 800909c:	e7c6      	b.n	800902c <_scanf_chars+0x54>
	...

080090a0 <_scanf_i>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	469a      	mov	sl, r3
 80090a6:	4b74      	ldr	r3, [pc, #464]	; (8009278 <_scanf_i+0x1d8>)
 80090a8:	460c      	mov	r4, r1
 80090aa:	4683      	mov	fp, r0
 80090ac:	4616      	mov	r6, r2
 80090ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090b2:	b087      	sub	sp, #28
 80090b4:	ab03      	add	r3, sp, #12
 80090b6:	68a7      	ldr	r7, [r4, #8]
 80090b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80090bc:	4b6f      	ldr	r3, [pc, #444]	; (800927c <_scanf_i+0x1dc>)
 80090be:	69a1      	ldr	r1, [r4, #24]
 80090c0:	4a6f      	ldr	r2, [pc, #444]	; (8009280 <_scanf_i+0x1e0>)
 80090c2:	2903      	cmp	r1, #3
 80090c4:	bf08      	it	eq
 80090c6:	461a      	moveq	r2, r3
 80090c8:	1e7b      	subs	r3, r7, #1
 80090ca:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80090ce:	bf84      	itt	hi
 80090d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80090d4:	60a3      	strhi	r3, [r4, #8]
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	9200      	str	r2, [sp, #0]
 80090da:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80090de:	bf88      	it	hi
 80090e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80090e4:	f104 091c 	add.w	r9, r4, #28
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	bf8c      	ite	hi
 80090ec:	197f      	addhi	r7, r7, r5
 80090ee:	2700      	movls	r7, #0
 80090f0:	464b      	mov	r3, r9
 80090f2:	f04f 0800 	mov.w	r8, #0
 80090f6:	9301      	str	r3, [sp, #4]
 80090f8:	6831      	ldr	r1, [r6, #0]
 80090fa:	ab03      	add	r3, sp, #12
 80090fc:	2202      	movs	r2, #2
 80090fe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009102:	7809      	ldrb	r1, [r1, #0]
 8009104:	f7f7 f86c 	bl	80001e0 <memchr>
 8009108:	9b01      	ldr	r3, [sp, #4]
 800910a:	b330      	cbz	r0, 800915a <_scanf_i+0xba>
 800910c:	f1b8 0f01 	cmp.w	r8, #1
 8009110:	d15a      	bne.n	80091c8 <_scanf_i+0x128>
 8009112:	6862      	ldr	r2, [r4, #4]
 8009114:	b92a      	cbnz	r2, 8009122 <_scanf_i+0x82>
 8009116:	6822      	ldr	r2, [r4, #0]
 8009118:	2108      	movs	r1, #8
 800911a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800911e:	6061      	str	r1, [r4, #4]
 8009120:	6022      	str	r2, [r4, #0]
 8009122:	6822      	ldr	r2, [r4, #0]
 8009124:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009128:	6022      	str	r2, [r4, #0]
 800912a:	68a2      	ldr	r2, [r4, #8]
 800912c:	1e51      	subs	r1, r2, #1
 800912e:	60a1      	str	r1, [r4, #8]
 8009130:	b19a      	cbz	r2, 800915a <_scanf_i+0xba>
 8009132:	6832      	ldr	r2, [r6, #0]
 8009134:	1c51      	adds	r1, r2, #1
 8009136:	6031      	str	r1, [r6, #0]
 8009138:	7812      	ldrb	r2, [r2, #0]
 800913a:	701a      	strb	r2, [r3, #0]
 800913c:	1c5d      	adds	r5, r3, #1
 800913e:	6873      	ldr	r3, [r6, #4]
 8009140:	3b01      	subs	r3, #1
 8009142:	2b00      	cmp	r3, #0
 8009144:	6073      	str	r3, [r6, #4]
 8009146:	dc07      	bgt.n	8009158 <_scanf_i+0xb8>
 8009148:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800914c:	4631      	mov	r1, r6
 800914e:	4658      	mov	r0, fp
 8009150:	4798      	blx	r3
 8009152:	2800      	cmp	r0, #0
 8009154:	f040 8086 	bne.w	8009264 <_scanf_i+0x1c4>
 8009158:	462b      	mov	r3, r5
 800915a:	f108 0801 	add.w	r8, r8, #1
 800915e:	f1b8 0f03 	cmp.w	r8, #3
 8009162:	d1c8      	bne.n	80090f6 <_scanf_i+0x56>
 8009164:	6862      	ldr	r2, [r4, #4]
 8009166:	b90a      	cbnz	r2, 800916c <_scanf_i+0xcc>
 8009168:	220a      	movs	r2, #10
 800916a:	6062      	str	r2, [r4, #4]
 800916c:	6862      	ldr	r2, [r4, #4]
 800916e:	4945      	ldr	r1, [pc, #276]	; (8009284 <_scanf_i+0x1e4>)
 8009170:	6960      	ldr	r0, [r4, #20]
 8009172:	9301      	str	r3, [sp, #4]
 8009174:	1a89      	subs	r1, r1, r2
 8009176:	f000 f887 	bl	8009288 <__sccl>
 800917a:	9b01      	ldr	r3, [sp, #4]
 800917c:	f04f 0800 	mov.w	r8, #0
 8009180:	461d      	mov	r5, r3
 8009182:	68a3      	ldr	r3, [r4, #8]
 8009184:	6822      	ldr	r2, [r4, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d03a      	beq.n	8009200 <_scanf_i+0x160>
 800918a:	6831      	ldr	r1, [r6, #0]
 800918c:	6960      	ldr	r0, [r4, #20]
 800918e:	f891 c000 	ldrb.w	ip, [r1]
 8009192:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009196:	2800      	cmp	r0, #0
 8009198:	d032      	beq.n	8009200 <_scanf_i+0x160>
 800919a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800919e:	d121      	bne.n	80091e4 <_scanf_i+0x144>
 80091a0:	0510      	lsls	r0, r2, #20
 80091a2:	d51f      	bpl.n	80091e4 <_scanf_i+0x144>
 80091a4:	f108 0801 	add.w	r8, r8, #1
 80091a8:	b117      	cbz	r7, 80091b0 <_scanf_i+0x110>
 80091aa:	3301      	adds	r3, #1
 80091ac:	3f01      	subs	r7, #1
 80091ae:	60a3      	str	r3, [r4, #8]
 80091b0:	6873      	ldr	r3, [r6, #4]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	6073      	str	r3, [r6, #4]
 80091b8:	dd1b      	ble.n	80091f2 <_scanf_i+0x152>
 80091ba:	6833      	ldr	r3, [r6, #0]
 80091bc:	3301      	adds	r3, #1
 80091be:	6033      	str	r3, [r6, #0]
 80091c0:	68a3      	ldr	r3, [r4, #8]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	60a3      	str	r3, [r4, #8]
 80091c6:	e7dc      	b.n	8009182 <_scanf_i+0xe2>
 80091c8:	f1b8 0f02 	cmp.w	r8, #2
 80091cc:	d1ad      	bne.n	800912a <_scanf_i+0x8a>
 80091ce:	6822      	ldr	r2, [r4, #0]
 80091d0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80091d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80091d8:	d1bf      	bne.n	800915a <_scanf_i+0xba>
 80091da:	2110      	movs	r1, #16
 80091dc:	6061      	str	r1, [r4, #4]
 80091de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091e2:	e7a1      	b.n	8009128 <_scanf_i+0x88>
 80091e4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80091e8:	6022      	str	r2, [r4, #0]
 80091ea:	780b      	ldrb	r3, [r1, #0]
 80091ec:	702b      	strb	r3, [r5, #0]
 80091ee:	3501      	adds	r5, #1
 80091f0:	e7de      	b.n	80091b0 <_scanf_i+0x110>
 80091f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091f6:	4631      	mov	r1, r6
 80091f8:	4658      	mov	r0, fp
 80091fa:	4798      	blx	r3
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d0df      	beq.n	80091c0 <_scanf_i+0x120>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	05d9      	lsls	r1, r3, #23
 8009204:	d50c      	bpl.n	8009220 <_scanf_i+0x180>
 8009206:	454d      	cmp	r5, r9
 8009208:	d908      	bls.n	800921c <_scanf_i+0x17c>
 800920a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800920e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009212:	4632      	mov	r2, r6
 8009214:	4658      	mov	r0, fp
 8009216:	4798      	blx	r3
 8009218:	1e6f      	subs	r7, r5, #1
 800921a:	463d      	mov	r5, r7
 800921c:	454d      	cmp	r5, r9
 800921e:	d029      	beq.n	8009274 <_scanf_i+0x1d4>
 8009220:	6822      	ldr	r2, [r4, #0]
 8009222:	f012 0210 	ands.w	r2, r2, #16
 8009226:	d113      	bne.n	8009250 <_scanf_i+0x1b0>
 8009228:	702a      	strb	r2, [r5, #0]
 800922a:	6863      	ldr	r3, [r4, #4]
 800922c:	9e00      	ldr	r6, [sp, #0]
 800922e:	4649      	mov	r1, r9
 8009230:	4658      	mov	r0, fp
 8009232:	47b0      	blx	r6
 8009234:	f8da 3000 	ldr.w	r3, [sl]
 8009238:	6821      	ldr	r1, [r4, #0]
 800923a:	1d1a      	adds	r2, r3, #4
 800923c:	f8ca 2000 	str.w	r2, [sl]
 8009240:	f011 0f20 	tst.w	r1, #32
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	d010      	beq.n	800926a <_scanf_i+0x1ca>
 8009248:	6018      	str	r0, [r3, #0]
 800924a:	68e3      	ldr	r3, [r4, #12]
 800924c:	3301      	adds	r3, #1
 800924e:	60e3      	str	r3, [r4, #12]
 8009250:	eba5 0509 	sub.w	r5, r5, r9
 8009254:	44a8      	add	r8, r5
 8009256:	6925      	ldr	r5, [r4, #16]
 8009258:	4445      	add	r5, r8
 800925a:	6125      	str	r5, [r4, #16]
 800925c:	2000      	movs	r0, #0
 800925e:	b007      	add	sp, #28
 8009260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009264:	f04f 0800 	mov.w	r8, #0
 8009268:	e7ca      	b.n	8009200 <_scanf_i+0x160>
 800926a:	07ca      	lsls	r2, r1, #31
 800926c:	bf4c      	ite	mi
 800926e:	8018      	strhmi	r0, [r3, #0]
 8009270:	6018      	strpl	r0, [r3, #0]
 8009272:	e7ea      	b.n	800924a <_scanf_i+0x1aa>
 8009274:	2001      	movs	r0, #1
 8009276:	e7f2      	b.n	800925e <_scanf_i+0x1be>
 8009278:	0800975c 	.word	0x0800975c
 800927c:	080093e9 	.word	0x080093e9
 8009280:	08009501 	.word	0x08009501
 8009284:	080097c3 	.word	0x080097c3

08009288 <__sccl>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	780b      	ldrb	r3, [r1, #0]
 800928c:	2b5e      	cmp	r3, #94	; 0x5e
 800928e:	bf13      	iteet	ne
 8009290:	1c4a      	addne	r2, r1, #1
 8009292:	1c8a      	addeq	r2, r1, #2
 8009294:	784b      	ldrbeq	r3, [r1, #1]
 8009296:	2100      	movne	r1, #0
 8009298:	bf08      	it	eq
 800929a:	2101      	moveq	r1, #1
 800929c:	1e44      	subs	r4, r0, #1
 800929e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80092a2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80092a6:	42ac      	cmp	r4, r5
 80092a8:	d1fb      	bne.n	80092a2 <__sccl+0x1a>
 80092aa:	b913      	cbnz	r3, 80092b2 <__sccl+0x2a>
 80092ac:	3a01      	subs	r2, #1
 80092ae:	4610      	mov	r0, r2
 80092b0:	bd70      	pop	{r4, r5, r6, pc}
 80092b2:	f081 0401 	eor.w	r4, r1, #1
 80092b6:	54c4      	strb	r4, [r0, r3]
 80092b8:	1c51      	adds	r1, r2, #1
 80092ba:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80092be:	2d2d      	cmp	r5, #45	; 0x2d
 80092c0:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 80092c4:	460a      	mov	r2, r1
 80092c6:	d006      	beq.n	80092d6 <__sccl+0x4e>
 80092c8:	2d5d      	cmp	r5, #93	; 0x5d
 80092ca:	d0f0      	beq.n	80092ae <__sccl+0x26>
 80092cc:	b90d      	cbnz	r5, 80092d2 <__sccl+0x4a>
 80092ce:	4632      	mov	r2, r6
 80092d0:	e7ed      	b.n	80092ae <__sccl+0x26>
 80092d2:	462b      	mov	r3, r5
 80092d4:	e7ef      	b.n	80092b6 <__sccl+0x2e>
 80092d6:	780e      	ldrb	r6, [r1, #0]
 80092d8:	2e5d      	cmp	r6, #93	; 0x5d
 80092da:	d0fa      	beq.n	80092d2 <__sccl+0x4a>
 80092dc:	42b3      	cmp	r3, r6
 80092de:	dcf8      	bgt.n	80092d2 <__sccl+0x4a>
 80092e0:	3301      	adds	r3, #1
 80092e2:	429e      	cmp	r6, r3
 80092e4:	54c4      	strb	r4, [r0, r3]
 80092e6:	dcfb      	bgt.n	80092e0 <__sccl+0x58>
 80092e8:	3102      	adds	r1, #2
 80092ea:	e7e6      	b.n	80092ba <__sccl+0x32>

080092ec <__seofread>:
 80092ec:	2000      	movs	r0, #0
 80092ee:	4770      	bx	lr

080092f0 <_strtol_l.isra.0>:
 80092f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f4:	4680      	mov	r8, r0
 80092f6:	4689      	mov	r9, r1
 80092f8:	4692      	mov	sl, r2
 80092fa:	461e      	mov	r6, r3
 80092fc:	460f      	mov	r7, r1
 80092fe:	463d      	mov	r5, r7
 8009300:	9808      	ldr	r0, [sp, #32]
 8009302:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009306:	f000 f947 	bl	8009598 <__locale_ctype_ptr_l>
 800930a:	4420      	add	r0, r4
 800930c:	7843      	ldrb	r3, [r0, #1]
 800930e:	f013 0308 	ands.w	r3, r3, #8
 8009312:	d132      	bne.n	800937a <_strtol_l.isra.0+0x8a>
 8009314:	2c2d      	cmp	r4, #45	; 0x2d
 8009316:	d132      	bne.n	800937e <_strtol_l.isra.0+0x8e>
 8009318:	787c      	ldrb	r4, [r7, #1]
 800931a:	1cbd      	adds	r5, r7, #2
 800931c:	2201      	movs	r2, #1
 800931e:	2e00      	cmp	r6, #0
 8009320:	d05d      	beq.n	80093de <_strtol_l.isra.0+0xee>
 8009322:	2e10      	cmp	r6, #16
 8009324:	d109      	bne.n	800933a <_strtol_l.isra.0+0x4a>
 8009326:	2c30      	cmp	r4, #48	; 0x30
 8009328:	d107      	bne.n	800933a <_strtol_l.isra.0+0x4a>
 800932a:	782b      	ldrb	r3, [r5, #0]
 800932c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009330:	2b58      	cmp	r3, #88	; 0x58
 8009332:	d14f      	bne.n	80093d4 <_strtol_l.isra.0+0xe4>
 8009334:	786c      	ldrb	r4, [r5, #1]
 8009336:	2610      	movs	r6, #16
 8009338:	3502      	adds	r5, #2
 800933a:	2a00      	cmp	r2, #0
 800933c:	bf14      	ite	ne
 800933e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009342:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009346:	2700      	movs	r7, #0
 8009348:	fbb1 fcf6 	udiv	ip, r1, r6
 800934c:	4638      	mov	r0, r7
 800934e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009352:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009356:	2b09      	cmp	r3, #9
 8009358:	d817      	bhi.n	800938a <_strtol_l.isra.0+0x9a>
 800935a:	461c      	mov	r4, r3
 800935c:	42a6      	cmp	r6, r4
 800935e:	dd23      	ble.n	80093a8 <_strtol_l.isra.0+0xb8>
 8009360:	1c7b      	adds	r3, r7, #1
 8009362:	d007      	beq.n	8009374 <_strtol_l.isra.0+0x84>
 8009364:	4584      	cmp	ip, r0
 8009366:	d31c      	bcc.n	80093a2 <_strtol_l.isra.0+0xb2>
 8009368:	d101      	bne.n	800936e <_strtol_l.isra.0+0x7e>
 800936a:	45a6      	cmp	lr, r4
 800936c:	db19      	blt.n	80093a2 <_strtol_l.isra.0+0xb2>
 800936e:	fb00 4006 	mla	r0, r0, r6, r4
 8009372:	2701      	movs	r7, #1
 8009374:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009378:	e7eb      	b.n	8009352 <_strtol_l.isra.0+0x62>
 800937a:	462f      	mov	r7, r5
 800937c:	e7bf      	b.n	80092fe <_strtol_l.isra.0+0xe>
 800937e:	2c2b      	cmp	r4, #43	; 0x2b
 8009380:	bf04      	itt	eq
 8009382:	1cbd      	addeq	r5, r7, #2
 8009384:	787c      	ldrbeq	r4, [r7, #1]
 8009386:	461a      	mov	r2, r3
 8009388:	e7c9      	b.n	800931e <_strtol_l.isra.0+0x2e>
 800938a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800938e:	2b19      	cmp	r3, #25
 8009390:	d801      	bhi.n	8009396 <_strtol_l.isra.0+0xa6>
 8009392:	3c37      	subs	r4, #55	; 0x37
 8009394:	e7e2      	b.n	800935c <_strtol_l.isra.0+0x6c>
 8009396:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800939a:	2b19      	cmp	r3, #25
 800939c:	d804      	bhi.n	80093a8 <_strtol_l.isra.0+0xb8>
 800939e:	3c57      	subs	r4, #87	; 0x57
 80093a0:	e7dc      	b.n	800935c <_strtol_l.isra.0+0x6c>
 80093a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80093a6:	e7e5      	b.n	8009374 <_strtol_l.isra.0+0x84>
 80093a8:	1c7b      	adds	r3, r7, #1
 80093aa:	d108      	bne.n	80093be <_strtol_l.isra.0+0xce>
 80093ac:	2322      	movs	r3, #34	; 0x22
 80093ae:	f8c8 3000 	str.w	r3, [r8]
 80093b2:	4608      	mov	r0, r1
 80093b4:	f1ba 0f00 	cmp.w	sl, #0
 80093b8:	d107      	bne.n	80093ca <_strtol_l.isra.0+0xda>
 80093ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093be:	b102      	cbz	r2, 80093c2 <_strtol_l.isra.0+0xd2>
 80093c0:	4240      	negs	r0, r0
 80093c2:	f1ba 0f00 	cmp.w	sl, #0
 80093c6:	d0f8      	beq.n	80093ba <_strtol_l.isra.0+0xca>
 80093c8:	b10f      	cbz	r7, 80093ce <_strtol_l.isra.0+0xde>
 80093ca:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80093ce:	f8ca 9000 	str.w	r9, [sl]
 80093d2:	e7f2      	b.n	80093ba <_strtol_l.isra.0+0xca>
 80093d4:	2430      	movs	r4, #48	; 0x30
 80093d6:	2e00      	cmp	r6, #0
 80093d8:	d1af      	bne.n	800933a <_strtol_l.isra.0+0x4a>
 80093da:	2608      	movs	r6, #8
 80093dc:	e7ad      	b.n	800933a <_strtol_l.isra.0+0x4a>
 80093de:	2c30      	cmp	r4, #48	; 0x30
 80093e0:	d0a3      	beq.n	800932a <_strtol_l.isra.0+0x3a>
 80093e2:	260a      	movs	r6, #10
 80093e4:	e7a9      	b.n	800933a <_strtol_l.isra.0+0x4a>
	...

080093e8 <_strtol_r>:
 80093e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093ea:	4c06      	ldr	r4, [pc, #24]	; (8009404 <_strtol_r+0x1c>)
 80093ec:	4d06      	ldr	r5, [pc, #24]	; (8009408 <_strtol_r+0x20>)
 80093ee:	6824      	ldr	r4, [r4, #0]
 80093f0:	6a24      	ldr	r4, [r4, #32]
 80093f2:	2c00      	cmp	r4, #0
 80093f4:	bf08      	it	eq
 80093f6:	462c      	moveq	r4, r5
 80093f8:	9400      	str	r4, [sp, #0]
 80093fa:	f7ff ff79 	bl	80092f0 <_strtol_l.isra.0>
 80093fe:	b003      	add	sp, #12
 8009400:	bd30      	pop	{r4, r5, pc}
 8009402:	bf00      	nop
 8009404:	20000180 	.word	0x20000180
 8009408:	200001e4 	.word	0x200001e4

0800940c <_strtoul_l.isra.0>:
 800940c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009410:	4680      	mov	r8, r0
 8009412:	4689      	mov	r9, r1
 8009414:	4692      	mov	sl, r2
 8009416:	461e      	mov	r6, r3
 8009418:	460f      	mov	r7, r1
 800941a:	463d      	mov	r5, r7
 800941c:	9808      	ldr	r0, [sp, #32]
 800941e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009422:	f000 f8b9 	bl	8009598 <__locale_ctype_ptr_l>
 8009426:	4420      	add	r0, r4
 8009428:	7843      	ldrb	r3, [r0, #1]
 800942a:	f013 0308 	ands.w	r3, r3, #8
 800942e:	d130      	bne.n	8009492 <_strtoul_l.isra.0+0x86>
 8009430:	2c2d      	cmp	r4, #45	; 0x2d
 8009432:	d130      	bne.n	8009496 <_strtoul_l.isra.0+0x8a>
 8009434:	787c      	ldrb	r4, [r7, #1]
 8009436:	1cbd      	adds	r5, r7, #2
 8009438:	2101      	movs	r1, #1
 800943a:	2e00      	cmp	r6, #0
 800943c:	d05c      	beq.n	80094f8 <_strtoul_l.isra.0+0xec>
 800943e:	2e10      	cmp	r6, #16
 8009440:	d109      	bne.n	8009456 <_strtoul_l.isra.0+0x4a>
 8009442:	2c30      	cmp	r4, #48	; 0x30
 8009444:	d107      	bne.n	8009456 <_strtoul_l.isra.0+0x4a>
 8009446:	782b      	ldrb	r3, [r5, #0]
 8009448:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800944c:	2b58      	cmp	r3, #88	; 0x58
 800944e:	d14e      	bne.n	80094ee <_strtoul_l.isra.0+0xe2>
 8009450:	786c      	ldrb	r4, [r5, #1]
 8009452:	2610      	movs	r6, #16
 8009454:	3502      	adds	r5, #2
 8009456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800945a:	2300      	movs	r3, #0
 800945c:	fbb2 f2f6 	udiv	r2, r2, r6
 8009460:	fb06 fc02 	mul.w	ip, r6, r2
 8009464:	ea6f 0c0c 	mvn.w	ip, ip
 8009468:	4618      	mov	r0, r3
 800946a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800946e:	2f09      	cmp	r7, #9
 8009470:	d817      	bhi.n	80094a2 <_strtoul_l.isra.0+0x96>
 8009472:	463c      	mov	r4, r7
 8009474:	42a6      	cmp	r6, r4
 8009476:	dd23      	ble.n	80094c0 <_strtoul_l.isra.0+0xb4>
 8009478:	2b00      	cmp	r3, #0
 800947a:	db1e      	blt.n	80094ba <_strtoul_l.isra.0+0xae>
 800947c:	4282      	cmp	r2, r0
 800947e:	d31c      	bcc.n	80094ba <_strtoul_l.isra.0+0xae>
 8009480:	d101      	bne.n	8009486 <_strtoul_l.isra.0+0x7a>
 8009482:	45a4      	cmp	ip, r4
 8009484:	db19      	blt.n	80094ba <_strtoul_l.isra.0+0xae>
 8009486:	fb00 4006 	mla	r0, r0, r6, r4
 800948a:	2301      	movs	r3, #1
 800948c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009490:	e7eb      	b.n	800946a <_strtoul_l.isra.0+0x5e>
 8009492:	462f      	mov	r7, r5
 8009494:	e7c1      	b.n	800941a <_strtoul_l.isra.0+0xe>
 8009496:	2c2b      	cmp	r4, #43	; 0x2b
 8009498:	bf04      	itt	eq
 800949a:	1cbd      	addeq	r5, r7, #2
 800949c:	787c      	ldrbeq	r4, [r7, #1]
 800949e:	4619      	mov	r1, r3
 80094a0:	e7cb      	b.n	800943a <_strtoul_l.isra.0+0x2e>
 80094a2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80094a6:	2f19      	cmp	r7, #25
 80094a8:	d801      	bhi.n	80094ae <_strtoul_l.isra.0+0xa2>
 80094aa:	3c37      	subs	r4, #55	; 0x37
 80094ac:	e7e2      	b.n	8009474 <_strtoul_l.isra.0+0x68>
 80094ae:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80094b2:	2f19      	cmp	r7, #25
 80094b4:	d804      	bhi.n	80094c0 <_strtoul_l.isra.0+0xb4>
 80094b6:	3c57      	subs	r4, #87	; 0x57
 80094b8:	e7dc      	b.n	8009474 <_strtoul_l.isra.0+0x68>
 80094ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094be:	e7e5      	b.n	800948c <_strtoul_l.isra.0+0x80>
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	da09      	bge.n	80094d8 <_strtoul_l.isra.0+0xcc>
 80094c4:	2322      	movs	r3, #34	; 0x22
 80094c6:	f8c8 3000 	str.w	r3, [r8]
 80094ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ce:	f1ba 0f00 	cmp.w	sl, #0
 80094d2:	d107      	bne.n	80094e4 <_strtoul_l.isra.0+0xd8>
 80094d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d8:	b101      	cbz	r1, 80094dc <_strtoul_l.isra.0+0xd0>
 80094da:	4240      	negs	r0, r0
 80094dc:	f1ba 0f00 	cmp.w	sl, #0
 80094e0:	d0f8      	beq.n	80094d4 <_strtoul_l.isra.0+0xc8>
 80094e2:	b10b      	cbz	r3, 80094e8 <_strtoul_l.isra.0+0xdc>
 80094e4:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80094e8:	f8ca 9000 	str.w	r9, [sl]
 80094ec:	e7f2      	b.n	80094d4 <_strtoul_l.isra.0+0xc8>
 80094ee:	2430      	movs	r4, #48	; 0x30
 80094f0:	2e00      	cmp	r6, #0
 80094f2:	d1b0      	bne.n	8009456 <_strtoul_l.isra.0+0x4a>
 80094f4:	2608      	movs	r6, #8
 80094f6:	e7ae      	b.n	8009456 <_strtoul_l.isra.0+0x4a>
 80094f8:	2c30      	cmp	r4, #48	; 0x30
 80094fa:	d0a4      	beq.n	8009446 <_strtoul_l.isra.0+0x3a>
 80094fc:	260a      	movs	r6, #10
 80094fe:	e7aa      	b.n	8009456 <_strtoul_l.isra.0+0x4a>

08009500 <_strtoul_r>:
 8009500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009502:	4c06      	ldr	r4, [pc, #24]	; (800951c <_strtoul_r+0x1c>)
 8009504:	4d06      	ldr	r5, [pc, #24]	; (8009520 <_strtoul_r+0x20>)
 8009506:	6824      	ldr	r4, [r4, #0]
 8009508:	6a24      	ldr	r4, [r4, #32]
 800950a:	2c00      	cmp	r4, #0
 800950c:	bf08      	it	eq
 800950e:	462c      	moveq	r4, r5
 8009510:	9400      	str	r4, [sp, #0]
 8009512:	f7ff ff7b 	bl	800940c <_strtoul_l.isra.0>
 8009516:	b003      	add	sp, #12
 8009518:	bd30      	pop	{r4, r5, pc}
 800951a:	bf00      	nop
 800951c:	20000180 	.word	0x20000180
 8009520:	200001e4 	.word	0x200001e4

08009524 <__submore>:
 8009524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009528:	460c      	mov	r4, r1
 800952a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800952c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009530:	4299      	cmp	r1, r3
 8009532:	d11d      	bne.n	8009570 <__submore+0x4c>
 8009534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009538:	f7ff f810 	bl	800855c <_malloc_r>
 800953c:	b918      	cbnz	r0, 8009546 <__submore+0x22>
 800953e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800954a:	63a3      	str	r3, [r4, #56]	; 0x38
 800954c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009550:	6360      	str	r0, [r4, #52]	; 0x34
 8009552:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009556:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800955a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800955e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009562:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009566:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800956a:	6020      	str	r0, [r4, #0]
 800956c:	2000      	movs	r0, #0
 800956e:	e7e8      	b.n	8009542 <__submore+0x1e>
 8009570:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009572:	0077      	lsls	r7, r6, #1
 8009574:	463a      	mov	r2, r7
 8009576:	f000 f84c 	bl	8009612 <_realloc_r>
 800957a:	4605      	mov	r5, r0
 800957c:	2800      	cmp	r0, #0
 800957e:	d0de      	beq.n	800953e <__submore+0x1a>
 8009580:	eb00 0806 	add.w	r8, r0, r6
 8009584:	4601      	mov	r1, r0
 8009586:	4632      	mov	r2, r6
 8009588:	4640      	mov	r0, r8
 800958a:	f7fe ff85 	bl	8008498 <memcpy>
 800958e:	f8c4 8000 	str.w	r8, [r4]
 8009592:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009596:	e7e9      	b.n	800956c <__submore+0x48>

08009598 <__locale_ctype_ptr_l>:
 8009598:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800959c:	4770      	bx	lr
	...

080095a0 <__locale_ctype_ptr>:
 80095a0:	4b04      	ldr	r3, [pc, #16]	; (80095b4 <__locale_ctype_ptr+0x14>)
 80095a2:	4a05      	ldr	r2, [pc, #20]	; (80095b8 <__locale_ctype_ptr+0x18>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	bf08      	it	eq
 80095ac:	4613      	moveq	r3, r2
 80095ae:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80095b2:	4770      	bx	lr
 80095b4:	20000180 	.word	0x20000180
 80095b8:	200001e4 	.word	0x200001e4

080095bc <__ascii_mbtowc>:
 80095bc:	b082      	sub	sp, #8
 80095be:	b901      	cbnz	r1, 80095c2 <__ascii_mbtowc+0x6>
 80095c0:	a901      	add	r1, sp, #4
 80095c2:	b142      	cbz	r2, 80095d6 <__ascii_mbtowc+0x1a>
 80095c4:	b14b      	cbz	r3, 80095da <__ascii_mbtowc+0x1e>
 80095c6:	7813      	ldrb	r3, [r2, #0]
 80095c8:	600b      	str	r3, [r1, #0]
 80095ca:	7812      	ldrb	r2, [r2, #0]
 80095cc:	1c10      	adds	r0, r2, #0
 80095ce:	bf18      	it	ne
 80095d0:	2001      	movne	r0, #1
 80095d2:	b002      	add	sp, #8
 80095d4:	4770      	bx	lr
 80095d6:	4610      	mov	r0, r2
 80095d8:	e7fb      	b.n	80095d2 <__ascii_mbtowc+0x16>
 80095da:	f06f 0001 	mvn.w	r0, #1
 80095de:	e7f8      	b.n	80095d2 <__ascii_mbtowc+0x16>

080095e0 <memmove>:
 80095e0:	4288      	cmp	r0, r1
 80095e2:	b510      	push	{r4, lr}
 80095e4:	eb01 0302 	add.w	r3, r1, r2
 80095e8:	d807      	bhi.n	80095fa <memmove+0x1a>
 80095ea:	1e42      	subs	r2, r0, #1
 80095ec:	4299      	cmp	r1, r3
 80095ee:	d00a      	beq.n	8009606 <memmove+0x26>
 80095f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80095f8:	e7f8      	b.n	80095ec <memmove+0xc>
 80095fa:	4283      	cmp	r3, r0
 80095fc:	d9f5      	bls.n	80095ea <memmove+0xa>
 80095fe:	1881      	adds	r1, r0, r2
 8009600:	1ad2      	subs	r2, r2, r3
 8009602:	42d3      	cmn	r3, r2
 8009604:	d100      	bne.n	8009608 <memmove+0x28>
 8009606:	bd10      	pop	{r4, pc}
 8009608:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800960c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009610:	e7f7      	b.n	8009602 <memmove+0x22>

08009612 <_realloc_r>:
 8009612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009614:	4607      	mov	r7, r0
 8009616:	4614      	mov	r4, r2
 8009618:	460e      	mov	r6, r1
 800961a:	b921      	cbnz	r1, 8009626 <_realloc_r+0x14>
 800961c:	4611      	mov	r1, r2
 800961e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009622:	f7fe bf9b 	b.w	800855c <_malloc_r>
 8009626:	b922      	cbnz	r2, 8009632 <_realloc_r+0x20>
 8009628:	f7fe ff4a 	bl	80084c0 <_free_r>
 800962c:	4625      	mov	r5, r4
 800962e:	4628      	mov	r0, r5
 8009630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009632:	f000 f821 	bl	8009678 <_malloc_usable_size_r>
 8009636:	42a0      	cmp	r0, r4
 8009638:	d20f      	bcs.n	800965a <_realloc_r+0x48>
 800963a:	4621      	mov	r1, r4
 800963c:	4638      	mov	r0, r7
 800963e:	f7fe ff8d 	bl	800855c <_malloc_r>
 8009642:	4605      	mov	r5, r0
 8009644:	2800      	cmp	r0, #0
 8009646:	d0f2      	beq.n	800962e <_realloc_r+0x1c>
 8009648:	4631      	mov	r1, r6
 800964a:	4622      	mov	r2, r4
 800964c:	f7fe ff24 	bl	8008498 <memcpy>
 8009650:	4631      	mov	r1, r6
 8009652:	4638      	mov	r0, r7
 8009654:	f7fe ff34 	bl	80084c0 <_free_r>
 8009658:	e7e9      	b.n	800962e <_realloc_r+0x1c>
 800965a:	4635      	mov	r5, r6
 800965c:	e7e7      	b.n	800962e <_realloc_r+0x1c>

0800965e <__ascii_wctomb>:
 800965e:	b149      	cbz	r1, 8009674 <__ascii_wctomb+0x16>
 8009660:	2aff      	cmp	r2, #255	; 0xff
 8009662:	bf85      	ittet	hi
 8009664:	238a      	movhi	r3, #138	; 0x8a
 8009666:	6003      	strhi	r3, [r0, #0]
 8009668:	700a      	strbls	r2, [r1, #0]
 800966a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800966e:	bf98      	it	ls
 8009670:	2001      	movls	r0, #1
 8009672:	4770      	bx	lr
 8009674:	4608      	mov	r0, r1
 8009676:	4770      	bx	lr

08009678 <_malloc_usable_size_r>:
 8009678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800967c:	1f18      	subs	r0, r3, #4
 800967e:	2b00      	cmp	r3, #0
 8009680:	bfbc      	itt	lt
 8009682:	580b      	ldrlt	r3, [r1, r0]
 8009684:	18c0      	addlt	r0, r0, r3
 8009686:	4770      	bx	lr

08009688 <_init>:
 8009688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968a:	bf00      	nop
 800968c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968e:	bc08      	pop	{r3}
 8009690:	469e      	mov	lr, r3
 8009692:	4770      	bx	lr

08009694 <_fini>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	bf00      	nop
 8009698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969a:	bc08      	pop	{r3}
 800969c:	469e      	mov	lr, r3
 800969e:	4770      	bx	lr
