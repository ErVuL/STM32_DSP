
STM32_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ca0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08009e30  08009e30  00019e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2e0  0800a2e0  00020358  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2e0  0800a2e0  0001a2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2e8  0800a2e8  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2e8  0800a2e8  0001a2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2ec  0800a2ec  0001a2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800a2f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010c8c  20000358  0800a648  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010fe4  0800a648  00020fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017956  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037f7  00000000  00000000  00037cde  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e78  00000000  00000000  0003b4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce0  00000000  00000000  0003c350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000244e9  00000000  00000000  0003d030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101af  00000000  00000000  00061519  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c777b  00000000  00000000  000716c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138e43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b8  00000000  00000000  00138ec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000358 	.word	0x20000358
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e18 	.word	0x08009e18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000035c 	.word	0x2000035c
 80001cc:	08009e18 	.word	0x08009e18

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	f5ad 4d81 	sub.w	sp, sp, #16512	; 0x4080
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t Task = WAIT;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80005b0:	f102 0207 	add.w	r2, r2, #7
 80005b4:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fe61 	bl	800127c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f919 	bl	80007f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 fa47 	bl	8000a50 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c2:	f000 f9db 	bl	800097c <MX_DMA_Init>
  MX_I2S2_Init();
 80005c6:	f000 f9a9 	bl	800091c <MX_I2S2_Init>
  MX_USB_DEVICE_Init();
 80005ca:	f007 faa5 	bl	8007b18 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80005ce:	f000 f991 	bl	80008f4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	char cmd[APP_RX_DATA_SIZE];
	HAL_Delay(1500);
 80005d2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005d6:	f000 fec3 	bl	8001360 <HAL_Delay>
	CDC_Clear();
 80005da:	f007 fe4b 	bl	8008274 <CDC_Clear>
	_printf("\r\n               ================");
 80005de:	486e      	ldr	r0, [pc, #440]	; (8000798 <main+0x1f8>)
 80005e0:	f007 fce4 	bl	8007fac <_printf>
	_printf("\r\n               *** DSP V1.0 ***");
 80005e4:	486d      	ldr	r0, [pc, #436]	; (800079c <main+0x1fc>)
 80005e6:	f007 fce1 	bl	8007fac <_printf>
	_printf("\r\n               ================\r\n\n");
 80005ea:	486d      	ldr	r0, [pc, #436]	; (80007a0 <main+0x200>)
 80005ec:	f007 fcde 	bl	8007fac <_printf>
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET)
 80005f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f4:	486b      	ldr	r0, [pc, #428]	; (80007a4 <main+0x204>)
 80005f6:	f001 fd0b 	bl	8002010 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d103      	bne.n	8000608 <main+0x68>
	{	_cprintf("/!\\ ERROR : Hardware initialization problem !\r\n");
 8000600:	4869      	ldr	r0, [pc, #420]	; (80007a8 <main+0x208>)
 8000602:	f007 fcff 	bl	8008004 <_cprintf>
 8000606:	e002      	b.n	800060e <main+0x6e>
	}else
	{	_cprintf("Hardware initialization done\r\n");
 8000608:	4868      	ldr	r0, [pc, #416]	; (80007ac <main+0x20c>)
 800060a:	f007 fcfb 	bl	8008004 <_cprintf>
	}

	/* Start I2S communiation */
	if(HAL_I2SEx_TransmitReceive_DMA(&hi2s2, I2S2_txBuf, I2S2_rxBuf, I2S2_BUFLEN / 2) != HAL_OK)
 800060e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000612:	4a67      	ldr	r2, [pc, #412]	; (80007b0 <main+0x210>)
 8000614:	4967      	ldr	r1, [pc, #412]	; (80007b4 <main+0x214>)
 8000616:	4868      	ldr	r0, [pc, #416]	; (80007b8 <main+0x218>)
 8000618:	f001 ff8c 	bl	8002534 <HAL_I2SEx_TransmitReceive_DMA>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d003      	beq.n	800062a <main+0x8a>
	{	_cprintf("/!\\ ERROR : Unable to launch I2S DMA transfer !\r\n");
 8000622:	4866      	ldr	r0, [pc, #408]	; (80007bc <main+0x21c>)
 8000624:	f007 fcee 	bl	8008004 <_cprintf>
 8000628:	e002      	b.n	8000630 <main+0x90>
	}else
	{	_cprintf("I2S communication established\r\n");
 800062a:	4865      	ldr	r0, [pc, #404]	; (80007c0 <main+0x220>)
 800062c:	f007 fcea 	bl	8008004 <_cprintf>
	}

	/* Set serial interface to keyboard input mode */
	CDC_rxPrintf_ON();
 8000630:	f007 fe4a 	bl	80082c8 <CDC_rxPrintf_ON>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/* If command available from COM port */
		if (CDC_RX_DATA_PENDING)
 8000634:	4b63      	ldr	r3, [pc, #396]	; (80007c4 <main+0x224>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d064      	beq.n	8000708 <main+0x168>
		{
			/* Read command */
			_scanf("%s", cmd);
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	3b04      	subs	r3, #4
 8000644:	4619      	mov	r1, r3
 8000646:	4860      	ldr	r0, [pc, #384]	; (80007c8 <main+0x228>)
 8000648:	f007 fd68 	bl	800811c <_scanf>
			CDC_RX_DATA_PENDING = FALSE;
 800064c:	4b5d      	ldr	r3, [pc, #372]	; (80007c4 <main+0x224>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]

			/* Execute command */
			if (!strcmp(cmd, "clear"))
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	3b04      	subs	r3, #4
 8000658:	495c      	ldr	r1, [pc, #368]	; (80007cc <main+0x22c>)
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fdb8 	bl	80001d0 <strcmp>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d102      	bne.n	800066c <main+0xcc>
			{	CDC_Clear();
 8000666:	f007 fe05 	bl	8008274 <CDC_Clear>
 800066a:	e04d      	b.n	8000708 <main+0x168>
			}
			else if((!strcmp(cmd, "q") || !strcmp(cmd, "Q")) && Task != WAIT)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	3b04      	subs	r3, #4
 8000672:	4957      	ldr	r1, [pc, #348]	; (80007d0 <main+0x230>)
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fdab 	bl	80001d0 <strcmp>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d009      	beq.n	8000694 <main+0xf4>
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	3b04      	subs	r3, #4
 8000686:	4953      	ldr	r1, [pc, #332]	; (80007d4 <main+0x234>)
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fda1 	bl	80001d0 <strcmp>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d112      	bne.n	80006ba <main+0x11a>
 8000694:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000698:	f103 0307 	add.w	r3, r3, #7
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00b      	beq.n	80006ba <main+0x11a>
			{
				Task = WAIT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80006a8:	f102 0207 	add.w	r2, r2, #7
 80006ac:	7013      	strb	r3, [r2, #0]
				_cprintf("Process stopped by user\r\n");
 80006ae:	484a      	ldr	r0, [pc, #296]	; (80007d8 <main+0x238>)
 80006b0:	f007 fca8 	bl	8008004 <_cprintf>
				CDC_rxPrintf_ON();
 80006b4:	f007 fe08 	bl	80082c8 <CDC_rxPrintf_ON>
 80006b8:	e026      	b.n	8000708 <main+0x168>
			}
			else if (!strcmp(cmd, "process") && Task != PROCESS)
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	3b04      	subs	r3, #4
 80006c0:	4946      	ldr	r1, [pc, #280]	; (80007dc <main+0x23c>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fd84 	bl	80001d0 <strcmp>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d115      	bne.n	80006fa <main+0x15a>
 80006ce:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80006d2:	f103 0307 	add.w	r3, r3, #7
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d00e      	beq.n	80006fa <main+0x15a>
			{
				Task = PROCESS;
 80006dc:	2301      	movs	r3, #1
 80006de:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80006e2:	f102 0207 	add.w	r2, r2, #7
 80006e6:	7013      	strb	r3, [r2, #0]
				CDC_rxPrintf_OFF();
 80006e8:	f007 fe0e 	bl	8008308 <CDC_rxPrintf_OFF>
				_cprintf("Audio processing started\r\n");
 80006ec:	483c      	ldr	r0, [pc, #240]	; (80007e0 <main+0x240>)
 80006ee:	f007 fc89 	bl	8008004 <_cprintf>
				_cprintf("Processing, type \"q\" to stop\r\n");
 80006f2:	483c      	ldr	r0, [pc, #240]	; (80007e4 <main+0x244>)
 80006f4:	f007 fc86 	bl	8008004 <_cprintf>
 80006f8:	e006      	b.n	8000708 <main+0x168>
			}
			else
			{
				_cprintf("/!\\ Unknown command \"%s\"\r\n", cmd);
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	3b04      	subs	r3, #4
 8000700:	4619      	mov	r1, r3
 8000702:	4839      	ldr	r0, [pc, #228]	; (80007e8 <main+0x248>)
 8000704:	f007 fc7e 	bl	8008004 <_cprintf>
			}
		}

		/* If serial COM port is not open process by default */
		if(!HOST_PORT_COM_OPEN)
 8000708:	4b38      	ldr	r3, [pc, #224]	; (80007ec <main+0x24c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f083 0301 	eor.w	r3, r3, #1
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d007      	beq.n	8000728 <main+0x188>
		{	Task = PROCESS;
 8000718:	2301      	movs	r3, #1
 800071a:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800071e:	f102 0207 	add.w	r2, r2, #7
 8000722:	7013      	strb	r3, [r2, #0]
			CDC_rxPrintf_OFF();
 8000724:	f007 fdf0 	bl	8008308 <CDC_rxPrintf_OFF>
		}

		/* Execute selected task */
		switch(Task)
 8000728:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800072c:	f103 0307 	add.w	r3, r3, #7
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d021      	beq.n	800077a <main+0x1da>
 8000736:	2b01      	cmp	r3, #1
 8000738:	d126      	bne.n	8000788 <main+0x1e8>
		{
			case(PROCESS):
			{
				/* Read audio data */
				PMODI2S2_stereoRq31(Lbuf, Rbuf);
 800073a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800073e:	3a04      	subs	r2, #4
 8000740:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000744:	f103 0308 	add.w	r3, r3, #8
 8000748:	3b04      	subs	r3, #4
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fae1 	bl	8000d14 <PMODI2S2_stereoRq31>

				/* Signal Processing */
				// arm_fir_q31(FIR_q31, L_Buf, L_Buf, BUFFER_LENGTH);

				/* Write audio data */
				PMODI2S2_stereoWq31(Lbuf, Rbuf);
 8000752:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000756:	3a04      	subs	r2, #4
 8000758:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800075c:	f103 0308 	add.w	r3, r3, #8
 8000760:	3b04      	subs	r3, #4
 8000762:	4611      	mov	r1, r2
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fb27 	bl	8000db8 <PMODI2S2_stereoWq31>

				/* Toggle Led and update chrono on port COM */
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800076a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <main+0x204>)
 8000770:	f001 fc7f 	bl	8002072 <HAL_GPIO_TogglePin>
				_cspin();
 8000774:	f007 fd0c 	bl	8008190 <_cspin>
				break;
 8000778:	e00d      	b.n	8000796 <main+0x1f6>
			}
			case(WAIT):
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <main+0x204>)
 8000782:	f001 fc5d 	bl	8002040 <HAL_GPIO_WritePin>
				break;
 8000786:	e006      	b.n	8000796 <main+0x1f6>
			}
			default:
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <main+0x204>)
 8000790:	f001 fc56 	bl	8002040 <HAL_GPIO_WritePin>
				break;
 8000794:	bf00      	nop
		if (CDC_RX_DATA_PENDING)
 8000796:	e74d      	b.n	8000634 <main+0x94>
 8000798:	08009e30 	.word	0x08009e30
 800079c:	08009e54 	.word	0x08009e54
 80007a0:	08009e78 	.word	0x08009e78
 80007a4:	40020c00 	.word	0x40020c00
 80007a8:	08009ea0 	.word	0x08009ea0
 80007ac:	08009ed0 	.word	0x08009ed0
 80007b0:	200084f4 	.word	0x200084f4
 80007b4:	200004f4 	.word	0x200004f4
 80007b8:	200105b8 	.word	0x200105b8
 80007bc:	08009ef0 	.word	0x08009ef0
 80007c0:	08009f24 	.word	0x08009f24
 80007c4:	2000037a 	.word	0x2000037a
 80007c8:	08009f44 	.word	0x08009f44
 80007cc:	08009f48 	.word	0x08009f48
 80007d0:	08009f50 	.word	0x08009f50
 80007d4:	08009f54 	.word	0x08009f54
 80007d8:	08009f58 	.word	0x08009f58
 80007dc:	08009f74 	.word	0x08009f74
 80007e0:	08009f7c 	.word	0x08009f7c
 80007e4:	08009f98 	.word	0x08009f98
 80007e8:	08009fb8 	.word	0x08009fb8
 80007ec:	20000379 	.word	0x20000379

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b098      	sub	sp, #96	; 0x60
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007fa:	2230      	movs	r2, #48	; 0x30
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f008 f9fd 	bl	8008bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b31      	ldr	r3, [pc, #196]	; (80008ec <SystemClock_Config+0xfc>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a30      	ldr	r2, [pc, #192]	; (80008ec <SystemClock_Config+0xfc>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <SystemClock_Config+0xfc>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <SystemClock_Config+0x100>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a2a      	ldr	r2, [pc, #168]	; (80008f0 <SystemClock_Config+0x100>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <SystemClock_Config+0x100>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085a:	2301      	movs	r3, #1
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800085e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000862:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000864:	2302      	movs	r3, #2
 8000866:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000868:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800086e:	2308      	movs	r3, #8
 8000870:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000872:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000876:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800087c:	2307      	movs	r3, #7
 800087e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000884:	4618      	mov	r0, r3
 8000886:	f003 fc9d 	bl	80041c4 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000890:	f000 faf2 	bl	8000e78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	2105      	movs	r1, #5
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 fef6 	bl	80046a4 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008be:	f000 fadb 	bl	8000e78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008c2:	2301      	movs	r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008c6:	23c0      	movs	r3, #192	; 0xc0
 80008c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 f8b0 	bl	8004a38 <HAL_RCCEx_PeriphCLKConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80008de:	f000 facb 	bl	8000e78 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3760      	adds	r7, #96	; 0x60
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_CRC_Init+0x20>)
 80008fa:	4a07      	ldr	r2, [pc, #28]	; (8000918 <MX_CRC_Init+0x24>)
 80008fc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_CRC_Init+0x20>)
 8000900:	f000 fe61 	bl	80015c6 <HAL_CRC_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800090a:	f000 fab5 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200004ec 	.word	0x200004ec
 8000918:	40023000 	.word	0x40023000

0800091c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2S2_Init 0 */
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */
  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_I2S2_Init+0x54>)
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <MX_I2S2_Init+0x58>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_I2S2_Init+0x54>)
 8000928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_I2S2_Init+0x54>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_I2S2_Init+0x54>)
 8000936:	2203      	movs	r2, #3
 8000938:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_I2S2_Init+0x54>)
 800093c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000940:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_I2S2_Init+0x54>)
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <MX_I2S2_Init+0x5c>)
 8000946:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_I2S2_Init+0x54>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_I2S2_Init+0x54>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_I2S2_Init+0x54>)
 8000956:	2201      	movs	r2, #1
 8000958:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_I2S2_Init+0x54>)
 800095c:	f001 fba4 	bl	80020a8 <HAL_I2S_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000966:	f000 fa87 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */
  /* USER CODE END I2S2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200105b8 	.word	0x200105b8
 8000974:	40003800 	.word	0x40003800
 8000978:	00017700 	.word	0x00017700

0800097c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <MX_DMA_Init+0xc8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a2e      	ldr	r2, [pc, #184]	; (8000a44 <MX_DMA_Init+0xc8>)
 800098c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <MX_DMA_Init+0xc8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <MX_DMA_Init+0xc8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a27      	ldr	r2, [pc, #156]	; (8000a44 <MX_DMA_Init+0xc8>)
 80009a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <MX_DMA_Init+0xc8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <MX_DMA_Init+0xcc>)
 80009bc:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <MX_DMA_Init+0xd0>)
 80009be:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_DMA_Init+0xcc>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MX_DMA_Init+0xcc>)
 80009c8:	2280      	movs	r2, #128	; 0x80
 80009ca:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_DMA_Init+0xcc>)
 80009ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_DMA_Init+0xcc>)
 80009d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009da:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_DMA_Init+0xcc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_DMA_Init+0xcc>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_DMA_Init+0xcc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_DMA_Init+0xcc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_DMA_Init+0xcc>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_DMA_Init+0xcc>)
 80009fc:	2203      	movs	r2, #3
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_DMA_Init+0xcc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_DMA_Init+0xcc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000a0c:	480e      	ldr	r0, [pc, #56]	; (8000a48 <MX_DMA_Init+0xcc>)
 8000a0e:	f000 fdf7 	bl	8001600 <HAL_DMA_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_DMA_Init+0xa0>
  {
    Error_Handler( );
 8000a18:	f000 fa2e 	bl	8000e78 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	200e      	movs	r0, #14
 8000a22:	f000 fd9a 	bl	800155a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a26:	200e      	movs	r0, #14
 8000a28:	f000 fdb3 	bl	8001592 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	200f      	movs	r0, #15
 8000a32:	f000 fd92 	bl	800155a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a36:	200f      	movs	r0, #15
 8000a38:	f000 fdab 	bl	8001592 <HAL_NVIC_EnableIRQ>

}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	2000048c 	.word	0x2000048c
 8000a4c:	40026410 	.word	0x40026410

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	4b81      	ldr	r3, [pc, #516]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a80      	ldr	r2, [pc, #512]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000a70:	f043 0310 	orr.w	r3, r3, #16
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b7e      	ldr	r3, [pc, #504]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0310 	and.w	r3, r3, #16
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	4b7a      	ldr	r3, [pc, #488]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a79      	ldr	r2, [pc, #484]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b77      	ldr	r3, [pc, #476]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b73      	ldr	r3, [pc, #460]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a72      	ldr	r2, [pc, #456]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b70      	ldr	r3, [pc, #448]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b6c      	ldr	r3, [pc, #432]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a6b      	ldr	r2, [pc, #428]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b69      	ldr	r3, [pc, #420]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	4b65      	ldr	r3, [pc, #404]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a64      	ldr	r2, [pc, #400]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b62      	ldr	r3, [pc, #392]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b5e      	ldr	r3, [pc, #376]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a5d      	ldr	r2, [pc, #372]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b5b      	ldr	r3, [pc, #364]	; (8000c70 <MX_GPIO_Init+0x220>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2108      	movs	r1, #8
 8000b12:	4858      	ldr	r0, [pc, #352]	; (8000c74 <MX_GPIO_Init+0x224>)
 8000b14:	f001 fa94 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4856      	ldr	r0, [pc, #344]	; (8000c78 <MX_GPIO_Init+0x228>)
 8000b1e:	f001 fa8f 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b22:	2200      	movs	r2, #0
 8000b24:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b28:	4854      	ldr	r0, [pc, #336]	; (8000c7c <MX_GPIO_Init+0x22c>)
 8000b2a:	f001 fa89 	bl	8002040 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	484b      	ldr	r0, [pc, #300]	; (8000c74 <MX_GPIO_Init+0x224>)
 8000b46:	f001 f8c9 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4845      	ldr	r0, [pc, #276]	; (8000c78 <MX_GPIO_Init+0x228>)
 8000b62:	f001 f8bb 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b6a:	4b45      	ldr	r3, [pc, #276]	; (8000c80 <MX_GPIO_Init+0x230>)
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4842      	ldr	r0, [pc, #264]	; (8000c84 <MX_GPIO_Init+0x234>)
 8000b7a:	f001 f8af 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b7e:	2310      	movs	r3, #16
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b8e:	2306      	movs	r3, #6
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	483a      	ldr	r0, [pc, #232]	; (8000c84 <MX_GPIO_Init+0x234>)
 8000b9a:	f001 f89f 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b9e:	23e0      	movs	r3, #224	; 0xe0
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4832      	ldr	r0, [pc, #200]	; (8000c84 <MX_GPIO_Init+0x234>)
 8000bba:	f001 f88f 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	482d      	ldr	r0, [pc, #180]	; (8000c88 <MX_GPIO_Init+0x238>)
 8000bd2:	f001 f883 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bd6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bda:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4823      	ldr	r0, [pc, #140]	; (8000c7c <MX_GPIO_Init+0x22c>)
 8000bf0:	f001 f874 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bf4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c06:	2306      	movs	r3, #6
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4819      	ldr	r0, [pc, #100]	; (8000c78 <MX_GPIO_Init+0x228>)
 8000c12:	f001 f863 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c16:	2320      	movs	r3, #32
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4814      	ldr	r0, [pc, #80]	; (8000c7c <MX_GPIO_Init+0x22c>)
 8000c2a:	f001 f857 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c34:	2312      	movs	r3, #18
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c40:	2304      	movs	r3, #4
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480f      	ldr	r0, [pc, #60]	; (8000c88 <MX_GPIO_Init+0x238>)
 8000c4c:	f001 f846 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <MX_GPIO_Init+0x230>)
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_GPIO_Init+0x224>)
 8000c64:	f001 f83a 	bl	8001cdc <HAL_GPIO_Init>

}
 8000c68:	bf00      	nop
 8000c6a:	3730      	adds	r7, #48	; 0x30
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020c00 	.word	0x40020c00
 8000c80:	10120000 	.word	0x10120000
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020400 	.word	0x40020400

08000c8c <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	pI2S2_txBuf = &I2S2_txBuf[0];
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 8000c96:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 8000c98:	601a      	str	r2, [r3, #0]
	pI2S2_rxBuf = &I2S2_rxBuf[0];
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 8000c9c:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 8000c9e:	601a      	str	r2, [r3, #0]
	I2S2_rxState = HalfCplt;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_I2SEx_TxRxHalfCpltCallback+0x3c>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
	I2S2_txState = HalfCplt;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	200004f4 	.word	0x200004f4
 8000cc0:	20000004 	.word	0x20000004
 8000cc4:	200084f4 	.word	0x200084f4
 8000cc8:	200104f4 	.word	0x200104f4
 8000ccc:	200104f5 	.word	0x200104f5

08000cd0 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	pI2S2_txBuf = &I2S2_txBuf[I2S2_BUFLEN/2];
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 8000cdc:	601a      	str	r2, [r3, #0]
	pI2S2_rxBuf = &I2S2_rxBuf[I2S2_BUFLEN/2];
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8000ce2:	601a      	str	r2, [r3, #0]
	I2S2_rxState = Cplt;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_I2SEx_TxRxCpltCallback+0x3c>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	701a      	strb	r2, [r3, #0]
	I2S2_txState = Cplt;
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_I2SEx_TxRxCpltCallback+0x40>)
 8000cec:	2202      	movs	r2, #2
 8000cee:	701a      	strb	r2, [r3, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	200044f4 	.word	0x200044f4
 8000d04:	20000004 	.word	0x20000004
 8000d08:	2000c4f4 	.word	0x2000c4f4
 8000d0c:	200104f4 	.word	0x200104f4
 8000d10:	200104f5 	.word	0x200104f5

08000d14 <PMODI2S2_stereoRq31>:

void PMODI2S2_stereoRq31(q31_t *Lbuf, q31_t *Rbuf)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
	while(I2S2_rxState == Busy)
 8000d1e:	bf00      	nop
 8000d20:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <PMODI2S2_stereoRq31+0x9c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0fb      	beq.n	8000d20 <PMODI2S2_stereoRq31+0xc>
	{
	}
	I2S2_rxState = Busy;
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <PMODI2S2_stereoRq31+0x9c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	81fb      	strh	r3, [r7, #14]
 8000d32:	e031      	b.n	8000d98 <PMODI2S2_stereoRq31+0x84>
	{
		Lbuf[i / 4] = (q31_t) ((pI2S2_rxBuf[i]     << 16) | pI2S2_rxBuf[i + 1]);
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <PMODI2S2_stereoRq31+0xa0>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	89fb      	ldrh	r3, [r7, #14]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	041a      	lsls	r2, r3, #16
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <PMODI2S2_stereoRq31+0xa0>)
 8000d44:	6819      	ldr	r1, [r3, #0]
 8000d46:	89fb      	ldrh	r3, [r7, #14]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	440b      	add	r3, r1
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	440b      	add	r3, r1
 8000d5e:	4302      	orrs	r2, r0
 8000d60:	601a      	str	r2, [r3, #0]
		Rbuf[i / 4] = (q31_t) ((pI2S2_rxBuf[i + 2] << 16) | pI2S2_rxBuf[i + 3]);
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <PMODI2S2_stereoRq31+0xa0>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	89fb      	ldrh	r3, [r7, #14]
 8000d68:	3302      	adds	r3, #2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	041a      	lsls	r2, r3, #16
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <PMODI2S2_stereoRq31+0xa0>)
 8000d74:	6819      	ldr	r1, [r3, #0]
 8000d76:	89fb      	ldrh	r3, [r7, #14]
 8000d78:	3303      	adds	r3, #3
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	440b      	add	r3, r1
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	89fb      	ldrh	r3, [r7, #14]
 8000d84:	089b      	lsrs	r3, r3, #2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	6839      	ldr	r1, [r7, #0]
 8000d8c:	440b      	add	r3, r1
 8000d8e:	4302      	orrs	r2, r0
 8000d90:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	3304      	adds	r3, #4
 8000d96:	81fb      	strh	r3, [r7, #14]
 8000d98:	89fb      	ldrh	r3, [r7, #14]
 8000d9a:	3303      	adds	r3, #3
 8000d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000da0:	dbc8      	blt.n	8000d34 <PMODI2S2_stereoRq31+0x20>
	}
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	200104f4 	.word	0x200104f4
 8000db4:	20000004 	.word	0x20000004

08000db8 <PMODI2S2_stereoWq31>:

void PMODI2S2_stereoWq31(q31_t *Lbuf, q31_t *Rbuf)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
	while(I2S2_txState == Busy)
 8000dc2:	bf00      	nop
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <PMODI2S2_stereoWq31+0xb8>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0fb      	beq.n	8000dc4 <PMODI2S2_stereoWq31+0xc>
	{
	}
	I2S2_txState = Busy;
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <PMODI2S2_stereoWq31+0xb8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	81fb      	strh	r3, [r7, #14]
 8000dd6:	e03f      	b.n	8000e58 <PMODI2S2_stereoWq31+0xa0>
	{
		pI2S2_txBuf[i]     = (Lbuf[i / 4] >> 16) & 0xFFFF;
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	4413      	add	r3, r2
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	0c19      	lsrs	r1, r3, #16
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <PMODI2S2_stereoWq31+0xbc>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	89fb      	ldrh	r3, [r7, #14]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	b28a      	uxth	r2, r1
 8000df4:	801a      	strh	r2, [r3, #0]
		pI2S2_txBuf[i + 1] =  Lbuf[i / 4] & 0xFFFF;
 8000df6:	89fb      	ldrh	r3, [r7, #14]
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	6819      	ldr	r1, [r3, #0]
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <PMODI2S2_stereoWq31+0xbc>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	89fb      	ldrh	r3, [r7, #14]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	b28a      	uxth	r2, r1
 8000e12:	801a      	strh	r2, [r3, #0]
		pI2S2_txBuf[i + 2] = (Rbuf[i / 4] >> 16) & 0xFFFF;
 8000e14:	89fb      	ldrh	r3, [r7, #14]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	0c19      	lsrs	r1, r3, #16
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <PMODI2S2_stereoWq31+0xbc>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	89fb      	ldrh	r3, [r7, #14]
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	4413      	add	r3, r2
 8000e30:	b28a      	uxth	r2, r1
 8000e32:	801a      	strh	r2, [r3, #0]
		pI2S2_txBuf[i + 3] =  Rbuf[i / 4] & 0xFFFF;
 8000e34:	89fb      	ldrh	r3, [r7, #14]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	6819      	ldr	r1, [r3, #0]
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <PMODI2S2_stereoWq31+0xbc>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	3303      	adds	r3, #3
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b28a      	uxth	r2, r1
 8000e50:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	3304      	adds	r3, #4
 8000e56:	81fb      	strh	r3, [r7, #14]
 8000e58:	89fb      	ldrh	r3, [r7, #14]
 8000e5a:	3303      	adds	r3, #3
 8000e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e60:	dbba      	blt.n	8000dd8 <PMODI2S2_stereoWq31+0x20>
	}
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200104f5 	.word	0x200104f5
 8000e74:	20000000 	.word	0x20000000

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <Error_Handler+0x1c>)
 8000e84:	f001 f8dc 	bl	8002040 <HAL_GPIO_WritePin>
	_cprintf("/!\\ FATAL ERROR !");
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <Error_Handler+0x20>)
 8000e8a:	f007 f8bb 	bl	8008004 <_cprintf>
  /* USER CODE END Error_Handler_Debug */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40020c00 	.word	0x40020c00
 8000e98:	08009fd4 	.word	0x08009fd4

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eda:	2007      	movs	r0, #7
 8000edc:	f000 fb32 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40023800 	.word	0x40023800

08000eec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <HAL_CRC_MspInit+0x3c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10d      	bne.n	8000f1a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_CRC_MspInit+0x40>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <HAL_CRC_MspInit+0x40>)
 8000f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <HAL_CRC_MspInit+0x40>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40023000 	.word	0x40023000
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a62      	ldr	r2, [pc, #392]	; (80010d8 <HAL_I2S_MspInit+0x1a8>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	f040 80be 	bne.w	80010d0 <HAL_I2S_MspInit+0x1a0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	4b60      	ldr	r3, [pc, #384]	; (80010dc <HAL_I2S_MspInit+0x1ac>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a5f      	ldr	r2, [pc, #380]	; (80010dc <HAL_I2S_MspInit+0x1ac>)
 8000f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b5d      	ldr	r3, [pc, #372]	; (80010dc <HAL_I2S_MspInit+0x1ac>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	4b59      	ldr	r3, [pc, #356]	; (80010dc <HAL_I2S_MspInit+0x1ac>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	4a58      	ldr	r2, [pc, #352]	; (80010dc <HAL_I2S_MspInit+0x1ac>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f80:	4b56      	ldr	r3, [pc, #344]	; (80010dc <HAL_I2S_MspInit+0x1ac>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	4b52      	ldr	r3, [pc, #328]	; (80010dc <HAL_I2S_MspInit+0x1ac>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4a51      	ldr	r2, [pc, #324]	; (80010dc <HAL_I2S_MspInit+0x1ac>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9c:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <HAL_I2S_MspInit+0x1ac>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000fb8:	2306      	movs	r3, #6
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4847      	ldr	r0, [pc, #284]	; (80010e0 <HAL_I2S_MspInit+0x1b0>)
 8000fc4:	f000 fe8a 	bl	8001cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin|GPIO_PIN_6;
 8000fc8:	2348      	movs	r3, #72	; 0x48
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fd8:	2305      	movs	r3, #5
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	483f      	ldr	r0, [pc, #252]	; (80010e0 <HAL_I2S_MspInit+0x1b0>)
 8000fe4:	f000 fe7a 	bl	8001cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000fe8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ffa:	2305      	movs	r3, #5
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4837      	ldr	r0, [pc, #220]	; (80010e4 <HAL_I2S_MspInit+0x1b4>)
 8001006:	f000 fe69 	bl	8001cdc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 800100a:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <HAL_I2S_MspInit+0x1b8>)
 800100c:	4a37      	ldr	r2, [pc, #220]	; (80010ec <HAL_I2S_MspInit+0x1bc>)
 800100e:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001010:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <HAL_I2S_MspInit+0x1b8>)
 8001012:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001016:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <HAL_I2S_MspInit+0x1b8>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <HAL_I2S_MspInit+0x1b8>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <HAL_I2S_MspInit+0x1b8>)
 8001026:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800102a:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <HAL_I2S_MspInit+0x1b8>)
 800102e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001032:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001034:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <HAL_I2S_MspInit+0x1b8>)
 8001036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800103a:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <HAL_I2S_MspInit+0x1b8>)
 800103e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001042:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <HAL_I2S_MspInit+0x1b8>)
 8001046:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800104a:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <HAL_I2S_MspInit+0x1b8>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001052:	4825      	ldr	r0, [pc, #148]	; (80010e8 <HAL_I2S_MspInit+0x1b8>)
 8001054:	f000 fad4 	bl	8001600 <HAL_DMA_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 800105e:	f7ff ff0b 	bl	8000e78 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a20      	ldr	r2, [pc, #128]	; (80010e8 <HAL_I2S_MspInit+0x1b8>)
 8001066:	63da      	str	r2, [r3, #60]	; 0x3c
 8001068:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <HAL_I2S_MspInit+0x1b8>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <HAL_I2S_MspInit+0x1c0>)
 8001070:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <HAL_I2S_MspInit+0x1c4>)
 8001072:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <HAL_I2S_MspInit+0x1c0>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_I2S_MspInit+0x1c0>)
 800107c:	2240      	movs	r2, #64	; 0x40
 800107e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_I2S_MspInit+0x1c0>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <HAL_I2S_MspInit+0x1c0>)
 8001088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800108c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_I2S_MspInit+0x1c0>)
 8001090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001094:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_I2S_MspInit+0x1c0>)
 8001098:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800109c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_I2S_MspInit+0x1c0>)
 80010a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_I2S_MspInit+0x1c0>)
 80010a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010ac:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_I2S_MspInit+0x1c0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80010b4:	480e      	ldr	r0, [pc, #56]	; (80010f0 <HAL_I2S_MspInit+0x1c0>)
 80010b6:	f000 faa3 	bl	8001600 <HAL_DMA_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 80010c0:	f7ff feda 	bl	8000e78 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <HAL_I2S_MspInit+0x1c0>)
 80010c8:	639a      	str	r2, [r3, #56]	; 0x38
 80010ca:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <HAL_I2S_MspInit+0x1c0>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40003800 	.word	0x40003800
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020800 	.word	0x40020800
 80010e4:	40020400 	.word	0x40020400
 80010e8:	200104f8 	.word	0x200104f8
 80010ec:	40026058 	.word	0x40026058
 80010f0:	20010558 	.word	0x20010558
 80010f4:	40026070 	.word	0x40026070

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler+0x4>

08001112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <UsageFault_Handler+0x4>

0800111e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114c:	f000 f8e8 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <DMA1_Stream3_IRQHandler+0x10>)
 800115a:	f000 fb57 	bl	800180c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200104f8 	.word	0x200104f8

08001168 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <DMA1_Stream4_IRQHandler+0x10>)
 800116e:	f000 fb4d 	bl	800180c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20010558 	.word	0x20010558

0800117c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <OTG_FS_IRQHandler+0x10>)
 8001182:	f001 ffeb 	bl	800315c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20010bd8 	.word	0x20010bd8

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f007 fcd8 	bl	8008b74 <__errno>
 80011c4:	4602      	mov	r2, r0
 80011c6:	230c      	movs	r3, #12
 80011c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <_sbrk+0x64>)
 80011e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20020000 	.word	0x20020000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	20000374 	.word	0x20000374
 80011f8:	20010fe8 	.word	0x20010fe8

080011fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <SystemInit+0x28>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001206:	4a07      	ldr	r2, [pc, #28]	; (8001224 <SystemInit+0x28>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SystemInit+0x28>)
 8001212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001216:	609a      	str	r2, [r3, #8]
#endif
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001260 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800122c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800122e:	e003      	b.n	8001238 <LoopCopyDataInit>

08001230 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001232:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001234:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001236:	3104      	adds	r1, #4

08001238 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001238:	480b      	ldr	r0, [pc, #44]	; (8001268 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800123c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800123e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001240:	d3f6      	bcc.n	8001230 <CopyDataInit>
  ldr  r2, =_sbss
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001244:	e002      	b.n	800124c <LoopFillZerobss>

08001246 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001246:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001248:	f842 3b04 	str.w	r3, [r2], #4

0800124c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800124e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001250:	d3f9      	bcc.n	8001246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001252:	f7ff ffd3 	bl	80011fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001256:	f007 fc93 	bl	8008b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff f9a1 	bl	80005a0 <main>
  bx  lr    
 800125e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001260:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001264:	0800a2f0 	.word	0x0800a2f0
  ldr  r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800126c:	20000358 	.word	0x20000358
  ldr  r2, =_sbss
 8001270:	20000358 	.word	0x20000358
  ldr  r3, = _ebss
 8001274:	20010fe4 	.word	0x20010fe4

08001278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC_IRQHandler>
	...

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_Init+0x40>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_Init+0x40>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_Init+0x40>)
 800129e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 f94d 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 f808 	bl	80012c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b0:	f7ff fdf4 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x54>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x58>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f965 	bl	80015ae <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012fc:	f000 f92d 	bl	800155a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <HAL_InitTick+0x5c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000008 	.word	0x20000008
 8001318:	20000010 	.word	0x20000010
 800131c:	2000000c 	.word	0x2000000c

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000010 	.word	0x20000010
 8001344:	20010600 	.word	0x20010600

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20010600 	.word	0x20010600

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_Delay+0x40>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffde 	bl	8001348 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000010 	.word	0x20000010

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <__NVIC_EnableIRQ+0x38>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	210f      	movs	r1, #15
 8001520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001524:	f7ff ff8e 	bl	8001444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff29 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff3e 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff8e 	bl	8001498 <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5d 	bl	8001444 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff31 	bl	8001408 <__NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffa2 	bl	8001500 <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e00e      	b.n	80015f6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	795b      	ldrb	r3, [r3, #5]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d105      	bne.n	80015ee <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fc7f 	bl	8000eec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800160c:	f7ff fe9c 	bl	8001348 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e099      	b.n	8001750 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800163c:	e00f      	b.n	800165e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800163e:	f7ff fe83 	bl	8001348 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b05      	cmp	r3, #5
 800164a:	d908      	bls.n	800165e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2220      	movs	r2, #32
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2203      	movs	r2, #3
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e078      	b.n	8001750 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1e8      	bne.n	800163e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	4b38      	ldr	r3, [pc, #224]	; (8001758 <HAL_DMA_Init+0x158>)
 8001678:	4013      	ands	r3, r2
 800167a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800168a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001696:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d107      	bne.n	80016c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	4313      	orrs	r3, r2
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f023 0307 	bic.w	r3, r3, #7
 80016de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d117      	bne.n	8001722 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00e      	beq.n	8001722 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fa6f 	bl	8001be8 <DMA_CheckFifoParam>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2240      	movs	r2, #64	; 0x40
 8001714:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800171e:	2301      	movs	r3, #1
 8001720:	e016      	b.n	8001750 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fa26 	bl	8001b7c <DMA_CalcBaseAndBitshift>
 8001730:	4603      	mov	r3, r0
 8001732:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001738:	223f      	movs	r2, #63	; 0x3f
 800173a:	409a      	lsls	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	f010803f 	.word	0xf010803f

0800175c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <HAL_DMA_Start_IT+0x26>
 800177e:	2302      	movs	r3, #2
 8001780:	e040      	b.n	8001804 <HAL_DMA_Start_IT+0xa8>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d12f      	bne.n	80017f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2202      	movs	r2, #2
 800179a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f9b8 	bl	8001b20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b4:	223f      	movs	r2, #63	; 0x3f
 80017b6:	409a      	lsls	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0216 	orr.w	r2, r2, #22
 80017ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0208 	orr.w	r2, r2, #8
 80017e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	e005      	b.n	8001802 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017fe:	2302      	movs	r3, #2
 8001800:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001818:	4b92      	ldr	r3, [pc, #584]	; (8001a64 <HAL_DMA_IRQHandler+0x258>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a92      	ldr	r2, [pc, #584]	; (8001a68 <HAL_DMA_IRQHandler+0x25c>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	0a9b      	lsrs	r3, r3, #10
 8001824:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	2208      	movs	r2, #8
 8001838:	409a      	lsls	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d01a      	beq.n	8001878 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0204 	bic.w	r2, r2, #4
 800185e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001864:	2208      	movs	r2, #8
 8001866:	409a      	lsls	r2, r3
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001870:	f043 0201 	orr.w	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187c:	2201      	movs	r2, #1
 800187e:	409a      	lsls	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d012      	beq.n	80018ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189a:	2201      	movs	r2, #1
 800189c:	409a      	lsls	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a6:	f043 0202 	orr.w	r2, r3, #2
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b2:	2204      	movs	r2, #4
 80018b4:	409a      	lsls	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d012      	beq.n	80018e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00b      	beq.n	80018e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2204      	movs	r2, #4
 80018d2:	409a      	lsls	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	f043 0204 	orr.w	r2, r3, #4
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	2210      	movs	r2, #16
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d043      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d03c      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	2210      	movs	r2, #16
 8001908:	409a      	lsls	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d018      	beq.n	800194e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d108      	bne.n	800193c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d024      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
 800193a:	e01f      	b.n	800197c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01b      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	4798      	blx	r3
 800194c:	e016      	b.n	800197c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d107      	bne.n	800196c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0208 	bic.w	r2, r2, #8
 800196a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001980:	2220      	movs	r2, #32
 8001982:	409a      	lsls	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 808e 	beq.w	8001aaa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 8086 	beq.w	8001aaa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	2220      	movs	r2, #32
 80019a4:	409a      	lsls	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d136      	bne.n	8001a24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0216 	bic.w	r2, r2, #22
 80019c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d103      	bne.n	80019e6 <HAL_DMA_IRQHandler+0x1da>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0208 	bic.w	r2, r2, #8
 80019f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	223f      	movs	r2, #63	; 0x3f
 80019fc:	409a      	lsls	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d07d      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4798      	blx	r3
        }
        return;
 8001a22:	e078      	b.n	8001b16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01c      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d108      	bne.n	8001a52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d030      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
 8001a50:	e02b      	b.n	8001aaa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d027      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	4798      	blx	r3
 8001a62:	e022      	b.n	8001aaa <HAL_DMA_IRQHandler+0x29e>
 8001a64:	20000008 	.word	0x20000008
 8001a68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10f      	bne.n	8001a9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0210 	bic.w	r2, r2, #16
 8001a88:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d032      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d022      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0201 	bic.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d307      	bcc.n	8001af2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f2      	bne.n	8001ad6 <HAL_DMA_IRQHandler+0x2ca>
 8001af0:	e000      	b.n	8001af4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001af2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
 8001b14:	e000      	b.n	8001b18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b16:	bf00      	nop
    }
  }
}
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop

08001b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b40      	cmp	r3, #64	; 0x40
 8001b4c:	d108      	bne.n	8001b60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b5e:	e007      	b.n	8001b70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	60da      	str	r2, [r3, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3b10      	subs	r3, #16
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <DMA_CalcBaseAndBitshift+0x64>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <DMA_CalcBaseAndBitshift+0x68>)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d909      	bls.n	8001bbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bb2:	f023 0303 	bic.w	r3, r3, #3
 8001bb6:	1d1a      	adds	r2, r3, #4
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	659a      	str	r2, [r3, #88]	; 0x58
 8001bbc:	e007      	b.n	8001bce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bc6:	f023 0303 	bic.w	r3, r3, #3
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	aaaaaaab 	.word	0xaaaaaaab
 8001be4:	0800a11c 	.word	0x0800a11c

08001be8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d11f      	bne.n	8001c42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d855      	bhi.n	8001cb4 <DMA_CheckFifoParam+0xcc>
 8001c08:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <DMA_CheckFifoParam+0x28>)
 8001c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0e:	bf00      	nop
 8001c10:	08001c21 	.word	0x08001c21
 8001c14:	08001c33 	.word	0x08001c33
 8001c18:	08001c21 	.word	0x08001c21
 8001c1c:	08001cb5 	.word	0x08001cb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d045      	beq.n	8001cb8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c30:	e042      	b.n	8001cb8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c3a:	d13f      	bne.n	8001cbc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c40:	e03c      	b.n	8001cbc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c4a:	d121      	bne.n	8001c90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d836      	bhi.n	8001cc0 <DMA_CheckFifoParam+0xd8>
 8001c52:	a201      	add	r2, pc, #4	; (adr r2, 8001c58 <DMA_CheckFifoParam+0x70>)
 8001c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c58:	08001c69 	.word	0x08001c69
 8001c5c:	08001c6f 	.word	0x08001c6f
 8001c60:	08001c69 	.word	0x08001c69
 8001c64:	08001c81 	.word	0x08001c81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c6c:	e02f      	b.n	8001cce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d024      	beq.n	8001cc4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c7e:	e021      	b.n	8001cc4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c88:	d11e      	bne.n	8001cc8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c8e:	e01b      	b.n	8001cc8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d902      	bls.n	8001c9c <DMA_CheckFifoParam+0xb4>
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d003      	beq.n	8001ca2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c9a:	e018      	b.n	8001cce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca0:	e015      	b.n	8001cce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00e      	beq.n	8001ccc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8001cb2:	e00b      	b.n	8001ccc <DMA_CheckFifoParam+0xe4>
      break;
 8001cb4:	bf00      	nop
 8001cb6:	e00a      	b.n	8001cce <DMA_CheckFifoParam+0xe6>
      break;
 8001cb8:	bf00      	nop
 8001cba:	e008      	b.n	8001cce <DMA_CheckFifoParam+0xe6>
      break;
 8001cbc:	bf00      	nop
 8001cbe:	e006      	b.n	8001cce <DMA_CheckFifoParam+0xe6>
      break;
 8001cc0:	bf00      	nop
 8001cc2:	e004      	b.n	8001cce <DMA_CheckFifoParam+0xe6>
      break;
 8001cc4:	bf00      	nop
 8001cc6:	e002      	b.n	8001cce <DMA_CheckFifoParam+0xe6>
      break;   
 8001cc8:	bf00      	nop
 8001cca:	e000      	b.n	8001cce <DMA_CheckFifoParam+0xe6>
      break;
 8001ccc:	bf00      	nop
    }
  } 
  
  return status; 
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	e16b      	b.n	8001fd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	f040 815a 	bne.w	8001fca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d00b      	beq.n	8001d36 <HAL_GPIO_Init+0x5a>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d007      	beq.n	8001d36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d2a:	2b11      	cmp	r3, #17
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b12      	cmp	r3, #18
 8001d34:	d130      	bne.n	8001d98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0201 	and.w	r2, r3, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0xfc>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b12      	cmp	r3, #18
 8001dd6:	d123      	bne.n	8001e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	08da      	lsrs	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	69b9      	ldr	r1, [r7, #24]
 8001e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80b4 	beq.w	8001fca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <HAL_GPIO_Init+0x308>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	4a5e      	ldr	r2, [pc, #376]	; (8001fe4 <HAL_GPIO_Init+0x308>)
 8001e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	4b5c      	ldr	r3, [pc, #368]	; (8001fe4 <HAL_GPIO_Init+0x308>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7e:	4a5a      	ldr	r2, [pc, #360]	; (8001fe8 <HAL_GPIO_Init+0x30c>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a51      	ldr	r2, [pc, #324]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d02b      	beq.n	8001f02 <HAL_GPIO_Init+0x226>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a50      	ldr	r2, [pc, #320]	; (8001ff0 <HAL_GPIO_Init+0x314>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d025      	beq.n	8001efe <HAL_GPIO_Init+0x222>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4f      	ldr	r2, [pc, #316]	; (8001ff4 <HAL_GPIO_Init+0x318>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d01f      	beq.n	8001efa <HAL_GPIO_Init+0x21e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4e      	ldr	r2, [pc, #312]	; (8001ff8 <HAL_GPIO_Init+0x31c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d019      	beq.n	8001ef6 <HAL_GPIO_Init+0x21a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4d      	ldr	r2, [pc, #308]	; (8001ffc <HAL_GPIO_Init+0x320>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0x216>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4c      	ldr	r2, [pc, #304]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00d      	beq.n	8001eee <HAL_GPIO_Init+0x212>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4b      	ldr	r2, [pc, #300]	; (8002004 <HAL_GPIO_Init+0x328>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d007      	beq.n	8001eea <HAL_GPIO_Init+0x20e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4a      	ldr	r2, [pc, #296]	; (8002008 <HAL_GPIO_Init+0x32c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_GPIO_Init+0x20a>
 8001ee2:	2307      	movs	r3, #7
 8001ee4:	e00e      	b.n	8001f04 <HAL_GPIO_Init+0x228>
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	e00c      	b.n	8001f04 <HAL_GPIO_Init+0x228>
 8001eea:	2306      	movs	r3, #6
 8001eec:	e00a      	b.n	8001f04 <HAL_GPIO_Init+0x228>
 8001eee:	2305      	movs	r3, #5
 8001ef0:	e008      	b.n	8001f04 <HAL_GPIO_Init+0x228>
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x228>
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e004      	b.n	8001f04 <HAL_GPIO_Init+0x228>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e002      	b.n	8001f04 <HAL_GPIO_Init+0x228>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_GPIO_Init+0x228>
 8001f02:	2300      	movs	r3, #0
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	f002 0203 	and.w	r2, r2, #3
 8001f0a:	0092      	lsls	r2, r2, #2
 8001f0c:	4093      	lsls	r3, r2
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f14:	4934      	ldr	r1, [pc, #208]	; (8001fe8 <HAL_GPIO_Init+0x30c>)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_GPIO_Init+0x330>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f46:	4a31      	ldr	r2, [pc, #196]	; (800200c <HAL_GPIO_Init+0x330>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f4c:	4b2f      	ldr	r3, [pc, #188]	; (800200c <HAL_GPIO_Init+0x330>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f70:	4a26      	ldr	r2, [pc, #152]	; (800200c <HAL_GPIO_Init+0x330>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f76:	4b25      	ldr	r3, [pc, #148]	; (800200c <HAL_GPIO_Init+0x330>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	; (800200c <HAL_GPIO_Init+0x330>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <HAL_GPIO_Init+0x330>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc4:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_GPIO_Init+0x330>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	2b0f      	cmp	r3, #15
 8001fd4:	f67f ae90 	bls.w	8001cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3724      	adds	r7, #36	; 0x24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40021400 	.word	0x40021400
 8002004:	40021800 	.word	0x40021800
 8002008:	40021c00 	.word	0x40021c00
 800200c:	40013c00 	.word	0x40013c00

08002010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	e001      	b.n	8002032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	807b      	strh	r3, [r7, #2]
 800204c:	4613      	mov	r3, r2
 800204e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002050:	787b      	ldrb	r3, [r7, #1]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800205c:	e003      	b.n	8002066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	041a      	lsls	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	619a      	str	r2, [r3, #24]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	401a      	ands	r2, r3
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	429a      	cmp	r2, r3
 800208a:	d104      	bne.n	8002096 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	041a      	lsls	r2, r3, #16
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002094:	e002      	b.n	800209c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e128      	b.n	800230c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a90      	ldr	r2, [pc, #576]	; (8002314 <HAL_I2S_Init+0x26c>)
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7fe ff2b 	bl	8000f30 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2202      	movs	r2, #2
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020f0:	f023 030f 	bic.w	r3, r3, #15
 80020f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2202      	movs	r2, #2
 80020fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d060      	beq.n	80021c8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d102      	bne.n	8002114 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800210e:	2310      	movs	r3, #16
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	e001      	b.n	8002118 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002114:	2320      	movs	r3, #32
 8002116:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b20      	cmp	r3, #32
 800211e:	d802      	bhi.n	8002126 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002126:	2001      	movs	r0, #1
 8002128:	f002 fd68 	bl	8004bfc <HAL_RCCEx_GetPeriphCLKFreq>
 800212c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002136:	d125      	bne.n	8002184 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d010      	beq.n	8002162 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	fbb2 f2f3 	udiv	r2, r2, r3
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	461a      	mov	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	3305      	adds	r3, #5
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	e01f      	b.n	80021a2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	fbb2 f2f3 	udiv	r2, r2, r3
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	461a      	mov	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	3305      	adds	r3, #5
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	e00e      	b.n	80021a2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	fbb2 f2f3 	udiv	r2, r2, r3
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	461a      	mov	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	3305      	adds	r3, #5
 80021a0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4a5c      	ldr	r2, [pc, #368]	; (8002318 <HAL_I2S_Init+0x270>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	08db      	lsrs	r3, r3, #3
 80021ac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	085b      	lsrs	r3, r3, #1
 80021be:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	e003      	b.n	80021d0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80021c8:	2302      	movs	r3, #2
 80021ca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d902      	bls.n	80021dc <HAL_I2S_Init+0x134>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	2bff      	cmp	r3, #255	; 0xff
 80021da:	d907      	bls.n	80021ec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e0:	f043 0210 	orr.w	r2, r3, #16
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e08f      	b.n	800230c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	ea42 0103 	orr.w	r1, r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800220a:	f023 030f 	bic.w	r3, r3, #15
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6851      	ldr	r1, [r2, #4]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6892      	ldr	r2, [r2, #8]
 8002216:	4311      	orrs	r1, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68d2      	ldr	r2, [r2, #12]
 800221c:	4311      	orrs	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6992      	ldr	r2, [r2, #24]
 8002222:	430a      	orrs	r2, r1
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800222e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d161      	bne.n	80022fc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a38      	ldr	r2, [pc, #224]	; (800231c <HAL_I2S_Init+0x274>)
 800223c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a37      	ldr	r2, [pc, #220]	; (8002320 <HAL_I2S_Init+0x278>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d101      	bne.n	800224c <HAL_I2S_Init+0x1a4>
 8002248:	4b36      	ldr	r3, [pc, #216]	; (8002324 <HAL_I2S_Init+0x27c>)
 800224a:	e001      	b.n	8002250 <HAL_I2S_Init+0x1a8>
 800224c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	4932      	ldr	r1, [pc, #200]	; (8002320 <HAL_I2S_Init+0x278>)
 8002258:	428a      	cmp	r2, r1
 800225a:	d101      	bne.n	8002260 <HAL_I2S_Init+0x1b8>
 800225c:	4a31      	ldr	r2, [pc, #196]	; (8002324 <HAL_I2S_Init+0x27c>)
 800225e:	e001      	b.n	8002264 <HAL_I2S_Init+0x1bc>
 8002260:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002264:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002268:	f023 030f 	bic.w	r3, r3, #15
 800226c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a2b      	ldr	r2, [pc, #172]	; (8002320 <HAL_I2S_Init+0x278>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d101      	bne.n	800227c <HAL_I2S_Init+0x1d4>
 8002278:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_I2S_Init+0x27c>)
 800227a:	e001      	b.n	8002280 <HAL_I2S_Init+0x1d8>
 800227c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002280:	2202      	movs	r2, #2
 8002282:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a25      	ldr	r2, [pc, #148]	; (8002320 <HAL_I2S_Init+0x278>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_I2S_Init+0x1ea>
 800228e:	4b25      	ldr	r3, [pc, #148]	; (8002324 <HAL_I2S_Init+0x27c>)
 8002290:	e001      	b.n	8002296 <HAL_I2S_Init+0x1ee>
 8002292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a2:	d003      	beq.n	80022ac <HAL_I2S_Init+0x204>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d103      	bne.n	80022b4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80022ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	e001      	b.n	80022b8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	b299      	uxth	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80022ce:	4303      	orrs	r3, r0
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	430b      	orrs	r3, r1
 80022d4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80022d6:	4313      	orrs	r3, r2
 80022d8:	b29a      	uxth	r2, r3
 80022da:	897b      	ldrh	r3, [r7, #10]
 80022dc:	4313      	orrs	r3, r2
 80022de:	b29b      	uxth	r3, r3
 80022e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022e4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <HAL_I2S_Init+0x278>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d101      	bne.n	80022f4 <HAL_I2S_Init+0x24c>
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_I2S_Init+0x27c>)
 80022f2:	e001      	b.n	80022f8 <HAL_I2S_Init+0x250>
 80022f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022f8:	897a      	ldrh	r2, [r7, #10]
 80022fa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3720      	adds	r7, #32
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	0800241f 	.word	0x0800241f
 8002318:	cccccccd 	.word	0xcccccccd
 800231c:	08002849 	.word	0x08002849
 8002320:	40003800 	.word	0x40003800
 8002324:	40003400 	.word	0x40003400

08002328 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	881a      	ldrh	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	1c9a      	adds	r2, r3, #2
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10e      	bne.n	80023b8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023a8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffb8 	bl	8002328 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	b292      	uxth	r2, r2
 80023d4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	1c9a      	adds	r2, r3, #2
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10e      	bne.n	8002416 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002406:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff93 	bl	800233c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b04      	cmp	r3, #4
 8002438:	d13a      	bne.n	80024b0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d109      	bne.n	8002458 <I2S_IRQHandler+0x3a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244e:	2b40      	cmp	r3, #64	; 0x40
 8002450:	d102      	bne.n	8002458 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffb4 	bl	80023c0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245e:	2b40      	cmp	r3, #64	; 0x40
 8002460:	d126      	bne.n	80024b0 <I2S_IRQHandler+0x92>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b20      	cmp	r3, #32
 800246e:	d11f      	bne.n	80024b0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800247e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f043 0202 	orr.w	r2, r3, #2
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ff50 	bl	8002350 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d136      	bne.n	800252a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d109      	bne.n	80024da <I2S_IRQHandler+0xbc>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d0:	2b80      	cmp	r3, #128	; 0x80
 80024d2:	d102      	bne.n	80024da <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff45 	bl	8002364 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d122      	bne.n	800252a <I2S_IRQHandler+0x10c>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	d11b      	bne.n	800252a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002500:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f043 0204 	orr.w	r2, r3, #4
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff13 	bl	8002350 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d002      	beq.n	8002560 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 800255a:	2302      	movs	r3, #2
 800255c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800255e:	e160      	b.n	8002822 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 800256c:	887b      	ldrh	r3, [r7, #2]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e15a      	b.n	800282c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002582:	2302      	movs	r3, #2
 8002584:	e152      	b.n	800282c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d002      	beq.n	80025b2 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d114      	bne.n	80025dc <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 80025b2:	887b      	ldrh	r3, [r7, #2]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80025bc:	887b      	ldrh	r3, [r7, #2]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80025d0:	887b      	ldrh	r3, [r7, #2]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	865a      	strh	r2, [r3, #50]	; 0x32
 80025da:	e00b      	b.n	80025f4 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	887a      	ldrh	r2, [r7, #2]
 80025e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	887a      	ldrh	r2, [r7, #2]
 80025f2:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2205      	movs	r2, #5
 80025fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	4a8b      	ldr	r2, [pc, #556]	; (8002834 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002608:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260e:	4a8a      	ldr	r2, [pc, #552]	; (8002838 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002610:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	4a89      	ldr	r2, [pc, #548]	; (800283c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002618:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	4a85      	ldr	r2, [pc, #532]	; (8002834 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002620:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002626:	4a84      	ldr	r2, [pc, #528]	; (8002838 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002628:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	4a83      	ldr	r2, [pc, #524]	; (800283c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002630:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263c:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002644:	d002      	beq.n	800264c <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d16b      	bne.n	8002724 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a79      	ldr	r2, [pc, #484]	; (8002840 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800265e:	4b79      	ldr	r3, [pc, #484]	; (8002844 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002660:	e001      	b.n	8002666 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002666:	330c      	adds	r3, #12
 8002668:	4619      	mov	r1, r3
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002672:	b29b      	uxth	r3, r3
 8002674:	f7ff f872 	bl	800175c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a70      	ldr	r2, [pc, #448]	; (8002840 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002682:	4b70      	ldr	r3, [pc, #448]	; (8002844 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002684:	e001      	b.n	800268a <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	496b      	ldr	r1, [pc, #428]	; (8002840 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002692:	428b      	cmp	r3, r1
 8002694:	d101      	bne.n	800269a <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002696:	4b6b      	ldr	r3, [pc, #428]	; (8002844 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002698:	e001      	b.n	800269e <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 800269a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6819      	ldr	r1, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	330c      	adds	r3, #12
 80026b8:	461a      	mov	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f7ff f84c 	bl	800175c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0202 	orr.w	r2, r2, #2
 80026d2:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e2:	f000 809e 	beq.w	8002822 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a55      	ldr	r2, [pc, #340]	; (8002840 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80026f0:	4b54      	ldr	r3, [pc, #336]	; (8002844 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80026f2:	e001      	b.n	80026f8 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80026f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4950      	ldr	r1, [pc, #320]	; (8002840 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002700:	428b      	cmp	r3, r1
 8002702:	d101      	bne.n	8002708 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002704:	4b4f      	ldr	r3, [pc, #316]	; (8002844 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002706:	e001      	b.n	800270c <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002708:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800270c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002710:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69da      	ldr	r2, [r3, #28]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002720:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002722:	e07e      	b.n	8002822 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002732:	d10a      	bne.n	800274a <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800274a:	f107 0308 	add.w	r3, r7, #8
 800274e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6819      	ldr	r1, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a38      	ldr	r2, [pc, #224]	; (8002840 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002764:	e001      	b.n	800276a <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002766:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800276a:	330c      	adds	r3, #12
 800276c:	461a      	mov	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	b29b      	uxth	r3, r3
 8002774:	f7fe fff2 	bl	800175c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a30      	ldr	r2, [pc, #192]	; (8002840 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002782:	4b30      	ldr	r3, [pc, #192]	; (8002844 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002784:	e001      	b.n	800278a <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002786:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	492b      	ldr	r1, [pc, #172]	; (8002840 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002792:	428b      	cmp	r3, r1
 8002794:	d101      	bne.n	800279a <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002796:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002798:	e001      	b.n	800279e <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 800279a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800279e:	f042 0202 	orr.w	r2, r2, #2
 80027a2:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	4619      	mov	r1, r3
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f7fe ffcd 	bl	800175c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e0:	d01e      	beq.n	8002820 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a16      	ldr	r2, [pc, #88]	; (8002840 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80027ee:	e001      	b.n	80027f4 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80027f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4911      	ldr	r1, [pc, #68]	; (8002840 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80027fc:	428b      	cmp	r3, r1
 80027fe:	d101      	bne.n	8002804 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002802:	e001      	b.n	8002808 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800280c:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69da      	ldr	r2, [r3, #28]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800281c:	61da      	str	r2, [r3, #28]
 800281e:	e000      	b.n	8002822 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002820:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 800282a:	7ffb      	ldrb	r3, [r7, #31]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	08002af1 	.word	0x08002af1
 8002838:	08002b0d 	.word	0x08002b0d
 800283c:	08002c45 	.word	0x08002c45
 8002840:	40003800 	.word	0x40003800
 8002844:	40003400 	.word	0x40003400

08002848 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4aa2      	ldr	r2, [pc, #648]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d101      	bne.n	8002866 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002862:	4ba2      	ldr	r3, [pc, #648]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002864:	e001      	b.n	800286a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002866:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a9b      	ldr	r2, [pc, #620]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d101      	bne.n	8002884 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002880:	4b9a      	ldr	r3, [pc, #616]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002882:	e001      	b.n	8002888 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002884:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002894:	d004      	beq.n	80028a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 8099 	bne.w	80029d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d107      	bne.n	80028ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 fa05 	bl	8002cc4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d107      	bne.n	80028d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 faa8 	bl	8002e24 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028da:	2b40      	cmp	r3, #64	; 0x40
 80028dc:	d13a      	bne.n	8002954 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d035      	beq.n	8002954 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a7e      	ldr	r2, [pc, #504]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80028f2:	4b7e      	ldr	r3, [pc, #504]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80028f4:	e001      	b.n	80028fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80028f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4979      	ldr	r1, [pc, #484]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002902:	428b      	cmp	r3, r1
 8002904:	d101      	bne.n	800290a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002906:	4b79      	ldr	r3, [pc, #484]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002908:	e001      	b.n	800290e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800290a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800290e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002912:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002922:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f043 0202 	orr.w	r2, r3, #2
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff fcfe 	bl	8002350 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b08      	cmp	r3, #8
 800295c:	f040 80be 	bne.w	8002adc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80b8 	beq.w	8002adc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800297a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a59      	ldr	r2, [pc, #356]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d101      	bne.n	800298a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002986:	4b59      	ldr	r3, [pc, #356]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002988:	e001      	b.n	800298e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800298a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4954      	ldr	r1, [pc, #336]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002996:	428b      	cmp	r3, r1
 8002998:	d101      	bne.n	800299e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800299a:	4b54      	ldr	r3, [pc, #336]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800299c:	e001      	b.n	80029a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800299e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029a6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f043 0204 	orr.w	r2, r3, #4
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fcc0 	bl	8002350 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80029d0:	e084      	b.n	8002adc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d107      	bne.n	80029ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f99e 	bl	8002d28 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f9dd 	bl	8002dc0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d12f      	bne.n	8002a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d02a      	beq.n	8002a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a28:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2e      	ldr	r2, [pc, #184]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d101      	bne.n	8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002a34:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a36:	e001      	b.n	8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002a38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4929      	ldr	r1, [pc, #164]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a44:	428b      	cmp	r3, r1
 8002a46:	d101      	bne.n	8002a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002a48:	4b28      	ldr	r3, [pc, #160]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a4a:	e001      	b.n	8002a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a54:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f043 0202 	orr.w	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff fc70 	bl	8002350 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d131      	bne.n	8002ade <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d02c      	beq.n	8002ade <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002a8e:	4b17      	ldr	r3, [pc, #92]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002a90:	e001      	b.n	8002a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002a92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4912      	ldr	r1, [pc, #72]	; (8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002a9e:	428b      	cmp	r3, r1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002aa4:	e001      	b.n	8002aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002aae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002abe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	f043 0204 	orr.w	r2, r3, #4
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fc3b 	bl	8002350 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ada:	e000      	b.n	8002ade <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002adc:	bf00      	nop
}
 8002ade:	bf00      	nop
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40003800 	.word	0x40003800
 8002aec:	40003400 	.word	0x40003400

08002af0 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f7fe f8c4 	bl	8000c8c <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 8084 	bne.w	8002c2c <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d13c      	bne.n	8002ba8 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b3c:	d006      	beq.n	8002b4c <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d116      	bne.n	8002b7a <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a3a      	ldr	r2, [pc, #232]	; (8002c3c <I2SEx_TxRxDMACplt+0x130>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <I2SEx_TxRxDMACplt+0x4e>
 8002b56:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <I2SEx_TxRxDMACplt+0x134>)
 8002b58:	e001      	b.n	8002b5e <I2SEx_TxRxDMACplt+0x52>
 8002b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4935      	ldr	r1, [pc, #212]	; (8002c3c <I2SEx_TxRxDMACplt+0x130>)
 8002b66:	428b      	cmp	r3, r1
 8002b68:	d101      	bne.n	8002b6e <I2SEx_TxRxDMACplt+0x62>
 8002b6a:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <I2SEx_TxRxDMACplt+0x134>)
 8002b6c:	e001      	b.n	8002b72 <I2SEx_TxRxDMACplt+0x66>
 8002b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	e007      	b.n	8002b8a <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f7fe f894 	bl	8000cd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d13c      	bne.n	8002c2c <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc0:	d006      	beq.n	8002bd0 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d108      	bne.n	8002be2 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0202 	bic.w	r2, r2, #2
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	e015      	b.n	8002c0e <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <I2SEx_TxRxDMACplt+0x130>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <I2SEx_TxRxDMACplt+0xe4>
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <I2SEx_TxRxDMACplt+0x134>)
 8002bee:	e001      	b.n	8002bf4 <I2SEx_TxRxDMACplt+0xe8>
 8002bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4910      	ldr	r1, [pc, #64]	; (8002c3c <I2SEx_TxRxDMACplt+0x130>)
 8002bfc:	428b      	cmp	r3, r1
 8002bfe:	d101      	bne.n	8002c04 <I2SEx_TxRxDMACplt+0xf8>
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <I2SEx_TxRxDMACplt+0x134>)
 8002c02:	e001      	b.n	8002c08 <I2SEx_TxRxDMACplt+0xfc>
 8002c04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c08:	f022 0202 	bic.w	r2, r2, #2
 8002c0c:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7fe f852 	bl	8000cd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f7fe f84f 	bl	8000cd0 <HAL_I2SEx_TxRxCpltCallback>
}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40003800 	.word	0x40003800
 8002c40:	40003400 	.word	0x40003400

08002c44 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0203 	bic.w	r2, r2, #3
 8002c60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <I2SEx_TxRxDMAError+0x78>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d101      	bne.n	8002c70 <I2SEx_TxRxDMAError+0x2c>
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <I2SEx_TxRxDMAError+0x7c>)
 8002c6e:	e001      	b.n	8002c74 <I2SEx_TxRxDMAError+0x30>
 8002c70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4910      	ldr	r1, [pc, #64]	; (8002cbc <I2SEx_TxRxDMAError+0x78>)
 8002c7c:	428b      	cmp	r3, r1
 8002c7e:	d101      	bne.n	8002c84 <I2SEx_TxRxDMAError+0x40>
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <I2SEx_TxRxDMAError+0x7c>)
 8002c82:	e001      	b.n	8002c88 <I2SEx_TxRxDMAError+0x44>
 8002c84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c88:	f022 0203 	bic.w	r2, r2, #3
 8002c8c:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f043 0208 	orr.w	r2, r3, #8
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff fb4e 	bl	8002350 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40003800 	.word	0x40003800
 8002cc0:	40003400 	.word	0x40003400

08002cc4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	1c99      	adds	r1, r3, #2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6251      	str	r1, [r2, #36]	; 0x24
 8002cd6:	881a      	ldrh	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d113      	bne.n	8002d1e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d106      	bne.n	8002d1e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7fd ffd9 	bl	8000cd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	1c99      	adds	r1, r3, #2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6251      	str	r1, [r2, #36]	; 0x24
 8002d3a:	8819      	ldrh	r1, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <I2SEx_TxISR_I2SExt+0x90>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <I2SEx_TxISR_I2SExt+0x22>
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <I2SEx_TxISR_I2SExt+0x94>)
 8002d48:	e001      	b.n	8002d4e <I2SEx_TxISR_I2SExt+0x26>
 8002d4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d4e:	460a      	mov	r2, r1
 8002d50:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d121      	bne.n	8002dae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <I2SEx_TxISR_I2SExt+0x90>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <I2SEx_TxISR_I2SExt+0x50>
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <I2SEx_TxISR_I2SExt+0x94>)
 8002d76:	e001      	b.n	8002d7c <I2SEx_TxISR_I2SExt+0x54>
 8002d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	490d      	ldr	r1, [pc, #52]	; (8002db8 <I2SEx_TxISR_I2SExt+0x90>)
 8002d84:	428b      	cmp	r3, r1
 8002d86:	d101      	bne.n	8002d8c <I2SEx_TxISR_I2SExt+0x64>
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <I2SEx_TxISR_I2SExt+0x94>)
 8002d8a:	e001      	b.n	8002d90 <I2SEx_TxISR_I2SExt+0x68>
 8002d8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d94:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d106      	bne.n	8002dae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7fd ff91 	bl	8000cd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40003800 	.word	0x40003800
 8002dbc:	40003400 	.word	0x40003400

08002dc0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68d8      	ldr	r0, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	1c99      	adds	r1, r3, #2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002dd8:	b282      	uxth	r2, r0
 8002dda:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d113      	bne.n	8002e1c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e02:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd ff5a 	bl	8000cd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a20      	ldr	r2, [pc, #128]	; (8002eb4 <I2SEx_RxISR_I2SExt+0x90>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <I2SEx_RxISR_I2SExt+0x16>
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <I2SEx_RxISR_I2SExt+0x94>)
 8002e38:	e001      	b.n	8002e3e <I2SEx_RxISR_I2SExt+0x1a>
 8002e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e3e:	68d8      	ldr	r0, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	1c99      	adds	r1, r3, #2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002e4a:	b282      	uxth	r2, r0
 8002e4c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d121      	bne.n	8002eaa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <I2SEx_RxISR_I2SExt+0x90>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d101      	bne.n	8002e74 <I2SEx_RxISR_I2SExt+0x50>
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <I2SEx_RxISR_I2SExt+0x94>)
 8002e72:	e001      	b.n	8002e78 <I2SEx_RxISR_I2SExt+0x54>
 8002e74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	490d      	ldr	r1, [pc, #52]	; (8002eb4 <I2SEx_RxISR_I2SExt+0x90>)
 8002e80:	428b      	cmp	r3, r1
 8002e82:	d101      	bne.n	8002e88 <I2SEx_RxISR_I2SExt+0x64>
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <I2SEx_RxISR_I2SExt+0x94>)
 8002e86:	e001      	b.n	8002e8c <I2SEx_RxISR_I2SExt+0x68>
 8002e88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e8c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e90:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7fd ff13 	bl	8000cd0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40003800 	.word	0x40003800
 8002eb8:	40003400 	.word	0x40003400

08002ebc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ebe:	b08f      	sub	sp, #60	; 0x3c
 8002ec0:	af0a      	add	r7, sp, #40	; 0x28
 8002ec2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e10f      	b.n	80030ee <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d106      	bne.n	8002eee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f005 fb39 	bl	8008560 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d102      	bne.n	8002f08 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f001 ffe6 	bl	8004ede <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	687e      	ldr	r6, [r7, #4]
 8002f1a:	466d      	mov	r5, sp
 8002f1c:	f106 0410 	add.w	r4, r6, #16
 8002f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f30:	1d33      	adds	r3, r6, #4
 8002f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f34:	6838      	ldr	r0, [r7, #0]
 8002f36:	f001 febd 	bl	8004cb4 <USB_CoreInit>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0d0      	b.n	80030ee <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f001 ffd4 	bl	8004f00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	e04a      	b.n	8002ff4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	333d      	adds	r3, #61	; 0x3d
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	333c      	adds	r3, #60	; 0x3c
 8002f82:	7bfa      	ldrb	r2, [r7, #15]
 8002f84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	b298      	uxth	r0, r3
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3342      	adds	r3, #66	; 0x42
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	333f      	adds	r3, #63	; 0x3f
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3344      	adds	r3, #68	; 0x44
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3348      	adds	r3, #72	; 0x48
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3350      	adds	r3, #80	; 0x50
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d3af      	bcc.n	8002f5e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	73fb      	strb	r3, [r7, #15]
 8003002:	e044      	b.n	800308e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800302c:	7bfa      	ldrb	r2, [r7, #15]
 800302e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003046:	7bfa      	ldrb	r2, [r7, #15]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800305c:	7bfa      	ldrb	r2, [r7, #15]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	3301      	adds	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	d3b5      	bcc.n	8003004 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	687e      	ldr	r6, [r7, #4]
 80030a0:	466d      	mov	r5, sp
 80030a2:	f106 0410 	add.w	r4, r6, #16
 80030a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80030b6:	1d33      	adds	r3, r6, #4
 80030b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ba:	6838      	ldr	r0, [r7, #0]
 80030bc:	f001 ff4a 	bl	8004f54 <USB_DevInit>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00d      	b.n	80030ee <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f002 ff92 	bl	8006010 <USB_DevDisconnect>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_PCD_Start+0x1c>
 800310e:	2302      	movs	r3, #2
 8003110:	e020      	b.n	8003154 <HAL_PCD_Start+0x5e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	2b01      	cmp	r3, #1
 8003120:	d109      	bne.n	8003136 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003126:	2b01      	cmp	r3, #1
 8003128:	d005      	beq.n	8003136 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f001 febe 	bl	8004ebc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f002 ff42 	bl	8005fce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b08d      	sub	sp, #52	; 0x34
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f003 f800 	bl	8006178 <USB_GetMode>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 839d 	bne.w	80038ba <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f002 ff64 	bl	8006052 <USB_ReadInterrupts>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8393 	beq.w	80038b8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f002 ff5b 	bl	8006052 <USB_ReadInterrupts>
 800319c:	4603      	mov	r3, r0
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d107      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695a      	ldr	r2, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f002 0202 	and.w	r2, r2, #2
 80031b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 ff49 	bl	8006052 <USB_ReadInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b10      	cmp	r3, #16
 80031c8:	d161      	bne.n	800328e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0210 	bic.w	r2, r2, #16
 80031d8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f003 020f 	and.w	r2, r3, #15
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	3304      	adds	r3, #4
 80031f8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	0c5b      	lsrs	r3, r3, #17
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	2b02      	cmp	r3, #2
 8003204:	d124      	bne.n	8003250 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d035      	beq.n	800327e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800321c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003220:	b29b      	uxth	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	6a38      	ldr	r0, [r7, #32]
 8003226:	f002 fdaf 	bl	8005d88 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003236:	441a      	add	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	699a      	ldr	r2, [r3, #24]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003248:	441a      	add	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	619a      	str	r2, [r3, #24]
 800324e:	e016      	b.n	800327e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	0c5b      	lsrs	r3, r3, #17
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	2b06      	cmp	r3, #6
 800325a:	d110      	bne.n	800327e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003262:	2208      	movs	r2, #8
 8003264:	4619      	mov	r1, r3
 8003266:	6a38      	ldr	r0, [r7, #32]
 8003268:	f002 fd8e 	bl	8005d88 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003278:	441a      	add	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699a      	ldr	r2, [r3, #24]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0210 	orr.w	r2, r2, #16
 800328c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f002 fedd 	bl	8006052 <USB_ReadInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032a2:	d16e      	bne.n	8003382 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 fee3 	bl	8006078 <USB_ReadDevAllOutEpInterrupt>
 80032b2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032b4:	e062      	b.n	800337c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d057      	beq.n	8003370 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f002 ff08 	bl	80060e0 <USB_ReadDevOutEPInterrupt>
 80032d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00c      	beq.n	80032f6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e8:	461a      	mov	r2, r3
 80032ea:	2301      	movs	r3, #1
 80032ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fdb1 	bl	8003e58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00c      	beq.n	800331a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330c:	461a      	mov	r2, r3
 800330e:	2308      	movs	r3, #8
 8003310:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003312:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 feab 	bl	8004070 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003330:	461a      	mov	r2, r3
 8003332:	2310      	movs	r3, #16
 8003334:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	2320      	movs	r3, #32
 8003350:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d009      	beq.n	8003370 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	4413      	add	r3, r2
 8003364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003368:	461a      	mov	r2, r3
 800336a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800336e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	3301      	adds	r3, #1
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	2b00      	cmp	r3, #0
 8003380:	d199      	bne.n	80032b6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f002 fe63 	bl	8006052 <USB_ReadInterrupts>
 800338c:	4603      	mov	r3, r0
 800338e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003392:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003396:	f040 80c0 	bne.w	800351a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f002 fe84 	bl	80060ac <USB_ReadDevAllInEpInterrupt>
 80033a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80033aa:	e0b2      	b.n	8003512 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 80a7 	beq.w	8003506 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f002 feaa 	bl	800611c <USB_ReadDevInEPInterrupt>
 80033c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d057      	beq.n	8003484 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	2201      	movs	r2, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69f9      	ldr	r1, [r7, #28]
 80033f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033f4:	4013      	ands	r3, r2
 80033f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003404:	461a      	mov	r2, r3
 8003406:	2301      	movs	r3, #1
 8003408:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d132      	bne.n	8003478 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	3348      	adds	r3, #72	; 0x48
 8003422:	6819      	ldr	r1, [r3, #0]
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4403      	add	r3, r0
 8003432:	3344      	adds	r3, #68	; 0x44
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4419      	add	r1, r3
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4403      	add	r3, r0
 8003446:	3348      	adds	r3, #72	; 0x48
 8003448:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d113      	bne.n	8003478 <HAL_PCD_IRQHandler+0x31c>
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3350      	adds	r3, #80	; 0x50
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d108      	bne.n	8003478 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003470:	461a      	mov	r2, r3
 8003472:	2101      	movs	r1, #1
 8003474:	f002 feb2 	bl	80061dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	b2db      	uxtb	r3, r3
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f005 f8fd 	bl	800867e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	4413      	add	r3, r2
 8003496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800349a:	461a      	mov	r2, r3
 800349c:	2308      	movs	r3, #8
 800349e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b6:	461a      	mov	r2, r3
 80034b8:	2310      	movs	r3, #16
 80034ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d2:	461a      	mov	r2, r3
 80034d4:	2340      	movs	r3, #64	; 0x40
 80034d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ee:	461a      	mov	r2, r3
 80034f0:	2302      	movs	r3, #2
 80034f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fc1b 	bl	8003d3c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	3301      	adds	r3, #1
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	2b00      	cmp	r3, #0
 8003516:	f47f af49 	bne.w	80033ac <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f002 fd97 	bl	8006052 <USB_ReadInterrupts>
 8003524:	4603      	mov	r3, r0
 8003526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800352a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800352e:	d122      	bne.n	8003576 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800354a:	2b01      	cmp	r3, #1
 800354c:	d108      	bne.n	8003560 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003556:	2100      	movs	r1, #0
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fe27 	bl	80041ac <HAL_PCDEx_LPM_Callback>
 800355e:	e002      	b.n	8003566 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f005 f903 	bl	800876c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695a      	ldr	r2, [r3, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f002 fd69 	bl	8006052 <USB_ReadInterrupts>
 8003580:	4603      	mov	r3, r0
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d112      	bne.n	80035b2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d102      	bne.n	80035a2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f005 f8bf 	bl	8008720 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80035b0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f002 fd4b 	bl	8006052 <USB_ReadInterrupts>
 80035bc:	4603      	mov	r3, r0
 80035be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c6:	f040 80c7 	bne.w	8003758 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2110      	movs	r1, #16
 80035e4:	4618      	mov	r0, r3
 80035e6:	f001 fe19 	bl	800521c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ee:	e056      	b.n	800369e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fc:	461a      	mov	r2, r3
 80035fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003602:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003614:	0151      	lsls	r1, r2, #5
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	440a      	add	r2, r1
 800361a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800361e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003622:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	440a      	add	r2, r1
 800363a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800363e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003642:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003650:	461a      	mov	r2, r3
 8003652:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003656:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003668:	0151      	lsls	r1, r2, #5
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	440a      	add	r2, r1
 800366e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003676:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003688:	0151      	lsls	r1, r2, #5
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	440a      	add	r2, r1
 800368e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003692:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003696:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	3301      	adds	r3, #1
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d3a3      	bcc.n	80035f0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d016      	beq.n	80036f2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d4:	f043 030b 	orr.w	r3, r3, #11
 80036d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ea:	f043 030b 	orr.w	r3, r3, #11
 80036ee:	6453      	str	r3, [r2, #68]	; 0x44
 80036f0:	e015      	b.n	800371e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003700:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003704:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003708:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003718:	f043 030b 	orr.w	r3, r3, #11
 800371c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800372c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003730:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003742:	461a      	mov	r2, r3
 8003744:	f002 fd4a 	bl	80061dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f002 fc78 	bl	8006052 <USB_ReadInterrupts>
 8003762:	4603      	mov	r3, r0
 8003764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376c:	d124      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f002 fd0e 	bl	8006194 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f001 fdae 	bl	80052de <USB_GetDevSpeed>
 8003782:	4603      	mov	r3, r0
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681c      	ldr	r4, [r3, #0]
 800378e:	f001 f947 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8003792:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	4620      	mov	r0, r4
 800379e:	f001 faeb 	bl	8004d78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f004 ff93 	bl	80086ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f002 fc48 	bl	8006052 <USB_ReadInterrupts>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d10a      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f004 ff70 	bl	80086b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f002 0208 	and.w	r2, r2, #8
 80037e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f002 fc33 	bl	8006052 <USB_ReadInterrupts>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f6:	d10f      	bne.n	8003818 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	4619      	mov	r1, r3
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f004 ffd2 	bl	80087ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f002 fc18 	bl	8006052 <USB_ReadInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003828:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800382c:	d10f      	bne.n	800384e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	b2db      	uxtb	r3, r3
 8003836:	4619      	mov	r1, r3
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f004 ffa5 	bl	8008788 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800384c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f002 fbfd 	bl	8006052 <USB_ReadInterrupts>
 8003858:	4603      	mov	r3, r0
 800385a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003862:	d10a      	bne.n	800387a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f004 ffb3 	bl	80087d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f002 fbe7 	bl	8006052 <USB_ReadInterrupts>
 8003884:	4603      	mov	r3, r0
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b04      	cmp	r3, #4
 800388c:	d115      	bne.n	80038ba <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f004 ffa3 	bl	80087ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	e000      	b.n	80038ba <HAL_PCD_IRQHandler+0x75e>
      return;
 80038b8:	bf00      	nop
    }
  }
}
 80038ba:	3734      	adds	r7, #52	; 0x34
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd90      	pop	{r4, r7, pc}

080038c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_PCD_SetAddress+0x1a>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e013      	b.n	8003902 <HAL_PCD_SetAddress+0x42>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f002 fb45 	bl	8005f82 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	4608      	mov	r0, r1
 8003914:	4611      	mov	r1, r2
 8003916:	461a      	mov	r2, r3
 8003918:	4603      	mov	r3, r0
 800391a:	70fb      	strb	r3, [r7, #3]
 800391c:	460b      	mov	r3, r1
 800391e:	803b      	strh	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800392c:	2b00      	cmp	r3, #0
 800392e:	da0f      	bge.n	8003950 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	f003 020f 	and.w	r2, r3, #15
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	3338      	adds	r3, #56	; 0x38
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	3304      	adds	r3, #4
 8003946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	705a      	strb	r2, [r3, #1]
 800394e:	e00f      	b.n	8003970 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	f003 020f 	and.w	r2, r3, #15
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	3304      	adds	r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	b2da      	uxtb	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800397c:	883a      	ldrh	r2, [r7, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	78ba      	ldrb	r2, [r7, #2]
 8003986:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800399a:	78bb      	ldrb	r3, [r7, #2]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d102      	bne.n	80039a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_PCD_EP_Open+0xaa>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e00e      	b.n	80039d2 <HAL_PCD_EP_Open+0xc8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68f9      	ldr	r1, [r7, #12]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f001 fcb0 	bl	8005328 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80039d0:	7afb      	ldrb	r3, [r7, #11]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	da0f      	bge.n	8003a0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	3338      	adds	r3, #56	; 0x38
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	3304      	adds	r3, #4
 8003a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	705a      	strb	r2, [r3, #1]
 8003a0c:	e00f      	b.n	8003a2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	f003 020f 	and.w	r2, r3, #15
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	3304      	adds	r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_PCD_EP_Close+0x6e>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e00e      	b.n	8003a66 <HAL_PCD_EP_Close+0x8c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68f9      	ldr	r1, [r7, #12]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 fcee 	bl	8005438 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a7e:	7afb      	ldrb	r3, [r7, #11]
 8003a80:	f003 020f 	and.w	r2, r3, #15
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	3304      	adds	r3, #4
 8003a96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2200      	movs	r2, #0
 8003aae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d102      	bne.n	8003aca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aca:	7afb      	ldrb	r3, [r7, #11]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d109      	bne.n	8003ae8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6979      	ldr	r1, [r7, #20]
 8003ae2:	f001 ffc9 	bl	8005a78 <USB_EP0StartXfer>
 8003ae6:	e008      	b.n	8003afa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	6979      	ldr	r1, [r7, #20]
 8003af6:	f001 fd7b 	bl	80055f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 020f 	and.w	r2, r3, #15
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	460b      	mov	r3, r1
 8003b42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b44:	7afb      	ldrb	r3, [r7, #11]
 8003b46:	f003 020f 	and.w	r2, r3, #15
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	3338      	adds	r3, #56	; 0x38
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	3304      	adds	r3, #4
 8003b5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2201      	movs	r2, #1
 8003b72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b74:	7afb      	ldrb	r3, [r7, #11]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d102      	bne.n	8003b8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	6979      	ldr	r1, [r7, #20]
 8003ba6:	f001 ff67 	bl	8005a78 <USB_EP0StartXfer>
 8003baa:	e008      	b.n	8003bbe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6979      	ldr	r1, [r7, #20]
 8003bba:	f001 fd19 	bl	80055f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 020f 	and.w	r2, r3, #15
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d901      	bls.n	8003be6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e050      	b.n	8003c88 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	da0f      	bge.n	8003c0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	f003 020f 	and.w	r2, r3, #15
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	3338      	adds	r3, #56	; 0x38
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4413      	add	r3, r2
 8003c02:	3304      	adds	r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	705a      	strb	r2, [r3, #1]
 8003c0c:	e00d      	b.n	8003c2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	4413      	add	r3, r2
 8003c20:	3304      	adds	r3, #4
 8003c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_PCD_EP_SetStall+0x82>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e01e      	b.n	8003c88 <HAL_PCD_EP_SetStall+0xc0>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f002 f8be 	bl	8005dda <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	b2d9      	uxtb	r1, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f002 faaf 	bl	80061dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	f003 020f 	and.w	r2, r3, #15
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d901      	bls.n	8003cae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e042      	b.n	8003d34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	da0f      	bge.n	8003cd6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	f003 020f 	and.w	r2, r3, #15
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	3338      	adds	r3, #56	; 0x38
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	3304      	adds	r3, #4
 8003ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	705a      	strb	r2, [r3, #1]
 8003cd4:	e00f      	b.n	8003cf6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	f003 020f 	and.w	r2, r3, #15
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4413      	add	r3, r2
 8003cec:	3304      	adds	r3, #4
 8003cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_PCD_EP_ClrStall+0x86>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e00e      	b.n	8003d34 <HAL_PCD_EP_ClrStall+0xa4>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68f9      	ldr	r1, [r7, #12]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f002 f8c6 	bl	8005eb6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	; 0x28
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	3338      	adds	r3, #56	; 0x38
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3304      	adds	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	699a      	ldr	r2, [r3, #24]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d901      	bls.n	8003d74 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e06c      	b.n	8003e4e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d902      	bls.n	8003d90 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	3303      	adds	r3, #3
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d98:	e02b      	b.n	8003df2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d902      	bls.n	8003db6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3303      	adds	r3, #3
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	68d9      	ldr	r1, [r3, #12]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	6978      	ldr	r0, [r7, #20]
 8003dd6:	f001 ffa2 	bl	8005d1e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	441a      	add	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	441a      	add	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d809      	bhi.n	8003e1c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d203      	bcs.n	8003e1c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1be      	bne.n	8003d9a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d811      	bhi.n	8003e4c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	2201      	movs	r2, #1
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	6939      	ldr	r1, [r7, #16]
 8003e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e48:	4013      	ands	r3, r2
 8003e4a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3720      	adds	r7, #32
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	333c      	adds	r3, #60	; 0x3c
 8003e70:	3304      	adds	r3, #4
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	f040 80a0 	bne.w	8003fd0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d015      	beq.n	8003ec6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a72      	ldr	r2, [pc, #456]	; (8004068 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	f240 80dd 	bls.w	800405e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 80d7 	beq.w	800405e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ec2:	6093      	str	r3, [r2, #8]
 8003ec4:	e0cb      	b.n	800405e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d009      	beq.n	8003ee4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	461a      	mov	r2, r3
 8003ede:	2320      	movs	r3, #32
 8003ee0:	6093      	str	r3, [r2, #8]
 8003ee2:	e0bc      	b.n	800405e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 80b7 	bne.w	800405e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a5d      	ldr	r2, [pc, #372]	; (8004068 <PCD_EP_OutXfrComplete_int+0x210>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d90f      	bls.n	8003f18 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f14:	6093      	str	r3, [r2, #8]
 8003f16:	e0a2      	b.n	800405e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f2a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	0159      	lsls	r1, r3, #5
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	440b      	add	r3, r1
 8003f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003f3e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4403      	add	r3, r0
 8003f4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f52:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f66:	6819      	ldr	r1, [r3, #0]
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4403      	add	r3, r0
 8003f76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4419      	add	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4403      	add	r3, r0
 8003f8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f90:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d114      	bne.n	8003fc2 <PCD_EP_OutXfrComplete_int+0x16a>
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d108      	bne.n	8003fc2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6818      	ldr	r0, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fba:	461a      	mov	r2, r3
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	f002 f90d 	bl	80061dc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f004 fb3d 	bl	8008648 <HAL_PCD_DataOutStageCallback>
 8003fce:	e046      	b.n	800405e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a26      	ldr	r2, [pc, #152]	; (800406c <PCD_EP_OutXfrComplete_int+0x214>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d124      	bne.n	8004022 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ff4:	6093      	str	r3, [r2, #8]
 8003ff6:	e032      	b.n	800405e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400e:	461a      	mov	r2, r3
 8004010:	2320      	movs	r3, #32
 8004012:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f004 fb14 	bl	8008648 <HAL_PCD_DataOutStageCallback>
 8004020:	e01d      	b.n	800405e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d114      	bne.n	8004052 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d108      	bne.n	8004052 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800404a:	461a      	mov	r2, r3
 800404c:	2100      	movs	r1, #0
 800404e:	f002 f8c5 	bl	80061dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	4619      	mov	r1, r3
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f004 faf5 	bl	8008648 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	4f54300a 	.word	0x4f54300a
 800406c:	4f54310a 	.word	0x4f54310a

08004070 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	333c      	adds	r3, #60	; 0x3c
 8004088:	3304      	adds	r3, #4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d90e      	bls.n	80040c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040bc:	461a      	mov	r2, r3
 80040be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f004 faad 	bl	8008624 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d90c      	bls.n	80040ec <PCD_EP_OutSetupPacket_int+0x7c>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d108      	bne.n	80040ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040e4:	461a      	mov	r2, r3
 80040e6:	2101      	movs	r1, #1
 80040e8:	f002 f878 	bl	80061dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	4f54300a 	.word	0x4f54300a

080040fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	70fb      	strb	r3, [r7, #3]
 8004108:	4613      	mov	r3, r2
 800410a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d107      	bne.n	800412a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800411a:	883b      	ldrh	r3, [r7, #0]
 800411c:	0419      	lsls	r1, r3, #16
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	430a      	orrs	r2, r1
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
 8004128:	e028      	b.n	800417c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4413      	add	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]
 800413c:	e00d      	b.n	800415a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	3340      	adds	r3, #64	; 0x40
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	4413      	add	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	3301      	adds	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	7bfa      	ldrb	r2, [r7, #15]
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	3b01      	subs	r3, #1
 8004160:	429a      	cmp	r2, r3
 8004162:	d3ec      	bcc.n	800413e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004164:	883b      	ldrh	r3, [r7, #0]
 8004166:	0418      	lsls	r0, r3, #16
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6819      	ldr	r1, [r3, #0]
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	3b01      	subs	r3, #1
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	4302      	orrs	r2, r0
 8004174:	3340      	adds	r3, #64	; 0x40
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	460b      	mov	r3, r1
 8004194:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e25b      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d075      	beq.n	80042ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041e2:	4ba3      	ldr	r3, [pc, #652]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d00c      	beq.n	8004208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ee:	4ba0      	ldr	r3, [pc, #640]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d112      	bne.n	8004220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041fa:	4b9d      	ldr	r3, [pc, #628]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004206:	d10b      	bne.n	8004220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004208:	4b99      	ldr	r3, [pc, #612]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d05b      	beq.n	80042cc <HAL_RCC_OscConfig+0x108>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d157      	bne.n	80042cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e236      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004228:	d106      	bne.n	8004238 <HAL_RCC_OscConfig+0x74>
 800422a:	4b91      	ldr	r3, [pc, #580]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a90      	ldr	r2, [pc, #576]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e01d      	b.n	8004274 <HAL_RCC_OscConfig+0xb0>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x98>
 8004242:	4b8b      	ldr	r3, [pc, #556]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a8a      	ldr	r2, [pc, #552]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	4b88      	ldr	r3, [pc, #544]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a87      	ldr	r2, [pc, #540]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0xb0>
 800425c:	4b84      	ldr	r3, [pc, #528]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a83      	ldr	r2, [pc, #524]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b81      	ldr	r3, [pc, #516]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a80      	ldr	r2, [pc, #512]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 800426e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d013      	beq.n	80042a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fd f864 	bl	8001348 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004284:	f7fd f860 	bl	8001348 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e1fb      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b76      	ldr	r3, [pc, #472]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0xc0>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f7fd f850 	bl	8001348 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fd f84c 	bl	8001348 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	; 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e1e7      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	4b6c      	ldr	r3, [pc, #432]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0xe8>
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d063      	beq.n	80043a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042da:	4b65      	ldr	r3, [pc, #404]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e6:	4b62      	ldr	r3, [pc, #392]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d11c      	bne.n	800432c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f2:	4b5f      	ldr	r3, [pc, #380]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d116      	bne.n	800432c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fe:	4b5c      	ldr	r3, [pc, #368]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_RCC_OscConfig+0x152>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d001      	beq.n	8004316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e1bb      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004316:	4b56      	ldr	r3, [pc, #344]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4952      	ldr	r1, [pc, #328]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432a:	e03a      	b.n	80043a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004334:	4b4f      	ldr	r3, [pc, #316]	; (8004474 <HAL_RCC_OscConfig+0x2b0>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f7fd f805 	bl	8001348 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004342:	f7fd f801 	bl	8001348 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e19c      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	4b46      	ldr	r3, [pc, #280]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004360:	4b43      	ldr	r3, [pc, #268]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4940      	ldr	r1, [pc, #256]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]
 8004374:	e015      	b.n	80043a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004376:	4b3f      	ldr	r3, [pc, #252]	; (8004474 <HAL_RCC_OscConfig+0x2b0>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fc ffe4 	bl	8001348 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004384:	f7fc ffe0 	bl	8001348 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e17b      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	4b36      	ldr	r3, [pc, #216]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d030      	beq.n	8004410 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b6:	4b30      	ldr	r3, [pc, #192]	; (8004478 <HAL_RCC_OscConfig+0x2b4>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043bc:	f7fc ffc4 	bl	8001348 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c4:	f7fc ffc0 	bl	8001348 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e15b      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	4b26      	ldr	r3, [pc, #152]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x200>
 80043e2:	e015      	b.n	8004410 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e4:	4b24      	ldr	r3, [pc, #144]	; (8004478 <HAL_RCC_OscConfig+0x2b4>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ea:	f7fc ffad 	bl	8001348 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f2:	f7fc ffa9 	bl	8001348 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e144      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004404:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80a0 	beq.w	800455e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800441e:	2300      	movs	r3, #0
 8004420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004422:	4b13      	ldr	r3, [pc, #76]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10f      	bne.n	800444e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	4a0e      	ldr	r2, [pc, #56]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6413      	str	r3, [r2, #64]	; 0x40
 800443e:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <HAL_RCC_OscConfig+0x2ac>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444e:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_OscConfig+0x2b8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d121      	bne.n	800449e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <HAL_RCC_OscConfig+0x2b8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a07      	ldr	r2, [pc, #28]	; (800447c <HAL_RCC_OscConfig+0x2b8>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004466:	f7fc ff6f 	bl	8001348 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446c:	e011      	b.n	8004492 <HAL_RCC_OscConfig+0x2ce>
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800
 8004474:	42470000 	.word	0x42470000
 8004478:	42470e80 	.word	0x42470e80
 800447c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004480:	f7fc ff62 	bl	8001348 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e0fd      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004492:	4b81      	ldr	r3, [pc, #516]	; (8004698 <HAL_RCC_OscConfig+0x4d4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d106      	bne.n	80044b4 <HAL_RCC_OscConfig+0x2f0>
 80044a6:	4b7d      	ldr	r3, [pc, #500]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	4a7c      	ldr	r2, [pc, #496]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	6713      	str	r3, [r2, #112]	; 0x70
 80044b2:	e01c      	b.n	80044ee <HAL_RCC_OscConfig+0x32a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b05      	cmp	r3, #5
 80044ba:	d10c      	bne.n	80044d6 <HAL_RCC_OscConfig+0x312>
 80044bc:	4b77      	ldr	r3, [pc, #476]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c0:	4a76      	ldr	r2, [pc, #472]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 80044c2:	f043 0304 	orr.w	r3, r3, #4
 80044c6:	6713      	str	r3, [r2, #112]	; 0x70
 80044c8:	4b74      	ldr	r3, [pc, #464]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	4a73      	ldr	r2, [pc, #460]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6713      	str	r3, [r2, #112]	; 0x70
 80044d4:	e00b      	b.n	80044ee <HAL_RCC_OscConfig+0x32a>
 80044d6:	4b71      	ldr	r3, [pc, #452]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044da:	4a70      	ldr	r2, [pc, #448]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	6713      	str	r3, [r2, #112]	; 0x70
 80044e2:	4b6e      	ldr	r3, [pc, #440]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	4a6d      	ldr	r2, [pc, #436]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 80044e8:	f023 0304 	bic.w	r3, r3, #4
 80044ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d015      	beq.n	8004522 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f6:	f7fc ff27 	bl	8001348 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fc:	e00a      	b.n	8004514 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044fe:	f7fc ff23 	bl	8001348 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	f241 3288 	movw	r2, #5000	; 0x1388
 800450c:	4293      	cmp	r3, r2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e0bc      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004514:	4b61      	ldr	r3, [pc, #388]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0ee      	beq.n	80044fe <HAL_RCC_OscConfig+0x33a>
 8004520:	e014      	b.n	800454c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004522:	f7fc ff11 	bl	8001348 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004528:	e00a      	b.n	8004540 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fc ff0d 	bl	8001348 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f241 3288 	movw	r2, #5000	; 0x1388
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e0a6      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004540:	4b56      	ldr	r3, [pc, #344]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ee      	bne.n	800452a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800454c:	7dfb      	ldrb	r3, [r7, #23]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d105      	bne.n	800455e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004552:	4b52      	ldr	r3, [pc, #328]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	4a51      	ldr	r2, [pc, #324]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 8004558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8092 	beq.w	800468c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004568:	4b4c      	ldr	r3, [pc, #304]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 030c 	and.w	r3, r3, #12
 8004570:	2b08      	cmp	r3, #8
 8004572:	d05c      	beq.n	800462e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d141      	bne.n	8004600 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457c:	4b48      	ldr	r3, [pc, #288]	; (80046a0 <HAL_RCC_OscConfig+0x4dc>)
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004582:	f7fc fee1 	bl	8001348 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458a:	f7fc fedd 	bl	8001348 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e078      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459c:	4b3f      	ldr	r3, [pc, #252]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f0      	bne.n	800458a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	019b      	lsls	r3, r3, #6
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	085b      	lsrs	r3, r3, #1
 80045c0:	3b01      	subs	r3, #1
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	061b      	lsls	r3, r3, #24
 80045cc:	4933      	ldr	r1, [pc, #204]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d2:	4b33      	ldr	r3, [pc, #204]	; (80046a0 <HAL_RCC_OscConfig+0x4dc>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d8:	f7fc feb6 	bl	8001348 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fc feb2 	bl	8001348 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e04d      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f2:	4b2a      	ldr	r3, [pc, #168]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x41c>
 80045fe:	e045      	b.n	800468c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004600:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <HAL_RCC_OscConfig+0x4dc>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004606:	f7fc fe9f 	bl	8001348 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460e:	f7fc fe9b 	bl	8001348 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e036      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004620:	4b1e      	ldr	r3, [pc, #120]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f0      	bne.n	800460e <HAL_RCC_OscConfig+0x44a>
 800462c:	e02e      	b.n	800468c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e029      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800463a:	4b18      	ldr	r3, [pc, #96]	; (800469c <HAL_RCC_OscConfig+0x4d8>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	429a      	cmp	r2, r3
 800464c:	d11c      	bne.n	8004688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004658:	429a      	cmp	r2, r3
 800465a:	d115      	bne.n	8004688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004662:	4013      	ands	r3, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004668:	4293      	cmp	r3, r2
 800466a:	d10d      	bne.n	8004688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d106      	bne.n	8004688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d001      	beq.n	800468c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40007000 	.word	0x40007000
 800469c:	40023800 	.word	0x40023800
 80046a0:	42470060 	.word	0x42470060

080046a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0cc      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046b8:	4b68      	ldr	r3, [pc, #416]	; (800485c <HAL_RCC_ClockConfig+0x1b8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d90c      	bls.n	80046e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c6:	4b65      	ldr	r3, [pc, #404]	; (800485c <HAL_RCC_ClockConfig+0x1b8>)
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ce:	4b63      	ldr	r3, [pc, #396]	; (800485c <HAL_RCC_ClockConfig+0x1b8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d001      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0b8      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d020      	beq.n	800472e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f8:	4b59      	ldr	r3, [pc, #356]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4a58      	ldr	r2, [pc, #352]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004710:	4b53      	ldr	r3, [pc, #332]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4a52      	ldr	r2, [pc, #328]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800471a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800471c:	4b50      	ldr	r3, [pc, #320]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	494d      	ldr	r1, [pc, #308]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d044      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d107      	bne.n	8004752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004742:	4b47      	ldr	r3, [pc, #284]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d119      	bne.n	8004782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e07f      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d003      	beq.n	8004762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800475e:	2b03      	cmp	r3, #3
 8004760:	d107      	bne.n	8004772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004762:	4b3f      	ldr	r3, [pc, #252]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e06f      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004772:	4b3b      	ldr	r3, [pc, #236]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e067      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004782:	4b37      	ldr	r3, [pc, #220]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f023 0203 	bic.w	r2, r3, #3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	4934      	ldr	r1, [pc, #208]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	4313      	orrs	r3, r2
 8004792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004794:	f7fc fdd8 	bl	8001348 <HAL_GetTick>
 8004798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479a:	e00a      	b.n	80047b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800479c:	f7fc fdd4 	bl	8001348 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e04f      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	4b2b      	ldr	r3, [pc, #172]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 020c 	and.w	r2, r3, #12
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d1eb      	bne.n	800479c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047c4:	4b25      	ldr	r3, [pc, #148]	; (800485c <HAL_RCC_ClockConfig+0x1b8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d20c      	bcs.n	80047ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b22      	ldr	r3, [pc, #136]	; (800485c <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b20      	ldr	r3, [pc, #128]	; (800485c <HAL_RCC_ClockConfig+0x1b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e032      	b.n	8004852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f8:	4b19      	ldr	r3, [pc, #100]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4916      	ldr	r1, [pc, #88]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	4313      	orrs	r3, r2
 8004808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004816:	4b12      	ldr	r3, [pc, #72]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	490e      	ldr	r1, [pc, #56]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800482a:	f000 f821 	bl	8004870 <HAL_RCC_GetSysClockFreq>
 800482e:	4601      	mov	r1, r0
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	4a0a      	ldr	r2, [pc, #40]	; (8004864 <HAL_RCC_ClockConfig+0x1c0>)
 800483c:	5cd3      	ldrb	r3, [r2, r3]
 800483e:	fa21 f303 	lsr.w	r3, r1, r3
 8004842:	4a09      	ldr	r2, [pc, #36]	; (8004868 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <HAL_RCC_ClockConfig+0x1c8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7fc fd38 	bl	80012c0 <HAL_InitTick>

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40023c00 	.word	0x40023c00
 8004860:	40023800 	.word	0x40023800
 8004864:	0800a10c 	.word	0x0800a10c
 8004868:	20000008 	.word	0x20000008
 800486c:	2000000c 	.word	0x2000000c

08004870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	2300      	movs	r3, #0
 8004880:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004886:	4b63      	ldr	r3, [pc, #396]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b04      	cmp	r3, #4
 8004890:	d007      	beq.n	80048a2 <HAL_RCC_GetSysClockFreq+0x32>
 8004892:	2b08      	cmp	r3, #8
 8004894:	d008      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0x38>
 8004896:	2b00      	cmp	r3, #0
 8004898:	f040 80b4 	bne.w	8004a04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800489c:	4b5e      	ldr	r3, [pc, #376]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800489e:	60bb      	str	r3, [r7, #8]
       break;
 80048a0:	e0b3      	b.n	8004a0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048a2:	4b5e      	ldr	r3, [pc, #376]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80048a4:	60bb      	str	r3, [r7, #8]
      break;
 80048a6:	e0b0      	b.n	8004a0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048a8:	4b5a      	ldr	r3, [pc, #360]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048b2:	4b58      	ldr	r3, [pc, #352]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d04a      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048be:	4b55      	ldr	r3, [pc, #340]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	099b      	lsrs	r3, r3, #6
 80048c4:	f04f 0400 	mov.w	r4, #0
 80048c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	ea03 0501 	and.w	r5, r3, r1
 80048d4:	ea04 0602 	and.w	r6, r4, r2
 80048d8:	4629      	mov	r1, r5
 80048da:	4632      	mov	r2, r6
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	f04f 0400 	mov.w	r4, #0
 80048e4:	0154      	lsls	r4, r2, #5
 80048e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048ea:	014b      	lsls	r3, r1, #5
 80048ec:	4619      	mov	r1, r3
 80048ee:	4622      	mov	r2, r4
 80048f0:	1b49      	subs	r1, r1, r5
 80048f2:	eb62 0206 	sbc.w	r2, r2, r6
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	f04f 0400 	mov.w	r4, #0
 80048fe:	0194      	lsls	r4, r2, #6
 8004900:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004904:	018b      	lsls	r3, r1, #6
 8004906:	1a5b      	subs	r3, r3, r1
 8004908:	eb64 0402 	sbc.w	r4, r4, r2
 800490c:	f04f 0100 	mov.w	r1, #0
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	00e2      	lsls	r2, r4, #3
 8004916:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800491a:	00d9      	lsls	r1, r3, #3
 800491c:	460b      	mov	r3, r1
 800491e:	4614      	mov	r4, r2
 8004920:	195b      	adds	r3, r3, r5
 8004922:	eb44 0406 	adc.w	r4, r4, r6
 8004926:	f04f 0100 	mov.w	r1, #0
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	0262      	lsls	r2, r4, #9
 8004930:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004934:	0259      	lsls	r1, r3, #9
 8004936:	460b      	mov	r3, r1
 8004938:	4614      	mov	r4, r2
 800493a:	4618      	mov	r0, r3
 800493c:	4621      	mov	r1, r4
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f04f 0400 	mov.w	r4, #0
 8004944:	461a      	mov	r2, r3
 8004946:	4623      	mov	r3, r4
 8004948:	f7fb fcaa 	bl	80002a0 <__aeabi_uldivmod>
 800494c:	4603      	mov	r3, r0
 800494e:	460c      	mov	r4, r1
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e049      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004954:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	099b      	lsrs	r3, r3, #6
 800495a:	f04f 0400 	mov.w	r4, #0
 800495e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	ea03 0501 	and.w	r5, r3, r1
 800496a:	ea04 0602 	and.w	r6, r4, r2
 800496e:	4629      	mov	r1, r5
 8004970:	4632      	mov	r2, r6
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	f04f 0400 	mov.w	r4, #0
 800497a:	0154      	lsls	r4, r2, #5
 800497c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004980:	014b      	lsls	r3, r1, #5
 8004982:	4619      	mov	r1, r3
 8004984:	4622      	mov	r2, r4
 8004986:	1b49      	subs	r1, r1, r5
 8004988:	eb62 0206 	sbc.w	r2, r2, r6
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	f04f 0400 	mov.w	r4, #0
 8004994:	0194      	lsls	r4, r2, #6
 8004996:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800499a:	018b      	lsls	r3, r1, #6
 800499c:	1a5b      	subs	r3, r3, r1
 800499e:	eb64 0402 	sbc.w	r4, r4, r2
 80049a2:	f04f 0100 	mov.w	r1, #0
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	00e2      	lsls	r2, r4, #3
 80049ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049b0:	00d9      	lsls	r1, r3, #3
 80049b2:	460b      	mov	r3, r1
 80049b4:	4614      	mov	r4, r2
 80049b6:	195b      	adds	r3, r3, r5
 80049b8:	eb44 0406 	adc.w	r4, r4, r6
 80049bc:	f04f 0100 	mov.w	r1, #0
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	02a2      	lsls	r2, r4, #10
 80049c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049ca:	0299      	lsls	r1, r3, #10
 80049cc:	460b      	mov	r3, r1
 80049ce:	4614      	mov	r4, r2
 80049d0:	4618      	mov	r0, r3
 80049d2:	4621      	mov	r1, r4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f04f 0400 	mov.w	r4, #0
 80049da:	461a      	mov	r2, r3
 80049dc:	4623      	mov	r3, r4
 80049de:	f7fb fc5f 	bl	80002a0 <__aeabi_uldivmod>
 80049e2:	4603      	mov	r3, r0
 80049e4:	460c      	mov	r4, r1
 80049e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	0c1b      	lsrs	r3, r3, #16
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	3301      	adds	r3, #1
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	60bb      	str	r3, [r7, #8]
      break;
 8004a02:	e002      	b.n	8004a0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a04:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a06:	60bb      	str	r3, [r7, #8]
      break;
 8004a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a14:	40023800 	.word	0x40023800
 8004a18:	00f42400 	.word	0x00f42400
 8004a1c:	007a1200 	.word	0x007a1200

08004a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a24:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a26:	681b      	ldr	r3, [r3, #0]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20000008 	.word	0x20000008

08004a38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d035      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a60:	4b62      	ldr	r3, [pc, #392]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a66:	f7fc fc6f 	bl	8001348 <HAL_GetTick>
 8004a6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a6e:	f7fc fc6b 	bl	8001348 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e0b0      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a80:	4b5b      	ldr	r3, [pc, #364]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f0      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	019a      	lsls	r2, r3, #6
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	071b      	lsls	r3, r3, #28
 8004a98:	4955      	ldr	r1, [pc, #340]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aa0:	4b52      	ldr	r3, [pc, #328]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aa6:	f7fc fc4f 	bl	8001348 <HAL_GetTick>
 8004aaa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004aae:	f7fc fc4b 	bl	8001348 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e090      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ac0:	4b4b      	ldr	r3, [pc, #300]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0f0      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 8083 	beq.w	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	4b44      	ldr	r3, [pc, #272]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	4a43      	ldr	r2, [pc, #268]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aea:	4b41      	ldr	r3, [pc, #260]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004af6:	4b3f      	ldr	r3, [pc, #252]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a3e      	ldr	r2, [pc, #248]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b02:	f7fc fc21 	bl	8001348 <HAL_GetTick>
 8004b06:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b0a:	f7fc fc1d 	bl	8001348 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e062      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b1c:	4b35      	ldr	r3, [pc, #212]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b28:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b30:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d02f      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d028      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b46:	4b2a      	ldr	r3, [pc, #168]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b50:	4b29      	ldr	r3, [pc, #164]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b56:	4b28      	ldr	r3, [pc, #160]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b5c:	4a24      	ldr	r2, [pc, #144]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b62:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d114      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b6e:	f7fc fbeb 	bl	8001348 <HAL_GetTick>
 8004b72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b74:	e00a      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b76:	f7fc fbe7 	bl	8001348 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e02a      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8c:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0ee      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ba4:	d10d      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bba:	490d      	ldr	r1, [pc, #52]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]
 8004bc0:	e005      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	4a0a      	ldr	r2, [pc, #40]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bcc:	6093      	str	r3, [r2, #8]
 8004bce:	4b08      	ldr	r3, [pc, #32]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bda:	4905      	ldr	r1, [pc, #20]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	42470068 	.word	0x42470068
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40007000 	.word	0x40007000
 8004bf8:	42470e40 	.word	0x42470e40

08004bfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d13d      	bne.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c1a:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c22:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d12f      	bne.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c2e:	4b1e      	ldr	r3, [pc, #120]	; (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c30:	617b      	str	r3, [r7, #20]
          break;
 8004c32:	e02f      	b.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c40:	d108      	bne.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c42:	4b18      	ldr	r3, [pc, #96]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c4a:	4a18      	ldr	r2, [pc, #96]	; (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	e007      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c54:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c5c:	4a14      	ldr	r2, [pc, #80]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c62:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c7e:	0f1b      	lsrs	r3, r3, #28
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	617b      	str	r3, [r7, #20]
          break;
 8004c8c:	e002      	b.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]
          break;
 8004c92:	bf00      	nop
        }
      }
      break;
 8004c94:	bf00      	nop
    }
  }
  return frequency;
 8004c96:	697b      	ldr	r3, [r7, #20]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	00bb8000 	.word	0x00bb8000
 8004cac:	007a1200 	.word	0x007a1200
 8004cb0:	00f42400 	.word	0x00f42400

08004cb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	f107 001c 	add.w	r0, r7, #28
 8004cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d122      	bne.n	8004d12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d105      	bne.n	8004d06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f001 fac6 	bl	8006298 <USB_CoreReset>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	73fb      	strb	r3, [r7, #15]
 8004d10:	e01a      	b.n	8004d48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f001 faba 	bl	8006298 <USB_CoreReset>
 8004d24:	4603      	mov	r3, r0
 8004d26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
 8004d3a:	e005      	b.n	8004d48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d10b      	bne.n	8004d66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f043 0206 	orr.w	r2, r3, #6
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f043 0220 	orr.w	r2, r3, #32
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d72:	b004      	add	sp, #16
 8004d74:	4770      	bx	lr
	...

08004d78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	4613      	mov	r3, r2
 8004d84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d165      	bne.n	8004e58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4a41      	ldr	r2, [pc, #260]	; (8004e94 <USB_SetTurnaroundTime+0x11c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d906      	bls.n	8004da2 <USB_SetTurnaroundTime+0x2a>
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4a40      	ldr	r2, [pc, #256]	; (8004e98 <USB_SetTurnaroundTime+0x120>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d802      	bhi.n	8004da2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d9c:	230f      	movs	r3, #15
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e062      	b.n	8004e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4a3c      	ldr	r2, [pc, #240]	; (8004e98 <USB_SetTurnaroundTime+0x120>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d906      	bls.n	8004db8 <USB_SetTurnaroundTime+0x40>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4a3b      	ldr	r2, [pc, #236]	; (8004e9c <USB_SetTurnaroundTime+0x124>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d802      	bhi.n	8004db8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004db2:	230e      	movs	r3, #14
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	e057      	b.n	8004e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4a38      	ldr	r2, [pc, #224]	; (8004e9c <USB_SetTurnaroundTime+0x124>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d906      	bls.n	8004dce <USB_SetTurnaroundTime+0x56>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4a37      	ldr	r2, [pc, #220]	; (8004ea0 <USB_SetTurnaroundTime+0x128>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d802      	bhi.n	8004dce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004dc8:	230d      	movs	r3, #13
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	e04c      	b.n	8004e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4a33      	ldr	r2, [pc, #204]	; (8004ea0 <USB_SetTurnaroundTime+0x128>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d906      	bls.n	8004de4 <USB_SetTurnaroundTime+0x6c>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4a32      	ldr	r2, [pc, #200]	; (8004ea4 <USB_SetTurnaroundTime+0x12c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d802      	bhi.n	8004de4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004dde:	230c      	movs	r3, #12
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e041      	b.n	8004e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4a2f      	ldr	r2, [pc, #188]	; (8004ea4 <USB_SetTurnaroundTime+0x12c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d906      	bls.n	8004dfa <USB_SetTurnaroundTime+0x82>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4a2e      	ldr	r2, [pc, #184]	; (8004ea8 <USB_SetTurnaroundTime+0x130>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d802      	bhi.n	8004dfa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004df4:	230b      	movs	r3, #11
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	e036      	b.n	8004e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4a2a      	ldr	r2, [pc, #168]	; (8004ea8 <USB_SetTurnaroundTime+0x130>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d906      	bls.n	8004e10 <USB_SetTurnaroundTime+0x98>
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4a29      	ldr	r2, [pc, #164]	; (8004eac <USB_SetTurnaroundTime+0x134>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d802      	bhi.n	8004e10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e0a:	230a      	movs	r3, #10
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	e02b      	b.n	8004e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4a26      	ldr	r2, [pc, #152]	; (8004eac <USB_SetTurnaroundTime+0x134>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d906      	bls.n	8004e26 <USB_SetTurnaroundTime+0xae>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4a25      	ldr	r2, [pc, #148]	; (8004eb0 <USB_SetTurnaroundTime+0x138>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d802      	bhi.n	8004e26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e20:	2309      	movs	r3, #9
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e020      	b.n	8004e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4a21      	ldr	r2, [pc, #132]	; (8004eb0 <USB_SetTurnaroundTime+0x138>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d906      	bls.n	8004e3c <USB_SetTurnaroundTime+0xc4>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <USB_SetTurnaroundTime+0x13c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d802      	bhi.n	8004e3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e36:	2308      	movs	r3, #8
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	e015      	b.n	8004e68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <USB_SetTurnaroundTime+0x13c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d906      	bls.n	8004e52 <USB_SetTurnaroundTime+0xda>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <USB_SetTurnaroundTime+0x140>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d802      	bhi.n	8004e52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e4c:	2307      	movs	r3, #7
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e00a      	b.n	8004e68 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e52:	2306      	movs	r3, #6
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e007      	b.n	8004e68 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d102      	bne.n	8004e64 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e5e:	2309      	movs	r3, #9
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e001      	b.n	8004e68 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e64:	2309      	movs	r3, #9
 8004e66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	029b      	lsls	r3, r3, #10
 8004e7c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e80:	431a      	orrs	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	00d8acbf 	.word	0x00d8acbf
 8004e98:	00e4e1bf 	.word	0x00e4e1bf
 8004e9c:	00f423ff 	.word	0x00f423ff
 8004ea0:	0106737f 	.word	0x0106737f
 8004ea4:	011a499f 	.word	0x011a499f
 8004ea8:	01312cff 	.word	0x01312cff
 8004eac:	014ca43f 	.word	0x014ca43f
 8004eb0:	016e35ff 	.word	0x016e35ff
 8004eb4:	01a6ab1f 	.word	0x01a6ab1f
 8004eb8:	01e847ff 	.word	0x01e847ff

08004ebc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f043 0201 	orr.w	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 0201 	bic.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d106      	bne.n	8004f2c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60da      	str	r2, [r3, #12]
 8004f2a:	e00b      	b.n	8004f44 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	60da      	str	r2, [r3, #12]
 8004f3e:	e001      	b.n	8004f44 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e003      	b.n	8004f4c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f44:	2032      	movs	r0, #50	; 0x32
 8004f46:	f7fc fa0b 	bl	8001360 <HAL_Delay>

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f54:	b084      	sub	sp, #16
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b086      	sub	sp, #24
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	e009      	b.n	8004f88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	3340      	adds	r3, #64	; 0x40
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	2200      	movs	r2, #0
 8004f80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3301      	adds	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2b0e      	cmp	r3, #14
 8004f8c:	d9f2      	bls.n	8004f74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d11c      	bne.n	8004fce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa2:	f043 0302 	orr.w	r3, r3, #2
 8004fa6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
 8004fcc:	e00b      	b.n	8004fe6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fec:	461a      	mov	r2, r3
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005000:	461a      	mov	r2, r3
 8005002:	680b      	ldr	r3, [r1, #0]
 8005004:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	2b01      	cmp	r3, #1
 800500a:	d10c      	bne.n	8005026 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d104      	bne.n	800501c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005012:	2100      	movs	r1, #0
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f949 	bl	80052ac <USB_SetDevSpeed>
 800501a:	e008      	b.n	800502e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800501c:	2101      	movs	r1, #1
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f944 	bl	80052ac <USB_SetDevSpeed>
 8005024:	e003      	b.n	800502e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005026:	2103      	movs	r1, #3
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f93f 	bl	80052ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800502e:	2110      	movs	r1, #16
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f8f3 	bl	800521c <USB_FlushTxFifo>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f911 	bl	8005268 <USB_FlushRxFifo>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	461a      	mov	r2, r3
 8005058:	2300      	movs	r3, #0
 800505a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005062:	461a      	mov	r2, r3
 8005064:	2300      	movs	r3, #0
 8005066:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	461a      	mov	r2, r3
 8005070:	2300      	movs	r3, #0
 8005072:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	e043      	b.n	8005102 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800508c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005090:	d118      	bne.n	80050c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a4:	461a      	mov	r2, r3
 80050a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	e013      	b.n	80050d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ba:	461a      	mov	r2, r3
 80050bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e008      	b.n	80050d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d0:	461a      	mov	r2, r3
 80050d2:	2300      	movs	r3, #0
 80050d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	461a      	mov	r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f4:	461a      	mov	r2, r3
 80050f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	3301      	adds	r3, #1
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	429a      	cmp	r2, r3
 8005108:	d3b7      	bcc.n	800507a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	e043      	b.n	8005198 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005126:	d118      	bne.n	800515a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513a:	461a      	mov	r2, r3
 800513c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	e013      	b.n	800516c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	461a      	mov	r2, r3
 8005152:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	e008      	b.n	800516c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	461a      	mov	r2, r3
 8005168:	2300      	movs	r3, #0
 800516a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005178:	461a      	mov	r2, r3
 800517a:	2300      	movs	r3, #0
 800517c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518a:	461a      	mov	r2, r3
 800518c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005190:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	3301      	adds	r3, #1
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	429a      	cmp	r2, r3
 800519e:	d3b7      	bcc.n	8005110 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f043 0210 	orr.w	r2, r3, #16
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699a      	ldr	r2, [r3, #24]
 80051d8:	4b0f      	ldr	r3, [pc, #60]	; (8005218 <USB_DevInit+0x2c4>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f043 0208 	orr.w	r2, r3, #8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d107      	bne.n	8005208 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005200:	f043 0304 	orr.w	r3, r3, #4
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005208:	7dfb      	ldrb	r3, [r7, #23]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005214:	b004      	add	sp, #16
 8005216:	4770      	bx	lr
 8005218:	803c3800 	.word	0x803c3800

0800521c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	019b      	lsls	r3, r3, #6
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3301      	adds	r3, #1
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a09      	ldr	r2, [pc, #36]	; (8005264 <USB_FlushTxFifo+0x48>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d901      	bls.n	8005248 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e006      	b.n	8005256 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b20      	cmp	r3, #32
 8005252:	d0f0      	beq.n	8005236 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	00030d40 	.word	0x00030d40

08005268 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2210      	movs	r2, #16
 8005278:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3301      	adds	r3, #1
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a09      	ldr	r2, [pc, #36]	; (80052a8 <USB_FlushRxFifo+0x40>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e006      	b.n	800529a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b10      	cmp	r3, #16
 8005296:	d0f0      	beq.n	800527a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	00030d40 	.word	0x00030d40

080052ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052cc:	4313      	orrs	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052de:	b480      	push	{r7}
 80052e0:	b087      	sub	sp, #28
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 0306 	and.w	r3, r3, #6
 80052f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d102      	bne.n	8005304 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80052fe:	2300      	movs	r3, #0
 8005300:	75fb      	strb	r3, [r7, #23]
 8005302:	e00a      	b.n	800531a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d002      	beq.n	8005310 <USB_GetDevSpeed+0x32>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b06      	cmp	r3, #6
 800530e:	d102      	bne.n	8005316 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005310:	2302      	movs	r3, #2
 8005312:	75fb      	strb	r3, [r7, #23]
 8005314:	e001      	b.n	800531a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005316:	230f      	movs	r3, #15
 8005318:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800531a:	7dfb      	ldrb	r3, [r7, #23]
}
 800531c:	4618      	mov	r0, r3
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d13a      	bne.n	80053ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	2101      	movs	r1, #1
 8005356:	fa01 f303 	lsl.w	r3, r1, r3
 800535a:	b29b      	uxth	r3, r3
 800535c:	68f9      	ldr	r1, [r7, #12]
 800535e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005362:	4313      	orrs	r3, r2
 8005364:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d155      	bne.n	8005428 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	78db      	ldrb	r3, [r3, #3]
 8005396:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005398:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	059b      	lsls	r3, r3, #22
 800539e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053a0:	4313      	orrs	r3, r2
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	e036      	b.n	8005428 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	2101      	movs	r1, #1
 80053cc:	fa01 f303 	lsl.w	r3, r1, r3
 80053d0:	041b      	lsls	r3, r3, #16
 80053d2:	68f9      	ldr	r1, [r7, #12]
 80053d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d8:	4313      	orrs	r3, r2
 80053da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11a      	bne.n	8005428 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	78db      	ldrb	r3, [r3, #3]
 800540c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800540e:	430b      	orrs	r3, r1
 8005410:	4313      	orrs	r3, r2
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800541e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005426:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	785b      	ldrb	r3, [r3, #1]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d161      	bne.n	8005518 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800546a:	d11f      	bne.n	80054ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	0151      	lsls	r1, r2, #5
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	440a      	add	r2, r1
 8005482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005486:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800548a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	2101      	movs	r1, #1
 80054be:	fa01 f303 	lsl.w	r3, r1, r3
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	43db      	mvns	r3, r3
 80054c6:	68f9      	ldr	r1, [r7, #12]
 80054c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054cc:	4013      	ands	r3, r2
 80054ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	2101      	movs	r1, #1
 80054e2:	fa01 f303 	lsl.w	r3, r1, r3
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	43db      	mvns	r3, r3
 80054ea:	68f9      	ldr	r1, [r7, #12]
 80054ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f0:	4013      	ands	r3, r2
 80054f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	0159      	lsls	r1, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	440b      	add	r3, r1
 800550a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550e:	4619      	mov	r1, r3
 8005510:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <USB_DeactivateEndpoint+0x1b0>)
 8005512:	4013      	ands	r3, r2
 8005514:	600b      	str	r3, [r1, #0]
 8005516:	e060      	b.n	80055da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800552a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800552e:	d11f      	bne.n	8005570 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	440a      	add	r2, r1
 8005546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800554e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	440a      	add	r2, r1
 8005566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800556e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	2101      	movs	r1, #1
 8005582:	fa01 f303 	lsl.w	r3, r1, r3
 8005586:	041b      	lsls	r3, r3, #16
 8005588:	43db      	mvns	r3, r3
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005590:	4013      	ands	r3, r2
 8005592:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	2101      	movs	r1, #1
 80055a6:	fa01 f303 	lsl.w	r3, r1, r3
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	43db      	mvns	r3, r3
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b4:	4013      	ands	r3, r2
 80055b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	0159      	lsls	r1, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	440b      	add	r3, r1
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	4619      	mov	r1, r3
 80055d4:	4b05      	ldr	r3, [pc, #20]	; (80055ec <USB_DeactivateEndpoint+0x1b4>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	ec337800 	.word	0xec337800
 80055ec:	eff37800 	.word	0xeff37800

080055f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	4613      	mov	r3, r2
 80055fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	2b01      	cmp	r3, #1
 800560e:	f040 815c 	bne.w	80058ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d132      	bne.n	8005680 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	0151      	lsls	r1, r2, #5
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	440a      	add	r2, r1
 8005630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005634:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005638:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800563c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	0151      	lsls	r1, r2, #5
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	440a      	add	r2, r1
 8005654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005658:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800565c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	440a      	add	r2, r1
 8005674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005678:	0cdb      	lsrs	r3, r3, #19
 800567a:	04db      	lsls	r3, r3, #19
 800567c:	6113      	str	r3, [r2, #16]
 800567e:	e074      	b.n	800576a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	440a      	add	r2, r1
 8005696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569a:	0cdb      	lsrs	r3, r3, #19
 800569c:	04db      	lsls	r3, r3, #19
 800569e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6959      	ldr	r1, [r3, #20]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	440b      	add	r3, r1
 80056dc:	1e59      	subs	r1, r3, #1
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80056e6:	04d9      	lsls	r1, r3, #19
 80056e8:	4b9d      	ldr	r3, [pc, #628]	; (8005960 <USB_EPStartXfer+0x370>)
 80056ea:	400b      	ands	r3, r1
 80056ec:	69b9      	ldr	r1, [r7, #24]
 80056ee:	0148      	lsls	r0, r1, #5
 80056f0:	69f9      	ldr	r1, [r7, #28]
 80056f2:	4401      	add	r1, r0
 80056f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056f8:	4313      	orrs	r3, r2
 80056fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005708:	691a      	ldr	r2, [r3, #16]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005712:	69b9      	ldr	r1, [r7, #24]
 8005714:	0148      	lsls	r0, r1, #5
 8005716:	69f9      	ldr	r1, [r7, #28]
 8005718:	4401      	add	r1, r0
 800571a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800571e:	4313      	orrs	r3, r2
 8005720:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	78db      	ldrb	r3, [r3, #3]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d11f      	bne.n	800576a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	440a      	add	r2, r1
 8005740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005744:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005748:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	0151      	lsls	r1, r2, #5
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	440a      	add	r2, r1
 8005760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005764:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005768:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d14b      	bne.n	8005808 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d009      	beq.n	800578c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	461a      	mov	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	78db      	ldrb	r3, [r3, #3]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d128      	bne.n	80057e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d110      	bne.n	80057c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	e00f      	b.n	80057e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	0151      	lsls	r1, r2, #5
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	440a      	add	r2, r1
 80057dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005800:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	e12f      	b.n	8005a68 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005822:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005826:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	78db      	ldrb	r3, [r3, #3]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d015      	beq.n	800585c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8117 	beq.w	8005a68 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	2101      	movs	r1, #1
 800584c:	fa01 f303 	lsl.w	r3, r1, r3
 8005850:	69f9      	ldr	r1, [r7, #28]
 8005852:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005856:	4313      	orrs	r3, r2
 8005858:	634b      	str	r3, [r1, #52]	; 0x34
 800585a:	e105      	b.n	8005a68 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005868:	2b00      	cmp	r3, #0
 800586a:	d110      	bne.n	800588e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	e00f      	b.n	80058ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	68d9      	ldr	r1, [r3, #12]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	781a      	ldrb	r2, [r3, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	b298      	uxth	r0, r3
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	4603      	mov	r3, r0
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 fa2b 	bl	8005d1e <USB_WritePacket>
 80058c8:	e0ce      	b.n	8005a68 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e4:	0cdb      	lsrs	r3, r3, #19
 80058e6:	04db      	lsls	r3, r3, #19
 80058e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005904:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005908:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800590c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d126      	bne.n	8005964 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592c:	69b9      	ldr	r1, [r7, #24]
 800592e:	0148      	lsls	r0, r1, #5
 8005930:	69f9      	ldr	r1, [r7, #28]
 8005932:	4401      	add	r1, r0
 8005934:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005938:	4313      	orrs	r3, r2
 800593a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	440a      	add	r2, r1
 8005952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800595a:	6113      	str	r3, [r2, #16]
 800595c:	e036      	b.n	80059cc <USB_EPStartXfer+0x3dc>
 800595e:	bf00      	nop
 8005960:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	695a      	ldr	r2, [r3, #20]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	4413      	add	r3, r2
 800596e:	1e5a      	subs	r2, r3, #1
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	8afb      	ldrh	r3, [r7, #22]
 800598a:	04d9      	lsls	r1, r3, #19
 800598c:	4b39      	ldr	r3, [pc, #228]	; (8005a74 <USB_EPStartXfer+0x484>)
 800598e:	400b      	ands	r3, r1
 8005990:	69b9      	ldr	r1, [r7, #24]
 8005992:	0148      	lsls	r0, r1, #5
 8005994:	69f9      	ldr	r1, [r7, #28]
 8005996:	4401      	add	r1, r0
 8005998:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800599c:	4313      	orrs	r3, r2
 800599e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	8af9      	ldrh	r1, [r7, #22]
 80059b4:	fb01 f303 	mul.w	r3, r1, r3
 80059b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059bc:	69b9      	ldr	r1, [r7, #24]
 80059be:	0148      	lsls	r0, r1, #5
 80059c0:	69f9      	ldr	r1, [r7, #28]
 80059c2:	4401      	add	r1, r0
 80059c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059c8:	4313      	orrs	r3, r2
 80059ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10d      	bne.n	80059ee <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d009      	beq.n	80059ee <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	68d9      	ldr	r1, [r3, #12]
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	460a      	mov	r2, r1
 80059ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	78db      	ldrb	r3, [r3, #3]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d128      	bne.n	8005a48 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d110      	bne.n	8005a28 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	e00f      	b.n	8005a48 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	0151      	lsls	r1, r2, #5
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3720      	adds	r7, #32
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	1ff80000 	.word	0x1ff80000

08005a78 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	f040 80cd 	bne.w	8005c34 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d132      	bne.n	8005b08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005abc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ac0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ac4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	0151      	lsls	r1, r2, #5
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	440a      	add	r2, r1
 8005adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ae4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b00:	0cdb      	lsrs	r3, r3, #19
 8005b02:	04db      	lsls	r3, r3, #19
 8005b04:	6113      	str	r3, [r2, #16]
 8005b06:	e04e      	b.n	8005ba6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b22:	0cdb      	lsrs	r3, r3, #19
 8005b24:	04db      	lsls	r3, r3, #19
 8005b26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d903      	bls.n	8005b60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b96:	6939      	ldr	r1, [r7, #16]
 8005b98:	0148      	lsls	r0, r1, #5
 8005b9a:	6979      	ldr	r1, [r7, #20]
 8005b9c:	4401      	add	r1, r0
 8005b9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d11e      	bne.n	8005bea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	e092      	b.n	8005d10 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d07e      	beq.n	8005d10 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	2101      	movs	r1, #1
 8005c24:	fa01 f303 	lsl.w	r3, r1, r3
 8005c28:	6979      	ldr	r1, [r7, #20]
 8005c2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	634b      	str	r3, [r1, #52]	; 0x34
 8005c32:	e06d      	b.n	8005d10 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4e:	0cdb      	lsrs	r3, r3, #19
 8005c50:	04db      	lsls	r3, r3, #19
 8005c52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c76:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ca6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cbe:	6939      	ldr	r1, [r7, #16]
 8005cc0:	0148      	lsls	r0, r1, #5
 8005cc2:	6979      	ldr	r1, [r7, #20]
 8005cc4:	4401      	add	r1, r0
 8005cc6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d10d      	bne.n	8005cf0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	68d9      	ldr	r1, [r3, #12]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cec:	460a      	mov	r2, r1
 8005cee:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b089      	sub	sp, #36	; 0x24
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	4611      	mov	r1, r2
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	71fb      	strb	r3, [r7, #7]
 8005d30:	4613      	mov	r3, r2
 8005d32:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005d3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d11a      	bne.n	8005d7a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d44:	88bb      	ldrh	r3, [r7, #4]
 8005d46:	3303      	adds	r3, #3
 8005d48:	089b      	lsrs	r3, r3, #2
 8005d4a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61bb      	str	r3, [r7, #24]
 8005d50:	e00f      	b.n	8005d72 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	031a      	lsls	r2, r3, #12
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d5e:	461a      	mov	r2, r3
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	61bb      	str	r3, [r7, #24]
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d3eb      	bcc.n	8005d52 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3724      	adds	r7, #36	; 0x24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b089      	sub	sp, #36	; 0x24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	3303      	adds	r3, #3
 8005da2:	089b      	lsrs	r3, r3, #2
 8005da4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005da6:	2300      	movs	r3, #0
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	e00b      	b.n	8005dc4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	61bb      	str	r3, [r7, #24]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d3ef      	bcc.n	8005dac <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005dcc:	69fb      	ldr	r3, [r7, #28]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3724      	adds	r7, #36	; 0x24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d12c      	bne.n	8005e50 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	db12      	blt.n	8005e2e <USB_EPSetStall+0x54>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00f      	beq.n	8005e2e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e2c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e02b      	b.n	8005ea8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	db12      	blt.n	8005e88 <USB_EPSetStall+0xae>
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00f      	beq.n	8005e88 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	0151      	lsls	r1, r2, #5
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	440a      	add	r2, r1
 8005e7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e86:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ea6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	785b      	ldrb	r3, [r3, #1]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d128      	bne.n	8005f24 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	0151      	lsls	r1, r2, #5
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	440a      	add	r2, r1
 8005ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ef0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	78db      	ldrb	r3, [r3, #3]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d003      	beq.n	8005f02 <USB_EPClearStall+0x4c>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	78db      	ldrb	r3, [r3, #3]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d138      	bne.n	8005f74 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	e027      	b.n	8005f74 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	78db      	ldrb	r3, [r3, #3]
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d003      	beq.n	8005f54 <USB_EPClearStall+0x9e>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	78db      	ldrb	r3, [r3, #3]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d10f      	bne.n	8005f74 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f72:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fa0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fa4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005fb6:	68f9      	ldr	r1, [r7, #12]
 8005fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b085      	sub	sp, #20
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fe8:	f023 0303 	bic.w	r3, r3, #3
 8005fec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ffc:	f023 0302 	bic.w	r3, r3, #2
 8006000:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800602a:	f023 0303 	bic.w	r3, r3, #3
 800602e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800603e:	f043 0302 	orr.w	r3, r3, #2
 8006042:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006052:	b480      	push	{r7}
 8006054:	b085      	sub	sp, #20
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4013      	ands	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800606a:	68fb      	ldr	r3, [r7, #12]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	4013      	ands	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	0c1b      	lsrs	r3, r3, #16
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	4013      	ands	r3, r2
 80060ce:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	b29b      	uxth	r3, r3
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	4013      	ands	r3, r2
 800610c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800610e:	68bb      	ldr	r3, [r7, #8]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	fa22 f303 	lsr.w	r3, r2, r3
 800614c:	01db      	lsls	r3, r3, #7
 800614e:	b2db      	uxtb	r3, r3
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4013      	ands	r3, r2
 8006168:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800616a:	68bb      	ldr	r3, [r7, #8]
}
 800616c:	4618      	mov	r0, r3
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	f003 0301 	and.w	r3, r3, #1
}
 8006188:	4618      	mov	r0, r3
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80061b2:	f023 0307 	bic.w	r3, r3, #7
 80061b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	460b      	mov	r3, r1
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	333c      	adds	r3, #60	; 0x3c
 80061f2:	3304      	adds	r3, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	4a26      	ldr	r2, [pc, #152]	; (8006294 <USB_EP0_OutStart+0xb8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d90a      	bls.n	8006216 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800620c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006210:	d101      	bne.n	8006216 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e037      	b.n	8006286 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	461a      	mov	r2, r3
 800621e:	2300      	movs	r3, #0
 8006220:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006234:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006244:	f043 0318 	orr.w	r3, r3, #24
 8006248:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006258:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800625c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800625e:	7afb      	ldrb	r3, [r7, #11]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d10f      	bne.n	8006284 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	461a      	mov	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800627e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006282:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	371c      	adds	r7, #28
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	4f54300a 	.word	0x4f54300a

08006298 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3301      	adds	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a13      	ldr	r2, [pc, #76]	; (80062fc <USB_CoreReset+0x64>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d901      	bls.n	80062b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e01b      	b.n	80062ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	daf2      	bge.n	80062a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f043 0201 	orr.w	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3301      	adds	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4a09      	ldr	r2, [pc, #36]	; (80062fc <USB_CoreReset+0x64>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d901      	bls.n	80062e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e006      	b.n	80062ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d0f0      	beq.n	80062ce <USB_CoreReset+0x36>

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	00030d40 	.word	0x00030d40

08006300 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800630c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006310:	f002 fc5a 	bl	8008bc8 <malloc>
 8006314:	4603      	mov	r3, r0
 8006316:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d105      	bne.n	800632a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006326:	2302      	movs	r3, #2
 8006328:	e066      	b.n	80063f8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	7c1b      	ldrb	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d119      	bne.n	800636e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800633a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800633e:	2202      	movs	r2, #2
 8006340:	2181      	movs	r1, #129	; 0x81
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f002 fac7 	bl	80088d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800634e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006352:	2202      	movs	r2, #2
 8006354:	2101      	movs	r1, #1
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f002 fabd 	bl	80088d6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2210      	movs	r2, #16
 8006368:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800636c:	e016      	b.n	800639c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800636e:	2340      	movs	r3, #64	; 0x40
 8006370:	2202      	movs	r2, #2
 8006372:	2181      	movs	r1, #129	; 0x81
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f002 faae 	bl	80088d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006380:	2340      	movs	r3, #64	; 0x40
 8006382:	2202      	movs	r2, #2
 8006384:	2101      	movs	r1, #1
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f002 faa5 	bl	80088d6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2210      	movs	r2, #16
 8006398:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800639c:	2308      	movs	r3, #8
 800639e:	2203      	movs	r2, #3
 80063a0:	2182      	movs	r1, #130	; 0x82
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f002 fa97 	bl	80088d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	7c1b      	ldrb	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063dc:	2101      	movs	r1, #1
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f002 fb68 	bl	8008ab4 <USBD_LL_PrepareReceive>
 80063e4:	e007      	b.n	80063f6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063ec:	2340      	movs	r3, #64	; 0x40
 80063ee:	2101      	movs	r1, #1
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f002 fb5f 	bl	8008ab4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006410:	2181      	movs	r1, #129	; 0x81
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f002 fa85 	bl	8008922 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800641e:	2101      	movs	r1, #1
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f002 fa7e 	bl	8008922 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800642e:	2182      	movs	r1, #130	; 0x82
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f002 fa76 	bl	8008922 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00e      	beq.n	800646e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006460:	4618      	mov	r0, r3
 8006462:	f002 fbb9 	bl	8008bd8 <free>
    pdev->pClassData = NULL;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006488:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d03a      	beq.n	8006518 <USBD_CDC_Setup+0xa0>
 80064a2:	2b20      	cmp	r3, #32
 80064a4:	f040 8097 	bne.w	80065d6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	88db      	ldrh	r3, [r3, #6]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d029      	beq.n	8006504 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	b25b      	sxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	da11      	bge.n	80064de <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80064c6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	88d2      	ldrh	r2, [r2, #6]
 80064cc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80064ce:	6939      	ldr	r1, [r7, #16]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	88db      	ldrh	r3, [r3, #6]
 80064d4:	461a      	mov	r2, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 fa9d 	bl	8007a16 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80064dc:	e082      	b.n	80065e4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	785a      	ldrb	r2, [r3, #1]
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	88db      	ldrh	r3, [r3, #6]
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80064f4:	6939      	ldr	r1, [r7, #16]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	88db      	ldrh	r3, [r3, #6]
 80064fa:	461a      	mov	r2, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 fab6 	bl	8007a6e <USBD_CtlPrepareRx>
    break;
 8006502:	e06f      	b.n	80065e4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	7850      	ldrb	r0, [r2, #1]
 8006510:	2200      	movs	r2, #0
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	4798      	blx	r3
    break;
 8006516:	e065      	b.n	80065e4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	785b      	ldrb	r3, [r3, #1]
 800651c:	2b0b      	cmp	r3, #11
 800651e:	d84f      	bhi.n	80065c0 <USBD_CDC_Setup+0x148>
 8006520:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <USBD_CDC_Setup+0xb0>)
 8006522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006526:	bf00      	nop
 8006528:	08006559 	.word	0x08006559
 800652c:	080065cf 	.word	0x080065cf
 8006530:	080065c1 	.word	0x080065c1
 8006534:	080065c1 	.word	0x080065c1
 8006538:	080065c1 	.word	0x080065c1
 800653c:	080065c1 	.word	0x080065c1
 8006540:	080065c1 	.word	0x080065c1
 8006544:	080065c1 	.word	0x080065c1
 8006548:	080065c1 	.word	0x080065c1
 800654c:	080065c1 	.word	0x080065c1
 8006550:	08006581 	.word	0x08006581
 8006554:	080065a9 	.word	0x080065a9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800655e:	2b03      	cmp	r3, #3
 8006560:	d107      	bne.n	8006572 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006562:	f107 030c 	add.w	r3, r7, #12
 8006566:	2202      	movs	r2, #2
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 fa53 	bl	8007a16 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006570:	e030      	b.n	80065d4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 f9dd 	bl	8007934 <USBD_CtlError>
        ret = USBD_FAIL;
 800657a:	2303      	movs	r3, #3
 800657c:	75fb      	strb	r3, [r7, #23]
      break;
 800657e:	e029      	b.n	80065d4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006586:	2b03      	cmp	r3, #3
 8006588:	d107      	bne.n	800659a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800658a:	f107 030f 	add.w	r3, r7, #15
 800658e:	2201      	movs	r2, #1
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f001 fa3f 	bl	8007a16 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006598:	e01c      	b.n	80065d4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f9c9 	bl	8007934 <USBD_CtlError>
        ret = USBD_FAIL;
 80065a2:	2303      	movs	r3, #3
 80065a4:	75fb      	strb	r3, [r7, #23]
      break;
 80065a6:	e015      	b.n	80065d4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d00f      	beq.n	80065d2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 f9bd 	bl	8007934 <USBD_CtlError>
        ret = USBD_FAIL;
 80065ba:	2303      	movs	r3, #3
 80065bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80065be:	e008      	b.n	80065d2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 f9b6 	bl	8007934 <USBD_CtlError>
      ret = USBD_FAIL;
 80065c8:	2303      	movs	r3, #3
 80065ca:	75fb      	strb	r3, [r7, #23]
      break;
 80065cc:	e002      	b.n	80065d4 <USBD_CDC_Setup+0x15c>
      break;
 80065ce:	bf00      	nop
 80065d0:	e008      	b.n	80065e4 <USBD_CDC_Setup+0x16c>
      break;
 80065d2:	bf00      	nop
    }
    break;
 80065d4:	e006      	b.n	80065e4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 f9ab 	bl	8007934 <USBD_CtlError>
    ret = USBD_FAIL;
 80065de:	2303      	movs	r3, #3
 80065e0:	75fb      	strb	r3, [r7, #23]
    break;
 80065e2:	bf00      	nop
  }

  return (uint8_t)ret;
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop

080065f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006602:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800660e:	2303      	movs	r3, #3
 8006610:	e049      	b.n	80066a6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006618:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800661a:	78fa      	ldrb	r2, [r7, #3]
 800661c:	6879      	ldr	r1, [r7, #4]
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	440b      	add	r3, r1
 8006628:	3318      	adds	r3, #24
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d029      	beq.n	8006684 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006630:	78fa      	ldrb	r2, [r7, #3]
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	3318      	adds	r3, #24
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	78f9      	ldrb	r1, [r7, #3]
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	460b      	mov	r3, r1
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	1a5b      	subs	r3, r3, r1
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4403      	add	r3, r0
 8006650:	3344      	adds	r3, #68	; 0x44
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	fbb2 f1f3 	udiv	r1, r2, r3
 8006658:	fb03 f301 	mul.w	r3, r3, r1
 800665c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800665e:	2b00      	cmp	r3, #0
 8006660:	d110      	bne.n	8006684 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006662:	78fa      	ldrb	r2, [r7, #3]
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	4613      	mov	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	3318      	adds	r3, #24
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006676:	78f9      	ldrb	r1, [r7, #3]
 8006678:	2300      	movs	r3, #0
 800667a:	2200      	movs	r2, #0
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f002 f9f8 	bl	8008a72 <USBD_LL_Transmit>
 8006682:	e00f      	b.n	80066a4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80066a0:	78fa      	ldrb	r2, [r7, #3]
 80066a2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	460b      	mov	r3, r1
 80066b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e015      	b.n	80066fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f002 fa0e 	bl	8008af6 <USBD_LL_GetRxDataSize>
 80066da:	4602      	mov	r2, r0
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80066f6:	4611      	mov	r1, r2
 80066f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006712:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d015      	beq.n	800674a <USBD_CDC_EP0_RxReady+0x46>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006724:	2bff      	cmp	r3, #255	; 0xff
 8006726:	d010      	beq.n	800674a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006736:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800673e:	b292      	uxth	r2, r2
 8006740:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	22ff      	movs	r2, #255	; 0xff
 8006746:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2243      	movs	r2, #67	; 0x43
 8006760:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006762:	4b03      	ldr	r3, [pc, #12]	; (8006770 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	2000009c 	.word	0x2000009c

08006774 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2243      	movs	r2, #67	; 0x43
 8006780:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006782:	4b03      	ldr	r3, [pc, #12]	; (8006790 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	20000058 	.word	0x20000058

08006794 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2243      	movs	r2, #67	; 0x43
 80067a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80067a2:	4b03      	ldr	r3, [pc, #12]	; (80067b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	200000e0 	.word	0x200000e0

080067b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	220a      	movs	r2, #10
 80067c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80067c2:	4b03      	ldr	r3, [pc, #12]	; (80067d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	20000014 	.word	0x20000014

080067d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e004      	b.n	80067f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80067fe:	b480      	push	{r7}
 8006800:	b087      	sub	sp, #28
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006810:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006840:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006866:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006868:	2301      	movs	r3, #1
 800686a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006876:	2303      	movs	r3, #3
 8006878:	e01a      	b.n	80068b0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006880:	2b00      	cmp	r3, #0
 8006882:	d114      	bne.n	80068ae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2201      	movs	r2, #1
 8006888:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80068a2:	2181      	movs	r1, #129	; 0x81
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f002 f8e4 	bl	8008a72 <USBD_LL_Transmit>

    ret = USBD_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e016      	b.n	8006904 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	7c1b      	ldrb	r3, [r3, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d109      	bne.n	80068f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068e8:	2101      	movs	r1, #1
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f002 f8e2 	bl	8008ab4 <USBD_LL_PrepareReceive>
 80068f0:	e007      	b.n	8006902 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068f8:	2340      	movs	r3, #64	; 0x40
 80068fa:	2101      	movs	r1, #1
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f002 f8d9 	bl	8008ab4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	4613      	mov	r3, r2
 8006918:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006920:	2303      	movs	r3, #3
 8006922:	e025      	b.n	8006970 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	79fa      	ldrb	r2, [r7, #7]
 8006962:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f001 ff4f 	bl	8008808 <USBD_LL_Init>
 800696a:	4603      	mov	r3, r0
 800696c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800696e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800698c:	2303      	movs	r3, #3
 800698e:	e010      	b.n	80069b2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a0:	f107 020e 	add.w	r2, r7, #14
 80069a4:	4610      	mov	r0, r2
 80069a6:	4798      	blx	r3
 80069a8:	4602      	mov	r2, r0
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f001 ff6c 	bl	80088a0 <USBD_LL_Start>
 80069c8:	4603      	mov	r3, r0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80069f4:	2303      	movs	r3, #3
 80069f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d009      	beq.n	8006a16 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	78fa      	ldrb	r2, [r7, #3]
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	4798      	blx	r3
 8006a12:	4603      	mov	r3, r0
 8006a14:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d007      	beq.n	8006a46 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	78fa      	ldrb	r2, [r7, #3]
 8006a40:	4611      	mov	r1, r2
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	4798      	blx	r3
  }

  return USBD_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 ff2c 	bl	80078c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a76:	461a      	mov	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d00e      	beq.n	8006aaa <USBD_LL_SetupStage+0x5a>
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d302      	bcc.n	8006a96 <USBD_LL_SetupStage+0x46>
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d014      	beq.n	8006abe <USBD_LL_SetupStage+0x6e>
 8006a94:	e01d      	b.n	8006ad2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fa18 	bl	8006ed4 <USBD_StdDevReq>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa8:	e020      	b.n	8006aec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fa7c 	bl	8006fb0 <USBD_StdItfReq>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73fb      	strb	r3, [r7, #15]
      break;
 8006abc:	e016      	b.n	8006aec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fab8 	bl	800703c <USBD_StdEPReq>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad0:	e00c      	b.n	8006aec <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ad8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f001 ff3d 	bl	8008960 <USBD_LL_StallEP>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8006aea:	bf00      	nop
  }

  return ret;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b086      	sub	sp, #24
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	460b      	mov	r3, r1
 8006b00:	607a      	str	r2, [r7, #4]
 8006b02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006b04:	7afb      	ldrb	r3, [r7, #11]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d137      	bne.n	8006b7a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d14a      	bne.n	8006bb2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d913      	bls.n	8006b50 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	1ad2      	subs	r2, r2, r3
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	bf28      	it	cs
 8006b42:	4613      	movcs	r3, r2
 8006b44:	461a      	mov	r2, r3
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 ffad 	bl	8007aa8 <USBD_CtlContinueRx>
 8006b4e:	e030      	b.n	8006bb2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d105      	bne.n	8006b72 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 ffa9 	bl	8007aca <USBD_CtlSendStatus>
 8006b78:	e01b      	b.n	8006bb2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d013      	beq.n	8006bae <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	d10e      	bne.n	8006bae <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	7afa      	ldrb	r2, [r7, #11]
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	4798      	blx	r3
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006ba4:	7dfb      	ldrb	r3, [r7, #23]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	e002      	b.n	8006bb4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e000      	b.n	8006bb4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006bca:	7afb      	ldrb	r3, [r7, #11]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d16a      	bne.n	8006ca6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3314      	adds	r3, #20
 8006bd4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d155      	bne.n	8006c8c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d914      	bls.n	8006c16 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	1ad2      	subs	r2, r2, r3
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 ff22 	bl	8007a4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c08:	2300      	movs	r3, #0
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f001 ff50 	bl	8008ab4 <USBD_LL_PrepareReceive>
 8006c14:	e03a      	b.n	8006c8c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d11c      	bne.n	8006c5c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d316      	bcc.n	8006c5c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d20f      	bcs.n	8006c5c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	2100      	movs	r1, #0
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 ff03 	bl	8007a4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2200      	movs	r2, #0
 8006c52:	2100      	movs	r1, #0
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f001 ff2d 	bl	8008ab4 <USBD_LL_PrepareReceive>
 8006c5a:	e017      	b.n	8006c8c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d105      	bne.n	8006c7e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c7e:	2180      	movs	r1, #128	; 0x80
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f001 fe6d 	bl	8008960 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 ff32 	bl	8007af0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d123      	bne.n	8006cde <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff fe9b 	bl	80069d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ca4:	e01b      	b.n	8006cde <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d013      	beq.n	8006cda <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d10e      	bne.n	8006cda <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	7afa      	ldrb	r2, [r7, #11]
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	4798      	blx	r3
 8006ccc:	4603      	mov	r3, r0
 8006cce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
 8006cd8:	e002      	b.n	8006ce0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e000      	b.n	8006ce0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d009      	beq.n	8006d2c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6852      	ldr	r2, [r2, #4]
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	4611      	mov	r1, r2
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d2c:	2340      	movs	r3, #64	; 0x40
 8006d2e:	2200      	movs	r2, #0
 8006d30:	2100      	movs	r1, #0
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fdcf 	bl	80088d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2240      	movs	r2, #64	; 0x40
 8006d44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d48:	2340      	movs	r3, #64	; 0x40
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2180      	movs	r1, #128	; 0x80
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fdc1 	bl	80088d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2240      	movs	r2, #64	; 0x40
 8006d5e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	78fa      	ldrb	r2, [r7, #3]
 8006d7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2204      	movs	r2, #4
 8006da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d105      	bne.n	8006dd2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d10b      	bne.n	8006e0a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	460b      	mov	r3, r1
 8006e38:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d009      	beq.n	8006e8c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6852      	ldr	r2, [r2, #4]
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	4611      	mov	r1, r2
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
  }

  return USBD_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b087      	sub	sp, #28
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006eb4:	8a3b      	ldrh	r3, [r7, #16]
 8006eb6:	021b      	lsls	r3, r3, #8
 8006eb8:	b21a      	sxth	r2, r3
 8006eba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	b21b      	sxth	r3, r3
 8006ec2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ec4:	89fb      	ldrh	r3, [r7, #14]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
	...

08006ed4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eea:	2b20      	cmp	r3, #32
 8006eec:	d004      	beq.n	8006ef8 <USBD_StdDevReq+0x24>
 8006eee:	2b40      	cmp	r3, #64	; 0x40
 8006ef0:	d002      	beq.n	8006ef8 <USBD_StdDevReq+0x24>
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00a      	beq.n	8006f0c <USBD_StdDevReq+0x38>
 8006ef6:	e050      	b.n	8006f9a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
 8006f06:	4603      	mov	r3, r0
 8006f08:	73fb      	strb	r3, [r7, #15]
    break;
 8006f0a:	e04b      	b.n	8006fa4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	2b09      	cmp	r3, #9
 8006f12:	d83c      	bhi.n	8006f8e <USBD_StdDevReq+0xba>
 8006f14:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <USBD_StdDevReq+0x48>)
 8006f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006f71 	.word	0x08006f71
 8006f20:	08006f85 	.word	0x08006f85
 8006f24:	08006f8f 	.word	0x08006f8f
 8006f28:	08006f7b 	.word	0x08006f7b
 8006f2c:	08006f8f 	.word	0x08006f8f
 8006f30:	08006f4f 	.word	0x08006f4f
 8006f34:	08006f45 	.word	0x08006f45
 8006f38:	08006f8f 	.word	0x08006f8f
 8006f3c:	08006f67 	.word	0x08006f67
 8006f40:	08006f59 	.word	0x08006f59
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f9ce 	bl	80072e8 <USBD_GetDescriptor>
      break;
 8006f4c:	e024      	b.n	8006f98 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fb33 	bl	80075bc <USBD_SetAddress>
      break;
 8006f56:	e01f      	b.n	8006f98 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fb70 	bl	8007640 <USBD_SetConfig>
 8006f60:	4603      	mov	r3, r0
 8006f62:	73fb      	strb	r3, [r7, #15]
      break;
 8006f64:	e018      	b.n	8006f98 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fc0d 	bl	8007788 <USBD_GetConfig>
      break;
 8006f6e:	e013      	b.n	8006f98 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fc3c 	bl	80077f0 <USBD_GetStatus>
      break;
 8006f78:	e00e      	b.n	8006f98 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fc6a 	bl	8007856 <USBD_SetFeature>
      break;
 8006f82:	e009      	b.n	8006f98 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fc79 	bl	800787e <USBD_ClrFeature>
      break;
 8006f8c:	e004      	b.n	8006f98 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fccf 	bl	8007934 <USBD_CtlError>
      break;
 8006f96:	bf00      	nop
    }
    break;
 8006f98:	e004      	b.n	8006fa4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fcc9 	bl	8007934 <USBD_CtlError>
    break;
 8006fa2:	bf00      	nop
  }

  return ret;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop

08006fb0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d003      	beq.n	8006fd2 <USBD_StdItfReq+0x22>
 8006fca:	2b40      	cmp	r3, #64	; 0x40
 8006fcc:	d001      	beq.n	8006fd2 <USBD_StdItfReq+0x22>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d12a      	bne.n	8007028 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d81d      	bhi.n	800701a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	889b      	ldrh	r3, [r3, #4]
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d813      	bhi.n	8007010 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4798      	blx	r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	88db      	ldrh	r3, [r3, #6]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d110      	bne.n	8007024 <USBD_StdItfReq+0x74>
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10d      	bne.n	8007024 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fd5e 	bl	8007aca <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800700e:	e009      	b.n	8007024 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fc8e 	bl	8007934 <USBD_CtlError>
      break;
 8007018:	e004      	b.n	8007024 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fc89 	bl	8007934 <USBD_CtlError>
      break;
 8007022:	e000      	b.n	8007026 <USBD_StdItfReq+0x76>
      break;
 8007024:	bf00      	nop
    }
    break;
 8007026:	e004      	b.n	8007032 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fc82 	bl	8007934 <USBD_CtlError>
    break;
 8007030:	bf00      	nop
  }

  return ret;
 8007032:	7bfb      	ldrb	r3, [r7, #15]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	889b      	ldrh	r3, [r3, #4]
 800704e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007058:	2b20      	cmp	r3, #32
 800705a:	d004      	beq.n	8007066 <USBD_StdEPReq+0x2a>
 800705c:	2b40      	cmp	r3, #64	; 0x40
 800705e:	d002      	beq.n	8007066 <USBD_StdEPReq+0x2a>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <USBD_StdEPReq+0x3e>
 8007064:	e135      	b.n	80072d2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	4798      	blx	r3
 8007074:	4603      	mov	r3, r0
 8007076:	73fb      	strb	r3, [r7, #15]
    break;
 8007078:	e130      	b.n	80072dc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	785b      	ldrb	r3, [r3, #1]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d03e      	beq.n	8007100 <USBD_StdEPReq+0xc4>
 8007082:	2b03      	cmp	r3, #3
 8007084:	d002      	beq.n	800708c <USBD_StdEPReq+0x50>
 8007086:	2b00      	cmp	r3, #0
 8007088:	d077      	beq.n	800717a <USBD_StdEPReq+0x13e>
 800708a:	e11c      	b.n	80072c6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007092:	2b02      	cmp	r3, #2
 8007094:	d002      	beq.n	800709c <USBD_StdEPReq+0x60>
 8007096:	2b03      	cmp	r3, #3
 8007098:	d015      	beq.n	80070c6 <USBD_StdEPReq+0x8a>
 800709a:	e02b      	b.n	80070f4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00c      	beq.n	80070bc <USBD_StdEPReq+0x80>
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	2b80      	cmp	r3, #128	; 0x80
 80070a6:	d009      	beq.n	80070bc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f001 fc57 	bl	8008960 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80070b2:	2180      	movs	r1, #128	; 0x80
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fc53 	bl	8008960 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80070ba:	e020      	b.n	80070fe <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fc38 	bl	8007934 <USBD_CtlError>
        break;
 80070c4:	e01b      	b.n	80070fe <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	885b      	ldrh	r3, [r3, #2]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10e      	bne.n	80070ec <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070ce:	7bbb      	ldrb	r3, [r7, #14]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <USBD_StdEPReq+0xb0>
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	2b80      	cmp	r3, #128	; 0x80
 80070d8:	d008      	beq.n	80070ec <USBD_StdEPReq+0xb0>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	88db      	ldrh	r3, [r3, #6]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d104      	bne.n	80070ec <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 fc3a 	bl	8008960 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fcec 	bl	8007aca <USBD_CtlSendStatus>

        break;
 80070f2:	e004      	b.n	80070fe <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fc1c 	bl	8007934 <USBD_CtlError>
        break;
 80070fc:	bf00      	nop
      }
      break;
 80070fe:	e0e7      	b.n	80072d0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007106:	2b02      	cmp	r3, #2
 8007108:	d002      	beq.n	8007110 <USBD_StdEPReq+0xd4>
 800710a:	2b03      	cmp	r3, #3
 800710c:	d015      	beq.n	800713a <USBD_StdEPReq+0xfe>
 800710e:	e02d      	b.n	800716c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00c      	beq.n	8007130 <USBD_StdEPReq+0xf4>
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b80      	cmp	r3, #128	; 0x80
 800711a:	d009      	beq.n	8007130 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 fc1d 	bl	8008960 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007126:	2180      	movs	r1, #128	; 0x80
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 fc19 	bl	8008960 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800712e:	e023      	b.n	8007178 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fbfe 	bl	8007934 <USBD_CtlError>
        break;
 8007138:	e01e      	b.n	8007178 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	885b      	ldrh	r3, [r3, #2]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d119      	bne.n	8007176 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007148:	2b00      	cmp	r3, #0
 800714a:	d004      	beq.n	8007156 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	4619      	mov	r1, r3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 fc24 	bl	800899e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fcb7 	bl	8007aca <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
        }
        break;
 800716a:	e004      	b.n	8007176 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fbe0 	bl	8007934 <USBD_CtlError>
        break;
 8007174:	e000      	b.n	8007178 <USBD_StdEPReq+0x13c>
        break;
 8007176:	bf00      	nop
      }
      break;
 8007178:	e0aa      	b.n	80072d0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007180:	2b02      	cmp	r3, #2
 8007182:	d002      	beq.n	800718a <USBD_StdEPReq+0x14e>
 8007184:	2b03      	cmp	r3, #3
 8007186:	d032      	beq.n	80071ee <USBD_StdEPReq+0x1b2>
 8007188:	e097      	b.n	80072ba <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d007      	beq.n	80071a0 <USBD_StdEPReq+0x164>
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2b80      	cmp	r3, #128	; 0x80
 8007194:	d004      	beq.n	80071a0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fbcb 	bl	8007934 <USBD_CtlError>
          break;
 800719e:	e091      	b.n	80072c4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	da0b      	bge.n	80071c0 <USBD_StdEPReq+0x184>
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
 80071aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071ae:	4613      	mov	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	3310      	adds	r3, #16
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	4413      	add	r3, r2
 80071bc:	3304      	adds	r3, #4
 80071be:	e00b      	b.n	80071d8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	4413      	add	r3, r2
 80071d6:	3304      	adds	r3, #4
 80071d8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2202      	movs	r2, #2
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fc15 	bl	8007a16 <USBD_CtlSendData>
        break;
 80071ec:	e06a      	b.n	80072c4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80071ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	da11      	bge.n	800721a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	f003 020f 	and.w	r2, r3, #15
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	440b      	add	r3, r1
 8007208:	3324      	adds	r3, #36	; 0x24
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d117      	bne.n	8007240 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fb8e 	bl	8007934 <USBD_CtlError>
            break;
 8007218:	e054      	b.n	80072c4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	f003 020f 	and.w	r2, r3, #15
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	440b      	add	r3, r1
 800722c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d104      	bne.n	8007240 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fb7b 	bl	8007934 <USBD_CtlError>
            break;
 800723e:	e041      	b.n	80072c4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007244:	2b00      	cmp	r3, #0
 8007246:	da0b      	bge.n	8007260 <USBD_StdEPReq+0x224>
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	3310      	adds	r3, #16
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	4413      	add	r3, r2
 800725c:	3304      	adds	r3, #4
 800725e:	e00b      	b.n	8007278 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4413      	add	r3, r2
 8007276:	3304      	adds	r3, #4
 8007278:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d002      	beq.n	8007286 <USBD_StdEPReq+0x24a>
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	2b80      	cmp	r3, #128	; 0x80
 8007284:	d103      	bne.n	800728e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	e00e      	b.n	80072ac <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	4619      	mov	r1, r3
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fba2 	bl	80089dc <USBD_LL_IsStallEP>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2201      	movs	r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	e002      	b.n	80072ac <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2202      	movs	r2, #2
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fbaf 	bl	8007a16 <USBD_CtlSendData>
          break;
 80072b8:	e004      	b.n	80072c4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fb39 	bl	8007934 <USBD_CtlError>
        break;
 80072c2:	bf00      	nop
      }
      break;
 80072c4:	e004      	b.n	80072d0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fb33 	bl	8007934 <USBD_CtlError>
      break;
 80072ce:	bf00      	nop
    }
    break;
 80072d0:	e004      	b.n	80072dc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fb2d 	bl	8007934 <USBD_CtlError>
    break;
 80072da:	bf00      	nop
  }

  return ret;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072fa:	2300      	movs	r3, #0
 80072fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	885b      	ldrh	r3, [r3, #2]
 8007302:	0a1b      	lsrs	r3, r3, #8
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	2b06      	cmp	r3, #6
 800730a:	f200 8128 	bhi.w	800755e <USBD_GetDescriptor+0x276>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <USBD_GetDescriptor+0x2c>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007331 	.word	0x08007331
 8007318:	08007349 	.word	0x08007349
 800731c:	08007389 	.word	0x08007389
 8007320:	0800755f 	.word	0x0800755f
 8007324:	0800755f 	.word	0x0800755f
 8007328:	080074ff 	.word	0x080074ff
 800732c:	0800752b 	.word	0x0800752b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	7c12      	ldrb	r2, [r2, #16]
 800733c:	f107 0108 	add.w	r1, r7, #8
 8007340:	4610      	mov	r0, r2
 8007342:	4798      	blx	r3
 8007344:	60f8      	str	r0, [r7, #12]
    break;
 8007346:	e112      	b.n	800756e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	7c1b      	ldrb	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10d      	bne.n	800736c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007358:	f107 0208 	add.w	r2, r7, #8
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
 8007360:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3301      	adds	r3, #1
 8007366:	2202      	movs	r2, #2
 8007368:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800736a:	e100      	b.n	800756e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	f107 0208 	add.w	r2, r7, #8
 8007378:	4610      	mov	r0, r2
 800737a:	4798      	blx	r3
 800737c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3301      	adds	r3, #1
 8007382:	2202      	movs	r2, #2
 8007384:	701a      	strb	r2, [r3, #0]
    break;
 8007386:	e0f2      	b.n	800756e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	885b      	ldrh	r3, [r3, #2]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b05      	cmp	r3, #5
 8007390:	f200 80ac 	bhi.w	80074ec <USBD_GetDescriptor+0x204>
 8007394:	a201      	add	r2, pc, #4	; (adr r2, 800739c <USBD_GetDescriptor+0xb4>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073b5 	.word	0x080073b5
 80073a0:	080073e9 	.word	0x080073e9
 80073a4:	0800741d 	.word	0x0800741d
 80073a8:	08007451 	.word	0x08007451
 80073ac:	08007485 	.word	0x08007485
 80073b0:	080074b9 	.word	0x080074b9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	7c12      	ldrb	r2, [r2, #16]
 80073cc:	f107 0108 	add.w	r1, r7, #8
 80073d0:	4610      	mov	r0, r2
 80073d2:	4798      	blx	r3
 80073d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073d6:	e091      	b.n	80074fc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 faaa 	bl	8007934 <USBD_CtlError>
        err++;
 80073e0:	7afb      	ldrb	r3, [r7, #11]
 80073e2:	3301      	adds	r3, #1
 80073e4:	72fb      	strb	r3, [r7, #11]
      break;
 80073e6:	e089      	b.n	80074fc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	7c12      	ldrb	r2, [r2, #16]
 8007400:	f107 0108 	add.w	r1, r7, #8
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
 8007408:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800740a:	e077      	b.n	80074fc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa90 	bl	8007934 <USBD_CtlError>
        err++;
 8007414:	7afb      	ldrb	r3, [r7, #11]
 8007416:	3301      	adds	r3, #1
 8007418:	72fb      	strb	r3, [r7, #11]
      break;
 800741a:	e06f      	b.n	80074fc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00b      	beq.n	8007440 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	7c12      	ldrb	r2, [r2, #16]
 8007434:	f107 0108 	add.w	r1, r7, #8
 8007438:	4610      	mov	r0, r2
 800743a:	4798      	blx	r3
 800743c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800743e:	e05d      	b.n	80074fc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fa76 	bl	8007934 <USBD_CtlError>
        err++;
 8007448:	7afb      	ldrb	r3, [r7, #11]
 800744a:	3301      	adds	r3, #1
 800744c:	72fb      	strb	r3, [r7, #11]
      break;
 800744e:	e055      	b.n	80074fc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	7c12      	ldrb	r2, [r2, #16]
 8007468:	f107 0108 	add.w	r1, r7, #8
 800746c:	4610      	mov	r0, r2
 800746e:	4798      	blx	r3
 8007470:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007472:	e043      	b.n	80074fc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa5c 	bl	8007934 <USBD_CtlError>
        err++;
 800747c:	7afb      	ldrb	r3, [r7, #11]
 800747e:	3301      	adds	r3, #1
 8007480:	72fb      	strb	r3, [r7, #11]
      break;
 8007482:	e03b      	b.n	80074fc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00b      	beq.n	80074a8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	7c12      	ldrb	r2, [r2, #16]
 800749c:	f107 0108 	add.w	r1, r7, #8
 80074a0:	4610      	mov	r0, r2
 80074a2:	4798      	blx	r3
 80074a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074a6:	e029      	b.n	80074fc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fa42 	bl	8007934 <USBD_CtlError>
        err++;
 80074b0:	7afb      	ldrb	r3, [r7, #11]
 80074b2:	3301      	adds	r3, #1
 80074b4:	72fb      	strb	r3, [r7, #11]
      break;
 80074b6:	e021      	b.n	80074fc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00b      	beq.n	80074dc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	7c12      	ldrb	r2, [r2, #16]
 80074d0:	f107 0108 	add.w	r1, r7, #8
 80074d4:	4610      	mov	r0, r2
 80074d6:	4798      	blx	r3
 80074d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074da:	e00f      	b.n	80074fc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fa28 	bl	8007934 <USBD_CtlError>
        err++;
 80074e4:	7afb      	ldrb	r3, [r7, #11]
 80074e6:	3301      	adds	r3, #1
 80074e8:	72fb      	strb	r3, [r7, #11]
      break;
 80074ea:	e007      	b.n	80074fc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa20 	bl	8007934 <USBD_CtlError>
      err++;
 80074f4:	7afb      	ldrb	r3, [r7, #11]
 80074f6:	3301      	adds	r3, #1
 80074f8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80074fa:	bf00      	nop
    }
    break;
 80074fc:	e037      	b.n	800756e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7c1b      	ldrb	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750e:	f107 0208 	add.w	r2, r7, #8
 8007512:	4610      	mov	r0, r2
 8007514:	4798      	blx	r3
 8007516:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007518:	e029      	b.n	800756e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fa09 	bl	8007934 <USBD_CtlError>
      err++;
 8007522:	7afb      	ldrb	r3, [r7, #11]
 8007524:	3301      	adds	r3, #1
 8007526:	72fb      	strb	r3, [r7, #11]
    break;
 8007528:	e021      	b.n	800756e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7c1b      	ldrb	r3, [r3, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10d      	bne.n	800754e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753a:	f107 0208 	add.w	r2, r7, #8
 800753e:	4610      	mov	r0, r2
 8007540:	4798      	blx	r3
 8007542:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	3301      	adds	r3, #1
 8007548:	2207      	movs	r2, #7
 800754a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800754c:	e00f      	b.n	800756e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f9ef 	bl	8007934 <USBD_CtlError>
      err++;
 8007556:	7afb      	ldrb	r3, [r7, #11]
 8007558:	3301      	adds	r3, #1
 800755a:	72fb      	strb	r3, [r7, #11]
    break;
 800755c:	e007      	b.n	800756e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f9e7 	bl	8007934 <USBD_CtlError>
    err++;
 8007566:	7afb      	ldrb	r3, [r7, #11]
 8007568:	3301      	adds	r3, #1
 800756a:	72fb      	strb	r3, [r7, #11]
    break;
 800756c:	bf00      	nop
  }

  if (err != 0U)
 800756e:	7afb      	ldrb	r3, [r7, #11]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d11e      	bne.n	80075b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	88db      	ldrh	r3, [r3, #6]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d016      	beq.n	80075aa <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800757c:	893b      	ldrh	r3, [r7, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00e      	beq.n	80075a0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	88da      	ldrh	r2, [r3, #6]
 8007586:	893b      	ldrh	r3, [r7, #8]
 8007588:	4293      	cmp	r3, r2
 800758a:	bf28      	it	cs
 800758c:	4613      	movcs	r3, r2
 800758e:	b29b      	uxth	r3, r3
 8007590:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007592:	893b      	ldrh	r3, [r7, #8]
 8007594:	461a      	mov	r2, r3
 8007596:	68f9      	ldr	r1, [r7, #12]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fa3c 	bl	8007a16 <USBD_CtlSendData>
 800759e:	e009      	b.n	80075b4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f9c6 	bl	8007934 <USBD_CtlError>
 80075a8:	e004      	b.n	80075b4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa8d 	bl	8007aca <USBD_CtlSendStatus>
 80075b0:	e000      	b.n	80075b4 <USBD_GetDescriptor+0x2cc>
    return;
 80075b2:	bf00      	nop
    }
  }
}
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop

080075bc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	889b      	ldrh	r3, [r3, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d130      	bne.n	8007630 <USBD_SetAddress+0x74>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	88db      	ldrh	r3, [r3, #6]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d12c      	bne.n	8007630 <USBD_SetAddress+0x74>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	885b      	ldrh	r3, [r3, #2]
 80075da:	2b7f      	cmp	r3, #127	; 0x7f
 80075dc:	d828      	bhi.n	8007630 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	885b      	ldrh	r3, [r3, #2]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d104      	bne.n	80075fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f99c 	bl	8007934 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fc:	e01c      	b.n	8007638 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	7bfa      	ldrb	r2, [r7, #15]
 8007602:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f001 fa12 	bl	8008a34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fa5a 	bl	8007aca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d004      	beq.n	8007626 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007624:	e008      	b.n	8007638 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800762e:	e003      	b.n	8007638 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f97e 	bl	8007934 <USBD_CtlError>
  }
}
 8007638:	bf00      	nop
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	885b      	ldrh	r3, [r3, #2]
 8007652:	b2da      	uxtb	r2, r3
 8007654:	4b4b      	ldr	r3, [pc, #300]	; (8007784 <USBD_SetConfig+0x144>)
 8007656:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007658:	4b4a      	ldr	r3, [pc, #296]	; (8007784 <USBD_SetConfig+0x144>)
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d905      	bls.n	800766c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f966 	bl	8007934 <USBD_CtlError>
    return USBD_FAIL;
 8007668:	2303      	movs	r3, #3
 800766a:	e087      	b.n	800777c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007672:	2b02      	cmp	r3, #2
 8007674:	d002      	beq.n	800767c <USBD_SetConfig+0x3c>
 8007676:	2b03      	cmp	r3, #3
 8007678:	d025      	beq.n	80076c6 <USBD_SetConfig+0x86>
 800767a:	e071      	b.n	8007760 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800767c:	4b41      	ldr	r3, [pc, #260]	; (8007784 <USBD_SetConfig+0x144>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01c      	beq.n	80076be <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007684:	4b3f      	ldr	r3, [pc, #252]	; (8007784 <USBD_SetConfig+0x144>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800768e:	4b3d      	ldr	r3, [pc, #244]	; (8007784 <USBD_SetConfig+0x144>)
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff f9a7 	bl	80069e8 <USBD_SetClassConfig>
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f944 	bl	8007934 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80076ac:	e065      	b.n	800777a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa0b 	bl	8007aca <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2203      	movs	r2, #3
 80076b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80076bc:	e05d      	b.n	800777a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fa03 	bl	8007aca <USBD_CtlSendStatus>
    break;
 80076c4:	e059      	b.n	800777a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80076c6:	4b2f      	ldr	r3, [pc, #188]	; (8007784 <USBD_SetConfig+0x144>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d112      	bne.n	80076f4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80076d6:	4b2b      	ldr	r3, [pc, #172]	; (8007784 <USBD_SetConfig+0x144>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076e0:	4b28      	ldr	r3, [pc, #160]	; (8007784 <USBD_SetConfig+0x144>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff f99a 	bl	8006a20 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f9ec 	bl	8007aca <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80076f2:	e042      	b.n	800777a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80076f4:	4b23      	ldr	r3, [pc, #140]	; (8007784 <USBD_SetConfig+0x144>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d02a      	beq.n	8007758 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	b2db      	uxtb	r3, r3
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff f988 	bl	8006a20 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007710:	4b1c      	ldr	r3, [pc, #112]	; (8007784 <USBD_SetConfig+0x144>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800771a:	4b1a      	ldr	r3, [pc, #104]	; (8007784 <USBD_SetConfig+0x144>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7ff f961 	bl	80069e8 <USBD_SetClassConfig>
 8007726:	4603      	mov	r3, r0
 8007728:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00f      	beq.n	8007750 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f8fe 	bl	8007934 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff f96d 	bl	8006a20 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800774e:	e014      	b.n	800777a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f9ba 	bl	8007aca <USBD_CtlSendStatus>
    break;
 8007756:	e010      	b.n	800777a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f9b6 	bl	8007aca <USBD_CtlSendStatus>
    break;
 800775e:	e00c      	b.n	800777a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f8e6 	bl	8007934 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007768:	4b06      	ldr	r3, [pc, #24]	; (8007784 <USBD_SetConfig+0x144>)
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff f956 	bl	8006a20 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007774:	2303      	movs	r3, #3
 8007776:	73fb      	strb	r3, [r7, #15]
    break;
 8007778:	bf00      	nop
  }

  return ret;
 800777a:	7bfb      	ldrb	r3, [r7, #15]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20000378 	.word	0x20000378

08007788 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	88db      	ldrh	r3, [r3, #6]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d004      	beq.n	80077a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800779a:	6839      	ldr	r1, [r7, #0]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f8c9 	bl	8007934 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80077a2:	e021      	b.n	80077e8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	db17      	blt.n	80077de <USBD_GetConfig+0x56>
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	dd02      	ble.n	80077b8 <USBD_GetConfig+0x30>
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d00b      	beq.n	80077ce <USBD_GetConfig+0x46>
 80077b6:	e012      	b.n	80077de <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3308      	adds	r3, #8
 80077c2:	2201      	movs	r2, #1
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f925 	bl	8007a16 <USBD_CtlSendData>
      break;
 80077cc:	e00c      	b.n	80077e8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3304      	adds	r3, #4
 80077d2:	2201      	movs	r2, #1
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f91d 	bl	8007a16 <USBD_CtlSendData>
      break;
 80077dc:	e004      	b.n	80077e8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f8a7 	bl	8007934 <USBD_CtlError>
      break;
 80077e6:	bf00      	nop
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007800:	3b01      	subs	r3, #1
 8007802:	2b02      	cmp	r3, #2
 8007804:	d81e      	bhi.n	8007844 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	88db      	ldrh	r3, [r3, #6]
 800780a:	2b02      	cmp	r3, #2
 800780c:	d004      	beq.n	8007818 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f88f 	bl	8007934 <USBD_CtlError>
      break;
 8007816:	e01a      	b.n	800784e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f043 0202 	orr.w	r2, r3, #2
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	330c      	adds	r3, #12
 8007838:	2202      	movs	r2, #2
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f8ea 	bl	8007a16 <USBD_CtlSendData>
    break;
 8007842:	e004      	b.n	800784e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f874 	bl	8007934 <USBD_CtlError>
    break;
 800784c:	bf00      	nop
  }
}
 800784e:	bf00      	nop
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	885b      	ldrh	r3, [r3, #2]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d106      	bne.n	8007876 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f92a 	bl	8007aca <USBD_CtlSendStatus>
  }
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788e:	3b01      	subs	r3, #1
 8007890:	2b02      	cmp	r3, #2
 8007892:	d80b      	bhi.n	80078ac <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	885b      	ldrh	r3, [r3, #2]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d10c      	bne.n	80078b6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f910 	bl	8007aca <USBD_CtlSendStatus>
      }
      break;
 80078aa:	e004      	b.n	80078b6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f840 	bl	8007934 <USBD_CtlError>
      break;
 80078b4:	e000      	b.n	80078b8 <USBD_ClrFeature+0x3a>
      break;
 80078b6:	bf00      	nop
  }
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	781a      	ldrb	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	3301      	adds	r3, #1
 80078da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	781a      	ldrb	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3301      	adds	r3, #1
 80078e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff fad3 	bl	8006e96 <SWAPBYTE>
 80078f0:	4603      	mov	r3, r0
 80078f2:	461a      	mov	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	3301      	adds	r3, #1
 80078fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3301      	adds	r3, #1
 8007902:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f7ff fac6 	bl	8006e96 <SWAPBYTE>
 800790a:	4603      	mov	r3, r0
 800790c:	461a      	mov	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3301      	adds	r3, #1
 8007916:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3301      	adds	r3, #1
 800791c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f7ff fab9 	bl	8006e96 <SWAPBYTE>
 8007924:	4603      	mov	r3, r0
 8007926:	461a      	mov	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	80da      	strh	r2, [r3, #6]
}
 800792c:	bf00      	nop
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800793e:	2180      	movs	r1, #128	; 0x80
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f001 f80d 	bl	8008960 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007946:	2100      	movs	r1, #0
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f809 	bl	8008960 <USBD_LL_StallEP>
}
 800794e:	bf00      	nop
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b086      	sub	sp, #24
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d036      	beq.n	80079da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007970:	6938      	ldr	r0, [r7, #16]
 8007972:	f000 f836 	bl	80079e2 <USBD_GetLen>
 8007976:	4603      	mov	r3, r0
 8007978:	3301      	adds	r3, #1
 800797a:	b29b      	uxth	r3, r3
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	4413      	add	r3, r2
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	7812      	ldrb	r2, [r2, #0]
 800798e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007990:	7dfb      	ldrb	r3, [r7, #23]
 8007992:	3301      	adds	r3, #1
 8007994:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	4413      	add	r3, r2
 800799c:	2203      	movs	r2, #3
 800799e:	701a      	strb	r2, [r3, #0]
  idx++;
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
 80079a2:	3301      	adds	r3, #1
 80079a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80079a6:	e013      	b.n	80079d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	4413      	add	r3, r2
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	7812      	ldrb	r2, [r2, #0]
 80079b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	3301      	adds	r3, #1
 80079b8:	613b      	str	r3, [r7, #16]
    idx++;
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	3301      	adds	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	4413      	add	r3, r2
 80079c6:	2200      	movs	r2, #0
 80079c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80079ca:	7dfb      	ldrb	r3, [r7, #23]
 80079cc:	3301      	adds	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e7      	bne.n	80079a8 <USBD_GetString+0x52>
 80079d8:	e000      	b.n	80079dc <USBD_GetString+0x86>
    return;
 80079da:	bf00      	nop
  }
}
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80079f2:	e005      	b.n	8007a00 <USBD_GetLen+0x1e>
  {
    len++;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	3301      	adds	r3, #1
 80079f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	3301      	adds	r3, #1
 80079fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1f5      	bne.n	80079f4 <USBD_GetLen+0x12>
  }

  return len;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2202      	movs	r2, #2
 8007a26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f001 f818 	bl	8008a72 <USBD_LL_Transmit>

  return USBD_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f001 f807 	bl	8008a72 <USBD_LL_Transmit>

  return USBD_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2203      	movs	r2, #3
 8007a7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	2100      	movs	r1, #0
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f001 f80b 	bl	8008ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	2100      	movs	r1, #0
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 fffa 	bl	8008ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2204      	movs	r2, #4
 8007ad6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ada:	2300      	movs	r3, #0
 8007adc:	2200      	movs	r2, #0
 8007ade:	2100      	movs	r1, #0
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 ffc6 	bl	8008a72 <USBD_LL_Transmit>

  return USBD_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2205      	movs	r2, #5
 8007afc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b00:	2300      	movs	r3, #0
 8007b02:	2200      	movs	r2, #0
 8007b04:	2100      	movs	r1, #0
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 ffd4 	bl	8008ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	4912      	ldr	r1, [pc, #72]	; (8007b68 <MX_USB_DEVICE_Init+0x50>)
 8007b20:	4812      	ldr	r0, [pc, #72]	; (8007b6c <MX_USB_DEVICE_Init+0x54>)
 8007b22:	f7fe fef3 	bl	800690c <USBD_Init>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b2c:	f7f9 f9a4 	bl	8000e78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b30:	490f      	ldr	r1, [pc, #60]	; (8007b70 <MX_USB_DEVICE_Init+0x58>)
 8007b32:	480e      	ldr	r0, [pc, #56]	; (8007b6c <MX_USB_DEVICE_Init+0x54>)
 8007b34:	f7fe ff20 	bl	8006978 <USBD_RegisterClass>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b3e:	f7f9 f99b 	bl	8000e78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b42:	490c      	ldr	r1, [pc, #48]	; (8007b74 <MX_USB_DEVICE_Init+0x5c>)
 8007b44:	4809      	ldr	r0, [pc, #36]	; (8007b6c <MX_USB_DEVICE_Init+0x54>)
 8007b46:	f7fe fe45 	bl	80067d4 <USBD_CDC_RegisterInterface>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b50:	f7f9 f992 	bl	8000e78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b54:	4805      	ldr	r0, [pc, #20]	; (8007b6c <MX_USB_DEVICE_Init+0x54>)
 8007b56:	f7fe ff30 	bl	80069ba <USBD_Start>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b60:	f7f9 f98a 	bl	8000e78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b64:	bf00      	nop
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	20000138 	.word	0x20000138
 8007b6c:	20010604 	.word	0x20010604
 8007b70:	20000020 	.word	0x20000020
 8007b74:	20000124 	.word	0x20000124

08007b78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4905      	ldr	r1, [pc, #20]	; (8007b94 <CDC_Init_FS+0x1c>)
 8007b80:	4805      	ldr	r0, [pc, #20]	; (8007b98 <CDC_Init_FS+0x20>)
 8007b82:	f7fe fe3c 	bl	80067fe <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b86:	4905      	ldr	r1, [pc, #20]	; (8007b9c <CDC_Init_FS+0x24>)
 8007b88:	4803      	ldr	r0, [pc, #12]	; (8007b98 <CDC_Init_FS+0x20>)
 8007b8a:	f7fe fe51 	bl	8006830 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8007b8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20010958 	.word	0x20010958
 8007b98:	20010604 	.word	0x20010604
 8007b9c:	200108d8 	.word	0x200108d8

08007ba0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8007ba4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	6039      	str	r1, [r7, #0]
 8007bba:	71fb      	strb	r3, [r7, #7]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	2b23      	cmp	r3, #35	; 0x23
 8007bc4:	d866      	bhi.n	8007c94 <CDC_Control_FS+0xe4>
 8007bc6:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <CDC_Control_FS+0x1c>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007c95 	.word	0x08007c95
 8007bd0:	08007c95 	.word	0x08007c95
 8007bd4:	08007c95 	.word	0x08007c95
 8007bd8:	08007c95 	.word	0x08007c95
 8007bdc:	08007c95 	.word	0x08007c95
 8007be0:	08007c95 	.word	0x08007c95
 8007be4:	08007c95 	.word	0x08007c95
 8007be8:	08007c95 	.word	0x08007c95
 8007bec:	08007c95 	.word	0x08007c95
 8007bf0:	08007c95 	.word	0x08007c95
 8007bf4:	08007c95 	.word	0x08007c95
 8007bf8:	08007c95 	.word	0x08007c95
 8007bfc:	08007c95 	.word	0x08007c95
 8007c00:	08007c95 	.word	0x08007c95
 8007c04:	08007c95 	.word	0x08007c95
 8007c08:	08007c95 	.word	0x08007c95
 8007c0c:	08007c95 	.word	0x08007c95
 8007c10:	08007c95 	.word	0x08007c95
 8007c14:	08007c95 	.word	0x08007c95
 8007c18:	08007c95 	.word	0x08007c95
 8007c1c:	08007c95 	.word	0x08007c95
 8007c20:	08007c95 	.word	0x08007c95
 8007c24:	08007c95 	.word	0x08007c95
 8007c28:	08007c95 	.word	0x08007c95
 8007c2c:	08007c95 	.word	0x08007c95
 8007c30:	08007c95 	.word	0x08007c95
 8007c34:	08007c95 	.word	0x08007c95
 8007c38:	08007c95 	.word	0x08007c95
 8007c3c:	08007c95 	.word	0x08007c95
 8007c40:	08007c95 	.word	0x08007c95
 8007c44:	08007c95 	.word	0x08007c95
 8007c48:	08007c95 	.word	0x08007c95
 8007c4c:	08007c95 	.word	0x08007c95
 8007c50:	08007c95 	.word	0x08007c95
 8007c54:	08007c5d 	.word	0x08007c5d
 8007c58:	08007c95 	.word	0x08007c95

		break;

	case CDC_SET_CONTROL_LINE_STATE:
	{
		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]
		if ((req->wValue & 0x0001) != 0)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	885b      	ldrh	r3, [r3, #2]
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d009      	beq.n	8007c80 <CDC_Control_FS+0xd0>
		{
			HOST_PORT_COM_OPEN = 1;
 8007c6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ca0 <CDC_Control_FS+0xf0>)
 8007c6e:	2201      	movs	r2, #1
 8007c70:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8007c72:	2201      	movs	r2, #1
 8007c74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c78:	480a      	ldr	r0, [pc, #40]	; (8007ca4 <CDC_Control_FS+0xf4>)
 8007c7a:	f7fa f9e1 	bl	8002040 <HAL_GPIO_WritePin>
		else
		{
			HOST_PORT_COM_OPEN = 0;
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
		}
		break;
 8007c7e:	e00a      	b.n	8007c96 <CDC_Control_FS+0xe6>
			HOST_PORT_COM_OPEN = 0;
 8007c80:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <CDC_Control_FS+0xf0>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8007c86:	2200      	movs	r2, #0
 8007c88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c8c:	4805      	ldr	r0, [pc, #20]	; (8007ca4 <CDC_Control_FS+0xf4>)
 8007c8e:	f7fa f9d7 	bl	8002040 <HAL_GPIO_WritePin>
		break;
 8007c92:	e000      	b.n	8007c96 <CDC_Control_FS+0xe6>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8007c94:	bf00      	nop
	}

	return (USBD_OK);
 8007c96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000379 	.word	0x20000379
 8007ca4:	40020c00 	.word	0x40020c00

08007ca8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t result = USBD_OK;;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73bb      	strb	r3, [r7, #14]
	static uint8_t rxLen;
	static uint8_t leftAlign;
	static uint8_t VT100cmdSeq;
	static uint8_t rxBufferFS[APP_RX_DATA_SIZE];
	static uint8_t txBufferFS[APP_TX_DATA_SIZE];
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007cbc:	4887      	ldr	r0, [pc, #540]	; (8007edc <CDC_Receive_FS+0x234>)
 8007cbe:	f7fa f9bf 	bl	8002040 <HAL_GPIO_WritePin>

	/* Get data from serial com */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	4886      	ldr	r0, [pc, #536]	; (8007ee0 <CDC_Receive_FS+0x238>)
 8007cc6:	f7fe fdb3 	bl	8006830 <USBD_CDC_SetRxBuffer>
	if ((result = USBD_CDC_ReceivePacket(&hUsbDeviceFS)) != USBD_OK)
 8007cca:	4885      	ldr	r0, [pc, #532]	; (8007ee0 <CDC_Receive_FS+0x238>)
 8007ccc:	f7fe fdf4 	bl	80068b8 <USBD_CDC_ReceivePacket>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73bb      	strb	r3, [r7, #14]
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <CDC_Receive_FS+0x44>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007ce0:	487e      	ldr	r0, [pc, #504]	; (8007edc <CDC_Receive_FS+0x234>)
 8007ce2:	f7fa f9ad 	bl	8002040 <HAL_GPIO_WritePin>
		return result;
 8007ce6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cea:	e0f3      	b.n	8007ed4 <CDC_Receive_FS+0x22c>
	}

	for (uint8_t i = 0; i < (*Len); i++)
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]
 8007cf0:	e0cd      	b.n	8007e8e <CDC_Receive_FS+0x1e6>
	{
		/* Avoid buffer overflow */
		if (rxLen == APP_RX_DATA_SIZE-1)
 8007cf2:	4b7c      	ldr	r3, [pc, #496]	; (8007ee4 <CDC_Receive_FS+0x23c>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8007cf8:	d102      	bne.n	8007d00 <CDC_Receive_FS+0x58>
		{	rxLen = 0;
 8007cfa:	4b7a      	ldr	r3, [pc, #488]	; (8007ee4 <CDC_Receive_FS+0x23c>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	701a      	strb	r2, [r3, #0]
		}

		/* Avoid VT100 cmd sequences (4 uint8_t)*/
		if(Buf[i] == '\033')
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	4413      	add	r3, r2
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b1b      	cmp	r3, #27
 8007d0a:	d102      	bne.n	8007d12 <CDC_Receive_FS+0x6a>
		{	VT100cmdSeq = 4;
 8007d0c:	4b76      	ldr	r3, [pc, #472]	; (8007ee8 <CDC_Receive_FS+0x240>)
 8007d0e:	2204      	movs	r2, #4
 8007d10:	701a      	strb	r2, [r3, #0]
		}

		if(!VT100cmdSeq) // avoid VT100cmd
 8007d12:	4b75      	ldr	r3, [pc, #468]	; (8007ee8 <CDC_Receive_FS+0x240>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f040 80b0 	bne.w	8007e7c <CDC_Receive_FS+0x1d4>
		{
			/* If Backspace key: clear the last char */
			if (Buf[i] == '\b')
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	4413      	add	r3, r2
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d12d      	bne.n	8007d84 <CDC_Receive_FS+0xdc>
			{
				if(leftAlign && CDC_RX_DATA_PRINT)
 8007d28:	4b70      	ldr	r3, [pc, #448]	; (8007eec <CDC_Receive_FS+0x244>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80ab 	beq.w	8007e88 <CDC_Receive_FS+0x1e0>
 8007d32:	4b6f      	ldr	r3, [pc, #444]	; (8007ef0 <CDC_Receive_FS+0x248>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 80a6 	beq.w	8007e88 <CDC_Receive_FS+0x1e0>
				{
					memcpy(&txBufferFS[txLen], "\b \b", 3);
 8007d3c:	4b6d      	ldr	r3, [pc, #436]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	461a      	mov	r2, r3
 8007d42:	4b6d      	ldr	r3, [pc, #436]	; (8007ef8 <CDC_Receive_FS+0x250>)
 8007d44:	4413      	add	r3, r2
 8007d46:	2203      	movs	r2, #3
 8007d48:	496c      	ldr	r1, [pc, #432]	; (8007efc <CDC_Receive_FS+0x254>)
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 ff4c 	bl	8008be8 <memcpy>
					txLen += 3;
 8007d50:	4b68      	ldr	r3, [pc, #416]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	3303      	adds	r3, #3
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	4b66      	ldr	r3, [pc, #408]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007d5a:	701a      	strb	r2, [r3, #0]
					txLen %= APP_TX_DATA_SIZE;
 8007d5c:	4b65      	ldr	r3, [pc, #404]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	4b63      	ldr	r3, [pc, #396]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007d68:	701a      	strb	r2, [r3, #0]
					rxLen--;
 8007d6a:	4b5e      	ldr	r3, [pc, #376]	; (8007ee4 <CDC_Receive_FS+0x23c>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	4b5c      	ldr	r3, [pc, #368]	; (8007ee4 <CDC_Receive_FS+0x23c>)
 8007d74:	701a      	strb	r2, [r3, #0]
					leftAlign--;
 8007d76:	4b5d      	ldr	r3, [pc, #372]	; (8007eec <CDC_Receive_FS+0x244>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	4b5b      	ldr	r3, [pc, #364]	; (8007eec <CDC_Receive_FS+0x244>)
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	e081      	b.n	8007e88 <CDC_Receive_FS+0x1e0>
				}
			}
			/* Else if Enter key: add a \n to terminal and extract output buffer */
			else if (Buf[i] == '\r' || Buf[i] == '\0')
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	4413      	add	r3, r2
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b0d      	cmp	r3, #13
 8007d8e:	d005      	beq.n	8007d9c <CDC_Receive_FS+0xf4>
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	4413      	add	r3, r2
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d143      	bne.n	8007e24 <CDC_Receive_FS+0x17c>
			{
				if (CDC_RX_DATA_PRINT)
 8007d9c:	4b54      	ldr	r3, [pc, #336]	; (8007ef0 <CDC_Receive_FS+0x248>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d019      	beq.n	8007dd8 <CDC_Receive_FS+0x130>
				{
					memcpy(&txBufferFS[txLen], "\r\n::STM@serial:: ", 17);
 8007da4:	4b53      	ldr	r3, [pc, #332]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	461a      	mov	r2, r3
 8007daa:	4b53      	ldr	r3, [pc, #332]	; (8007ef8 <CDC_Receive_FS+0x250>)
 8007dac:	4413      	add	r3, r2
 8007dae:	2211      	movs	r2, #17
 8007db0:	4953      	ldr	r1, [pc, #332]	; (8007f00 <CDC_Receive_FS+0x258>)
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 ff18 	bl	8008be8 <memcpy>
					txLen += 17;
 8007db8:	4b4e      	ldr	r3, [pc, #312]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	3311      	adds	r3, #17
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	4b4c      	ldr	r3, [pc, #304]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007dc2:	701a      	strb	r2, [r3, #0]
					txLen %= APP_TX_DATA_SIZE;
 8007dc4:	4b4b      	ldr	r3, [pc, #300]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	4b49      	ldr	r3, [pc, #292]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007dd0:	701a      	strb	r2, [r3, #0]
					leftAlign = 0;
 8007dd2:	4b46      	ldr	r3, [pc, #280]	; (8007eec <CDC_Receive_FS+0x244>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	701a      	strb	r2, [r3, #0]
				}
				if(rxLen)
 8007dd8:	4b42      	ldr	r3, [pc, #264]	; (8007ee4 <CDC_Receive_FS+0x23c>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d053      	beq.n	8007e88 <CDC_Receive_FS+0x1e0>
				{
					rxBufferFS[rxLen++] = '\r';
 8007de0:	4b40      	ldr	r3, [pc, #256]	; (8007ee4 <CDC_Receive_FS+0x23c>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	b2d1      	uxtb	r1, r2
 8007de8:	4a3e      	ldr	r2, [pc, #248]	; (8007ee4 <CDC_Receive_FS+0x23c>)
 8007dea:	7011      	strb	r1, [r2, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	4b45      	ldr	r3, [pc, #276]	; (8007f04 <CDC_Receive_FS+0x25c>)
 8007df0:	210d      	movs	r1, #13
 8007df2:	5499      	strb	r1, [r3, r2]
					rxBufferFS[rxLen++] = '\0';
 8007df4:	4b3b      	ldr	r3, [pc, #236]	; (8007ee4 <CDC_Receive_FS+0x23c>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	b2d1      	uxtb	r1, r2
 8007dfc:	4a39      	ldr	r2, [pc, #228]	; (8007ee4 <CDC_Receive_FS+0x23c>)
 8007dfe:	7011      	strb	r1, [r2, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	4b40      	ldr	r3, [pc, #256]	; (8007f04 <CDC_Receive_FS+0x25c>)
 8007e04:	2100      	movs	r1, #0
 8007e06:	5499      	strb	r1, [r3, r2]
					memcpy(UserRxBufferFS, rxBufferFS, rxLen);
 8007e08:	4b36      	ldr	r3, [pc, #216]	; (8007ee4 <CDC_Receive_FS+0x23c>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	493d      	ldr	r1, [pc, #244]	; (8007f04 <CDC_Receive_FS+0x25c>)
 8007e10:	483d      	ldr	r0, [pc, #244]	; (8007f08 <CDC_Receive_FS+0x260>)
 8007e12:	f000 fee9 	bl	8008be8 <memcpy>
					CDC_RX_DATA_PENDING = 1;
 8007e16:	4b3d      	ldr	r3, [pc, #244]	; (8007f0c <CDC_Receive_FS+0x264>)
 8007e18:	2201      	movs	r2, #1
 8007e1a:	701a      	strb	r2, [r3, #0]
					rxLen = 0;
 8007e1c:	4b31      	ldr	r3, [pc, #196]	; (8007ee4 <CDC_Receive_FS+0x23c>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	701a      	strb	r2, [r3, #0]
				if(rxLen)
 8007e22:	e031      	b.n	8007e88 <CDC_Receive_FS+0x1e0>
				}
			}
			/* Else get the character */
			else
			{
				if (CDC_RX_DATA_PRINT)
 8007e24:	4b32      	ldr	r3, [pc, #200]	; (8007ef0 <CDC_Receive_FS+0x248>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d019      	beq.n	8007e60 <CDC_Receive_FS+0x1b8>
				{
					txBufferFS[txLen++] = Buf[i];
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	441a      	add	r2, r3
 8007e32:	4b30      	ldr	r3, [pc, #192]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	1c59      	adds	r1, r3, #1
 8007e38:	b2c8      	uxtb	r0, r1
 8007e3a:	492e      	ldr	r1, [pc, #184]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007e3c:	7008      	strb	r0, [r1, #0]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	7812      	ldrb	r2, [r2, #0]
 8007e42:	4b2d      	ldr	r3, [pc, #180]	; (8007ef8 <CDC_Receive_FS+0x250>)
 8007e44:	545a      	strb	r2, [r3, r1]
					txLen %= APP_TX_DATA_SIZE;
 8007e46:	4b2b      	ldr	r3, [pc, #172]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	4b28      	ldr	r3, [pc, #160]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007e52:	701a      	strb	r2, [r3, #0]
					leftAlign++;
 8007e54:	4b25      	ldr	r3, [pc, #148]	; (8007eec <CDC_Receive_FS+0x244>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	4b23      	ldr	r3, [pc, #140]	; (8007eec <CDC_Receive_FS+0x244>)
 8007e5e:	701a      	strb	r2, [r3, #0]
				}
				rxBufferFS[rxLen++] = Buf[i];
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	441a      	add	r2, r3
 8007e66:	4b1f      	ldr	r3, [pc, #124]	; (8007ee4 <CDC_Receive_FS+0x23c>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	1c59      	adds	r1, r3, #1
 8007e6c:	b2c8      	uxtb	r0, r1
 8007e6e:	491d      	ldr	r1, [pc, #116]	; (8007ee4 <CDC_Receive_FS+0x23c>)
 8007e70:	7008      	strb	r0, [r1, #0]
 8007e72:	4619      	mov	r1, r3
 8007e74:	7812      	ldrb	r2, [r2, #0]
 8007e76:	4b23      	ldr	r3, [pc, #140]	; (8007f04 <CDC_Receive_FS+0x25c>)
 8007e78:	545a      	strb	r2, [r3, r1]
 8007e7a:	e005      	b.n	8007e88 <CDC_Receive_FS+0x1e0>
			}
		}
		else
		{	VT100cmdSeq--;
 8007e7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ee8 <CDC_Receive_FS+0x240>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	b2da      	uxtb	r2, r3
 8007e84:	4b18      	ldr	r3, [pc, #96]	; (8007ee8 <CDC_Receive_FS+0x240>)
 8007e86:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < (*Len); i++)
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	73fb      	strb	r3, [r7, #15]
 8007e8e:	7bfa      	ldrb	r2, [r7, #15]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	f4ff af2c 	bcc.w	8007cf2 <CDC_Receive_FS+0x4a>
		}
	}

	/* Send result to terminal */
	if(CDC_RX_DATA_PRINT && HOST_PORT_COM_OPEN)
 8007e9a:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <CDC_Receive_FS+0x248>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d010      	beq.n	8007ec4 <CDC_Receive_FS+0x21c>
 8007ea2:	4b1b      	ldr	r3, [pc, #108]	; (8007f10 <CDC_Receive_FS+0x268>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00c      	beq.n	8007ec4 <CDC_Receive_FS+0x21c>
	{
		if(CDC_Transmit_FS(txBufferFS, txLen) == USBD_OK)
 8007eaa:	4b12      	ldr	r3, [pc, #72]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	4811      	ldr	r0, [pc, #68]	; (8007ef8 <CDC_Receive_FS+0x250>)
 8007eb4:	f000 f82e 	bl	8007f14 <CDC_Transmit_FS>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d102      	bne.n	8007ec4 <CDC_Receive_FS+0x21c>
		{	txLen = 0;
 8007ebe:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <CDC_Receive_FS+0x24c>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007eca:	4804      	ldr	r0, [pc, #16]	; (8007edc <CDC_Receive_FS+0x234>)
 8007ecc:	f7fa f8b8 	bl	8002040 <HAL_GPIO_WritePin>

	return result;
 8007ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
  /* USER CODE END 6 */
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	40020c00 	.word	0x40020c00
 8007ee0:	20010604 	.word	0x20010604
 8007ee4:	2000037b 	.word	0x2000037b
 8007ee8:	2000037c 	.word	0x2000037c
 8007eec:	2000037d 	.word	0x2000037d
 8007ef0:	200108d4 	.word	0x200108d4
 8007ef4:	2000037e 	.word	0x2000037e
 8007ef8:	20000380 	.word	0x20000380
 8007efc:	08009fe8 	.word	0x08009fe8
 8007f00:	08009fec 	.word	0x08009fec
 8007f04:	20000400 	.word	0x20000400
 8007f08:	200108d8 	.word	0x200108d8
 8007f0c:	2000037a 	.word	0x2000037a
 8007f10:	20000379 	.word	0x20000379

08007f14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8007f24:	2201      	movs	r2, #1
 8007f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007f2a:	4815      	ldr	r0, [pc, #84]	; (8007f80 <CDC_Transmit_FS+0x6c>)
 8007f2c:	f7fa f888 	bl	8002040 <HAL_GPIO_WritePin>
	USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8007f30:	4b14      	ldr	r3, [pc, #80]	; (8007f84 <CDC_Transmit_FS+0x70>)
 8007f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f36:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0U)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d007      	beq.n	8007f52 <CDC_Transmit_FS+0x3e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007f42:	2200      	movs	r2, #0
 8007f44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007f48:	480d      	ldr	r0, [pc, #52]	; (8007f80 <CDC_Transmit_FS+0x6c>)
 8007f4a:	f7fa f879 	bl	8002040 <HAL_GPIO_WritePin>
		return USBD_BUSY;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e011      	b.n	8007f76 <CDC_Transmit_FS+0x62>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f52:	887b      	ldrh	r3, [r7, #2]
 8007f54:	461a      	mov	r2, r3
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	480a      	ldr	r0, [pc, #40]	; (8007f84 <CDC_Transmit_FS+0x70>)
 8007f5a:	f7fe fc50 	bl	80067fe <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f5e:	4809      	ldr	r0, [pc, #36]	; (8007f84 <CDC_Transmit_FS+0x70>)
 8007f60:	f7fe fc7a 	bl	8006858 <USBD_CDC_TransmitPacket>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007f6e:	4804      	ldr	r0, [pc, #16]	; (8007f80 <CDC_Transmit_FS+0x6c>)
 8007f70:	f7fa f866 	bl	8002040 <HAL_GPIO_WritePin>
  /* USER CODE END 7 */
  return result;
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	40020c00 	.word	0x40020c00
 8007f84:	20010604 	.word	0x20010604

08007f88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	371c      	adds	r7, #28
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
	...

08007fac <_printf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void _printf(const char *format, ...)
{
 8007fac:	b40f      	push	{r0, r1, r2, r3}
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
	va_list arg;
	if (HOST_PORT_COM_OPEN)
 8007fb4:	4b11      	ldr	r3, [pc, #68]	; (8007ffc <_printf+0x50>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d018      	beq.n	8007fee <_printf+0x42>
	{
		va_start(arg, format);
 8007fbc:	f107 0314 	add.w	r3, r7, #20
 8007fc0:	607b      	str	r3, [r7, #4]
		vsprintf((char*) UserTxBufferFS, format, arg);
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6939      	ldr	r1, [r7, #16]
 8007fc6:	480e      	ldr	r0, [pc, #56]	; (8008000 <_printf+0x54>)
 8007fc8:	f000 ff10 	bl	8008dec <vsiprintf>
		va_end(arg);
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY)
 8007fcc:	bf00      	nop
 8007fce:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <_printf+0x50>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <_printf+0x42>
 8007fd6:	480a      	ldr	r0, [pc, #40]	; (8008000 <_printf+0x54>)
 8007fd8:	f7f8 f904 	bl	80001e4 <strlen>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4807      	ldr	r0, [pc, #28]	; (8008000 <_printf+0x54>)
 8007fe4:	f7ff ff96 	bl	8007f14 <CDC_Transmit_FS>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d0ef      	beq.n	8007fce <_printf+0x22>
		{
		}
	}
}
 8007fee:	bf00      	nop
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ff8:	b004      	add	sp, #16
 8007ffa:	4770      	bx	lr
 8007ffc:	20000379 	.word	0x20000379
 8008000:	20010958 	.word	0x20010958

08008004 <_cprintf>:

void _cprintf(const char *format, ...)
{
 8008004:	b40f      	push	{r0, r1, r2, r3}
 8008006:	b5b0      	push	{r4, r5, r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af02      	add	r7, sp, #8
	va_list arg;
	uint32_t clktime;
	if (HOST_PORT_COM_OPEN)
 800800c:	4b38      	ldr	r3, [pc, #224]	; (80080f0 <_cprintf+0xec>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d066      	beq.n	80080e2 <_cprintf+0xde>
	{
		clktime = HAL_GetTick();
 8008014:	f7f9 f998 	bl	8001348 <HAL_GetTick>
 8008018:	6078      	str	r0, [r7, #4]
		va_start(arg, format);
 800801a:	f107 031c 	add.w	r3, r7, #28
 800801e:	603b      	str	r3, [r7, #0]
		sprintf((char*) UserTxBufferFS, "\r[%02lu:%02lu:%02lu.%03lu] ", (clktime/3600000)%100, (clktime/60000)%60, (clktime/1000)%60, clktime%1000);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a34      	ldr	r2, [pc, #208]	; (80080f4 <_cprintf+0xf0>)
 8008024:	fba2 2303 	umull	r2, r3, r2, r3
 8008028:	0d5b      	lsrs	r3, r3, #21
 800802a:	4a33      	ldr	r2, [pc, #204]	; (80080f8 <_cprintf+0xf4>)
 800802c:	fba2 1203 	umull	r1, r2, r2, r3
 8008030:	0950      	lsrs	r0, r2, #5
 8008032:	2264      	movs	r2, #100	; 0x64
 8008034:	fb02 f200 	mul.w	r2, r2, r0
 8008038:	1a98      	subs	r0, r3, r2
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a2f      	ldr	r2, [pc, #188]	; (80080fc <_cprintf+0xf8>)
 800803e:	fba2 2303 	umull	r2, r3, r2, r3
 8008042:	0b9a      	lsrs	r2, r3, #14
 8008044:	4b2e      	ldr	r3, [pc, #184]	; (8008100 <_cprintf+0xfc>)
 8008046:	fba3 1302 	umull	r1, r3, r3, r2
 800804a:	0959      	lsrs	r1, r3, #5
 800804c:	460b      	mov	r3, r1
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	1a5b      	subs	r3, r3, r1
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	1ad1      	subs	r1, r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a2a      	ldr	r2, [pc, #168]	; (8008104 <_cprintf+0x100>)
 800805a:	fba2 2303 	umull	r2, r3, r2, r3
 800805e:	099c      	lsrs	r4, r3, #6
 8008060:	4b27      	ldr	r3, [pc, #156]	; (8008100 <_cprintf+0xfc>)
 8008062:	fba3 2304 	umull	r2, r3, r3, r4
 8008066:	095a      	lsrs	r2, r3, #5
 8008068:	4613      	mov	r3, r2
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	1a9b      	subs	r3, r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	1ae2      	subs	r2, r4, r3
 8008072:	687c      	ldr	r4, [r7, #4]
 8008074:	4b23      	ldr	r3, [pc, #140]	; (8008104 <_cprintf+0x100>)
 8008076:	fba3 5304 	umull	r5, r3, r3, r4
 800807a:	099b      	lsrs	r3, r3, #6
 800807c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8008080:	fb05 f303 	mul.w	r3, r5, r3
 8008084:	1ae3      	subs	r3, r4, r3
 8008086:	9301      	str	r3, [sp, #4]
 8008088:	9200      	str	r2, [sp, #0]
 800808a:	460b      	mov	r3, r1
 800808c:	4602      	mov	r2, r0
 800808e:	491e      	ldr	r1, [pc, #120]	; (8008108 <_cprintf+0x104>)
 8008090:	481e      	ldr	r0, [pc, #120]	; (800810c <_cprintf+0x108>)
 8008092:	f000 fe75 	bl	8008d80 <siprintf>
		vsprintf((char*) &UserTxBufferFS[16], format, arg);
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	69b9      	ldr	r1, [r7, #24]
 800809a:	481d      	ldr	r0, [pc, #116]	; (8008110 <_cprintf+0x10c>)
 800809c:	f000 fea6 	bl	8008dec <vsiprintf>
		va_end(arg);
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY)
 80080a0:	bf00      	nop
 80080a2:	4b13      	ldr	r3, [pc, #76]	; (80080f0 <_cprintf+0xec>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00b      	beq.n	80080c2 <_cprintf+0xbe>
 80080aa:	4818      	ldr	r0, [pc, #96]	; (800810c <_cprintf+0x108>)
 80080ac:	f7f8 f89a 	bl	80001e4 <strlen>
 80080b0:	4603      	mov	r3, r0
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	4619      	mov	r1, r3
 80080b6:	4815      	ldr	r0, [pc, #84]	; (800810c <_cprintf+0x108>)
 80080b8:	f7ff ff2c 	bl	8007f14 <CDC_Transmit_FS>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d0ef      	beq.n	80080a2 <_cprintf+0x9e>
		{
		}
		if(CDC_RX_DATA_PRINT)
 80080c2:	4b14      	ldr	r3, [pc, #80]	; (8008114 <_cprintf+0x110>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00b      	beq.n	80080e2 <_cprintf+0xde>
		{
			while(HOST_PORT_COM_OPEN && CDC_Transmit_FS((uint8_t *) "::STM@serial:: ", 15) == USBD_BUSY)
 80080ca:	bf00      	nop
 80080cc:	4b08      	ldr	r3, [pc, #32]	; (80080f0 <_cprintf+0xec>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d006      	beq.n	80080e2 <_cprintf+0xde>
 80080d4:	210f      	movs	r1, #15
 80080d6:	4810      	ldr	r0, [pc, #64]	; (8008118 <_cprintf+0x114>)
 80080d8:	f7ff ff1c 	bl	8007f14 <CDC_Transmit_FS>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d0f4      	beq.n	80080cc <_cprintf+0xc8>
			{
			}
		}
	}

}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80080ec:	b004      	add	sp, #16
 80080ee:	4770      	bx	lr
 80080f0:	20000379 	.word	0x20000379
 80080f4:	95217cb1 	.word	0x95217cb1
 80080f8:	51eb851f 	.word	0x51eb851f
 80080fc:	45e7b273 	.word	0x45e7b273
 8008100:	88888889 	.word	0x88888889
 8008104:	10624dd3 	.word	0x10624dd3
 8008108:	0800a000 	.word	0x0800a000
 800810c:	20010958 	.word	0x20010958
 8008110:	20010968 	.word	0x20010968
 8008114:	200108d4 	.word	0x200108d4
 8008118:	0800a01c 	.word	0x0800a01c

0800811c <_scanf>:

void _scanf(const char *format, ...)
{
 800811c:	b40f      	push	{r0, r1, r2, r3}
 800811e:	b580      	push	{r7, lr}
 8008120:	b082      	sub	sp, #8
 8008122:	af00      	add	r7, sp, #0
	while (!CDC_RX_DATA_PENDING && HOST_PORT_COM_OPEN)
 8008124:	e005      	b.n	8008132 <_scanf+0x16>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8008126:	2201      	movs	r2, #1
 8008128:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800812c:	4814      	ldr	r0, [pc, #80]	; (8008180 <_scanf+0x64>)
 800812e:	f7f9 ff87 	bl	8002040 <HAL_GPIO_WritePin>
	while (!CDC_RX_DATA_PENDING && HOST_PORT_COM_OPEN)
 8008132:	4b14      	ldr	r3, [pc, #80]	; (8008184 <_scanf+0x68>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	f083 0301 	eor.w	r3, r3, #1
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <_scanf+0x2c>
 8008140:	4b11      	ldr	r3, [pc, #68]	; (8008188 <_scanf+0x6c>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1ee      	bne.n	8008126 <_scanf+0xa>
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008148:	2200      	movs	r2, #0
 800814a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800814e:	480c      	ldr	r0, [pc, #48]	; (8008180 <_scanf+0x64>)
 8008150:	f7f9 ff76 	bl	8002040 <HAL_GPIO_WritePin>
	if (CDC_RX_DATA_PENDING)
 8008154:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <_scanf+0x68>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <_scanf+0x56>
	{
		va_list arg;
		va_start(arg, format);
 800815c:	f107 0314 	add.w	r3, r7, #20
 8008160:	607b      	str	r3, [r7, #4]
		vsscanf((char*) UserRxBufferFS, format, arg);
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	6939      	ldr	r1, [r7, #16]
 8008166:	4809      	ldr	r0, [pc, #36]	; (800818c <_scanf+0x70>)
 8008168:	f000 fe6e 	bl	8008e48 <vsiscanf>
		va_end(arg);
		CDC_RX_DATA_PENDING = 0;
 800816c:	4b05      	ldr	r3, [pc, #20]	; (8008184 <_scanf+0x68>)
 800816e:	2200      	movs	r2, #0
 8008170:	701a      	strb	r2, [r3, #0]
	}
}
 8008172:	bf00      	nop
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800817c:	b004      	add	sp, #16
 800817e:	4770      	bx	lr
 8008180:	40020c00 	.word	0x40020c00
 8008184:	2000037a 	.word	0x2000037a
 8008188:	20000379 	.word	0x20000379
 800818c:	200108d8 	.word	0x200108d8

08008190 <_cspin>:

void _cspin(void)
{
 8008190:	b5b0      	push	{r4, r5, r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af02      	add	r7, sp, #8
	static uint32_t clktime;
	if (HOST_PORT_COM_OPEN)
 8008196:	4b2e      	ldr	r3, [pc, #184]	; (8008250 <_cspin+0xc0>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d054      	beq.n	8008248 <_cspin+0xb8>
	{
		clktime = HAL_GetTick();
 800819e:	f7f9 f8d3 	bl	8001348 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	4b2b      	ldr	r3, [pc, #172]	; (8008254 <_cspin+0xc4>)
 80081a6:	601a      	str	r2, [r3, #0]
		sprintf((char*) UserTxBufferFS, "\033[1A\r[%02lu:%02lu:%02lu.%03lu]\033[1B\r", (clktime/3600000)%100, (clktime/60000)%60, (clktime/1000)%60, clktime%1000);
 80081a8:	4b2a      	ldr	r3, [pc, #168]	; (8008254 <_cspin+0xc4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a2a      	ldr	r2, [pc, #168]	; (8008258 <_cspin+0xc8>)
 80081ae:	fba2 2303 	umull	r2, r3, r2, r3
 80081b2:	0d5b      	lsrs	r3, r3, #21
 80081b4:	4a29      	ldr	r2, [pc, #164]	; (800825c <_cspin+0xcc>)
 80081b6:	fba2 1203 	umull	r1, r2, r2, r3
 80081ba:	0950      	lsrs	r0, r2, #5
 80081bc:	2264      	movs	r2, #100	; 0x64
 80081be:	fb02 f200 	mul.w	r2, r2, r0
 80081c2:	1a98      	subs	r0, r3, r2
 80081c4:	4b23      	ldr	r3, [pc, #140]	; (8008254 <_cspin+0xc4>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a25      	ldr	r2, [pc, #148]	; (8008260 <_cspin+0xd0>)
 80081ca:	fba2 2303 	umull	r2, r3, r2, r3
 80081ce:	0b9a      	lsrs	r2, r3, #14
 80081d0:	4b24      	ldr	r3, [pc, #144]	; (8008264 <_cspin+0xd4>)
 80081d2:	fba3 1302 	umull	r1, r3, r3, r2
 80081d6:	0959      	lsrs	r1, r3, #5
 80081d8:	460b      	mov	r3, r1
 80081da:	011b      	lsls	r3, r3, #4
 80081dc:	1a5b      	subs	r3, r3, r1
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	1ad1      	subs	r1, r2, r3
 80081e2:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <_cspin+0xc4>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a20      	ldr	r2, [pc, #128]	; (8008268 <_cspin+0xd8>)
 80081e8:	fba2 2303 	umull	r2, r3, r2, r3
 80081ec:	099c      	lsrs	r4, r3, #6
 80081ee:	4b1d      	ldr	r3, [pc, #116]	; (8008264 <_cspin+0xd4>)
 80081f0:	fba3 2304 	umull	r2, r3, r3, r4
 80081f4:	095a      	lsrs	r2, r3, #5
 80081f6:	4613      	mov	r3, r2
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	1ae2      	subs	r2, r4, r3
 8008200:	4b14      	ldr	r3, [pc, #80]	; (8008254 <_cspin+0xc4>)
 8008202:	681c      	ldr	r4, [r3, #0]
 8008204:	4b18      	ldr	r3, [pc, #96]	; (8008268 <_cspin+0xd8>)
 8008206:	fba3 5304 	umull	r5, r3, r3, r4
 800820a:	099b      	lsrs	r3, r3, #6
 800820c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8008210:	fb05 f303 	mul.w	r3, r5, r3
 8008214:	1ae3      	subs	r3, r4, r3
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	9200      	str	r2, [sp, #0]
 800821a:	460b      	mov	r3, r1
 800821c:	4602      	mov	r2, r0
 800821e:	4913      	ldr	r1, [pc, #76]	; (800826c <_cspin+0xdc>)
 8008220:	4813      	ldr	r0, [pc, #76]	; (8008270 <_cspin+0xe0>)
 8008222:	f000 fdad 	bl	8008d80 <siprintf>
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY)
 8008226:	bf00      	nop
 8008228:	4b09      	ldr	r3, [pc, #36]	; (8008250 <_cspin+0xc0>)
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00b      	beq.n	8008248 <_cspin+0xb8>
 8008230:	480f      	ldr	r0, [pc, #60]	; (8008270 <_cspin+0xe0>)
 8008232:	f7f7 ffd7 	bl	80001e4 <strlen>
 8008236:	4603      	mov	r3, r0
 8008238:	b29b      	uxth	r3, r3
 800823a:	4619      	mov	r1, r3
 800823c:	480c      	ldr	r0, [pc, #48]	; (8008270 <_cspin+0xe0>)
 800823e:	f7ff fe69 	bl	8007f14 <CDC_Transmit_FS>
 8008242:	4603      	mov	r3, r0
 8008244:	2b01      	cmp	r3, #1
 8008246:	d0ef      	beq.n	8008228 <_cspin+0x98>
		{
		}
	}
}
 8008248:	bf00      	nop
 800824a:	46bd      	mov	sp, r7
 800824c:	bdb0      	pop	{r4, r5, r7, pc}
 800824e:	bf00      	nop
 8008250:	20000379 	.word	0x20000379
 8008254:	20000480 	.word	0x20000480
 8008258:	95217cb1 	.word	0x95217cb1
 800825c:	51eb851f 	.word	0x51eb851f
 8008260:	45e7b273 	.word	0x45e7b273
 8008264:	88888889 	.word	0x88888889
 8008268:	10624dd3 	.word	0x10624dd3
 800826c:	0800a02c 	.word	0x0800a02c
 8008270:	20010958 	.word	0x20010958

08008274 <CDC_Clear>:

void CDC_Clear(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
	if(CDC_RX_DATA_PRINT)
 8008278:	4b0f      	ldr	r3, [pc, #60]	; (80082b8 <CDC_Clear+0x44>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00c      	beq.n	800829a <CDC_Clear+0x26>
	{
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS((uint8_t *)"\033[2Jstm32@serial:: ", 19) == USBD_BUSY)
 8008280:	bf00      	nop
 8008282:	4b0e      	ldr	r3, [pc, #56]	; (80082bc <CDC_Clear+0x48>)
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d013      	beq.n	80082b2 <CDC_Clear+0x3e>
 800828a:	2113      	movs	r1, #19
 800828c:	480c      	ldr	r0, [pc, #48]	; (80082c0 <CDC_Clear+0x4c>)
 800828e:	f7ff fe41 	bl	8007f14 <CDC_Transmit_FS>
 8008292:	4603      	mov	r3, r0
 8008294:	2b01      	cmp	r3, #1
 8008296:	d0f4      	beq.n	8008282 <CDC_Clear+0xe>
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS((uint8_t *)"\033[2J", 4) == USBD_BUSY)
		{
		}
	}

}
 8008298:	e00b      	b.n	80082b2 <CDC_Clear+0x3e>
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS((uint8_t *)"\033[2J", 4) == USBD_BUSY)
 800829a:	bf00      	nop
 800829c:	4b07      	ldr	r3, [pc, #28]	; (80082bc <CDC_Clear+0x48>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d006      	beq.n	80082b2 <CDC_Clear+0x3e>
 80082a4:	2104      	movs	r1, #4
 80082a6:	4807      	ldr	r0, [pc, #28]	; (80082c4 <CDC_Clear+0x50>)
 80082a8:	f7ff fe34 	bl	8007f14 <CDC_Transmit_FS>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d0f4      	beq.n	800829c <CDC_Clear+0x28>
}
 80082b2:	bf00      	nop
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	200108d4 	.word	0x200108d4
 80082bc:	20000379 	.word	0x20000379
 80082c0:	0800a050 	.word	0x0800a050
 80082c4:	0800a064 	.word	0x0800a064

080082c8 <CDC_rxPrintf_ON>:
			_printf("\033[%dB", y);
		}
}

void CDC_rxPrintf_ON(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	af00      	add	r7, sp, #0
	if(!CDC_RX_DATA_PRINT)
 80082cc:	4b0b      	ldr	r3, [pc, #44]	; (80082fc <CDC_rxPrintf_ON+0x34>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	f083 0301 	eor.w	r3, r3, #1
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00e      	beq.n	80082f8 <CDC_rxPrintf_ON+0x30>
	{
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS((uint8_t *)"\r::STM@serial:: ", 16) == USBD_BUSY)
 80082da:	bf00      	nop
 80082dc:	4b08      	ldr	r3, [pc, #32]	; (8008300 <CDC_rxPrintf_ON+0x38>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d006      	beq.n	80082f2 <CDC_rxPrintf_ON+0x2a>
 80082e4:	2110      	movs	r1, #16
 80082e6:	4807      	ldr	r0, [pc, #28]	; (8008304 <CDC_rxPrintf_ON+0x3c>)
 80082e8:	f7ff fe14 	bl	8007f14 <CDC_Transmit_FS>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d0f4      	beq.n	80082dc <CDC_rxPrintf_ON+0x14>
		{
		}
		CDC_RX_DATA_PRINT = TRUE;
 80082f2:	4b02      	ldr	r3, [pc, #8]	; (80082fc <CDC_rxPrintf_ON+0x34>)
 80082f4:	2201      	movs	r2, #1
 80082f6:	701a      	strb	r2, [r3, #0]
	}
}
 80082f8:	bf00      	nop
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	200108d4 	.word	0x200108d4
 8008300:	20000379 	.word	0x20000379
 8008304:	0800a098 	.word	0x0800a098

08008308 <CDC_rxPrintf_OFF>:

void CDC_rxPrintf_OFF(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
	if(CDC_RX_DATA_PRINT)
 800830c:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <CDC_rxPrintf_OFF+0x30>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00e      	beq.n	8008332 <CDC_rxPrintf_OFF+0x2a>
	{
		while(HOST_PORT_COM_OPEN && CDC_Transmit_FS((uint8_t *)"\r   \r\n\033[1A\r", 11) == USBD_BUSY)
 8008314:	bf00      	nop
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <CDC_rxPrintf_OFF+0x34>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d006      	beq.n	800832c <CDC_rxPrintf_OFF+0x24>
 800831e:	210b      	movs	r1, #11
 8008320:	4807      	ldr	r0, [pc, #28]	; (8008340 <CDC_rxPrintf_OFF+0x38>)
 8008322:	f7ff fdf7 	bl	8007f14 <CDC_Transmit_FS>
 8008326:	4603      	mov	r3, r0
 8008328:	2b01      	cmp	r3, #1
 800832a:	d0f4      	beq.n	8008316 <CDC_rxPrintf_OFF+0xe>
		{
		}
		CDC_RX_DATA_PRINT = FALSE;
 800832c:	4b02      	ldr	r3, [pc, #8]	; (8008338 <CDC_rxPrintf_OFF+0x30>)
 800832e:	2200      	movs	r2, #0
 8008330:	701a      	strb	r2, [r3, #0]
	}
}
 8008332:	bf00      	nop
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	200108d4 	.word	0x200108d4
 800833c:	20000379 	.word	0x20000379
 8008340:	0800a0ac 	.word	0x0800a0ac

08008344 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	6039      	str	r1, [r7, #0]
 800834e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2212      	movs	r2, #18
 8008354:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008356:	4b03      	ldr	r3, [pc, #12]	; (8008364 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008358:	4618      	mov	r0, r3
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	20000154 	.word	0x20000154

08008368 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	6039      	str	r1, [r7, #0]
 8008372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	2204      	movs	r2, #4
 8008378:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800837a:	4b03      	ldr	r3, [pc, #12]	; (8008388 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800837c:	4618      	mov	r0, r3
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	20000168 	.word	0x20000168

0800838c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	6039      	str	r1, [r7, #0]
 8008396:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d105      	bne.n	80083aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4907      	ldr	r1, [pc, #28]	; (80083c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80083a2:	4808      	ldr	r0, [pc, #32]	; (80083c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80083a4:	f7ff fad7 	bl	8007956 <USBD_GetString>
 80083a8:	e004      	b.n	80083b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	4904      	ldr	r1, [pc, #16]	; (80083c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80083ae:	4805      	ldr	r0, [pc, #20]	; (80083c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80083b0:	f7ff fad1 	bl	8007956 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083b4:	4b02      	ldr	r3, [pc, #8]	; (80083c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	200109d8 	.word	0x200109d8
 80083c4:	0800a0b8 	.word	0x0800a0b8

080083c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	6039      	str	r1, [r7, #0]
 80083d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	4904      	ldr	r1, [pc, #16]	; (80083e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083d8:	4804      	ldr	r0, [pc, #16]	; (80083ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083da:	f7ff fabc 	bl	8007956 <USBD_GetString>
  return USBD_StrDesc;
 80083de:	4b02      	ldr	r3, [pc, #8]	; (80083e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	200109d8 	.word	0x200109d8
 80083ec:	0800a0d0 	.word	0x0800a0d0

080083f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	6039      	str	r1, [r7, #0]
 80083fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	221a      	movs	r2, #26
 8008400:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008402:	f000 f843 	bl	800848c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008406:	4b02      	ldr	r3, [pc, #8]	; (8008410 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008408:	4618      	mov	r0, r3
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	2000016c 	.word	0x2000016c

08008414 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	6039      	str	r1, [r7, #0]
 800841e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d105      	bne.n	8008432 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	4907      	ldr	r1, [pc, #28]	; (8008448 <USBD_FS_ConfigStrDescriptor+0x34>)
 800842a:	4808      	ldr	r0, [pc, #32]	; (800844c <USBD_FS_ConfigStrDescriptor+0x38>)
 800842c:	f7ff fa93 	bl	8007956 <USBD_GetString>
 8008430:	e004      	b.n	800843c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	4904      	ldr	r1, [pc, #16]	; (8008448 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008436:	4805      	ldr	r0, [pc, #20]	; (800844c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008438:	f7ff fa8d 	bl	8007956 <USBD_GetString>
  }
  return USBD_StrDesc;
 800843c:	4b02      	ldr	r3, [pc, #8]	; (8008448 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	200109d8 	.word	0x200109d8
 800844c:	0800a0e4 	.word	0x0800a0e4

08008450 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	4603      	mov	r3, r0
 8008458:	6039      	str	r1, [r7, #0]
 800845a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800845c:	79fb      	ldrb	r3, [r7, #7]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d105      	bne.n	800846e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	4907      	ldr	r1, [pc, #28]	; (8008484 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008466:	4808      	ldr	r0, [pc, #32]	; (8008488 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008468:	f7ff fa75 	bl	8007956 <USBD_GetString>
 800846c:	e004      	b.n	8008478 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	4904      	ldr	r1, [pc, #16]	; (8008484 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008472:	4805      	ldr	r0, [pc, #20]	; (8008488 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008474:	f7ff fa6f 	bl	8007956 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008478:	4b02      	ldr	r3, [pc, #8]	; (8008484 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800847a:	4618      	mov	r0, r3
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	200109d8 	.word	0x200109d8
 8008488:	0800a0f0 	.word	0x0800a0f0

0800848c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008492:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <Get_SerialNum+0x44>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008498:	4b0e      	ldr	r3, [pc, #56]	; (80084d4 <Get_SerialNum+0x48>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800849e:	4b0e      	ldr	r3, [pc, #56]	; (80084d8 <Get_SerialNum+0x4c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4413      	add	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d009      	beq.n	80084c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084b2:	2208      	movs	r2, #8
 80084b4:	4909      	ldr	r1, [pc, #36]	; (80084dc <Get_SerialNum+0x50>)
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f000 f814 	bl	80084e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084bc:	2204      	movs	r2, #4
 80084be:	4908      	ldr	r1, [pc, #32]	; (80084e0 <Get_SerialNum+0x54>)
 80084c0:	68b8      	ldr	r0, [r7, #8]
 80084c2:	f000 f80f 	bl	80084e4 <IntToUnicode>
  }
}
 80084c6:	bf00      	nop
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	1fff7a10 	.word	0x1fff7a10
 80084d4:	1fff7a14 	.word	0x1fff7a14
 80084d8:	1fff7a18 	.word	0x1fff7a18
 80084dc:	2000016e 	.word	0x2000016e
 80084e0:	2000017e 	.word	0x2000017e

080084e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084f6:	2300      	movs	r3, #0
 80084f8:	75fb      	strb	r3, [r7, #23]
 80084fa:	e027      	b.n	800854c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	0f1b      	lsrs	r3, r3, #28
 8008500:	2b09      	cmp	r3, #9
 8008502:	d80b      	bhi.n	800851c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	0f1b      	lsrs	r3, r3, #28
 8008508:	b2da      	uxtb	r2, r3
 800850a:	7dfb      	ldrb	r3, [r7, #23]
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	4619      	mov	r1, r3
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	440b      	add	r3, r1
 8008514:	3230      	adds	r2, #48	; 0x30
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	701a      	strb	r2, [r3, #0]
 800851a:	e00a      	b.n	8008532 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	0f1b      	lsrs	r3, r3, #28
 8008520:	b2da      	uxtb	r2, r3
 8008522:	7dfb      	ldrb	r3, [r7, #23]
 8008524:	005b      	lsls	r3, r3, #1
 8008526:	4619      	mov	r1, r3
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	440b      	add	r3, r1
 800852c:	3237      	adds	r2, #55	; 0x37
 800852e:	b2d2      	uxtb	r2, r2
 8008530:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	011b      	lsls	r3, r3, #4
 8008536:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	005b      	lsls	r3, r3, #1
 800853c:	3301      	adds	r3, #1
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	4413      	add	r3, r2
 8008542:	2200      	movs	r2, #0
 8008544:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008546:	7dfb      	ldrb	r3, [r7, #23]
 8008548:	3301      	adds	r3, #1
 800854a:	75fb      	strb	r3, [r7, #23]
 800854c:	7dfa      	ldrb	r2, [r7, #23]
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	429a      	cmp	r2, r3
 8008552:	d3d3      	bcc.n	80084fc <IntToUnicode+0x18>
  }
}
 8008554:	bf00      	nop
 8008556:	371c      	adds	r7, #28
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b08a      	sub	sp, #40	; 0x28
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008568:	f107 0314 	add.w	r3, r7, #20
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	605a      	str	r2, [r3, #4]
 8008572:	609a      	str	r2, [r3, #8]
 8008574:	60da      	str	r2, [r3, #12]
 8008576:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008580:	d147      	bne.n	8008612 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008582:	2300      	movs	r3, #0
 8008584:	613b      	str	r3, [r7, #16]
 8008586:	4b25      	ldr	r3, [pc, #148]	; (800861c <HAL_PCD_MspInit+0xbc>)
 8008588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858a:	4a24      	ldr	r2, [pc, #144]	; (800861c <HAL_PCD_MspInit+0xbc>)
 800858c:	f043 0301 	orr.w	r3, r3, #1
 8008590:	6313      	str	r3, [r2, #48]	; 0x30
 8008592:	4b22      	ldr	r3, [pc, #136]	; (800861c <HAL_PCD_MspInit+0xbc>)
 8008594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	613b      	str	r3, [r7, #16]
 800859c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800859e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085a4:	2300      	movs	r3, #0
 80085a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a8:	2300      	movs	r3, #0
 80085aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80085ac:	f107 0314 	add.w	r3, r7, #20
 80085b0:	4619      	mov	r1, r3
 80085b2:	481b      	ldr	r0, [pc, #108]	; (8008620 <HAL_PCD_MspInit+0xc0>)
 80085b4:	f7f9 fb92 	bl	8001cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80085b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80085bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085be:	2302      	movs	r3, #2
 80085c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c2:	2300      	movs	r3, #0
 80085c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085c6:	2300      	movs	r3, #0
 80085c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085ca:	230a      	movs	r3, #10
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085ce:	f107 0314 	add.w	r3, r7, #20
 80085d2:	4619      	mov	r1, r3
 80085d4:	4812      	ldr	r0, [pc, #72]	; (8008620 <HAL_PCD_MspInit+0xc0>)
 80085d6:	f7f9 fb81 	bl	8001cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80085da:	4b10      	ldr	r3, [pc, #64]	; (800861c <HAL_PCD_MspInit+0xbc>)
 80085dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085de:	4a0f      	ldr	r2, [pc, #60]	; (800861c <HAL_PCD_MspInit+0xbc>)
 80085e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e4:	6353      	str	r3, [r2, #52]	; 0x34
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	4b0c      	ldr	r3, [pc, #48]	; (800861c <HAL_PCD_MspInit+0xbc>)
 80085ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ee:	4a0b      	ldr	r2, [pc, #44]	; (800861c <HAL_PCD_MspInit+0xbc>)
 80085f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085f4:	6453      	str	r3, [r2, #68]	; 0x44
 80085f6:	4b09      	ldr	r3, [pc, #36]	; (800861c <HAL_PCD_MspInit+0xbc>)
 80085f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008602:	2200      	movs	r2, #0
 8008604:	2100      	movs	r1, #0
 8008606:	2043      	movs	r0, #67	; 0x43
 8008608:	f7f8 ffa7 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800860c:	2043      	movs	r0, #67	; 0x43
 800860e:	f7f8 ffc0 	bl	8001592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008612:	bf00      	nop
 8008614:	3728      	adds	r7, #40	; 0x28
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	40023800 	.word	0x40023800
 8008620:	40020000 	.word	0x40020000

08008624 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008638:	4619      	mov	r1, r3
 800863a:	4610      	mov	r0, r2
 800863c:	f7fe fa08 	bl	8006a50 <USBD_LL_SetupStage>
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	6879      	ldr	r1, [r7, #4]
 800865e:	4613      	mov	r3, r2
 8008660:	00db      	lsls	r3, r3, #3
 8008662:	1a9b      	subs	r3, r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	440b      	add	r3, r1
 8008668:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	78fb      	ldrb	r3, [r7, #3]
 8008670:	4619      	mov	r1, r3
 8008672:	f7fe fa40 	bl	8006af6 <USBD_LL_DataOutStage>
}
 8008676:	bf00      	nop
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b082      	sub	sp, #8
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	460b      	mov	r3, r1
 8008688:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008690:	78fa      	ldrb	r2, [r7, #3]
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	4613      	mov	r3, r2
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	1a9b      	subs	r3, r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	3348      	adds	r3, #72	; 0x48
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	78fb      	ldrb	r3, [r7, #3]
 80086a4:	4619      	mov	r1, r3
 80086a6:	f7fe fa89 	bl	8006bbc <USBD_LL_DataInStage>
}
 80086aa:	bf00      	nop
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b082      	sub	sp, #8
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fe fb8d 	bl	8006de0 <USBD_LL_SOF>
}
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086d6:	2301      	movs	r3, #1
 80086d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d102      	bne.n	80086e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73fb      	strb	r3, [r7, #15]
 80086e6:	e008      	b.n	80086fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d102      	bne.n	80086f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80086f0:	2301      	movs	r3, #1
 80086f2:	73fb      	strb	r3, [r7, #15]
 80086f4:	e001      	b.n	80086fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80086f6:	f7f8 fbbf 	bl	8000e78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008700:	7bfa      	ldrb	r2, [r7, #15]
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f7fe fb30 	bl	8006d6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe fae9 	bl	8006ce8 <USBD_LL_Reset>
}
 8008716:	bf00      	nop
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800872e:	4618      	mov	r0, r3
 8008730:	f7fe fb2b 	bl	8006d8a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	6812      	ldr	r2, [r2, #0]
 8008742:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008746:	f043 0301 	orr.w	r3, r3, #1
 800874a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a1b      	ldr	r3, [r3, #32]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d005      	beq.n	8008760 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008754:	4b04      	ldr	r3, [pc, #16]	; (8008768 <HAL_PCD_SuspendCallback+0x48>)
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	4a03      	ldr	r2, [pc, #12]	; (8008768 <HAL_PCD_SuspendCallback+0x48>)
 800875a:	f043 0306 	orr.w	r3, r3, #6
 800875e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	e000ed00 	.word	0xe000ed00

0800876c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800877a:	4618      	mov	r0, r3
 800877c:	f7fe fb1a 	bl	8006db4 <USBD_LL_Resume>
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800879a:	78fa      	ldrb	r2, [r7, #3]
 800879c:	4611      	mov	r1, r2
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fb45 	bl	8006e2e <USBD_LL_IsoOUTIncomplete>
}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087be:	78fa      	ldrb	r2, [r7, #3]
 80087c0:	4611      	mov	r1, r2
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fe fb26 	bl	8006e14 <USBD_LL_IsoINIncomplete>
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe fb32 	bl	8006e48 <USBD_LL_DevConnected>
}
 80087e4:	bf00      	nop
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe fb2f 	bl	8006e5e <USBD_LL_DevDisconnected>
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d13c      	bne.n	8008892 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008818:	4a20      	ldr	r2, [pc, #128]	; (800889c <USBD_LL_Init+0x94>)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a1e      	ldr	r2, [pc, #120]	; (800889c <USBD_LL_Init+0x94>)
 8008824:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008828:	4b1c      	ldr	r3, [pc, #112]	; (800889c <USBD_LL_Init+0x94>)
 800882a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800882e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008830:	4b1a      	ldr	r3, [pc, #104]	; (800889c <USBD_LL_Init+0x94>)
 8008832:	2204      	movs	r2, #4
 8008834:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008836:	4b19      	ldr	r3, [pc, #100]	; (800889c <USBD_LL_Init+0x94>)
 8008838:	2202      	movs	r2, #2
 800883a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800883c:	4b17      	ldr	r3, [pc, #92]	; (800889c <USBD_LL_Init+0x94>)
 800883e:	2200      	movs	r2, #0
 8008840:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008842:	4b16      	ldr	r3, [pc, #88]	; (800889c <USBD_LL_Init+0x94>)
 8008844:	2202      	movs	r2, #2
 8008846:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008848:	4b14      	ldr	r3, [pc, #80]	; (800889c <USBD_LL_Init+0x94>)
 800884a:	2200      	movs	r2, #0
 800884c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800884e:	4b13      	ldr	r3, [pc, #76]	; (800889c <USBD_LL_Init+0x94>)
 8008850:	2200      	movs	r2, #0
 8008852:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008854:	4b11      	ldr	r3, [pc, #68]	; (800889c <USBD_LL_Init+0x94>)
 8008856:	2200      	movs	r2, #0
 8008858:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800885a:	4b10      	ldr	r3, [pc, #64]	; (800889c <USBD_LL_Init+0x94>)
 800885c:	2200      	movs	r2, #0
 800885e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008860:	4b0e      	ldr	r3, [pc, #56]	; (800889c <USBD_LL_Init+0x94>)
 8008862:	2200      	movs	r2, #0
 8008864:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008866:	480d      	ldr	r0, [pc, #52]	; (800889c <USBD_LL_Init+0x94>)
 8008868:	f7fa fb28 	bl	8002ebc <HAL_PCD_Init>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008872:	f7f8 fb01 	bl	8000e78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008876:	2180      	movs	r1, #128	; 0x80
 8008878:	4808      	ldr	r0, [pc, #32]	; (800889c <USBD_LL_Init+0x94>)
 800887a:	f7fb fc86 	bl	800418a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800887e:	2240      	movs	r2, #64	; 0x40
 8008880:	2100      	movs	r1, #0
 8008882:	4806      	ldr	r0, [pc, #24]	; (800889c <USBD_LL_Init+0x94>)
 8008884:	f7fb fc3a 	bl	80040fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008888:	2280      	movs	r2, #128	; 0x80
 800888a:	2101      	movs	r1, #1
 800888c:	4803      	ldr	r0, [pc, #12]	; (800889c <USBD_LL_Init+0x94>)
 800888e:	f7fb fc35 	bl	80040fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	20010bd8 	.word	0x20010bd8

080088a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fa fc1d 	bl	80030f6 <HAL_PCD_Start>
 80088bc:	4603      	mov	r3, r0
 80088be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 f92a 	bl	8008b1c <USBD_Get_USB_Status>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	4608      	mov	r0, r1
 80088e0:	4611      	mov	r1, r2
 80088e2:	461a      	mov	r2, r3
 80088e4:	4603      	mov	r3, r0
 80088e6:	70fb      	strb	r3, [r7, #3]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70bb      	strb	r3, [r7, #2]
 80088ec:	4613      	mov	r3, r2
 80088ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80088fe:	78bb      	ldrb	r3, [r7, #2]
 8008900:	883a      	ldrh	r2, [r7, #0]
 8008902:	78f9      	ldrb	r1, [r7, #3]
 8008904:	f7fb f801 	bl	800390a <HAL_PCD_EP_Open>
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	4618      	mov	r0, r3
 8008910:	f000 f904 	bl	8008b1c <USBD_Get_USB_Status>
 8008914:	4603      	mov	r3, r0
 8008916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008918:	7bbb      	ldrb	r3, [r7, #14]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	460b      	mov	r3, r1
 800892c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800893c:	78fa      	ldrb	r2, [r7, #3]
 800893e:	4611      	mov	r1, r2
 8008940:	4618      	mov	r0, r3
 8008942:	f7fb f84a 	bl	80039da <HAL_PCD_EP_Close>
 8008946:	4603      	mov	r3, r0
 8008948:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	4618      	mov	r0, r3
 800894e:	f000 f8e5 	bl	8008b1c <USBD_Get_USB_Status>
 8008952:	4603      	mov	r3, r0
 8008954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008956:	7bbb      	ldrb	r3, [r7, #14]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800897a:	78fa      	ldrb	r2, [r7, #3]
 800897c:	4611      	mov	r1, r2
 800897e:	4618      	mov	r0, r3
 8008980:	f7fb f922 	bl	8003bc8 <HAL_PCD_EP_SetStall>
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008988:	7bfb      	ldrb	r3, [r7, #15]
 800898a:	4618      	mov	r0, r3
 800898c:	f000 f8c6 	bl	8008b1c <USBD_Get_USB_Status>
 8008990:	4603      	mov	r3, r0
 8008992:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008994:	7bbb      	ldrb	r3, [r7, #14]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	460b      	mov	r3, r1
 80089a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089b8:	78fa      	ldrb	r2, [r7, #3]
 80089ba:	4611      	mov	r1, r2
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fb f967 	bl	8003c90 <HAL_PCD_EP_ClrStall>
 80089c2:	4603      	mov	r3, r0
 80089c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 f8a7 	bl	8008b1c <USBD_Get_USB_Status>
 80089ce:	4603      	mov	r3, r0
 80089d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	da0b      	bge.n	8008a10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089f8:	78fb      	ldrb	r3, [r7, #3]
 80089fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089fe:	68f9      	ldr	r1, [r7, #12]
 8008a00:	4613      	mov	r3, r2
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	1a9b      	subs	r3, r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	333e      	adds	r3, #62	; 0x3e
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	e00b      	b.n	8008a28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a10:	78fb      	ldrb	r3, [r7, #3]
 8008a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a16:	68f9      	ldr	r1, [r7, #12]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	1a9b      	subs	r3, r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	440b      	add	r3, r1
 8008a22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	4611      	mov	r1, r2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fa ff34 	bl	80038c0 <HAL_PCD_SetAddress>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 f85c 	bl	8008b1c <USBD_Get_USB_Status>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b086      	sub	sp, #24
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	60f8      	str	r0, [r7, #12]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a90:	7af9      	ldrb	r1, [r7, #11]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	f7fb f84d 	bl	8003b34 <HAL_PCD_EP_Transmit>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a9e:	7dfb      	ldrb	r3, [r7, #23]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 f83b 	bl	8008b1c <USBD_Get_USB_Status>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008aaa:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	607a      	str	r2, [r7, #4]
 8008abe:	603b      	str	r3, [r7, #0]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ad2:	7af9      	ldrb	r1, [r7, #11]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	f7fa ffc9 	bl	8003a6e <HAL_PCD_EP_Receive>
 8008adc:	4603      	mov	r3, r0
 8008ade:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 f81a 	bl	8008b1c <USBD_Get_USB_Status>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008aec:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b082      	sub	sp, #8
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	460b      	mov	r3, r1
 8008b00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b08:	78fa      	ldrb	r2, [r7, #3]
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fa fff9 	bl	8003b04 <HAL_PCD_EP_GetRxCount>
 8008b12:	4603      	mov	r3, r0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d817      	bhi.n	8008b60 <USBD_Get_USB_Status+0x44>
 8008b30:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <USBD_Get_USB_Status+0x1c>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b49 	.word	0x08008b49
 8008b3c:	08008b4f 	.word	0x08008b4f
 8008b40:	08008b55 	.word	0x08008b55
 8008b44:	08008b5b 	.word	0x08008b5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4c:	e00b      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	73fb      	strb	r3, [r7, #15]
    break;
 8008b52:	e008      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b54:	2301      	movs	r3, #1
 8008b56:	73fb      	strb	r3, [r7, #15]
    break;
 8008b58:	e005      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5e:	e002      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b60:	2303      	movs	r3, #3
 8008b62:	73fb      	strb	r3, [r7, #15]
    break;
 8008b64:	bf00      	nop
  }
  return usb_status;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <__errno>:
 8008b74:	4b01      	ldr	r3, [pc, #4]	; (8008b7c <__errno+0x8>)
 8008b76:	6818      	ldr	r0, [r3, #0]
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	20000188 	.word	0x20000188

08008b80 <__libc_init_array>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	4e0d      	ldr	r6, [pc, #52]	; (8008bb8 <__libc_init_array+0x38>)
 8008b84:	4c0d      	ldr	r4, [pc, #52]	; (8008bbc <__libc_init_array+0x3c>)
 8008b86:	1ba4      	subs	r4, r4, r6
 8008b88:	10a4      	asrs	r4, r4, #2
 8008b8a:	2500      	movs	r5, #0
 8008b8c:	42a5      	cmp	r5, r4
 8008b8e:	d109      	bne.n	8008ba4 <__libc_init_array+0x24>
 8008b90:	4e0b      	ldr	r6, [pc, #44]	; (8008bc0 <__libc_init_array+0x40>)
 8008b92:	4c0c      	ldr	r4, [pc, #48]	; (8008bc4 <__libc_init_array+0x44>)
 8008b94:	f001 f940 	bl	8009e18 <_init>
 8008b98:	1ba4      	subs	r4, r4, r6
 8008b9a:	10a4      	asrs	r4, r4, #2
 8008b9c:	2500      	movs	r5, #0
 8008b9e:	42a5      	cmp	r5, r4
 8008ba0:	d105      	bne.n	8008bae <__libc_init_array+0x2e>
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ba8:	4798      	blx	r3
 8008baa:	3501      	adds	r5, #1
 8008bac:	e7ee      	b.n	8008b8c <__libc_init_array+0xc>
 8008bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bb2:	4798      	blx	r3
 8008bb4:	3501      	adds	r5, #1
 8008bb6:	e7f2      	b.n	8008b9e <__libc_init_array+0x1e>
 8008bb8:	0800a2e8 	.word	0x0800a2e8
 8008bbc:	0800a2e8 	.word	0x0800a2e8
 8008bc0:	0800a2e8 	.word	0x0800a2e8
 8008bc4:	0800a2ec 	.word	0x0800a2ec

08008bc8 <malloc>:
 8008bc8:	4b02      	ldr	r3, [pc, #8]	; (8008bd4 <malloc+0xc>)
 8008bca:	4601      	mov	r1, r0
 8008bcc:	6818      	ldr	r0, [r3, #0]
 8008bce:	f000 b86d 	b.w	8008cac <_malloc_r>
 8008bd2:	bf00      	nop
 8008bd4:	20000188 	.word	0x20000188

08008bd8 <free>:
 8008bd8:	4b02      	ldr	r3, [pc, #8]	; (8008be4 <free+0xc>)
 8008bda:	4601      	mov	r1, r0
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	f000 b817 	b.w	8008c10 <_free_r>
 8008be2:	bf00      	nop
 8008be4:	20000188 	.word	0x20000188

08008be8 <memcpy>:
 8008be8:	b510      	push	{r4, lr}
 8008bea:	1e43      	subs	r3, r0, #1
 8008bec:	440a      	add	r2, r1
 8008bee:	4291      	cmp	r1, r2
 8008bf0:	d100      	bne.n	8008bf4 <memcpy+0xc>
 8008bf2:	bd10      	pop	{r4, pc}
 8008bf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bfc:	e7f7      	b.n	8008bee <memcpy+0x6>

08008bfe <memset>:
 8008bfe:	4402      	add	r2, r0
 8008c00:	4603      	mov	r3, r0
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d100      	bne.n	8008c08 <memset+0xa>
 8008c06:	4770      	bx	lr
 8008c08:	f803 1b01 	strb.w	r1, [r3], #1
 8008c0c:	e7f9      	b.n	8008c02 <memset+0x4>
	...

08008c10 <_free_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4605      	mov	r5, r0
 8008c14:	2900      	cmp	r1, #0
 8008c16:	d045      	beq.n	8008ca4 <_free_r+0x94>
 8008c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c1c:	1f0c      	subs	r4, r1, #4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	bfb8      	it	lt
 8008c22:	18e4      	addlt	r4, r4, r3
 8008c24:	f000 f91a 	bl	8008e5c <__malloc_lock>
 8008c28:	4a1f      	ldr	r2, [pc, #124]	; (8008ca8 <_free_r+0x98>)
 8008c2a:	6813      	ldr	r3, [r2, #0]
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	b933      	cbnz	r3, 8008c3e <_free_r+0x2e>
 8008c30:	6063      	str	r3, [r4, #4]
 8008c32:	6014      	str	r4, [r2, #0]
 8008c34:	4628      	mov	r0, r5
 8008c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c3a:	f000 b910 	b.w	8008e5e <__malloc_unlock>
 8008c3e:	42a3      	cmp	r3, r4
 8008c40:	d90c      	bls.n	8008c5c <_free_r+0x4c>
 8008c42:	6821      	ldr	r1, [r4, #0]
 8008c44:	1862      	adds	r2, r4, r1
 8008c46:	4293      	cmp	r3, r2
 8008c48:	bf04      	itt	eq
 8008c4a:	681a      	ldreq	r2, [r3, #0]
 8008c4c:	685b      	ldreq	r3, [r3, #4]
 8008c4e:	6063      	str	r3, [r4, #4]
 8008c50:	bf04      	itt	eq
 8008c52:	1852      	addeq	r2, r2, r1
 8008c54:	6022      	streq	r2, [r4, #0]
 8008c56:	6004      	str	r4, [r0, #0]
 8008c58:	e7ec      	b.n	8008c34 <_free_r+0x24>
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	b10a      	cbz	r2, 8008c64 <_free_r+0x54>
 8008c60:	42a2      	cmp	r2, r4
 8008c62:	d9fa      	bls.n	8008c5a <_free_r+0x4a>
 8008c64:	6819      	ldr	r1, [r3, #0]
 8008c66:	1858      	adds	r0, r3, r1
 8008c68:	42a0      	cmp	r0, r4
 8008c6a:	d10b      	bne.n	8008c84 <_free_r+0x74>
 8008c6c:	6820      	ldr	r0, [r4, #0]
 8008c6e:	4401      	add	r1, r0
 8008c70:	1858      	adds	r0, r3, r1
 8008c72:	4282      	cmp	r2, r0
 8008c74:	6019      	str	r1, [r3, #0]
 8008c76:	d1dd      	bne.n	8008c34 <_free_r+0x24>
 8008c78:	6810      	ldr	r0, [r2, #0]
 8008c7a:	6852      	ldr	r2, [r2, #4]
 8008c7c:	605a      	str	r2, [r3, #4]
 8008c7e:	4401      	add	r1, r0
 8008c80:	6019      	str	r1, [r3, #0]
 8008c82:	e7d7      	b.n	8008c34 <_free_r+0x24>
 8008c84:	d902      	bls.n	8008c8c <_free_r+0x7c>
 8008c86:	230c      	movs	r3, #12
 8008c88:	602b      	str	r3, [r5, #0]
 8008c8a:	e7d3      	b.n	8008c34 <_free_r+0x24>
 8008c8c:	6820      	ldr	r0, [r4, #0]
 8008c8e:	1821      	adds	r1, r4, r0
 8008c90:	428a      	cmp	r2, r1
 8008c92:	bf04      	itt	eq
 8008c94:	6811      	ldreq	r1, [r2, #0]
 8008c96:	6852      	ldreq	r2, [r2, #4]
 8008c98:	6062      	str	r2, [r4, #4]
 8008c9a:	bf04      	itt	eq
 8008c9c:	1809      	addeq	r1, r1, r0
 8008c9e:	6021      	streq	r1, [r4, #0]
 8008ca0:	605c      	str	r4, [r3, #4]
 8008ca2:	e7c7      	b.n	8008c34 <_free_r+0x24>
 8008ca4:	bd38      	pop	{r3, r4, r5, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000484 	.word	0x20000484

08008cac <_malloc_r>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	1ccd      	adds	r5, r1, #3
 8008cb0:	f025 0503 	bic.w	r5, r5, #3
 8008cb4:	3508      	adds	r5, #8
 8008cb6:	2d0c      	cmp	r5, #12
 8008cb8:	bf38      	it	cc
 8008cba:	250c      	movcc	r5, #12
 8008cbc:	2d00      	cmp	r5, #0
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	db01      	blt.n	8008cc6 <_malloc_r+0x1a>
 8008cc2:	42a9      	cmp	r1, r5
 8008cc4:	d903      	bls.n	8008cce <_malloc_r+0x22>
 8008cc6:	230c      	movs	r3, #12
 8008cc8:	6033      	str	r3, [r6, #0]
 8008cca:	2000      	movs	r0, #0
 8008ccc:	bd70      	pop	{r4, r5, r6, pc}
 8008cce:	f000 f8c5 	bl	8008e5c <__malloc_lock>
 8008cd2:	4a21      	ldr	r2, [pc, #132]	; (8008d58 <_malloc_r+0xac>)
 8008cd4:	6814      	ldr	r4, [r2, #0]
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	b991      	cbnz	r1, 8008d00 <_malloc_r+0x54>
 8008cda:	4c20      	ldr	r4, [pc, #128]	; (8008d5c <_malloc_r+0xb0>)
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	b91b      	cbnz	r3, 8008ce8 <_malloc_r+0x3c>
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f000 f83d 	bl	8008d60 <_sbrk_r>
 8008ce6:	6020      	str	r0, [r4, #0]
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4630      	mov	r0, r6
 8008cec:	f000 f838 	bl	8008d60 <_sbrk_r>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	d124      	bne.n	8008d3e <_malloc_r+0x92>
 8008cf4:	230c      	movs	r3, #12
 8008cf6:	6033      	str	r3, [r6, #0]
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f000 f8b0 	bl	8008e5e <__malloc_unlock>
 8008cfe:	e7e4      	b.n	8008cca <_malloc_r+0x1e>
 8008d00:	680b      	ldr	r3, [r1, #0]
 8008d02:	1b5b      	subs	r3, r3, r5
 8008d04:	d418      	bmi.n	8008d38 <_malloc_r+0x8c>
 8008d06:	2b0b      	cmp	r3, #11
 8008d08:	d90f      	bls.n	8008d2a <_malloc_r+0x7e>
 8008d0a:	600b      	str	r3, [r1, #0]
 8008d0c:	50cd      	str	r5, [r1, r3]
 8008d0e:	18cc      	adds	r4, r1, r3
 8008d10:	4630      	mov	r0, r6
 8008d12:	f000 f8a4 	bl	8008e5e <__malloc_unlock>
 8008d16:	f104 000b 	add.w	r0, r4, #11
 8008d1a:	1d23      	adds	r3, r4, #4
 8008d1c:	f020 0007 	bic.w	r0, r0, #7
 8008d20:	1ac3      	subs	r3, r0, r3
 8008d22:	d0d3      	beq.n	8008ccc <_malloc_r+0x20>
 8008d24:	425a      	negs	r2, r3
 8008d26:	50e2      	str	r2, [r4, r3]
 8008d28:	e7d0      	b.n	8008ccc <_malloc_r+0x20>
 8008d2a:	428c      	cmp	r4, r1
 8008d2c:	684b      	ldr	r3, [r1, #4]
 8008d2e:	bf16      	itet	ne
 8008d30:	6063      	strne	r3, [r4, #4]
 8008d32:	6013      	streq	r3, [r2, #0]
 8008d34:	460c      	movne	r4, r1
 8008d36:	e7eb      	b.n	8008d10 <_malloc_r+0x64>
 8008d38:	460c      	mov	r4, r1
 8008d3a:	6849      	ldr	r1, [r1, #4]
 8008d3c:	e7cc      	b.n	8008cd8 <_malloc_r+0x2c>
 8008d3e:	1cc4      	adds	r4, r0, #3
 8008d40:	f024 0403 	bic.w	r4, r4, #3
 8008d44:	42a0      	cmp	r0, r4
 8008d46:	d005      	beq.n	8008d54 <_malloc_r+0xa8>
 8008d48:	1a21      	subs	r1, r4, r0
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f000 f808 	bl	8008d60 <_sbrk_r>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d0cf      	beq.n	8008cf4 <_malloc_r+0x48>
 8008d54:	6025      	str	r5, [r4, #0]
 8008d56:	e7db      	b.n	8008d10 <_malloc_r+0x64>
 8008d58:	20000484 	.word	0x20000484
 8008d5c:	20000488 	.word	0x20000488

08008d60 <_sbrk_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	4c06      	ldr	r4, [pc, #24]	; (8008d7c <_sbrk_r+0x1c>)
 8008d64:	2300      	movs	r3, #0
 8008d66:	4605      	mov	r5, r0
 8008d68:	4608      	mov	r0, r1
 8008d6a:	6023      	str	r3, [r4, #0]
 8008d6c:	f7f8 fa10 	bl	8001190 <_sbrk>
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	d102      	bne.n	8008d7a <_sbrk_r+0x1a>
 8008d74:	6823      	ldr	r3, [r4, #0]
 8008d76:	b103      	cbz	r3, 8008d7a <_sbrk_r+0x1a>
 8008d78:	602b      	str	r3, [r5, #0]
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
 8008d7c:	20010fe0 	.word	0x20010fe0

08008d80 <siprintf>:
 8008d80:	b40e      	push	{r1, r2, r3}
 8008d82:	b500      	push	{lr}
 8008d84:	b09c      	sub	sp, #112	; 0x70
 8008d86:	ab1d      	add	r3, sp, #116	; 0x74
 8008d88:	9002      	str	r0, [sp, #8]
 8008d8a:	9006      	str	r0, [sp, #24]
 8008d8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d90:	4809      	ldr	r0, [pc, #36]	; (8008db8 <siprintf+0x38>)
 8008d92:	9107      	str	r1, [sp, #28]
 8008d94:	9104      	str	r1, [sp, #16]
 8008d96:	4909      	ldr	r1, [pc, #36]	; (8008dbc <siprintf+0x3c>)
 8008d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d9c:	9105      	str	r1, [sp, #20]
 8008d9e:	6800      	ldr	r0, [r0, #0]
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	a902      	add	r1, sp, #8
 8008da4:	f000 f8b6 	bl	8008f14 <_svfiprintf_r>
 8008da8:	9b02      	ldr	r3, [sp, #8]
 8008daa:	2200      	movs	r2, #0
 8008dac:	701a      	strb	r2, [r3, #0]
 8008dae:	b01c      	add	sp, #112	; 0x70
 8008db0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008db4:	b003      	add	sp, #12
 8008db6:	4770      	bx	lr
 8008db8:	20000188 	.word	0x20000188
 8008dbc:	ffff0208 	.word	0xffff0208

08008dc0 <_vsiprintf_r>:
 8008dc0:	b500      	push	{lr}
 8008dc2:	b09b      	sub	sp, #108	; 0x6c
 8008dc4:	9100      	str	r1, [sp, #0]
 8008dc6:	9104      	str	r1, [sp, #16]
 8008dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008dcc:	9105      	str	r1, [sp, #20]
 8008dce:	9102      	str	r1, [sp, #8]
 8008dd0:	4905      	ldr	r1, [pc, #20]	; (8008de8 <_vsiprintf_r+0x28>)
 8008dd2:	9103      	str	r1, [sp, #12]
 8008dd4:	4669      	mov	r1, sp
 8008dd6:	f000 f89d 	bl	8008f14 <_svfiprintf_r>
 8008dda:	9b00      	ldr	r3, [sp, #0]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	701a      	strb	r2, [r3, #0]
 8008de0:	b01b      	add	sp, #108	; 0x6c
 8008de2:	f85d fb04 	ldr.w	pc, [sp], #4
 8008de6:	bf00      	nop
 8008de8:	ffff0208 	.word	0xffff0208

08008dec <vsiprintf>:
 8008dec:	4613      	mov	r3, r2
 8008dee:	460a      	mov	r2, r1
 8008df0:	4601      	mov	r1, r0
 8008df2:	4802      	ldr	r0, [pc, #8]	; (8008dfc <vsiprintf+0x10>)
 8008df4:	6800      	ldr	r0, [r0, #0]
 8008df6:	f7ff bfe3 	b.w	8008dc0 <_vsiprintf_r>
 8008dfa:	bf00      	nop
 8008dfc:	20000188 	.word	0x20000188

08008e00 <_vsiscanf_r>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	b09a      	sub	sp, #104	; 0x68
 8008e04:	4604      	mov	r4, r0
 8008e06:	461e      	mov	r6, r3
 8008e08:	4608      	mov	r0, r1
 8008e0a:	f44f 7301 	mov.w	r3, #516	; 0x204
 8008e0e:	4615      	mov	r5, r2
 8008e10:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008e14:	9100      	str	r1, [sp, #0]
 8008e16:	9104      	str	r1, [sp, #16]
 8008e18:	f7f7 f9e4 	bl	80001e4 <strlen>
 8008e1c:	4b09      	ldr	r3, [pc, #36]	; (8008e44 <_vsiscanf_r+0x44>)
 8008e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e20:	2100      	movs	r1, #0
 8008e22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e26:	9001      	str	r0, [sp, #4]
 8008e28:	9005      	str	r0, [sp, #20]
 8008e2a:	910d      	str	r1, [sp, #52]	; 0x34
 8008e2c:	9112      	str	r1, [sp, #72]	; 0x48
 8008e2e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008e32:	462a      	mov	r2, r5
 8008e34:	4633      	mov	r3, r6
 8008e36:	4669      	mov	r1, sp
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f000 f9bd 	bl	80091b8 <__ssvfiscanf_r>
 8008e3e:	b01a      	add	sp, #104	; 0x68
 8008e40:	bd70      	pop	{r4, r5, r6, pc}
 8008e42:	bf00      	nop
 8008e44:	08009a7d 	.word	0x08009a7d

08008e48 <vsiscanf>:
 8008e48:	4613      	mov	r3, r2
 8008e4a:	460a      	mov	r2, r1
 8008e4c:	4601      	mov	r1, r0
 8008e4e:	4802      	ldr	r0, [pc, #8]	; (8008e58 <vsiscanf+0x10>)
 8008e50:	6800      	ldr	r0, [r0, #0]
 8008e52:	f7ff bfd5 	b.w	8008e00 <_vsiscanf_r>
 8008e56:	bf00      	nop
 8008e58:	20000188 	.word	0x20000188

08008e5c <__malloc_lock>:
 8008e5c:	4770      	bx	lr

08008e5e <__malloc_unlock>:
 8008e5e:	4770      	bx	lr

08008e60 <__ssputs_r>:
 8008e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e64:	688e      	ldr	r6, [r1, #8]
 8008e66:	429e      	cmp	r6, r3
 8008e68:	4682      	mov	sl, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	4690      	mov	r8, r2
 8008e6e:	4699      	mov	r9, r3
 8008e70:	d837      	bhi.n	8008ee2 <__ssputs_r+0x82>
 8008e72:	898a      	ldrh	r2, [r1, #12]
 8008e74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e78:	d031      	beq.n	8008ede <__ssputs_r+0x7e>
 8008e7a:	6825      	ldr	r5, [r4, #0]
 8008e7c:	6909      	ldr	r1, [r1, #16]
 8008e7e:	1a6f      	subs	r7, r5, r1
 8008e80:	6965      	ldr	r5, [r4, #20]
 8008e82:	2302      	movs	r3, #2
 8008e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e88:	fb95 f5f3 	sdiv	r5, r5, r3
 8008e8c:	f109 0301 	add.w	r3, r9, #1
 8008e90:	443b      	add	r3, r7
 8008e92:	429d      	cmp	r5, r3
 8008e94:	bf38      	it	cc
 8008e96:	461d      	movcc	r5, r3
 8008e98:	0553      	lsls	r3, r2, #21
 8008e9a:	d530      	bpl.n	8008efe <__ssputs_r+0x9e>
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	f7ff ff05 	bl	8008cac <_malloc_r>
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	b950      	cbnz	r0, 8008ebc <__ssputs_r+0x5c>
 8008ea6:	230c      	movs	r3, #12
 8008ea8:	f8ca 3000 	str.w	r3, [sl]
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb2:	81a3      	strh	r3, [r4, #12]
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ebc:	463a      	mov	r2, r7
 8008ebe:	6921      	ldr	r1, [r4, #16]
 8008ec0:	f7ff fe92 	bl	8008be8 <memcpy>
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ece:	81a3      	strh	r3, [r4, #12]
 8008ed0:	6126      	str	r6, [r4, #16]
 8008ed2:	6165      	str	r5, [r4, #20]
 8008ed4:	443e      	add	r6, r7
 8008ed6:	1bed      	subs	r5, r5, r7
 8008ed8:	6026      	str	r6, [r4, #0]
 8008eda:	60a5      	str	r5, [r4, #8]
 8008edc:	464e      	mov	r6, r9
 8008ede:	454e      	cmp	r6, r9
 8008ee0:	d900      	bls.n	8008ee4 <__ssputs_r+0x84>
 8008ee2:	464e      	mov	r6, r9
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	4641      	mov	r1, r8
 8008ee8:	6820      	ldr	r0, [r4, #0]
 8008eea:	f000 ff41 	bl	8009d70 <memmove>
 8008eee:	68a3      	ldr	r3, [r4, #8]
 8008ef0:	1b9b      	subs	r3, r3, r6
 8008ef2:	60a3      	str	r3, [r4, #8]
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	441e      	add	r6, r3
 8008ef8:	6026      	str	r6, [r4, #0]
 8008efa:	2000      	movs	r0, #0
 8008efc:	e7dc      	b.n	8008eb8 <__ssputs_r+0x58>
 8008efe:	462a      	mov	r2, r5
 8008f00:	f000 ff4f 	bl	8009da2 <_realloc_r>
 8008f04:	4606      	mov	r6, r0
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d1e2      	bne.n	8008ed0 <__ssputs_r+0x70>
 8008f0a:	6921      	ldr	r1, [r4, #16]
 8008f0c:	4650      	mov	r0, sl
 8008f0e:	f7ff fe7f 	bl	8008c10 <_free_r>
 8008f12:	e7c8      	b.n	8008ea6 <__ssputs_r+0x46>

08008f14 <_svfiprintf_r>:
 8008f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	461d      	mov	r5, r3
 8008f1a:	898b      	ldrh	r3, [r1, #12]
 8008f1c:	061f      	lsls	r7, r3, #24
 8008f1e:	b09d      	sub	sp, #116	; 0x74
 8008f20:	4680      	mov	r8, r0
 8008f22:	460c      	mov	r4, r1
 8008f24:	4616      	mov	r6, r2
 8008f26:	d50f      	bpl.n	8008f48 <_svfiprintf_r+0x34>
 8008f28:	690b      	ldr	r3, [r1, #16]
 8008f2a:	b96b      	cbnz	r3, 8008f48 <_svfiprintf_r+0x34>
 8008f2c:	2140      	movs	r1, #64	; 0x40
 8008f2e:	f7ff febd 	bl	8008cac <_malloc_r>
 8008f32:	6020      	str	r0, [r4, #0]
 8008f34:	6120      	str	r0, [r4, #16]
 8008f36:	b928      	cbnz	r0, 8008f44 <_svfiprintf_r+0x30>
 8008f38:	230c      	movs	r3, #12
 8008f3a:	f8c8 3000 	str.w	r3, [r8]
 8008f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f42:	e0c8      	b.n	80090d6 <_svfiprintf_r+0x1c2>
 8008f44:	2340      	movs	r3, #64	; 0x40
 8008f46:	6163      	str	r3, [r4, #20]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f4c:	2320      	movs	r3, #32
 8008f4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f52:	2330      	movs	r3, #48	; 0x30
 8008f54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f58:	9503      	str	r5, [sp, #12]
 8008f5a:	f04f 0b01 	mov.w	fp, #1
 8008f5e:	4637      	mov	r7, r6
 8008f60:	463d      	mov	r5, r7
 8008f62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f66:	b10b      	cbz	r3, 8008f6c <_svfiprintf_r+0x58>
 8008f68:	2b25      	cmp	r3, #37	; 0x25
 8008f6a:	d13e      	bne.n	8008fea <_svfiprintf_r+0xd6>
 8008f6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008f70:	d00b      	beq.n	8008f8a <_svfiprintf_r+0x76>
 8008f72:	4653      	mov	r3, sl
 8008f74:	4632      	mov	r2, r6
 8008f76:	4621      	mov	r1, r4
 8008f78:	4640      	mov	r0, r8
 8008f7a:	f7ff ff71 	bl	8008e60 <__ssputs_r>
 8008f7e:	3001      	adds	r0, #1
 8008f80:	f000 80a4 	beq.w	80090cc <_svfiprintf_r+0x1b8>
 8008f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f86:	4453      	add	r3, sl
 8008f88:	9309      	str	r3, [sp, #36]	; 0x24
 8008f8a:	783b      	ldrb	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 809d 	beq.w	80090cc <_svfiprintf_r+0x1b8>
 8008f92:	2300      	movs	r3, #0
 8008f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f9c:	9304      	str	r3, [sp, #16]
 8008f9e:	9307      	str	r3, [sp, #28]
 8008fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8008fa6:	462f      	mov	r7, r5
 8008fa8:	2205      	movs	r2, #5
 8008faa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008fae:	4850      	ldr	r0, [pc, #320]	; (80090f0 <_svfiprintf_r+0x1dc>)
 8008fb0:	f7f7 f926 	bl	8000200 <memchr>
 8008fb4:	9b04      	ldr	r3, [sp, #16]
 8008fb6:	b9d0      	cbnz	r0, 8008fee <_svfiprintf_r+0xda>
 8008fb8:	06d9      	lsls	r1, r3, #27
 8008fba:	bf44      	itt	mi
 8008fbc:	2220      	movmi	r2, #32
 8008fbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fc2:	071a      	lsls	r2, r3, #28
 8008fc4:	bf44      	itt	mi
 8008fc6:	222b      	movmi	r2, #43	; 0x2b
 8008fc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fcc:	782a      	ldrb	r2, [r5, #0]
 8008fce:	2a2a      	cmp	r2, #42	; 0x2a
 8008fd0:	d015      	beq.n	8008ffe <_svfiprintf_r+0xea>
 8008fd2:	9a07      	ldr	r2, [sp, #28]
 8008fd4:	462f      	mov	r7, r5
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	250a      	movs	r5, #10
 8008fda:	4639      	mov	r1, r7
 8008fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fe0:	3b30      	subs	r3, #48	; 0x30
 8008fe2:	2b09      	cmp	r3, #9
 8008fe4:	d94d      	bls.n	8009082 <_svfiprintf_r+0x16e>
 8008fe6:	b1b8      	cbz	r0, 8009018 <_svfiprintf_r+0x104>
 8008fe8:	e00f      	b.n	800900a <_svfiprintf_r+0xf6>
 8008fea:	462f      	mov	r7, r5
 8008fec:	e7b8      	b.n	8008f60 <_svfiprintf_r+0x4c>
 8008fee:	4a40      	ldr	r2, [pc, #256]	; (80090f0 <_svfiprintf_r+0x1dc>)
 8008ff0:	1a80      	subs	r0, r0, r2
 8008ff2:	fa0b f000 	lsl.w	r0, fp, r0
 8008ff6:	4318      	orrs	r0, r3
 8008ff8:	9004      	str	r0, [sp, #16]
 8008ffa:	463d      	mov	r5, r7
 8008ffc:	e7d3      	b.n	8008fa6 <_svfiprintf_r+0x92>
 8008ffe:	9a03      	ldr	r2, [sp, #12]
 8009000:	1d11      	adds	r1, r2, #4
 8009002:	6812      	ldr	r2, [r2, #0]
 8009004:	9103      	str	r1, [sp, #12]
 8009006:	2a00      	cmp	r2, #0
 8009008:	db01      	blt.n	800900e <_svfiprintf_r+0xfa>
 800900a:	9207      	str	r2, [sp, #28]
 800900c:	e004      	b.n	8009018 <_svfiprintf_r+0x104>
 800900e:	4252      	negs	r2, r2
 8009010:	f043 0302 	orr.w	r3, r3, #2
 8009014:	9207      	str	r2, [sp, #28]
 8009016:	9304      	str	r3, [sp, #16]
 8009018:	783b      	ldrb	r3, [r7, #0]
 800901a:	2b2e      	cmp	r3, #46	; 0x2e
 800901c:	d10c      	bne.n	8009038 <_svfiprintf_r+0x124>
 800901e:	787b      	ldrb	r3, [r7, #1]
 8009020:	2b2a      	cmp	r3, #42	; 0x2a
 8009022:	d133      	bne.n	800908c <_svfiprintf_r+0x178>
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	1d1a      	adds	r2, r3, #4
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	9203      	str	r2, [sp, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	bfb8      	it	lt
 8009030:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009034:	3702      	adds	r7, #2
 8009036:	9305      	str	r3, [sp, #20]
 8009038:	4d2e      	ldr	r5, [pc, #184]	; (80090f4 <_svfiprintf_r+0x1e0>)
 800903a:	7839      	ldrb	r1, [r7, #0]
 800903c:	2203      	movs	r2, #3
 800903e:	4628      	mov	r0, r5
 8009040:	f7f7 f8de 	bl	8000200 <memchr>
 8009044:	b138      	cbz	r0, 8009056 <_svfiprintf_r+0x142>
 8009046:	2340      	movs	r3, #64	; 0x40
 8009048:	1b40      	subs	r0, r0, r5
 800904a:	fa03 f000 	lsl.w	r0, r3, r0
 800904e:	9b04      	ldr	r3, [sp, #16]
 8009050:	4303      	orrs	r3, r0
 8009052:	3701      	adds	r7, #1
 8009054:	9304      	str	r3, [sp, #16]
 8009056:	7839      	ldrb	r1, [r7, #0]
 8009058:	4827      	ldr	r0, [pc, #156]	; (80090f8 <_svfiprintf_r+0x1e4>)
 800905a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800905e:	2206      	movs	r2, #6
 8009060:	1c7e      	adds	r6, r7, #1
 8009062:	f7f7 f8cd 	bl	8000200 <memchr>
 8009066:	2800      	cmp	r0, #0
 8009068:	d038      	beq.n	80090dc <_svfiprintf_r+0x1c8>
 800906a:	4b24      	ldr	r3, [pc, #144]	; (80090fc <_svfiprintf_r+0x1e8>)
 800906c:	bb13      	cbnz	r3, 80090b4 <_svfiprintf_r+0x1a0>
 800906e:	9b03      	ldr	r3, [sp, #12]
 8009070:	3307      	adds	r3, #7
 8009072:	f023 0307 	bic.w	r3, r3, #7
 8009076:	3308      	adds	r3, #8
 8009078:	9303      	str	r3, [sp, #12]
 800907a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907c:	444b      	add	r3, r9
 800907e:	9309      	str	r3, [sp, #36]	; 0x24
 8009080:	e76d      	b.n	8008f5e <_svfiprintf_r+0x4a>
 8009082:	fb05 3202 	mla	r2, r5, r2, r3
 8009086:	2001      	movs	r0, #1
 8009088:	460f      	mov	r7, r1
 800908a:	e7a6      	b.n	8008fda <_svfiprintf_r+0xc6>
 800908c:	2300      	movs	r3, #0
 800908e:	3701      	adds	r7, #1
 8009090:	9305      	str	r3, [sp, #20]
 8009092:	4619      	mov	r1, r3
 8009094:	250a      	movs	r5, #10
 8009096:	4638      	mov	r0, r7
 8009098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800909c:	3a30      	subs	r2, #48	; 0x30
 800909e:	2a09      	cmp	r2, #9
 80090a0:	d903      	bls.n	80090aa <_svfiprintf_r+0x196>
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0c8      	beq.n	8009038 <_svfiprintf_r+0x124>
 80090a6:	9105      	str	r1, [sp, #20]
 80090a8:	e7c6      	b.n	8009038 <_svfiprintf_r+0x124>
 80090aa:	fb05 2101 	mla	r1, r5, r1, r2
 80090ae:	2301      	movs	r3, #1
 80090b0:	4607      	mov	r7, r0
 80090b2:	e7f0      	b.n	8009096 <_svfiprintf_r+0x182>
 80090b4:	ab03      	add	r3, sp, #12
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	4622      	mov	r2, r4
 80090ba:	4b11      	ldr	r3, [pc, #68]	; (8009100 <_svfiprintf_r+0x1ec>)
 80090bc:	a904      	add	r1, sp, #16
 80090be:	4640      	mov	r0, r8
 80090c0:	f3af 8000 	nop.w
 80090c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80090c8:	4681      	mov	r9, r0
 80090ca:	d1d6      	bne.n	800907a <_svfiprintf_r+0x166>
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	065b      	lsls	r3, r3, #25
 80090d0:	f53f af35 	bmi.w	8008f3e <_svfiprintf_r+0x2a>
 80090d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090d6:	b01d      	add	sp, #116	; 0x74
 80090d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090dc:	ab03      	add	r3, sp, #12
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	4622      	mov	r2, r4
 80090e2:	4b07      	ldr	r3, [pc, #28]	; (8009100 <_svfiprintf_r+0x1ec>)
 80090e4:	a904      	add	r1, sp, #16
 80090e6:	4640      	mov	r0, r8
 80090e8:	f000 fa2c 	bl	8009544 <_printf_i>
 80090ec:	e7ea      	b.n	80090c4 <_svfiprintf_r+0x1b0>
 80090ee:	bf00      	nop
 80090f0:	0800a124 	.word	0x0800a124
 80090f4:	0800a12a 	.word	0x0800a12a
 80090f8:	0800a12e 	.word	0x0800a12e
 80090fc:	00000000 	.word	0x00000000
 8009100:	08008e61 	.word	0x08008e61

08009104 <_sungetc_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	1c4b      	adds	r3, r1, #1
 8009108:	4614      	mov	r4, r2
 800910a:	d103      	bne.n	8009114 <_sungetc_r+0x10>
 800910c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009110:	4628      	mov	r0, r5
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	8993      	ldrh	r3, [r2, #12]
 8009116:	f023 0320 	bic.w	r3, r3, #32
 800911a:	8193      	strh	r3, [r2, #12]
 800911c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800911e:	6852      	ldr	r2, [r2, #4]
 8009120:	b2cd      	uxtb	r5, r1
 8009122:	b18b      	cbz	r3, 8009148 <_sungetc_r+0x44>
 8009124:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009126:	4293      	cmp	r3, r2
 8009128:	dd08      	ble.n	800913c <_sungetc_r+0x38>
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	1e5a      	subs	r2, r3, #1
 800912e:	6022      	str	r2, [r4, #0]
 8009130:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009134:	6863      	ldr	r3, [r4, #4]
 8009136:	3301      	adds	r3, #1
 8009138:	6063      	str	r3, [r4, #4]
 800913a:	e7e9      	b.n	8009110 <_sungetc_r+0xc>
 800913c:	4621      	mov	r1, r4
 800913e:	f000 fdb9 	bl	8009cb4 <__submore>
 8009142:	2800      	cmp	r0, #0
 8009144:	d0f1      	beq.n	800912a <_sungetc_r+0x26>
 8009146:	e7e1      	b.n	800910c <_sungetc_r+0x8>
 8009148:	6921      	ldr	r1, [r4, #16]
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	b151      	cbz	r1, 8009164 <_sungetc_r+0x60>
 800914e:	4299      	cmp	r1, r3
 8009150:	d208      	bcs.n	8009164 <_sungetc_r+0x60>
 8009152:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009156:	42a9      	cmp	r1, r5
 8009158:	d104      	bne.n	8009164 <_sungetc_r+0x60>
 800915a:	3b01      	subs	r3, #1
 800915c:	3201      	adds	r2, #1
 800915e:	6023      	str	r3, [r4, #0]
 8009160:	6062      	str	r2, [r4, #4]
 8009162:	e7d5      	b.n	8009110 <_sungetc_r+0xc>
 8009164:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800916c:	6363      	str	r3, [r4, #52]	; 0x34
 800916e:	2303      	movs	r3, #3
 8009170:	63a3      	str	r3, [r4, #56]	; 0x38
 8009172:	4623      	mov	r3, r4
 8009174:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	2301      	movs	r3, #1
 800917c:	e7dc      	b.n	8009138 <_sungetc_r+0x34>

0800917e <__ssrefill_r>:
 800917e:	b510      	push	{r4, lr}
 8009180:	460c      	mov	r4, r1
 8009182:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009184:	b169      	cbz	r1, 80091a2 <__ssrefill_r+0x24>
 8009186:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800918a:	4299      	cmp	r1, r3
 800918c:	d001      	beq.n	8009192 <__ssrefill_r+0x14>
 800918e:	f7ff fd3f 	bl	8008c10 <_free_r>
 8009192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009194:	6063      	str	r3, [r4, #4]
 8009196:	2000      	movs	r0, #0
 8009198:	6360      	str	r0, [r4, #52]	; 0x34
 800919a:	b113      	cbz	r3, 80091a2 <__ssrefill_r+0x24>
 800919c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800919e:	6023      	str	r3, [r4, #0]
 80091a0:	bd10      	pop	{r4, pc}
 80091a2:	6923      	ldr	r3, [r4, #16]
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	2300      	movs	r3, #0
 80091a8:	6063      	str	r3, [r4, #4]
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	f043 0320 	orr.w	r3, r3, #32
 80091b0:	81a3      	strh	r3, [r4, #12]
 80091b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091b6:	e7f3      	b.n	80091a0 <__ssrefill_r+0x22>

080091b8 <__ssvfiscanf_r>:
 80091b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80091c0:	460c      	mov	r4, r1
 80091c2:	2100      	movs	r1, #0
 80091c4:	9144      	str	r1, [sp, #272]	; 0x110
 80091c6:	9145      	str	r1, [sp, #276]	; 0x114
 80091c8:	499f      	ldr	r1, [pc, #636]	; (8009448 <__ssvfiscanf_r+0x290>)
 80091ca:	91a0      	str	r1, [sp, #640]	; 0x280
 80091cc:	f10d 0804 	add.w	r8, sp, #4
 80091d0:	499e      	ldr	r1, [pc, #632]	; (800944c <__ssvfiscanf_r+0x294>)
 80091d2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8009450 <__ssvfiscanf_r+0x298>
 80091d6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80091da:	4606      	mov	r6, r0
 80091dc:	4692      	mov	sl, r2
 80091de:	91a1      	str	r1, [sp, #644]	; 0x284
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	270a      	movs	r7, #10
 80091e4:	f89a 3000 	ldrb.w	r3, [sl]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 812a 	beq.w	8009442 <__ssvfiscanf_r+0x28a>
 80091ee:	4655      	mov	r5, sl
 80091f0:	f000 fd9e 	bl	8009d30 <__locale_ctype_ptr>
 80091f4:	f815 bb01 	ldrb.w	fp, [r5], #1
 80091f8:	4458      	add	r0, fp
 80091fa:	7843      	ldrb	r3, [r0, #1]
 80091fc:	f013 0308 	ands.w	r3, r3, #8
 8009200:	d01c      	beq.n	800923c <__ssvfiscanf_r+0x84>
 8009202:	6863      	ldr	r3, [r4, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	dd12      	ble.n	800922e <__ssvfiscanf_r+0x76>
 8009208:	f000 fd92 	bl	8009d30 <__locale_ctype_ptr>
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	781a      	ldrb	r2, [r3, #0]
 8009210:	4410      	add	r0, r2
 8009212:	7842      	ldrb	r2, [r0, #1]
 8009214:	0712      	lsls	r2, r2, #28
 8009216:	d401      	bmi.n	800921c <__ssvfiscanf_r+0x64>
 8009218:	46aa      	mov	sl, r5
 800921a:	e7e3      	b.n	80091e4 <__ssvfiscanf_r+0x2c>
 800921c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800921e:	3201      	adds	r2, #1
 8009220:	9245      	str	r2, [sp, #276]	; 0x114
 8009222:	6862      	ldr	r2, [r4, #4]
 8009224:	3301      	adds	r3, #1
 8009226:	3a01      	subs	r2, #1
 8009228:	6062      	str	r2, [r4, #4]
 800922a:	6023      	str	r3, [r4, #0]
 800922c:	e7e9      	b.n	8009202 <__ssvfiscanf_r+0x4a>
 800922e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009230:	4621      	mov	r1, r4
 8009232:	4630      	mov	r0, r6
 8009234:	4798      	blx	r3
 8009236:	2800      	cmp	r0, #0
 8009238:	d0e6      	beq.n	8009208 <__ssvfiscanf_r+0x50>
 800923a:	e7ed      	b.n	8009218 <__ssvfiscanf_r+0x60>
 800923c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8009240:	f040 8082 	bne.w	8009348 <__ssvfiscanf_r+0x190>
 8009244:	9343      	str	r3, [sp, #268]	; 0x10c
 8009246:	9341      	str	r3, [sp, #260]	; 0x104
 8009248:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800924c:	2b2a      	cmp	r3, #42	; 0x2a
 800924e:	d103      	bne.n	8009258 <__ssvfiscanf_r+0xa0>
 8009250:	2310      	movs	r3, #16
 8009252:	9341      	str	r3, [sp, #260]	; 0x104
 8009254:	f10a 0502 	add.w	r5, sl, #2
 8009258:	46aa      	mov	sl, r5
 800925a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800925e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009262:	2a09      	cmp	r2, #9
 8009264:	d922      	bls.n	80092ac <__ssvfiscanf_r+0xf4>
 8009266:	2203      	movs	r2, #3
 8009268:	4879      	ldr	r0, [pc, #484]	; (8009450 <__ssvfiscanf_r+0x298>)
 800926a:	f7f6 ffc9 	bl	8000200 <memchr>
 800926e:	b138      	cbz	r0, 8009280 <__ssvfiscanf_r+0xc8>
 8009270:	eba0 0309 	sub.w	r3, r0, r9
 8009274:	2001      	movs	r0, #1
 8009276:	4098      	lsls	r0, r3
 8009278:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800927a:	4318      	orrs	r0, r3
 800927c:	9041      	str	r0, [sp, #260]	; 0x104
 800927e:	46aa      	mov	sl, r5
 8009280:	f89a 3000 	ldrb.w	r3, [sl]
 8009284:	2b67      	cmp	r3, #103	; 0x67
 8009286:	f10a 0501 	add.w	r5, sl, #1
 800928a:	d82b      	bhi.n	80092e4 <__ssvfiscanf_r+0x12c>
 800928c:	2b65      	cmp	r3, #101	; 0x65
 800928e:	f080 809f 	bcs.w	80093d0 <__ssvfiscanf_r+0x218>
 8009292:	2b47      	cmp	r3, #71	; 0x47
 8009294:	d810      	bhi.n	80092b8 <__ssvfiscanf_r+0x100>
 8009296:	2b45      	cmp	r3, #69	; 0x45
 8009298:	f080 809a 	bcs.w	80093d0 <__ssvfiscanf_r+0x218>
 800929c:	2b00      	cmp	r3, #0
 800929e:	d06c      	beq.n	800937a <__ssvfiscanf_r+0x1c2>
 80092a0:	2b25      	cmp	r3, #37	; 0x25
 80092a2:	d051      	beq.n	8009348 <__ssvfiscanf_r+0x190>
 80092a4:	2303      	movs	r3, #3
 80092a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80092a8:	9742      	str	r7, [sp, #264]	; 0x108
 80092aa:	e027      	b.n	80092fc <__ssvfiscanf_r+0x144>
 80092ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80092ae:	fb07 1303 	mla	r3, r7, r3, r1
 80092b2:	3b30      	subs	r3, #48	; 0x30
 80092b4:	9343      	str	r3, [sp, #268]	; 0x10c
 80092b6:	e7cf      	b.n	8009258 <__ssvfiscanf_r+0xa0>
 80092b8:	2b5b      	cmp	r3, #91	; 0x5b
 80092ba:	d06a      	beq.n	8009392 <__ssvfiscanf_r+0x1da>
 80092bc:	d80c      	bhi.n	80092d8 <__ssvfiscanf_r+0x120>
 80092be:	2b58      	cmp	r3, #88	; 0x58
 80092c0:	d1f0      	bne.n	80092a4 <__ssvfiscanf_r+0xec>
 80092c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80092c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092c8:	9241      	str	r2, [sp, #260]	; 0x104
 80092ca:	2210      	movs	r2, #16
 80092cc:	9242      	str	r2, [sp, #264]	; 0x108
 80092ce:	2b6e      	cmp	r3, #110	; 0x6e
 80092d0:	bf8c      	ite	hi
 80092d2:	2304      	movhi	r3, #4
 80092d4:	2303      	movls	r3, #3
 80092d6:	e010      	b.n	80092fa <__ssvfiscanf_r+0x142>
 80092d8:	2b63      	cmp	r3, #99	; 0x63
 80092da:	d065      	beq.n	80093a8 <__ssvfiscanf_r+0x1f0>
 80092dc:	2b64      	cmp	r3, #100	; 0x64
 80092de:	d1e1      	bne.n	80092a4 <__ssvfiscanf_r+0xec>
 80092e0:	9742      	str	r7, [sp, #264]	; 0x108
 80092e2:	e7f4      	b.n	80092ce <__ssvfiscanf_r+0x116>
 80092e4:	2b70      	cmp	r3, #112	; 0x70
 80092e6:	d04b      	beq.n	8009380 <__ssvfiscanf_r+0x1c8>
 80092e8:	d826      	bhi.n	8009338 <__ssvfiscanf_r+0x180>
 80092ea:	2b6e      	cmp	r3, #110	; 0x6e
 80092ec:	d062      	beq.n	80093b4 <__ssvfiscanf_r+0x1fc>
 80092ee:	d84c      	bhi.n	800938a <__ssvfiscanf_r+0x1d2>
 80092f0:	2b69      	cmp	r3, #105	; 0x69
 80092f2:	d1d7      	bne.n	80092a4 <__ssvfiscanf_r+0xec>
 80092f4:	2300      	movs	r3, #0
 80092f6:	9342      	str	r3, [sp, #264]	; 0x108
 80092f8:	2303      	movs	r3, #3
 80092fa:	9347      	str	r3, [sp, #284]	; 0x11c
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dd68      	ble.n	80093d4 <__ssvfiscanf_r+0x21c>
 8009302:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009304:	0659      	lsls	r1, r3, #25
 8009306:	d407      	bmi.n	8009318 <__ssvfiscanf_r+0x160>
 8009308:	f000 fd12 	bl	8009d30 <__locale_ctype_ptr>
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	781a      	ldrb	r2, [r3, #0]
 8009310:	4410      	add	r0, r2
 8009312:	7842      	ldrb	r2, [r0, #1]
 8009314:	0712      	lsls	r2, r2, #28
 8009316:	d464      	bmi.n	80093e2 <__ssvfiscanf_r+0x22a>
 8009318:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800931a:	2b02      	cmp	r3, #2
 800931c:	dc73      	bgt.n	8009406 <__ssvfiscanf_r+0x24e>
 800931e:	466b      	mov	r3, sp
 8009320:	4622      	mov	r2, r4
 8009322:	a941      	add	r1, sp, #260	; 0x104
 8009324:	4630      	mov	r0, r6
 8009326:	f000 fa1f 	bl	8009768 <_scanf_chars>
 800932a:	2801      	cmp	r0, #1
 800932c:	f000 8089 	beq.w	8009442 <__ssvfiscanf_r+0x28a>
 8009330:	2802      	cmp	r0, #2
 8009332:	f47f af71 	bne.w	8009218 <__ssvfiscanf_r+0x60>
 8009336:	e01d      	b.n	8009374 <__ssvfiscanf_r+0x1bc>
 8009338:	2b75      	cmp	r3, #117	; 0x75
 800933a:	d0d1      	beq.n	80092e0 <__ssvfiscanf_r+0x128>
 800933c:	2b78      	cmp	r3, #120	; 0x78
 800933e:	d0c0      	beq.n	80092c2 <__ssvfiscanf_r+0x10a>
 8009340:	2b73      	cmp	r3, #115	; 0x73
 8009342:	d1af      	bne.n	80092a4 <__ssvfiscanf_r+0xec>
 8009344:	2302      	movs	r3, #2
 8009346:	e7d8      	b.n	80092fa <__ssvfiscanf_r+0x142>
 8009348:	6863      	ldr	r3, [r4, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	dd0c      	ble.n	8009368 <__ssvfiscanf_r+0x1b0>
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	781a      	ldrb	r2, [r3, #0]
 8009352:	455a      	cmp	r2, fp
 8009354:	d175      	bne.n	8009442 <__ssvfiscanf_r+0x28a>
 8009356:	3301      	adds	r3, #1
 8009358:	6862      	ldr	r2, [r4, #4]
 800935a:	6023      	str	r3, [r4, #0]
 800935c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800935e:	3a01      	subs	r2, #1
 8009360:	3301      	adds	r3, #1
 8009362:	6062      	str	r2, [r4, #4]
 8009364:	9345      	str	r3, [sp, #276]	; 0x114
 8009366:	e757      	b.n	8009218 <__ssvfiscanf_r+0x60>
 8009368:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800936a:	4621      	mov	r1, r4
 800936c:	4630      	mov	r0, r6
 800936e:	4798      	blx	r3
 8009370:	2800      	cmp	r0, #0
 8009372:	d0ec      	beq.n	800934e <__ssvfiscanf_r+0x196>
 8009374:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009376:	2800      	cmp	r0, #0
 8009378:	d159      	bne.n	800942e <__ssvfiscanf_r+0x276>
 800937a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800937e:	e05c      	b.n	800943a <__ssvfiscanf_r+0x282>
 8009380:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009382:	f042 0220 	orr.w	r2, r2, #32
 8009386:	9241      	str	r2, [sp, #260]	; 0x104
 8009388:	e79b      	b.n	80092c2 <__ssvfiscanf_r+0x10a>
 800938a:	2308      	movs	r3, #8
 800938c:	9342      	str	r3, [sp, #264]	; 0x108
 800938e:	2304      	movs	r3, #4
 8009390:	e7b3      	b.n	80092fa <__ssvfiscanf_r+0x142>
 8009392:	4629      	mov	r1, r5
 8009394:	4640      	mov	r0, r8
 8009396:	f000 fb3f 	bl	8009a18 <__sccl>
 800939a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800939c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093a0:	9341      	str	r3, [sp, #260]	; 0x104
 80093a2:	4605      	mov	r5, r0
 80093a4:	2301      	movs	r3, #1
 80093a6:	e7a8      	b.n	80092fa <__ssvfiscanf_r+0x142>
 80093a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80093aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ae:	9341      	str	r3, [sp, #260]	; 0x104
 80093b0:	2300      	movs	r3, #0
 80093b2:	e7a2      	b.n	80092fa <__ssvfiscanf_r+0x142>
 80093b4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80093b6:	06c3      	lsls	r3, r0, #27
 80093b8:	f53f af2e 	bmi.w	8009218 <__ssvfiscanf_r+0x60>
 80093bc:	9b00      	ldr	r3, [sp, #0]
 80093be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80093c0:	1d19      	adds	r1, r3, #4
 80093c2:	9100      	str	r1, [sp, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	07c0      	lsls	r0, r0, #31
 80093c8:	bf4c      	ite	mi
 80093ca:	801a      	strhmi	r2, [r3, #0]
 80093cc:	601a      	strpl	r2, [r3, #0]
 80093ce:	e723      	b.n	8009218 <__ssvfiscanf_r+0x60>
 80093d0:	2305      	movs	r3, #5
 80093d2:	e792      	b.n	80092fa <__ssvfiscanf_r+0x142>
 80093d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80093d6:	4621      	mov	r1, r4
 80093d8:	4630      	mov	r0, r6
 80093da:	4798      	blx	r3
 80093dc:	2800      	cmp	r0, #0
 80093de:	d090      	beq.n	8009302 <__ssvfiscanf_r+0x14a>
 80093e0:	e7c8      	b.n	8009374 <__ssvfiscanf_r+0x1bc>
 80093e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80093e4:	3201      	adds	r2, #1
 80093e6:	9245      	str	r2, [sp, #276]	; 0x114
 80093e8:	6862      	ldr	r2, [r4, #4]
 80093ea:	3a01      	subs	r2, #1
 80093ec:	2a00      	cmp	r2, #0
 80093ee:	6062      	str	r2, [r4, #4]
 80093f0:	dd02      	ble.n	80093f8 <__ssvfiscanf_r+0x240>
 80093f2:	3301      	adds	r3, #1
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	e787      	b.n	8009308 <__ssvfiscanf_r+0x150>
 80093f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80093fa:	4621      	mov	r1, r4
 80093fc:	4630      	mov	r0, r6
 80093fe:	4798      	blx	r3
 8009400:	2800      	cmp	r0, #0
 8009402:	d081      	beq.n	8009308 <__ssvfiscanf_r+0x150>
 8009404:	e7b6      	b.n	8009374 <__ssvfiscanf_r+0x1bc>
 8009406:	2b04      	cmp	r3, #4
 8009408:	dc06      	bgt.n	8009418 <__ssvfiscanf_r+0x260>
 800940a:	466b      	mov	r3, sp
 800940c:	4622      	mov	r2, r4
 800940e:	a941      	add	r1, sp, #260	; 0x104
 8009410:	4630      	mov	r0, r6
 8009412:	f000 fa0d 	bl	8009830 <_scanf_i>
 8009416:	e788      	b.n	800932a <__ssvfiscanf_r+0x172>
 8009418:	4b0e      	ldr	r3, [pc, #56]	; (8009454 <__ssvfiscanf_r+0x29c>)
 800941a:	2b00      	cmp	r3, #0
 800941c:	f43f aefc 	beq.w	8009218 <__ssvfiscanf_r+0x60>
 8009420:	466b      	mov	r3, sp
 8009422:	4622      	mov	r2, r4
 8009424:	a941      	add	r1, sp, #260	; 0x104
 8009426:	4630      	mov	r0, r6
 8009428:	f3af 8000 	nop.w
 800942c:	e77d      	b.n	800932a <__ssvfiscanf_r+0x172>
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009434:	bf18      	it	ne
 8009436:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800943a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800943e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009442:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009444:	e7f9      	b.n	800943a <__ssvfiscanf_r+0x282>
 8009446:	bf00      	nop
 8009448:	08009105 	.word	0x08009105
 800944c:	0800917f 	.word	0x0800917f
 8009450:	0800a12a 	.word	0x0800a12a
 8009454:	00000000 	.word	0x00000000

08009458 <_printf_common>:
 8009458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800945c:	4691      	mov	r9, r2
 800945e:	461f      	mov	r7, r3
 8009460:	688a      	ldr	r2, [r1, #8]
 8009462:	690b      	ldr	r3, [r1, #16]
 8009464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009468:	4293      	cmp	r3, r2
 800946a:	bfb8      	it	lt
 800946c:	4613      	movlt	r3, r2
 800946e:	f8c9 3000 	str.w	r3, [r9]
 8009472:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009476:	4606      	mov	r6, r0
 8009478:	460c      	mov	r4, r1
 800947a:	b112      	cbz	r2, 8009482 <_printf_common+0x2a>
 800947c:	3301      	adds	r3, #1
 800947e:	f8c9 3000 	str.w	r3, [r9]
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	0699      	lsls	r1, r3, #26
 8009486:	bf42      	ittt	mi
 8009488:	f8d9 3000 	ldrmi.w	r3, [r9]
 800948c:	3302      	addmi	r3, #2
 800948e:	f8c9 3000 	strmi.w	r3, [r9]
 8009492:	6825      	ldr	r5, [r4, #0]
 8009494:	f015 0506 	ands.w	r5, r5, #6
 8009498:	d107      	bne.n	80094aa <_printf_common+0x52>
 800949a:	f104 0a19 	add.w	sl, r4, #25
 800949e:	68e3      	ldr	r3, [r4, #12]
 80094a0:	f8d9 2000 	ldr.w	r2, [r9]
 80094a4:	1a9b      	subs	r3, r3, r2
 80094a6:	42ab      	cmp	r3, r5
 80094a8:	dc28      	bgt.n	80094fc <_printf_common+0xa4>
 80094aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80094ae:	6822      	ldr	r2, [r4, #0]
 80094b0:	3300      	adds	r3, #0
 80094b2:	bf18      	it	ne
 80094b4:	2301      	movne	r3, #1
 80094b6:	0692      	lsls	r2, r2, #26
 80094b8:	d42d      	bmi.n	8009516 <_printf_common+0xbe>
 80094ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094be:	4639      	mov	r1, r7
 80094c0:	4630      	mov	r0, r6
 80094c2:	47c0      	blx	r8
 80094c4:	3001      	adds	r0, #1
 80094c6:	d020      	beq.n	800950a <_printf_common+0xb2>
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	68e5      	ldr	r5, [r4, #12]
 80094cc:	f8d9 2000 	ldr.w	r2, [r9]
 80094d0:	f003 0306 	and.w	r3, r3, #6
 80094d4:	2b04      	cmp	r3, #4
 80094d6:	bf08      	it	eq
 80094d8:	1aad      	subeq	r5, r5, r2
 80094da:	68a3      	ldr	r3, [r4, #8]
 80094dc:	6922      	ldr	r2, [r4, #16]
 80094de:	bf0c      	ite	eq
 80094e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094e4:	2500      	movne	r5, #0
 80094e6:	4293      	cmp	r3, r2
 80094e8:	bfc4      	itt	gt
 80094ea:	1a9b      	subgt	r3, r3, r2
 80094ec:	18ed      	addgt	r5, r5, r3
 80094ee:	f04f 0900 	mov.w	r9, #0
 80094f2:	341a      	adds	r4, #26
 80094f4:	454d      	cmp	r5, r9
 80094f6:	d11a      	bne.n	800952e <_printf_common+0xd6>
 80094f8:	2000      	movs	r0, #0
 80094fa:	e008      	b.n	800950e <_printf_common+0xb6>
 80094fc:	2301      	movs	r3, #1
 80094fe:	4652      	mov	r2, sl
 8009500:	4639      	mov	r1, r7
 8009502:	4630      	mov	r0, r6
 8009504:	47c0      	blx	r8
 8009506:	3001      	adds	r0, #1
 8009508:	d103      	bne.n	8009512 <_printf_common+0xba>
 800950a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800950e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009512:	3501      	adds	r5, #1
 8009514:	e7c3      	b.n	800949e <_printf_common+0x46>
 8009516:	18e1      	adds	r1, r4, r3
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	2030      	movs	r0, #48	; 0x30
 800951c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009520:	4422      	add	r2, r4
 8009522:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009526:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800952a:	3302      	adds	r3, #2
 800952c:	e7c5      	b.n	80094ba <_printf_common+0x62>
 800952e:	2301      	movs	r3, #1
 8009530:	4622      	mov	r2, r4
 8009532:	4639      	mov	r1, r7
 8009534:	4630      	mov	r0, r6
 8009536:	47c0      	blx	r8
 8009538:	3001      	adds	r0, #1
 800953a:	d0e6      	beq.n	800950a <_printf_common+0xb2>
 800953c:	f109 0901 	add.w	r9, r9, #1
 8009540:	e7d8      	b.n	80094f4 <_printf_common+0x9c>
	...

08009544 <_printf_i>:
 8009544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009548:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800954c:	460c      	mov	r4, r1
 800954e:	7e09      	ldrb	r1, [r1, #24]
 8009550:	b085      	sub	sp, #20
 8009552:	296e      	cmp	r1, #110	; 0x6e
 8009554:	4617      	mov	r7, r2
 8009556:	4606      	mov	r6, r0
 8009558:	4698      	mov	r8, r3
 800955a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800955c:	f000 80b3 	beq.w	80096c6 <_printf_i+0x182>
 8009560:	d822      	bhi.n	80095a8 <_printf_i+0x64>
 8009562:	2963      	cmp	r1, #99	; 0x63
 8009564:	d036      	beq.n	80095d4 <_printf_i+0x90>
 8009566:	d80a      	bhi.n	800957e <_printf_i+0x3a>
 8009568:	2900      	cmp	r1, #0
 800956a:	f000 80b9 	beq.w	80096e0 <_printf_i+0x19c>
 800956e:	2958      	cmp	r1, #88	; 0x58
 8009570:	f000 8083 	beq.w	800967a <_printf_i+0x136>
 8009574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009578:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800957c:	e032      	b.n	80095e4 <_printf_i+0xa0>
 800957e:	2964      	cmp	r1, #100	; 0x64
 8009580:	d001      	beq.n	8009586 <_printf_i+0x42>
 8009582:	2969      	cmp	r1, #105	; 0x69
 8009584:	d1f6      	bne.n	8009574 <_printf_i+0x30>
 8009586:	6820      	ldr	r0, [r4, #0]
 8009588:	6813      	ldr	r3, [r2, #0]
 800958a:	0605      	lsls	r5, r0, #24
 800958c:	f103 0104 	add.w	r1, r3, #4
 8009590:	d52a      	bpl.n	80095e8 <_printf_i+0xa4>
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6011      	str	r1, [r2, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	da03      	bge.n	80095a2 <_printf_i+0x5e>
 800959a:	222d      	movs	r2, #45	; 0x2d
 800959c:	425b      	negs	r3, r3
 800959e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80095a2:	486f      	ldr	r0, [pc, #444]	; (8009760 <_printf_i+0x21c>)
 80095a4:	220a      	movs	r2, #10
 80095a6:	e039      	b.n	800961c <_printf_i+0xd8>
 80095a8:	2973      	cmp	r1, #115	; 0x73
 80095aa:	f000 809d 	beq.w	80096e8 <_printf_i+0x1a4>
 80095ae:	d808      	bhi.n	80095c2 <_printf_i+0x7e>
 80095b0:	296f      	cmp	r1, #111	; 0x6f
 80095b2:	d020      	beq.n	80095f6 <_printf_i+0xb2>
 80095b4:	2970      	cmp	r1, #112	; 0x70
 80095b6:	d1dd      	bne.n	8009574 <_printf_i+0x30>
 80095b8:	6823      	ldr	r3, [r4, #0]
 80095ba:	f043 0320 	orr.w	r3, r3, #32
 80095be:	6023      	str	r3, [r4, #0]
 80095c0:	e003      	b.n	80095ca <_printf_i+0x86>
 80095c2:	2975      	cmp	r1, #117	; 0x75
 80095c4:	d017      	beq.n	80095f6 <_printf_i+0xb2>
 80095c6:	2978      	cmp	r1, #120	; 0x78
 80095c8:	d1d4      	bne.n	8009574 <_printf_i+0x30>
 80095ca:	2378      	movs	r3, #120	; 0x78
 80095cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095d0:	4864      	ldr	r0, [pc, #400]	; (8009764 <_printf_i+0x220>)
 80095d2:	e055      	b.n	8009680 <_printf_i+0x13c>
 80095d4:	6813      	ldr	r3, [r2, #0]
 80095d6:	1d19      	adds	r1, r3, #4
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6011      	str	r1, [r2, #0]
 80095dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095e4:	2301      	movs	r3, #1
 80095e6:	e08c      	b.n	8009702 <_printf_i+0x1be>
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	6011      	str	r1, [r2, #0]
 80095ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095f0:	bf18      	it	ne
 80095f2:	b21b      	sxthne	r3, r3
 80095f4:	e7cf      	b.n	8009596 <_printf_i+0x52>
 80095f6:	6813      	ldr	r3, [r2, #0]
 80095f8:	6825      	ldr	r5, [r4, #0]
 80095fa:	1d18      	adds	r0, r3, #4
 80095fc:	6010      	str	r0, [r2, #0]
 80095fe:	0628      	lsls	r0, r5, #24
 8009600:	d501      	bpl.n	8009606 <_printf_i+0xc2>
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	e002      	b.n	800960c <_printf_i+0xc8>
 8009606:	0668      	lsls	r0, r5, #25
 8009608:	d5fb      	bpl.n	8009602 <_printf_i+0xbe>
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	4854      	ldr	r0, [pc, #336]	; (8009760 <_printf_i+0x21c>)
 800960e:	296f      	cmp	r1, #111	; 0x6f
 8009610:	bf14      	ite	ne
 8009612:	220a      	movne	r2, #10
 8009614:	2208      	moveq	r2, #8
 8009616:	2100      	movs	r1, #0
 8009618:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800961c:	6865      	ldr	r5, [r4, #4]
 800961e:	60a5      	str	r5, [r4, #8]
 8009620:	2d00      	cmp	r5, #0
 8009622:	f2c0 8095 	blt.w	8009750 <_printf_i+0x20c>
 8009626:	6821      	ldr	r1, [r4, #0]
 8009628:	f021 0104 	bic.w	r1, r1, #4
 800962c:	6021      	str	r1, [r4, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d13d      	bne.n	80096ae <_printf_i+0x16a>
 8009632:	2d00      	cmp	r5, #0
 8009634:	f040 808e 	bne.w	8009754 <_printf_i+0x210>
 8009638:	4665      	mov	r5, ip
 800963a:	2a08      	cmp	r2, #8
 800963c:	d10b      	bne.n	8009656 <_printf_i+0x112>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	07db      	lsls	r3, r3, #31
 8009642:	d508      	bpl.n	8009656 <_printf_i+0x112>
 8009644:	6923      	ldr	r3, [r4, #16]
 8009646:	6862      	ldr	r2, [r4, #4]
 8009648:	429a      	cmp	r2, r3
 800964a:	bfde      	ittt	le
 800964c:	2330      	movle	r3, #48	; 0x30
 800964e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009652:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009656:	ebac 0305 	sub.w	r3, ip, r5
 800965a:	6123      	str	r3, [r4, #16]
 800965c:	f8cd 8000 	str.w	r8, [sp]
 8009660:	463b      	mov	r3, r7
 8009662:	aa03      	add	r2, sp, #12
 8009664:	4621      	mov	r1, r4
 8009666:	4630      	mov	r0, r6
 8009668:	f7ff fef6 	bl	8009458 <_printf_common>
 800966c:	3001      	adds	r0, #1
 800966e:	d14d      	bne.n	800970c <_printf_i+0x1c8>
 8009670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009674:	b005      	add	sp, #20
 8009676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800967a:	4839      	ldr	r0, [pc, #228]	; (8009760 <_printf_i+0x21c>)
 800967c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009680:	6813      	ldr	r3, [r2, #0]
 8009682:	6821      	ldr	r1, [r4, #0]
 8009684:	1d1d      	adds	r5, r3, #4
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6015      	str	r5, [r2, #0]
 800968a:	060a      	lsls	r2, r1, #24
 800968c:	d50b      	bpl.n	80096a6 <_printf_i+0x162>
 800968e:	07ca      	lsls	r2, r1, #31
 8009690:	bf44      	itt	mi
 8009692:	f041 0120 	orrmi.w	r1, r1, #32
 8009696:	6021      	strmi	r1, [r4, #0]
 8009698:	b91b      	cbnz	r3, 80096a2 <_printf_i+0x15e>
 800969a:	6822      	ldr	r2, [r4, #0]
 800969c:	f022 0220 	bic.w	r2, r2, #32
 80096a0:	6022      	str	r2, [r4, #0]
 80096a2:	2210      	movs	r2, #16
 80096a4:	e7b7      	b.n	8009616 <_printf_i+0xd2>
 80096a6:	064d      	lsls	r5, r1, #25
 80096a8:	bf48      	it	mi
 80096aa:	b29b      	uxthmi	r3, r3
 80096ac:	e7ef      	b.n	800968e <_printf_i+0x14a>
 80096ae:	4665      	mov	r5, ip
 80096b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80096b4:	fb02 3311 	mls	r3, r2, r1, r3
 80096b8:	5cc3      	ldrb	r3, [r0, r3]
 80096ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80096be:	460b      	mov	r3, r1
 80096c0:	2900      	cmp	r1, #0
 80096c2:	d1f5      	bne.n	80096b0 <_printf_i+0x16c>
 80096c4:	e7b9      	b.n	800963a <_printf_i+0xf6>
 80096c6:	6813      	ldr	r3, [r2, #0]
 80096c8:	6825      	ldr	r5, [r4, #0]
 80096ca:	6961      	ldr	r1, [r4, #20]
 80096cc:	1d18      	adds	r0, r3, #4
 80096ce:	6010      	str	r0, [r2, #0]
 80096d0:	0628      	lsls	r0, r5, #24
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	d501      	bpl.n	80096da <_printf_i+0x196>
 80096d6:	6019      	str	r1, [r3, #0]
 80096d8:	e002      	b.n	80096e0 <_printf_i+0x19c>
 80096da:	066a      	lsls	r2, r5, #25
 80096dc:	d5fb      	bpl.n	80096d6 <_printf_i+0x192>
 80096de:	8019      	strh	r1, [r3, #0]
 80096e0:	2300      	movs	r3, #0
 80096e2:	6123      	str	r3, [r4, #16]
 80096e4:	4665      	mov	r5, ip
 80096e6:	e7b9      	b.n	800965c <_printf_i+0x118>
 80096e8:	6813      	ldr	r3, [r2, #0]
 80096ea:	1d19      	adds	r1, r3, #4
 80096ec:	6011      	str	r1, [r2, #0]
 80096ee:	681d      	ldr	r5, [r3, #0]
 80096f0:	6862      	ldr	r2, [r4, #4]
 80096f2:	2100      	movs	r1, #0
 80096f4:	4628      	mov	r0, r5
 80096f6:	f7f6 fd83 	bl	8000200 <memchr>
 80096fa:	b108      	cbz	r0, 8009700 <_printf_i+0x1bc>
 80096fc:	1b40      	subs	r0, r0, r5
 80096fe:	6060      	str	r0, [r4, #4]
 8009700:	6863      	ldr	r3, [r4, #4]
 8009702:	6123      	str	r3, [r4, #16]
 8009704:	2300      	movs	r3, #0
 8009706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800970a:	e7a7      	b.n	800965c <_printf_i+0x118>
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	462a      	mov	r2, r5
 8009710:	4639      	mov	r1, r7
 8009712:	4630      	mov	r0, r6
 8009714:	47c0      	blx	r8
 8009716:	3001      	adds	r0, #1
 8009718:	d0aa      	beq.n	8009670 <_printf_i+0x12c>
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	079b      	lsls	r3, r3, #30
 800971e:	d413      	bmi.n	8009748 <_printf_i+0x204>
 8009720:	68e0      	ldr	r0, [r4, #12]
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	4298      	cmp	r0, r3
 8009726:	bfb8      	it	lt
 8009728:	4618      	movlt	r0, r3
 800972a:	e7a3      	b.n	8009674 <_printf_i+0x130>
 800972c:	2301      	movs	r3, #1
 800972e:	464a      	mov	r2, r9
 8009730:	4639      	mov	r1, r7
 8009732:	4630      	mov	r0, r6
 8009734:	47c0      	blx	r8
 8009736:	3001      	adds	r0, #1
 8009738:	d09a      	beq.n	8009670 <_printf_i+0x12c>
 800973a:	3501      	adds	r5, #1
 800973c:	68e3      	ldr	r3, [r4, #12]
 800973e:	9a03      	ldr	r2, [sp, #12]
 8009740:	1a9b      	subs	r3, r3, r2
 8009742:	42ab      	cmp	r3, r5
 8009744:	dcf2      	bgt.n	800972c <_printf_i+0x1e8>
 8009746:	e7eb      	b.n	8009720 <_printf_i+0x1dc>
 8009748:	2500      	movs	r5, #0
 800974a:	f104 0919 	add.w	r9, r4, #25
 800974e:	e7f5      	b.n	800973c <_printf_i+0x1f8>
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1ac      	bne.n	80096ae <_printf_i+0x16a>
 8009754:	7803      	ldrb	r3, [r0, #0]
 8009756:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800975a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800975e:	e76c      	b.n	800963a <_printf_i+0xf6>
 8009760:	0800a135 	.word	0x0800a135
 8009764:	0800a146 	.word	0x0800a146

08009768 <_scanf_chars>:
 8009768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976c:	4615      	mov	r5, r2
 800976e:	688a      	ldr	r2, [r1, #8]
 8009770:	4680      	mov	r8, r0
 8009772:	460c      	mov	r4, r1
 8009774:	b932      	cbnz	r2, 8009784 <_scanf_chars+0x1c>
 8009776:	698a      	ldr	r2, [r1, #24]
 8009778:	2a00      	cmp	r2, #0
 800977a:	bf14      	ite	ne
 800977c:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8009780:	2201      	moveq	r2, #1
 8009782:	608a      	str	r2, [r1, #8]
 8009784:	6822      	ldr	r2, [r4, #0]
 8009786:	06d1      	lsls	r1, r2, #27
 8009788:	bf5f      	itttt	pl
 800978a:	681a      	ldrpl	r2, [r3, #0]
 800978c:	1d11      	addpl	r1, r2, #4
 800978e:	6019      	strpl	r1, [r3, #0]
 8009790:	6817      	ldrpl	r7, [r2, #0]
 8009792:	2600      	movs	r6, #0
 8009794:	69a3      	ldr	r3, [r4, #24]
 8009796:	b1db      	cbz	r3, 80097d0 <_scanf_chars+0x68>
 8009798:	2b01      	cmp	r3, #1
 800979a:	d107      	bne.n	80097ac <_scanf_chars+0x44>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	6962      	ldr	r2, [r4, #20]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	5cd3      	ldrb	r3, [r2, r3]
 80097a4:	b9a3      	cbnz	r3, 80097d0 <_scanf_chars+0x68>
 80097a6:	2e00      	cmp	r6, #0
 80097a8:	d132      	bne.n	8009810 <_scanf_chars+0xa8>
 80097aa:	e006      	b.n	80097ba <_scanf_chars+0x52>
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d007      	beq.n	80097c0 <_scanf_chars+0x58>
 80097b0:	2e00      	cmp	r6, #0
 80097b2:	d12d      	bne.n	8009810 <_scanf_chars+0xa8>
 80097b4:	69a3      	ldr	r3, [r4, #24]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d12a      	bne.n	8009810 <_scanf_chars+0xa8>
 80097ba:	2001      	movs	r0, #1
 80097bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c0:	f000 fab6 	bl	8009d30 <__locale_ctype_ptr>
 80097c4:	682b      	ldr	r3, [r5, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	4418      	add	r0, r3
 80097ca:	7843      	ldrb	r3, [r0, #1]
 80097cc:	071b      	lsls	r3, r3, #28
 80097ce:	d4ef      	bmi.n	80097b0 <_scanf_chars+0x48>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	06da      	lsls	r2, r3, #27
 80097d4:	bf5e      	ittt	pl
 80097d6:	682b      	ldrpl	r3, [r5, #0]
 80097d8:	781b      	ldrbpl	r3, [r3, #0]
 80097da:	703b      	strbpl	r3, [r7, #0]
 80097dc:	682a      	ldr	r2, [r5, #0]
 80097de:	686b      	ldr	r3, [r5, #4]
 80097e0:	f102 0201 	add.w	r2, r2, #1
 80097e4:	602a      	str	r2, [r5, #0]
 80097e6:	68a2      	ldr	r2, [r4, #8]
 80097e8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80097ec:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80097f0:	606b      	str	r3, [r5, #4]
 80097f2:	f106 0601 	add.w	r6, r6, #1
 80097f6:	bf58      	it	pl
 80097f8:	3701      	addpl	r7, #1
 80097fa:	60a2      	str	r2, [r4, #8]
 80097fc:	b142      	cbz	r2, 8009810 <_scanf_chars+0xa8>
 80097fe:	2b00      	cmp	r3, #0
 8009800:	dcc8      	bgt.n	8009794 <_scanf_chars+0x2c>
 8009802:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009806:	4629      	mov	r1, r5
 8009808:	4640      	mov	r0, r8
 800980a:	4798      	blx	r3
 800980c:	2800      	cmp	r0, #0
 800980e:	d0c1      	beq.n	8009794 <_scanf_chars+0x2c>
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	f013 0310 	ands.w	r3, r3, #16
 8009816:	d105      	bne.n	8009824 <_scanf_chars+0xbc>
 8009818:	68e2      	ldr	r2, [r4, #12]
 800981a:	3201      	adds	r2, #1
 800981c:	60e2      	str	r2, [r4, #12]
 800981e:	69a2      	ldr	r2, [r4, #24]
 8009820:	b102      	cbz	r2, 8009824 <_scanf_chars+0xbc>
 8009822:	703b      	strb	r3, [r7, #0]
 8009824:	6923      	ldr	r3, [r4, #16]
 8009826:	441e      	add	r6, r3
 8009828:	6126      	str	r6, [r4, #16]
 800982a:	2000      	movs	r0, #0
 800982c:	e7c6      	b.n	80097bc <_scanf_chars+0x54>
	...

08009830 <_scanf_i>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	469a      	mov	sl, r3
 8009836:	4b74      	ldr	r3, [pc, #464]	; (8009a08 <_scanf_i+0x1d8>)
 8009838:	460c      	mov	r4, r1
 800983a:	4683      	mov	fp, r0
 800983c:	4616      	mov	r6, r2
 800983e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009842:	b087      	sub	sp, #28
 8009844:	ab03      	add	r3, sp, #12
 8009846:	68a7      	ldr	r7, [r4, #8]
 8009848:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800984c:	4b6f      	ldr	r3, [pc, #444]	; (8009a0c <_scanf_i+0x1dc>)
 800984e:	69a1      	ldr	r1, [r4, #24]
 8009850:	4a6f      	ldr	r2, [pc, #444]	; (8009a10 <_scanf_i+0x1e0>)
 8009852:	2903      	cmp	r1, #3
 8009854:	bf08      	it	eq
 8009856:	461a      	moveq	r2, r3
 8009858:	1e7b      	subs	r3, r7, #1
 800985a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800985e:	bf84      	itt	hi
 8009860:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009864:	60a3      	strhi	r3, [r4, #8]
 8009866:	6823      	ldr	r3, [r4, #0]
 8009868:	9200      	str	r2, [sp, #0]
 800986a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800986e:	bf88      	it	hi
 8009870:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009874:	f104 091c 	add.w	r9, r4, #28
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	bf8c      	ite	hi
 800987c:	197f      	addhi	r7, r7, r5
 800987e:	2700      	movls	r7, #0
 8009880:	464b      	mov	r3, r9
 8009882:	f04f 0800 	mov.w	r8, #0
 8009886:	9301      	str	r3, [sp, #4]
 8009888:	6831      	ldr	r1, [r6, #0]
 800988a:	ab03      	add	r3, sp, #12
 800988c:	2202      	movs	r2, #2
 800988e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009892:	7809      	ldrb	r1, [r1, #0]
 8009894:	f7f6 fcb4 	bl	8000200 <memchr>
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	b330      	cbz	r0, 80098ea <_scanf_i+0xba>
 800989c:	f1b8 0f01 	cmp.w	r8, #1
 80098a0:	d15a      	bne.n	8009958 <_scanf_i+0x128>
 80098a2:	6862      	ldr	r2, [r4, #4]
 80098a4:	b92a      	cbnz	r2, 80098b2 <_scanf_i+0x82>
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	2108      	movs	r1, #8
 80098aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098ae:	6061      	str	r1, [r4, #4]
 80098b0:	6022      	str	r2, [r4, #0]
 80098b2:	6822      	ldr	r2, [r4, #0]
 80098b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80098b8:	6022      	str	r2, [r4, #0]
 80098ba:	68a2      	ldr	r2, [r4, #8]
 80098bc:	1e51      	subs	r1, r2, #1
 80098be:	60a1      	str	r1, [r4, #8]
 80098c0:	b19a      	cbz	r2, 80098ea <_scanf_i+0xba>
 80098c2:	6832      	ldr	r2, [r6, #0]
 80098c4:	1c51      	adds	r1, r2, #1
 80098c6:	6031      	str	r1, [r6, #0]
 80098c8:	7812      	ldrb	r2, [r2, #0]
 80098ca:	701a      	strb	r2, [r3, #0]
 80098cc:	1c5d      	adds	r5, r3, #1
 80098ce:	6873      	ldr	r3, [r6, #4]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	6073      	str	r3, [r6, #4]
 80098d6:	dc07      	bgt.n	80098e8 <_scanf_i+0xb8>
 80098d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80098dc:	4631      	mov	r1, r6
 80098de:	4658      	mov	r0, fp
 80098e0:	4798      	blx	r3
 80098e2:	2800      	cmp	r0, #0
 80098e4:	f040 8086 	bne.w	80099f4 <_scanf_i+0x1c4>
 80098e8:	462b      	mov	r3, r5
 80098ea:	f108 0801 	add.w	r8, r8, #1
 80098ee:	f1b8 0f03 	cmp.w	r8, #3
 80098f2:	d1c8      	bne.n	8009886 <_scanf_i+0x56>
 80098f4:	6862      	ldr	r2, [r4, #4]
 80098f6:	b90a      	cbnz	r2, 80098fc <_scanf_i+0xcc>
 80098f8:	220a      	movs	r2, #10
 80098fa:	6062      	str	r2, [r4, #4]
 80098fc:	6862      	ldr	r2, [r4, #4]
 80098fe:	4945      	ldr	r1, [pc, #276]	; (8009a14 <_scanf_i+0x1e4>)
 8009900:	6960      	ldr	r0, [r4, #20]
 8009902:	9301      	str	r3, [sp, #4]
 8009904:	1a89      	subs	r1, r1, r2
 8009906:	f000 f887 	bl	8009a18 <__sccl>
 800990a:	9b01      	ldr	r3, [sp, #4]
 800990c:	f04f 0800 	mov.w	r8, #0
 8009910:	461d      	mov	r5, r3
 8009912:	68a3      	ldr	r3, [r4, #8]
 8009914:	6822      	ldr	r2, [r4, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d03a      	beq.n	8009990 <_scanf_i+0x160>
 800991a:	6831      	ldr	r1, [r6, #0]
 800991c:	6960      	ldr	r0, [r4, #20]
 800991e:	f891 c000 	ldrb.w	ip, [r1]
 8009922:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009926:	2800      	cmp	r0, #0
 8009928:	d032      	beq.n	8009990 <_scanf_i+0x160>
 800992a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800992e:	d121      	bne.n	8009974 <_scanf_i+0x144>
 8009930:	0510      	lsls	r0, r2, #20
 8009932:	d51f      	bpl.n	8009974 <_scanf_i+0x144>
 8009934:	f108 0801 	add.w	r8, r8, #1
 8009938:	b117      	cbz	r7, 8009940 <_scanf_i+0x110>
 800993a:	3301      	adds	r3, #1
 800993c:	3f01      	subs	r7, #1
 800993e:	60a3      	str	r3, [r4, #8]
 8009940:	6873      	ldr	r3, [r6, #4]
 8009942:	3b01      	subs	r3, #1
 8009944:	2b00      	cmp	r3, #0
 8009946:	6073      	str	r3, [r6, #4]
 8009948:	dd1b      	ble.n	8009982 <_scanf_i+0x152>
 800994a:	6833      	ldr	r3, [r6, #0]
 800994c:	3301      	adds	r3, #1
 800994e:	6033      	str	r3, [r6, #0]
 8009950:	68a3      	ldr	r3, [r4, #8]
 8009952:	3b01      	subs	r3, #1
 8009954:	60a3      	str	r3, [r4, #8]
 8009956:	e7dc      	b.n	8009912 <_scanf_i+0xe2>
 8009958:	f1b8 0f02 	cmp.w	r8, #2
 800995c:	d1ad      	bne.n	80098ba <_scanf_i+0x8a>
 800995e:	6822      	ldr	r2, [r4, #0]
 8009960:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009964:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009968:	d1bf      	bne.n	80098ea <_scanf_i+0xba>
 800996a:	2110      	movs	r1, #16
 800996c:	6061      	str	r1, [r4, #4]
 800996e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009972:	e7a1      	b.n	80098b8 <_scanf_i+0x88>
 8009974:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009978:	6022      	str	r2, [r4, #0]
 800997a:	780b      	ldrb	r3, [r1, #0]
 800997c:	702b      	strb	r3, [r5, #0]
 800997e:	3501      	adds	r5, #1
 8009980:	e7de      	b.n	8009940 <_scanf_i+0x110>
 8009982:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009986:	4631      	mov	r1, r6
 8009988:	4658      	mov	r0, fp
 800998a:	4798      	blx	r3
 800998c:	2800      	cmp	r0, #0
 800998e:	d0df      	beq.n	8009950 <_scanf_i+0x120>
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	05d9      	lsls	r1, r3, #23
 8009994:	d50c      	bpl.n	80099b0 <_scanf_i+0x180>
 8009996:	454d      	cmp	r5, r9
 8009998:	d908      	bls.n	80099ac <_scanf_i+0x17c>
 800999a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800999e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099a2:	4632      	mov	r2, r6
 80099a4:	4658      	mov	r0, fp
 80099a6:	4798      	blx	r3
 80099a8:	1e6f      	subs	r7, r5, #1
 80099aa:	463d      	mov	r5, r7
 80099ac:	454d      	cmp	r5, r9
 80099ae:	d029      	beq.n	8009a04 <_scanf_i+0x1d4>
 80099b0:	6822      	ldr	r2, [r4, #0]
 80099b2:	f012 0210 	ands.w	r2, r2, #16
 80099b6:	d113      	bne.n	80099e0 <_scanf_i+0x1b0>
 80099b8:	702a      	strb	r2, [r5, #0]
 80099ba:	6863      	ldr	r3, [r4, #4]
 80099bc:	9e00      	ldr	r6, [sp, #0]
 80099be:	4649      	mov	r1, r9
 80099c0:	4658      	mov	r0, fp
 80099c2:	47b0      	blx	r6
 80099c4:	f8da 3000 	ldr.w	r3, [sl]
 80099c8:	6821      	ldr	r1, [r4, #0]
 80099ca:	1d1a      	adds	r2, r3, #4
 80099cc:	f8ca 2000 	str.w	r2, [sl]
 80099d0:	f011 0f20 	tst.w	r1, #32
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	d010      	beq.n	80099fa <_scanf_i+0x1ca>
 80099d8:	6018      	str	r0, [r3, #0]
 80099da:	68e3      	ldr	r3, [r4, #12]
 80099dc:	3301      	adds	r3, #1
 80099de:	60e3      	str	r3, [r4, #12]
 80099e0:	eba5 0509 	sub.w	r5, r5, r9
 80099e4:	44a8      	add	r8, r5
 80099e6:	6925      	ldr	r5, [r4, #16]
 80099e8:	4445      	add	r5, r8
 80099ea:	6125      	str	r5, [r4, #16]
 80099ec:	2000      	movs	r0, #0
 80099ee:	b007      	add	sp, #28
 80099f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f4:	f04f 0800 	mov.w	r8, #0
 80099f8:	e7ca      	b.n	8009990 <_scanf_i+0x160>
 80099fa:	07ca      	lsls	r2, r1, #31
 80099fc:	bf4c      	ite	mi
 80099fe:	8018      	strhmi	r0, [r3, #0]
 8009a00:	6018      	strpl	r0, [r3, #0]
 8009a02:	e7ea      	b.n	80099da <_scanf_i+0x1aa>
 8009a04:	2001      	movs	r0, #1
 8009a06:	e7f2      	b.n	80099ee <_scanf_i+0x1be>
 8009a08:	0800a100 	.word	0x0800a100
 8009a0c:	08009b79 	.word	0x08009b79
 8009a10:	08009c91 	.word	0x08009c91
 8009a14:	0800a167 	.word	0x0800a167

08009a18 <__sccl>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	780b      	ldrb	r3, [r1, #0]
 8009a1c:	2b5e      	cmp	r3, #94	; 0x5e
 8009a1e:	bf13      	iteet	ne
 8009a20:	1c4a      	addne	r2, r1, #1
 8009a22:	1c8a      	addeq	r2, r1, #2
 8009a24:	784b      	ldrbeq	r3, [r1, #1]
 8009a26:	2100      	movne	r1, #0
 8009a28:	bf08      	it	eq
 8009a2a:	2101      	moveq	r1, #1
 8009a2c:	1e44      	subs	r4, r0, #1
 8009a2e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8009a32:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009a36:	42ac      	cmp	r4, r5
 8009a38:	d1fb      	bne.n	8009a32 <__sccl+0x1a>
 8009a3a:	b913      	cbnz	r3, 8009a42 <__sccl+0x2a>
 8009a3c:	3a01      	subs	r2, #1
 8009a3e:	4610      	mov	r0, r2
 8009a40:	bd70      	pop	{r4, r5, r6, pc}
 8009a42:	f081 0401 	eor.w	r4, r1, #1
 8009a46:	54c4      	strb	r4, [r0, r3]
 8009a48:	1c51      	adds	r1, r2, #1
 8009a4a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8009a4e:	2d2d      	cmp	r5, #45	; 0x2d
 8009a50:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 8009a54:	460a      	mov	r2, r1
 8009a56:	d006      	beq.n	8009a66 <__sccl+0x4e>
 8009a58:	2d5d      	cmp	r5, #93	; 0x5d
 8009a5a:	d0f0      	beq.n	8009a3e <__sccl+0x26>
 8009a5c:	b90d      	cbnz	r5, 8009a62 <__sccl+0x4a>
 8009a5e:	4632      	mov	r2, r6
 8009a60:	e7ed      	b.n	8009a3e <__sccl+0x26>
 8009a62:	462b      	mov	r3, r5
 8009a64:	e7ef      	b.n	8009a46 <__sccl+0x2e>
 8009a66:	780e      	ldrb	r6, [r1, #0]
 8009a68:	2e5d      	cmp	r6, #93	; 0x5d
 8009a6a:	d0fa      	beq.n	8009a62 <__sccl+0x4a>
 8009a6c:	42b3      	cmp	r3, r6
 8009a6e:	dcf8      	bgt.n	8009a62 <__sccl+0x4a>
 8009a70:	3301      	adds	r3, #1
 8009a72:	429e      	cmp	r6, r3
 8009a74:	54c4      	strb	r4, [r0, r3]
 8009a76:	dcfb      	bgt.n	8009a70 <__sccl+0x58>
 8009a78:	3102      	adds	r1, #2
 8009a7a:	e7e6      	b.n	8009a4a <__sccl+0x32>

08009a7c <__seofread>:
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	4770      	bx	lr

08009a80 <_strtol_l.isra.0>:
 8009a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a84:	4680      	mov	r8, r0
 8009a86:	4689      	mov	r9, r1
 8009a88:	4692      	mov	sl, r2
 8009a8a:	461e      	mov	r6, r3
 8009a8c:	460f      	mov	r7, r1
 8009a8e:	463d      	mov	r5, r7
 8009a90:	9808      	ldr	r0, [sp, #32]
 8009a92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a96:	f000 f947 	bl	8009d28 <__locale_ctype_ptr_l>
 8009a9a:	4420      	add	r0, r4
 8009a9c:	7843      	ldrb	r3, [r0, #1]
 8009a9e:	f013 0308 	ands.w	r3, r3, #8
 8009aa2:	d132      	bne.n	8009b0a <_strtol_l.isra.0+0x8a>
 8009aa4:	2c2d      	cmp	r4, #45	; 0x2d
 8009aa6:	d132      	bne.n	8009b0e <_strtol_l.isra.0+0x8e>
 8009aa8:	787c      	ldrb	r4, [r7, #1]
 8009aaa:	1cbd      	adds	r5, r7, #2
 8009aac:	2201      	movs	r2, #1
 8009aae:	2e00      	cmp	r6, #0
 8009ab0:	d05d      	beq.n	8009b6e <_strtol_l.isra.0+0xee>
 8009ab2:	2e10      	cmp	r6, #16
 8009ab4:	d109      	bne.n	8009aca <_strtol_l.isra.0+0x4a>
 8009ab6:	2c30      	cmp	r4, #48	; 0x30
 8009ab8:	d107      	bne.n	8009aca <_strtol_l.isra.0+0x4a>
 8009aba:	782b      	ldrb	r3, [r5, #0]
 8009abc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ac0:	2b58      	cmp	r3, #88	; 0x58
 8009ac2:	d14f      	bne.n	8009b64 <_strtol_l.isra.0+0xe4>
 8009ac4:	786c      	ldrb	r4, [r5, #1]
 8009ac6:	2610      	movs	r6, #16
 8009ac8:	3502      	adds	r5, #2
 8009aca:	2a00      	cmp	r2, #0
 8009acc:	bf14      	ite	ne
 8009ace:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009ad2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009ad6:	2700      	movs	r7, #0
 8009ad8:	fbb1 fcf6 	udiv	ip, r1, r6
 8009adc:	4638      	mov	r0, r7
 8009ade:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009ae2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009ae6:	2b09      	cmp	r3, #9
 8009ae8:	d817      	bhi.n	8009b1a <_strtol_l.isra.0+0x9a>
 8009aea:	461c      	mov	r4, r3
 8009aec:	42a6      	cmp	r6, r4
 8009aee:	dd23      	ble.n	8009b38 <_strtol_l.isra.0+0xb8>
 8009af0:	1c7b      	adds	r3, r7, #1
 8009af2:	d007      	beq.n	8009b04 <_strtol_l.isra.0+0x84>
 8009af4:	4584      	cmp	ip, r0
 8009af6:	d31c      	bcc.n	8009b32 <_strtol_l.isra.0+0xb2>
 8009af8:	d101      	bne.n	8009afe <_strtol_l.isra.0+0x7e>
 8009afa:	45a6      	cmp	lr, r4
 8009afc:	db19      	blt.n	8009b32 <_strtol_l.isra.0+0xb2>
 8009afe:	fb00 4006 	mla	r0, r0, r6, r4
 8009b02:	2701      	movs	r7, #1
 8009b04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b08:	e7eb      	b.n	8009ae2 <_strtol_l.isra.0+0x62>
 8009b0a:	462f      	mov	r7, r5
 8009b0c:	e7bf      	b.n	8009a8e <_strtol_l.isra.0+0xe>
 8009b0e:	2c2b      	cmp	r4, #43	; 0x2b
 8009b10:	bf04      	itt	eq
 8009b12:	1cbd      	addeq	r5, r7, #2
 8009b14:	787c      	ldrbeq	r4, [r7, #1]
 8009b16:	461a      	mov	r2, r3
 8009b18:	e7c9      	b.n	8009aae <_strtol_l.isra.0+0x2e>
 8009b1a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009b1e:	2b19      	cmp	r3, #25
 8009b20:	d801      	bhi.n	8009b26 <_strtol_l.isra.0+0xa6>
 8009b22:	3c37      	subs	r4, #55	; 0x37
 8009b24:	e7e2      	b.n	8009aec <_strtol_l.isra.0+0x6c>
 8009b26:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009b2a:	2b19      	cmp	r3, #25
 8009b2c:	d804      	bhi.n	8009b38 <_strtol_l.isra.0+0xb8>
 8009b2e:	3c57      	subs	r4, #87	; 0x57
 8009b30:	e7dc      	b.n	8009aec <_strtol_l.isra.0+0x6c>
 8009b32:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009b36:	e7e5      	b.n	8009b04 <_strtol_l.isra.0+0x84>
 8009b38:	1c7b      	adds	r3, r7, #1
 8009b3a:	d108      	bne.n	8009b4e <_strtol_l.isra.0+0xce>
 8009b3c:	2322      	movs	r3, #34	; 0x22
 8009b3e:	f8c8 3000 	str.w	r3, [r8]
 8009b42:	4608      	mov	r0, r1
 8009b44:	f1ba 0f00 	cmp.w	sl, #0
 8009b48:	d107      	bne.n	8009b5a <_strtol_l.isra.0+0xda>
 8009b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b4e:	b102      	cbz	r2, 8009b52 <_strtol_l.isra.0+0xd2>
 8009b50:	4240      	negs	r0, r0
 8009b52:	f1ba 0f00 	cmp.w	sl, #0
 8009b56:	d0f8      	beq.n	8009b4a <_strtol_l.isra.0+0xca>
 8009b58:	b10f      	cbz	r7, 8009b5e <_strtol_l.isra.0+0xde>
 8009b5a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009b5e:	f8ca 9000 	str.w	r9, [sl]
 8009b62:	e7f2      	b.n	8009b4a <_strtol_l.isra.0+0xca>
 8009b64:	2430      	movs	r4, #48	; 0x30
 8009b66:	2e00      	cmp	r6, #0
 8009b68:	d1af      	bne.n	8009aca <_strtol_l.isra.0+0x4a>
 8009b6a:	2608      	movs	r6, #8
 8009b6c:	e7ad      	b.n	8009aca <_strtol_l.isra.0+0x4a>
 8009b6e:	2c30      	cmp	r4, #48	; 0x30
 8009b70:	d0a3      	beq.n	8009aba <_strtol_l.isra.0+0x3a>
 8009b72:	260a      	movs	r6, #10
 8009b74:	e7a9      	b.n	8009aca <_strtol_l.isra.0+0x4a>
	...

08009b78 <_strtol_r>:
 8009b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b7a:	4c06      	ldr	r4, [pc, #24]	; (8009b94 <_strtol_r+0x1c>)
 8009b7c:	4d06      	ldr	r5, [pc, #24]	; (8009b98 <_strtol_r+0x20>)
 8009b7e:	6824      	ldr	r4, [r4, #0]
 8009b80:	6a24      	ldr	r4, [r4, #32]
 8009b82:	2c00      	cmp	r4, #0
 8009b84:	bf08      	it	eq
 8009b86:	462c      	moveq	r4, r5
 8009b88:	9400      	str	r4, [sp, #0]
 8009b8a:	f7ff ff79 	bl	8009a80 <_strtol_l.isra.0>
 8009b8e:	b003      	add	sp, #12
 8009b90:	bd30      	pop	{r4, r5, pc}
 8009b92:	bf00      	nop
 8009b94:	20000188 	.word	0x20000188
 8009b98:	200001ec 	.word	0x200001ec

08009b9c <_strtoul_l.isra.0>:
 8009b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba0:	4680      	mov	r8, r0
 8009ba2:	4689      	mov	r9, r1
 8009ba4:	4692      	mov	sl, r2
 8009ba6:	461e      	mov	r6, r3
 8009ba8:	460f      	mov	r7, r1
 8009baa:	463d      	mov	r5, r7
 8009bac:	9808      	ldr	r0, [sp, #32]
 8009bae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bb2:	f000 f8b9 	bl	8009d28 <__locale_ctype_ptr_l>
 8009bb6:	4420      	add	r0, r4
 8009bb8:	7843      	ldrb	r3, [r0, #1]
 8009bba:	f013 0308 	ands.w	r3, r3, #8
 8009bbe:	d130      	bne.n	8009c22 <_strtoul_l.isra.0+0x86>
 8009bc0:	2c2d      	cmp	r4, #45	; 0x2d
 8009bc2:	d130      	bne.n	8009c26 <_strtoul_l.isra.0+0x8a>
 8009bc4:	787c      	ldrb	r4, [r7, #1]
 8009bc6:	1cbd      	adds	r5, r7, #2
 8009bc8:	2101      	movs	r1, #1
 8009bca:	2e00      	cmp	r6, #0
 8009bcc:	d05c      	beq.n	8009c88 <_strtoul_l.isra.0+0xec>
 8009bce:	2e10      	cmp	r6, #16
 8009bd0:	d109      	bne.n	8009be6 <_strtoul_l.isra.0+0x4a>
 8009bd2:	2c30      	cmp	r4, #48	; 0x30
 8009bd4:	d107      	bne.n	8009be6 <_strtoul_l.isra.0+0x4a>
 8009bd6:	782b      	ldrb	r3, [r5, #0]
 8009bd8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009bdc:	2b58      	cmp	r3, #88	; 0x58
 8009bde:	d14e      	bne.n	8009c7e <_strtoul_l.isra.0+0xe2>
 8009be0:	786c      	ldrb	r4, [r5, #1]
 8009be2:	2610      	movs	r6, #16
 8009be4:	3502      	adds	r5, #2
 8009be6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bea:	2300      	movs	r3, #0
 8009bec:	fbb2 f2f6 	udiv	r2, r2, r6
 8009bf0:	fb06 fc02 	mul.w	ip, r6, r2
 8009bf4:	ea6f 0c0c 	mvn.w	ip, ip
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009bfe:	2f09      	cmp	r7, #9
 8009c00:	d817      	bhi.n	8009c32 <_strtoul_l.isra.0+0x96>
 8009c02:	463c      	mov	r4, r7
 8009c04:	42a6      	cmp	r6, r4
 8009c06:	dd23      	ble.n	8009c50 <_strtoul_l.isra.0+0xb4>
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	db1e      	blt.n	8009c4a <_strtoul_l.isra.0+0xae>
 8009c0c:	4282      	cmp	r2, r0
 8009c0e:	d31c      	bcc.n	8009c4a <_strtoul_l.isra.0+0xae>
 8009c10:	d101      	bne.n	8009c16 <_strtoul_l.isra.0+0x7a>
 8009c12:	45a4      	cmp	ip, r4
 8009c14:	db19      	blt.n	8009c4a <_strtoul_l.isra.0+0xae>
 8009c16:	fb00 4006 	mla	r0, r0, r6, r4
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c20:	e7eb      	b.n	8009bfa <_strtoul_l.isra.0+0x5e>
 8009c22:	462f      	mov	r7, r5
 8009c24:	e7c1      	b.n	8009baa <_strtoul_l.isra.0+0xe>
 8009c26:	2c2b      	cmp	r4, #43	; 0x2b
 8009c28:	bf04      	itt	eq
 8009c2a:	1cbd      	addeq	r5, r7, #2
 8009c2c:	787c      	ldrbeq	r4, [r7, #1]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	e7cb      	b.n	8009bca <_strtoul_l.isra.0+0x2e>
 8009c32:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009c36:	2f19      	cmp	r7, #25
 8009c38:	d801      	bhi.n	8009c3e <_strtoul_l.isra.0+0xa2>
 8009c3a:	3c37      	subs	r4, #55	; 0x37
 8009c3c:	e7e2      	b.n	8009c04 <_strtoul_l.isra.0+0x68>
 8009c3e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009c42:	2f19      	cmp	r7, #25
 8009c44:	d804      	bhi.n	8009c50 <_strtoul_l.isra.0+0xb4>
 8009c46:	3c57      	subs	r4, #87	; 0x57
 8009c48:	e7dc      	b.n	8009c04 <_strtoul_l.isra.0+0x68>
 8009c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c4e:	e7e5      	b.n	8009c1c <_strtoul_l.isra.0+0x80>
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	da09      	bge.n	8009c68 <_strtoul_l.isra.0+0xcc>
 8009c54:	2322      	movs	r3, #34	; 0x22
 8009c56:	f8c8 3000 	str.w	r3, [r8]
 8009c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c5e:	f1ba 0f00 	cmp.w	sl, #0
 8009c62:	d107      	bne.n	8009c74 <_strtoul_l.isra.0+0xd8>
 8009c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c68:	b101      	cbz	r1, 8009c6c <_strtoul_l.isra.0+0xd0>
 8009c6a:	4240      	negs	r0, r0
 8009c6c:	f1ba 0f00 	cmp.w	sl, #0
 8009c70:	d0f8      	beq.n	8009c64 <_strtoul_l.isra.0+0xc8>
 8009c72:	b10b      	cbz	r3, 8009c78 <_strtoul_l.isra.0+0xdc>
 8009c74:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009c78:	f8ca 9000 	str.w	r9, [sl]
 8009c7c:	e7f2      	b.n	8009c64 <_strtoul_l.isra.0+0xc8>
 8009c7e:	2430      	movs	r4, #48	; 0x30
 8009c80:	2e00      	cmp	r6, #0
 8009c82:	d1b0      	bne.n	8009be6 <_strtoul_l.isra.0+0x4a>
 8009c84:	2608      	movs	r6, #8
 8009c86:	e7ae      	b.n	8009be6 <_strtoul_l.isra.0+0x4a>
 8009c88:	2c30      	cmp	r4, #48	; 0x30
 8009c8a:	d0a4      	beq.n	8009bd6 <_strtoul_l.isra.0+0x3a>
 8009c8c:	260a      	movs	r6, #10
 8009c8e:	e7aa      	b.n	8009be6 <_strtoul_l.isra.0+0x4a>

08009c90 <_strtoul_r>:
 8009c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c92:	4c06      	ldr	r4, [pc, #24]	; (8009cac <_strtoul_r+0x1c>)
 8009c94:	4d06      	ldr	r5, [pc, #24]	; (8009cb0 <_strtoul_r+0x20>)
 8009c96:	6824      	ldr	r4, [r4, #0]
 8009c98:	6a24      	ldr	r4, [r4, #32]
 8009c9a:	2c00      	cmp	r4, #0
 8009c9c:	bf08      	it	eq
 8009c9e:	462c      	moveq	r4, r5
 8009ca0:	9400      	str	r4, [sp, #0]
 8009ca2:	f7ff ff7b 	bl	8009b9c <_strtoul_l.isra.0>
 8009ca6:	b003      	add	sp, #12
 8009ca8:	bd30      	pop	{r4, r5, pc}
 8009caa:	bf00      	nop
 8009cac:	20000188 	.word	0x20000188
 8009cb0:	200001ec 	.word	0x200001ec

08009cb4 <__submore>:
 8009cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb8:	460c      	mov	r4, r1
 8009cba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cc0:	4299      	cmp	r1, r3
 8009cc2:	d11d      	bne.n	8009d00 <__submore+0x4c>
 8009cc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009cc8:	f7fe fff0 	bl	8008cac <_malloc_r>
 8009ccc:	b918      	cbnz	r0, 8009cd6 <__submore+0x22>
 8009cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cda:	63a3      	str	r3, [r4, #56]	; 0x38
 8009cdc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009ce0:	6360      	str	r0, [r4, #52]	; 0x34
 8009ce2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009ce6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009cea:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009cee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009cf2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009cf6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009cfa:	6020      	str	r0, [r4, #0]
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	e7e8      	b.n	8009cd2 <__submore+0x1e>
 8009d00:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009d02:	0077      	lsls	r7, r6, #1
 8009d04:	463a      	mov	r2, r7
 8009d06:	f000 f84c 	bl	8009da2 <_realloc_r>
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d0de      	beq.n	8009cce <__submore+0x1a>
 8009d10:	eb00 0806 	add.w	r8, r0, r6
 8009d14:	4601      	mov	r1, r0
 8009d16:	4632      	mov	r2, r6
 8009d18:	4640      	mov	r0, r8
 8009d1a:	f7fe ff65 	bl	8008be8 <memcpy>
 8009d1e:	f8c4 8000 	str.w	r8, [r4]
 8009d22:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009d26:	e7e9      	b.n	8009cfc <__submore+0x48>

08009d28 <__locale_ctype_ptr_l>:
 8009d28:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009d2c:	4770      	bx	lr
	...

08009d30 <__locale_ctype_ptr>:
 8009d30:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <__locale_ctype_ptr+0x14>)
 8009d32:	4a05      	ldr	r2, [pc, #20]	; (8009d48 <__locale_ctype_ptr+0x18>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6a1b      	ldr	r3, [r3, #32]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bf08      	it	eq
 8009d3c:	4613      	moveq	r3, r2
 8009d3e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8009d42:	4770      	bx	lr
 8009d44:	20000188 	.word	0x20000188
 8009d48:	200001ec 	.word	0x200001ec

08009d4c <__ascii_mbtowc>:
 8009d4c:	b082      	sub	sp, #8
 8009d4e:	b901      	cbnz	r1, 8009d52 <__ascii_mbtowc+0x6>
 8009d50:	a901      	add	r1, sp, #4
 8009d52:	b142      	cbz	r2, 8009d66 <__ascii_mbtowc+0x1a>
 8009d54:	b14b      	cbz	r3, 8009d6a <__ascii_mbtowc+0x1e>
 8009d56:	7813      	ldrb	r3, [r2, #0]
 8009d58:	600b      	str	r3, [r1, #0]
 8009d5a:	7812      	ldrb	r2, [r2, #0]
 8009d5c:	1c10      	adds	r0, r2, #0
 8009d5e:	bf18      	it	ne
 8009d60:	2001      	movne	r0, #1
 8009d62:	b002      	add	sp, #8
 8009d64:	4770      	bx	lr
 8009d66:	4610      	mov	r0, r2
 8009d68:	e7fb      	b.n	8009d62 <__ascii_mbtowc+0x16>
 8009d6a:	f06f 0001 	mvn.w	r0, #1
 8009d6e:	e7f8      	b.n	8009d62 <__ascii_mbtowc+0x16>

08009d70 <memmove>:
 8009d70:	4288      	cmp	r0, r1
 8009d72:	b510      	push	{r4, lr}
 8009d74:	eb01 0302 	add.w	r3, r1, r2
 8009d78:	d807      	bhi.n	8009d8a <memmove+0x1a>
 8009d7a:	1e42      	subs	r2, r0, #1
 8009d7c:	4299      	cmp	r1, r3
 8009d7e:	d00a      	beq.n	8009d96 <memmove+0x26>
 8009d80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d84:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009d88:	e7f8      	b.n	8009d7c <memmove+0xc>
 8009d8a:	4283      	cmp	r3, r0
 8009d8c:	d9f5      	bls.n	8009d7a <memmove+0xa>
 8009d8e:	1881      	adds	r1, r0, r2
 8009d90:	1ad2      	subs	r2, r2, r3
 8009d92:	42d3      	cmn	r3, r2
 8009d94:	d100      	bne.n	8009d98 <memmove+0x28>
 8009d96:	bd10      	pop	{r4, pc}
 8009d98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d9c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009da0:	e7f7      	b.n	8009d92 <memmove+0x22>

08009da2 <_realloc_r>:
 8009da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da4:	4607      	mov	r7, r0
 8009da6:	4614      	mov	r4, r2
 8009da8:	460e      	mov	r6, r1
 8009daa:	b921      	cbnz	r1, 8009db6 <_realloc_r+0x14>
 8009dac:	4611      	mov	r1, r2
 8009dae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009db2:	f7fe bf7b 	b.w	8008cac <_malloc_r>
 8009db6:	b922      	cbnz	r2, 8009dc2 <_realloc_r+0x20>
 8009db8:	f7fe ff2a 	bl	8008c10 <_free_r>
 8009dbc:	4625      	mov	r5, r4
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dc2:	f000 f821 	bl	8009e08 <_malloc_usable_size_r>
 8009dc6:	42a0      	cmp	r0, r4
 8009dc8:	d20f      	bcs.n	8009dea <_realloc_r+0x48>
 8009dca:	4621      	mov	r1, r4
 8009dcc:	4638      	mov	r0, r7
 8009dce:	f7fe ff6d 	bl	8008cac <_malloc_r>
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d0f2      	beq.n	8009dbe <_realloc_r+0x1c>
 8009dd8:	4631      	mov	r1, r6
 8009dda:	4622      	mov	r2, r4
 8009ddc:	f7fe ff04 	bl	8008be8 <memcpy>
 8009de0:	4631      	mov	r1, r6
 8009de2:	4638      	mov	r0, r7
 8009de4:	f7fe ff14 	bl	8008c10 <_free_r>
 8009de8:	e7e9      	b.n	8009dbe <_realloc_r+0x1c>
 8009dea:	4635      	mov	r5, r6
 8009dec:	e7e7      	b.n	8009dbe <_realloc_r+0x1c>

08009dee <__ascii_wctomb>:
 8009dee:	b149      	cbz	r1, 8009e04 <__ascii_wctomb+0x16>
 8009df0:	2aff      	cmp	r2, #255	; 0xff
 8009df2:	bf85      	ittet	hi
 8009df4:	238a      	movhi	r3, #138	; 0x8a
 8009df6:	6003      	strhi	r3, [r0, #0]
 8009df8:	700a      	strbls	r2, [r1, #0]
 8009dfa:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009dfe:	bf98      	it	ls
 8009e00:	2001      	movls	r0, #1
 8009e02:	4770      	bx	lr
 8009e04:	4608      	mov	r0, r1
 8009e06:	4770      	bx	lr

08009e08 <_malloc_usable_size_r>:
 8009e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e0c:	1f18      	subs	r0, r3, #4
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	bfbc      	itt	lt
 8009e12:	580b      	ldrlt	r3, [r1, r0]
 8009e14:	18c0      	addlt	r0, r0, r3
 8009e16:	4770      	bx	lr

08009e18 <_init>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	bf00      	nop
 8009e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1e:	bc08      	pop	{r3}
 8009e20:	469e      	mov	lr, r3
 8009e22:	4770      	bx	lr

08009e24 <_fini>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	bf00      	nop
 8009e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2a:	bc08      	pop	{r3}
 8009e2c:	469e      	mov	lr, r3
 8009e2e:	4770      	bx	lr
