
STM32_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800ce6c  0800ce6c  0001ce6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d354  0800d354  00020760  2**0
                  CONTENTS
  4 .ARM          00000008  0800d354  0800d354  0001d354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d35c  0800d35c  00020760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d35c  0800d35c  0001d35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d360  0800d360  0001d360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000760  20000000  0800d364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011d90  20000760  0800dac4  00020760  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200124f0  0800dac4  000224f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020760  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018690  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a23  00000000  00000000  00038e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec8  00000000  00000000  0003c848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  0003d710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002488d  00000000  00000000  0003e430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010b41  00000000  00000000  00062cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7c87  00000000  00000000  000737fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0013b485  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000468c  00000000  00000000  0013b580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000760 	.word	0x20000760
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce54 	.word	0x0800ce54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000764 	.word	0x20000764
 80001cc:	0800ce54 	.word	0x0800ce54

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_uldivmod>:
 80006b8:	b953      	cbnz	r3, 80006d0 <__aeabi_uldivmod+0x18>
 80006ba:	b94a      	cbnz	r2, 80006d0 <__aeabi_uldivmod+0x18>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bf08      	it	eq
 80006c0:	2800      	cmpeq	r0, #0
 80006c2:	bf1c      	itt	ne
 80006c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80006c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006cc:	f000 b972 	b.w	80009b4 <__aeabi_idiv0>
 80006d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d8:	f000 f806 	bl	80006e8 <__udivmoddi4>
 80006dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr

080006e8 <__udivmoddi4>:
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	9e08      	ldr	r6, [sp, #32]
 80006ee:	4604      	mov	r4, r0
 80006f0:	4688      	mov	r8, r1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d14b      	bne.n	800078e <__udivmoddi4+0xa6>
 80006f6:	428a      	cmp	r2, r1
 80006f8:	4615      	mov	r5, r2
 80006fa:	d967      	bls.n	80007cc <__udivmoddi4+0xe4>
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	b14a      	cbz	r2, 8000716 <__udivmoddi4+0x2e>
 8000702:	f1c2 0720 	rsb	r7, r2, #32
 8000706:	fa01 f302 	lsl.w	r3, r1, r2
 800070a:	fa20 f707 	lsr.w	r7, r0, r7
 800070e:	4095      	lsls	r5, r2
 8000710:	ea47 0803 	orr.w	r8, r7, r3
 8000714:	4094      	lsls	r4, r2
 8000716:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800071a:	0c23      	lsrs	r3, r4, #16
 800071c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000720:	fa1f fc85 	uxth.w	ip, r5
 8000724:	fb0e 8817 	mls	r8, lr, r7, r8
 8000728:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800072c:	fb07 f10c 	mul.w	r1, r7, ip
 8000730:	4299      	cmp	r1, r3
 8000732:	d909      	bls.n	8000748 <__udivmoddi4+0x60>
 8000734:	18eb      	adds	r3, r5, r3
 8000736:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800073a:	f080 811b 	bcs.w	8000974 <__udivmoddi4+0x28c>
 800073e:	4299      	cmp	r1, r3
 8000740:	f240 8118 	bls.w	8000974 <__udivmoddi4+0x28c>
 8000744:	3f02      	subs	r7, #2
 8000746:	442b      	add	r3, r5
 8000748:	1a5b      	subs	r3, r3, r1
 800074a:	b2a4      	uxth	r4, r4
 800074c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000750:	fb0e 3310 	mls	r3, lr, r0, r3
 8000754:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000758:	fb00 fc0c 	mul.w	ip, r0, ip
 800075c:	45a4      	cmp	ip, r4
 800075e:	d909      	bls.n	8000774 <__udivmoddi4+0x8c>
 8000760:	192c      	adds	r4, r5, r4
 8000762:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000766:	f080 8107 	bcs.w	8000978 <__udivmoddi4+0x290>
 800076a:	45a4      	cmp	ip, r4
 800076c:	f240 8104 	bls.w	8000978 <__udivmoddi4+0x290>
 8000770:	3802      	subs	r0, #2
 8000772:	442c      	add	r4, r5
 8000774:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000778:	eba4 040c 	sub.w	r4, r4, ip
 800077c:	2700      	movs	r7, #0
 800077e:	b11e      	cbz	r6, 8000788 <__udivmoddi4+0xa0>
 8000780:	40d4      	lsrs	r4, r2
 8000782:	2300      	movs	r3, #0
 8000784:	e9c6 4300 	strd	r4, r3, [r6]
 8000788:	4639      	mov	r1, r7
 800078a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078e:	428b      	cmp	r3, r1
 8000790:	d909      	bls.n	80007a6 <__udivmoddi4+0xbe>
 8000792:	2e00      	cmp	r6, #0
 8000794:	f000 80eb 	beq.w	800096e <__udivmoddi4+0x286>
 8000798:	2700      	movs	r7, #0
 800079a:	e9c6 0100 	strd	r0, r1, [r6]
 800079e:	4638      	mov	r0, r7
 80007a0:	4639      	mov	r1, r7
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f783 	clz	r7, r3
 80007aa:	2f00      	cmp	r7, #0
 80007ac:	d147      	bne.n	800083e <__udivmoddi4+0x156>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0xd0>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80fa 	bhi.w	80009ac <__udivmoddi4+0x2c4>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb61 0303 	sbc.w	r3, r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	4698      	mov	r8, r3
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d0e0      	beq.n	8000788 <__udivmoddi4+0xa0>
 80007c6:	e9c6 4800 	strd	r4, r8, [r6]
 80007ca:	e7dd      	b.n	8000788 <__udivmoddi4+0xa0>
 80007cc:	b902      	cbnz	r2, 80007d0 <__udivmoddi4+0xe8>
 80007ce:	deff      	udf	#255	; 0xff
 80007d0:	fab2 f282 	clz	r2, r2
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	f040 808f 	bne.w	80008f8 <__udivmoddi4+0x210>
 80007da:	1b49      	subs	r1, r1, r5
 80007dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007e0:	fa1f f885 	uxth.w	r8, r5
 80007e4:	2701      	movs	r7, #1
 80007e6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007ea:	0c23      	lsrs	r3, r4, #16
 80007ec:	fb0e 111c 	mls	r1, lr, ip, r1
 80007f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f4:	fb08 f10c 	mul.w	r1, r8, ip
 80007f8:	4299      	cmp	r1, r3
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0x124>
 80007fc:	18eb      	adds	r3, r5, r3
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0x122>
 8000804:	4299      	cmp	r1, r3
 8000806:	f200 80cd 	bhi.w	80009a4 <__udivmoddi4+0x2bc>
 800080a:	4684      	mov	ip, r0
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1410 	mls	r4, lr, r0, r1
 8000818:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x14c>
 8000824:	192c      	adds	r4, r5, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x14a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80b6 	bhi.w	800099e <__udivmoddi4+0x2b6>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e79f      	b.n	800077e <__udivmoddi4+0x96>
 800083e:	f1c7 0c20 	rsb	ip, r7, #32
 8000842:	40bb      	lsls	r3, r7
 8000844:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000848:	ea4e 0e03 	orr.w	lr, lr, r3
 800084c:	fa01 f407 	lsl.w	r4, r1, r7
 8000850:	fa20 f50c 	lsr.w	r5, r0, ip
 8000854:	fa21 f30c 	lsr.w	r3, r1, ip
 8000858:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800085c:	4325      	orrs	r5, r4
 800085e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000862:	0c2c      	lsrs	r4, r5, #16
 8000864:	fb08 3319 	mls	r3, r8, r9, r3
 8000868:	fa1f fa8e 	uxth.w	sl, lr
 800086c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000870:	fb09 f40a 	mul.w	r4, r9, sl
 8000874:	429c      	cmp	r4, r3
 8000876:	fa02 f207 	lsl.w	r2, r2, r7
 800087a:	fa00 f107 	lsl.w	r1, r0, r7
 800087e:	d90b      	bls.n	8000898 <__udivmoddi4+0x1b0>
 8000880:	eb1e 0303 	adds.w	r3, lr, r3
 8000884:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000888:	f080 8087 	bcs.w	800099a <__udivmoddi4+0x2b2>
 800088c:	429c      	cmp	r4, r3
 800088e:	f240 8084 	bls.w	800099a <__udivmoddi4+0x2b2>
 8000892:	f1a9 0902 	sub.w	r9, r9, #2
 8000896:	4473      	add	r3, lr
 8000898:	1b1b      	subs	r3, r3, r4
 800089a:	b2ad      	uxth	r5, r5
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3310 	mls	r3, r8, r0, r3
 80008a4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80008a8:	fb00 fa0a 	mul.w	sl, r0, sl
 80008ac:	45a2      	cmp	sl, r4
 80008ae:	d908      	bls.n	80008c2 <__udivmoddi4+0x1da>
 80008b0:	eb1e 0404 	adds.w	r4, lr, r4
 80008b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008b8:	d26b      	bcs.n	8000992 <__udivmoddi4+0x2aa>
 80008ba:	45a2      	cmp	sl, r4
 80008bc:	d969      	bls.n	8000992 <__udivmoddi4+0x2aa>
 80008be:	3802      	subs	r0, #2
 80008c0:	4474      	add	r4, lr
 80008c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008c6:	fba0 8902 	umull	r8, r9, r0, r2
 80008ca:	eba4 040a 	sub.w	r4, r4, sl
 80008ce:	454c      	cmp	r4, r9
 80008d0:	46c2      	mov	sl, r8
 80008d2:	464b      	mov	r3, r9
 80008d4:	d354      	bcc.n	8000980 <__udivmoddi4+0x298>
 80008d6:	d051      	beq.n	800097c <__udivmoddi4+0x294>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d069      	beq.n	80009b0 <__udivmoddi4+0x2c8>
 80008dc:	ebb1 050a 	subs.w	r5, r1, sl
 80008e0:	eb64 0403 	sbc.w	r4, r4, r3
 80008e4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008e8:	40fd      	lsrs	r5, r7
 80008ea:	40fc      	lsrs	r4, r7
 80008ec:	ea4c 0505 	orr.w	r5, ip, r5
 80008f0:	e9c6 5400 	strd	r5, r4, [r6]
 80008f4:	2700      	movs	r7, #0
 80008f6:	e747      	b.n	8000788 <__udivmoddi4+0xa0>
 80008f8:	f1c2 0320 	rsb	r3, r2, #32
 80008fc:	fa20 f703 	lsr.w	r7, r0, r3
 8000900:	4095      	lsls	r5, r2
 8000902:	fa01 f002 	lsl.w	r0, r1, r2
 8000906:	fa21 f303 	lsr.w	r3, r1, r3
 800090a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800090e:	4338      	orrs	r0, r7
 8000910:	0c01      	lsrs	r1, r0, #16
 8000912:	fbb3 f7fe 	udiv	r7, r3, lr
 8000916:	fa1f f885 	uxth.w	r8, r5
 800091a:	fb0e 3317 	mls	r3, lr, r7, r3
 800091e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000922:	fb07 f308 	mul.w	r3, r7, r8
 8000926:	428b      	cmp	r3, r1
 8000928:	fa04 f402 	lsl.w	r4, r4, r2
 800092c:	d907      	bls.n	800093e <__udivmoddi4+0x256>
 800092e:	1869      	adds	r1, r5, r1
 8000930:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000934:	d22f      	bcs.n	8000996 <__udivmoddi4+0x2ae>
 8000936:	428b      	cmp	r3, r1
 8000938:	d92d      	bls.n	8000996 <__udivmoddi4+0x2ae>
 800093a:	3f02      	subs	r7, #2
 800093c:	4429      	add	r1, r5
 800093e:	1acb      	subs	r3, r1, r3
 8000940:	b281      	uxth	r1, r0
 8000942:	fbb3 f0fe 	udiv	r0, r3, lr
 8000946:	fb0e 3310 	mls	r3, lr, r0, r3
 800094a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800094e:	fb00 f308 	mul.w	r3, r0, r8
 8000952:	428b      	cmp	r3, r1
 8000954:	d907      	bls.n	8000966 <__udivmoddi4+0x27e>
 8000956:	1869      	adds	r1, r5, r1
 8000958:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800095c:	d217      	bcs.n	800098e <__udivmoddi4+0x2a6>
 800095e:	428b      	cmp	r3, r1
 8000960:	d915      	bls.n	800098e <__udivmoddi4+0x2a6>
 8000962:	3802      	subs	r0, #2
 8000964:	4429      	add	r1, r5
 8000966:	1ac9      	subs	r1, r1, r3
 8000968:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800096c:	e73b      	b.n	80007e6 <__udivmoddi4+0xfe>
 800096e:	4637      	mov	r7, r6
 8000970:	4630      	mov	r0, r6
 8000972:	e709      	b.n	8000788 <__udivmoddi4+0xa0>
 8000974:	4607      	mov	r7, r0
 8000976:	e6e7      	b.n	8000748 <__udivmoddi4+0x60>
 8000978:	4618      	mov	r0, r3
 800097a:	e6fb      	b.n	8000774 <__udivmoddi4+0x8c>
 800097c:	4541      	cmp	r1, r8
 800097e:	d2ab      	bcs.n	80008d8 <__udivmoddi4+0x1f0>
 8000980:	ebb8 0a02 	subs.w	sl, r8, r2
 8000984:	eb69 020e 	sbc.w	r2, r9, lr
 8000988:	3801      	subs	r0, #1
 800098a:	4613      	mov	r3, r2
 800098c:	e7a4      	b.n	80008d8 <__udivmoddi4+0x1f0>
 800098e:	4660      	mov	r0, ip
 8000990:	e7e9      	b.n	8000966 <__udivmoddi4+0x27e>
 8000992:	4618      	mov	r0, r3
 8000994:	e795      	b.n	80008c2 <__udivmoddi4+0x1da>
 8000996:	4667      	mov	r7, ip
 8000998:	e7d1      	b.n	800093e <__udivmoddi4+0x256>
 800099a:	4681      	mov	r9, r0
 800099c:	e77c      	b.n	8000898 <__udivmoddi4+0x1b0>
 800099e:	3802      	subs	r0, #2
 80009a0:	442c      	add	r4, r5
 80009a2:	e747      	b.n	8000834 <__udivmoddi4+0x14c>
 80009a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009a8:	442b      	add	r3, r5
 80009aa:	e72f      	b.n	800080c <__udivmoddi4+0x124>
 80009ac:	4638      	mov	r0, r7
 80009ae:	e708      	b.n	80007c2 <__udivmoddi4+0xda>
 80009b0:	4637      	mov	r7, r6
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0xa0>

080009b4 <__aeabi_idiv0>:
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	f5ad 4d81 	sub.w	sp, sp, #16512	; 0x4080
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t Task = WAIT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80009c8:	f102 0207 	add.w	r2, r2, #7
 80009cc:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f000 ff29 	bl	8001824 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f901 	bl	8000bd8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 fa6f 	bl	8000eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80009da:	f000 f9fb 	bl	8000dd4 <MX_DMA_Init>
  MX_I2S2_Init();
 80009de:	f000 f999 	bl	8000d14 <MX_I2S2_Init>
  MX_USB_DEVICE_Init();
 80009e2:	f007 fc9d 	bl	8008320 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80009e6:	f000 f979 	bl	8000cdc <MX_CRC_Init>
  MX_I2S3_Init();
 80009ea:	f000 f9c3 	bl	8000d74 <MX_I2S3_Init>
  MX_PDM2PCM_Init();
 80009ee:	f007 fc6d 	bl	80082cc <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */
	char cmd[APP_RX_DATA_SIZE];
	HAL_Delay(1500);
 80009f2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80009f6:	f000 ff87 	bl	8001908 <HAL_Delay>
	CDC_Clear();
 80009fa:	f008 f823 	bl	8008a44 <CDC_Clear>
	_printf("\r\n               ================");
 80009fe:	4860      	ldr	r0, [pc, #384]	; (8000b80 <main+0x1c8>)
 8000a00:	f007 febc 	bl	800877c <_printf>
	_printf("\r\n               *** DSP V1.0 ***");
 8000a04:	485f      	ldr	r0, [pc, #380]	; (8000b84 <main+0x1cc>)
 8000a06:	f007 feb9 	bl	800877c <_printf>
	_printf("\r\n               ================\r\n\n");
 8000a0a:	485f      	ldr	r0, [pc, #380]	; (8000b88 <main+0x1d0>)
 8000a0c:	f007 feb6 	bl	800877c <_printf>
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET)
 8000a10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a14:	485d      	ldr	r0, [pc, #372]	; (8000b8c <main+0x1d4>)
 8000a16:	f001 fdcf 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d103      	bne.n	8000a28 <main+0x70>
	{	_cprintf("/!\\ ERROR : Hardware initialization problem !\r\n");
 8000a20:	485b      	ldr	r0, [pc, #364]	; (8000b90 <main+0x1d8>)
 8000a22:	f007 fed7 	bl	80087d4 <_cprintf>
 8000a26:	e002      	b.n	8000a2e <main+0x76>
	}else
	{	_cprintf("Hardware initialization done\r\n");
 8000a28:	485a      	ldr	r0, [pc, #360]	; (8000b94 <main+0x1dc>)
 8000a2a:	f007 fed3 	bl	80087d4 <_cprintf>
	}

	/* Start I2S communiation */
	if((HAL_I2SEx_TransmitReceive_DMA(&hi2s2, I2S2_txBuf, I2S2_rxBuf, I2S2_BUFLEN / 2) != HAL_OK)
 8000a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a32:	4a59      	ldr	r2, [pc, #356]	; (8000b98 <main+0x1e0>)
 8000a34:	4959      	ldr	r1, [pc, #356]	; (8000b9c <main+0x1e4>)
 8000a36:	485a      	ldr	r0, [pc, #360]	; (8000ba0 <main+0x1e8>)
 8000a38:	f002 f956 	bl	8002ce8 <HAL_I2SEx_TransmitReceive_DMA>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d108      	bne.n	8000a54 <main+0x9c>
			|| (HAL_I2S_Receive_DMA(&hi2s3, I2S3_rxBuf, I2S3_BUFLEN) != HAL_OK))
 8000a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a46:	4957      	ldr	r1, [pc, #348]	; (8000ba4 <main+0x1ec>)
 8000a48:	4857      	ldr	r0, [pc, #348]	; (8000ba8 <main+0x1f0>)
 8000a4a:	f001 ff41 	bl	80028d0 <HAL_I2S_Receive_DMA>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <main+0xa4>
	{	_cprintf("/!\\ ERROR : Unable to launch I2S DMA transfert !\r\n");
 8000a54:	4855      	ldr	r0, [pc, #340]	; (8000bac <main+0x1f4>)
 8000a56:	f007 febd 	bl	80087d4 <_cprintf>
 8000a5a:	e002      	b.n	8000a62 <main+0xaa>
	}else
	{	_cprintf("I2S communication established\r\n");
 8000a5c:	4854      	ldr	r0, [pc, #336]	; (8000bb0 <main+0x1f8>)
 8000a5e:	f007 feb9 	bl	80087d4 <_cprintf>
	}
	CDC_rxPrintf_ON();
 8000a62:	f008 f819 	bl	8008a98 <CDC_rxPrintf_ON>
	{
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

		/* Command from Port COM available */
		if (CDC_RX_DATA_PENDING)
 8000a66:	4b53      	ldr	r3, [pc, #332]	; (8000bb4 <main+0x1fc>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d05d      	beq.n	8000b2c <main+0x174>
		{
			/* Read command */
			_scanf("%s", cmd);
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	3b04      	subs	r3, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	484f      	ldr	r0, [pc, #316]	; (8000bb8 <main+0x200>)
 8000a7a:	f007 ff37 	bl	80088ec <_scanf>
			CDC_RX_DATA_PENDING = FALSE;
 8000a7e:	4b4d      	ldr	r3, [pc, #308]	; (8000bb4 <main+0x1fc>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]

			/* Execute command */
			if (!strcmp(cmd, "clear"))
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	3b04      	subs	r3, #4
 8000a8a:	494c      	ldr	r1, [pc, #304]	; (8000bbc <main+0x204>)
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fb9f 	bl	80001d0 <strcmp>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <main+0xe6>
			{	CDC_Clear();
 8000a98:	f007 ffd4 	bl	8008a44 <CDC_Clear>
 8000a9c:	e046      	b.n	8000b2c <main+0x174>
			}
			else if((!strcmp(cmd, "q") || !strcmp(cmd, "Q")) && Task != WAIT)
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	4946      	ldr	r1, [pc, #280]	; (8000bc0 <main+0x208>)
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fb92 	bl	80001d0 <strcmp>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d009      	beq.n	8000ac6 <main+0x10e>
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	4942      	ldr	r1, [pc, #264]	; (8000bc4 <main+0x20c>)
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fb88 	bl	80001d0 <strcmp>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d112      	bne.n	8000aec <main+0x134>
 8000ac6:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000aca:	f103 0307 	add.w	r3, r3, #7
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00b      	beq.n	8000aec <main+0x134>
			{
				Task = WAIT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8000ada:	f102 0207 	add.w	r2, r2, #7
 8000ade:	7013      	strb	r3, [r2, #0]
				_cprintf("Process stopped by user\r\n");
 8000ae0:	4839      	ldr	r0, [pc, #228]	; (8000bc8 <main+0x210>)
 8000ae2:	f007 fe77 	bl	80087d4 <_cprintf>
				CDC_rxPrintf_ON();
 8000ae6:	f007 ffd7 	bl	8008a98 <CDC_rxPrintf_ON>
 8000aea:	e01f      	b.n	8000b2c <main+0x174>
			}
			else if (!strcmp(cmd, "process") && Task != PROCESS)
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	3b04      	subs	r3, #4
 8000af2:	4936      	ldr	r1, [pc, #216]	; (8000bcc <main+0x214>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fb6b 	bl	80001d0 <strcmp>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d112      	bne.n	8000b26 <main+0x16e>
 8000b00:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000b04:	f103 0307 	add.w	r3, r3, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d00b      	beq.n	8000b26 <main+0x16e>
			{
				Task = PROCESS;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8000b14:	f102 0207 	add.w	r2, r2, #7
 8000b18:	7013      	strb	r3, [r2, #0]
				CDC_rxPrintf_OFF();
 8000b1a:	f007 ffdd 	bl	8008ad8 <CDC_rxPrintf_OFF>
				_cprintf("Processing, type \"q\" to stop\r\n");
 8000b1e:	482c      	ldr	r0, [pc, #176]	; (8000bd0 <main+0x218>)
 8000b20:	f007 fe58 	bl	80087d4 <_cprintf>
 8000b24:	e002      	b.n	8000b2c <main+0x174>
			}
			else
			{
				_cprintf("/!\\ Unknown Command !\r\n");
 8000b26:	482b      	ldr	r0, [pc, #172]	; (8000bd4 <main+0x21c>)
 8000b28:	f007 fe54 	bl	80087d4 <_cprintf>
			}
		}

		/* Execute selected task */
		switch(Task)
 8000b2c:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000b30:	f103 0307 	add.w	r3, r3, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d000      	beq.n	8000b3c <main+0x184>
					PMODI2S2_stereoWq31(Lbuf, Rbuf);
					_cspin();
					break;
				}
			default:
				break;
 8000b3a:	e01a      	b.n	8000b72 <main+0x1ba>
					PMODI2S2_stereoRq31(Lbuf, Rbuf);
 8000b3c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000b40:	3a04      	subs	r2, #4
 8000b42:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000b46:	f103 0308 	add.w	r3, r3, #8
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fb20 	bl	8001194 <PMODI2S2_stereoRq31>
					PMODI2S2_stereoWq31(Lbuf, Rbuf);
 8000b54:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000b58:	3a04      	subs	r2, #4
 8000b5a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000b5e:	f103 0308 	add.w	r3, r3, #8
 8000b62:	3b04      	subs	r3, #4
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fb66 	bl	8001238 <PMODI2S2_stereoWq31>
					_cspin();
 8000b6c:	f007 fef8 	bl	8008960 <_cspin>
					break;
 8000b70:	bf00      	nop
		}

		/* Toggle Led and update chrono on port COM */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000b72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <main+0x1d4>)
 8000b78:	f001 fd4f 	bl	800261a <HAL_GPIO_TogglePin>
		if (CDC_RX_DATA_PENDING)
 8000b7c:	e773      	b.n	8000a66 <main+0xae>
 8000b7e:	bf00      	nop
 8000b80:	0800ce6c 	.word	0x0800ce6c
 8000b84:	0800ce90 	.word	0x0800ce90
 8000b88:	0800ceb4 	.word	0x0800ceb4
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	0800cedc 	.word	0x0800cedc
 8000b94:	0800cf0c 	.word	0x0800cf0c
 8000b98:	20008900 	.word	0x20008900
 8000b9c:	20000900 	.word	0x20000900
 8000ba0:	20011a28 	.word	0x20011a28
 8000ba4:	20010904 	.word	0x20010904
 8000ba8:	20011a70 	.word	0x20011a70
 8000bac:	0800cf2c 	.word	0x0800cf2c
 8000bb0:	0800cf60 	.word	0x0800cf60
 8000bb4:	20000786 	.word	0x20000786
 8000bb8:	0800cf80 	.word	0x0800cf80
 8000bbc:	0800cf84 	.word	0x0800cf84
 8000bc0:	0800cf8c 	.word	0x0800cf8c
 8000bc4:	0800cf90 	.word	0x0800cf90
 8000bc8:	0800cf94 	.word	0x0800cf94
 8000bcc:	0800cfb0 	.word	0x0800cfb0
 8000bd0:	0800cfb8 	.word	0x0800cfb8
 8000bd4:	0800cfd8 	.word	0x0800cfd8

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b098      	sub	sp, #96	; 0x60
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000be2:	2230      	movs	r2, #48	; 0x30
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f00a fafb 	bl	800b1e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <SystemClock_Config+0xfc>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a30      	ldr	r2, [pc, #192]	; (8000cd4 <SystemClock_Config+0xfc>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <SystemClock_Config+0xfc>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <SystemClock_Config+0x100>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a2a      	ldr	r2, [pc, #168]	; (8000cd8 <SystemClock_Config+0x100>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <SystemClock_Config+0x100>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c42:	2301      	movs	r3, #1
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c56:	2308      	movs	r3, #8
 8000c58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c5a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c5e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c64:	2307      	movs	r3, #7
 8000c66:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fe83 	bl	8004978 <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c78:	f000 fb3e 	bl	80012f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c80:	2302      	movs	r3, #2
 8000c82:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	2105      	movs	r1, #5
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f004 f8dc 	bl	8004e58 <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ca6:	f000 fb27 	bl	80012f8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000caa:	2301      	movs	r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cae:	23c0      	movs	r3, #192	; 0xc0
 8000cb0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f004 fa96 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000cc6:	f000 fb17 	bl	80012f8 <Error_Handler>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3760      	adds	r7, #96	; 0x60
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40007000 	.word	0x40007000

08000cdc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MX_CRC_Init+0x30>)
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <MX_CRC_Init+0x34>)
 8000ce4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ce6:	4809      	ldr	r0, [pc, #36]	; (8000d0c <MX_CRC_Init+0x30>)
 8000ce8:	f000 ff41 	bl	8001b6e <HAL_CRC_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000cf2:	f000 fb01 	bl	80012f8 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <MX_CRC_Init+0x30>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <MX_CRC_Init+0x30>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f042 0201 	orr.w	r2, r2, #1
 8000d04:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200008f8 	.word	0x200008f8
 8000d10:	40023000 	.word	0x40023000

08000d14 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2S2_Init 0 */
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */
  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MX_I2S2_Init+0x54>)
 8000d1a:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <MX_I2S2_Init+0x58>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_I2S2_Init+0x54>)
 8000d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d24:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <MX_I2S2_Init+0x54>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_I2S2_Init+0x54>)
 8000d2e:	2203      	movs	r2, #3
 8000d30:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <MX_I2S2_Init+0x54>)
 8000d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d38:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_I2S2_Init+0x54>)
 8000d3c:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <MX_I2S2_Init+0x5c>)
 8000d3e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_I2S2_Init+0x54>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MX_I2S2_Init+0x54>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_I2S2_Init+0x54>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_I2S2_Init+0x54>)
 8000d54:	f001 fc7c 	bl	8002650 <HAL_I2S_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000d5e:	f000 facb 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */
  /* USER CODE END I2S2_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20011a28 	.word	0x20011a28
 8000d6c:	40003800 	.word	0x40003800
 8000d70:	00017700 	.word	0x00017700

08000d74 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000d7a:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <MX_I2S3_Init+0x58>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000d80:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d84:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_MSB;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000d88:	2210      	movs	r2, #16
 8000d8a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d98:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <MX_I2S3_Init+0x5c>)
 8000d9e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_I2S3_Init+0x54>)
 8000db4:	f001 fc4c 	bl	8002650 <HAL_I2S_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000dbe:	f000 fa9b 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20011a70 	.word	0x20011a70
 8000dcc:	40003c00 	.word	0x40003c00
 8000dd0:	00017700 	.word	0x00017700

08000dd4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b33      	ldr	r3, [pc, #204]	; (8000eac <MX_DMA_Init+0xd8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a32      	ldr	r2, [pc, #200]	; (8000eac <MX_DMA_Init+0xd8>)
 8000de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b30      	ldr	r3, [pc, #192]	; (8000eac <MX_DMA_Init+0xd8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <MX_DMA_Init+0xd8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a2b      	ldr	r2, [pc, #172]	; (8000eac <MX_DMA_Init+0xd8>)
 8000e00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b29      	ldr	r3, [pc, #164]	; (8000eac <MX_DMA_Init+0xd8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e14:	4a27      	ldr	r2, [pc, #156]	; (8000eb4 <MX_DMA_Init+0xe0>)
 8000e16:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000e18:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000e24:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e32:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e4e:	2204      	movs	r2, #4
 8000e50:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e54:	2203      	movs	r2, #3
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000e64:	4812      	ldr	r0, [pc, #72]	; (8000eb0 <MX_DMA_Init+0xdc>)
 8000e66:	f000 fe9f 	bl	8001ba8 <HAL_DMA_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_DMA_Init+0xa0>
  {
    Error_Handler( );
 8000e70:	f000 fa42 	bl	80012f8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	200b      	movs	r0, #11
 8000e7a:	f000 fe42 	bl	8001b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e7e:	200b      	movs	r0, #11
 8000e80:	f000 fe5b 	bl	8001b3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	200e      	movs	r0, #14
 8000e8a:	f000 fe3a 	bl	8001b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e8e:	200e      	movs	r0, #14
 8000e90:	f000 fe53 	bl	8001b3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2100      	movs	r1, #0
 8000e98:	200f      	movs	r0, #15
 8000e9a:	f000 fe32 	bl	8001b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f000 fe4b 	bl	8001b3a <HAL_NVIC_EnableIRQ>

}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	20000898 	.word	0x20000898
 8000eb4:	40026410 	.word	0x40026410

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	; 0x30
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	4b71      	ldr	r3, [pc, #452]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a70      	ldr	r2, [pc, #448]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b6e      	ldr	r3, [pc, #440]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	61bb      	str	r3, [r7, #24]
 8000ee8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	4b6a      	ldr	r3, [pc, #424]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a69      	ldr	r2, [pc, #420]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b67      	ldr	r3, [pc, #412]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b63      	ldr	r3, [pc, #396]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a62      	ldr	r2, [pc, #392]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b60      	ldr	r3, [pc, #384]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b5c      	ldr	r3, [pc, #368]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a5b      	ldr	r2, [pc, #364]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b59      	ldr	r3, [pc, #356]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b55      	ldr	r3, [pc, #340]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a54      	ldr	r2, [pc, #336]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b52      	ldr	r3, [pc, #328]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b4e      	ldr	r3, [pc, #312]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b4b      	ldr	r3, [pc, #300]	; (8001098 <MX_GPIO_Init+0x1e0>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4848      	ldr	r0, [pc, #288]	; (800109c <MX_GPIO_Init+0x1e4>)
 8000f7c:	f001 fb34 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2101      	movs	r1, #1
 8000f84:	4846      	ldr	r0, [pc, #280]	; (80010a0 <MX_GPIO_Init+0x1e8>)
 8000f86:	f001 fb2f 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000f90:	4844      	ldr	r0, [pc, #272]	; (80010a4 <MX_GPIO_Init+0x1ec>)
 8000f92:	f001 fb29 	bl	80025e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f96:	2308      	movs	r3, #8
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	483b      	ldr	r0, [pc, #236]	; (800109c <MX_GPIO_Init+0x1e4>)
 8000fae:	f001 f969 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4835      	ldr	r0, [pc, #212]	; (80010a0 <MX_GPIO_Init+0x1e8>)
 8000fca:	f001 f95b 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fd2:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <MX_GPIO_Init+0x1f0>)
 8000fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4832      	ldr	r0, [pc, #200]	; (80010ac <MX_GPIO_Init+0x1f4>)
 8000fe2:	f001 f94f 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000fe6:	23e0      	movs	r3, #224	; 0xe0
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	482a      	ldr	r0, [pc, #168]	; (80010ac <MX_GPIO_Init+0x1f4>)
 8001002:	f001 f93f 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001006:	2304      	movs	r3, #4
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	4825      	ldr	r0, [pc, #148]	; (80010b0 <MX_GPIO_Init+0x1f8>)
 800101a:	f001 f933 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800101e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001022:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	481b      	ldr	r0, [pc, #108]	; (80010a4 <MX_GPIO_Init+0x1ec>)
 8001038:	f001 f924 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800103c:	2320      	movs	r3, #32
 800103e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	4815      	ldr	r0, [pc, #84]	; (80010a4 <MX_GPIO_Init+0x1ec>)
 8001050:	f001 f918 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001054:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105a:	2312      	movs	r3, #18
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105e:	2301      	movs	r3, #1
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001066:	2304      	movs	r3, #4
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	480f      	ldr	r0, [pc, #60]	; (80010b0 <MX_GPIO_Init+0x1f8>)
 8001072:	f001 f907 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001076:	2302      	movs	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_GPIO_Init+0x1f0>)
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_GPIO_Init+0x1e4>)
 800108a:	f001 f8fb 	bl	8002284 <HAL_GPIO_Init>

}
 800108e:	bf00      	nop
 8001090:	3730      	adds	r7, #48	; 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40021000 	.word	0x40021000
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	10120000 	.word	0x10120000
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40020400 	.word	0x40020400

080010b4 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	pI2S2_txBuf = &I2S2_txBuf[0];
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 80010be:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 80010c0:	601a      	str	r2, [r3, #0]
	pI2S2_rxBuf = &I2S2_rxBuf[0];
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 80010c4:	4a09      	ldr	r2, [pc, #36]	; (80010ec <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 80010c6:	601a      	str	r2, [r3, #0]
	I2S2_rxState = HalfCplt;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_I2SEx_TxRxHalfCpltCallback+0x3c>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
	I2S2_txState = HalfCplt;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_I2SEx_TxRxHalfCpltCallback+0x40>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000400 	.word	0x20000400
 80010e4:	20000900 	.word	0x20000900
 80010e8:	20000404 	.word	0x20000404
 80010ec:	20008900 	.word	0x20008900
 80010f0:	20010900 	.word	0x20010900
 80010f4:	20011904 	.word	0x20011904

080010f8 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	pI2S2_txBuf = &I2S2_txBuf[I2S2_BUFLEN/2];
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 8001104:	601a      	str	r2, [r3, #0]
	pI2S2_rxBuf = &I2S2_rxBuf[I2S2_BUFLEN/2];
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8001108:	4a09      	ldr	r2, [pc, #36]	; (8001130 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 800110a:	601a      	str	r2, [r3, #0]
	I2S2_rxState = Cplt;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_I2SEx_TxRxCpltCallback+0x3c>)
 800110e:	2202      	movs	r2, #2
 8001110:	701a      	strb	r2, [r3, #0]
	I2S2_txState = Cplt;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_I2SEx_TxRxCpltCallback+0x40>)
 8001114:	2202      	movs	r2, #2
 8001116:	701a      	strb	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	20000400 	.word	0x20000400
 8001128:	20004900 	.word	0x20004900
 800112c:	20000404 	.word	0x20000404
 8001130:	2000c900 	.word	0x2000c900
 8001134:	20010900 	.word	0x20010900
 8001138:	20011904 	.word	0x20011904

0800113c <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	pI2S3_rxBuf = &I2S3_rxBuf[0];
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_I2S_RxHalfCpltCallback+0x20>)
 8001146:	4a06      	ldr	r2, [pc, #24]	; (8001160 <HAL_I2S_RxHalfCpltCallback+0x24>)
 8001148:	601a      	str	r2, [r3, #0]
	I2S3_rxState = HalfCplt;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_I2S_RxHalfCpltCallback+0x28>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	20000408 	.word	0x20000408
 8001160:	20010904 	.word	0x20010904
 8001164:	20011905 	.word	0x20011905

08001168 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	pI2S3_rxBuf = &I2S3_rxBuf[I2S3_BUFLEN/2];
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_I2S_RxCpltCallback+0x20>)
 8001172:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_I2S_RxCpltCallback+0x24>)
 8001174:	601a      	str	r2, [r3, #0]
	I2S3_rxState = Cplt;
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_I2S_RxCpltCallback+0x28>)
 8001178:	2202      	movs	r2, #2
 800117a:	701a      	strb	r2, [r3, #0]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	20000408 	.word	0x20000408
 800118c:	20011104 	.word	0x20011104
 8001190:	20011905 	.word	0x20011905

08001194 <PMODI2S2_stereoRq31>:
	_printf("Value = %d\r\n", pI2S3_rxBuf[12]);
	_printf("Value     = %d\r\n", pI2S3_rxBuf[11]);
}

void PMODI2S2_stereoRq31(q31_t *Lbuf, q31_t *Rbuf)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	while(I2S2_rxState == Busy)
 800119e:	bf00      	nop
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <PMODI2S2_stereoRq31+0x9c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0fb      	beq.n	80011a0 <PMODI2S2_stereoRq31+0xc>
	{
	}
	I2S2_rxState = Busy;
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <PMODI2S2_stereoRq31+0x9c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 80011ae:	2300      	movs	r3, #0
 80011b0:	81fb      	strh	r3, [r7, #14]
 80011b2:	e031      	b.n	8001218 <PMODI2S2_stereoRq31+0x84>
	{
		Lbuf[i / 4] = (q31_t) ((pI2S2_rxBuf[i]     << 16) | pI2S2_rxBuf[i + 1]);
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <PMODI2S2_stereoRq31+0xa0>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	89fb      	ldrh	r3, [r7, #14]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <PMODI2S2_stereoRq31+0xa0>)
 80011c4:	6819      	ldr	r1, [r3, #0]
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	3301      	adds	r3, #1
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	440b      	add	r3, r1
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	440b      	add	r3, r1
 80011de:	4302      	orrs	r2, r0
 80011e0:	601a      	str	r2, [r3, #0]
		Rbuf[i / 4] = (q31_t) ((pI2S2_rxBuf[i + 2] << 16) | pI2S2_rxBuf[i + 3]);
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <PMODI2S2_stereoRq31+0xa0>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	89fb      	ldrh	r3, [r7, #14]
 80011e8:	3302      	adds	r3, #2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <PMODI2S2_stereoRq31+0xa0>)
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	3303      	adds	r3, #3
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	440b      	add	r3, r1
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	89fb      	ldrh	r3, [r7, #14]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	b29b      	uxth	r3, r3
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	6839      	ldr	r1, [r7, #0]
 800120c:	440b      	add	r3, r1
 800120e:	4302      	orrs	r2, r0
 8001210:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	3304      	adds	r3, #4
 8001216:	81fb      	strh	r3, [r7, #14]
 8001218:	89fb      	ldrh	r3, [r7, #14]
 800121a:	3303      	adds	r3, #3
 800121c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001220:	dbc8      	blt.n	80011b4 <PMODI2S2_stereoRq31+0x20>
	}
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20010900 	.word	0x20010900
 8001234:	20000404 	.word	0x20000404

08001238 <PMODI2S2_stereoWq31>:

void PMODI2S2_stereoWq31(q31_t *Lbuf, q31_t *Rbuf)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	while(I2S2_txState == Busy)
 8001242:	bf00      	nop
 8001244:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <PMODI2S2_stereoWq31+0xb8>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0fb      	beq.n	8001244 <PMODI2S2_stereoWq31+0xc>
	{
	}
	I2S2_txState = Busy;
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <PMODI2S2_stereoWq31+0xb8>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 8001252:	2300      	movs	r3, #0
 8001254:	81fb      	strh	r3, [r7, #14]
 8001256:	e03f      	b.n	80012d8 <PMODI2S2_stereoWq31+0xa0>
	{
		pI2S2_txBuf[i]     = (Lbuf[i / 4] >> 16) & 0xFFFF;
 8001258:	89fb      	ldrh	r3, [r7, #14]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	b29b      	uxth	r3, r3
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	4413      	add	r3, r2
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	0c19      	lsrs	r1, r3, #16
 8001268:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <PMODI2S2_stereoWq31+0xbc>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	b28a      	uxth	r2, r1
 8001274:	801a      	strh	r2, [r3, #0]
		pI2S2_txBuf[i + 1] =  Lbuf[i / 4] & 0xFFFF;
 8001276:	89fb      	ldrh	r3, [r7, #14]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	b29b      	uxth	r3, r3
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	6819      	ldr	r1, [r3, #0]
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <PMODI2S2_stereoWq31+0xbc>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	3301      	adds	r3, #1
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	b28a      	uxth	r2, r1
 8001292:	801a      	strh	r2, [r3, #0]
		pI2S2_txBuf[i + 2] = (Rbuf[i / 4] >> 16) & 0xFFFF;
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	b29b      	uxth	r3, r3
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0c19      	lsrs	r1, r3, #16
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <PMODI2S2_stereoWq31+0xbc>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	3302      	adds	r3, #2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	b28a      	uxth	r2, r1
 80012b2:	801a      	strh	r2, [r3, #0]
		pI2S2_txBuf[i + 3] =  Rbuf[i / 4] & 0xFFFF;
 80012b4:	89fb      	ldrh	r3, [r7, #14]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	6819      	ldr	r1, [r3, #0]
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <PMODI2S2_stereoWq31+0xbc>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	3303      	adds	r3, #3
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	b28a      	uxth	r2, r1
 80012d0:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i + 3 < I2S2_BUFLEN/2; i += 4)
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	3304      	adds	r3, #4
 80012d6:	81fb      	strh	r3, [r7, #14]
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	3303      	adds	r3, #3
 80012dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012e0:	dbba      	blt.n	8001258 <PMODI2S2_stereoWq31+0x20>
	}
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20011904 	.word	0x20011904
 80012f4:	20000400 	.word	0x20000400

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001302:	4804      	ldr	r0, [pc, #16]	; (8001314 <Error_Handler+0x1c>)
 8001304:	f001 f970 	bl	80025e8 <HAL_GPIO_WritePin>
	_cprintf("/!\\ FATAL ERROR !");
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <Error_Handler+0x20>)
 800130a:	f007 fa63 	bl	80087d4 <_cprintf>
  /* USER CODE END Error_Handler_Debug */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40020c00 	.word	0x40020c00
 8001318:	0800d014 	.word	0x0800d014

0800131c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <HAL_MspInit+0x4c>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_MspInit+0x4c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_MspInit+0x4c>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_MspInit+0x4c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800135a:	2007      	movs	r0, #7
 800135c:	f000 fbc6 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <HAL_CRC_MspInit+0x3c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d10d      	bne.n	800139a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_CRC_MspInit+0x40>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <HAL_CRC_MspInit+0x40>)
 8001388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <HAL_CRC_MspInit+0x40>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40023000 	.word	0x40023000
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	; 0x38
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4aa3      	ldr	r2, [pc, #652]	; (800165c <HAL_I2S_MspInit+0x2ac>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	f040 80bf 	bne.w	8001552 <HAL_I2S_MspInit+0x1a2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
 80013d8:	4ba1      	ldr	r3, [pc, #644]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	4aa0      	ldr	r2, [pc, #640]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 80013de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e2:	6413      	str	r3, [r2, #64]	; 0x40
 80013e4:	4b9e      	ldr	r3, [pc, #632]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ec:	623b      	str	r3, [r7, #32]
 80013ee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	4b9a      	ldr	r3, [pc, #616]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	4a99      	ldr	r2, [pc, #612]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 80013fa:	f043 0304 	orr.w	r3, r3, #4
 80013fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001400:	4b97      	ldr	r3, [pc, #604]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	4b93      	ldr	r3, [pc, #588]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4a92      	ldr	r2, [pc, #584]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	6313      	str	r3, [r2, #48]	; 0x30
 800141c:	4b90      	ldr	r3, [pc, #576]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	69bb      	ldr	r3, [r7, #24]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001428:	2304      	movs	r3, #4
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001438:	2306      	movs	r3, #6
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	4888      	ldr	r0, [pc, #544]	; (8001664 <HAL_I2S_MspInit+0x2b4>)
 8001444:	f000 ff1e 	bl	8002284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin|GPIO_PIN_6;
 8001448:	2348      	movs	r3, #72	; 0x48
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001458:	2305      	movs	r3, #5
 800145a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	4880      	ldr	r0, [pc, #512]	; (8001664 <HAL_I2S_MspInit+0x2b4>)
 8001464:	f000 ff0e 	bl	8002284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001468:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800147a:	2305      	movs	r3, #5
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	4878      	ldr	r0, [pc, #480]	; (8001668 <HAL_I2S_MspInit+0x2b8>)
 8001486:	f000 fefd 	bl	8002284 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 800148a:	4b78      	ldr	r3, [pc, #480]	; (800166c <HAL_I2S_MspInit+0x2bc>)
 800148c:	4a78      	ldr	r2, [pc, #480]	; (8001670 <HAL_I2S_MspInit+0x2c0>)
 800148e:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001490:	4b76      	ldr	r3, [pc, #472]	; (800166c <HAL_I2S_MspInit+0x2bc>)
 8001492:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001496:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001498:	4b74      	ldr	r3, [pc, #464]	; (800166c <HAL_I2S_MspInit+0x2bc>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800149e:	4b73      	ldr	r3, [pc, #460]	; (800166c <HAL_I2S_MspInit+0x2bc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014a4:	4b71      	ldr	r3, [pc, #452]	; (800166c <HAL_I2S_MspInit+0x2bc>)
 80014a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014aa:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ac:	4b6f      	ldr	r3, [pc, #444]	; (800166c <HAL_I2S_MspInit+0x2bc>)
 80014ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b2:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b4:	4b6d      	ldr	r3, [pc, #436]	; (800166c <HAL_I2S_MspInit+0x2bc>)
 80014b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 80014bc:	4b6b      	ldr	r3, [pc, #428]	; (800166c <HAL_I2S_MspInit+0x2bc>)
 80014be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c2:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80014c4:	4b69      	ldr	r3, [pc, #420]	; (800166c <HAL_I2S_MspInit+0x2bc>)
 80014c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ca:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014cc:	4b67      	ldr	r3, [pc, #412]	; (800166c <HAL_I2S_MspInit+0x2bc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 80014d2:	4866      	ldr	r0, [pc, #408]	; (800166c <HAL_I2S_MspInit+0x2bc>)
 80014d4:	f000 fb68 	bl	8001ba8 <HAL_DMA_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 80014de:	f7ff ff0b 	bl	80012f8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a61      	ldr	r2, [pc, #388]	; (800166c <HAL_I2S_MspInit+0x2bc>)
 80014e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80014e8:	4a60      	ldr	r2, [pc, #384]	; (800166c <HAL_I2S_MspInit+0x2bc>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80014ee:	4b61      	ldr	r3, [pc, #388]	; (8001674 <HAL_I2S_MspInit+0x2c4>)
 80014f0:	4a61      	ldr	r2, [pc, #388]	; (8001678 <HAL_I2S_MspInit+0x2c8>)
 80014f2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80014f4:	4b5f      	ldr	r3, [pc, #380]	; (8001674 <HAL_I2S_MspInit+0x2c4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014fa:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <HAL_I2S_MspInit+0x2c4>)
 80014fc:	2240      	movs	r2, #64	; 0x40
 80014fe:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001500:	4b5c      	ldr	r3, [pc, #368]	; (8001674 <HAL_I2S_MspInit+0x2c4>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001506:	4b5b      	ldr	r3, [pc, #364]	; (8001674 <HAL_I2S_MspInit+0x2c4>)
 8001508:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800150c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800150e:	4b59      	ldr	r3, [pc, #356]	; (8001674 <HAL_I2S_MspInit+0x2c4>)
 8001510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001514:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001516:	4b57      	ldr	r3, [pc, #348]	; (8001674 <HAL_I2S_MspInit+0x2c4>)
 8001518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800151e:	4b55      	ldr	r3, [pc, #340]	; (8001674 <HAL_I2S_MspInit+0x2c4>)
 8001520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001524:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001526:	4b53      	ldr	r3, [pc, #332]	; (8001674 <HAL_I2S_MspInit+0x2c4>)
 8001528:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800152c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800152e:	4b51      	ldr	r3, [pc, #324]	; (8001674 <HAL_I2S_MspInit+0x2c4>)
 8001530:	2200      	movs	r2, #0
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001534:	484f      	ldr	r0, [pc, #316]	; (8001674 <HAL_I2S_MspInit+0x2c4>)
 8001536:	f000 fb37 	bl	8001ba8 <HAL_DMA_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 8001540:	f7ff feda 	bl	80012f8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a4b      	ldr	r2, [pc, #300]	; (8001674 <HAL_I2S_MspInit+0x2c4>)
 8001548:	639a      	str	r2, [r3, #56]	; 0x38
 800154a:	4a4a      	ldr	r2, [pc, #296]	; (8001674 <HAL_I2S_MspInit+0x2c4>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001550:	e080      	b.n	8001654 <HAL_I2S_MspInit+0x2a4>
  else if(hi2s->Instance==SPI3)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a49      	ldr	r2, [pc, #292]	; (800167c <HAL_I2S_MspInit+0x2cc>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d17b      	bne.n	8001654 <HAL_I2S_MspInit+0x2a4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a3e      	ldr	r2, [pc, #248]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 8001566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
 800156c:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	4b38      	ldr	r3, [pc, #224]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	4a37      	ldr	r2, [pc, #220]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6313      	str	r3, [r2, #48]	; 0x30
 8001588:	4b35      	ldr	r3, [pc, #212]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	4a30      	ldr	r2, [pc, #192]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
 80015a4:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <HAL_I2S_MspInit+0x2b0>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015b0:	2310      	movs	r3, #16
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015c0:	2306      	movs	r3, #6
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	482d      	ldr	r0, [pc, #180]	; (8001680 <HAL_I2S_MspInit+0x2d0>)
 80015cc:	f000 fe5a 	bl	8002284 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80015d0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015e2:	2306      	movs	r3, #6
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	481d      	ldr	r0, [pc, #116]	; (8001664 <HAL_I2S_MspInit+0x2b4>)
 80015ee:	f000 fe49 	bl	8002284 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80015f2:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_I2S_MspInit+0x2d4>)
 80015f4:	4a24      	ldr	r2, [pc, #144]	; (8001688 <HAL_I2S_MspInit+0x2d8>)
 80015f6:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80015f8:	4b22      	ldr	r3, [pc, #136]	; (8001684 <HAL_I2S_MspInit+0x2d4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_I2S_MspInit+0x2d4>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <HAL_I2S_MspInit+0x2d4>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_I2S_MspInit+0x2d4>)
 800160c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001610:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <HAL_I2S_MspInit+0x2d4>)
 8001614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001618:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_I2S_MspInit+0x2d4>)
 800161c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001620:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_I2S_MspInit+0x2d4>)
 8001624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001628:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_I2S_MspInit+0x2d4>)
 800162c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001630:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_I2S_MspInit+0x2d4>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001638:	4812      	ldr	r0, [pc, #72]	; (8001684 <HAL_I2S_MspInit+0x2d4>)
 800163a:	f000 fab5 	bl	8001ba8 <HAL_DMA_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_I2S_MspInit+0x298>
      Error_Handler();
 8001644:	f7ff fe58 	bl	80012f8 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_I2S_MspInit+0x2d4>)
 800164c:	63da      	str	r2, [r3, #60]	; 0x3c
 800164e:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_I2S_MspInit+0x2d4>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001654:	bf00      	nop
 8001656:	3738      	adds	r7, #56	; 0x38
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40003800 	.word	0x40003800
 8001660:	40023800 	.word	0x40023800
 8001664:	40020800 	.word	0x40020800
 8001668:	40020400 	.word	0x40020400
 800166c:	20011908 	.word	0x20011908
 8001670:	40026058 	.word	0x40026058
 8001674:	20011968 	.word	0x20011968
 8001678:	40026070 	.word	0x40026070
 800167c:	40003c00 	.word	0x40003c00
 8001680:	40020000 	.word	0x40020000
 8001684:	200119c8 	.word	0x200119c8
 8001688:	40026010 	.word	0x40026010

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e0:	f000 f8f2 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <DMA1_Stream0_IRQHandler+0x10>)
 80016ee:	f000 fb61 	bl	8001db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200119c8 	.word	0x200119c8

080016fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <DMA1_Stream3_IRQHandler+0x10>)
 8001702:	f000 fb57 	bl	8001db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20011908 	.word	0x20011908

08001710 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <DMA1_Stream4_IRQHandler+0x10>)
 8001716:	f000 fb4d 	bl	8001db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20011968 	.word	0x20011968

08001724 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <OTG_FS_IRQHandler+0x10>)
 800172a:	f002 f8f1 	bl	8003910 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200120e4 	.word	0x200120e4

08001738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <_sbrk+0x5c>)
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <_sbrk+0x60>)
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <_sbrk+0x64>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <_sbrk+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	429a      	cmp	r2, r3
 8001766:	d207      	bcs.n	8001778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001768:	f009 fcf6 	bl	800b158 <__errno>
 800176c:	4602      	mov	r2, r0
 800176e:	230c      	movs	r3, #12
 8001770:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001776:	e009      	b.n	800178c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <_sbrk+0x64>)
 8001788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20020000 	.word	0x20020000
 8001798:	00000400 	.word	0x00000400
 800179c:	20000780 	.word	0x20000780
 80017a0:	200124f0 	.word	0x200124f0

080017a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <SystemInit+0x28>)
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ae:	4a07      	ldr	r2, [pc, #28]	; (80017cc <SystemInit+0x28>)
 80017b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <SystemInit+0x28>)
 80017ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017be:	609a      	str	r2, [r3, #8]
#endif
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001808 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017d6:	e003      	b.n	80017e0 <LoopCopyDataInit>

080017d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017de:	3104      	adds	r1, #4

080017e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017e0:	480b      	ldr	r0, [pc, #44]	; (8001810 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017e8:	d3f6      	bcc.n	80017d8 <CopyDataInit>
  ldr  r2, =_sbss
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017ec:	e002      	b.n	80017f4 <LoopFillZerobss>

080017ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017f0:	f842 3b04 	str.w	r3, [r2], #4

080017f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017f8:	d3f9      	bcc.n	80017ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017fa:	f7ff ffd3 	bl	80017a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017fe:	f009 fcb1 	bl	800b164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001802:	f7ff f8d9 	bl	80009b8 <main>
  bx  lr    
 8001806:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001808:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800180c:	0800d364 	.word	0x0800d364
  ldr  r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001814:	20000760 	.word	0x20000760
  ldr  r2, =_sbss
 8001818:	20000760 	.word	0x20000760
  ldr  r3, = _ebss
 800181c:	200124f0 	.word	0x200124f0

08001820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC_IRQHandler>
	...

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <HAL_Init+0x40>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_Init+0x40>)
 800183a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_Init+0x40>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f94d 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	2000      	movs	r0, #0
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff fd60 	bl	800131c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f965 	bl	8001b56 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018a4:	f000 f92d 	bl	8001b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000040c 	.word	0x2000040c
 80018c0:	20000414 	.word	0x20000414
 80018c4:	20000410 	.word	0x20000410

080018c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000414 	.word	0x20000414
 80018ec:	20011ab8 	.word	0x20011ab8

080018f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20011ab8 	.word	0x20011ab8

08001908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff ffee 	bl	80018f0 <HAL_GetTick>
 8001914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001920:	d005      	beq.n	800192e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_Delay+0x40>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800192e:	bf00      	nop
 8001930:	f7ff ffde 	bl	80018f0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8f7      	bhi.n	8001930 <HAL_Delay+0x28>
  {
  }
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000414 	.word	0x20000414

0800194c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <__NVIC_EnableIRQ+0x38>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001acc:	f7ff ff8e 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff29 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff3e 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff8e 	bl	8001a40 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5d 	bl	80019ec <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff31 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffa2 	bl	8001aa8 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e00e      	b.n	8001b9e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	795b      	ldrb	r3, [r3, #5]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fbeb 	bl	800136c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff fe9c 	bl	80018f0 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e099      	b.n	8001cf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be4:	e00f      	b.n	8001c06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be6:	f7ff fe83 	bl	80018f0 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d908      	bls.n	8001c06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e078      	b.n	8001cf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e8      	bne.n	8001be6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_DMA_Init+0x158>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d107      	bne.n	8001c70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f023 0307 	bic.w	r3, r3, #7
 8001c86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d117      	bne.n	8001cca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00e      	beq.n	8001cca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fa6f 	bl	8002190 <DMA_CheckFifoParam>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e016      	b.n	8001cf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fa26 	bl	8002124 <DMA_CalcBaseAndBitshift>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	223f      	movs	r2, #63	; 0x3f
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	f010803f 	.word	0xf010803f

08001d04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_DMA_Start_IT+0x26>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e040      	b.n	8001dac <HAL_DMA_Start_IT+0xa8>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d12f      	bne.n	8001d9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f9b8 	bl	80020c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	223f      	movs	r2, #63	; 0x3f
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0216 	orr.w	r2, r2, #22
 8001d72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0208 	orr.w	r2, r2, #8
 8001d8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e005      	b.n	8001daa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001da6:	2302      	movs	r3, #2
 8001da8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dc0:	4b92      	ldr	r3, [pc, #584]	; (800200c <HAL_DMA_IRQHandler+0x258>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a92      	ldr	r2, [pc, #584]	; (8002010 <HAL_DMA_IRQHandler+0x25c>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0a9b      	lsrs	r3, r3, #10
 8001dcc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	2208      	movs	r2, #8
 8001de0:	409a      	lsls	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01a      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0204 	bic.w	r2, r2, #4
 8001e06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	f043 0201 	orr.w	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e24:	2201      	movs	r2, #1
 8001e26:	409a      	lsls	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d012      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	2201      	movs	r2, #1
 8001e44:	409a      	lsls	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4e:	f043 0202 	orr.w	r2, r3, #2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d012      	beq.n	8001e8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00b      	beq.n	8001e8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	2204      	movs	r2, #4
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	f043 0204 	orr.w	r2, r3, #4
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	2210      	movs	r2, #16
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d043      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d03c      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	2210      	movs	r2, #16
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d018      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d108      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d024      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
 8001ee2:	e01f      	b.n	8001f24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01b      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4798      	blx	r3
 8001ef4:	e016      	b.n	8001f24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d107      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0208 	bic.w	r2, r2, #8
 8001f12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	2220      	movs	r2, #32
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 808e 	beq.w	8002052 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8086 	beq.w	8002052 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d136      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0216 	bic.w	r2, r2, #22
 8001f6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <HAL_DMA_IRQHandler+0x1da>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0208 	bic.w	r2, r2, #8
 8001f9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa2:	223f      	movs	r2, #63	; 0x3f
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d07d      	beq.n	80020be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
        }
        return;
 8001fca:	e078      	b.n	80020be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d01c      	beq.n	8002014 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d108      	bne.n	8001ffa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d030      	beq.n	8002052 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
 8001ff8:	e02b      	b.n	8002052 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d027      	beq.n	8002052 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
 800200a:	e022      	b.n	8002052 <HAL_DMA_IRQHandler+0x29e>
 800200c:	2000040c 	.word	0x2000040c
 8002010:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10f      	bne.n	8002042 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0210 	bic.w	r2, r2, #16
 8002030:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002056:	2b00      	cmp	r3, #0
 8002058:	d032      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d022      	beq.n	80020ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2205      	movs	r2, #5
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	3301      	adds	r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	429a      	cmp	r2, r3
 8002088:	d307      	bcc.n	800209a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f2      	bne.n	800207e <HAL_DMA_IRQHandler+0x2ca>
 8002098:	e000      	b.n	800209c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800209a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4798      	blx	r3
 80020bc:	e000      	b.n	80020c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80020be:	bf00      	nop
    }
  }
}
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop

080020c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b40      	cmp	r3, #64	; 0x40
 80020f4:	d108      	bne.n	8002108 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002106:	e007      	b.n	8002118 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3b10      	subs	r3, #16
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <DMA_CalcBaseAndBitshift+0x64>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800213e:	4a13      	ldr	r2, [pc, #76]	; (800218c <DMA_CalcBaseAndBitshift+0x68>)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d909      	bls.n	8002166 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800215a:	f023 0303 	bic.w	r3, r3, #3
 800215e:	1d1a      	adds	r2, r3, #4
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	659a      	str	r2, [r3, #88]	; 0x58
 8002164:	e007      	b.n	8002176 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	aaaaaaab 	.word	0xaaaaaaab
 800218c:	0800d16c 	.word	0x0800d16c

08002190 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d11f      	bne.n	80021ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d855      	bhi.n	800225c <DMA_CheckFifoParam+0xcc>
 80021b0:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <DMA_CheckFifoParam+0x28>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	080021c9 	.word	0x080021c9
 80021bc:	080021db 	.word	0x080021db
 80021c0:	080021c9 	.word	0x080021c9
 80021c4:	0800225d 	.word	0x0800225d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d045      	beq.n	8002260 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d8:	e042      	b.n	8002260 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021e2:	d13f      	bne.n	8002264 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e8:	e03c      	b.n	8002264 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f2:	d121      	bne.n	8002238 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d836      	bhi.n	8002268 <DMA_CheckFifoParam+0xd8>
 80021fa:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <DMA_CheckFifoParam+0x70>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	08002211 	.word	0x08002211
 8002204:	08002217 	.word	0x08002217
 8002208:	08002211 	.word	0x08002211
 800220c:	08002229 	.word	0x08002229
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
      break;
 8002214:	e02f      	b.n	8002276 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d024      	beq.n	800226c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002226:	e021      	b.n	800226c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002230:	d11e      	bne.n	8002270 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002236:	e01b      	b.n	8002270 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d902      	bls.n	8002244 <DMA_CheckFifoParam+0xb4>
 800223e:	2b03      	cmp	r3, #3
 8002240:	d003      	beq.n	800224a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002242:	e018      	b.n	8002276 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      break;
 8002248:	e015      	b.n	8002276 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00e      	beq.n	8002274 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      break;
 800225a:	e00b      	b.n	8002274 <DMA_CheckFifoParam+0xe4>
      break;
 800225c:	bf00      	nop
 800225e:	e00a      	b.n	8002276 <DMA_CheckFifoParam+0xe6>
      break;
 8002260:	bf00      	nop
 8002262:	e008      	b.n	8002276 <DMA_CheckFifoParam+0xe6>
      break;
 8002264:	bf00      	nop
 8002266:	e006      	b.n	8002276 <DMA_CheckFifoParam+0xe6>
      break;
 8002268:	bf00      	nop
 800226a:	e004      	b.n	8002276 <DMA_CheckFifoParam+0xe6>
      break;
 800226c:	bf00      	nop
 800226e:	e002      	b.n	8002276 <DMA_CheckFifoParam+0xe6>
      break;   
 8002270:	bf00      	nop
 8002272:	e000      	b.n	8002276 <DMA_CheckFifoParam+0xe6>
      break;
 8002274:	bf00      	nop
    }
  } 
  
  return status; 
 8002276:	7bfb      	ldrb	r3, [r7, #15]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002284:	b480      	push	{r7}
 8002286:	b089      	sub	sp, #36	; 0x24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	e16b      	b.n	8002578 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a0:	2201      	movs	r2, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	f040 815a 	bne.w	8002572 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d00b      	beq.n	80022de <HAL_GPIO_Init+0x5a>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d007      	beq.n	80022de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d2:	2b11      	cmp	r3, #17
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b12      	cmp	r3, #18
 80022dc:	d130      	bne.n	8002340 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	2203      	movs	r2, #3
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 0201 	and.w	r2, r3, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0xfc>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b12      	cmp	r3, #18
 800237e:	d123      	bne.n	80023c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	08da      	lsrs	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3208      	adds	r2, #8
 8002388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	220f      	movs	r2, #15
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	08da      	lsrs	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3208      	adds	r2, #8
 80023c2:	69b9      	ldr	r1, [r7, #24]
 80023c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0203 	and.w	r2, r3, #3
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80b4 	beq.w	8002572 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b5f      	ldr	r3, [pc, #380]	; (800258c <HAL_GPIO_Init+0x308>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	4a5e      	ldr	r2, [pc, #376]	; (800258c <HAL_GPIO_Init+0x308>)
 8002414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002418:	6453      	str	r3, [r2, #68]	; 0x44
 800241a:	4b5c      	ldr	r3, [pc, #368]	; (800258c <HAL_GPIO_Init+0x308>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002426:	4a5a      	ldr	r2, [pc, #360]	; (8002590 <HAL_GPIO_Init+0x30c>)
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	220f      	movs	r2, #15
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a51      	ldr	r2, [pc, #324]	; (8002594 <HAL_GPIO_Init+0x310>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d02b      	beq.n	80024aa <HAL_GPIO_Init+0x226>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a50      	ldr	r2, [pc, #320]	; (8002598 <HAL_GPIO_Init+0x314>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d025      	beq.n	80024a6 <HAL_GPIO_Init+0x222>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4f      	ldr	r2, [pc, #316]	; (800259c <HAL_GPIO_Init+0x318>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d01f      	beq.n	80024a2 <HAL_GPIO_Init+0x21e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4e      	ldr	r2, [pc, #312]	; (80025a0 <HAL_GPIO_Init+0x31c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d019      	beq.n	800249e <HAL_GPIO_Init+0x21a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4d      	ldr	r2, [pc, #308]	; (80025a4 <HAL_GPIO_Init+0x320>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0x216>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4c      	ldr	r2, [pc, #304]	; (80025a8 <HAL_GPIO_Init+0x324>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00d      	beq.n	8002496 <HAL_GPIO_Init+0x212>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4b      	ldr	r2, [pc, #300]	; (80025ac <HAL_GPIO_Init+0x328>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <HAL_GPIO_Init+0x20e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4a      	ldr	r2, [pc, #296]	; (80025b0 <HAL_GPIO_Init+0x32c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <HAL_GPIO_Init+0x20a>
 800248a:	2307      	movs	r3, #7
 800248c:	e00e      	b.n	80024ac <HAL_GPIO_Init+0x228>
 800248e:	2308      	movs	r3, #8
 8002490:	e00c      	b.n	80024ac <HAL_GPIO_Init+0x228>
 8002492:	2306      	movs	r3, #6
 8002494:	e00a      	b.n	80024ac <HAL_GPIO_Init+0x228>
 8002496:	2305      	movs	r3, #5
 8002498:	e008      	b.n	80024ac <HAL_GPIO_Init+0x228>
 800249a:	2304      	movs	r3, #4
 800249c:	e006      	b.n	80024ac <HAL_GPIO_Init+0x228>
 800249e:	2303      	movs	r3, #3
 80024a0:	e004      	b.n	80024ac <HAL_GPIO_Init+0x228>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e002      	b.n	80024ac <HAL_GPIO_Init+0x228>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_GPIO_Init+0x228>
 80024aa:	2300      	movs	r3, #0
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	f002 0203 	and.w	r2, r2, #3
 80024b2:	0092      	lsls	r2, r2, #2
 80024b4:	4093      	lsls	r3, r2
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024bc:	4934      	ldr	r1, [pc, #208]	; (8002590 <HAL_GPIO_Init+0x30c>)
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	3302      	adds	r3, #2
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ca:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <HAL_GPIO_Init+0x330>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ee:	4a31      	ldr	r2, [pc, #196]	; (80025b4 <HAL_GPIO_Init+0x330>)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <HAL_GPIO_Init+0x330>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002518:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <HAL_GPIO_Init+0x330>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251e:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_GPIO_Init+0x330>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002542:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <HAL_GPIO_Init+0x330>)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_GPIO_Init+0x330>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800256c:	4a11      	ldr	r2, [pc, #68]	; (80025b4 <HAL_GPIO_Init+0x330>)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3301      	adds	r3, #1
 8002576:	61fb      	str	r3, [r7, #28]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	2b0f      	cmp	r3, #15
 800257c:	f67f ae90 	bls.w	80022a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002580:	bf00      	nop
 8002582:	3724      	adds	r7, #36	; 0x24
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40023800 	.word	0x40023800
 8002590:	40013800 	.word	0x40013800
 8002594:	40020000 	.word	0x40020000
 8002598:	40020400 	.word	0x40020400
 800259c:	40020800 	.word	0x40020800
 80025a0:	40020c00 	.word	0x40020c00
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40021400 	.word	0x40021400
 80025ac:	40021800 	.word	0x40021800
 80025b0:	40021c00 	.word	0x40021c00
 80025b4:	40013c00 	.word	0x40013c00

080025b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e001      	b.n	80025da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	401a      	ands	r2, r3
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	429a      	cmp	r2, r3
 8002632:	d104      	bne.n	800263e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	041a      	lsls	r2, r3, #16
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800263c:	e002      	b.n	8002644 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	619a      	str	r2, [r3, #24]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e128      	b.n	80028b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a90      	ldr	r2, [pc, #576]	; (80028bc <HAL_I2S_Init+0x26c>)
 800267a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7fe fe97 	bl	80013b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2202      	movs	r2, #2
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002698:	f023 030f 	bic.w	r3, r3, #15
 800269c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2202      	movs	r2, #2
 80026a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d060      	beq.n	8002770 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80026b6:	2310      	movs	r3, #16
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	e001      	b.n	80026c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80026bc:	2320      	movs	r3, #32
 80026be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d802      	bhi.n	80026ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f002 fe6e 	bl	80053b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80026d4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026de:	d125      	bne.n	800272c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d010      	beq.n	800270a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	461a      	mov	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	3305      	adds	r3, #5
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	e01f      	b.n	800274a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	fbb2 f2f3 	udiv	r2, r2, r3
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	461a      	mov	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	fbb2 f3f3 	udiv	r3, r2, r3
 8002726:	3305      	adds	r3, #5
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	e00e      	b.n	800274a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	fbb2 f2f3 	udiv	r2, r2, r3
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	461a      	mov	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	3305      	adds	r3, #5
 8002748:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4a5c      	ldr	r2, [pc, #368]	; (80028c0 <HAL_I2S_Init+0x270>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	08db      	lsrs	r3, r3, #3
 8002754:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	e003      	b.n	8002778 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002770:	2302      	movs	r3, #2
 8002772:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d902      	bls.n	8002784 <HAL_I2S_Init+0x134>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	2bff      	cmp	r3, #255	; 0xff
 8002782:	d907      	bls.n	8002794 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002788:	f043 0210 	orr.w	r2, r3, #16
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e08f      	b.n	80028b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	ea42 0103 	orr.w	r1, r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027b2:	f023 030f 	bic.w	r3, r3, #15
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6851      	ldr	r1, [r2, #4]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6892      	ldr	r2, [r2, #8]
 80027be:	4311      	orrs	r1, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68d2      	ldr	r2, [r2, #12]
 80027c4:	4311      	orrs	r1, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6992      	ldr	r2, [r2, #24]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d161      	bne.n	80028a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a38      	ldr	r2, [pc, #224]	; (80028c4 <HAL_I2S_Init+0x274>)
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a37      	ldr	r2, [pc, #220]	; (80028c8 <HAL_I2S_Init+0x278>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d101      	bne.n	80027f4 <HAL_I2S_Init+0x1a4>
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <HAL_I2S_Init+0x27c>)
 80027f2:	e001      	b.n	80027f8 <HAL_I2S_Init+0x1a8>
 80027f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	4932      	ldr	r1, [pc, #200]	; (80028c8 <HAL_I2S_Init+0x278>)
 8002800:	428a      	cmp	r2, r1
 8002802:	d101      	bne.n	8002808 <HAL_I2S_Init+0x1b8>
 8002804:	4a31      	ldr	r2, [pc, #196]	; (80028cc <HAL_I2S_Init+0x27c>)
 8002806:	e001      	b.n	800280c <HAL_I2S_Init+0x1bc>
 8002808:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800280c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002810:	f023 030f 	bic.w	r3, r3, #15
 8002814:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a2b      	ldr	r2, [pc, #172]	; (80028c8 <HAL_I2S_Init+0x278>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d101      	bne.n	8002824 <HAL_I2S_Init+0x1d4>
 8002820:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_I2S_Init+0x27c>)
 8002822:	e001      	b.n	8002828 <HAL_I2S_Init+0x1d8>
 8002824:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002828:	2202      	movs	r2, #2
 800282a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <HAL_I2S_Init+0x278>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d101      	bne.n	800283a <HAL_I2S_Init+0x1ea>
 8002836:	4b25      	ldr	r3, [pc, #148]	; (80028cc <HAL_I2S_Init+0x27c>)
 8002838:	e001      	b.n	800283e <HAL_I2S_Init+0x1ee>
 800283a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284a:	d003      	beq.n	8002854 <HAL_I2S_Init+0x204>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d103      	bne.n	800285c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	e001      	b.n	8002860 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	b299      	uxth	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002876:	4303      	orrs	r3, r0
 8002878:	b29b      	uxth	r3, r3
 800287a:	430b      	orrs	r3, r1
 800287c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800287e:	4313      	orrs	r3, r2
 8002880:	b29a      	uxth	r2, r3
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	4313      	orrs	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800288c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <HAL_I2S_Init+0x278>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d101      	bne.n	800289c <HAL_I2S_Init+0x24c>
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <HAL_I2S_Init+0x27c>)
 800289a:	e001      	b.n	80028a0 <HAL_I2S_Init+0x250>
 800289c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028a0:	897a      	ldrh	r2, [r7, #10]
 80028a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	08002bd5 	.word	0x08002bd5
 80028c0:	cccccccd 	.word	0xcccccccd
 80028c4:	08002ffd 	.word	0x08002ffd
 80028c8:	40003800 	.word	0x40003800
 80028cc:	40003400 	.word	0x40003400

080028d0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	4613      	mov	r3, r2
 80028dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_I2S_Receive_DMA+0x1a>
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0a1      	b.n	8002a32 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_I2S_Receive_DMA+0x2e>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e099      	b.n	8002a32 <HAL_I2S_Receive_DMA+0x162>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d005      	beq.n	800291e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
 800291c:	e089      	b.n	8002a32 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2204      	movs	r2, #4
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d002      	beq.n	800294a <HAL_I2S_Receive_DMA+0x7a>
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b05      	cmp	r3, #5
 8002948:	d10a      	bne.n	8002960 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	865a      	strh	r2, [r3, #50]	; 0x32
 800295e:	e005      	b.n	800296c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	88fa      	ldrh	r2, [r7, #6]
 8002964:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	88fa      	ldrh	r2, [r7, #6]
 800296a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	4a32      	ldr	r2, [pc, #200]	; (8002a3c <HAL_I2S_Receive_DMA+0x16c>)
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002978:	4a31      	ldr	r2, [pc, #196]	; (8002a40 <HAL_I2S_Receive_DMA+0x170>)
 800297a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	4a30      	ldr	r2, [pc, #192]	; (8002a44 <HAL_I2S_Receive_DMA+0x174>)
 8002982:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002992:	d10a      	bne.n	80029aa <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	330c      	adds	r3, #12
 80029b4:	4619      	mov	r1, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80029c0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80029c2:	f7ff f99f 	bl	8001d04 <HAL_DMA_Start_IT>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00f      	beq.n	80029ec <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d0:	f043 0208 	orr.w	r2, r3, #8
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e022      	b.n	8002a32 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d107      	bne.n	8002a0a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a08:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d107      	bne.n	8002a28 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	08002ab3 	.word	0x08002ab3
 8002a40:	08002a71 	.word	0x08002a71
 8002a44:	08002acf 	.word	0x08002acf

08002a48 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10e      	bne.n	8002aa4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7fe fb5f 	bl	8001168 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f7fe fb3b 	bl	800113c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0203 	bic.w	r2, r2, #3
 8002aea:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	f043 0208 	orr.w	r2, r3, #8
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f7ff ffa5 	bl	8002a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	881a      	ldrh	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	1c9a      	adds	r2, r3, #2
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10e      	bne.n	8002b6e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff6d 	bl	8002a48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	b292      	uxth	r2, r2
 8002b8a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	1c9a      	adds	r2, r3, #2
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10e      	bne.n	8002bcc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bbc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe face 	bl	8001168 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d13a      	bne.n	8002c66 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d109      	bne.n	8002c0e <I2S_IRQHandler+0x3a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c04:	2b40      	cmp	r3, #64	; 0x40
 8002c06:	d102      	bne.n	8002c0e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ffb4 	bl	8002b76 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d126      	bne.n	8002c66 <I2S_IRQHandler+0x92>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d11f      	bne.n	8002c66 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c34:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	f043 0202 	orr.w	r2, r3, #2
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff fefb 	bl	8002a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d136      	bne.n	8002ce0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d109      	bne.n	8002c90 <I2S_IRQHandler+0xbc>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c86:	2b80      	cmp	r3, #128	; 0x80
 8002c88:	d102      	bne.n	8002c90 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ff45 	bl	8002b1a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d122      	bne.n	8002ce0 <I2S_IRQHandler+0x10c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d11b      	bne.n	8002ce0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cb6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f043 0204 	orr.w	r2, r3, #4
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff febe 	bl	8002a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d002      	beq.n	8002d14 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d12:	e160      	b.n	8002fd6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e15a      	b.n	8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e152      	b.n	8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d002      	beq.n	8002d66 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d114      	bne.n	8002d90 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002d84:	887b      	ldrh	r3, [r7, #2]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	865a      	strh	r2, [r3, #50]	; 0x32
 8002d8e:	e00b      	b.n	8002da8 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	887a      	ldrh	r2, [r7, #2]
 8002d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	887a      	ldrh	r2, [r7, #2]
 8002da0:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	887a      	ldrh	r2, [r7, #2]
 8002da6:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2205      	movs	r2, #5
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	4a8b      	ldr	r2, [pc, #556]	; (8002fe8 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	4a8a      	ldr	r2, [pc, #552]	; (8002fec <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002dc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	4a89      	ldr	r2, [pc, #548]	; (8002ff0 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002dcc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	4a85      	ldr	r2, [pc, #532]	; (8002fe8 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	4a84      	ldr	r2, [pc, #528]	; (8002fec <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	4a83      	ldr	r2, [pc, #524]	; (8002ff0 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002de4:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df0:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df8:	d002      	beq.n	8002e00 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d16b      	bne.n	8002ed8 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a79      	ldr	r2, [pc, #484]	; (8002ff4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002e12:	4b79      	ldr	r3, [pc, #484]	; (8002ff8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e14:	e001      	b.n	8002e1a <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002e16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	f7fe ff6c 	bl	8001d04 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a70      	ldr	r2, [pc, #448]	; (8002ff4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002e36:	4b70      	ldr	r3, [pc, #448]	; (8002ff8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e38:	e001      	b.n	8002e3e <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	496b      	ldr	r1, [pc, #428]	; (8002ff4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e46:	428b      	cmp	r3, r1
 8002e48:	d101      	bne.n	8002e4e <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002e4a:	4b6b      	ldr	r3, [pc, #428]	; (8002ff8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e4c:	e001      	b.n	8002e52 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002e4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002e58:	f107 0308 	add.w	r3, r7, #8
 8002e5c:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f7fe ff46 	bl	8001d04 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0202 	orr.w	r2, r2, #2
 8002e86:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e96:	f000 809e 	beq.w	8002fd6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a55      	ldr	r2, [pc, #340]	; (8002ff4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002ea4:	4b54      	ldr	r3, [pc, #336]	; (8002ff8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ea6:	e001      	b.n	8002eac <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002ea8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eac:	69da      	ldr	r2, [r3, #28]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4950      	ldr	r1, [pc, #320]	; (8002ff4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002eb4:	428b      	cmp	r3, r1
 8002eb6:	d101      	bne.n	8002ebc <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002eba:	e001      	b.n	8002ec0 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ec4:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed4:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002ed6:	e07e      	b.n	8002fd6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ee6:	d10a      	bne.n	8002efe <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002efe:	f107 0308 	add.w	r3, r7, #8
 8002f02:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6819      	ldr	r1, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a38      	ldr	r2, [pc, #224]	; (8002ff4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d101      	bne.n	8002f1a <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002f16:	4b38      	ldr	r3, [pc, #224]	; (8002ff8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f18:	e001      	b.n	8002f1e <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002f1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f1e:	330c      	adds	r3, #12
 8002f20:	461a      	mov	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	f7fe feec 	bl	8001d04 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a30      	ldr	r2, [pc, #192]	; (8002ff4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002f36:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f38:	e001      	b.n	8002f3e <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002f3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	492b      	ldr	r1, [pc, #172]	; (8002ff4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f46:	428b      	cmp	r3, r1
 8002f48:	d101      	bne.n	8002f4e <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002f4a:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f4c:	e001      	b.n	8002f52 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f52:	f042 0202 	orr.w	r2, r2, #2
 8002f56:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	330c      	adds	r3, #12
 8002f66:	4619      	mov	r1, r3
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f7fe fec7 	bl	8001d04 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f94:	d01e      	beq.n	8002fd4 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a16      	ldr	r2, [pc, #88]	; (8002ff4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002fa0:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002fa2:	e001      	b.n	8002fa8 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002fa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4911      	ldr	r1, [pc, #68]	; (8002ff4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002fb0:	428b      	cmp	r3, r1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002fb6:	e001      	b.n	8002fbc <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fc0:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fd0:	61da      	str	r2, [r3, #28]
 8002fd2:	e000      	b.n	8002fd6 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002fd4:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002fde:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	080032a5 	.word	0x080032a5
 8002fec:	080032c1 	.word	0x080032c1
 8002ff0:	080033f9 	.word	0x080033f9
 8002ff4:	40003800 	.word	0x40003800
 8002ff8:	40003400 	.word	0x40003400

08002ffc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4aa2      	ldr	r2, [pc, #648]	; (800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d101      	bne.n	800301a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003016:	4ba2      	ldr	r3, [pc, #648]	; (80032a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003018:	e001      	b.n	800301e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800301a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a9b      	ldr	r2, [pc, #620]	; (800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d101      	bne.n	8003038 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003034:	4b9a      	ldr	r3, [pc, #616]	; (80032a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003036:	e001      	b.n	800303c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003038:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003048:	d004      	beq.n	8003054 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 8099 	bne.w	8003186 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b02      	cmp	r3, #2
 800305c:	d107      	bne.n	800306e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fa05 	bl	8003478 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 faa8 	bl	80035d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b40      	cmp	r3, #64	; 0x40
 8003090:	d13a      	bne.n	8003108 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d035      	beq.n	8003108 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a7e      	ldr	r2, [pc, #504]	; (800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80030a6:	4b7e      	ldr	r3, [pc, #504]	; (80032a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030a8:	e001      	b.n	80030ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80030aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4979      	ldr	r1, [pc, #484]	; (800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80030b6:	428b      	cmp	r3, r1
 80030b8:	d101      	bne.n	80030be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80030ba:	4b79      	ldr	r3, [pc, #484]	; (80032a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80030bc:	e001      	b.n	80030c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80030be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f043 0202 	orr.w	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff fcaa 	bl	8002a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b08      	cmp	r3, #8
 8003110:	f040 80be 	bne.w	8003290 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80b8 	beq.w	8003290 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800312e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a59      	ldr	r2, [pc, #356]	; (800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800313a:	4b59      	ldr	r3, [pc, #356]	; (80032a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800313c:	e001      	b.n	8003142 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800313e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4954      	ldr	r1, [pc, #336]	; (800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800314a:	428b      	cmp	r3, r1
 800314c:	d101      	bne.n	8003152 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800314e:	4b54      	ldr	r3, [pc, #336]	; (80032a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003150:	e001      	b.n	8003156 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003156:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800315a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800315c:	2300      	movs	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f043 0204 	orr.w	r2, r3, #4
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff fc6c 	bl	8002a5c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003184:	e084      	b.n	8003290 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d107      	bne.n	80031a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f99e 	bl	80034dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d107      	bne.n	80031ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f9dd 	bl	8003574 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d12f      	bne.n	8003224 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d02a      	beq.n	8003224 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2e      	ldr	r2, [pc, #184]	; (800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d101      	bne.n	80031ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80031e8:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031ea:	e001      	b.n	80031f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80031ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4929      	ldr	r1, [pc, #164]	; (800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80031f8:	428b      	cmp	r3, r1
 80031fa:	d101      	bne.n	8003200 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80031fc:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80031fe:	e001      	b.n	8003204 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003204:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003208:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	f043 0202 	orr.w	r2, r3, #2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff fc1c 	bl	8002a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b08      	cmp	r3, #8
 800322c:	d131      	bne.n	8003292 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b00      	cmp	r3, #0
 8003236:	d02c      	beq.n	8003292 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a17      	ldr	r2, [pc, #92]	; (800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003242:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003244:	e001      	b.n	800324a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003246:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4912      	ldr	r1, [pc, #72]	; (800329c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003252:	428b      	cmp	r3, r1
 8003254:	d101      	bne.n	800325a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003258:	e001      	b.n	800325e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800325a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800325e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003262:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003272:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f043 0204 	orr.w	r2, r3, #4
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff fbe7 	bl	8002a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800328e:	e000      	b.n	8003292 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003290:	bf00      	nop
}
 8003292:	bf00      	nop
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40003800 	.word	0x40003800
 80032a0:	40003400 	.word	0x40003400

080032a4 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7fd fefe 	bl	80010b4 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 8084 	bne.w	80033e0 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d13c      	bne.n	800335c <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f0:	d006      	beq.n	8003300 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d116      	bne.n	800332e <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a3a      	ldr	r2, [pc, #232]	; (80033f0 <I2SEx_TxRxDMACplt+0x130>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <I2SEx_TxRxDMACplt+0x4e>
 800330a:	4b3a      	ldr	r3, [pc, #232]	; (80033f4 <I2SEx_TxRxDMACplt+0x134>)
 800330c:	e001      	b.n	8003312 <I2SEx_TxRxDMACplt+0x52>
 800330e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4935      	ldr	r1, [pc, #212]	; (80033f0 <I2SEx_TxRxDMACplt+0x130>)
 800331a:	428b      	cmp	r3, r1
 800331c:	d101      	bne.n	8003322 <I2SEx_TxRxDMACplt+0x62>
 800331e:	4b35      	ldr	r3, [pc, #212]	; (80033f4 <I2SEx_TxRxDMACplt+0x134>)
 8003320:	e001      	b.n	8003326 <I2SEx_TxRxDMACplt+0x66>
 8003322:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	605a      	str	r2, [r3, #4]
 800332c:	e007      	b.n	800333e <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0201 	bic.w	r2, r2, #1
 800333c:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7fd fece 	bl	80010f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	d13c      	bne.n	80033e0 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003374:	d006      	beq.n	8003384 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003380:	2b00      	cmp	r3, #0
 8003382:	d108      	bne.n	8003396 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0202 	bic.w	r2, r2, #2
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	e015      	b.n	80033c2 <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a15      	ldr	r2, [pc, #84]	; (80033f0 <I2SEx_TxRxDMACplt+0x130>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d101      	bne.n	80033a4 <I2SEx_TxRxDMACplt+0xe4>
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <I2SEx_TxRxDMACplt+0x134>)
 80033a2:	e001      	b.n	80033a8 <I2SEx_TxRxDMACplt+0xe8>
 80033a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4910      	ldr	r1, [pc, #64]	; (80033f0 <I2SEx_TxRxDMACplt+0x130>)
 80033b0:	428b      	cmp	r3, r1
 80033b2:	d101      	bne.n	80033b8 <I2SEx_TxRxDMACplt+0xf8>
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <I2SEx_TxRxDMACplt+0x134>)
 80033b6:	e001      	b.n	80033bc <I2SEx_TxRxDMACplt+0xfc>
 80033b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033bc:	f022 0202 	bic.w	r2, r2, #2
 80033c0:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7fd fe8c 	bl	80010f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7fd fe89 	bl	80010f8 <HAL_I2SEx_TxRxCpltCallback>
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40003800 	.word	0x40003800
 80033f4:	40003400 	.word	0x40003400

080033f8 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0203 	bic.w	r2, r2, #3
 8003414:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a15      	ldr	r2, [pc, #84]	; (8003470 <I2SEx_TxRxDMAError+0x78>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d101      	bne.n	8003424 <I2SEx_TxRxDMAError+0x2c>
 8003420:	4b14      	ldr	r3, [pc, #80]	; (8003474 <I2SEx_TxRxDMAError+0x7c>)
 8003422:	e001      	b.n	8003428 <I2SEx_TxRxDMAError+0x30>
 8003424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4910      	ldr	r1, [pc, #64]	; (8003470 <I2SEx_TxRxDMAError+0x78>)
 8003430:	428b      	cmp	r3, r1
 8003432:	d101      	bne.n	8003438 <I2SEx_TxRxDMAError+0x40>
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <I2SEx_TxRxDMAError+0x7c>)
 8003436:	e001      	b.n	800343c <I2SEx_TxRxDMAError+0x44>
 8003438:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343c:	f022 0203 	bic.w	r2, r2, #3
 8003440:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f043 0208 	orr.w	r2, r3, #8
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff fafa 	bl	8002a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40003800 	.word	0x40003800
 8003474:	40003400 	.word	0x40003400

08003478 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	1c99      	adds	r1, r3, #2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6251      	str	r1, [r2, #36]	; 0x24
 800348a:	881a      	ldrh	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d113      	bne.n	80034d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fd fe13 	bl	80010f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	1c99      	adds	r1, r3, #2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6251      	str	r1, [r2, #36]	; 0x24
 80034ee:	8819      	ldrh	r1, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1d      	ldr	r2, [pc, #116]	; (800356c <I2SEx_TxISR_I2SExt+0x90>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <I2SEx_TxISR_I2SExt+0x22>
 80034fa:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <I2SEx_TxISR_I2SExt+0x94>)
 80034fc:	e001      	b.n	8003502 <I2SEx_TxISR_I2SExt+0x26>
 80034fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003502:	460a      	mov	r2, r1
 8003504:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d121      	bne.n	8003562 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a12      	ldr	r2, [pc, #72]	; (800356c <I2SEx_TxISR_I2SExt+0x90>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <I2SEx_TxISR_I2SExt+0x50>
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <I2SEx_TxISR_I2SExt+0x94>)
 800352a:	e001      	b.n	8003530 <I2SEx_TxISR_I2SExt+0x54>
 800352c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	490d      	ldr	r1, [pc, #52]	; (800356c <I2SEx_TxISR_I2SExt+0x90>)
 8003538:	428b      	cmp	r3, r1
 800353a:	d101      	bne.n	8003540 <I2SEx_TxISR_I2SExt+0x64>
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <I2SEx_TxISR_I2SExt+0x94>)
 800353e:	e001      	b.n	8003544 <I2SEx_TxISR_I2SExt+0x68>
 8003540:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003544:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003548:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7fd fdcb 	bl	80010f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40003800 	.word	0x40003800
 8003570:	40003400 	.word	0x40003400

08003574 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68d8      	ldr	r0, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	1c99      	adds	r1, r3, #2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800358c:	b282      	uxth	r2, r0
 800358e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d113      	bne.n	80035d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fd94 	bl	80010f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a20      	ldr	r2, [pc, #128]	; (8003668 <I2SEx_RxISR_I2SExt+0x90>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d101      	bne.n	80035ee <I2SEx_RxISR_I2SExt+0x16>
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <I2SEx_RxISR_I2SExt+0x94>)
 80035ec:	e001      	b.n	80035f2 <I2SEx_RxISR_I2SExt+0x1a>
 80035ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f2:	68d8      	ldr	r0, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	1c99      	adds	r1, r3, #2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80035fe:	b282      	uxth	r2, r0
 8003600:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d121      	bne.n	800365e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a12      	ldr	r2, [pc, #72]	; (8003668 <I2SEx_RxISR_I2SExt+0x90>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d101      	bne.n	8003628 <I2SEx_RxISR_I2SExt+0x50>
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <I2SEx_RxISR_I2SExt+0x94>)
 8003626:	e001      	b.n	800362c <I2SEx_RxISR_I2SExt+0x54>
 8003628:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	490d      	ldr	r1, [pc, #52]	; (8003668 <I2SEx_RxISR_I2SExt+0x90>)
 8003634:	428b      	cmp	r3, r1
 8003636:	d101      	bne.n	800363c <I2SEx_RxISR_I2SExt+0x64>
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <I2SEx_RxISR_I2SExt+0x94>)
 800363a:	e001      	b.n	8003640 <I2SEx_RxISR_I2SExt+0x68>
 800363c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003640:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003644:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7fd fd4d 	bl	80010f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40003800 	.word	0x40003800
 800366c:	40003400 	.word	0x40003400

08003670 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003672:	b08f      	sub	sp, #60	; 0x3c
 8003674:	af0a      	add	r7, sp, #40	; 0x28
 8003676:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e10f      	b.n	80038a2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f005 fb47 	bl	8008d30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2203      	movs	r2, #3
 80036a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d102      	bne.n	80036bc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 ffe6 	bl	8005692 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	687e      	ldr	r6, [r7, #4]
 80036ce:	466d      	mov	r5, sp
 80036d0:	f106 0410 	add.w	r4, r6, #16
 80036d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80036e4:	1d33      	adds	r3, r6, #4
 80036e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036e8:	6838      	ldr	r0, [r7, #0]
 80036ea:	f001 febd 	bl	8005468 <USB_CoreInit>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0d0      	b.n	80038a2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f001 ffd4 	bl	80056b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e04a      	b.n	80037a8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	333d      	adds	r3, #61	; 0x3d
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	333c      	adds	r3, #60	; 0x3c
 8003736:	7bfa      	ldrb	r2, [r7, #15]
 8003738:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800373a:	7bfa      	ldrb	r2, [r7, #15]
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	b298      	uxth	r0, r3
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	3342      	adds	r3, #66	; 0x42
 800374e:	4602      	mov	r2, r0
 8003750:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	333f      	adds	r3, #63	; 0x3f
 8003762:	2200      	movs	r2, #0
 8003764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003766:	7bfa      	ldrb	r2, [r7, #15]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	3344      	adds	r3, #68	; 0x44
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800377a:	7bfa      	ldrb	r2, [r7, #15]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	3348      	adds	r3, #72	; 0x48
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800378e:	7bfa      	ldrb	r2, [r7, #15]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3350      	adds	r3, #80	; 0x50
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	3301      	adds	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
 80037a8:	7bfa      	ldrb	r2, [r7, #15]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d3af      	bcc.n	8003712 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	73fb      	strb	r3, [r7, #15]
 80037b6:	e044      	b.n	8003842 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037b8:	7bfa      	ldrb	r2, [r7, #15]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	3301      	adds	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	429a      	cmp	r2, r3
 800384a:	d3b5      	bcc.n	80037b8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	687e      	ldr	r6, [r7, #4]
 8003854:	466d      	mov	r5, sp
 8003856:	f106 0410 	add.w	r4, r6, #16
 800385a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800385c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800385e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003862:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003866:	e885 0003 	stmia.w	r5, {r0, r1}
 800386a:	1d33      	adds	r3, r6, #4
 800386c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800386e:	6838      	ldr	r0, [r7, #0]
 8003870:	f001 ff4a 	bl	8005708 <USB_DevInit>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e00d      	b.n	80038a2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f002 ff92 	bl	80067c4 <USB_DevDisconnect>

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_PCD_Start+0x1c>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e020      	b.n	8003908 <HAL_PCD_Start+0x5e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d109      	bne.n	80038ea <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d005      	beq.n	80038ea <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 febe 	bl	8005670 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f002 ff42 	bl	8006782 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b08d      	sub	sp, #52	; 0x34
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f003 f800 	bl	800692c <USB_GetMode>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	f040 839d 	bne.w	800406e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f002 ff64 	bl	8006806 <USB_ReadInterrupts>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8393 	beq.w	800406c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f002 ff5b 	bl	8006806 <USB_ReadInterrupts>
 8003950:	4603      	mov	r3, r0
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b02      	cmp	r3, #2
 8003958:	d107      	bne.n	800396a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f002 0202 	and.w	r2, r2, #2
 8003968:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f002 ff49 	bl	8006806 <USB_ReadInterrupts>
 8003974:	4603      	mov	r3, r0
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b10      	cmp	r3, #16
 800397c:	d161      	bne.n	8003a42 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0210 	bic.w	r2, r2, #16
 800398c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	f003 020f 	and.w	r2, r3, #15
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	3304      	adds	r3, #4
 80039ac:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	0c5b      	lsrs	r3, r3, #17
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d124      	bne.n	8003a04 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80039c0:	4013      	ands	r3, r2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d035      	beq.n	8003a32 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80039d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	461a      	mov	r2, r3
 80039d8:	6a38      	ldr	r0, [r7, #32]
 80039da:	f002 fdaf 	bl	800653c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039ea:	441a      	add	r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	091b      	lsrs	r3, r3, #4
 80039f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039fc:	441a      	add	r2, r3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	619a      	str	r2, [r3, #24]
 8003a02:	e016      	b.n	8003a32 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	0c5b      	lsrs	r3, r3, #17
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	2b06      	cmp	r3, #6
 8003a0e:	d110      	bne.n	8003a32 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a16:	2208      	movs	r2, #8
 8003a18:	4619      	mov	r1, r3
 8003a1a:	6a38      	ldr	r0, [r7, #32]
 8003a1c:	f002 fd8e 	bl	800653c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	091b      	lsrs	r3, r3, #4
 8003a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a2c:	441a      	add	r2, r3
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699a      	ldr	r2, [r3, #24]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0210 	orr.w	r2, r2, #16
 8003a40:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f002 fedd 	bl	8006806 <USB_ReadInterrupts>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a56:	d16e      	bne.n	8003b36 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f002 fee3 	bl	800682c <USB_ReadDevAllOutEpInterrupt>
 8003a66:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a68:	e062      	b.n	8003b30 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d057      	beq.n	8003b24 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 ff08 	bl	8006894 <USB_ReadDevOutEPInterrupt>
 8003a84:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00c      	beq.n	8003aaa <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fdb1 	bl	800460c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00c      	beq.n	8003ace <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 feab 	bl	8004824 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2310      	movs	r3, #16
 8003ae8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b00:	461a      	mov	r2, r3
 8003b02:	2320      	movs	r3, #32
 8003b04:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d009      	beq.n	8003b24 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b22:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	3301      	adds	r3, #1
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d199      	bne.n	8003a6a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f002 fe63 	bl	8006806 <USB_ReadInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b4a:	f040 80c0 	bne.w	8003cce <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f002 fe84 	bl	8006860 <USB_ReadDevAllInEpInterrupt>
 8003b58:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b5e:	e0b2      	b.n	8003cc6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80a7 	beq.w	8003cba <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f002 feaa 	bl	80068d0 <USB_ReadDevInEPInterrupt>
 8003b7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d057      	beq.n	8003c38 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	2201      	movs	r2, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69f9      	ldr	r1, [r7, #28]
 8003ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ba8:	4013      	ands	r3, r2
 8003baa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2301      	movs	r3, #1
 8003bbc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d132      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3348      	adds	r3, #72	; 0x48
 8003bd6:	6819      	ldr	r1, [r3, #0]
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4403      	add	r3, r0
 8003be6:	3344      	adds	r3, #68	; 0x44
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4419      	add	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4403      	add	r3, r0
 8003bfa:	3348      	adds	r3, #72	; 0x48
 8003bfc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d113      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x31c>
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3350      	adds	r3, #80	; 0x50
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d108      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c24:	461a      	mov	r2, r3
 8003c26:	2101      	movs	r1, #1
 8003c28:	f002 feb2 	bl	8006990 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f005 f90b 	bl	8008e4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2308      	movs	r3, #8
 8003c52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d008      	beq.n	8003c70 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d008      	beq.n	8003c8c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c86:	461a      	mov	r2, r3
 8003c88:	2340      	movs	r3, #64	; 0x40
 8003c8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003cb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fc1b 	bl	80044f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f47f af49 	bne.w	8003b60 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f002 fd97 	bl	8006806 <USB_ReadInterrupts>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ce2:	d122      	bne.n	8003d2a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d108      	bne.n	8003d14 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fe27 	bl	8004960 <HAL_PCDEx_LPM_Callback>
 8003d12:	e002      	b.n	8003d1a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f005 f911 	bl	8008f3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695a      	ldr	r2, [r3, #20]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 fd69 	bl	8006806 <USB_ReadInterrupts>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3e:	d112      	bne.n	8003d66 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d102      	bne.n	8003d56 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f005 f8cd 	bl	8008ef0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d64:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f002 fd4b 	bl	8006806 <USB_ReadInterrupts>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7a:	f040 80c7 	bne.w	8003f0c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2110      	movs	r1, #16
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f001 fe19 	bl	80059d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da2:	e056      	b.n	8003e52 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db0:	461a      	mov	r2, r3
 8003db2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003db6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc8:	0151      	lsls	r1, r2, #5
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	440a      	add	r2, r1
 8003dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dd6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003df6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	461a      	mov	r2, r3
 8003e06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e0a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e1c:	0151      	lsls	r1, r2, #5
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	440a      	add	r2, r1
 8003e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e3c:	0151      	lsls	r1, r2, #5
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	440a      	add	r2, r1
 8003e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e4a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	3301      	adds	r3, #1
 8003e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d3a3      	bcc.n	8003da4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e6a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e6e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d016      	beq.n	8003ea6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e82:	69fa      	ldr	r2, [r7, #28]
 8003e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e88:	f043 030b 	orr.w	r3, r3, #11
 8003e8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9e:	f043 030b 	orr.w	r3, r3, #11
 8003ea2:	6453      	str	r3, [r2, #68]	; 0x44
 8003ea4:	e015      	b.n	8003ed2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003eb8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003ebc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ecc:	f043 030b 	orr.w	r3, r3, #11
 8003ed0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ee4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f002 fd4a 	bl	8006990 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f002 fc78 	bl	8006806 <USB_ReadInterrupts>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f20:	d124      	bne.n	8003f6c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f002 fd0e 	bl	8006948 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fdae 	bl	8005a92 <USB_GetDevSpeed>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681c      	ldr	r4, [r3, #0]
 8003f42:	f001 f947 	bl	80051d4 <HAL_RCC_GetHCLKFreq>
 8003f46:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4620      	mov	r0, r4
 8003f52:	f001 faeb 	bl	800552c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f004 ffa1 	bl	8008e9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695a      	ldr	r2, [r3, #20]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f002 fc48 	bl	8006806 <USB_ReadInterrupts>
 8003f76:	4603      	mov	r3, r0
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d10a      	bne.n	8003f96 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f004 ff7e 	bl	8008e82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f002 0208 	and.w	r2, r2, #8
 8003f94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f002 fc33 	bl	8006806 <USB_ReadInterrupts>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003faa:	d10f      	bne.n	8003fcc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f004 ffe0 	bl	8008f7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f002 fc18 	bl	8006806 <USB_ReadInterrupts>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fe0:	d10f      	bne.n	8004002 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	4619      	mov	r1, r3
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f004 ffb3 	bl	8008f58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004000:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f002 fbfd 	bl	8006806 <USB_ReadInterrupts>
 800400c:	4603      	mov	r3, r0
 800400e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004016:	d10a      	bne.n	800402e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f004 ffc1 	bl	8008fa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800402c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f002 fbe7 	bl	8006806 <USB_ReadInterrupts>
 8004038:	4603      	mov	r3, r0
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b04      	cmp	r3, #4
 8004040:	d115      	bne.n	800406e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f004 ffb1 	bl	8008fbc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6859      	ldr	r1, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	e000      	b.n	800406e <HAL_PCD_IRQHandler+0x75e>
      return;
 800406c:	bf00      	nop
    }
  }
}
 800406e:	3734      	adds	r7, #52	; 0x34
 8004070:	46bd      	mov	sp, r7
 8004072:	bd90      	pop	{r4, r7, pc}

08004074 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_PCD_SetAddress+0x1a>
 800408a:	2302      	movs	r3, #2
 800408c:	e013      	b.n	80040b6 <HAL_PCD_SetAddress+0x42>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	78fa      	ldrb	r2, [r7, #3]
 80040a4:	4611      	mov	r1, r2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f002 fb45 	bl	8006736 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	4608      	mov	r0, r1
 80040c8:	4611      	mov	r1, r2
 80040ca:	461a      	mov	r2, r3
 80040cc:	4603      	mov	r3, r0
 80040ce:	70fb      	strb	r3, [r7, #3]
 80040d0:	460b      	mov	r3, r1
 80040d2:	803b      	strh	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	da0f      	bge.n	8004104 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	f003 020f 	and.w	r2, r3, #15
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	3338      	adds	r3, #56	; 0x38
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4413      	add	r3, r2
 80040f8:	3304      	adds	r3, #4
 80040fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	705a      	strb	r2, [r3, #1]
 8004102:	e00f      	b.n	8004124 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	f003 020f 	and.w	r2, r3, #15
 800410a:	4613      	mov	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	4413      	add	r3, r2
 800411a:	3304      	adds	r3, #4
 800411c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	b2da      	uxtb	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004130:	883a      	ldrh	r2, [r7, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	78ba      	ldrb	r2, [r7, #2]
 800413a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	785b      	ldrb	r3, [r3, #1]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d004      	beq.n	800414e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800414e:	78bb      	ldrb	r3, [r7, #2]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d102      	bne.n	800415a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_PCD_EP_Open+0xaa>
 8004164:	2302      	movs	r3, #2
 8004166:	e00e      	b.n	8004186 <HAL_PCD_EP_Open+0xc8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68f9      	ldr	r1, [r7, #12]
 8004176:	4618      	mov	r0, r3
 8004178:	f001 fcb0 	bl	8005adc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004184:	7afb      	ldrb	r3, [r7, #11]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	460b      	mov	r3, r1
 8004198:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800419a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	da0f      	bge.n	80041c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	f003 020f 	and.w	r2, r3, #15
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	3338      	adds	r3, #56	; 0x38
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4413      	add	r3, r2
 80041b6:	3304      	adds	r3, #4
 80041b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	705a      	strb	r2, [r3, #1]
 80041c0:	e00f      	b.n	80041e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	f003 020f 	and.w	r2, r3, #15
 80041c8:	4613      	mov	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4413      	add	r3, r2
 80041d8:	3304      	adds	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_PCD_EP_Close+0x6e>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e00e      	b.n	800421a <HAL_PCD_EP_Close+0x8c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68f9      	ldr	r1, [r7, #12]
 800420a:	4618      	mov	r0, r3
 800420c:	f001 fcee 	bl	8005bec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b086      	sub	sp, #24
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	460b      	mov	r3, r1
 8004230:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004232:	7afb      	ldrb	r3, [r7, #11]
 8004234:	f003 020f 	and.w	r2, r3, #15
 8004238:	4613      	mov	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	1a9b      	subs	r3, r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	3304      	adds	r3, #4
 800424a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2200      	movs	r2, #0
 800425c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2200      	movs	r2, #0
 8004262:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004264:	7afb      	ldrb	r3, [r7, #11]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	b2da      	uxtb	r2, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d102      	bne.n	800427e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800427e:	7afb      	ldrb	r3, [r7, #11]
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	6979      	ldr	r1, [r7, #20]
 8004296:	f001 ffc9 	bl	800622c <USB_EP0StartXfer>
 800429a:	e008      	b.n	80042ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	6979      	ldr	r1, [r7, #20]
 80042aa:	f001 fd7b 	bl	8005da4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	f003 020f 	and.w	r2, r3, #15
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	460b      	mov	r3, r1
 80042f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042f8:	7afb      	ldrb	r3, [r7, #11]
 80042fa:	f003 020f 	and.w	r2, r3, #15
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	3338      	adds	r3, #56	; 0x38
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	3304      	adds	r3, #4
 800430e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2200      	movs	r2, #0
 8004320:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2201      	movs	r2, #1
 8004326:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004328:	7afb      	ldrb	r3, [r7, #11]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	b2da      	uxtb	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d102      	bne.n	8004342 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004342:	7afb      	ldrb	r3, [r7, #11]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	6979      	ldr	r1, [r7, #20]
 800435a:	f001 ff67 	bl	800622c <USB_EP0StartXfer>
 800435e:	e008      	b.n	8004372 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	6979      	ldr	r1, [r7, #20]
 800436e:	f001 fd19 	bl	8005da4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	f003 020f 	and.w	r2, r3, #15
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d901      	bls.n	800439a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e050      	b.n	800443c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800439a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da0f      	bge.n	80043c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 020f 	and.w	r2, r3, #15
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	3338      	adds	r3, #56	; 0x38
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	3304      	adds	r3, #4
 80043b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	705a      	strb	r2, [r3, #1]
 80043c0:	e00d      	b.n	80043de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	4613      	mov	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	4413      	add	r3, r2
 80043d4:	3304      	adds	r3, #4
 80043d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_PCD_EP_SetStall+0x82>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e01e      	b.n	800443c <HAL_PCD_EP_SetStall+0xc0>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68f9      	ldr	r1, [r7, #12]
 800440c:	4618      	mov	r0, r3
 800440e:	f002 f8be 	bl	800658e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10a      	bne.n	8004432 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	b2d9      	uxtb	r1, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800442c:	461a      	mov	r2, r3
 800442e:	f002 faaf 	bl	8006990 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	f003 020f 	and.w	r2, r3, #15
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	429a      	cmp	r2, r3
 800445c:	d901      	bls.n	8004462 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e042      	b.n	80044e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004466:	2b00      	cmp	r3, #0
 8004468:	da0f      	bge.n	800448a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	f003 020f 	and.w	r2, r3, #15
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	3338      	adds	r3, #56	; 0x38
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	3304      	adds	r3, #4
 8004480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	705a      	strb	r2, [r3, #1]
 8004488:	e00f      	b.n	80044aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800448a:	78fb      	ldrb	r3, [r7, #3]
 800448c:	f003 020f 	and.w	r2, r3, #15
 8004490:	4613      	mov	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	4413      	add	r3, r2
 80044a0:	3304      	adds	r3, #4
 80044a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_PCD_EP_ClrStall+0x86>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e00e      	b.n	80044e8 <HAL_PCD_EP_ClrStall+0xa4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	4618      	mov	r0, r3
 80044da:	f002 f8c6 	bl	800666a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	; 0x28
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	4613      	mov	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	3338      	adds	r3, #56	; 0x38
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4413      	add	r3, r2
 8004514:	3304      	adds	r3, #4
 8004516:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	429a      	cmp	r2, r3
 8004522:	d901      	bls.n	8004528 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e06c      	b.n	8004602 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	429a      	cmp	r2, r3
 800453c:	d902      	bls.n	8004544 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	3303      	adds	r3, #3
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800454c:	e02b      	b.n	80045a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	429a      	cmp	r2, r3
 8004562:	d902      	bls.n	800456a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3303      	adds	r3, #3
 800456e:	089b      	lsrs	r3, r3, #2
 8004570:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	68d9      	ldr	r1, [r3, #12]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004582:	b2db      	uxtb	r3, r3
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	4603      	mov	r3, r0
 8004588:	6978      	ldr	r0, [r7, #20]
 800458a:	f001 ffa2 	bl	80064d2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	441a      	add	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	441a      	add	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d809      	bhi.n	80045d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	699a      	ldr	r2, [r3, #24]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d203      	bcs.n	80045d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1be      	bne.n	800454e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	695a      	ldr	r2, [r3, #20]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d811      	bhi.n	8004600 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	2201      	movs	r2, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	6939      	ldr	r1, [r7, #16]
 80045f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045fc:	4013      	ands	r3, r2
 80045fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	333c      	adds	r3, #60	; 0x3c
 8004624:	3304      	adds	r3, #4
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b01      	cmp	r3, #1
 8004640:	f040 80a0 	bne.w	8004784 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d015      	beq.n	800467a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4a72      	ldr	r2, [pc, #456]	; (800481c <PCD_EP_OutXfrComplete_int+0x210>)
 8004652:	4293      	cmp	r3, r2
 8004654:	f240 80dd 	bls.w	8004812 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80d7 	beq.w	8004812 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004670:	461a      	mov	r2, r3
 8004672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004676:	6093      	str	r3, [r2, #8]
 8004678:	e0cb      	b.n	8004812 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004690:	461a      	mov	r2, r3
 8004692:	2320      	movs	r3, #32
 8004694:	6093      	str	r3, [r2, #8]
 8004696:	e0bc      	b.n	8004812 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f040 80b7 	bne.w	8004812 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a5d      	ldr	r2, [pc, #372]	; (800481c <PCD_EP_OutXfrComplete_int+0x210>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d90f      	bls.n	80046cc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c2:	461a      	mov	r2, r3
 80046c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c8:	6093      	str	r3, [r2, #8]
 80046ca:	e0a2      	b.n	8004812 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80046de:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	0159      	lsls	r1, r3, #5
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	440b      	add	r3, r1
 80046e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80046f2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4403      	add	r3, r0
 8004702:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004706:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800471a:	6819      	ldr	r1, [r3, #0]
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4403      	add	r3, r0
 800472a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4419      	add	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	4613      	mov	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4403      	add	r3, r0
 8004740:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004744:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d114      	bne.n	8004776 <PCD_EP_OutXfrComplete_int+0x16a>
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d108      	bne.n	8004776 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800476e:	461a      	mov	r2, r3
 8004770:	2101      	movs	r1, #1
 8004772:	f002 f90d 	bl	8006990 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	4619      	mov	r1, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f004 fb4b 	bl	8008e18 <HAL_PCD_DataOutStageCallback>
 8004782:	e046      	b.n	8004812 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4a26      	ldr	r2, [pc, #152]	; (8004820 <PCD_EP_OutXfrComplete_int+0x214>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d124      	bne.n	80047d6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a2:	461a      	mov	r2, r3
 80047a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a8:	6093      	str	r3, [r2, #8]
 80047aa:	e032      	b.n	8004812 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d008      	beq.n	80047c8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c2:	461a      	mov	r2, r3
 80047c4:	2320      	movs	r3, #32
 80047c6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f004 fb22 	bl	8008e18 <HAL_PCD_DataOutStageCallback>
 80047d4:	e01d      	b.n	8004812 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d114      	bne.n	8004806 <PCD_EP_OutXfrComplete_int+0x1fa>
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d108      	bne.n	8004806 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047fe:	461a      	mov	r2, r3
 8004800:	2100      	movs	r1, #0
 8004802:	f002 f8c5 	bl	8006990 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f004 fb03 	bl	8008e18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	4f54300a 	.word	0x4f54300a
 8004820:	4f54310a 	.word	0x4f54310a

08004824 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	333c      	adds	r3, #60	; 0x3c
 800483c:	3304      	adds	r3, #4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4a15      	ldr	r2, [pc, #84]	; (80048ac <PCD_EP_OutSetupPacket_int+0x88>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d90e      	bls.n	8004878 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004860:	2b00      	cmp	r3, #0
 8004862:	d009      	beq.n	8004878 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004870:	461a      	mov	r2, r3
 8004872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004876:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f004 fabb 	bl	8008df4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4a0a      	ldr	r2, [pc, #40]	; (80048ac <PCD_EP_OutSetupPacket_int+0x88>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d90c      	bls.n	80048a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d108      	bne.n	80048a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004898:	461a      	mov	r2, r3
 800489a:	2101      	movs	r1, #1
 800489c:	f002 f878 	bl	8006990 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	4f54300a 	.word	0x4f54300a

080048b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
 80048bc:	4613      	mov	r3, r2
 80048be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d107      	bne.n	80048de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048ce:	883b      	ldrh	r3, [r7, #0]
 80048d0:	0419      	lsls	r1, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	430a      	orrs	r2, r1
 80048da:	629a      	str	r2, [r3, #40]	; 0x28
 80048dc:	e028      	b.n	8004930 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	4413      	add	r3, r2
 80048ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048ec:	2300      	movs	r3, #0
 80048ee:	73fb      	strb	r3, [r7, #15]
 80048f0:	e00d      	b.n	800490e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	3340      	adds	r3, #64	; 0x40
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	4413      	add	r3, r2
 8004906:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	3301      	adds	r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
 800490e:	7bfa      	ldrb	r2, [r7, #15]
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	3b01      	subs	r3, #1
 8004914:	429a      	cmp	r2, r3
 8004916:	d3ec      	bcc.n	80048f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004918:	883b      	ldrh	r3, [r7, #0]
 800491a:	0418      	lsls	r0, r3, #16
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	3b01      	subs	r3, #1
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	4302      	orrs	r2, r0
 8004928:	3340      	adds	r3, #64	; 0x40
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	460b      	mov	r3, r1
 8004948:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	887a      	ldrh	r2, [r7, #2]
 8004950:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e25b      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d075      	beq.n	8004a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004996:	4ba3      	ldr	r3, [pc, #652]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d00c      	beq.n	80049bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049a2:	4ba0      	ldr	r3, [pc, #640]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d112      	bne.n	80049d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ae:	4b9d      	ldr	r3, [pc, #628]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ba:	d10b      	bne.n	80049d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049bc:	4b99      	ldr	r3, [pc, #612]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d05b      	beq.n	8004a80 <HAL_RCC_OscConfig+0x108>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d157      	bne.n	8004a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e236      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049dc:	d106      	bne.n	80049ec <HAL_RCC_OscConfig+0x74>
 80049de:	4b91      	ldr	r3, [pc, #580]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a90      	ldr	r2, [pc, #576]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e01d      	b.n	8004a28 <HAL_RCC_OscConfig+0xb0>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049f4:	d10c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x98>
 80049f6:	4b8b      	ldr	r3, [pc, #556]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a8a      	ldr	r2, [pc, #552]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	4b88      	ldr	r3, [pc, #544]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a87      	ldr	r2, [pc, #540]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e00b      	b.n	8004a28 <HAL_RCC_OscConfig+0xb0>
 8004a10:	4b84      	ldr	r3, [pc, #528]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a83      	ldr	r2, [pc, #524]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	4b81      	ldr	r3, [pc, #516]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a80      	ldr	r2, [pc, #512]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d013      	beq.n	8004a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7fc ff5e 	bl	80018f0 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a38:	f7fc ff5a 	bl	80018f0 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b64      	cmp	r3, #100	; 0x64
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e1fb      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4a:	4b76      	ldr	r3, [pc, #472]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0xc0>
 8004a56:	e014      	b.n	8004a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fc ff4a 	bl	80018f0 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a60:	f7fc ff46 	bl	80018f0 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	; 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e1e7      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a72:	4b6c      	ldr	r3, [pc, #432]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0xe8>
 8004a7e:	e000      	b.n	8004a82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d063      	beq.n	8004b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a8e:	4b65      	ldr	r3, [pc, #404]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00b      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a9a:	4b62      	ldr	r3, [pc, #392]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d11c      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aa6:	4b5f      	ldr	r3, [pc, #380]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d116      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ab2:	4b5c      	ldr	r3, [pc, #368]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_RCC_OscConfig+0x152>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d001      	beq.n	8004aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e1bb      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aca:	4b56      	ldr	r3, [pc, #344]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4952      	ldr	r1, [pc, #328]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ade:	e03a      	b.n	8004b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d020      	beq.n	8004b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ae8:	4b4f      	ldr	r3, [pc, #316]	; (8004c28 <HAL_RCC_OscConfig+0x2b0>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aee:	f7fc feff 	bl	80018f0 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af6:	f7fc fefb 	bl	80018f0 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e19c      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b08:	4b46      	ldr	r3, [pc, #280]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0f0      	beq.n	8004af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b14:	4b43      	ldr	r3, [pc, #268]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	4940      	ldr	r1, [pc, #256]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]
 8004b28:	e015      	b.n	8004b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b2a:	4b3f      	ldr	r3, [pc, #252]	; (8004c28 <HAL_RCC_OscConfig+0x2b0>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b30:	f7fc fede 	bl	80018f0 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b38:	f7fc feda 	bl	80018f0 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e17b      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b4a:	4b36      	ldr	r3, [pc, #216]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d030      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d016      	beq.n	8004b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b6a:	4b30      	ldr	r3, [pc, #192]	; (8004c2c <HAL_RCC_OscConfig+0x2b4>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b70:	f7fc febe 	bl	80018f0 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b78:	f7fc feba 	bl	80018f0 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e15b      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b8a:	4b26      	ldr	r3, [pc, #152]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0x200>
 8004b96:	e015      	b.n	8004bc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b98:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <HAL_RCC_OscConfig+0x2b4>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9e:	f7fc fea7 	bl	80018f0 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba6:	f7fc fea3 	bl	80018f0 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e144      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb8:	4b1a      	ldr	r3, [pc, #104]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f0      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80a0 	beq.w	8004d12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd6:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10f      	bne.n	8004c02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be2:	2300      	movs	r3, #0
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	4a0e      	ldr	r2, [pc, #56]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf2:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <HAL_RCC_OscConfig+0x2ac>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	60bb      	str	r3, [r7, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c02:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_OscConfig+0x2b8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d121      	bne.n	8004c52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c0e:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <HAL_RCC_OscConfig+0x2b8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a07      	ldr	r2, [pc, #28]	; (8004c30 <HAL_RCC_OscConfig+0x2b8>)
 8004c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1a:	f7fc fe69 	bl	80018f0 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c20:	e011      	b.n	8004c46 <HAL_RCC_OscConfig+0x2ce>
 8004c22:	bf00      	nop
 8004c24:	40023800 	.word	0x40023800
 8004c28:	42470000 	.word	0x42470000
 8004c2c:	42470e80 	.word	0x42470e80
 8004c30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c34:	f7fc fe5c 	bl	80018f0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e0fd      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c46:	4b81      	ldr	r3, [pc, #516]	; (8004e4c <HAL_RCC_OscConfig+0x4d4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d106      	bne.n	8004c68 <HAL_RCC_OscConfig+0x2f0>
 8004c5a:	4b7d      	ldr	r3, [pc, #500]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	4a7c      	ldr	r2, [pc, #496]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	6713      	str	r3, [r2, #112]	; 0x70
 8004c66:	e01c      	b.n	8004ca2 <HAL_RCC_OscConfig+0x32a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b05      	cmp	r3, #5
 8004c6e:	d10c      	bne.n	8004c8a <HAL_RCC_OscConfig+0x312>
 8004c70:	4b77      	ldr	r3, [pc, #476]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c74:	4a76      	ldr	r2, [pc, #472]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004c76:	f043 0304 	orr.w	r3, r3, #4
 8004c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7c:	4b74      	ldr	r3, [pc, #464]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c80:	4a73      	ldr	r2, [pc, #460]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	6713      	str	r3, [r2, #112]	; 0x70
 8004c88:	e00b      	b.n	8004ca2 <HAL_RCC_OscConfig+0x32a>
 8004c8a:	4b71      	ldr	r3, [pc, #452]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	4a70      	ldr	r2, [pc, #448]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	6713      	str	r3, [r2, #112]	; 0x70
 8004c96:	4b6e      	ldr	r3, [pc, #440]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9a:	4a6d      	ldr	r2, [pc, #436]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004c9c:	f023 0304 	bic.w	r3, r3, #4
 8004ca0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d015      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004caa:	f7fc fe21 	bl	80018f0 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb0:	e00a      	b.n	8004cc8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cb2:	f7fc fe1d 	bl	80018f0 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e0bc      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc8:	4b61      	ldr	r3, [pc, #388]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0ee      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x33a>
 8004cd4:	e014      	b.n	8004d00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd6:	f7fc fe0b 	bl	80018f0 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7fc fe07 	bl	80018f0 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0a6      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cf4:	4b56      	ldr	r3, [pc, #344]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1ee      	bne.n	8004cde <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d105      	bne.n	8004d12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d06:	4b52      	ldr	r3, [pc, #328]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	4a51      	ldr	r2, [pc, #324]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 8092 	beq.w	8004e40 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d1c:	4b4c      	ldr	r3, [pc, #304]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 030c 	and.w	r3, r3, #12
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d05c      	beq.n	8004de2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d141      	bne.n	8004db4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d30:	4b48      	ldr	r3, [pc, #288]	; (8004e54 <HAL_RCC_OscConfig+0x4dc>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d36:	f7fc fddb 	bl	80018f0 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d3e:	f7fc fdd7 	bl	80018f0 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e078      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d50:	4b3f      	ldr	r3, [pc, #252]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f0      	bne.n	8004d3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	019b      	lsls	r3, r3, #6
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	3b01      	subs	r3, #1
 8004d76:	041b      	lsls	r3, r3, #16
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	061b      	lsls	r3, r3, #24
 8004d80:	4933      	ldr	r1, [pc, #204]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d86:	4b33      	ldr	r3, [pc, #204]	; (8004e54 <HAL_RCC_OscConfig+0x4dc>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8c:	f7fc fdb0 	bl	80018f0 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fc fdac 	bl	80018f0 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e04d      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da6:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x41c>
 8004db2:	e045      	b.n	8004e40 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db4:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <HAL_RCC_OscConfig+0x4dc>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dba:	f7fc fd99 	bl	80018f0 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc2:	f7fc fd95 	bl	80018f0 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e036      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd4:	4b1e      	ldr	r3, [pc, #120]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1f0      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x44a>
 8004de0:	e02e      	b.n	8004e40 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e029      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dee:	4b18      	ldr	r3, [pc, #96]	; (8004e50 <HAL_RCC_OscConfig+0x4d8>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d11c      	bne.n	8004e3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d115      	bne.n	8004e3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e16:	4013      	ands	r3, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d10d      	bne.n	8004e3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40007000 	.word	0x40007000
 8004e50:	40023800 	.word	0x40023800
 8004e54:	42470060 	.word	0x42470060

08004e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0cc      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e6c:	4b68      	ldr	r3, [pc, #416]	; (8005010 <HAL_RCC_ClockConfig+0x1b8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d90c      	bls.n	8004e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7a:	4b65      	ldr	r3, [pc, #404]	; (8005010 <HAL_RCC_ClockConfig+0x1b8>)
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	4b63      	ldr	r3, [pc, #396]	; (8005010 <HAL_RCC_ClockConfig+0x1b8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0b8      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d020      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eac:	4b59      	ldr	r3, [pc, #356]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4a58      	ldr	r2, [pc, #352]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ec4:	4b53      	ldr	r3, [pc, #332]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4a52      	ldr	r2, [pc, #328]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed0:	4b50      	ldr	r3, [pc, #320]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	494d      	ldr	r1, [pc, #308]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d044      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef6:	4b47      	ldr	r3, [pc, #284]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d119      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e07f      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d003      	beq.n	8004f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d107      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f16:	4b3f      	ldr	r3, [pc, #252]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e06f      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f26:	4b3b      	ldr	r3, [pc, #236]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e067      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f36:	4b37      	ldr	r3, [pc, #220]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f023 0203 	bic.w	r2, r3, #3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	4934      	ldr	r1, [pc, #208]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f48:	f7fc fcd2 	bl	80018f0 <HAL_GetTick>
 8004f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4e:	e00a      	b.n	8004f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f50:	f7fc fcce 	bl	80018f0 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e04f      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f66:	4b2b      	ldr	r3, [pc, #172]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 020c 	and.w	r2, r3, #12
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d1eb      	bne.n	8004f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f78:	4b25      	ldr	r3, [pc, #148]	; (8005010 <HAL_RCC_ClockConfig+0x1b8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d20c      	bcs.n	8004fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f86:	4b22      	ldr	r3, [pc, #136]	; (8005010 <HAL_RCC_ClockConfig+0x1b8>)
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b20      	ldr	r3, [pc, #128]	; (8005010 <HAL_RCC_ClockConfig+0x1b8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e032      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fac:	4b19      	ldr	r3, [pc, #100]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4916      	ldr	r1, [pc, #88]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d009      	beq.n	8004fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fca:	4b12      	ldr	r3, [pc, #72]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	490e      	ldr	r1, [pc, #56]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fde:	f000 f821 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8004fe2:	4601      	mov	r1, r0
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	091b      	lsrs	r3, r3, #4
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff0:	5cd3      	ldrb	r3, [r2, r3]
 8004ff2:	fa21 f303 	lsr.w	r3, r1, r3
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <HAL_RCC_ClockConfig+0x1c4>)
 8004ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_RCC_ClockConfig+0x1c8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fc fc32 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40023c00 	.word	0x40023c00
 8005014:	40023800 	.word	0x40023800
 8005018:	0800d15c 	.word	0x0800d15c
 800501c:	2000040c 	.word	0x2000040c
 8005020:	20000410 	.word	0x20000410

08005024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	607b      	str	r3, [r7, #4]
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	2300      	movs	r3, #0
 8005034:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800503a:	4b63      	ldr	r3, [pc, #396]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	2b04      	cmp	r3, #4
 8005044:	d007      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0x32>
 8005046:	2b08      	cmp	r3, #8
 8005048:	d008      	beq.n	800505c <HAL_RCC_GetSysClockFreq+0x38>
 800504a:	2b00      	cmp	r3, #0
 800504c:	f040 80b4 	bne.w	80051b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005050:	4b5e      	ldr	r3, [pc, #376]	; (80051cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005052:	60bb      	str	r3, [r7, #8]
       break;
 8005054:	e0b3      	b.n	80051be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005056:	4b5e      	ldr	r3, [pc, #376]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005058:	60bb      	str	r3, [r7, #8]
      break;
 800505a:	e0b0      	b.n	80051be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800505c:	4b5a      	ldr	r3, [pc, #360]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005064:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005066:	4b58      	ldr	r3, [pc, #352]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d04a      	beq.n	8005108 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005072:	4b55      	ldr	r3, [pc, #340]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	f04f 0400 	mov.w	r4, #0
 800507c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	ea03 0501 	and.w	r5, r3, r1
 8005088:	ea04 0602 	and.w	r6, r4, r2
 800508c:	4629      	mov	r1, r5
 800508e:	4632      	mov	r2, r6
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	f04f 0400 	mov.w	r4, #0
 8005098:	0154      	lsls	r4, r2, #5
 800509a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800509e:	014b      	lsls	r3, r1, #5
 80050a0:	4619      	mov	r1, r3
 80050a2:	4622      	mov	r2, r4
 80050a4:	1b49      	subs	r1, r1, r5
 80050a6:	eb62 0206 	sbc.w	r2, r2, r6
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	f04f 0400 	mov.w	r4, #0
 80050b2:	0194      	lsls	r4, r2, #6
 80050b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050b8:	018b      	lsls	r3, r1, #6
 80050ba:	1a5b      	subs	r3, r3, r1
 80050bc:	eb64 0402 	sbc.w	r4, r4, r2
 80050c0:	f04f 0100 	mov.w	r1, #0
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	00e2      	lsls	r2, r4, #3
 80050ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050ce:	00d9      	lsls	r1, r3, #3
 80050d0:	460b      	mov	r3, r1
 80050d2:	4614      	mov	r4, r2
 80050d4:	195b      	adds	r3, r3, r5
 80050d6:	eb44 0406 	adc.w	r4, r4, r6
 80050da:	f04f 0100 	mov.w	r1, #0
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	0262      	lsls	r2, r4, #9
 80050e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80050e8:	0259      	lsls	r1, r3, #9
 80050ea:	460b      	mov	r3, r1
 80050ec:	4614      	mov	r4, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	4621      	mov	r1, r4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f04f 0400 	mov.w	r4, #0
 80050f8:	461a      	mov	r2, r3
 80050fa:	4623      	mov	r3, r4
 80050fc:	f7fb fadc 	bl	80006b8 <__aeabi_uldivmod>
 8005100:	4603      	mov	r3, r0
 8005102:	460c      	mov	r4, r1
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e049      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005108:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	099b      	lsrs	r3, r3, #6
 800510e:	f04f 0400 	mov.w	r4, #0
 8005112:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	ea03 0501 	and.w	r5, r3, r1
 800511e:	ea04 0602 	and.w	r6, r4, r2
 8005122:	4629      	mov	r1, r5
 8005124:	4632      	mov	r2, r6
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	f04f 0400 	mov.w	r4, #0
 800512e:	0154      	lsls	r4, r2, #5
 8005130:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005134:	014b      	lsls	r3, r1, #5
 8005136:	4619      	mov	r1, r3
 8005138:	4622      	mov	r2, r4
 800513a:	1b49      	subs	r1, r1, r5
 800513c:	eb62 0206 	sbc.w	r2, r2, r6
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	0194      	lsls	r4, r2, #6
 800514a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800514e:	018b      	lsls	r3, r1, #6
 8005150:	1a5b      	subs	r3, r3, r1
 8005152:	eb64 0402 	sbc.w	r4, r4, r2
 8005156:	f04f 0100 	mov.w	r1, #0
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	00e2      	lsls	r2, r4, #3
 8005160:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005164:	00d9      	lsls	r1, r3, #3
 8005166:	460b      	mov	r3, r1
 8005168:	4614      	mov	r4, r2
 800516a:	195b      	adds	r3, r3, r5
 800516c:	eb44 0406 	adc.w	r4, r4, r6
 8005170:	f04f 0100 	mov.w	r1, #0
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	02a2      	lsls	r2, r4, #10
 800517a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800517e:	0299      	lsls	r1, r3, #10
 8005180:	460b      	mov	r3, r1
 8005182:	4614      	mov	r4, r2
 8005184:	4618      	mov	r0, r3
 8005186:	4621      	mov	r1, r4
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f04f 0400 	mov.w	r4, #0
 800518e:	461a      	mov	r2, r3
 8005190:	4623      	mov	r3, r4
 8005192:	f7fb fa91 	bl	80006b8 <__aeabi_uldivmod>
 8005196:	4603      	mov	r3, r0
 8005198:	460c      	mov	r4, r1
 800519a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	0c1b      	lsrs	r3, r3, #16
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	3301      	adds	r3, #1
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b4:	60bb      	str	r3, [r7, #8]
      break;
 80051b6:	e002      	b.n	80051be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051b8:	4b04      	ldr	r3, [pc, #16]	; (80051cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051ba:	60bb      	str	r3, [r7, #8]
      break;
 80051bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051be:	68bb      	ldr	r3, [r7, #8]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	00f42400 	.word	0x00f42400
 80051d0:	007a1200 	.word	0x007a1200

080051d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051d8:	4b03      	ldr	r3, [pc, #12]	; (80051e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051da:	681b      	ldr	r3, [r3, #0]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	2000040c 	.word	0x2000040c

080051ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d105      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005210:	2b00      	cmp	r3, #0
 8005212:	d035      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005214:	4b62      	ldr	r3, [pc, #392]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800521a:	f7fc fb69 	bl	80018f0 <HAL_GetTick>
 800521e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005220:	e008      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005222:	f7fc fb65 	bl	80018f0 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e0b0      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005234:	4b5b      	ldr	r3, [pc, #364]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f0      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	019a      	lsls	r2, r3, #6
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	071b      	lsls	r3, r3, #28
 800524c:	4955      	ldr	r1, [pc, #340]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800524e:	4313      	orrs	r3, r2
 8005250:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005254:	4b52      	ldr	r3, [pc, #328]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005256:	2201      	movs	r2, #1
 8005258:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800525a:	f7fc fb49 	bl	80018f0 <HAL_GetTick>
 800525e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005260:	e008      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005262:	f7fc fb45 	bl	80018f0 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e090      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005274:	4b4b      	ldr	r3, [pc, #300]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8083 	beq.w	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	4b44      	ldr	r3, [pc, #272]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	4a43      	ldr	r2, [pc, #268]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529c:	6413      	str	r3, [r2, #64]	; 0x40
 800529e:	4b41      	ldr	r3, [pc, #260]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052aa:	4b3f      	ldr	r3, [pc, #252]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a3e      	ldr	r2, [pc, #248]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052b6:	f7fc fb1b 	bl	80018f0 <HAL_GetTick>
 80052ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052bc:	e008      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052be:	f7fc fb17 	bl	80018f0 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e062      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052d0:	4b35      	ldr	r3, [pc, #212]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0f0      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052dc:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d02f      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d028      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052fa:	4b2a      	ldr	r3, [pc, #168]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005302:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005304:	4b29      	ldr	r3, [pc, #164]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005306:	2201      	movs	r2, #1
 8005308:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800530a:	4b28      	ldr	r3, [pc, #160]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005310:	4a24      	ldr	r2, [pc, #144]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005316:	4b23      	ldr	r3, [pc, #140]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b01      	cmp	r3, #1
 8005320:	d114      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005322:	f7fc fae5 	bl	80018f0 <HAL_GetTick>
 8005326:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005328:	e00a      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800532a:	f7fc fae1 	bl	80018f0 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	f241 3288 	movw	r2, #5000	; 0x1388
 8005338:	4293      	cmp	r3, r2
 800533a:	d901      	bls.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e02a      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005340:	4b18      	ldr	r3, [pc, #96]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0ee      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005358:	d10d      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800535a:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800536a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536e:	490d      	ldr	r1, [pc, #52]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005370:	4313      	orrs	r3, r2
 8005372:	608b      	str	r3, [r1, #8]
 8005374:	e005      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005376:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800537c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005380:	6093      	str	r3, [r2, #8]
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005384:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800538e:	4905      	ldr	r1, [pc, #20]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005390:	4313      	orrs	r3, r2
 8005392:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	42470068 	.word	0x42470068
 80053a4:	40023800 	.word	0x40023800
 80053a8:	40007000 	.word	0x40007000
 80053ac:	42470e40 	.word	0x42470e40

080053b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d13d      	bne.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80053ce:	4b22      	ldr	r3, [pc, #136]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053d6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d12f      	bne.n	8005442 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80053e2:	4b1e      	ldr	r3, [pc, #120]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053e4:	617b      	str	r3, [r7, #20]
          break;
 80053e6:	e02f      	b.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053e8:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f4:	d108      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053f6:	4b18      	ldr	r3, [pc, #96]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053fe:	4a18      	ldr	r2, [pc, #96]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	e007      	b.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005408:	4b13      	ldr	r3, [pc, #76]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005410:	4a14      	ldr	r2, [pc, #80]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005412:	fbb2 f3f3 	udiv	r3, r2, r3
 8005416:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005418:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800541a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541e:	099b      	lsrs	r3, r3, #6
 8005420:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	fb02 f303 	mul.w	r3, r2, r3
 800542a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800542c:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800542e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005432:	0f1b      	lsrs	r3, r3, #28
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	fbb2 f3f3 	udiv	r3, r2, r3
 800543e:	617b      	str	r3, [r7, #20]
          break;
 8005440:	e002      	b.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
          break;
 8005446:	bf00      	nop
        }
      }
      break;
 8005448:	bf00      	nop
    }
  }
  return frequency;
 800544a:	697b      	ldr	r3, [r7, #20]
}
 800544c:	4618      	mov	r0, r3
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	40023800 	.word	0x40023800
 800545c:	00bb8000 	.word	0x00bb8000
 8005460:	007a1200 	.word	0x007a1200
 8005464:	00f42400 	.word	0x00f42400

08005468 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005468:	b084      	sub	sp, #16
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	f107 001c 	add.w	r0, r7, #28
 8005476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	2b01      	cmp	r3, #1
 800547e:	d122      	bne.n	80054c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d105      	bne.n	80054ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f001 fac6 	bl	8006a4c <USB_CoreReset>
 80054c0:	4603      	mov	r3, r0
 80054c2:	73fb      	strb	r3, [r7, #15]
 80054c4:	e01a      	b.n	80054fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f001 faba 	bl	8006a4c <USB_CoreReset>
 80054d8:	4603      	mov	r3, r0
 80054da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38
 80054ee:	e005      	b.n	80054fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d10b      	bne.n	800551a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f043 0206 	orr.w	r2, r3, #6
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f043 0220 	orr.w	r2, r3, #32
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800551a:	7bfb      	ldrb	r3, [r7, #15]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005526:	b004      	add	sp, #16
 8005528:	4770      	bx	lr
	...

0800552c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	4613      	mov	r3, r2
 8005538:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d165      	bne.n	800560c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4a41      	ldr	r2, [pc, #260]	; (8005648 <USB_SetTurnaroundTime+0x11c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d906      	bls.n	8005556 <USB_SetTurnaroundTime+0x2a>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4a40      	ldr	r2, [pc, #256]	; (800564c <USB_SetTurnaroundTime+0x120>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d802      	bhi.n	8005556 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005550:	230f      	movs	r3, #15
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	e062      	b.n	800561c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4a3c      	ldr	r2, [pc, #240]	; (800564c <USB_SetTurnaroundTime+0x120>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d906      	bls.n	800556c <USB_SetTurnaroundTime+0x40>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4a3b      	ldr	r2, [pc, #236]	; (8005650 <USB_SetTurnaroundTime+0x124>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d802      	bhi.n	800556c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005566:	230e      	movs	r3, #14
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e057      	b.n	800561c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4a38      	ldr	r2, [pc, #224]	; (8005650 <USB_SetTurnaroundTime+0x124>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d906      	bls.n	8005582 <USB_SetTurnaroundTime+0x56>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4a37      	ldr	r2, [pc, #220]	; (8005654 <USB_SetTurnaroundTime+0x128>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d802      	bhi.n	8005582 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800557c:	230d      	movs	r3, #13
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e04c      	b.n	800561c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	4a33      	ldr	r2, [pc, #204]	; (8005654 <USB_SetTurnaroundTime+0x128>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d906      	bls.n	8005598 <USB_SetTurnaroundTime+0x6c>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4a32      	ldr	r2, [pc, #200]	; (8005658 <USB_SetTurnaroundTime+0x12c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d802      	bhi.n	8005598 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005592:	230c      	movs	r3, #12
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	e041      	b.n	800561c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4a2f      	ldr	r2, [pc, #188]	; (8005658 <USB_SetTurnaroundTime+0x12c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d906      	bls.n	80055ae <USB_SetTurnaroundTime+0x82>
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4a2e      	ldr	r2, [pc, #184]	; (800565c <USB_SetTurnaroundTime+0x130>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d802      	bhi.n	80055ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055a8:	230b      	movs	r3, #11
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	e036      	b.n	800561c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	4a2a      	ldr	r2, [pc, #168]	; (800565c <USB_SetTurnaroundTime+0x130>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d906      	bls.n	80055c4 <USB_SetTurnaroundTime+0x98>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4a29      	ldr	r2, [pc, #164]	; (8005660 <USB_SetTurnaroundTime+0x134>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d802      	bhi.n	80055c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80055be:	230a      	movs	r3, #10
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	e02b      	b.n	800561c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4a26      	ldr	r2, [pc, #152]	; (8005660 <USB_SetTurnaroundTime+0x134>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d906      	bls.n	80055da <USB_SetTurnaroundTime+0xae>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4a25      	ldr	r2, [pc, #148]	; (8005664 <USB_SetTurnaroundTime+0x138>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d802      	bhi.n	80055da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80055d4:	2309      	movs	r3, #9
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	e020      	b.n	800561c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4a21      	ldr	r2, [pc, #132]	; (8005664 <USB_SetTurnaroundTime+0x138>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d906      	bls.n	80055f0 <USB_SetTurnaroundTime+0xc4>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4a20      	ldr	r2, [pc, #128]	; (8005668 <USB_SetTurnaroundTime+0x13c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d802      	bhi.n	80055f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80055ea:	2308      	movs	r3, #8
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	e015      	b.n	800561c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <USB_SetTurnaroundTime+0x13c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d906      	bls.n	8005606 <USB_SetTurnaroundTime+0xda>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4a1c      	ldr	r2, [pc, #112]	; (800566c <USB_SetTurnaroundTime+0x140>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d802      	bhi.n	8005606 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005600:	2307      	movs	r3, #7
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	e00a      	b.n	800561c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005606:	2306      	movs	r3, #6
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e007      	b.n	800561c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d102      	bne.n	8005618 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005612:	2309      	movs	r3, #9
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	e001      	b.n	800561c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005618:	2309      	movs	r3, #9
 800561a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	029b      	lsls	r3, r3, #10
 8005630:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005634:	431a      	orrs	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	00d8acbf 	.word	0x00d8acbf
 800564c:	00e4e1bf 	.word	0x00e4e1bf
 8005650:	00f423ff 	.word	0x00f423ff
 8005654:	0106737f 	.word	0x0106737f
 8005658:	011a499f 	.word	0x011a499f
 800565c:	01312cff 	.word	0x01312cff
 8005660:	014ca43f 	.word	0x014ca43f
 8005664:	016e35ff 	.word	0x016e35ff
 8005668:	01a6ab1f 	.word	0x01a6ab1f
 800566c:	01e847ff 	.word	0x01e847ff

08005670 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f043 0201 	orr.w	r2, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f023 0201 	bic.w	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d106      	bne.n	80056e0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60da      	str	r2, [r3, #12]
 80056de:	e00b      	b.n	80056f8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60da      	str	r2, [r3, #12]
 80056f2:	e001      	b.n	80056f8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e003      	b.n	8005700 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80056f8:	2032      	movs	r0, #50	; 0x32
 80056fa:	f7fc f905 	bl	8001908 <HAL_Delay>

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005708:	b084      	sub	sp, #16
 800570a:	b580      	push	{r7, lr}
 800570c:	b086      	sub	sp, #24
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005722:	2300      	movs	r3, #0
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	e009      	b.n	800573c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	3340      	adds	r3, #64	; 0x40
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	2200      	movs	r2, #0
 8005734:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	3301      	adds	r3, #1
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	2b0e      	cmp	r3, #14
 8005740:	d9f2      	bls.n	8005728 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d11c      	bne.n	8005782 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005756:	f043 0302 	orr.w	r3, r3, #2
 800575a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005778:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	639a      	str	r2, [r3, #56]	; 0x38
 8005780:	e00b      	b.n	800579a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057a0:	461a      	mov	r2, r3
 80057a2:	2300      	movs	r3, #0
 80057a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ac:	4619      	mov	r1, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b4:	461a      	mov	r2, r3
 80057b6:	680b      	ldr	r3, [r1, #0]
 80057b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d10c      	bne.n	80057da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057c6:	2100      	movs	r1, #0
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f949 	bl	8005a60 <USB_SetDevSpeed>
 80057ce:	e008      	b.n	80057e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057d0:	2101      	movs	r1, #1
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f944 	bl	8005a60 <USB_SetDevSpeed>
 80057d8:	e003      	b.n	80057e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057da:	2103      	movs	r1, #3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f93f 	bl	8005a60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057e2:	2110      	movs	r1, #16
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f8f3 	bl	80059d0 <USB_FlushTxFifo>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f911 	bl	8005a1c <USB_FlushRxFifo>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580a:	461a      	mov	r2, r3
 800580c:	2300      	movs	r3, #0
 800580e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005816:	461a      	mov	r2, r3
 8005818:	2300      	movs	r3, #0
 800581a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005822:	461a      	mov	r2, r3
 8005824:	2300      	movs	r3, #0
 8005826:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	e043      	b.n	80058b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005844:	d118      	bne.n	8005878 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	461a      	mov	r2, r3
 800585a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	e013      	b.n	800588a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586e:	461a      	mov	r2, r3
 8005870:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e008      	b.n	800588a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	461a      	mov	r2, r3
 8005886:	2300      	movs	r3, #0
 8005888:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005896:	461a      	mov	r2, r3
 8005898:	2300      	movs	r3, #0
 800589a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	461a      	mov	r2, r3
 80058aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	3301      	adds	r3, #1
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d3b7      	bcc.n	800582e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	e043      	b.n	800594c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058da:	d118      	bne.n	800590e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10a      	bne.n	80058f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	461a      	mov	r2, r3
 80058f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	e013      	b.n	8005920 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	461a      	mov	r2, r3
 8005906:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	e008      	b.n	8005920 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591a:	461a      	mov	r2, r3
 800591c:	2300      	movs	r3, #0
 800591e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592c:	461a      	mov	r2, r3
 800592e:	2300      	movs	r3, #0
 8005930:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593e:	461a      	mov	r2, r3
 8005940:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005944:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	3301      	adds	r3, #1
 800594a:	613b      	str	r3, [r7, #16]
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	429a      	cmp	r2, r3
 8005952:	d3b7      	bcc.n	80058c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005966:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005974:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	2b00      	cmp	r3, #0
 800597a:	d105      	bne.n	8005988 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	f043 0210 	orr.w	r2, r3, #16
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	699a      	ldr	r2, [r3, #24]
 800598c:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <USB_DevInit+0x2c4>)
 800598e:	4313      	orrs	r3, r2
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f043 0208 	orr.w	r2, r3, #8
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d107      	bne.n	80059bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059b4:	f043 0304 	orr.w	r3, r3, #4
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059c8:	b004      	add	sp, #16
 80059ca:	4770      	bx	lr
 80059cc:	803c3800 	.word	0x803c3800

080059d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	019b      	lsls	r3, r3, #6
 80059e2:	f043 0220 	orr.w	r2, r3, #32
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3301      	adds	r3, #1
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <USB_FlushTxFifo+0x48>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d901      	bls.n	80059fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e006      	b.n	8005a0a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f003 0320 	and.w	r3, r3, #32
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d0f0      	beq.n	80059ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	00030d40 	.word	0x00030d40

08005a1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2210      	movs	r2, #16
 8005a2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3301      	adds	r3, #1
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4a09      	ldr	r2, [pc, #36]	; (8005a5c <USB_FlushRxFifo+0x40>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d901      	bls.n	8005a40 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e006      	b.n	8005a4e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d0f0      	beq.n	8005a2e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	00030d40 	.word	0x00030d40

08005a60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	68f9      	ldr	r1, [r7, #12]
 8005a7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a80:	4313      	orrs	r3, r2
 8005a82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b087      	sub	sp, #28
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 0306 	and.w	r3, r3, #6
 8005aaa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]
 8005ab6:	e00a      	b.n	8005ace <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d002      	beq.n	8005ac4 <USB_GetDevSpeed+0x32>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b06      	cmp	r3, #6
 8005ac2:	d102      	bne.n	8005aca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	75fb      	strb	r3, [r7, #23]
 8005ac8:	e001      	b.n	8005ace <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005aca:	230f      	movs	r3, #15
 8005acc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d13a      	bne.n	8005b6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	2101      	movs	r1, #1
 8005b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	68f9      	ldr	r1, [r7, #12]
 8005b12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b16:	4313      	orrs	r3, r2
 8005b18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d155      	bne.n	8005bdc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	78db      	ldrb	r3, [r3, #3]
 8005b4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	059b      	lsls	r3, r3, #22
 8005b52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b54:	4313      	orrs	r3, r2
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	e036      	b.n	8005bdc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b74:	69da      	ldr	r2, [r3, #28]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	2101      	movs	r1, #1
 8005b80:	fa01 f303 	lsl.w	r3, r1, r3
 8005b84:	041b      	lsls	r3, r3, #16
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d11a      	bne.n	8005bdc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	78db      	ldrb	r3, [r3, #3]
 8005bc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d161      	bne.n	8005ccc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c1e:	d11f      	bne.n	8005c60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	2101      	movs	r1, #1
 8005c72:	fa01 f303 	lsl.w	r3, r1, r3
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	68f9      	ldr	r1, [r7, #12]
 8005c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c80:	4013      	ands	r3, r2
 8005c82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	2101      	movs	r1, #1
 8005c96:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	68f9      	ldr	r1, [r7, #12]
 8005ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	0159      	lsls	r1, r3, #5
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	440b      	add	r3, r1
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4b35      	ldr	r3, [pc, #212]	; (8005d9c <USB_DeactivateEndpoint+0x1b0>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	600b      	str	r3, [r1, #0]
 8005cca:	e060      	b.n	8005d8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ce2:	d11f      	bne.n	8005d24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	2101      	movs	r1, #1
 8005d36:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3a:	041b      	lsls	r3, r3, #16
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	68f9      	ldr	r1, [r7, #12]
 8005d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d44:	4013      	ands	r3, r2
 8005d46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	2101      	movs	r1, #1
 8005d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5e:	041b      	lsls	r3, r3, #16
 8005d60:	43db      	mvns	r3, r3
 8005d62:	68f9      	ldr	r1, [r7, #12]
 8005d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	0159      	lsls	r1, r3, #5
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	440b      	add	r3, r1
 8005d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d86:	4619      	mov	r1, r3
 8005d88:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <USB_DeactivateEndpoint+0x1b4>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	ec337800 	.word	0xec337800
 8005da0:	eff37800 	.word	0xeff37800

08005da4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08a      	sub	sp, #40	; 0x28
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	4613      	mov	r3, r2
 8005db0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	785b      	ldrb	r3, [r3, #1]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	f040 815c 	bne.w	800607e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d132      	bne.n	8005e34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005df0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	0151      	lsls	r1, r2, #5
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	440a      	add	r2, r1
 8005e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2c:	0cdb      	lsrs	r3, r3, #19
 8005e2e:	04db      	lsls	r3, r3, #19
 8005e30:	6113      	str	r3, [r2, #16]
 8005e32:	e074      	b.n	8005f1e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	0151      	lsls	r1, r2, #5
 8005e46:	69fa      	ldr	r2, [r7, #28]
 8005e48:	440a      	add	r2, r1
 8005e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e4e:	0cdb      	lsrs	r3, r3, #19
 8005e50:	04db      	lsls	r3, r3, #19
 8005e52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	6959      	ldr	r1, [r3, #20]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	440b      	add	r3, r1
 8005e90:	1e59      	subs	r1, r3, #1
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e9a:	04d9      	lsls	r1, r3, #19
 8005e9c:	4b9d      	ldr	r3, [pc, #628]	; (8006114 <USB_EPStartXfer+0x370>)
 8005e9e:	400b      	ands	r3, r1
 8005ea0:	69b9      	ldr	r1, [r7, #24]
 8005ea2:	0148      	lsls	r0, r1, #5
 8005ea4:	69f9      	ldr	r1, [r7, #28]
 8005ea6:	4401      	add	r1, r0
 8005ea8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005eac:	4313      	orrs	r3, r2
 8005eae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec6:	69b9      	ldr	r1, [r7, #24]
 8005ec8:	0148      	lsls	r0, r1, #5
 8005eca:	69f9      	ldr	r1, [r7, #28]
 8005ecc:	4401      	add	r1, r0
 8005ece:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	78db      	ldrb	r3, [r3, #3]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d11f      	bne.n	8005f1e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	0151      	lsls	r1, r2, #5
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	440a      	add	r2, r1
 8005ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005efc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	69fa      	ldr	r2, [r7, #28]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f1e:	79fb      	ldrb	r3, [r7, #7]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d14b      	bne.n	8005fbc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f38:	461a      	mov	r2, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	78db      	ldrb	r3, [r3, #3]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d128      	bne.n	8005f9a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d110      	bne.n	8005f7a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	e00f      	b.n	8005f9a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	e12f      	b.n	800621c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	78db      	ldrb	r3, [r3, #3]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d015      	beq.n	8006010 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 8117 	beq.w	800621c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	2101      	movs	r1, #1
 8006000:	fa01 f303 	lsl.w	r3, r1, r3
 8006004:	69f9      	ldr	r1, [r7, #28]
 8006006:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800600a:	4313      	orrs	r3, r2
 800600c:	634b      	str	r3, [r1, #52]	; 0x34
 800600e:	e105      	b.n	800621c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601c:	2b00      	cmp	r3, #0
 800601e:	d110      	bne.n	8006042 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	e00f      	b.n	8006062 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	440a      	add	r2, r1
 8006058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006060:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	68d9      	ldr	r1, [r3, #12]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	781a      	ldrb	r2, [r3, #0]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	b298      	uxth	r0, r3
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	4603      	mov	r3, r0
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fa2b 	bl	80064d2 <USB_WritePacket>
 800607c:	e0ce      	b.n	800621c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	0151      	lsls	r1, r2, #5
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	440a      	add	r2, r1
 8006094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006098:	0cdb      	lsrs	r3, r3, #19
 800609a:	04db      	lsls	r3, r3, #19
 800609c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d126      	bne.n	8006118 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060e0:	69b9      	ldr	r1, [r7, #24]
 80060e2:	0148      	lsls	r0, r1, #5
 80060e4:	69f9      	ldr	r1, [r7, #28]
 80060e6:	4401      	add	r1, r0
 80060e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060ec:	4313      	orrs	r3, r2
 80060ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	0151      	lsls	r1, r2, #5
 8006102:	69fa      	ldr	r2, [r7, #28]
 8006104:	440a      	add	r2, r1
 8006106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800610a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800610e:	6113      	str	r3, [r2, #16]
 8006110:	e036      	b.n	8006180 <USB_EPStartXfer+0x3dc>
 8006112:	bf00      	nop
 8006114:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	695a      	ldr	r2, [r3, #20]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	4413      	add	r3, r2
 8006122:	1e5a      	subs	r2, r3, #1
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	fbb2 f3f3 	udiv	r3, r2, r3
 800612c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	8afb      	ldrh	r3, [r7, #22]
 800613e:	04d9      	lsls	r1, r3, #19
 8006140:	4b39      	ldr	r3, [pc, #228]	; (8006228 <USB_EPStartXfer+0x484>)
 8006142:	400b      	ands	r3, r1
 8006144:	69b9      	ldr	r1, [r7, #24]
 8006146:	0148      	lsls	r0, r1, #5
 8006148:	69f9      	ldr	r1, [r7, #28]
 800614a:	4401      	add	r1, r0
 800614c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006150:	4313      	orrs	r3, r2
 8006152:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	8af9      	ldrh	r1, [r7, #22]
 8006168:	fb01 f303 	mul.w	r3, r1, r3
 800616c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006170:	69b9      	ldr	r1, [r7, #24]
 8006172:	0148      	lsls	r0, r1, #5
 8006174:	69f9      	ldr	r1, [r7, #28]
 8006176:	4401      	add	r1, r0
 8006178:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800617c:	4313      	orrs	r3, r2
 800617e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d10d      	bne.n	80061a2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	68d9      	ldr	r1, [r3, #12]
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619e:	460a      	mov	r2, r1
 80061a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	78db      	ldrb	r3, [r3, #3]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d128      	bne.n	80061fc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d110      	bne.n	80061dc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	e00f      	b.n	80061fc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006216:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800621a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	1ff80000 	.word	0x1ff80000

0800622c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	785b      	ldrb	r3, [r3, #1]
 8006248:	2b01      	cmp	r3, #1
 800624a:	f040 80cd 	bne.w	80063e8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d132      	bne.n	80062bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006270:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006274:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006278:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	440a      	add	r2, r1
 8006290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006298:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b4:	0cdb      	lsrs	r3, r3, #19
 80062b6:	04db      	lsls	r3, r3, #19
 80062b8:	6113      	str	r3, [r2, #16]
 80062ba:	e04e      	b.n	800635a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d6:	0cdb      	lsrs	r3, r3, #19
 80062d8:	04db      	lsls	r3, r3, #19
 80062da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	695a      	ldr	r2, [r3, #20]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	429a      	cmp	r2, r3
 800630a:	d903      	bls.n	8006314 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	440a      	add	r2, r1
 800632a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006332:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634a:	6939      	ldr	r1, [r7, #16]
 800634c:	0148      	lsls	r0, r1, #5
 800634e:	6979      	ldr	r1, [r7, #20]
 8006350:	4401      	add	r1, r0
 8006352:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006356:	4313      	orrs	r3, r2
 8006358:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d11e      	bne.n	800639e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006396:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	e092      	b.n	80064c4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d07e      	beq.n	80064c4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	f003 030f 	and.w	r3, r3, #15
 80063d6:	2101      	movs	r1, #1
 80063d8:	fa01 f303 	lsl.w	r3, r1, r3
 80063dc:	6979      	ldr	r1, [r7, #20]
 80063de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063e2:	4313      	orrs	r3, r2
 80063e4:	634b      	str	r3, [r1, #52]	; 0x34
 80063e6:	e06d      	b.n	80064c4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006402:	0cdb      	lsrs	r3, r3, #19
 8006404:	04db      	lsls	r3, r3, #19
 8006406:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	440a      	add	r2, r1
 800641e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006422:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006426:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800642a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	440a      	add	r2, r1
 8006452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006456:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800645a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006468:	691a      	ldr	r2, [r3, #16]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006472:	6939      	ldr	r1, [r7, #16]
 8006474:	0148      	lsls	r0, r1, #5
 8006476:	6979      	ldr	r1, [r7, #20]
 8006478:	4401      	add	r1, r0
 800647a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800647e:	4313      	orrs	r3, r2
 8006480:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d10d      	bne.n	80064a4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d009      	beq.n	80064a4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	68d9      	ldr	r1, [r3, #12]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a0:	460a      	mov	r2, r1
 80064a2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	0151      	lsls	r1, r2, #5
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	440a      	add	r2, r1
 80064ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b089      	sub	sp, #36	; 0x24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	4611      	mov	r1, r2
 80064de:	461a      	mov	r2, r3
 80064e0:	460b      	mov	r3, r1
 80064e2:	71fb      	strb	r3, [r7, #7]
 80064e4:	4613      	mov	r3, r2
 80064e6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80064f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d11a      	bne.n	800652e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064f8:	88bb      	ldrh	r3, [r7, #4]
 80064fa:	3303      	adds	r3, #3
 80064fc:	089b      	lsrs	r3, r3, #2
 80064fe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006500:	2300      	movs	r3, #0
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e00f      	b.n	8006526 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006506:	79fb      	ldrb	r3, [r7, #7]
 8006508:	031a      	lsls	r2, r3, #12
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	4413      	add	r3, r2
 800650e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006512:	461a      	mov	r2, r3
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6013      	str	r3, [r2, #0]
      pSrc++;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	3304      	adds	r3, #4
 800651e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	3301      	adds	r3, #1
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	429a      	cmp	r2, r3
 800652c:	d3eb      	bcc.n	8006506 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3724      	adds	r7, #36	; 0x24
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800653c:	b480      	push	{r7}
 800653e:	b089      	sub	sp, #36	; 0x24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	4613      	mov	r3, r2
 8006548:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	3303      	adds	r3, #3
 8006556:	089b      	lsrs	r3, r3, #2
 8006558:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800655a:	2300      	movs	r3, #0
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	e00b      	b.n	8006578 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	601a      	str	r2, [r3, #0]
    pDest++;
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	3304      	adds	r3, #4
 8006570:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	3301      	adds	r3, #1
 8006576:	61bb      	str	r3, [r7, #24]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	429a      	cmp	r2, r3
 800657e:	d3ef      	bcc.n	8006560 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006580:	69fb      	ldr	r3, [r7, #28]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3724      	adds	r7, #36	; 0x24
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800658e:	b480      	push	{r7}
 8006590:	b085      	sub	sp, #20
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	785b      	ldrb	r3, [r3, #1]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d12c      	bne.n	8006604 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	db12      	blt.n	80065e2 <USB_EPSetStall+0x54>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00f      	beq.n	80065e2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065e0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	0151      	lsls	r1, r2, #5
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	440a      	add	r2, r1
 80065f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e02b      	b.n	800665c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	db12      	blt.n	800663c <USB_EPSetStall+0xae>
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00f      	beq.n	800663c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	0151      	lsls	r1, r2, #5
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	440a      	add	r2, r1
 8006632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006636:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800663a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006656:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800665a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800666a:	b480      	push	{r7}
 800666c:	b085      	sub	sp, #20
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	785b      	ldrb	r3, [r3, #1]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d128      	bne.n	80066d8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	78db      	ldrb	r3, [r3, #3]
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d003      	beq.n	80066b6 <USB_EPClearStall+0x4c>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	78db      	ldrb	r3, [r3, #3]
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d138      	bne.n	8006728 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	e027      	b.n	8006728 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	78db      	ldrb	r3, [r3, #3]
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d003      	beq.n	8006708 <USB_EPClearStall+0x9e>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	78db      	ldrb	r3, [r3, #3]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d10f      	bne.n	8006728 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006726:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006754:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006758:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800676a:	68f9      	ldr	r1, [r7, #12]
 800676c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006770:	4313      	orrs	r3, r2
 8006772:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006782:	b480      	push	{r7}
 8006784:	b085      	sub	sp, #20
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800679c:	f023 0303 	bic.w	r3, r3, #3
 80067a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067b0:	f023 0302 	bic.w	r3, r3, #2
 80067b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067de:	f023 0303 	bic.w	r3, r3, #3
 80067e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067f2:	f043 0302 	orr.w	r3, r3, #2
 80067f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006806:	b480      	push	{r7}
 8006808:	b085      	sub	sp, #20
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4013      	ands	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800681e:	68fb      	ldr	r3, [r7, #12]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	4013      	ands	r3, r2
 800684e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	0c1b      	lsrs	r3, r3, #16
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	4013      	ands	r3, r2
 8006882:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	b29b      	uxth	r3, r3
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	4013      	ands	r3, r2
 80068c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068c2:	68bb      	ldr	r3, [r7, #8]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006900:	01db      	lsls	r3, r3, #7
 8006902:	b2db      	uxtb	r3, r3
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4013      	ands	r3, r2
 800691c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800691e:	68bb      	ldr	r3, [r7, #8]
}
 8006920:	4618      	mov	r0, r3
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	f003 0301 	and.w	r3, r3, #1
}
 800693c:	4618      	mov	r0, r3
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006962:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006966:	f023 0307 	bic.w	r3, r3, #7
 800696a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800697a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800697e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
	...

08006990 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	460b      	mov	r3, r1
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	333c      	adds	r3, #60	; 0x3c
 80069a6:	3304      	adds	r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	4a26      	ldr	r2, [pc, #152]	; (8006a48 <USB_EP0_OutStart+0xb8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d90a      	bls.n	80069ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c4:	d101      	bne.n	80069ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e037      	b.n	8006a3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d0:	461a      	mov	r2, r3
 80069d2:	2300      	movs	r3, #0
 80069d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069f8:	f043 0318 	orr.w	r3, r3, #24
 80069fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a12:	7afb      	ldrb	r3, [r7, #11]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d10f      	bne.n	8006a38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1e:	461a      	mov	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	4f54300a 	.word	0x4f54300a

08006a4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a13      	ldr	r2, [pc, #76]	; (8006ab0 <USB_CoreReset+0x64>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d901      	bls.n	8006a6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e01b      	b.n	8006aa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	daf2      	bge.n	8006a58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	f043 0201 	orr.w	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3301      	adds	r3, #1
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <USB_CoreReset+0x64>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d901      	bls.n	8006a94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e006      	b.n	8006aa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d0f0      	beq.n	8006a82 <USB_CoreReset+0x36>

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	00030d40 	.word	0x00030d40

08006ab4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ac0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006ac4:	f004 fb72 	bl	800b1ac <malloc>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d105      	bne.n	8006ade <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006ada:	2302      	movs	r3, #2
 8006adc:	e066      	b.n	8006bac <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	7c1b      	ldrb	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d119      	bne.n	8006b22 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006af2:	2202      	movs	r2, #2
 8006af4:	2181      	movs	r1, #129	; 0x81
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f002 fad5 	bl	80090a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b06:	2202      	movs	r2, #2
 8006b08:	2101      	movs	r1, #1
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f002 facb 	bl	80090a6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2210      	movs	r2, #16
 8006b1c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006b20:	e016      	b.n	8006b50 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b22:	2340      	movs	r3, #64	; 0x40
 8006b24:	2202      	movs	r2, #2
 8006b26:	2181      	movs	r1, #129	; 0x81
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f002 fabc 	bl	80090a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b34:	2340      	movs	r3, #64	; 0x40
 8006b36:	2202      	movs	r2, #2
 8006b38:	2101      	movs	r1, #1
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f002 fab3 	bl	80090a6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2210      	movs	r2, #16
 8006b4c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b50:	2308      	movs	r3, #8
 8006b52:	2203      	movs	r2, #3
 8006b54:	2182      	movs	r1, #130	; 0x82
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f002 faa5 	bl	80090a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	7c1b      	ldrb	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d109      	bne.n	8006b9a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b90:	2101      	movs	r1, #1
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f002 fb76 	bl	8009284 <USBD_LL_PrepareReceive>
 8006b98:	e007      	b.n	8006baa <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ba0:	2340      	movs	r3, #64	; 0x40
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f002 fb6d 	bl	8009284 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006bc4:	2181      	movs	r1, #129	; 0x81
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f002 fa93 	bl	80090f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f002 fa8c 	bl	80090f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006be2:	2182      	movs	r1, #130	; 0x82
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f002 fa84 	bl	80090f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00e      	beq.n	8006c22 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c14:	4618      	mov	r0, r3
 8006c16:	f004 fad1 	bl	800b1bc <free>
    pdev->pClassData = NULL;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c3c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d03a      	beq.n	8006ccc <USBD_CDC_Setup+0xa0>
 8006c56:	2b20      	cmp	r3, #32
 8006c58:	f040 8097 	bne.w	8006d8a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	88db      	ldrh	r3, [r3, #6]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d029      	beq.n	8006cb8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	b25b      	sxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da11      	bge.n	8006c92 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006c7a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	88d2      	ldrh	r2, [r2, #6]
 8006c80:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006c82:	6939      	ldr	r1, [r7, #16]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	88db      	ldrh	r3, [r3, #6]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fa9d 	bl	80081ca <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006c90:	e082      	b.n	8006d98 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	785a      	ldrb	r2, [r3, #1]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	88db      	ldrh	r3, [r3, #6]
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ca8:	6939      	ldr	r1, [r7, #16]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	88db      	ldrh	r3, [r3, #6]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fab6 	bl	8008222 <USBD_CtlPrepareRx>
    break;
 8006cb6:	e06f      	b.n	8006d98 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	7850      	ldrb	r0, [r2, #1]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	4798      	blx	r3
    break;
 8006cca:	e065      	b.n	8006d98 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	2b0b      	cmp	r3, #11
 8006cd2:	d84f      	bhi.n	8006d74 <USBD_CDC_Setup+0x148>
 8006cd4:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <USBD_CDC_Setup+0xb0>)
 8006cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cda:	bf00      	nop
 8006cdc:	08006d0d 	.word	0x08006d0d
 8006ce0:	08006d83 	.word	0x08006d83
 8006ce4:	08006d75 	.word	0x08006d75
 8006ce8:	08006d75 	.word	0x08006d75
 8006cec:	08006d75 	.word	0x08006d75
 8006cf0:	08006d75 	.word	0x08006d75
 8006cf4:	08006d75 	.word	0x08006d75
 8006cf8:	08006d75 	.word	0x08006d75
 8006cfc:	08006d75 	.word	0x08006d75
 8006d00:	08006d75 	.word	0x08006d75
 8006d04:	08006d35 	.word	0x08006d35
 8006d08:	08006d5d 	.word	0x08006d5d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d107      	bne.n	8006d26 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006d16:	f107 030c 	add.w	r3, r7, #12
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 fa53 	bl	80081ca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006d24:	e030      	b.n	8006d88 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 f9dd 	bl	80080e8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	75fb      	strb	r3, [r7, #23]
      break;
 8006d32:	e029      	b.n	8006d88 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d107      	bne.n	8006d4e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d3e:	f107 030f 	add.w	r3, r7, #15
 8006d42:	2201      	movs	r2, #1
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fa3f 	bl	80081ca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006d4c:	e01c      	b.n	8006d88 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 f9c9 	bl	80080e8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006d56:	2303      	movs	r3, #3
 8006d58:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5a:	e015      	b.n	8006d88 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d00f      	beq.n	8006d86 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 f9bd 	bl	80080e8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006d72:	e008      	b.n	8006d86 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 f9b6 	bl	80080e8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d80:	e002      	b.n	8006d88 <USBD_CDC_Setup+0x15c>
      break;
 8006d82:	bf00      	nop
 8006d84:	e008      	b.n	8006d98 <USBD_CDC_Setup+0x16c>
      break;
 8006d86:	bf00      	nop
    }
    break;
 8006d88:	e006      	b.n	8006d98 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 f9ab 	bl	80080e8 <USBD_CtlError>
    ret = USBD_FAIL;
 8006d92:	2303      	movs	r3, #3
 8006d94:	75fb      	strb	r3, [r7, #23]
    break;
 8006d96:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop

08006da4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006db6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e049      	b.n	8006e5a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dcc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006dce:	78fa      	ldrb	r2, [r7, #3]
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	440b      	add	r3, r1
 8006ddc:	3318      	adds	r3, #24
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d029      	beq.n	8006e38 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006de4:	78fa      	ldrb	r2, [r7, #3]
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	3318      	adds	r3, #24
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	78f9      	ldrb	r1, [r7, #3]
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	1a5b      	subs	r3, r3, r1
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4403      	add	r3, r0
 8006e04:	3344      	adds	r3, #68	; 0x44
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e0c:	fb03 f301 	mul.w	r3, r3, r1
 8006e10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d110      	bne.n	8006e38 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	3318      	adds	r3, #24
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e2a:	78f9      	ldrb	r1, [r7, #3]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	2200      	movs	r2, #0
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f002 fa06 	bl	8009242 <USBD_LL_Transmit>
 8006e36:	e00f      	b.n	8006e58 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006e54:	78fa      	ldrb	r2, [r7, #3]
 8006e56:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e74:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e015      	b.n	8006eb0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f002 fa1c 	bl	80092c6 <USBD_LL_GetRxDataSize>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006eaa:	4611      	mov	r1, r2
 8006eac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ec6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d015      	beq.n	8006efe <USBD_CDC_EP0_RxReady+0x46>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ed8:	2bff      	cmp	r3, #255	; 0xff
 8006eda:	d010      	beq.n	8006efe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006eea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ef2:	b292      	uxth	r2, r2
 8006ef4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	22ff      	movs	r2, #255	; 0xff
 8006efa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2243      	movs	r2, #67	; 0x43
 8006f14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006f16:	4b03      	ldr	r3, [pc, #12]	; (8006f24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	200004a0 	.word	0x200004a0

08006f28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2243      	movs	r2, #67	; 0x43
 8006f34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006f36:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	2000045c 	.word	0x2000045c

08006f48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2243      	movs	r2, #67	; 0x43
 8006f54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006f56:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	200004e4 	.word	0x200004e4

08006f68 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	220a      	movs	r2, #10
 8006f74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006f76:	4b03      	ldr	r3, [pc, #12]	; (8006f84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	20000418 	.word	0x20000418

08006f88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e004      	b.n	8006fa6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b087      	sub	sp, #28
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fc4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	371c      	adds	r7, #28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ff4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800701a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800701c:	2301      	movs	r3, #1
 800701e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800702a:	2303      	movs	r3, #3
 800702c:	e01a      	b.n	8007064 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007034:	2b00      	cmp	r3, #0
 8007036:	d114      	bne.n	8007062 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2201      	movs	r2, #1
 800703c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007056:	2181      	movs	r1, #129	; 0x81
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f002 f8f2 	bl	8009242 <USBD_LL_Transmit>

    ret = USBD_OK;
 800705e:	2300      	movs	r3, #0
 8007060:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800707a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007086:	2303      	movs	r3, #3
 8007088:	e016      	b.n	80070b8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	7c1b      	ldrb	r3, [r3, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d109      	bne.n	80070a6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800709c:	2101      	movs	r1, #1
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f002 f8f0 	bl	8009284 <USBD_LL_PrepareReceive>
 80070a4:	e007      	b.n	80070b6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070ac:	2340      	movs	r3, #64	; 0x40
 80070ae:	2101      	movs	r1, #1
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f002 f8e7 	bl	8009284 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	4613      	mov	r3, r2
 80070cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e025      	b.n	8007124 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	79fa      	ldrb	r2, [r7, #7]
 8007116:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f001 ff5d 	bl	8008fd8 <USBD_LL_Init>
 800711e:	4603      	mov	r3, r0
 8007120:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007122:	7dfb      	ldrb	r3, [r7, #23]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007140:	2303      	movs	r3, #3
 8007142:	e010      	b.n	8007166 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007154:	f107 020e 	add.w	r2, r7, #14
 8007158:	4610      	mov	r0, r2
 800715a:	4798      	blx	r3
 800715c:	4602      	mov	r2, r0
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b082      	sub	sp, #8
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f001 ff7a 	bl	8009070 <USBD_LL_Start>
 800717c:	4603      	mov	r3, r0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071a8:	2303      	movs	r3, #3
 80071aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d009      	beq.n	80071ca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	78fa      	ldrb	r2, [r7, #3]
 80071c0:	4611      	mov	r1, r2
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d007      	beq.n	80071fa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	78fa      	ldrb	r2, [r7, #3]
 80071f4:	4611      	mov	r1, r2
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
  }

  return USBD_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	4618      	mov	r0, r3
 8007218:	f000 ff2c 	bl	8008074 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800722a:	461a      	mov	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007238:	f003 031f 	and.w	r3, r3, #31
 800723c:	2b01      	cmp	r3, #1
 800723e:	d00e      	beq.n	800725e <USBD_LL_SetupStage+0x5a>
 8007240:	2b01      	cmp	r3, #1
 8007242:	d302      	bcc.n	800724a <USBD_LL_SetupStage+0x46>
 8007244:	2b02      	cmp	r3, #2
 8007246:	d014      	beq.n	8007272 <USBD_LL_SetupStage+0x6e>
 8007248:	e01d      	b.n	8007286 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fa18 	bl	8007688 <USBD_StdDevReq>
 8007258:	4603      	mov	r3, r0
 800725a:	73fb      	strb	r3, [r7, #15]
      break;
 800725c:	e020      	b.n	80072a0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fa7c 	bl	8007764 <USBD_StdItfReq>
 800726c:	4603      	mov	r3, r0
 800726e:	73fb      	strb	r3, [r7, #15]
      break;
 8007270:	e016      	b.n	80072a0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007278:	4619      	mov	r1, r3
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fab8 	bl	80077f0 <USBD_StdEPReq>
 8007280:	4603      	mov	r3, r0
 8007282:	73fb      	strb	r3, [r7, #15]
      break;
 8007284:	e00c      	b.n	80072a0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800728c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007290:	b2db      	uxtb	r3, r3
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 ff4b 	bl	8009130 <USBD_LL_StallEP>
 800729a:	4603      	mov	r3, r0
 800729c:	73fb      	strb	r3, [r7, #15]
      break;
 800729e:	bf00      	nop
  }

  return ret;
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b086      	sub	sp, #24
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	460b      	mov	r3, r1
 80072b4:	607a      	str	r2, [r7, #4]
 80072b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072b8:	7afb      	ldrb	r3, [r7, #11]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d137      	bne.n	800732e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d14a      	bne.n	8007366 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d913      	bls.n	8007304 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	1ad2      	subs	r2, r2, r3
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	4293      	cmp	r3, r2
 80072f4:	bf28      	it	cs
 80072f6:	4613      	movcs	r3, r2
 80072f8:	461a      	mov	r2, r3
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 ffad 	bl	800825c <USBD_CtlContinueRx>
 8007302:	e030      	b.n	8007366 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00a      	beq.n	8007326 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007316:	2b03      	cmp	r3, #3
 8007318:	d105      	bne.n	8007326 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 ffa9 	bl	800827e <USBD_CtlSendStatus>
 800732c:	e01b      	b.n	8007366 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d013      	beq.n	8007362 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007340:	2b03      	cmp	r3, #3
 8007342:	d10e      	bne.n	8007362 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	7afa      	ldrb	r2, [r7, #11]
 800734e:	4611      	mov	r1, r2
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	4798      	blx	r3
 8007354:	4603      	mov	r3, r0
 8007356:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800735e:	7dfb      	ldrb	r3, [r7, #23]
 8007360:	e002      	b.n	8007368 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007362:	2303      	movs	r3, #3
 8007364:	e000      	b.n	8007368 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	460b      	mov	r3, r1
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d16a      	bne.n	800745a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3314      	adds	r3, #20
 8007388:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007390:	2b02      	cmp	r3, #2
 8007392:	d155      	bne.n	8007440 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	429a      	cmp	r2, r3
 800739e:	d914      	bls.n	80073ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	1ad2      	subs	r2, r2, r3
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	461a      	mov	r2, r3
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 ff22 	bl	8008200 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073bc:	2300      	movs	r3, #0
 80073be:	2200      	movs	r2, #0
 80073c0:	2100      	movs	r1, #0
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f001 ff5e 	bl	8009284 <USBD_LL_PrepareReceive>
 80073c8:	e03a      	b.n	8007440 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d11c      	bne.n	8007410 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073de:	429a      	cmp	r2, r3
 80073e0:	d316      	bcc.n	8007410 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d20f      	bcs.n	8007410 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073f0:	2200      	movs	r2, #0
 80073f2:	2100      	movs	r1, #0
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 ff03 	bl	8008200 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007402:	2300      	movs	r3, #0
 8007404:	2200      	movs	r2, #0
 8007406:	2100      	movs	r1, #0
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f001 ff3b 	bl	8009284 <USBD_LL_PrepareReceive>
 800740e:	e017      	b.n	8007440 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00a      	beq.n	8007432 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007422:	2b03      	cmp	r3, #3
 8007424:	d105      	bne.n	8007432 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007432:	2180      	movs	r1, #128	; 0x80
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f001 fe7b 	bl	8009130 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 ff32 	bl	80082a4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007446:	2b01      	cmp	r3, #1
 8007448:	d123      	bne.n	8007492 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff fe9b 	bl	8007186 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007458:	e01b      	b.n	8007492 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d013      	beq.n	800748e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800746c:	2b03      	cmp	r3, #3
 800746e:	d10e      	bne.n	800748e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	7afa      	ldrb	r2, [r7, #11]
 800747a:	4611      	mov	r1, r2
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	4798      	blx	r3
 8007480:	4603      	mov	r3, r0
 8007482:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	e002      	b.n	8007494 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800748e:	2303      	movs	r3, #3
 8007490:	e000      	b.n	8007494 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d009      	beq.n	80074e0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6852      	ldr	r2, [r2, #4]
 80074d8:	b2d2      	uxtb	r2, r2
 80074da:	4611      	mov	r1, r2
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074e0:	2340      	movs	r3, #64	; 0x40
 80074e2:	2200      	movs	r2, #0
 80074e4:	2100      	movs	r1, #0
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 fddd 	bl	80090a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2240      	movs	r2, #64	; 0x40
 80074f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074fc:	2340      	movs	r3, #64	; 0x40
 80074fe:	2200      	movs	r2, #0
 8007500:	2180      	movs	r1, #128	; 0x80
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 fdcf 	bl	80090a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2240      	movs	r2, #64	; 0x40
 8007512:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800753e:	b480      	push	{r7}
 8007540:	b083      	sub	sp, #12
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2204      	movs	r2, #4
 8007556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007576:	2b04      	cmp	r3, #4
 8007578:	d105      	bne.n	8007586 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d10b      	bne.n	80075be <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	460b      	mov	r3, r1
 80075ec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b082      	sub	sp, #8
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007628:	2b00      	cmp	r3, #0
 800762a:	d009      	beq.n	8007640 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6852      	ldr	r2, [r2, #4]
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	4611      	mov	r1, r2
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	4798      	blx	r3
  }

  return USBD_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800764a:	b480      	push	{r7}
 800764c:	b087      	sub	sp, #28
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	3301      	adds	r3, #1
 8007660:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007668:	8a3b      	ldrh	r3, [r7, #16]
 800766a:	021b      	lsls	r3, r3, #8
 800766c:	b21a      	sxth	r2, r3
 800766e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007672:	4313      	orrs	r3, r2
 8007674:	b21b      	sxth	r3, r3
 8007676:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007678:	89fb      	ldrh	r3, [r7, #14]
}
 800767a:	4618      	mov	r0, r3
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
	...

08007688 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d004      	beq.n	80076ac <USBD_StdDevReq+0x24>
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d002      	beq.n	80076ac <USBD_StdDevReq+0x24>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <USBD_StdDevReq+0x38>
 80076aa:	e050      	b.n	800774e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	4798      	blx	r3
 80076ba:	4603      	mov	r3, r0
 80076bc:	73fb      	strb	r3, [r7, #15]
    break;
 80076be:	e04b      	b.n	8007758 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	785b      	ldrb	r3, [r3, #1]
 80076c4:	2b09      	cmp	r3, #9
 80076c6:	d83c      	bhi.n	8007742 <USBD_StdDevReq+0xba>
 80076c8:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <USBD_StdDevReq+0x48>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	08007725 	.word	0x08007725
 80076d4:	08007739 	.word	0x08007739
 80076d8:	08007743 	.word	0x08007743
 80076dc:	0800772f 	.word	0x0800772f
 80076e0:	08007743 	.word	0x08007743
 80076e4:	08007703 	.word	0x08007703
 80076e8:	080076f9 	.word	0x080076f9
 80076ec:	08007743 	.word	0x08007743
 80076f0:	0800771b 	.word	0x0800771b
 80076f4:	0800770d 	.word	0x0800770d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f9ce 	bl	8007a9c <USBD_GetDescriptor>
      break;
 8007700:	e024      	b.n	800774c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fb33 	bl	8007d70 <USBD_SetAddress>
      break;
 800770a:	e01f      	b.n	800774c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fb70 	bl	8007df4 <USBD_SetConfig>
 8007714:	4603      	mov	r3, r0
 8007716:	73fb      	strb	r3, [r7, #15]
      break;
 8007718:	e018      	b.n	800774c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fc0d 	bl	8007f3c <USBD_GetConfig>
      break;
 8007722:	e013      	b.n	800774c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fc3c 	bl	8007fa4 <USBD_GetStatus>
      break;
 800772c:	e00e      	b.n	800774c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fc6a 	bl	800800a <USBD_SetFeature>
      break;
 8007736:	e009      	b.n	800774c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fc79 	bl	8008032 <USBD_ClrFeature>
      break;
 8007740:	e004      	b.n	800774c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fccf 	bl	80080e8 <USBD_CtlError>
      break;
 800774a:	bf00      	nop
    }
    break;
 800774c:	e004      	b.n	8007758 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fcc9 	bl	80080e8 <USBD_CtlError>
    break;
 8007756:	bf00      	nop
  }

  return ret;
 8007758:	7bfb      	ldrb	r3, [r7, #15]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop

08007764 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800777a:	2b20      	cmp	r3, #32
 800777c:	d003      	beq.n	8007786 <USBD_StdItfReq+0x22>
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d001      	beq.n	8007786 <USBD_StdItfReq+0x22>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d12a      	bne.n	80077dc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800778c:	3b01      	subs	r3, #1
 800778e:	2b02      	cmp	r3, #2
 8007790:	d81d      	bhi.n	80077ce <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	889b      	ldrh	r3, [r3, #4]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b01      	cmp	r3, #1
 800779a:	d813      	bhi.n	80077c4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	4798      	blx	r3
 80077aa:	4603      	mov	r3, r0
 80077ac:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	88db      	ldrh	r3, [r3, #6]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d110      	bne.n	80077d8 <USBD_StdItfReq+0x74>
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10d      	bne.n	80077d8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fd5e 	bl	800827e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80077c2:	e009      	b.n	80077d8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fc8e 	bl	80080e8 <USBD_CtlError>
      break;
 80077cc:	e004      	b.n	80077d8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fc89 	bl	80080e8 <USBD_CtlError>
      break;
 80077d6:	e000      	b.n	80077da <USBD_StdItfReq+0x76>
      break;
 80077d8:	bf00      	nop
    }
    break;
 80077da:	e004      	b.n	80077e6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fc82 	bl	80080e8 <USBD_CtlError>
    break;
 80077e4:	bf00      	nop
  }

  return ret;
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	889b      	ldrh	r3, [r3, #4]
 8007802:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800780c:	2b20      	cmp	r3, #32
 800780e:	d004      	beq.n	800781a <USBD_StdEPReq+0x2a>
 8007810:	2b40      	cmp	r3, #64	; 0x40
 8007812:	d002      	beq.n	800781a <USBD_StdEPReq+0x2a>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00a      	beq.n	800782e <USBD_StdEPReq+0x3e>
 8007818:	e135      	b.n	8007a86 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]
    break;
 800782c:	e130      	b.n	8007a90 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d03e      	beq.n	80078b4 <USBD_StdEPReq+0xc4>
 8007836:	2b03      	cmp	r3, #3
 8007838:	d002      	beq.n	8007840 <USBD_StdEPReq+0x50>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d077      	beq.n	800792e <USBD_StdEPReq+0x13e>
 800783e:	e11c      	b.n	8007a7a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007846:	2b02      	cmp	r3, #2
 8007848:	d002      	beq.n	8007850 <USBD_StdEPReq+0x60>
 800784a:	2b03      	cmp	r3, #3
 800784c:	d015      	beq.n	800787a <USBD_StdEPReq+0x8a>
 800784e:	e02b      	b.n	80078a8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00c      	beq.n	8007870 <USBD_StdEPReq+0x80>
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b80      	cmp	r3, #128	; 0x80
 800785a:	d009      	beq.n	8007870 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 fc65 	bl	8009130 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007866:	2180      	movs	r1, #128	; 0x80
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 fc61 	bl	8009130 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800786e:	e020      	b.n	80078b2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fc38 	bl	80080e8 <USBD_CtlError>
        break;
 8007878:	e01b      	b.n	80078b2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	885b      	ldrh	r3, [r3, #2]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10e      	bne.n	80078a0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00b      	beq.n	80078a0 <USBD_StdEPReq+0xb0>
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b80      	cmp	r3, #128	; 0x80
 800788c:	d008      	beq.n	80078a0 <USBD_StdEPReq+0xb0>
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	88db      	ldrh	r3, [r3, #6]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d104      	bne.n	80078a0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 fc48 	bl	8009130 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fcec 	bl	800827e <USBD_CtlSendStatus>

        break;
 80078a6:	e004      	b.n	80078b2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fc1c 	bl	80080e8 <USBD_CtlError>
        break;
 80078b0:	bf00      	nop
      }
      break;
 80078b2:	e0e7      	b.n	8007a84 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d002      	beq.n	80078c4 <USBD_StdEPReq+0xd4>
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d015      	beq.n	80078ee <USBD_StdEPReq+0xfe>
 80078c2:	e02d      	b.n	8007920 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00c      	beq.n	80078e4 <USBD_StdEPReq+0xf4>
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b80      	cmp	r3, #128	; 0x80
 80078ce:	d009      	beq.n	80078e4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 fc2b 	bl	8009130 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078da:	2180      	movs	r1, #128	; 0x80
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 fc27 	bl	8009130 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078e2:	e023      	b.n	800792c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fbfe 	bl	80080e8 <USBD_CtlError>
        break;
 80078ec:	e01e      	b.n	800792c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	885b      	ldrh	r3, [r3, #2]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d119      	bne.n	800792a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d004      	beq.n	800790a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 fc32 	bl	800916e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fcb7 	bl	800827e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
        }
        break;
 800791e:	e004      	b.n	800792a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fbe0 	bl	80080e8 <USBD_CtlError>
        break;
 8007928:	e000      	b.n	800792c <USBD_StdEPReq+0x13c>
        break;
 800792a:	bf00      	nop
      }
      break;
 800792c:	e0aa      	b.n	8007a84 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007934:	2b02      	cmp	r3, #2
 8007936:	d002      	beq.n	800793e <USBD_StdEPReq+0x14e>
 8007938:	2b03      	cmp	r3, #3
 800793a:	d032      	beq.n	80079a2 <USBD_StdEPReq+0x1b2>
 800793c:	e097      	b.n	8007a6e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d007      	beq.n	8007954 <USBD_StdEPReq+0x164>
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b80      	cmp	r3, #128	; 0x80
 8007948:	d004      	beq.n	8007954 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fbcb 	bl	80080e8 <USBD_CtlError>
          break;
 8007952:	e091      	b.n	8007a78 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007958:	2b00      	cmp	r3, #0
 800795a:	da0b      	bge.n	8007974 <USBD_StdEPReq+0x184>
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	3310      	adds	r3, #16
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	4413      	add	r3, r2
 8007970:	3304      	adds	r3, #4
 8007972:	e00b      	b.n	800798c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	4413      	add	r3, r2
 800798a:	3304      	adds	r3, #4
 800798c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2202      	movs	r2, #2
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fc15 	bl	80081ca <USBD_CtlSendData>
        break;
 80079a0:	e06a      	b.n	8007a78 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80079a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	da11      	bge.n	80079ce <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	f003 020f 	and.w	r2, r3, #15
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	440b      	add	r3, r1
 80079bc:	3324      	adds	r3, #36	; 0x24
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d117      	bne.n	80079f4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fb8e 	bl	80080e8 <USBD_CtlError>
            break;
 80079cc:	e054      	b.n	8007a78 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	f003 020f 	and.w	r2, r3, #15
 80079d4:	6879      	ldr	r1, [r7, #4]
 80079d6:	4613      	mov	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	440b      	add	r3, r1
 80079e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d104      	bne.n	80079f4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fb7b 	bl	80080e8 <USBD_CtlError>
            break;
 80079f2:	e041      	b.n	8007a78 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	da0b      	bge.n	8007a14 <USBD_StdEPReq+0x224>
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	3310      	adds	r3, #16
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	4413      	add	r3, r2
 8007a10:	3304      	adds	r3, #4
 8007a12:	e00b      	b.n	8007a2c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	4413      	add	r3, r2
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <USBD_StdEPReq+0x24a>
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	2b80      	cmp	r3, #128	; 0x80
 8007a38:	d103      	bne.n	8007a42 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	e00e      	b.n	8007a60 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 fbb0 	bl	80091ac <USBD_LL_IsStallEP>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2201      	movs	r2, #1
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	e002      	b.n	8007a60 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2202      	movs	r2, #2
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fbaf 	bl	80081ca <USBD_CtlSendData>
          break;
 8007a6c:	e004      	b.n	8007a78 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fb39 	bl	80080e8 <USBD_CtlError>
        break;
 8007a76:	bf00      	nop
      }
      break;
 8007a78:	e004      	b.n	8007a84 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fb33 	bl	80080e8 <USBD_CtlError>
      break;
 8007a82:	bf00      	nop
    }
    break;
 8007a84:	e004      	b.n	8007a90 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fb2d 	bl	80080e8 <USBD_CtlError>
    break;
 8007a8e:	bf00      	nop
  }

  return ret;
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	885b      	ldrh	r3, [r3, #2]
 8007ab6:	0a1b      	lsrs	r3, r3, #8
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	3b01      	subs	r3, #1
 8007abc:	2b06      	cmp	r3, #6
 8007abe:	f200 8128 	bhi.w	8007d12 <USBD_GetDescriptor+0x276>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <USBD_GetDescriptor+0x2c>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007ae5 	.word	0x08007ae5
 8007acc:	08007afd 	.word	0x08007afd
 8007ad0:	08007b3d 	.word	0x08007b3d
 8007ad4:	08007d13 	.word	0x08007d13
 8007ad8:	08007d13 	.word	0x08007d13
 8007adc:	08007cb3 	.word	0x08007cb3
 8007ae0:	08007cdf 	.word	0x08007cdf
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	7c12      	ldrb	r2, [r2, #16]
 8007af0:	f107 0108 	add.w	r1, r7, #8
 8007af4:	4610      	mov	r0, r2
 8007af6:	4798      	blx	r3
 8007af8:	60f8      	str	r0, [r7, #12]
    break;
 8007afa:	e112      	b.n	8007d22 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	7c1b      	ldrb	r3, [r3, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10d      	bne.n	8007b20 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0c:	f107 0208 	add.w	r2, r7, #8
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007b1e:	e100      	b.n	8007d22 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	f107 0208 	add.w	r2, r7, #8
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
 8007b30:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3301      	adds	r3, #1
 8007b36:	2202      	movs	r2, #2
 8007b38:	701a      	strb	r2, [r3, #0]
    break;
 8007b3a:	e0f2      	b.n	8007d22 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	885b      	ldrh	r3, [r3, #2]
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b05      	cmp	r3, #5
 8007b44:	f200 80ac 	bhi.w	8007ca0 <USBD_GetDescriptor+0x204>
 8007b48:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <USBD_GetDescriptor+0xb4>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007b69 	.word	0x08007b69
 8007b54:	08007b9d 	.word	0x08007b9d
 8007b58:	08007bd1 	.word	0x08007bd1
 8007b5c:	08007c05 	.word	0x08007c05
 8007b60:	08007c39 	.word	0x08007c39
 8007b64:	08007c6d 	.word	0x08007c6d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00b      	beq.n	8007b8c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	7c12      	ldrb	r2, [r2, #16]
 8007b80:	f107 0108 	add.w	r1, r7, #8
 8007b84:	4610      	mov	r0, r2
 8007b86:	4798      	blx	r3
 8007b88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b8a:	e091      	b.n	8007cb0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 faaa 	bl	80080e8 <USBD_CtlError>
        err++;
 8007b94:	7afb      	ldrb	r3, [r7, #11]
 8007b96:	3301      	adds	r3, #1
 8007b98:	72fb      	strb	r3, [r7, #11]
      break;
 8007b9a:	e089      	b.n	8007cb0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	7c12      	ldrb	r2, [r2, #16]
 8007bb4:	f107 0108 	add.w	r1, r7, #8
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4798      	blx	r3
 8007bbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bbe:	e077      	b.n	8007cb0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fa90 	bl	80080e8 <USBD_CtlError>
        err++;
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	72fb      	strb	r3, [r7, #11]
      break;
 8007bce:	e06f      	b.n	8007cb0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00b      	beq.n	8007bf4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	7c12      	ldrb	r2, [r2, #16]
 8007be8:	f107 0108 	add.w	r1, r7, #8
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
 8007bf0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bf2:	e05d      	b.n	8007cb0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fa76 	bl	80080e8 <USBD_CtlError>
        err++;
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	72fb      	strb	r3, [r7, #11]
      break;
 8007c02:	e055      	b.n	8007cb0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00b      	beq.n	8007c28 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	7c12      	ldrb	r2, [r2, #16]
 8007c1c:	f107 0108 	add.w	r1, r7, #8
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
 8007c24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c26:	e043      	b.n	8007cb0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa5c 	bl	80080e8 <USBD_CtlError>
        err++;
 8007c30:	7afb      	ldrb	r3, [r7, #11]
 8007c32:	3301      	adds	r3, #1
 8007c34:	72fb      	strb	r3, [r7, #11]
      break;
 8007c36:	e03b      	b.n	8007cb0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	7c12      	ldrb	r2, [r2, #16]
 8007c50:	f107 0108 	add.w	r1, r7, #8
 8007c54:	4610      	mov	r0, r2
 8007c56:	4798      	blx	r3
 8007c58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c5a:	e029      	b.n	8007cb0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fa42 	bl	80080e8 <USBD_CtlError>
        err++;
 8007c64:	7afb      	ldrb	r3, [r7, #11]
 8007c66:	3301      	adds	r3, #1
 8007c68:	72fb      	strb	r3, [r7, #11]
      break;
 8007c6a:	e021      	b.n	8007cb0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00b      	beq.n	8007c90 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	7c12      	ldrb	r2, [r2, #16]
 8007c84:	f107 0108 	add.w	r1, r7, #8
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4798      	blx	r3
 8007c8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c8e:	e00f      	b.n	8007cb0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa28 	bl	80080e8 <USBD_CtlError>
        err++;
 8007c98:	7afb      	ldrb	r3, [r7, #11]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c9e:	e007      	b.n	8007cb0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fa20 	bl	80080e8 <USBD_CtlError>
      err++;
 8007ca8:	7afb      	ldrb	r3, [r7, #11]
 8007caa:	3301      	adds	r3, #1
 8007cac:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007cae:	bf00      	nop
    }
    break;
 8007cb0:	e037      	b.n	8007d22 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	7c1b      	ldrb	r3, [r3, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d109      	bne.n	8007cce <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc2:	f107 0208 	add.w	r2, r7, #8
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	4798      	blx	r3
 8007cca:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007ccc:	e029      	b.n	8007d22 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fa09 	bl	80080e8 <USBD_CtlError>
      err++;
 8007cd6:	7afb      	ldrb	r3, [r7, #11]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	72fb      	strb	r3, [r7, #11]
    break;
 8007cdc:	e021      	b.n	8007d22 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	7c1b      	ldrb	r3, [r3, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10d      	bne.n	8007d02 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cee:	f107 0208 	add.w	r2, r7, #8
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	4798      	blx	r3
 8007cf6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	2207      	movs	r2, #7
 8007cfe:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d00:	e00f      	b.n	8007d22 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f9ef 	bl	80080e8 <USBD_CtlError>
      err++;
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	72fb      	strb	r3, [r7, #11]
    break;
 8007d10:	e007      	b.n	8007d22 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f9e7 	bl	80080e8 <USBD_CtlError>
    err++;
 8007d1a:	7afb      	ldrb	r3, [r7, #11]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	72fb      	strb	r3, [r7, #11]
    break;
 8007d20:	bf00      	nop
  }

  if (err != 0U)
 8007d22:	7afb      	ldrb	r3, [r7, #11]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d11e      	bne.n	8007d66 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	88db      	ldrh	r3, [r3, #6]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d016      	beq.n	8007d5e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007d30:	893b      	ldrh	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00e      	beq.n	8007d54 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	88da      	ldrh	r2, [r3, #6]
 8007d3a:	893b      	ldrh	r3, [r7, #8]
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	bf28      	it	cs
 8007d40:	4613      	movcs	r3, r2
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d46:	893b      	ldrh	r3, [r7, #8]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	68f9      	ldr	r1, [r7, #12]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fa3c 	bl	80081ca <USBD_CtlSendData>
 8007d52:	e009      	b.n	8007d68 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f9c6 	bl	80080e8 <USBD_CtlError>
 8007d5c:	e004      	b.n	8007d68 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa8d 	bl	800827e <USBD_CtlSendStatus>
 8007d64:	e000      	b.n	8007d68 <USBD_GetDescriptor+0x2cc>
    return;
 8007d66:	bf00      	nop
    }
  }
}
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop

08007d70 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	889b      	ldrh	r3, [r3, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d130      	bne.n	8007de4 <USBD_SetAddress+0x74>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	88db      	ldrh	r3, [r3, #6]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d12c      	bne.n	8007de4 <USBD_SetAddress+0x74>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	885b      	ldrh	r3, [r3, #2]
 8007d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d90:	d828      	bhi.n	8007de4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	885b      	ldrh	r3, [r3, #2]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d104      	bne.n	8007db2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f99c 	bl	80080e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db0:	e01c      	b.n	8007dec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	7bfa      	ldrb	r2, [r7, #15]
 8007db6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f001 fa20 	bl	8009204 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fa5a 	bl	800827e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d004      	beq.n	8007dda <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd8:	e008      	b.n	8007dec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de2:	e003      	b.n	8007dec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f97e 	bl	80080e8 <USBD_CtlError>
  }
}
 8007dec:	bf00      	nop
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	885b      	ldrh	r3, [r3, #2]
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	4b4b      	ldr	r3, [pc, #300]	; (8007f38 <USBD_SetConfig+0x144>)
 8007e0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e0c:	4b4a      	ldr	r3, [pc, #296]	; (8007f38 <USBD_SetConfig+0x144>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d905      	bls.n	8007e20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f966 	bl	80080e8 <USBD_CtlError>
    return USBD_FAIL;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e087      	b.n	8007f30 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d002      	beq.n	8007e30 <USBD_SetConfig+0x3c>
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d025      	beq.n	8007e7a <USBD_SetConfig+0x86>
 8007e2e:	e071      	b.n	8007f14 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007e30:	4b41      	ldr	r3, [pc, #260]	; (8007f38 <USBD_SetConfig+0x144>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d01c      	beq.n	8007e72 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007e38:	4b3f      	ldr	r3, [pc, #252]	; (8007f38 <USBD_SetConfig+0x144>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e42:	4b3d      	ldr	r3, [pc, #244]	; (8007f38 <USBD_SetConfig+0x144>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff f9a7 	bl	800719c <USBD_SetClassConfig>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d004      	beq.n	8007e62 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f944 	bl	80080e8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007e60:	e065      	b.n	8007f2e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fa0b 	bl	800827e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2203      	movs	r2, #3
 8007e6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007e70:	e05d      	b.n	8007f2e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa03 	bl	800827e <USBD_CtlSendStatus>
    break;
 8007e78:	e059      	b.n	8007f2e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007e7a:	4b2f      	ldr	r3, [pc, #188]	; (8007f38 <USBD_SetConfig+0x144>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d112      	bne.n	8007ea8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007e8a:	4b2b      	ldr	r3, [pc, #172]	; (8007f38 <USBD_SetConfig+0x144>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e94:	4b28      	ldr	r3, [pc, #160]	; (8007f38 <USBD_SetConfig+0x144>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7ff f99a 	bl	80071d4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f9ec 	bl	800827e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007ea6:	e042      	b.n	8007f2e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007ea8:	4b23      	ldr	r3, [pc, #140]	; (8007f38 <USBD_SetConfig+0x144>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d02a      	beq.n	8007f0c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff f988 	bl	80071d4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007ec4:	4b1c      	ldr	r3, [pc, #112]	; (8007f38 <USBD_SetConfig+0x144>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ece:	4b1a      	ldr	r3, [pc, #104]	; (8007f38 <USBD_SetConfig+0x144>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff f961 	bl	800719c <USBD_SetClassConfig>
 8007eda:	4603      	mov	r3, r0
 8007edc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00f      	beq.n	8007f04 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f8fe 	bl	80080e8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7ff f96d 	bl	80071d4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2202      	movs	r2, #2
 8007efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f02:	e014      	b.n	8007f2e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f9ba 	bl	800827e <USBD_CtlSendStatus>
    break;
 8007f0a:	e010      	b.n	8007f2e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f9b6 	bl	800827e <USBD_CtlSendStatus>
    break;
 8007f12:	e00c      	b.n	8007f2e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f8e6 	bl	80080e8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f1c:	4b06      	ldr	r3, [pc, #24]	; (8007f38 <USBD_SetConfig+0x144>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff f956 	bl	80071d4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f2c:	bf00      	nop
  }

  return ret;
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	20000784 	.word	0x20000784

08007f3c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	88db      	ldrh	r3, [r3, #6]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d004      	beq.n	8007f58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f8c9 	bl	80080e8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007f56:	e021      	b.n	8007f9c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	db17      	blt.n	8007f92 <USBD_GetConfig+0x56>
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	dd02      	ble.n	8007f6c <USBD_GetConfig+0x30>
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d00b      	beq.n	8007f82 <USBD_GetConfig+0x46>
 8007f6a:	e012      	b.n	8007f92 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3308      	adds	r3, #8
 8007f76:	2201      	movs	r2, #1
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f925 	bl	80081ca <USBD_CtlSendData>
      break;
 8007f80:	e00c      	b.n	8007f9c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	3304      	adds	r3, #4
 8007f86:	2201      	movs	r2, #1
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f91d 	bl	80081ca <USBD_CtlSendData>
      break;
 8007f90:	e004      	b.n	8007f9c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f8a7 	bl	80080e8 <USBD_CtlError>
      break;
 8007f9a:	bf00      	nop
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d81e      	bhi.n	8007ff8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	88db      	ldrh	r3, [r3, #6]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d004      	beq.n	8007fcc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f88f 	bl	80080e8 <USBD_CtlError>
      break;
 8007fca:	e01a      	b.n	8008002 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
    pdev->dev_config_status = 0U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	60da      	str	r2, [r3, #12]
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d005      	beq.n	8007fe8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f043 0202 	orr.w	r2, r3, #2
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	330c      	adds	r3, #12
 8007fec:	2202      	movs	r2, #2
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f8ea 	bl	80081ca <USBD_CtlSendData>
    break;
 8007ff6:	e004      	b.n	8008002 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f874 	bl	80080e8 <USBD_CtlError>
    break;
 8008000:	bf00      	nop
  }
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	885b      	ldrh	r3, [r3, #2]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d106      	bne.n	800802a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f92a 	bl	800827e <USBD_CtlSendStatus>
  }
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008042:	3b01      	subs	r3, #1
 8008044:	2b02      	cmp	r3, #2
 8008046:	d80b      	bhi.n	8008060 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	885b      	ldrh	r3, [r3, #2]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d10c      	bne.n	800806a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f910 	bl	800827e <USBD_CtlSendStatus>
      }
      break;
 800805e:	e004      	b.n	800806a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f840 	bl	80080e8 <USBD_CtlError>
      break;
 8008068:	e000      	b.n	800806c <USBD_ClrFeature+0x3a>
      break;
 800806a:	bf00      	nop
  }
}
 800806c:	bf00      	nop
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	781a      	ldrb	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3301      	adds	r3, #1
 800808e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	781a      	ldrb	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3301      	adds	r3, #1
 800809c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f7ff fad3 	bl	800764a <SWAPBYTE>
 80080a4:	4603      	mov	r3, r0
 80080a6:	461a      	mov	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3301      	adds	r3, #1
 80080b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3301      	adds	r3, #1
 80080b6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff fac6 	bl	800764a <SWAPBYTE>
 80080be:	4603      	mov	r3, r0
 80080c0:	461a      	mov	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3301      	adds	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	3301      	adds	r3, #1
 80080d0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f7ff fab9 	bl	800764a <SWAPBYTE>
 80080d8:	4603      	mov	r3, r0
 80080da:	461a      	mov	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	80da      	strh	r2, [r3, #6]
}
 80080e0:	bf00      	nop
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080f2:	2180      	movs	r1, #128	; 0x80
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 f81b 	bl	8009130 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080fa:	2100      	movs	r1, #0
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 f817 	bl	8009130 <USBD_LL_StallEP>
}
 8008102:	bf00      	nop
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b086      	sub	sp, #24
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d036      	beq.n	800818e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008124:	6938      	ldr	r0, [r7, #16]
 8008126:	f000 f836 	bl	8008196 <USBD_GetLen>
 800812a:	4603      	mov	r3, r0
 800812c:	3301      	adds	r3, #1
 800812e:	b29b      	uxth	r3, r3
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	b29a      	uxth	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	4413      	add	r3, r2
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	7812      	ldrb	r2, [r2, #0]
 8008142:	701a      	strb	r2, [r3, #0]
  idx++;
 8008144:	7dfb      	ldrb	r3, [r7, #23]
 8008146:	3301      	adds	r3, #1
 8008148:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	4413      	add	r3, r2
 8008150:	2203      	movs	r2, #3
 8008152:	701a      	strb	r2, [r3, #0]
  idx++;
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	3301      	adds	r3, #1
 8008158:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800815a:	e013      	b.n	8008184 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800815c:	7dfb      	ldrb	r3, [r7, #23]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	4413      	add	r3, r2
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	7812      	ldrb	r2, [r2, #0]
 8008166:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	3301      	adds	r3, #1
 800816c:	613b      	str	r3, [r7, #16]
    idx++;
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	3301      	adds	r3, #1
 8008172:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	4413      	add	r3, r2
 800817a:	2200      	movs	r2, #0
 800817c:	701a      	strb	r2, [r3, #0]
    idx++;
 800817e:	7dfb      	ldrb	r3, [r7, #23]
 8008180:	3301      	adds	r3, #1
 8008182:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e7      	bne.n	800815c <USBD_GetString+0x52>
 800818c:	e000      	b.n	8008190 <USBD_GetString+0x86>
    return;
 800818e:	bf00      	nop
  }
}
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008196:	b480      	push	{r7}
 8008198:	b085      	sub	sp, #20
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80081a6:	e005      	b.n	80081b4 <USBD_GetLen+0x1e>
  {
    len++;
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	3301      	adds	r3, #1
 80081ac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	3301      	adds	r3, #1
 80081b2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1f5      	bne.n	80081a8 <USBD_GetLen+0x12>
  }

  return len;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	60f8      	str	r0, [r7, #12]
 80081d2:	60b9      	str	r1, [r7, #8]
 80081d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2202      	movs	r2, #2
 80081da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	2100      	movs	r1, #0
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f001 f826 	bl	8009242 <USBD_LL_Transmit>

  return USBD_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	2100      	movs	r1, #0
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f001 f815 	bl	8009242 <USBD_LL_Transmit>

  return USBD_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2203      	movs	r2, #3
 8008232:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	2100      	movs	r1, #0
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f001 f819 	bl	8009284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	2100      	movs	r1, #0
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f001 f808 	bl	8009284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2204      	movs	r2, #4
 800828a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800828e:	2300      	movs	r3, #0
 8008290:	2200      	movs	r2, #0
 8008292:	2100      	movs	r1, #0
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 ffd4 	bl	8009242 <USBD_LL_Transmit>

  return USBD_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2205      	movs	r2, #5
 80082b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082b4:	2300      	movs	r3, #0
 80082b6:	2200      	movs	r2, #0
 80082b8:	2100      	movs	r1, #0
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 ffe2 	bl	8009284 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 80082d0:	4b10      	ldr	r3, [pc, #64]	; (8008314 <MX_PDM2PCM_Init+0x48>)
 80082d2:	2201      	movs	r2, #1
 80082d4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 80082d6:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <MX_PDM2PCM_Init+0x48>)
 80082d8:	2201      	movs	r2, #1
 80082da:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 80082dc:	4b0d      	ldr	r3, [pc, #52]	; (8008314 <MX_PDM2PCM_Init+0x48>)
 80082de:	4a0e      	ldr	r2, [pc, #56]	; (8008318 <MX_PDM2PCM_Init+0x4c>)
 80082e0:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 80082e2:	4b0c      	ldr	r3, [pc, #48]	; (8008314 <MX_PDM2PCM_Init+0x48>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 80082e8:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <MX_PDM2PCM_Init+0x48>)
 80082ea:	2201      	movs	r2, #1
 80082ec:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 80082ee:	4809      	ldr	r0, [pc, #36]	; (8008314 <MX_PDM2PCM_Init+0x48>)
 80082f0:	f002 fd78 	bl	800ade4 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_16;
 80082f4:	4b09      	ldr	r3, [pc, #36]	; (800831c <MX_PDM2PCM_Init+0x50>)
 80082f6:	2205      	movs	r2, #5
 80082f8:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 1024;
 80082fa:	4b08      	ldr	r3, [pc, #32]	; (800831c <MX_PDM2PCM_Init+0x50>)
 80082fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008300:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8008302:	4b06      	ldr	r3, [pc, #24]	; (800831c <MX_PDM2PCM_Init+0x50>)
 8008304:	2200      	movs	r2, #0
 8008306:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8008308:	4904      	ldr	r1, [pc, #16]	; (800831c <MX_PDM2PCM_Init+0x50>)
 800830a:	4802      	ldr	r0, [pc, #8]	; (8008314 <MX_PDM2PCM_Init+0x48>)
 800830c:	f002 fdf4 	bl	800aef8 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8008310:	bf00      	nop
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20011ac4 	.word	0x20011ac4
 8008318:	7d70a3d6 	.word	0x7d70a3d6
 800831c:	20011abc 	.word	0x20011abc

08008320 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008324:	2200      	movs	r2, #0
 8008326:	4912      	ldr	r1, [pc, #72]	; (8008370 <MX_USB_DEVICE_Init+0x50>)
 8008328:	4812      	ldr	r0, [pc, #72]	; (8008374 <MX_USB_DEVICE_Init+0x54>)
 800832a:	f7fe fec9 	bl	80070c0 <USBD_Init>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008334:	f7f8 ffe0 	bl	80012f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008338:	490f      	ldr	r1, [pc, #60]	; (8008378 <MX_USB_DEVICE_Init+0x58>)
 800833a:	480e      	ldr	r0, [pc, #56]	; (8008374 <MX_USB_DEVICE_Init+0x54>)
 800833c:	f7fe fef6 	bl	800712c <USBD_RegisterClass>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008346:	f7f8 ffd7 	bl	80012f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800834a:	490c      	ldr	r1, [pc, #48]	; (800837c <MX_USB_DEVICE_Init+0x5c>)
 800834c:	4809      	ldr	r0, [pc, #36]	; (8008374 <MX_USB_DEVICE_Init+0x54>)
 800834e:	f7fe fe1b 	bl	8006f88 <USBD_CDC_RegisterInterface>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008358:	f7f8 ffce 	bl	80012f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800835c:	4805      	ldr	r0, [pc, #20]	; (8008374 <MX_USB_DEVICE_Init+0x54>)
 800835e:	f7fe ff06 	bl	800716e <USBD_Start>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008368:	f7f8 ffc6 	bl	80012f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800836c:	bf00      	nop
 800836e:	bd80      	pop	{r7, pc}
 8008370:	2000053c 	.word	0x2000053c
 8008374:	20011b10 	.word	0x20011b10
 8008378:	20000424 	.word	0x20000424
 800837c:	20000528 	.word	0x20000528

08008380 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008384:	2200      	movs	r2, #0
 8008386:	4905      	ldr	r1, [pc, #20]	; (800839c <CDC_Init_FS+0x1c>)
 8008388:	4805      	ldr	r0, [pc, #20]	; (80083a0 <CDC_Init_FS+0x20>)
 800838a:	f7fe fe12 	bl	8006fb2 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800838e:	4905      	ldr	r1, [pc, #20]	; (80083a4 <CDC_Init_FS+0x24>)
 8008390:	4803      	ldr	r0, [pc, #12]	; (80083a0 <CDC_Init_FS+0x20>)
 8008392:	f7fe fe27 	bl	8006fe4 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8008396:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008398:	4618      	mov	r0, r3
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20011e64 	.word	0x20011e64
 80083a0:	20011b10 	.word	0x20011b10
 80083a4:	20011de4 	.word	0x20011de4

080083a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 80083ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	6039      	str	r1, [r7, #0]
 80083c2:	71fb      	strb	r3, [r7, #7]
 80083c4:	4613      	mov	r3, r2
 80083c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	2b23      	cmp	r3, #35	; 0x23
 80083cc:	d866      	bhi.n	800849c <CDC_Control_FS+0xe4>
 80083ce:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <CDC_Control_FS+0x1c>)
 80083d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d4:	0800849d 	.word	0x0800849d
 80083d8:	0800849d 	.word	0x0800849d
 80083dc:	0800849d 	.word	0x0800849d
 80083e0:	0800849d 	.word	0x0800849d
 80083e4:	0800849d 	.word	0x0800849d
 80083e8:	0800849d 	.word	0x0800849d
 80083ec:	0800849d 	.word	0x0800849d
 80083f0:	0800849d 	.word	0x0800849d
 80083f4:	0800849d 	.word	0x0800849d
 80083f8:	0800849d 	.word	0x0800849d
 80083fc:	0800849d 	.word	0x0800849d
 8008400:	0800849d 	.word	0x0800849d
 8008404:	0800849d 	.word	0x0800849d
 8008408:	0800849d 	.word	0x0800849d
 800840c:	0800849d 	.word	0x0800849d
 8008410:	0800849d 	.word	0x0800849d
 8008414:	0800849d 	.word	0x0800849d
 8008418:	0800849d 	.word	0x0800849d
 800841c:	0800849d 	.word	0x0800849d
 8008420:	0800849d 	.word	0x0800849d
 8008424:	0800849d 	.word	0x0800849d
 8008428:	0800849d 	.word	0x0800849d
 800842c:	0800849d 	.word	0x0800849d
 8008430:	0800849d 	.word	0x0800849d
 8008434:	0800849d 	.word	0x0800849d
 8008438:	0800849d 	.word	0x0800849d
 800843c:	0800849d 	.word	0x0800849d
 8008440:	0800849d 	.word	0x0800849d
 8008444:	0800849d 	.word	0x0800849d
 8008448:	0800849d 	.word	0x0800849d
 800844c:	0800849d 	.word	0x0800849d
 8008450:	0800849d 	.word	0x0800849d
 8008454:	0800849d 	.word	0x0800849d
 8008458:	0800849d 	.word	0x0800849d
 800845c:	08008465 	.word	0x08008465
 8008460:	0800849d 	.word	0x0800849d

		break;

	case CDC_SET_CONTROL_LINE_STATE:
	{
		USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef*) pbuf;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	60fb      	str	r3, [r7, #12]
		if ((req->wValue & 0x0001) != 0)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	885b      	ldrh	r3, [r3, #2]
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	d009      	beq.n	8008488 <CDC_Control_FS+0xd0>
		{
			HOST_PORT_COM_OPEN = 1;
 8008474:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <CDC_Control_FS+0xf0>)
 8008476:	2201      	movs	r2, #1
 8008478:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800847a:	2201      	movs	r2, #1
 800847c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008480:	480a      	ldr	r0, [pc, #40]	; (80084ac <CDC_Control_FS+0xf4>)
 8008482:	f7fa f8b1 	bl	80025e8 <HAL_GPIO_WritePin>
		else
		{
			HOST_PORT_COM_OPEN = 0;
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
		}
		break;
 8008486:	e00a      	b.n	800849e <CDC_Control_FS+0xe6>
			HOST_PORT_COM_OPEN = 0;
 8008488:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <CDC_Control_FS+0xf0>)
 800848a:	2200      	movs	r2, #0
 800848c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800848e:	2200      	movs	r2, #0
 8008490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008494:	4805      	ldr	r0, [pc, #20]	; (80084ac <CDC_Control_FS+0xf4>)
 8008496:	f7fa f8a7 	bl	80025e8 <HAL_GPIO_WritePin>
		break;
 800849a:	e000      	b.n	800849e <CDC_Control_FS+0xe6>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800849c:	bf00      	nop
	}

	return (USBD_OK);
 800849e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	20000785 	.word	0x20000785
 80084ac:	40020c00 	.word	0x40020c00

080084b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t result = USBD_OK;;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73bb      	strb	r3, [r7, #14]
	static uint8_t txLen;
	static uint8_t rxLen;
	static uint8_t VT100cmdSeq;
	static uint8_t rxBufferFS[APP_RX_DATA_SIZE];
	static uint8_t txBufferFS[APP_TX_DATA_SIZE];
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80084be:	2201      	movs	r2, #1
 80084c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80084c4:	487a      	ldr	r0, [pc, #488]	; (80086b0 <CDC_Receive_FS+0x200>)
 80084c6:	f7fa f88f 	bl	80025e8 <HAL_GPIO_WritePin>

	/* Get data from serial com */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	4879      	ldr	r0, [pc, #484]	; (80086b4 <CDC_Receive_FS+0x204>)
 80084ce:	f7fe fd89 	bl	8006fe4 <USBD_CDC_SetRxBuffer>
	if ((result = USBD_CDC_ReceivePacket(&hUsbDeviceFS)) != USBD_OK)
 80084d2:	4878      	ldr	r0, [pc, #480]	; (80086b4 <CDC_Receive_FS+0x204>)
 80084d4:	f7fe fdca 	bl	800706c <USBD_CDC_ReceivePacket>
 80084d8:	4603      	mov	r3, r0
 80084da:	73bb      	strb	r3, [r7, #14]
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d008      	beq.n	80084f4 <CDC_Receive_FS+0x44>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80084e2:	2200      	movs	r2, #0
 80084e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80084e8:	4871      	ldr	r0, [pc, #452]	; (80086b0 <CDC_Receive_FS+0x200>)
 80084ea:	f7fa f87d 	bl	80025e8 <HAL_GPIO_WritePin>
		return result;
 80084ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084f2:	e0d8      	b.n	80086a6 <CDC_Receive_FS+0x1f6>
	}

	for (uint8_t i = 0; i < (*Len); i++)
 80084f4:	2300      	movs	r3, #0
 80084f6:	73fb      	strb	r3, [r7, #15]
 80084f8:	e0b2      	b.n	8008660 <CDC_Receive_FS+0x1b0>
	{
		/* Avoid buffer overflow */
		if (rxLen == APP_RX_DATA_SIZE-1)
 80084fa:	4b6f      	ldr	r3, [pc, #444]	; (80086b8 <CDC_Receive_FS+0x208>)
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008500:	d102      	bne.n	8008508 <CDC_Receive_FS+0x58>
		{	rxLen = 0;
 8008502:	4b6d      	ldr	r3, [pc, #436]	; (80086b8 <CDC_Receive_FS+0x208>)
 8008504:	2200      	movs	r2, #0
 8008506:	701a      	strb	r2, [r3, #0]
		}

		/* Avoid VT100 cmd sequences (4 uint8_t)*/
		if(Buf[i] == '\033')
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b1b      	cmp	r3, #27
 8008512:	d102      	bne.n	800851a <CDC_Receive_FS+0x6a>
		{	VT100cmdSeq = 4;
 8008514:	4b69      	ldr	r3, [pc, #420]	; (80086bc <CDC_Receive_FS+0x20c>)
 8008516:	2204      	movs	r2, #4
 8008518:	701a      	strb	r2, [r3, #0]
		}

		if(!VT100cmdSeq) // avoid VT100cmd
 800851a:	4b68      	ldr	r3, [pc, #416]	; (80086bc <CDC_Receive_FS+0x20c>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	f040 8095 	bne.w	800864e <CDC_Receive_FS+0x19e>
		{
			/* If Backspace key: clear the last char */
			if (Buf[i] == '\b' && CDC_RX_DATA_PRINT && rxLen)
 8008524:	7bfb      	ldrb	r3, [r7, #15]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	4413      	add	r3, r2
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2b08      	cmp	r3, #8
 800852e:	d125      	bne.n	800857c <CDC_Receive_FS+0xcc>
 8008530:	4b63      	ldr	r3, [pc, #396]	; (80086c0 <CDC_Receive_FS+0x210>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d021      	beq.n	800857c <CDC_Receive_FS+0xcc>
 8008538:	4b5f      	ldr	r3, [pc, #380]	; (80086b8 <CDC_Receive_FS+0x208>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d01d      	beq.n	800857c <CDC_Receive_FS+0xcc>
			{
				memcpy(&txBufferFS[txLen], "\b \b", 3);
 8008540:	4b60      	ldr	r3, [pc, #384]	; (80086c4 <CDC_Receive_FS+0x214>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	4b60      	ldr	r3, [pc, #384]	; (80086c8 <CDC_Receive_FS+0x218>)
 8008548:	4413      	add	r3, r2
 800854a:	2203      	movs	r2, #3
 800854c:	495f      	ldr	r1, [pc, #380]	; (80086cc <CDC_Receive_FS+0x21c>)
 800854e:	4618      	mov	r0, r3
 8008550:	f002 fe3c 	bl	800b1cc <memcpy>
				txLen += 3;
 8008554:	4b5b      	ldr	r3, [pc, #364]	; (80086c4 <CDC_Receive_FS+0x214>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	3303      	adds	r3, #3
 800855a:	b2da      	uxtb	r2, r3
 800855c:	4b59      	ldr	r3, [pc, #356]	; (80086c4 <CDC_Receive_FS+0x214>)
 800855e:	701a      	strb	r2, [r3, #0]
				txLen %= APP_TX_DATA_SIZE;
 8008560:	4b58      	ldr	r3, [pc, #352]	; (80086c4 <CDC_Receive_FS+0x214>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008568:	b2da      	uxtb	r2, r3
 800856a:	4b56      	ldr	r3, [pc, #344]	; (80086c4 <CDC_Receive_FS+0x214>)
 800856c:	701a      	strb	r2, [r3, #0]
				rxLen--;
 800856e:	4b52      	ldr	r3, [pc, #328]	; (80086b8 <CDC_Receive_FS+0x208>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	3b01      	subs	r3, #1
 8008574:	b2da      	uxtb	r2, r3
 8008576:	4b50      	ldr	r3, [pc, #320]	; (80086b8 <CDC_Receive_FS+0x208>)
 8008578:	701a      	strb	r2, [r3, #0]
 800857a:	e06e      	b.n	800865a <CDC_Receive_FS+0x1aa>
			}
			/* Else if Enter key: add a \n to terminal and extract output buffer */
			else if (Buf[i] == '\r' || Buf[i] == '\0')
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	4413      	add	r3, r2
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b0d      	cmp	r3, #13
 8008586:	d005      	beq.n	8008594 <CDC_Receive_FS+0xe4>
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	4413      	add	r3, r2
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d136      	bne.n	8008602 <CDC_Receive_FS+0x152>
			{
				if (CDC_RX_DATA_PRINT)
 8008594:	4b4a      	ldr	r3, [pc, #296]	; (80086c0 <CDC_Receive_FS+0x210>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d016      	beq.n	80085ca <CDC_Receive_FS+0x11a>
				{
					memcpy(&txBufferFS[txLen], "\r\n~$: ", 6);
 800859c:	4b49      	ldr	r3, [pc, #292]	; (80086c4 <CDC_Receive_FS+0x214>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	461a      	mov	r2, r3
 80085a2:	4b49      	ldr	r3, [pc, #292]	; (80086c8 <CDC_Receive_FS+0x218>)
 80085a4:	4413      	add	r3, r2
 80085a6:	2206      	movs	r2, #6
 80085a8:	4949      	ldr	r1, [pc, #292]	; (80086d0 <CDC_Receive_FS+0x220>)
 80085aa:	4618      	mov	r0, r3
 80085ac:	f002 fe0e 	bl	800b1cc <memcpy>
					txLen += 6;
 80085b0:	4b44      	ldr	r3, [pc, #272]	; (80086c4 <CDC_Receive_FS+0x214>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	3306      	adds	r3, #6
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	4b42      	ldr	r3, [pc, #264]	; (80086c4 <CDC_Receive_FS+0x214>)
 80085ba:	701a      	strb	r2, [r3, #0]
					txLen %= APP_TX_DATA_SIZE;
 80085bc:	4b41      	ldr	r3, [pc, #260]	; (80086c4 <CDC_Receive_FS+0x214>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	4b3f      	ldr	r3, [pc, #252]	; (80086c4 <CDC_Receive_FS+0x214>)
 80085c8:	701a      	strb	r2, [r3, #0]
				}
				if(rxLen)
 80085ca:	4b3b      	ldr	r3, [pc, #236]	; (80086b8 <CDC_Receive_FS+0x208>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d043      	beq.n	800865a <CDC_Receive_FS+0x1aa>
				{
					rxBufferFS[rxLen++] = '\0';
 80085d2:	4b39      	ldr	r3, [pc, #228]	; (80086b8 <CDC_Receive_FS+0x208>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	1c5a      	adds	r2, r3, #1
 80085d8:	b2d1      	uxtb	r1, r2
 80085da:	4a37      	ldr	r2, [pc, #220]	; (80086b8 <CDC_Receive_FS+0x208>)
 80085dc:	7011      	strb	r1, [r2, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	4b3c      	ldr	r3, [pc, #240]	; (80086d4 <CDC_Receive_FS+0x224>)
 80085e2:	2100      	movs	r1, #0
 80085e4:	5499      	strb	r1, [r3, r2]
					memcpy(UserRxBufferFS, rxBufferFS, rxLen);
 80085e6:	4b34      	ldr	r3, [pc, #208]	; (80086b8 <CDC_Receive_FS+0x208>)
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	4939      	ldr	r1, [pc, #228]	; (80086d4 <CDC_Receive_FS+0x224>)
 80085ee:	483a      	ldr	r0, [pc, #232]	; (80086d8 <CDC_Receive_FS+0x228>)
 80085f0:	f002 fdec 	bl	800b1cc <memcpy>
					CDC_RX_DATA_PENDING = 1;
 80085f4:	4b39      	ldr	r3, [pc, #228]	; (80086dc <CDC_Receive_FS+0x22c>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	701a      	strb	r2, [r3, #0]
					rxLen = 0;
 80085fa:	4b2f      	ldr	r3, [pc, #188]	; (80086b8 <CDC_Receive_FS+0x208>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	701a      	strb	r2, [r3, #0]
				if(rxLen)
 8008600:	e02b      	b.n	800865a <CDC_Receive_FS+0x1aa>

			}
			/* Else get the character */
			else
			{
				if (CDC_RX_DATA_PRINT)
 8008602:	4b2f      	ldr	r3, [pc, #188]	; (80086c0 <CDC_Receive_FS+0x210>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d013      	beq.n	8008632 <CDC_Receive_FS+0x182>
				{	txBufferFS[txLen++] = Buf[i];
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	441a      	add	r2, r3
 8008610:	4b2c      	ldr	r3, [pc, #176]	; (80086c4 <CDC_Receive_FS+0x214>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	1c59      	adds	r1, r3, #1
 8008616:	b2c8      	uxtb	r0, r1
 8008618:	492a      	ldr	r1, [pc, #168]	; (80086c4 <CDC_Receive_FS+0x214>)
 800861a:	7008      	strb	r0, [r1, #0]
 800861c:	4619      	mov	r1, r3
 800861e:	7812      	ldrb	r2, [r2, #0]
 8008620:	4b29      	ldr	r3, [pc, #164]	; (80086c8 <CDC_Receive_FS+0x218>)
 8008622:	545a      	strb	r2, [r3, r1]
					txLen %= APP_TX_DATA_SIZE;
 8008624:	4b27      	ldr	r3, [pc, #156]	; (80086c4 <CDC_Receive_FS+0x214>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800862c:	b2da      	uxtb	r2, r3
 800862e:	4b25      	ldr	r3, [pc, #148]	; (80086c4 <CDC_Receive_FS+0x214>)
 8008630:	701a      	strb	r2, [r3, #0]
				}
				rxBufferFS[rxLen++] = Buf[i];
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	441a      	add	r2, r3
 8008638:	4b1f      	ldr	r3, [pc, #124]	; (80086b8 <CDC_Receive_FS+0x208>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	1c59      	adds	r1, r3, #1
 800863e:	b2c8      	uxtb	r0, r1
 8008640:	491d      	ldr	r1, [pc, #116]	; (80086b8 <CDC_Receive_FS+0x208>)
 8008642:	7008      	strb	r0, [r1, #0]
 8008644:	4619      	mov	r1, r3
 8008646:	7812      	ldrb	r2, [r2, #0]
 8008648:	4b22      	ldr	r3, [pc, #136]	; (80086d4 <CDC_Receive_FS+0x224>)
 800864a:	545a      	strb	r2, [r3, r1]
 800864c:	e005      	b.n	800865a <CDC_Receive_FS+0x1aa>
			}
		}
		else
		{	VT100cmdSeq--;
 800864e:	4b1b      	ldr	r3, [pc, #108]	; (80086bc <CDC_Receive_FS+0x20c>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	3b01      	subs	r3, #1
 8008654:	b2da      	uxtb	r2, r3
 8008656:	4b19      	ldr	r3, [pc, #100]	; (80086bc <CDC_Receive_FS+0x20c>)
 8008658:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < (*Len); i++)
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	3301      	adds	r3, #1
 800865e:	73fb      	strb	r3, [r7, #15]
 8008660:	7bfa      	ldrb	r2, [r7, #15]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	f4ff af47 	bcc.w	80084fa <CDC_Receive_FS+0x4a>
		}
	}

	/* Send result to terminal */
	if(CDC_RX_DATA_PRINT && HOST_PORT_COM_OPEN)
 800866c:	4b14      	ldr	r3, [pc, #80]	; (80086c0 <CDC_Receive_FS+0x210>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d010      	beq.n	8008696 <CDC_Receive_FS+0x1e6>
 8008674:	4b1a      	ldr	r3, [pc, #104]	; (80086e0 <CDC_Receive_FS+0x230>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00c      	beq.n	8008696 <CDC_Receive_FS+0x1e6>
	{
		if(CDC_Transmit_FS(txBufferFS, txLen) == USBD_OK)
 800867c:	4b11      	ldr	r3, [pc, #68]	; (80086c4 <CDC_Receive_FS+0x214>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	b29b      	uxth	r3, r3
 8008682:	4619      	mov	r1, r3
 8008684:	4810      	ldr	r0, [pc, #64]	; (80086c8 <CDC_Receive_FS+0x218>)
 8008686:	f000 f82d 	bl	80086e4 <CDC_Transmit_FS>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d102      	bne.n	8008696 <CDC_Receive_FS+0x1e6>
		{	txLen = 0;
 8008690:	4b0c      	ldr	r3, [pc, #48]	; (80086c4 <CDC_Receive_FS+0x214>)
 8008692:	2200      	movs	r2, #0
 8008694:	701a      	strb	r2, [r3, #0]
		}
	}

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008696:	2200      	movs	r2, #0
 8008698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800869c:	4804      	ldr	r0, [pc, #16]	; (80086b0 <CDC_Receive_FS+0x200>)
 800869e:	f7f9 ffa3 	bl	80025e8 <HAL_GPIO_WritePin>

	return result;
 80086a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
  /* USER CODE END 6 */
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	40020c00 	.word	0x40020c00
 80086b4:	20011b10 	.word	0x20011b10
 80086b8:	20000787 	.word	0x20000787
 80086bc:	20000788 	.word	0x20000788
 80086c0:	20011de0 	.word	0x20011de0
 80086c4:	20000789 	.word	0x20000789
 80086c8:	2000078c 	.word	0x2000078c
 80086cc:	0800d028 	.word	0x0800d028
 80086d0:	0800d02c 	.word	0x0800d02c
 80086d4:	2000080c 	.word	0x2000080c
 80086d8:	20011de4 	.word	0x20011de4
 80086dc:	20000786 	.word	0x20000786
 80086e0:	20000785 	.word	0x20000785

080086e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80086f4:	2201      	movs	r2, #1
 80086f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80086fa:	4815      	ldr	r0, [pc, #84]	; (8008750 <CDC_Transmit_FS+0x6c>)
 80086fc:	f7f9 ff74 	bl	80025e8 <HAL_GPIO_WritePin>
	USBD_CDC_HandleTypeDef * hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8008700:	4b14      	ldr	r3, [pc, #80]	; (8008754 <CDC_Transmit_FS+0x70>)
 8008702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008706:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0U)
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800870e:	2b00      	cmp	r3, #0
 8008710:	d007      	beq.n	8008722 <CDC_Transmit_FS+0x3e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008712:	2200      	movs	r2, #0
 8008714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008718:	480d      	ldr	r0, [pc, #52]	; (8008750 <CDC_Transmit_FS+0x6c>)
 800871a:	f7f9 ff65 	bl	80025e8 <HAL_GPIO_WritePin>
		return USBD_BUSY;
 800871e:	2301      	movs	r3, #1
 8008720:	e011      	b.n	8008746 <CDC_Transmit_FS+0x62>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008722:	887b      	ldrh	r3, [r7, #2]
 8008724:	461a      	mov	r2, r3
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	480a      	ldr	r0, [pc, #40]	; (8008754 <CDC_Transmit_FS+0x70>)
 800872a:	f7fe fc42 	bl	8006fb2 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800872e:	4809      	ldr	r0, [pc, #36]	; (8008754 <CDC_Transmit_FS+0x70>)
 8008730:	f7fe fc6c 	bl	800700c <USBD_CDC_TransmitPacket>
 8008734:	4603      	mov	r3, r0
 8008736:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008738:	2200      	movs	r2, #0
 800873a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800873e:	4804      	ldr	r0, [pc, #16]	; (8008750 <CDC_Transmit_FS+0x6c>)
 8008740:	f7f9 ff52 	bl	80025e8 <HAL_GPIO_WritePin>
  /* USER CODE END 7 */
  return result;
 8008744:	7bfb      	ldrb	r3, [r7, #15]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	40020c00 	.word	0x40020c00
 8008754:	20011b10 	.word	0x20011b10

08008758 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	4613      	mov	r3, r2
 8008764:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800876a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800876e:	4618      	mov	r0, r3
 8008770:	371c      	adds	r7, #28
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
	...

0800877c <_printf>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

void _printf(const char *format, ...)
{
 800877c:	b40f      	push	{r0, r1, r2, r3}
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
	va_list arg;
	if (HOST_PORT_COM_OPEN)
 8008784:	4b11      	ldr	r3, [pc, #68]	; (80087cc <_printf+0x50>)
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d018      	beq.n	80087be <_printf+0x42>
	{
		va_start(arg, format);
 800878c:	f107 0314 	add.w	r3, r7, #20
 8008790:	607b      	str	r3, [r7, #4]
		vsprintf((char*) UserTxBufferFS, format, arg);
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	6939      	ldr	r1, [r7, #16]
 8008796:	480e      	ldr	r0, [pc, #56]	; (80087d0 <_printf+0x54>)
 8008798:	f002 fe1a 	bl	800b3d0 <vsiprintf>
		va_end(arg);
		while(CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY && HOST_PORT_COM_OPEN)
 800879c:	bf00      	nop
 800879e:	480c      	ldr	r0, [pc, #48]	; (80087d0 <_printf+0x54>)
 80087a0:	f7f7 fd20 	bl	80001e4 <strlen>
 80087a4:	4603      	mov	r3, r0
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	4619      	mov	r1, r3
 80087aa:	4809      	ldr	r0, [pc, #36]	; (80087d0 <_printf+0x54>)
 80087ac:	f7ff ff9a 	bl	80086e4 <CDC_Transmit_FS>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d103      	bne.n	80087be <_printf+0x42>
 80087b6:	4b05      	ldr	r3, [pc, #20]	; (80087cc <_printf+0x50>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1ef      	bne.n	800879e <_printf+0x22>
		{
		}
	}
}
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087c8:	b004      	add	sp, #16
 80087ca:	4770      	bx	lr
 80087cc:	20000785 	.word	0x20000785
 80087d0:	20011e64 	.word	0x20011e64

080087d4 <_cprintf>:

void _cprintf(const char *format, ...)
{
 80087d4:	b40f      	push	{r0, r1, r2, r3}
 80087d6:	b5b0      	push	{r4, r5, r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af02      	add	r7, sp, #8
	va_list arg;
	uint32_t clktime;
	if (HOST_PORT_COM_OPEN)
 80087dc:	4b38      	ldr	r3, [pc, #224]	; (80088c0 <_cprintf+0xec>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d066      	beq.n	80088b2 <_cprintf+0xde>
	{
		clktime = HAL_GetTick();
 80087e4:	f7f9 f884 	bl	80018f0 <HAL_GetTick>
 80087e8:	6078      	str	r0, [r7, #4]
		va_start(arg, format);
 80087ea:	f107 031c 	add.w	r3, r7, #28
 80087ee:	603b      	str	r3, [r7, #0]
		sprintf((char*) UserTxBufferFS, "\r[%02lu:%02lu:%02lu.%03lu] ", (clktime/3600000)%100, (clktime/60000)%60, (clktime/1000)%60, clktime%1000);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a34      	ldr	r2, [pc, #208]	; (80088c4 <_cprintf+0xf0>)
 80087f4:	fba2 2303 	umull	r2, r3, r2, r3
 80087f8:	0d5b      	lsrs	r3, r3, #21
 80087fa:	4a33      	ldr	r2, [pc, #204]	; (80088c8 <_cprintf+0xf4>)
 80087fc:	fba2 1203 	umull	r1, r2, r2, r3
 8008800:	0950      	lsrs	r0, r2, #5
 8008802:	2264      	movs	r2, #100	; 0x64
 8008804:	fb02 f200 	mul.w	r2, r2, r0
 8008808:	1a98      	subs	r0, r3, r2
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a2f      	ldr	r2, [pc, #188]	; (80088cc <_cprintf+0xf8>)
 800880e:	fba2 2303 	umull	r2, r3, r2, r3
 8008812:	0b9a      	lsrs	r2, r3, #14
 8008814:	4b2e      	ldr	r3, [pc, #184]	; (80088d0 <_cprintf+0xfc>)
 8008816:	fba3 1302 	umull	r1, r3, r3, r2
 800881a:	0959      	lsrs	r1, r3, #5
 800881c:	460b      	mov	r3, r1
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	1a5b      	subs	r3, r3, r1
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	1ad1      	subs	r1, r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a2a      	ldr	r2, [pc, #168]	; (80088d4 <_cprintf+0x100>)
 800882a:	fba2 2303 	umull	r2, r3, r2, r3
 800882e:	099c      	lsrs	r4, r3, #6
 8008830:	4b27      	ldr	r3, [pc, #156]	; (80088d0 <_cprintf+0xfc>)
 8008832:	fba3 2304 	umull	r2, r3, r3, r4
 8008836:	095a      	lsrs	r2, r3, #5
 8008838:	4613      	mov	r3, r2
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	1ae2      	subs	r2, r4, r3
 8008842:	687c      	ldr	r4, [r7, #4]
 8008844:	4b23      	ldr	r3, [pc, #140]	; (80088d4 <_cprintf+0x100>)
 8008846:	fba3 5304 	umull	r5, r3, r3, r4
 800884a:	099b      	lsrs	r3, r3, #6
 800884c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8008850:	fb05 f303 	mul.w	r3, r5, r3
 8008854:	1ae3      	subs	r3, r4, r3
 8008856:	9301      	str	r3, [sp, #4]
 8008858:	9200      	str	r2, [sp, #0]
 800885a:	460b      	mov	r3, r1
 800885c:	4602      	mov	r2, r0
 800885e:	491e      	ldr	r1, [pc, #120]	; (80088d8 <_cprintf+0x104>)
 8008860:	481e      	ldr	r0, [pc, #120]	; (80088dc <_cprintf+0x108>)
 8008862:	f002 fd7f 	bl	800b364 <siprintf>
		vsprintf((char*) &UserTxBufferFS[16], format, arg);
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	69b9      	ldr	r1, [r7, #24]
 800886a:	481d      	ldr	r0, [pc, #116]	; (80088e0 <_cprintf+0x10c>)
 800886c:	f002 fdb0 	bl	800b3d0 <vsiprintf>
		va_end(arg);
		while(CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY && HOST_PORT_COM_OPEN)
 8008870:	bf00      	nop
 8008872:	481a      	ldr	r0, [pc, #104]	; (80088dc <_cprintf+0x108>)
 8008874:	f7f7 fcb6 	bl	80001e4 <strlen>
 8008878:	4603      	mov	r3, r0
 800887a:	b29b      	uxth	r3, r3
 800887c:	4619      	mov	r1, r3
 800887e:	4817      	ldr	r0, [pc, #92]	; (80088dc <_cprintf+0x108>)
 8008880:	f7ff ff30 	bl	80086e4 <CDC_Transmit_FS>
 8008884:	4603      	mov	r3, r0
 8008886:	2b01      	cmp	r3, #1
 8008888:	d103      	bne.n	8008892 <_cprintf+0xbe>
 800888a:	4b0d      	ldr	r3, [pc, #52]	; (80088c0 <_cprintf+0xec>)
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1ef      	bne.n	8008872 <_cprintf+0x9e>
		{
		}
		if(CDC_RX_DATA_PRINT)
 8008892:	4b14      	ldr	r3, [pc, #80]	; (80088e4 <_cprintf+0x110>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00b      	beq.n	80088b2 <_cprintf+0xde>
		{
			while(CDC_Transmit_FS((uint8_t *) "~$: ", 4) == USBD_BUSY && HOST_PORT_COM_OPEN)
 800889a:	bf00      	nop
 800889c:	2104      	movs	r1, #4
 800889e:	4812      	ldr	r0, [pc, #72]	; (80088e8 <_cprintf+0x114>)
 80088a0:	f7ff ff20 	bl	80086e4 <CDC_Transmit_FS>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d103      	bne.n	80088b2 <_cprintf+0xde>
 80088aa:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <_cprintf+0xec>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1f4      	bne.n	800889c <_cprintf+0xc8>
			{
			}
		}
	}

}
 80088b2:	bf00      	nop
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80088bc:	b004      	add	sp, #16
 80088be:	4770      	bx	lr
 80088c0:	20000785 	.word	0x20000785
 80088c4:	95217cb1 	.word	0x95217cb1
 80088c8:	51eb851f 	.word	0x51eb851f
 80088cc:	45e7b273 	.word	0x45e7b273
 80088d0:	88888889 	.word	0x88888889
 80088d4:	10624dd3 	.word	0x10624dd3
 80088d8:	0800d034 	.word	0x0800d034
 80088dc:	20011e64 	.word	0x20011e64
 80088e0:	20011e74 	.word	0x20011e74
 80088e4:	20011de0 	.word	0x20011de0
 80088e8:	0800d050 	.word	0x0800d050

080088ec <_scanf>:

void _scanf(const char *format, ...)
{
 80088ec:	b40f      	push	{r0, r1, r2, r3}
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
	while (!CDC_RX_DATA_PENDING && HOST_PORT_COM_OPEN)
 80088f4:	e005      	b.n	8008902 <_scanf+0x16>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80088f6:	2201      	movs	r2, #1
 80088f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80088fc:	4814      	ldr	r0, [pc, #80]	; (8008950 <_scanf+0x64>)
 80088fe:	f7f9 fe73 	bl	80025e8 <HAL_GPIO_WritePin>
	while (!CDC_RX_DATA_PENDING && HOST_PORT_COM_OPEN)
 8008902:	4b14      	ldr	r3, [pc, #80]	; (8008954 <_scanf+0x68>)
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	f083 0301 	eor.w	r3, r3, #1
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b00      	cmp	r3, #0
 800890e:	d003      	beq.n	8008918 <_scanf+0x2c>
 8008910:	4b11      	ldr	r3, [pc, #68]	; (8008958 <_scanf+0x6c>)
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1ee      	bne.n	80088f6 <_scanf+0xa>
	}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8008918:	2200      	movs	r2, #0
 800891a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800891e:	480c      	ldr	r0, [pc, #48]	; (8008950 <_scanf+0x64>)
 8008920:	f7f9 fe62 	bl	80025e8 <HAL_GPIO_WritePin>
	if (CDC_RX_DATA_PENDING)
 8008924:	4b0b      	ldr	r3, [pc, #44]	; (8008954 <_scanf+0x68>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00a      	beq.n	8008942 <_scanf+0x56>
	{
		va_list arg;
		va_start(arg, format);
 800892c:	f107 0314 	add.w	r3, r7, #20
 8008930:	607b      	str	r3, [r7, #4]
		vsscanf((char*) UserRxBufferFS, format, arg);
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	6939      	ldr	r1, [r7, #16]
 8008936:	4809      	ldr	r0, [pc, #36]	; (800895c <_scanf+0x70>)
 8008938:	f002 fd78 	bl	800b42c <vsiscanf>
		va_end(arg);
		CDC_RX_DATA_PENDING = 0;
 800893c:	4b05      	ldr	r3, [pc, #20]	; (8008954 <_scanf+0x68>)
 800893e:	2200      	movs	r2, #0
 8008940:	701a      	strb	r2, [r3, #0]
	}
}
 8008942:	bf00      	nop
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800894c:	b004      	add	sp, #16
 800894e:	4770      	bx	lr
 8008950:	40020c00 	.word	0x40020c00
 8008954:	20000786 	.word	0x20000786
 8008958:	20000785 	.word	0x20000785
 800895c:	20011de4 	.word	0x20011de4

08008960 <_cspin>:

void _cspin(void)
{
 8008960:	b5b0      	push	{r4, r5, r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af02      	add	r7, sp, #8
	static uint32_t clktime;
	if (HOST_PORT_COM_OPEN)
 8008966:	4b2e      	ldr	r3, [pc, #184]	; (8008a20 <_cspin+0xc0>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d054      	beq.n	8008a18 <_cspin+0xb8>
	{
		clktime = HAL_GetTick();
 800896e:	f7f8 ffbf 	bl	80018f0 <HAL_GetTick>
 8008972:	4602      	mov	r2, r0
 8008974:	4b2b      	ldr	r3, [pc, #172]	; (8008a24 <_cspin+0xc4>)
 8008976:	601a      	str	r2, [r3, #0]
		sprintf((char*) UserTxBufferFS, "\033[1A\r[%02lu:%02lu:%02lu.%03lu]\033[1B\r", (clktime/3600000)%100, (clktime/60000)%60, (clktime/1000)%60, clktime%1000);
 8008978:	4b2a      	ldr	r3, [pc, #168]	; (8008a24 <_cspin+0xc4>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a2a      	ldr	r2, [pc, #168]	; (8008a28 <_cspin+0xc8>)
 800897e:	fba2 2303 	umull	r2, r3, r2, r3
 8008982:	0d5b      	lsrs	r3, r3, #21
 8008984:	4a29      	ldr	r2, [pc, #164]	; (8008a2c <_cspin+0xcc>)
 8008986:	fba2 1203 	umull	r1, r2, r2, r3
 800898a:	0950      	lsrs	r0, r2, #5
 800898c:	2264      	movs	r2, #100	; 0x64
 800898e:	fb02 f200 	mul.w	r2, r2, r0
 8008992:	1a98      	subs	r0, r3, r2
 8008994:	4b23      	ldr	r3, [pc, #140]	; (8008a24 <_cspin+0xc4>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a25      	ldr	r2, [pc, #148]	; (8008a30 <_cspin+0xd0>)
 800899a:	fba2 2303 	umull	r2, r3, r2, r3
 800899e:	0b9a      	lsrs	r2, r3, #14
 80089a0:	4b24      	ldr	r3, [pc, #144]	; (8008a34 <_cspin+0xd4>)
 80089a2:	fba3 1302 	umull	r1, r3, r3, r2
 80089a6:	0959      	lsrs	r1, r3, #5
 80089a8:	460b      	mov	r3, r1
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	1a5b      	subs	r3, r3, r1
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	1ad1      	subs	r1, r2, r3
 80089b2:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <_cspin+0xc4>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a20      	ldr	r2, [pc, #128]	; (8008a38 <_cspin+0xd8>)
 80089b8:	fba2 2303 	umull	r2, r3, r2, r3
 80089bc:	099c      	lsrs	r4, r3, #6
 80089be:	4b1d      	ldr	r3, [pc, #116]	; (8008a34 <_cspin+0xd4>)
 80089c0:	fba3 2304 	umull	r2, r3, r3, r4
 80089c4:	095a      	lsrs	r2, r3, #5
 80089c6:	4613      	mov	r3, r2
 80089c8:	011b      	lsls	r3, r3, #4
 80089ca:	1a9b      	subs	r3, r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	1ae2      	subs	r2, r4, r3
 80089d0:	4b14      	ldr	r3, [pc, #80]	; (8008a24 <_cspin+0xc4>)
 80089d2:	681c      	ldr	r4, [r3, #0]
 80089d4:	4b18      	ldr	r3, [pc, #96]	; (8008a38 <_cspin+0xd8>)
 80089d6:	fba3 5304 	umull	r5, r3, r3, r4
 80089da:	099b      	lsrs	r3, r3, #6
 80089dc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80089e0:	fb05 f303 	mul.w	r3, r5, r3
 80089e4:	1ae3      	subs	r3, r4, r3
 80089e6:	9301      	str	r3, [sp, #4]
 80089e8:	9200      	str	r2, [sp, #0]
 80089ea:	460b      	mov	r3, r1
 80089ec:	4602      	mov	r2, r0
 80089ee:	4913      	ldr	r1, [pc, #76]	; (8008a3c <_cspin+0xdc>)
 80089f0:	4813      	ldr	r0, [pc, #76]	; (8008a40 <_cspin+0xe0>)
 80089f2:	f002 fcb7 	bl	800b364 <siprintf>
		while(CDC_Transmit_FS(UserTxBufferFS, strlen((char*) UserTxBufferFS)) == USBD_BUSY && HOST_PORT_COM_OPEN)
 80089f6:	bf00      	nop
 80089f8:	4811      	ldr	r0, [pc, #68]	; (8008a40 <_cspin+0xe0>)
 80089fa:	f7f7 fbf3 	bl	80001e4 <strlen>
 80089fe:	4603      	mov	r3, r0
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	4619      	mov	r1, r3
 8008a04:	480e      	ldr	r0, [pc, #56]	; (8008a40 <_cspin+0xe0>)
 8008a06:	f7ff fe6d 	bl	80086e4 <CDC_Transmit_FS>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d103      	bne.n	8008a18 <_cspin+0xb8>
 8008a10:	4b03      	ldr	r3, [pc, #12]	; (8008a20 <_cspin+0xc0>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1ef      	bne.n	80089f8 <_cspin+0x98>
		{
		}
	}
}
 8008a18:	bf00      	nop
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000785 	.word	0x20000785
 8008a24:	2000088c 	.word	0x2000088c
 8008a28:	95217cb1 	.word	0x95217cb1
 8008a2c:	51eb851f 	.word	0x51eb851f
 8008a30:	45e7b273 	.word	0x45e7b273
 8008a34:	88888889 	.word	0x88888889
 8008a38:	10624dd3 	.word	0x10624dd3
 8008a3c:	0800d058 	.word	0x0800d058
 8008a40:	20011e64 	.word	0x20011e64

08008a44 <CDC_Clear>:

void CDC_Clear(void)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
	if(CDC_RX_DATA_PRINT)
 8008a48:	4b0f      	ldr	r3, [pc, #60]	; (8008a88 <CDC_Clear+0x44>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00c      	beq.n	8008a6a <CDC_Clear+0x26>
	{
		while(CDC_Transmit_FS((uint8_t *)"\033[2J~$: ", 8) == USBD_BUSY && HOST_PORT_COM_OPEN)
 8008a50:	bf00      	nop
 8008a52:	2108      	movs	r1, #8
 8008a54:	480d      	ldr	r0, [pc, #52]	; (8008a8c <CDC_Clear+0x48>)
 8008a56:	f7ff fe45 	bl	80086e4 <CDC_Transmit_FS>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d110      	bne.n	8008a82 <CDC_Clear+0x3e>
 8008a60:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <CDC_Clear+0x4c>)
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1f4      	bne.n	8008a52 <CDC_Clear+0xe>
		while(CDC_Transmit_FS((uint8_t *)"\033[2J", 4) == USBD_BUSY && HOST_PORT_COM_OPEN)
		{
		}
	}

}
 8008a68:	e00b      	b.n	8008a82 <CDC_Clear+0x3e>
		while(CDC_Transmit_FS((uint8_t *)"\033[2J", 4) == USBD_BUSY && HOST_PORT_COM_OPEN)
 8008a6a:	bf00      	nop
 8008a6c:	2104      	movs	r1, #4
 8008a6e:	4809      	ldr	r0, [pc, #36]	; (8008a94 <CDC_Clear+0x50>)
 8008a70:	f7ff fe38 	bl	80086e4 <CDC_Transmit_FS>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d103      	bne.n	8008a82 <CDC_Clear+0x3e>
 8008a7a:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <CDC_Clear+0x4c>)
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1f4      	bne.n	8008a6c <CDC_Clear+0x28>
}
 8008a82:	bf00      	nop
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20011de0 	.word	0x20011de0
 8008a8c:	0800d07c 	.word	0x0800d07c
 8008a90:	20000785 	.word	0x20000785
 8008a94:	0800d088 	.word	0x0800d088

08008a98 <CDC_rxPrintf_ON>:
			_printf("\033[%dB", y);
		}
}

void CDC_rxPrintf_ON(void)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	af00      	add	r7, sp, #0
	if(!CDC_RX_DATA_PRINT)
 8008a9c:	4b0b      	ldr	r3, [pc, #44]	; (8008acc <CDC_rxPrintf_ON+0x34>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	f083 0301 	eor.w	r3, r3, #1
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00e      	beq.n	8008ac8 <CDC_rxPrintf_ON+0x30>
	{
		while(CDC_Transmit_FS((uint8_t *)"\r~$: ", 5) == USBD_BUSY && HOST_PORT_COM_OPEN)
 8008aaa:	bf00      	nop
 8008aac:	2105      	movs	r1, #5
 8008aae:	4808      	ldr	r0, [pc, #32]	; (8008ad0 <CDC_rxPrintf_ON+0x38>)
 8008ab0:	f7ff fe18 	bl	80086e4 <CDC_Transmit_FS>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d103      	bne.n	8008ac2 <CDC_rxPrintf_ON+0x2a>
 8008aba:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <CDC_rxPrintf_ON+0x3c>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1f4      	bne.n	8008aac <CDC_rxPrintf_ON+0x14>
		{
		}
		CDC_RX_DATA_PRINT = TRUE;
 8008ac2:	4b02      	ldr	r3, [pc, #8]	; (8008acc <CDC_rxPrintf_ON+0x34>)
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	701a      	strb	r2, [r3, #0]
	}
}
 8008ac8:	bf00      	nop
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20011de0 	.word	0x20011de0
 8008ad0:	0800d0bc 	.word	0x0800d0bc
 8008ad4:	20000785 	.word	0x20000785

08008ad8 <CDC_rxPrintf_OFF>:

void CDC_rxPrintf_OFF(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
	if(CDC_RX_DATA_PRINT)
 8008adc:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <CDC_rxPrintf_OFF+0x30>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00e      	beq.n	8008b02 <CDC_rxPrintf_OFF+0x2a>
	{
		while(CDC_Transmit_FS((uint8_t *)"\r   \r\n\033[1A\r", 11) == USBD_BUSY && HOST_PORT_COM_OPEN)
 8008ae4:	bf00      	nop
 8008ae6:	210b      	movs	r1, #11
 8008ae8:	4808      	ldr	r0, [pc, #32]	; (8008b0c <CDC_rxPrintf_OFF+0x34>)
 8008aea:	f7ff fdfb 	bl	80086e4 <CDC_Transmit_FS>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d103      	bne.n	8008afc <CDC_rxPrintf_OFF+0x24>
 8008af4:	4b06      	ldr	r3, [pc, #24]	; (8008b10 <CDC_rxPrintf_OFF+0x38>)
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1f4      	bne.n	8008ae6 <CDC_rxPrintf_OFF+0xe>
		{
		}
		CDC_RX_DATA_PRINT = FALSE;
 8008afc:	4b02      	ldr	r3, [pc, #8]	; (8008b08 <CDC_rxPrintf_OFF+0x30>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	701a      	strb	r2, [r3, #0]
	}
}
 8008b02:	bf00      	nop
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20011de0 	.word	0x20011de0
 8008b0c:	0800d0c4 	.word	0x0800d0c4
 8008b10:	20000785 	.word	0x20000785

08008b14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2212      	movs	r2, #18
 8008b24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b26:	4b03      	ldr	r3, [pc, #12]	; (8008b34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	20000558 	.word	0x20000558

08008b38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	6039      	str	r1, [r7, #0]
 8008b42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	2204      	movs	r2, #4
 8008b48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b4a:	4b03      	ldr	r3, [pc, #12]	; (8008b58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	2000056c 	.word	0x2000056c

08008b5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	4603      	mov	r3, r0
 8008b64:	6039      	str	r1, [r7, #0]
 8008b66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d105      	bne.n	8008b7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	4907      	ldr	r1, [pc, #28]	; (8008b90 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b72:	4808      	ldr	r0, [pc, #32]	; (8008b94 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b74:	f7ff fac9 	bl	800810a <USBD_GetString>
 8008b78:	e004      	b.n	8008b84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	4904      	ldr	r1, [pc, #16]	; (8008b90 <USBD_FS_ProductStrDescriptor+0x34>)
 8008b7e:	4805      	ldr	r0, [pc, #20]	; (8008b94 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b80:	f7ff fac3 	bl	800810a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b84:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20011ee4 	.word	0x20011ee4
 8008b94:	0800d0d0 	.word	0x0800d0d0

08008b98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	4904      	ldr	r1, [pc, #16]	; (8008bb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ba8:	4804      	ldr	r0, [pc, #16]	; (8008bbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008baa:	f7ff faae 	bl	800810a <USBD_GetString>
  return USBD_StrDesc;
 8008bae:	4b02      	ldr	r3, [pc, #8]	; (8008bb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	20011ee4 	.word	0x20011ee4
 8008bbc:	0800d0e8 	.word	0x0800d0e8

08008bc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	221a      	movs	r2, #26
 8008bd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008bd2:	f000 f843 	bl	8008c5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008bd6:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	20000570 	.word	0x20000570

08008be4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	6039      	str	r1, [r7, #0]
 8008bee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d105      	bne.n	8008c02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	4907      	ldr	r1, [pc, #28]	; (8008c18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bfa:	4808      	ldr	r0, [pc, #32]	; (8008c1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bfc:	f7ff fa85 	bl	800810a <USBD_GetString>
 8008c00:	e004      	b.n	8008c0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	4904      	ldr	r1, [pc, #16]	; (8008c18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c06:	4805      	ldr	r0, [pc, #20]	; (8008c1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c08:	f7ff fa7f 	bl	800810a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c0c:	4b02      	ldr	r3, [pc, #8]	; (8008c18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20011ee4 	.word	0x20011ee4
 8008c1c:	0800d0fc 	.word	0x0800d0fc

08008c20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	4603      	mov	r3, r0
 8008c28:	6039      	str	r1, [r7, #0]
 8008c2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d105      	bne.n	8008c3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	4907      	ldr	r1, [pc, #28]	; (8008c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c36:	4808      	ldr	r0, [pc, #32]	; (8008c58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c38:	f7ff fa67 	bl	800810a <USBD_GetString>
 8008c3c:	e004      	b.n	8008c48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	4904      	ldr	r1, [pc, #16]	; (8008c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c42:	4805      	ldr	r0, [pc, #20]	; (8008c58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c44:	f7ff fa61 	bl	800810a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c48:	4b02      	ldr	r3, [pc, #8]	; (8008c54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20011ee4 	.word	0x20011ee4
 8008c58:	0800d108 	.word	0x0800d108

08008c5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c62:	4b0f      	ldr	r3, [pc, #60]	; (8008ca0 <Get_SerialNum+0x44>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c68:	4b0e      	ldr	r3, [pc, #56]	; (8008ca4 <Get_SerialNum+0x48>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c6e:	4b0e      	ldr	r3, [pc, #56]	; (8008ca8 <Get_SerialNum+0x4c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d009      	beq.n	8008c96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c82:	2208      	movs	r2, #8
 8008c84:	4909      	ldr	r1, [pc, #36]	; (8008cac <Get_SerialNum+0x50>)
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f000 f814 	bl	8008cb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c8c:	2204      	movs	r2, #4
 8008c8e:	4908      	ldr	r1, [pc, #32]	; (8008cb0 <Get_SerialNum+0x54>)
 8008c90:	68b8      	ldr	r0, [r7, #8]
 8008c92:	f000 f80f 	bl	8008cb4 <IntToUnicode>
  }
}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	1fff7a10 	.word	0x1fff7a10
 8008ca4:	1fff7a14 	.word	0x1fff7a14
 8008ca8:	1fff7a18 	.word	0x1fff7a18
 8008cac:	20000572 	.word	0x20000572
 8008cb0:	20000582 	.word	0x20000582

08008cb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	75fb      	strb	r3, [r7, #23]
 8008cca:	e027      	b.n	8008d1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	0f1b      	lsrs	r3, r3, #28
 8008cd0:	2b09      	cmp	r3, #9
 8008cd2:	d80b      	bhi.n	8008cec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	0f1b      	lsrs	r3, r3, #28
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	4619      	mov	r1, r3
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	440b      	add	r3, r1
 8008ce4:	3230      	adds	r2, #48	; 0x30
 8008ce6:	b2d2      	uxtb	r2, r2
 8008ce8:	701a      	strb	r2, [r3, #0]
 8008cea:	e00a      	b.n	8008d02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	0f1b      	lsrs	r3, r3, #28
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	440b      	add	r3, r1
 8008cfc:	3237      	adds	r2, #55	; 0x37
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	011b      	lsls	r3, r3, #4
 8008d06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	4413      	add	r3, r2
 8008d12:	2200      	movs	r2, #0
 8008d14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	75fb      	strb	r3, [r7, #23]
 8008d1c:	7dfa      	ldrb	r2, [r7, #23]
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d3d3      	bcc.n	8008ccc <IntToUnicode+0x18>
  }
}
 8008d24:	bf00      	nop
 8008d26:	371c      	adds	r7, #28
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08a      	sub	sp, #40	; 0x28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d38:	f107 0314 	add.w	r3, r7, #20
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	605a      	str	r2, [r3, #4]
 8008d42:	609a      	str	r2, [r3, #8]
 8008d44:	60da      	str	r2, [r3, #12]
 8008d46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d50:	d147      	bne.n	8008de2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d52:	2300      	movs	r3, #0
 8008d54:	613b      	str	r3, [r7, #16]
 8008d56:	4b25      	ldr	r3, [pc, #148]	; (8008dec <HAL_PCD_MspInit+0xbc>)
 8008d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5a:	4a24      	ldr	r2, [pc, #144]	; (8008dec <HAL_PCD_MspInit+0xbc>)
 8008d5c:	f043 0301 	orr.w	r3, r3, #1
 8008d60:	6313      	str	r3, [r2, #48]	; 0x30
 8008d62:	4b22      	ldr	r3, [pc, #136]	; (8008dec <HAL_PCD_MspInit+0xbc>)
 8008d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	613b      	str	r3, [r7, #16]
 8008d6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d74:	2300      	movs	r3, #0
 8008d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008d7c:	f107 0314 	add.w	r3, r7, #20
 8008d80:	4619      	mov	r1, r3
 8008d82:	481b      	ldr	r0, [pc, #108]	; (8008df0 <HAL_PCD_MspInit+0xc0>)
 8008d84:	f7f9 fa7e 	bl	8002284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008d88:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d8e:	2302      	movs	r3, #2
 8008d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d92:	2300      	movs	r3, #0
 8008d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d96:	2300      	movs	r3, #0
 8008d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d9a:	230a      	movs	r3, #10
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d9e:	f107 0314 	add.w	r3, r7, #20
 8008da2:	4619      	mov	r1, r3
 8008da4:	4812      	ldr	r0, [pc, #72]	; (8008df0 <HAL_PCD_MspInit+0xc0>)
 8008da6:	f7f9 fa6d 	bl	8002284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008daa:	4b10      	ldr	r3, [pc, #64]	; (8008dec <HAL_PCD_MspInit+0xbc>)
 8008dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dae:	4a0f      	ldr	r2, [pc, #60]	; (8008dec <HAL_PCD_MspInit+0xbc>)
 8008db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db4:	6353      	str	r3, [r2, #52]	; 0x34
 8008db6:	2300      	movs	r3, #0
 8008db8:	60fb      	str	r3, [r7, #12]
 8008dba:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <HAL_PCD_MspInit+0xbc>)
 8008dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dbe:	4a0b      	ldr	r2, [pc, #44]	; (8008dec <HAL_PCD_MspInit+0xbc>)
 8008dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8008dc6:	4b09      	ldr	r3, [pc, #36]	; (8008dec <HAL_PCD_MspInit+0xbc>)
 8008dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	2043      	movs	r0, #67	; 0x43
 8008dd8:	f7f8 fe93 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ddc:	2043      	movs	r0, #67	; 0x43
 8008dde:	f7f8 feac 	bl	8001b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008de2:	bf00      	nop
 8008de4:	3728      	adds	r7, #40	; 0x28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	40023800 	.word	0x40023800
 8008df0:	40020000 	.word	0x40020000

08008df4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e08:	4619      	mov	r1, r3
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	f7fe f9fa 	bl	8007204 <USBD_LL_SetupStage>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008e2a:	78fa      	ldrb	r2, [r7, #3]
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	00db      	lsls	r3, r3, #3
 8008e32:	1a9b      	subs	r3, r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	440b      	add	r3, r1
 8008e38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	78fb      	ldrb	r3, [r7, #3]
 8008e40:	4619      	mov	r1, r3
 8008e42:	f7fe fa32 	bl	80072aa <USBD_LL_DataOutStage>
}
 8008e46:	bf00      	nop
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b082      	sub	sp, #8
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	460b      	mov	r3, r1
 8008e58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008e60:	78fa      	ldrb	r2, [r7, #3]
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	4613      	mov	r3, r2
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	1a9b      	subs	r3, r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	440b      	add	r3, r1
 8008e6e:	3348      	adds	r3, #72	; 0x48
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	4619      	mov	r1, r3
 8008e76:	f7fe fa7b 	bl	8007370 <USBD_LL_DataInStage>
}
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b082      	sub	sp, #8
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fe fb7f 	bl	8007594 <USBD_LL_SOF>
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d102      	bne.n	8008eb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]
 8008eb6:	e008      	b.n	8008eca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d102      	bne.n	8008ec6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	73fb      	strb	r3, [r7, #15]
 8008ec4:	e001      	b.n	8008eca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008ec6:	f7f8 fa17 	bl	80012f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ed0:	7bfa      	ldrb	r2, [r7, #15]
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fb22 	bl	800751e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fe fadb 	bl	800749c <USBD_LL_Reset>
}
 8008ee6:	bf00      	nop
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe fb1d 	bl	800753e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	6812      	ldr	r2, [r2, #0]
 8008f12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f16:	f043 0301 	orr.w	r3, r3, #1
 8008f1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d005      	beq.n	8008f30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f24:	4b04      	ldr	r3, [pc, #16]	; (8008f38 <HAL_PCD_SuspendCallback+0x48>)
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	4a03      	ldr	r2, [pc, #12]	; (8008f38 <HAL_PCD_SuspendCallback+0x48>)
 8008f2a:	f043 0306 	orr.w	r3, r3, #6
 8008f2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	e000ed00 	.word	0xe000ed00

08008f3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe fb0c 	bl	8007568 <USBD_LL_Resume>
}
 8008f50:	bf00      	nop
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe fb37 	bl	80075e2 <USBD_LL_IsoOUTIncomplete>
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	4611      	mov	r1, r2
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe fb18 	bl	80075c8 <USBD_LL_IsoINIncomplete>
}
 8008f98:	bf00      	nop
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe fb24 	bl	80075fc <USBD_LL_DevConnected>
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fb21 	bl	8007612 <USBD_LL_DevDisconnected>
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d13c      	bne.n	8009062 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008fe8:	4a20      	ldr	r2, [pc, #128]	; (800906c <USBD_LL_Init+0x94>)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a1e      	ldr	r2, [pc, #120]	; (800906c <USBD_LL_Init+0x94>)
 8008ff4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ff8:	4b1c      	ldr	r3, [pc, #112]	; (800906c <USBD_LL_Init+0x94>)
 8008ffa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ffe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009000:	4b1a      	ldr	r3, [pc, #104]	; (800906c <USBD_LL_Init+0x94>)
 8009002:	2204      	movs	r2, #4
 8009004:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009006:	4b19      	ldr	r3, [pc, #100]	; (800906c <USBD_LL_Init+0x94>)
 8009008:	2202      	movs	r2, #2
 800900a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800900c:	4b17      	ldr	r3, [pc, #92]	; (800906c <USBD_LL_Init+0x94>)
 800900e:	2200      	movs	r2, #0
 8009010:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009012:	4b16      	ldr	r3, [pc, #88]	; (800906c <USBD_LL_Init+0x94>)
 8009014:	2202      	movs	r2, #2
 8009016:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009018:	4b14      	ldr	r3, [pc, #80]	; (800906c <USBD_LL_Init+0x94>)
 800901a:	2200      	movs	r2, #0
 800901c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800901e:	4b13      	ldr	r3, [pc, #76]	; (800906c <USBD_LL_Init+0x94>)
 8009020:	2200      	movs	r2, #0
 8009022:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009024:	4b11      	ldr	r3, [pc, #68]	; (800906c <USBD_LL_Init+0x94>)
 8009026:	2200      	movs	r2, #0
 8009028:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800902a:	4b10      	ldr	r3, [pc, #64]	; (800906c <USBD_LL_Init+0x94>)
 800902c:	2200      	movs	r2, #0
 800902e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009030:	4b0e      	ldr	r3, [pc, #56]	; (800906c <USBD_LL_Init+0x94>)
 8009032:	2200      	movs	r2, #0
 8009034:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009036:	480d      	ldr	r0, [pc, #52]	; (800906c <USBD_LL_Init+0x94>)
 8009038:	f7fa fb1a 	bl	8003670 <HAL_PCD_Init>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009042:	f7f8 f959 	bl	80012f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009046:	2180      	movs	r1, #128	; 0x80
 8009048:	4808      	ldr	r0, [pc, #32]	; (800906c <USBD_LL_Init+0x94>)
 800904a:	f7fb fc78 	bl	800493e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800904e:	2240      	movs	r2, #64	; 0x40
 8009050:	2100      	movs	r1, #0
 8009052:	4806      	ldr	r0, [pc, #24]	; (800906c <USBD_LL_Init+0x94>)
 8009054:	f7fb fc2c 	bl	80048b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009058:	2280      	movs	r2, #128	; 0x80
 800905a:	2101      	movs	r1, #1
 800905c:	4803      	ldr	r0, [pc, #12]	; (800906c <USBD_LL_Init+0x94>)
 800905e:	f7fb fc27 	bl	80048b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	200120e4 	.word	0x200120e4

08009070 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009086:	4618      	mov	r0, r3
 8009088:	f7fa fc0f 	bl	80038aa <HAL_PCD_Start>
 800908c:	4603      	mov	r3, r0
 800908e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	4618      	mov	r0, r3
 8009094:	f000 f92a 	bl	80092ec <USBD_Get_USB_Status>
 8009098:	4603      	mov	r3, r0
 800909a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800909c:	7bbb      	ldrb	r3, [r7, #14]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	4608      	mov	r0, r1
 80090b0:	4611      	mov	r1, r2
 80090b2:	461a      	mov	r2, r3
 80090b4:	4603      	mov	r3, r0
 80090b6:	70fb      	strb	r3, [r7, #3]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70bb      	strb	r3, [r7, #2]
 80090bc:	4613      	mov	r3, r2
 80090be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80090ce:	78bb      	ldrb	r3, [r7, #2]
 80090d0:	883a      	ldrh	r2, [r7, #0]
 80090d2:	78f9      	ldrb	r1, [r7, #3]
 80090d4:	f7fa fff3 	bl	80040be <HAL_PCD_EP_Open>
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 f904 	bl	80092ec <USBD_Get_USB_Status>
 80090e4:	4603      	mov	r3, r0
 80090e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	460b      	mov	r3, r1
 80090fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800910c:	78fa      	ldrb	r2, [r7, #3]
 800910e:	4611      	mov	r1, r2
 8009110:	4618      	mov	r0, r3
 8009112:	f7fb f83c 	bl	800418e <HAL_PCD_EP_Close>
 8009116:	4603      	mov	r3, r0
 8009118:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	4618      	mov	r0, r3
 800911e:	f000 f8e5 	bl	80092ec <USBD_Get_USB_Status>
 8009122:	4603      	mov	r3, r0
 8009124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009126:	7bbb      	ldrb	r3, [r7, #14]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800914a:	78fa      	ldrb	r2, [r7, #3]
 800914c:	4611      	mov	r1, r2
 800914e:	4618      	mov	r0, r3
 8009150:	f7fb f914 	bl	800437c <HAL_PCD_EP_SetStall>
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	4618      	mov	r0, r3
 800915c:	f000 f8c6 	bl	80092ec <USBD_Get_USB_Status>
 8009160:	4603      	mov	r3, r0
 8009162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009164:	7bbb      	ldrb	r3, [r7, #14]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	460b      	mov	r3, r1
 8009178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009188:	78fa      	ldrb	r2, [r7, #3]
 800918a:	4611      	mov	r1, r2
 800918c:	4618      	mov	r0, r3
 800918e:	f7fb f959 	bl	8004444 <HAL_PCD_EP_ClrStall>
 8009192:	4603      	mov	r3, r0
 8009194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	4618      	mov	r0, r3
 800919a:	f000 f8a7 	bl	80092ec <USBD_Get_USB_Status>
 800919e:	4603      	mov	r3, r0
 80091a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80091c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	da0b      	bge.n	80091e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091ce:	68f9      	ldr	r1, [r7, #12]
 80091d0:	4613      	mov	r3, r2
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	1a9b      	subs	r3, r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	440b      	add	r3, r1
 80091da:	333e      	adds	r3, #62	; 0x3e
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	e00b      	b.n	80091f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091e6:	68f9      	ldr	r1, [r7, #12]
 80091e8:	4613      	mov	r3, r2
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	1a9b      	subs	r3, r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	440b      	add	r3, r1
 80091f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80091f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800921e:	78fa      	ldrb	r2, [r7, #3]
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f7fa ff26 	bl	8004074 <HAL_PCD_SetAddress>
 8009228:	4603      	mov	r3, r0
 800922a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f85c 	bl	80092ec <USBD_Get_USB_Status>
 8009234:	4603      	mov	r3, r0
 8009236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009238:	7bbb      	ldrb	r3, [r7, #14]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b086      	sub	sp, #24
 8009246:	af00      	add	r7, sp, #0
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	603b      	str	r3, [r7, #0]
 800924e:	460b      	mov	r3, r1
 8009250:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009260:	7af9      	ldrb	r1, [r7, #11]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	f7fb f83f 	bl	80042e8 <HAL_PCD_EP_Transmit>
 800926a:	4603      	mov	r3, r0
 800926c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800926e:	7dfb      	ldrb	r3, [r7, #23]
 8009270:	4618      	mov	r0, r3
 8009272:	f000 f83b 	bl	80092ec <USBD_Get_USB_Status>
 8009276:	4603      	mov	r3, r0
 8009278:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800927a:	7dbb      	ldrb	r3, [r7, #22]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	607a      	str	r2, [r7, #4]
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	460b      	mov	r3, r1
 8009292:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092a2:	7af9      	ldrb	r1, [r7, #11]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	f7fa ffbb 	bl	8004222 <HAL_PCD_EP_Receive>
 80092ac:	4603      	mov	r3, r0
 80092ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b0:	7dfb      	ldrb	r3, [r7, #23]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f81a 	bl	80092ec <USBD_Get_USB_Status>
 80092b8:	4603      	mov	r3, r0
 80092ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3718      	adds	r7, #24
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	460b      	mov	r3, r1
 80092d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092d8:	78fa      	ldrb	r2, [r7, #3]
 80092da:	4611      	mov	r1, r2
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fa ffeb 	bl	80042b8 <HAL_PCD_EP_GetRxCount>
 80092e2:	4603      	mov	r3, r0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092fa:	79fb      	ldrb	r3, [r7, #7]
 80092fc:	2b03      	cmp	r3, #3
 80092fe:	d817      	bhi.n	8009330 <USBD_Get_USB_Status+0x44>
 8009300:	a201      	add	r2, pc, #4	; (adr r2, 8009308 <USBD_Get_USB_Status+0x1c>)
 8009302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009306:	bf00      	nop
 8009308:	08009319 	.word	0x08009319
 800930c:	0800931f 	.word	0x0800931f
 8009310:	08009325 	.word	0x08009325
 8009314:	0800932b 	.word	0x0800932b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009318:	2300      	movs	r3, #0
 800931a:	73fb      	strb	r3, [r7, #15]
    break;
 800931c:	e00b      	b.n	8009336 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800931e:	2303      	movs	r3, #3
 8009320:	73fb      	strb	r3, [r7, #15]
    break;
 8009322:	e008      	b.n	8009336 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009324:	2301      	movs	r3, #1
 8009326:	73fb      	strb	r3, [r7, #15]
    break;
 8009328:	e005      	b.n	8009336 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800932a:	2303      	movs	r3, #3
 800932c:	73fb      	strb	r3, [r7, #15]
    break;
 800932e:	e002      	b.n	8009336 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009330:	2303      	movs	r3, #3
 8009332:	73fb      	strb	r3, [r7, #15]
    break;
 8009334:	bf00      	nop
  }
  return usb_status;
 8009336:	7bfb      	ldrb	r3, [r7, #15]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <D16_GENERIC>:
 8009344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009348:	b089      	sub	sp, #36	; 0x24
 800934a:	68d4      	ldr	r4, [r2, #12]
 800934c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800934e:	6993      	ldr	r3, [r2, #24]
 8009350:	9407      	str	r4, [sp, #28]
 8009352:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009354:	9306      	str	r3, [sp, #24]
 8009356:	9402      	str	r4, [sp, #8]
 8009358:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800935c:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8009360:	69d3      	ldr	r3, [r2, #28]
 8009362:	6896      	ldr	r6, [r2, #8]
 8009364:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009366:	9103      	str	r1, [sp, #12]
 8009368:	2d00      	cmp	r5, #0
 800936a:	d066      	beq.n	800943a <D16_GENERIC+0xf6>
 800936c:	f004 0510 	and.w	r5, r4, #16
 8009370:	f004 0420 	and.w	r4, r4, #32
 8009374:	9504      	str	r5, [sp, #16]
 8009376:	4938      	ldr	r1, [pc, #224]	; (8009458 <D16_GENERIC+0x114>)
 8009378:	9405      	str	r4, [sp, #20]
 800937a:	f04f 0e00 	mov.w	lr, #0
 800937e:	4635      	mov	r5, r6
 8009380:	e04f      	b.n	8009422 <D16_GENERIC+0xde>
 8009382:	5d87      	ldrb	r7, [r0, r6]
 8009384:	7804      	ldrb	r4, [r0, #0]
 8009386:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800938a:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800938e:	b2e6      	uxtb	r6, r4
 8009390:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009394:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009398:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800939c:	4433      	add	r3, r6
 800939e:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80093a2:	f3c4 0609 	ubfx	r6, r4, #0, #10
 80093a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093aa:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80093ae:	0aa3      	lsrs	r3, r4, #10
 80093b0:	4c2a      	ldr	r4, [pc, #168]	; (800945c <D16_GENERIC+0x118>)
 80093b2:	fb26 5404 	smlad	r4, r6, r4, r5
 80093b6:	4d2a      	ldr	r5, [pc, #168]	; (8009460 <D16_GENERIC+0x11c>)
 80093b8:	fb26 f505 	smuad	r5, r6, r5
 80093bc:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 80093c0:	eb04 080a 	add.w	r8, r4, sl
 80093c4:	eba8 080b 	sub.w	r8, r8, fp
 80093c8:	4646      	mov	r6, r8
 80093ca:	17f7      	asrs	r7, r6, #31
 80093cc:	e9cd 6700 	strd	r6, r7, [sp]
 80093d0:	9e04      	ldr	r6, [sp, #16]
 80093d2:	f10e 0c01 	add.w	ip, lr, #1
 80093d6:	b16e      	cbz	r6, 80093f4 <D16_GENERIC+0xb0>
 80093d8:	6a16      	ldr	r6, [r2, #32]
 80093da:	9f01      	ldr	r7, [sp, #4]
 80093dc:	fba8 8906 	umull	r8, r9, r8, r6
 80093e0:	fb06 9907 	mla	r9, r6, r7, r9
 80093e4:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80093e8:	f149 0900 	adc.w	r9, r9, #0
 80093ec:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80093f0:	46a3      	mov	fp, r4
 80093f2:	4654      	mov	r4, sl
 80093f4:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80093f6:	9f02      	ldr	r7, [sp, #8]
 80093f8:	0424      	lsls	r4, r4, #16
 80093fa:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80093fe:	f04f 0900 	mov.w	r9, #0
 8009402:	fb0e fe06 	mul.w	lr, lr, r6
 8009406:	fbc7 8904 	smlal	r8, r9, r7, r4
 800940a:	9e03      	ldr	r6, [sp, #12]
 800940c:	464f      	mov	r7, r9
 800940e:	10bc      	asrs	r4, r7, #2
 8009410:	f304 040f 	ssat	r4, #16, r4
 8009414:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8009418:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800941a:	fa1f fe8c 	uxth.w	lr, ip
 800941e:	4574      	cmp	r4, lr
 8009420:	d90a      	bls.n	8009438 <D16_GENERIC+0xf4>
 8009422:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8009424:	2c01      	cmp	r4, #1
 8009426:	b2e6      	uxtb	r6, r4
 8009428:	d1ab      	bne.n	8009382 <D16_GENERIC+0x3e>
 800942a:	9e05      	ldr	r6, [sp, #20]
 800942c:	f850 4b02 	ldr.w	r4, [r0], #2
 8009430:	2e00      	cmp	r6, #0
 8009432:	d0ac      	beq.n	800938e <D16_GENERIC+0x4a>
 8009434:	ba64      	rev16	r4, r4
 8009436:	e7aa      	b.n	800938e <D16_GENERIC+0x4a>
 8009438:	462e      	mov	r6, r5
 800943a:	9907      	ldr	r1, [sp, #28]
 800943c:	61d3      	str	r3, [r2, #28]
 800943e:	9b06      	ldr	r3, [sp, #24]
 8009440:	6096      	str	r6, [r2, #8]
 8009442:	2000      	movs	r0, #0
 8009444:	60d1      	str	r1, [r2, #12]
 8009446:	f8c2 a010 	str.w	sl, [r2, #16]
 800944a:	f8c2 b014 	str.w	fp, [r2, #20]
 800944e:	6193      	str	r3, [r2, #24]
 8009450:	b009      	add	sp, #36	; 0x24
 8009452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009456:	bf00      	nop
 8009458:	20000000 	.word	0x20000000
 800945c:	00030001 	.word	0x00030001
 8009460:	00010003 	.word	0x00010003

08009464 <D24_GENERIC>:
 8009464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009468:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800946a:	6993      	ldr	r3, [r2, #24]
 800946c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800946e:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8009472:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8009476:	6894      	ldr	r4, [r2, #8]
 8009478:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800947c:	b089      	sub	sp, #36	; 0x24
 800947e:	9307      	str	r3, [sp, #28]
 8009480:	9503      	str	r5, [sp, #12]
 8009482:	69d3      	ldr	r3, [r2, #28]
 8009484:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8009486:	9104      	str	r1, [sp, #16]
 8009488:	2e00      	cmp	r6, #0
 800948a:	f000 8096 	beq.w	80095ba <D24_GENERIC+0x156>
 800948e:	f005 0610 	and.w	r6, r5, #16
 8009492:	f005 0520 	and.w	r5, r5, #32
 8009496:	4954      	ldr	r1, [pc, #336]	; (80095e8 <D24_GENERIC+0x184>)
 8009498:	9605      	str	r6, [sp, #20]
 800949a:	9506      	str	r5, [sp, #24]
 800949c:	f04f 0e00 	mov.w	lr, #0
 80094a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80094a4:	e06a      	b.n	800957c <D24_GENERIC+0x118>
 80094a6:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80094aa:	f810 8007 	ldrb.w	r8, [r0, r7]
 80094ae:	f890 c000 	ldrb.w	ip, [r0]
 80094b2:	042d      	lsls	r5, r5, #16
 80094b4:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80094b8:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80094bc:	44ac      	add	ip, r5
 80094be:	4438      	add	r0, r7
 80094c0:	fa5f f68c 	uxtb.w	r6, ip
 80094c4:	f3cc 2507 	ubfx	r5, ip, #8, #8
 80094c8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80094cc:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 80094d0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80094d4:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80094d8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80094dc:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 80094e0:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80094e4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80094e8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80094ec:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80094f0:	4d3e      	ldr	r5, [pc, #248]	; (80095ec <D24_GENERIC+0x188>)
 80094f2:	fb26 b705 	smlad	r7, r6, r5, fp
 80094f6:	4d3e      	ldr	r5, [pc, #248]	; (80095f0 <D24_GENERIC+0x18c>)
 80094f8:	fb26 4b05 	smlad	fp, r6, r5, r4
 80094fc:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8009500:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8009504:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8009508:	2401      	movs	r4, #1
 800950a:	fb26 f604 	smuad	r6, r6, r4
 800950e:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8009512:	9f02      	ldr	r7, [sp, #8]
 8009514:	eb0e 0c04 	add.w	ip, lr, r4
 8009518:	eb08 0406 	add.w	r4, r8, r6
 800951c:	eb05 060a 	add.w	r6, r5, sl
 8009520:	1bf6      	subs	r6, r6, r7
 8009522:	4637      	mov	r7, r6
 8009524:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8009528:	e9cd 7800 	strd	r7, r8, [sp]
 800952c:	9f05      	ldr	r7, [sp, #20]
 800952e:	b177      	cbz	r7, 800954e <D24_GENERIC+0xea>
 8009530:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8009534:	9502      	str	r5, [sp, #8]
 8009536:	fba6 9a08 	umull	r9, sl, r6, r8
 800953a:	9e01      	ldr	r6, [sp, #4]
 800953c:	fb08 aa06 	mla	sl, r8, r6, sl
 8009540:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8009544:	f14a 0700 	adc.w	r7, sl, #0
 8009548:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800954c:	4655      	mov	r5, sl
 800954e:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8009550:	9f03      	ldr	r7, [sp, #12]
 8009552:	03ad      	lsls	r5, r5, #14
 8009554:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009558:	f04f 0900 	mov.w	r9, #0
 800955c:	fb0e fe06 	mul.w	lr, lr, r6
 8009560:	fbc7 8905 	smlal	r8, r9, r7, r5
 8009564:	9e04      	ldr	r6, [sp, #16]
 8009566:	464f      	mov	r7, r9
 8009568:	10bd      	asrs	r5, r7, #2
 800956a:	f305 050f 	ssat	r5, #16, r5
 800956e:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8009572:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009574:	fa1f fe8c 	uxth.w	lr, ip
 8009578:	4575      	cmp	r5, lr
 800957a:	d91c      	bls.n	80095b6 <D24_GENERIC+0x152>
 800957c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800957e:	b2ef      	uxtb	r7, r5
 8009580:	2d01      	cmp	r5, #1
 8009582:	b23e      	sxth	r6, r7
 8009584:	d18f      	bne.n	80094a6 <D24_GENERIC+0x42>
 8009586:	9d06      	ldr	r5, [sp, #24]
 8009588:	b15d      	cbz	r5, 80095a2 <D24_GENERIC+0x13e>
 800958a:	f01e 0f01 	tst.w	lr, #1
 800958e:	d122      	bne.n	80095d6 <D24_GENERIC+0x172>
 8009590:	7805      	ldrb	r5, [r0, #0]
 8009592:	78c7      	ldrb	r7, [r0, #3]
 8009594:	7846      	ldrb	r6, [r0, #1]
 8009596:	022d      	lsls	r5, r5, #8
 8009598:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800959c:	44b4      	add	ip, r6
 800959e:	3002      	adds	r0, #2
 80095a0:	e78e      	b.n	80094c0 <D24_GENERIC+0x5c>
 80095a2:	7846      	ldrb	r6, [r0, #1]
 80095a4:	f890 c002 	ldrb.w	ip, [r0, #2]
 80095a8:	f810 5b03 	ldrb.w	r5, [r0], #3
 80095ac:	0236      	lsls	r6, r6, #8
 80095ae:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 80095b2:	44ac      	add	ip, r5
 80095b4:	e784      	b.n	80094c0 <D24_GENERIC+0x5c>
 80095b6:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80095ba:	61d3      	str	r3, [r2, #28]
 80095bc:	9b07      	ldr	r3, [sp, #28]
 80095be:	6094      	str	r4, [r2, #8]
 80095c0:	2000      	movs	r0, #0
 80095c2:	f8c2 b00c 	str.w	fp, [r2, #12]
 80095c6:	f8c2 a010 	str.w	sl, [r2, #16]
 80095ca:	f8c2 9014 	str.w	r9, [r2, #20]
 80095ce:	6193      	str	r3, [r2, #24]
 80095d0:	b009      	add	sp, #36	; 0x24
 80095d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d6:	78c5      	ldrb	r5, [r0, #3]
 80095d8:	7887      	ldrb	r7, [r0, #2]
 80095da:	f810 6b04 	ldrb.w	r6, [r0], #4
 80095de:	022d      	lsls	r5, r5, #8
 80095e0:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80095e4:	44b4      	add	ip, r6
 80095e6:	e76b      	b.n	80094c0 <D24_GENERIC+0x5c>
 80095e8:	20000000 	.word	0x20000000
 80095ec:	00030001 	.word	0x00030001
 80095f0:	00060007 	.word	0x00060007

080095f4 <D32_GENERIC>:
 80095f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80095fa:	6993      	ldr	r3, [r2, #24]
 80095fc:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80095fe:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8009602:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8009606:	69d6      	ldr	r6, [r2, #28]
 8009608:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800960c:	b089      	sub	sp, #36	; 0x24
 800960e:	9307      	str	r3, [sp, #28]
 8009610:	9403      	str	r4, [sp, #12]
 8009612:	6893      	ldr	r3, [r2, #8]
 8009614:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009616:	9104      	str	r1, [sp, #16]
 8009618:	2d00      	cmp	r5, #0
 800961a:	f000 809f 	beq.w	800975c <D32_GENERIC+0x168>
 800961e:	f004 0510 	and.w	r5, r4, #16
 8009622:	f004 0420 	and.w	r4, r4, #32
 8009626:	9505      	str	r5, [sp, #20]
 8009628:	4953      	ldr	r1, [pc, #332]	; (8009778 <D32_GENERIC+0x184>)
 800962a:	9406      	str	r4, [sp, #24]
 800962c:	f04f 0c00 	mov.w	ip, #0
 8009630:	f8cd 9008 	str.w	r9, [sp, #8]
 8009634:	461d      	mov	r5, r3
 8009636:	4617      	mov	r7, r2
 8009638:	e077      	b.n	800972a <D32_GENERIC+0x136>
 800963a:	f818 3003 	ldrb.w	r3, [r8, r3]
 800963e:	f810 800e 	ldrb.w	r8, [r0, lr]
 8009642:	f810 e002 	ldrb.w	lr, [r0, r2]
 8009646:	7800      	ldrb	r0, [r0, #0]
 8009648:	041b      	lsls	r3, r3, #16
 800964a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800964e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8009652:	4403      	add	r3, r0
 8009654:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8009658:	b2dc      	uxtb	r4, r3
 800965a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800965e:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8009662:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009666:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800966a:	0e1b      	lsrs	r3, r3, #24
 800966c:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8009670:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8009674:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009678:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800967c:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8009680:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8009684:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8009688:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800968c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009690:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009694:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8009698:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800969c:	4b37      	ldr	r3, [pc, #220]	; (800977c <D32_GENERIC+0x188>)
 800969e:	fb22 b403 	smlad	r4, r2, r3, fp
 80096a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096a6:	fb2e 4803 	smlad	r8, lr, r3, r4
 80096aa:	4b35      	ldr	r3, [pc, #212]	; (8009780 <D32_GENERIC+0x18c>)
 80096ac:	fb22 5503 	smlad	r5, r2, r3, r5
 80096b0:	4b34      	ldr	r3, [pc, #208]	; (8009784 <D32_GENERIC+0x190>)
 80096b2:	fb2e 5b03 	smlad	fp, lr, r3, r5
 80096b6:	2301      	movs	r3, #1
 80096b8:	fb22 f203 	smuad	r2, r2, r3
 80096bc:	4b32      	ldr	r3, [pc, #200]	; (8009788 <D32_GENERIC+0x194>)
 80096be:	fb2e 2503 	smlad	r5, lr, r3, r2
 80096c2:	9b02      	ldr	r3, [sp, #8]
 80096c4:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 80096c8:	eb04 080a 	add.w	r8, r4, sl
 80096cc:	eba8 0803 	sub.w	r8, r8, r3
 80096d0:	4642      	mov	r2, r8
 80096d2:	17d3      	asrs	r3, r2, #31
 80096d4:	e9cd 2300 	strd	r2, r3, [sp]
 80096d8:	9b05      	ldr	r3, [sp, #20]
 80096da:	f10c 0e01 	add.w	lr, ip, #1
 80096de:	b16b      	cbz	r3, 80096fc <D32_GENERIC+0x108>
 80096e0:	6a3a      	ldr	r2, [r7, #32]
 80096e2:	9b01      	ldr	r3, [sp, #4]
 80096e4:	9402      	str	r4, [sp, #8]
 80096e6:	fba8 8902 	umull	r8, r9, r8, r2
 80096ea:	fb02 9903 	mla	r9, r2, r3, r9
 80096ee:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80096f2:	f149 0900 	adc.w	r9, r9, #0
 80096f6:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80096fa:	4654      	mov	r4, sl
 80096fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80096fe:	9a04      	ldr	r2, [sp, #16]
 8009700:	fb0c fc03 	mul.w	ip, ip, r3
 8009704:	9b03      	ldr	r3, [sp, #12]
 8009706:	0364      	lsls	r4, r4, #13
 8009708:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800970c:	f04f 0900 	mov.w	r9, #0
 8009710:	fbc3 8904 	smlal	r8, r9, r3, r4
 8009714:	464b      	mov	r3, r9
 8009716:	109b      	asrs	r3, r3, #2
 8009718:	f303 030f 	ssat	r3, #16, r3
 800971c:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8009720:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009722:	fa1f fc8e 	uxth.w	ip, lr
 8009726:	4563      	cmp	r3, ip
 8009728:	d914      	bls.n	8009754 <D32_GENERIC+0x160>
 800972a:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800972c:	b2e2      	uxtb	r2, r4
 800972e:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8009732:	eb00 080e 	add.w	r8, r0, lr
 8009736:	4253      	negs	r3, r2
 8009738:	2c01      	cmp	r4, #1
 800973a:	eb08 0403 	add.w	r4, r8, r3
 800973e:	f47f af7c 	bne.w	800963a <D32_GENERIC+0x46>
 8009742:	1d02      	adds	r2, r0, #4
 8009744:	6803      	ldr	r3, [r0, #0]
 8009746:	9806      	ldr	r0, [sp, #24]
 8009748:	b110      	cbz	r0, 8009750 <D32_GENERIC+0x15c>
 800974a:	ba5b      	rev16	r3, r3
 800974c:	4610      	mov	r0, r2
 800974e:	e783      	b.n	8009658 <D32_GENERIC+0x64>
 8009750:	4610      	mov	r0, r2
 8009752:	e781      	b.n	8009658 <D32_GENERIC+0x64>
 8009754:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009758:	462b      	mov	r3, r5
 800975a:	463a      	mov	r2, r7
 800975c:	6093      	str	r3, [r2, #8]
 800975e:	9b07      	ldr	r3, [sp, #28]
 8009760:	f8c2 b00c 	str.w	fp, [r2, #12]
 8009764:	2000      	movs	r0, #0
 8009766:	61d6      	str	r6, [r2, #28]
 8009768:	f8c2 a010 	str.w	sl, [r2, #16]
 800976c:	f8c2 9014 	str.w	r9, [r2, #20]
 8009770:	6193      	str	r3, [r2, #24]
 8009772:	b009      	add	sp, #36	; 0x24
 8009774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009778:	20000000 	.word	0x20000000
 800977c:	00060003 	.word	0x00060003
 8009780:	000a000c 	.word	0x000a000c
 8009784:	000c000a 	.word	0x000c000a
 8009788:	00030006 	.word	0x00030006

0800978c <D48_GENERIC>:
 800978c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009790:	b089      	sub	sp, #36	; 0x24
 8009792:	6953      	ldr	r3, [r2, #20]
 8009794:	68d4      	ldr	r4, [r2, #12]
 8009796:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009798:	9302      	str	r3, [sp, #8]
 800979a:	9400      	str	r4, [sp, #0]
 800979c:	6993      	ldr	r3, [r2, #24]
 800979e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80097a0:	9307      	str	r3, [sp, #28]
 80097a2:	9403      	str	r4, [sp, #12]
 80097a4:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80097a8:	69d6      	ldr	r6, [r2, #28]
 80097aa:	6893      	ldr	r3, [r2, #8]
 80097ac:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80097ae:	9104      	str	r1, [sp, #16]
 80097b0:	2d00      	cmp	r5, #0
 80097b2:	f000 80c5 	beq.w	8009940 <D48_GENERIC+0x1b4>
 80097b6:	f004 0510 	and.w	r5, r4, #16
 80097ba:	f004 0420 	and.w	r4, r4, #32
 80097be:	4967      	ldr	r1, [pc, #412]	; (800995c <D48_GENERIC+0x1d0>)
 80097c0:	9505      	str	r5, [sp, #20]
 80097c2:	9406      	str	r4, [sp, #24]
 80097c4:	f04f 0c00 	mov.w	ip, #0
 80097c8:	4657      	mov	r7, sl
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	e09c      	b.n	8009908 <D48_GENERIC+0x17c>
 80097ce:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80097d2:	f810 b009 	ldrb.w	fp, [r0, r9]
 80097d6:	f81a 9009 	ldrb.w	r9, [sl, r9]
 80097da:	f810 a00e 	ldrb.w	sl, [r0, lr]
 80097de:	7800      	ldrb	r0, [r0, #0]
 80097e0:	0424      	lsls	r4, r4, #16
 80097e2:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 80097e6:	f818 4005 	ldrb.w	r4, [r8, r5]
 80097ea:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 80097ee:	44a8      	add	r8, r5
 80097f0:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 80097f4:	eb0b 0500 	add.w	r5, fp, r0
 80097f8:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 80097fc:	fa5f f885 	uxtb.w	r8, r5
 8009800:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8009804:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8009808:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800980c:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8009810:	0e2d      	lsrs	r5, r5, #24
 8009812:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8009816:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800981a:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800981e:	b2e6      	uxtb	r6, r4
 8009820:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8009824:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009828:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800982c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009830:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8009834:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8009838:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800983c:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8009840:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009844:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009848:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800984c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009850:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009854:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009858:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800985c:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8009860:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8009864:	4c3e      	ldr	r4, [pc, #248]	; (8009960 <D48_GENERIC+0x1d4>)
 8009866:	9d00      	ldr	r5, [sp, #0]
 8009868:	fb2a 5404 	smlad	r4, sl, r4, r5
 800986c:	4d3d      	ldr	r5, [pc, #244]	; (8009964 <D48_GENERIC+0x1d8>)
 800986e:	fb28 4405 	smlad	r4, r8, r5, r4
 8009872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009876:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800987a:	4c3b      	ldr	r4, [pc, #236]	; (8009968 <D48_GENERIC+0x1dc>)
 800987c:	9b01      	ldr	r3, [sp, #4]
 800987e:	fb2a 3304 	smlad	r3, sl, r4, r3
 8009882:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8009886:	fb28 3304 	smlad	r3, r8, r4, r3
 800988a:	4c38      	ldr	r4, [pc, #224]	; (800996c <D48_GENERIC+0x1e0>)
 800988c:	fb2e 3304 	smlad	r3, lr, r4, r3
 8009890:	2501      	movs	r5, #1
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	fb2a fa05 	smuad	sl, sl, r5
 8009898:	4b35      	ldr	r3, [pc, #212]	; (8009970 <D48_GENERIC+0x1e4>)
 800989a:	fb28 a803 	smlad	r8, r8, r3, sl
 800989e:	4b35      	ldr	r3, [pc, #212]	; (8009974 <D48_GENERIC+0x1e8>)
 80098a0:	fb2e 8303 	smlad	r3, lr, r3, r8
 80098a4:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	9b02      	ldr	r3, [sp, #8]
 80098ac:	eb04 0807 	add.w	r8, r4, r7
 80098b0:	eba8 0803 	sub.w	r8, r8, r3
 80098b4:	9b05      	ldr	r3, [sp, #20]
 80098b6:	4465      	add	r5, ip
 80098b8:	ea4f 7be8 	mov.w	fp, r8, asr #31
 80098bc:	b163      	cbz	r3, 80098d8 <D48_GENERIC+0x14c>
 80098be:	6a17      	ldr	r7, [r2, #32]
 80098c0:	9402      	str	r4, [sp, #8]
 80098c2:	fba8 8907 	umull	r8, r9, r8, r7
 80098c6:	fb07 990b 	mla	r9, r7, fp, r9
 80098ca:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80098ce:	f149 0900 	adc.w	r9, r9, #0
 80098d2:	ea4f 0749 	mov.w	r7, r9, lsl #1
 80098d6:	463c      	mov	r4, r7
 80098d8:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 80098dc:	9b03      	ldr	r3, [sp, #12]
 80098de:	02e4      	lsls	r4, r4, #11
 80098e0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80098e4:	f04f 0900 	mov.w	r9, #0
 80098e8:	fb0c fc0e 	mul.w	ip, ip, lr
 80098ec:	fbc3 8904 	smlal	r8, r9, r3, r4
 80098f0:	9b04      	ldr	r3, [sp, #16]
 80098f2:	ea4f 04a9 	mov.w	r4, r9, asr #2
 80098f6:	f304 040f 	ssat	r4, #16, r4
 80098fa:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 80098fe:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8009900:	fa1f fc85 	uxth.w	ip, r5
 8009904:	4564      	cmp	r4, ip
 8009906:	d919      	bls.n	800993c <D48_GENERIC+0x1b0>
 8009908:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800990a:	fa5f fe84 	uxtb.w	lr, r4
 800990e:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8009912:	f1ce 0500 	rsb	r5, lr, #0
 8009916:	eb00 0b09 	add.w	fp, r0, r9
 800991a:	eb0b 0a05 	add.w	sl, fp, r5
 800991e:	2c01      	cmp	r4, #1
 8009920:	eb0a 0809 	add.w	r8, sl, r9
 8009924:	f47f af53 	bne.w	80097ce <D48_GENERIC+0x42>
 8009928:	9b06      	ldr	r3, [sp, #24]
 800992a:	6805      	ldr	r5, [r0, #0]
 800992c:	6844      	ldr	r4, [r0, #4]
 800992e:	3006      	adds	r0, #6
 8009930:	2b00      	cmp	r3, #0
 8009932:	f43f af63 	beq.w	80097fc <D48_GENERIC+0x70>
 8009936:	ba6d      	rev16	r5, r5
 8009938:	ba64      	rev16	r4, r4
 800993a:	e75f      	b.n	80097fc <D48_GENERIC+0x70>
 800993c:	9b01      	ldr	r3, [sp, #4]
 800993e:	46ba      	mov	sl, r7
 8009940:	6093      	str	r3, [r2, #8]
 8009942:	9b00      	ldr	r3, [sp, #0]
 8009944:	60d3      	str	r3, [r2, #12]
 8009946:	9b02      	ldr	r3, [sp, #8]
 8009948:	6153      	str	r3, [r2, #20]
 800994a:	9b07      	ldr	r3, [sp, #28]
 800994c:	61d6      	str	r6, [r2, #28]
 800994e:	2000      	movs	r0, #0
 8009950:	f8c2 a010 	str.w	sl, [r2, #16]
 8009954:	6193      	str	r3, [r2, #24]
 8009956:	b009      	add	sp, #36	; 0x24
 8009958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995c:	20000000 	.word	0x20000000
 8009960:	000f000a 	.word	0x000f000a
 8009964:	00060003 	.word	0x00060003
 8009968:	00150019 	.word	0x00150019
 800996c:	00190015 	.word	0x00190015
 8009970:	00030006 	.word	0x00030006
 8009974:	000a000f 	.word	0x000a000f

08009978 <D64_GENERIC>:
 8009978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997c:	b089      	sub	sp, #36	; 0x24
 800997e:	6913      	ldr	r3, [r2, #16]
 8009980:	6895      	ldr	r5, [r2, #8]
 8009982:	9303      	str	r3, [sp, #12]
 8009984:	9501      	str	r5, [sp, #4]
 8009986:	6953      	ldr	r3, [r2, #20]
 8009988:	68d5      	ldr	r5, [r2, #12]
 800998a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800998c:	9304      	str	r3, [sp, #16]
 800998e:	9500      	str	r5, [sp, #0]
 8009990:	6993      	ldr	r3, [r2, #24]
 8009992:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009994:	9307      	str	r3, [sp, #28]
 8009996:	9505      	str	r5, [sp, #20]
 8009998:	69d3      	ldr	r3, [r2, #28]
 800999a:	9106      	str	r1, [sp, #24]
 800999c:	2c00      	cmp	r4, #0
 800999e:	f000 80d9 	beq.w	8009b54 <D64_GENERIC+0x1dc>
 80099a2:	6a11      	ldr	r1, [r2, #32]
 80099a4:	9102      	str	r1, [sp, #8]
 80099a6:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8009b94 <D64_GENERIC+0x21c>
 80099aa:	f04f 0c00 	mov.w	ip, #0
 80099ae:	4681      	mov	r9, r0
 80099b0:	e0c1      	b.n	8009b36 <D64_GENERIC+0x1be>
 80099b2:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80099b6:	4274      	negs	r4, r6
 80099b8:	eb09 0708 	add.w	r7, r9, r8
 80099bc:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80099c0:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 80099c4:	5d38      	ldrb	r0, [r7, r4]
 80099c6:	5d29      	ldrb	r1, [r5, r4]
 80099c8:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80099cc:	f819 a008 	ldrb.w	sl, [r9, r8]
 80099d0:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80099d4:	f899 7000 	ldrb.w	r7, [r9]
 80099d8:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 80099dc:	4425      	add	r5, r4
 80099de:	0409      	lsls	r1, r1, #16
 80099e0:	0400      	lsls	r0, r0, #16
 80099e2:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80099e6:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80099ea:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 80099ee:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 80099f2:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80099f6:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 80099fa:	4459      	add	r1, fp
 80099fc:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8009a00:	4438      	add	r0, r7
 8009a02:	b2c5      	uxtb	r5, r0
 8009a04:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8009a08:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8009a0c:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8009a10:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8009a14:	0e00      	lsrs	r0, r0, #24
 8009a16:	eb03 0806 	add.w	r8, r3, r6
 8009a1a:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8009a1e:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8009a22:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009a26:	b2c8      	uxtb	r0, r1
 8009a28:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8009a2c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8009a30:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8009a34:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8009a38:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8009a3c:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8009a40:	0e09      	lsrs	r1, r1, #24
 8009a42:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8009a46:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8009a4a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8009a4e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8009a52:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8009a56:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8009a5a:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8009a5e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009a62:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009a66:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009a6a:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8009a6e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009a72:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009a76:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009a7a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8009a7e:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8009a82:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8009a86:	0a8b      	lsrs	r3, r1, #10
 8009a88:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8009a8c:	4939      	ldr	r1, [pc, #228]	; (8009b74 <D64_GENERIC+0x1fc>)
 8009a8e:	9c00      	ldr	r4, [sp, #0]
 8009a90:	fb28 4101 	smlad	r1, r8, r1, r4
 8009a94:	4c38      	ldr	r4, [pc, #224]	; (8009b78 <D64_GENERIC+0x200>)
 8009a96:	fb27 1104 	smlad	r1, r7, r4, r1
 8009a9a:	4c38      	ldr	r4, [pc, #224]	; (8009b7c <D64_GENERIC+0x204>)
 8009a9c:	fb20 1104 	smlad	r1, r0, r4, r1
 8009aa0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8009aa4:	fb2a 1106 	smlad	r1, sl, r6, r1
 8009aa8:	4c35      	ldr	r4, [pc, #212]	; (8009b80 <D64_GENERIC+0x208>)
 8009aaa:	9d01      	ldr	r5, [sp, #4]
 8009aac:	fb28 5404 	smlad	r4, r8, r4, r5
 8009ab0:	4d33      	ldr	r5, [pc, #204]	; (8009b80 <D64_GENERIC+0x208>)
 8009ab2:	fb2a 4415 	smladx	r4, sl, r5, r4
 8009ab6:	4d33      	ldr	r5, [pc, #204]	; (8009b84 <D64_GENERIC+0x20c>)
 8009ab8:	fb27 4405 	smlad	r4, r7, r5, r4
 8009abc:	fb20 4415 	smladx	r4, r0, r5, r4
 8009ac0:	2501      	movs	r5, #1
 8009ac2:	9400      	str	r4, [sp, #0]
 8009ac4:	fb28 f805 	smuad	r8, r8, r5
 8009ac8:	4c2f      	ldr	r4, [pc, #188]	; (8009b88 <D64_GENERIC+0x210>)
 8009aca:	fb27 8704 	smlad	r7, r7, r4, r8
 8009ace:	4c2f      	ldr	r4, [pc, #188]	; (8009b8c <D64_GENERIC+0x214>)
 8009ad0:	fb20 7004 	smlad	r0, r0, r4, r7
 8009ad4:	4c2e      	ldr	r4, [pc, #184]	; (8009b90 <D64_GENERIC+0x218>)
 8009ad6:	fb2a 0004 	smlad	r0, sl, r4, r0
 8009ada:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8009ade:	9902      	ldr	r1, [sp, #8]
 8009ae0:	9001      	str	r0, [sp, #4]
 8009ae2:	b189      	cbz	r1, 8009b08 <D64_GENERIC+0x190>
 8009ae4:	9803      	ldr	r0, [sp, #12]
 8009ae6:	9c04      	ldr	r4, [sp, #16]
 8009ae8:	9604      	str	r6, [sp, #16]
 8009aea:	4430      	add	r0, r6
 8009aec:	1b00      	subs	r0, r0, r4
 8009aee:	17c5      	asrs	r5, r0, #31
 8009af0:	460f      	mov	r7, r1
 8009af2:	fba0 0101 	umull	r0, r1, r0, r1
 8009af6:	fb07 1105 	mla	r1, r7, r5, r1
 8009afa:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8009afe:	f141 0100 	adc.w	r1, r1, #0
 8009b02:	0049      	lsls	r1, r1, #1
 8009b04:	9103      	str	r1, [sp, #12]
 8009b06:	460e      	mov	r6, r1
 8009b08:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8009b0a:	9905      	ldr	r1, [sp, #20]
 8009b0c:	9806      	ldr	r0, [sp, #24]
 8009b0e:	02b6      	lsls	r6, r6, #10
 8009b10:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8009b14:	f04f 0800 	mov.w	r8, #0
 8009b18:	fb0c f404 	mul.w	r4, ip, r4
 8009b1c:	fbc1 7806 	smlal	r7, r8, r1, r6
 8009b20:	4641      	mov	r1, r8
 8009b22:	1089      	asrs	r1, r1, #2
 8009b24:	f301 010f 	ssat	r1, #16, r1
 8009b28:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8009b2c:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8009b2e:	f10c 0c01 	add.w	ip, ip, #1
 8009b32:	4561      	cmp	r1, ip
 8009b34:	dd0e      	ble.n	8009b54 <D64_GENERIC+0x1dc>
 8009b36:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8009b38:	2e01      	cmp	r6, #1
 8009b3a:	f47f af3a 	bne.w	80099b2 <D64_GENERIC+0x3a>
 8009b3e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009b40:	06b4      	lsls	r4, r6, #26
 8009b42:	e899 0003 	ldmia.w	r9, {r0, r1}
 8009b46:	f109 0908 	add.w	r9, r9, #8
 8009b4a:	f57f af5a 	bpl.w	8009a02 <D64_GENERIC+0x8a>
 8009b4e:	ba40      	rev16	r0, r0
 8009b50:	ba49      	rev16	r1, r1
 8009b52:	e756      	b.n	8009a02 <D64_GENERIC+0x8a>
 8009b54:	61d3      	str	r3, [r2, #28]
 8009b56:	9b03      	ldr	r3, [sp, #12]
 8009b58:	9901      	ldr	r1, [sp, #4]
 8009b5a:	6113      	str	r3, [r2, #16]
 8009b5c:	9b04      	ldr	r3, [sp, #16]
 8009b5e:	6091      	str	r1, [r2, #8]
 8009b60:	6153      	str	r3, [r2, #20]
 8009b62:	9900      	ldr	r1, [sp, #0]
 8009b64:	9b07      	ldr	r3, [sp, #28]
 8009b66:	60d1      	str	r1, [r2, #12]
 8009b68:	2000      	movs	r0, #0
 8009b6a:	6193      	str	r3, [r2, #24]
 8009b6c:	b009      	add	sp, #36	; 0x24
 8009b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b72:	bf00      	nop
 8009b74:	001c0015 	.word	0x001c0015
 8009b78:	000f000a 	.word	0x000f000a
 8009b7c:	00060003 	.word	0x00060003
 8009b80:	0024002a 	.word	0x0024002a
 8009b84:	002e0030 	.word	0x002e0030
 8009b88:	00030006 	.word	0x00030006
 8009b8c:	000a000f 	.word	0x000a000f
 8009b90:	0015001c 	.word	0x0015001c
 8009b94:	20000000 	.word	0x20000000

08009b98 <D80_GENERIC>:
 8009b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9c:	b08b      	sub	sp, #44	; 0x2c
 8009b9e:	6914      	ldr	r4, [r2, #16]
 8009ba0:	9404      	str	r4, [sp, #16]
 8009ba2:	6954      	ldr	r4, [r2, #20]
 8009ba4:	9405      	str	r4, [sp, #20]
 8009ba6:	6994      	ldr	r4, [r2, #24]
 8009ba8:	9409      	str	r4, [sp, #36]	; 0x24
 8009baa:	6894      	ldr	r4, [r2, #8]
 8009bac:	9402      	str	r4, [sp, #8]
 8009bae:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009bb0:	68d4      	ldr	r4, [r2, #12]
 8009bb2:	9401      	str	r4, [sp, #4]
 8009bb4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009bb6:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8009bba:	9406      	str	r4, [sp, #24]
 8009bbc:	9107      	str	r1, [sp, #28]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f000 810f 	beq.w	8009de2 <D80_GENERIC+0x24a>
 8009bc4:	6a13      	ldr	r3, [r2, #32]
 8009bc6:	9308      	str	r3, [sp, #32]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9200      	str	r2, [sp, #0]
 8009bcc:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8009e34 <D80_GENERIC+0x29c>
 8009bd0:	f8cd b00c 	str.w	fp, [sp, #12]
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	e0ed      	b.n	8009db4 <D80_GENERIC+0x21c>
 8009bd8:	fa5f fc8c 	uxtb.w	ip, ip
 8009bdc:	fa0f f48c 	sxth.w	r4, ip
 8009be0:	0066      	lsls	r6, r4, #1
 8009be2:	eb06 0804 	add.w	r8, r6, r4
 8009be6:	f1cc 0500 	rsb	r5, ip, #0
 8009bea:	eb00 0108 	add.w	r1, r0, r8
 8009bee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009bf2:	194b      	adds	r3, r1, r5
 8009bf4:	5d49      	ldrb	r1, [r1, r5]
 8009bf6:	f810 a008 	ldrb.w	sl, [r0, r8]
 8009bfa:	f813 b004 	ldrb.w	fp, [r3, r4]
 8009bfe:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8009c02:	f890 8000 	ldrb.w	r8, [r0]
 8009c06:	eb03 0e04 	add.w	lr, r3, r4
 8009c0a:	eb0e 0705 	add.w	r7, lr, r5
 8009c0e:	0409      	lsls	r1, r1, #16
 8009c10:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8009c14:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8009c18:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8009c1c:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8009c20:	eb0a 0004 	add.w	r0, sl, r4
 8009c24:	041b      	lsls	r3, r3, #16
 8009c26:	f81a a004 	ldrb.w	sl, [sl, r4]
 8009c2a:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8009c2e:	5d44      	ldrb	r4, [r0, r5]
 8009c30:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8009c34:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8009c38:	4428      	add	r0, r5
 8009c3a:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8009c3e:	4441      	add	r1, r8
 8009c40:	4430      	add	r0, r6
 8009c42:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8009c46:	441f      	add	r7, r3
 8009c48:	b2cd      	uxtb	r5, r1
 8009c4a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009c4e:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8009c52:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8009c56:	9b03      	ldr	r3, [sp, #12]
 8009c58:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8009c5c:	0e09      	lsrs	r1, r1, #24
 8009c5e:	4433      	add	r3, r6
 8009c60:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8009c64:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8009c68:	b2fd      	uxtb	r5, r7
 8009c6a:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8009c6e:	469b      	mov	fp, r3
 8009c70:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8009c74:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8009c78:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8009c7c:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8009c80:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8009c84:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8009c88:	0e3b      	lsrs	r3, r7, #24
 8009c8a:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8009c8e:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8009c92:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009c96:	fa5f fe84 	uxtb.w	lr, r4
 8009c9a:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8009c9e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009ca2:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8009ca6:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8009caa:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8009cae:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8009cb2:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8009cb6:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8009cba:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cc2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009cc6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009cca:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009cce:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009cd2:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8009cd6:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8009cda:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8009cde:	0aa3      	lsrs	r3, r4, #10
 8009ce0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009ce4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009ce8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009cec:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8009cf0:	9303      	str	r3, [sp, #12]
 8009cf2:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8009cf6:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8009cfa:	4b42      	ldr	r3, [pc, #264]	; (8009e04 <D80_GENERIC+0x26c>)
 8009cfc:	9901      	ldr	r1, [sp, #4]
 8009cfe:	fb2b 1303 	smlad	r3, fp, r3, r1
 8009d02:	4941      	ldr	r1, [pc, #260]	; (8009e08 <D80_GENERIC+0x270>)
 8009d04:	fb28 3301 	smlad	r3, r8, r1, r3
 8009d08:	4940      	ldr	r1, [pc, #256]	; (8009e0c <D80_GENERIC+0x274>)
 8009d0a:	fb2c 3301 	smlad	r3, ip, r1, r3
 8009d0e:	4940      	ldr	r1, [pc, #256]	; (8009e10 <D80_GENERIC+0x278>)
 8009d10:	fb27 3301 	smlad	r3, r7, r1, r3
 8009d14:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009d18:	fb2e 3301 	smlad	r3, lr, r1, r3
 8009d1c:	493d      	ldr	r1, [pc, #244]	; (8009e14 <D80_GENERIC+0x27c>)
 8009d1e:	9c02      	ldr	r4, [sp, #8]
 8009d20:	fb2b 4401 	smlad	r4, fp, r1, r4
 8009d24:	493c      	ldr	r1, [pc, #240]	; (8009e18 <D80_GENERIC+0x280>)
 8009d26:	fb28 4401 	smlad	r4, r8, r1, r4
 8009d2a:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8009d2e:	fb2c 4101 	smlad	r1, ip, r1, r4
 8009d32:	4c3a      	ldr	r4, [pc, #232]	; (8009e1c <D80_GENERIC+0x284>)
 8009d34:	fb27 1104 	smlad	r1, r7, r4, r1
 8009d38:	4c39      	ldr	r4, [pc, #228]	; (8009e20 <D80_GENERIC+0x288>)
 8009d3a:	fb2e 1104 	smlad	r1, lr, r4, r1
 8009d3e:	9101      	str	r1, [sp, #4]
 8009d40:	2101      	movs	r1, #1
 8009d42:	fb2b fb01 	smuad	fp, fp, r1
 8009d46:	4937      	ldr	r1, [pc, #220]	; (8009e24 <D80_GENERIC+0x28c>)
 8009d48:	fb28 b801 	smlad	r8, r8, r1, fp
 8009d4c:	4d36      	ldr	r5, [pc, #216]	; (8009e28 <D80_GENERIC+0x290>)
 8009d4e:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8009d52:	4d36      	ldr	r5, [pc, #216]	; (8009e2c <D80_GENERIC+0x294>)
 8009d54:	fb27 c705 	smlad	r7, r7, r5, ip
 8009d58:	4d35      	ldr	r5, [pc, #212]	; (8009e30 <D80_GENERIC+0x298>)
 8009d5a:	fb2e 7105 	smlad	r1, lr, r5, r7
 8009d5e:	9102      	str	r1, [sp, #8]
 8009d60:	9908      	ldr	r1, [sp, #32]
 8009d62:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8009d66:	b181      	cbz	r1, 8009d8a <D80_GENERIC+0x1f2>
 8009d68:	9c04      	ldr	r4, [sp, #16]
 8009d6a:	9d05      	ldr	r5, [sp, #20]
 8009d6c:	9305      	str	r3, [sp, #20]
 8009d6e:	441c      	add	r4, r3
 8009d70:	1b64      	subs	r4, r4, r5
 8009d72:	17e7      	asrs	r7, r4, #31
 8009d74:	fba4 4501 	umull	r4, r5, r4, r1
 8009d78:	fb01 5507 	mla	r5, r1, r7, r5
 8009d7c:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009d80:	f145 0500 	adc.w	r5, r5, #0
 8009d84:	0069      	lsls	r1, r5, #1
 8009d86:	9104      	str	r1, [sp, #16]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	9e00      	ldr	r6, [sp, #0]
 8009d8c:	9f06      	ldr	r7, [sp, #24]
 8009d8e:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8009d90:	025b      	lsls	r3, r3, #9
 8009d92:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009d96:	2500      	movs	r5, #0
 8009d98:	fb02 f101 	mul.w	r1, r2, r1
 8009d9c:	fbc7 4503 	smlal	r4, r5, r7, r3
 8009da0:	9c07      	ldr	r4, [sp, #28]
 8009da2:	10ab      	asrs	r3, r5, #2
 8009da4:	f303 030f 	ssat	r3, #16, r3
 8009da8:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8009dac:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8009dae:	3201      	adds	r2, #1
 8009db0:	4293      	cmp	r3, r2
 8009db2:	dd13      	ble.n	8009ddc <D80_GENERIC+0x244>
 8009db4:	9b00      	ldr	r3, [sp, #0]
 8009db6:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8009dba:	f1bc 0f01 	cmp.w	ip, #1
 8009dbe:	f47f af0b 	bne.w	8009bd8 <D80_GENERIC+0x40>
 8009dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc4:	6884      	ldr	r4, [r0, #8]
 8009dc6:	069b      	lsls	r3, r3, #26
 8009dc8:	e890 0082 	ldmia.w	r0, {r1, r7}
 8009dcc:	f100 000a 	add.w	r0, r0, #10
 8009dd0:	f57f af3a 	bpl.w	8009c48 <D80_GENERIC+0xb0>
 8009dd4:	ba49      	rev16	r1, r1
 8009dd6:	ba7f      	rev16	r7, r7
 8009dd8:	ba64      	rev16	r4, r4
 8009dda:	e735      	b.n	8009c48 <D80_GENERIC+0xb0>
 8009ddc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009de0:	4632      	mov	r2, r6
 8009de2:	9b02      	ldr	r3, [sp, #8]
 8009de4:	6093      	str	r3, [r2, #8]
 8009de6:	9b01      	ldr	r3, [sp, #4]
 8009de8:	60d3      	str	r3, [r2, #12]
 8009dea:	9b04      	ldr	r3, [sp, #16]
 8009dec:	6113      	str	r3, [r2, #16]
 8009dee:	9b05      	ldr	r3, [sp, #20]
 8009df0:	6153      	str	r3, [r2, #20]
 8009df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df4:	f8c2 b01c 	str.w	fp, [r2, #28]
 8009df8:	2000      	movs	r0, #0
 8009dfa:	6193      	str	r3, [r2, #24]
 8009dfc:	b00b      	add	sp, #44	; 0x2c
 8009dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e02:	bf00      	nop
 8009e04:	002d0024 	.word	0x002d0024
 8009e08:	001c0015 	.word	0x001c0015
 8009e0c:	000f000a 	.word	0x000f000a
 8009e10:	00060003 	.word	0x00060003
 8009e14:	0037003f 	.word	0x0037003f
 8009e18:	00450049 	.word	0x00450049
 8009e1c:	00490045 	.word	0x00490045
 8009e20:	003f0037 	.word	0x003f0037
 8009e24:	00030006 	.word	0x00030006
 8009e28:	000a000f 	.word	0x000a000f
 8009e2c:	0015001c 	.word	0x0015001c
 8009e30:	0024002d 	.word	0x0024002d
 8009e34:	20000000 	.word	0x20000000

08009e38 <D128_GENERIC>:
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	b093      	sub	sp, #76	; 0x4c
 8009e3e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009e40:	9005      	str	r0, [sp, #20]
 8009e42:	4610      	mov	r0, r2
 8009e44:	9201      	str	r2, [sp, #4]
 8009e46:	6912      	ldr	r2, [r2, #16]
 8009e48:	920c      	str	r2, [sp, #48]	; 0x30
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	6940      	ldr	r0, [r0, #20]
 8009e4e:	900d      	str	r0, [sp, #52]	; 0x34
 8009e50:	4610      	mov	r0, r2
 8009e52:	4614      	mov	r4, r2
 8009e54:	6992      	ldr	r2, [r2, #24]
 8009e56:	9211      	str	r2, [sp, #68]	; 0x44
 8009e58:	69c2      	ldr	r2, [r0, #28]
 8009e5a:	9202      	str	r2, [sp, #8]
 8009e5c:	68e2      	ldr	r2, [r4, #12]
 8009e5e:	6880      	ldr	r0, [r0, #8]
 8009e60:	9203      	str	r2, [sp, #12]
 8009e62:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009e64:	9004      	str	r0, [sp, #16]
 8009e66:	920e      	str	r2, [sp, #56]	; 0x38
 8009e68:	910f      	str	r1, [sp, #60]	; 0x3c
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f000 819b 	beq.w	800a1a6 <D128_GENERIC+0x36e>
 8009e70:	6a23      	ldr	r3, [r4, #32]
 8009e72:	9310      	str	r3, [sp, #64]	; 0x40
 8009e74:	2300      	movs	r3, #0
 8009e76:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800a220 <D128_GENERIC+0x3e8>
 8009e7a:	9306      	str	r3, [sp, #24]
 8009e7c:	e17a      	b.n	800a174 <D128_GENERIC+0x33c>
 8009e7e:	b2d2      	uxtb	r2, r2
 8009e80:	9d05      	ldr	r5, [sp, #20]
 8009e82:	b214      	sxth	r4, r2
 8009e84:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8009e88:	4250      	negs	r0, r2
 8009e8a:	eb05 010a 	add.w	r1, r5, sl
 8009e8e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e92:	eb01 0800 	add.w	r8, r1, r0
 8009e96:	eb0b 0c04 	add.w	ip, fp, r4
 8009e9a:	eb08 070c 	add.w	r7, r8, ip
 8009e9e:	183b      	adds	r3, r7, r0
 8009ea0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8009ea4:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8009ea8:	eb0e 0604 	add.w	r6, lr, r4
 8009eac:	9307      	str	r3, [sp, #28]
 8009eae:	1833      	adds	r3, r6, r0
 8009eb0:	9305      	str	r3, [sp, #20]
 8009eb2:	462b      	mov	r3, r5
 8009eb4:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8009eb8:	f8cd a020 	str.w	sl, [sp, #32]
 8009ebc:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8009ec0:	f813 c002 	ldrb.w	ip, [r3, r2]
 8009ec4:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8009ec8:	5c3a      	ldrb	r2, [r7, r0]
 8009eca:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8009ece:	781f      	ldrb	r7, [r3, #0]
 8009ed0:	9b07      	ldr	r3, [sp, #28]
 8009ed2:	9d05      	ldr	r5, [sp, #20]
 8009ed4:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8009ed8:	5c09      	ldrb	r1, [r1, r0]
 8009eda:	9709      	str	r7, [sp, #36]	; 0x24
 8009edc:	9307      	str	r3, [sp, #28]
 8009ede:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8009ee2:	5c33      	ldrb	r3, [r6, r0]
 8009ee4:	0412      	lsls	r2, r2, #16
 8009ee6:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8009eea:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8009eee:	9d08      	ldr	r5, [sp, #32]
 8009ef0:	eb06 0a04 	add.w	sl, r6, r4
 8009ef4:	0409      	lsls	r1, r1, #16
 8009ef6:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8009efa:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8009efe:	5d36      	ldrb	r6, [r6, r4]
 8009f00:	9c05      	ldr	r4, [sp, #20]
 8009f02:	042d      	lsls	r5, r5, #16
 8009f04:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8009f08:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8009f0c:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8009f10:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8009f14:	eb0a 0c00 	add.w	ip, sl, r0
 8009f18:	041b      	lsls	r3, r3, #16
 8009f1a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8009f1e:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8009f22:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8009f26:	9d07      	ldr	r5, [sp, #28]
 8009f28:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8009f2c:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8009f30:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009f32:	4458      	add	r0, fp
 8009f34:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8009f38:	9005      	str	r0, [sp, #20]
 8009f3a:	4439      	add	r1, r7
 8009f3c:	442a      	add	r2, r5
 8009f3e:	44b2      	add	sl, r6
 8009f40:	1918      	adds	r0, r3, r4
 8009f42:	b2cb      	uxtb	r3, r1
 8009f44:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8009f48:	9e02      	ldr	r6, [sp, #8]
 8009f4a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009f4e:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8009f52:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8009f56:	441e      	add	r6, r3
 8009f58:	0e09      	lsrs	r1, r1, #24
 8009f5a:	4633      	mov	r3, r6
 8009f5c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009f60:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8009f64:	b2d4      	uxtb	r4, r2
 8009f66:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009f6a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009f6e:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8009f72:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009f76:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009f7a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009f7e:	0e12      	lsrs	r2, r2, #24
 8009f80:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8009f84:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8009f88:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009f8c:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8009f90:	9702      	str	r7, [sp, #8]
 8009f92:	b2c2      	uxtb	r2, r0
 8009f94:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8009f98:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8009f9c:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8009fa0:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8009fa4:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8009fa8:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8009fac:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8009fb0:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8009fb4:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8009fb8:	0e00      	lsrs	r0, r0, #24
 8009fba:	fa5f f68a 	uxtb.w	r6, sl
 8009fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc4:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8009fc8:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8009fcc:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8009fd0:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8009fd4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009fd8:	950a      	str	r5, [sp, #40]	; 0x28
 8009fda:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8009fde:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8009fe2:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8009fe6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009fea:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8009fee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009ff2:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ff4:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8009ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ffa:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8009ffe:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a002:	9307      	str	r3, [sp, #28]
 800a004:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800a008:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800a00c:	9b02      	ldr	r3, [sp, #8]
 800a00e:	f8cd c008 	str.w	ip, [sp, #8]
 800a012:	4694      	mov	ip, r2
 800a014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a016:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800a01a:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800a01e:	9a02      	ldr	r2, [sp, #8]
 800a020:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a024:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800a028:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a02c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a02e:	f8cd a020 	str.w	sl, [sp, #32]
 800a032:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a036:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800a03a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a03e:	9b07      	ldr	r3, [sp, #28]
 800a040:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a044:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800a048:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800a04c:	9a08      	ldr	r2, [sp, #32]
 800a04e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a056:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a05a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a05e:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800a062:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800a066:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a06a:	0a96      	lsrs	r6, r2, #10
 800a06c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a070:	9602      	str	r6, [sp, #8]
 800a072:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800a076:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800a07a:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800a07e:	4e53      	ldr	r6, [pc, #332]	; (800a1cc <D128_GENERIC+0x394>)
 800a080:	9f03      	ldr	r7, [sp, #12]
 800a082:	fb2c 7606 	smlad	r6, ip, r6, r7
 800a086:	4f52      	ldr	r7, [pc, #328]	; (800a1d0 <D128_GENERIC+0x398>)
 800a088:	fb2a 6607 	smlad	r6, sl, r7, r6
 800a08c:	4f51      	ldr	r7, [pc, #324]	; (800a1d4 <D128_GENERIC+0x39c>)
 800a08e:	fb21 6607 	smlad	r6, r1, r7, r6
 800a092:	4f51      	ldr	r7, [pc, #324]	; (800a1d8 <D128_GENERIC+0x3a0>)
 800a094:	fb24 6607 	smlad	r6, r4, r7, r6
 800a098:	4f50      	ldr	r7, [pc, #320]	; (800a1dc <D128_GENERIC+0x3a4>)
 800a09a:	fb28 6607 	smlad	r6, r8, r7, r6
 800a09e:	4f50      	ldr	r7, [pc, #320]	; (800a1e0 <D128_GENERIC+0x3a8>)
 800a0a0:	fb20 6607 	smlad	r6, r0, r7, r6
 800a0a4:	4f4f      	ldr	r7, [pc, #316]	; (800a1e4 <D128_GENERIC+0x3ac>)
 800a0a6:	fb23 6607 	smlad	r6, r3, r7, r6
 800a0aa:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800a0ae:	fb25 6607 	smlad	r6, r5, r7, r6
 800a0b2:	4f4d      	ldr	r7, [pc, #308]	; (800a1e8 <D128_GENERIC+0x3b0>)
 800a0b4:	9a04      	ldr	r2, [sp, #16]
 800a0b6:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800a0ba:	4a4c      	ldr	r2, [pc, #304]	; (800a1ec <D128_GENERIC+0x3b4>)
 800a0bc:	fb2a ee02 	smlad	lr, sl, r2, lr
 800a0c0:	4f4b      	ldr	r7, [pc, #300]	; (800a1f0 <D128_GENERIC+0x3b8>)
 800a0c2:	fb21 ee07 	smlad	lr, r1, r7, lr
 800a0c6:	4f4b      	ldr	r7, [pc, #300]	; (800a1f4 <D128_GENERIC+0x3bc>)
 800a0c8:	fb24 ee07 	smlad	lr, r4, r7, lr
 800a0cc:	4f4a      	ldr	r7, [pc, #296]	; (800a1f8 <D128_GENERIC+0x3c0>)
 800a0ce:	fb28 ee07 	smlad	lr, r8, r7, lr
 800a0d2:	4f4a      	ldr	r7, [pc, #296]	; (800a1fc <D128_GENERIC+0x3c4>)
 800a0d4:	fb20 ee07 	smlad	lr, r0, r7, lr
 800a0d8:	4f49      	ldr	r7, [pc, #292]	; (800a200 <D128_GENERIC+0x3c8>)
 800a0da:	fb23 e707 	smlad	r7, r3, r7, lr
 800a0de:	f8df e144 	ldr.w	lr, [pc, #324]	; 800a224 <D128_GENERIC+0x3ec>
 800a0e2:	fb25 720e 	smlad	r2, r5, lr, r7
 800a0e6:	f04f 0b01 	mov.w	fp, #1
 800a0ea:	9203      	str	r2, [sp, #12]
 800a0ec:	fb2c fb0b 	smuad	fp, ip, fp
 800a0f0:	4f44      	ldr	r7, [pc, #272]	; (800a204 <D128_GENERIC+0x3cc>)
 800a0f2:	fb2a ba07 	smlad	sl, sl, r7, fp
 800a0f6:	4f44      	ldr	r7, [pc, #272]	; (800a208 <D128_GENERIC+0x3d0>)
 800a0f8:	fb21 aa07 	smlad	sl, r1, r7, sl
 800a0fc:	4f43      	ldr	r7, [pc, #268]	; (800a20c <D128_GENERIC+0x3d4>)
 800a0fe:	fb24 aa07 	smlad	sl, r4, r7, sl
 800a102:	4f43      	ldr	r7, [pc, #268]	; (800a210 <D128_GENERIC+0x3d8>)
 800a104:	fb28 a707 	smlad	r7, r8, r7, sl
 800a108:	4a42      	ldr	r2, [pc, #264]	; (800a214 <D128_GENERIC+0x3dc>)
 800a10a:	fb20 7702 	smlad	r7, r0, r2, r7
 800a10e:	4a42      	ldr	r2, [pc, #264]	; (800a218 <D128_GENERIC+0x3e0>)
 800a110:	fb23 7702 	smlad	r7, r3, r2, r7
 800a114:	4b41      	ldr	r3, [pc, #260]	; (800a21c <D128_GENERIC+0x3e4>)
 800a116:	fb25 7303 	smlad	r3, r5, r3, r7
 800a11a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a11c:	9304      	str	r3, [sp, #16]
 800a11e:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800a122:	b185      	cbz	r5, 800a146 <D128_GENERIC+0x30e>
 800a124:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a126:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a128:	960d      	str	r6, [sp, #52]	; 0x34
 800a12a:	4432      	add	r2, r6
 800a12c:	1a52      	subs	r2, r2, r1
 800a12e:	17d1      	asrs	r1, r2, #31
 800a130:	fba2 2305 	umull	r2, r3, r2, r5
 800a134:	fb05 3301 	mla	r3, r5, r1, r3
 800a138:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a13c:	f143 0300 	adc.w	r3, r3, #0
 800a140:	005b      	lsls	r3, r3, #1
 800a142:	930c      	str	r3, [sp, #48]	; 0x30
 800a144:	461e      	mov	r6, r3
 800a146:	9801      	ldr	r0, [sp, #4]
 800a148:	9c06      	ldr	r4, [sp, #24]
 800a14a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800a14c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a14e:	01f6      	lsls	r6, r6, #7
 800a150:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a154:	2300      	movs	r3, #0
 800a156:	fbc5 2306 	smlal	r2, r3, r5, r6
 800a15a:	fb04 f101 	mul.w	r1, r4, r1
 800a15e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a160:	109b      	asrs	r3, r3, #2
 800a162:	f303 030f 	ssat	r3, #16, r3
 800a166:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800a16a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800a16c:	1c62      	adds	r2, r4, #1
 800a16e:	4293      	cmp	r3, r2
 800a170:	9206      	str	r2, [sp, #24]
 800a172:	dd18      	ble.n	800a1a6 <D128_GENERIC+0x36e>
 800a174:	9b01      	ldr	r3, [sp, #4]
 800a176:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a178:	2a01      	cmp	r2, #1
 800a17a:	f47f ae80 	bne.w	8009e7e <D128_GENERIC+0x46>
 800a17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a180:	9d05      	ldr	r5, [sp, #20]
 800a182:	069b      	lsls	r3, r3, #26
 800a184:	6829      	ldr	r1, [r5, #0]
 800a186:	686a      	ldr	r2, [r5, #4]
 800a188:	68a8      	ldr	r0, [r5, #8]
 800a18a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a18e:	f105 0410 	add.w	r4, r5, #16
 800a192:	d506      	bpl.n	800a1a2 <D128_GENERIC+0x36a>
 800a194:	ba49      	rev16	r1, r1
 800a196:	ba52      	rev16	r2, r2
 800a198:	ba40      	rev16	r0, r0
 800a19a:	fa9a fa9a 	rev16.w	sl, sl
 800a19e:	9405      	str	r4, [sp, #20]
 800a1a0:	e6cf      	b.n	8009f42 <D128_GENERIC+0x10a>
 800a1a2:	9405      	str	r4, [sp, #20]
 800a1a4:	e6cd      	b.n	8009f42 <D128_GENERIC+0x10a>
 800a1a6:	9a01      	ldr	r2, [sp, #4]
 800a1a8:	9904      	ldr	r1, [sp, #16]
 800a1aa:	6091      	str	r1, [r2, #8]
 800a1ac:	9903      	ldr	r1, [sp, #12]
 800a1ae:	60d1      	str	r1, [r2, #12]
 800a1b0:	9b02      	ldr	r3, [sp, #8]
 800a1b2:	61d3      	str	r3, [r2, #28]
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1ba:	610a      	str	r2, [r1, #16]
 800a1bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a1be:	6159      	str	r1, [r3, #20]
 800a1c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a1c2:	6199      	str	r1, [r3, #24]
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	b013      	add	sp, #76	; 0x4c
 800a1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1cc:	00780069 	.word	0x00780069
 800a1d0:	005b004e 	.word	0x005b004e
 800a1d4:	00420037 	.word	0x00420037
 800a1d8:	002d0024 	.word	0x002d0024
 800a1dc:	001c0015 	.word	0x001c0015
 800a1e0:	000f000a 	.word	0x000f000a
 800a1e4:	00060003 	.word	0x00060003
 800a1e8:	00880096 	.word	0x00880096
 800a1ec:	00a200ac 	.word	0x00a200ac
 800a1f0:	00b400ba 	.word	0x00b400ba
 800a1f4:	00be00c0 	.word	0x00be00c0
 800a1f8:	00c000be 	.word	0x00c000be
 800a1fc:	00ba00b4 	.word	0x00ba00b4
 800a200:	00ac00a2 	.word	0x00ac00a2
 800a204:	00030006 	.word	0x00030006
 800a208:	000a000f 	.word	0x000a000f
 800a20c:	0015001c 	.word	0x0015001c
 800a210:	0024002d 	.word	0x0024002d
 800a214:	00370042 	.word	0x00370042
 800a218:	004e005b 	.word	0x004e005b
 800a21c:	00690078 	.word	0x00690078
 800a220:	20000000 	.word	0x20000000
 800a224:	00960088 	.word	0x00960088

0800a228 <D16_1CH_HTONS_VOL_HP>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	4691      	mov	r9, r2
 800a22e:	b083      	sub	sp, #12
 800a230:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a232:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800a236:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	4680      	mov	r8, r0
 800a23e:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800a242:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a246:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a24a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800a24e:	9401      	str	r4, [sp, #4]
 800a250:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800a254:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800a258:	2a00      	cmp	r2, #0
 800a25a:	d04e      	beq.n	800a2fa <D16_1CH_HTONS_VOL_HP+0xd2>
 800a25c:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800a308 <D16_1CH_HTONS_VOL_HP+0xe0>
 800a260:	1e8c      	subs	r4, r1, #2
 800a262:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800a266:	f858 2b02 	ldr.w	r2, [r8], #2
 800a26a:	ba52      	rev16	r2, r2
 800a26c:	b2d6      	uxtb	r6, r2
 800a26e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a272:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800a276:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800a27a:	4413      	add	r3, r2
 800a27c:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800a280:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800a284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a288:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a28c:	0a93      	lsrs	r3, r2, #10
 800a28e:	4a1c      	ldr	r2, [pc, #112]	; (800a300 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800a290:	fb21 5202 	smlad	r2, r1, r2, r5
 800a294:	4d1b      	ldr	r5, [pc, #108]	; (800a304 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800a296:	fb21 f505 	smuad	r5, r1, r5
 800a29a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800a29e:	4410      	add	r0, r2
 800a2a0:	1bc0      	subs	r0, r0, r7
 800a2a2:	17c7      	asrs	r7, r0, #31
 800a2a4:	fba0 010e 	umull	r0, r1, r0, lr
 800a2a8:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a2ac:	fb0e 1107 	mla	r1, lr, r7, r1
 800a2b0:	f141 0100 	adc.w	r1, r1, #0
 800a2b4:	0448      	lsls	r0, r1, #17
 800a2b6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a2ba:	2700      	movs	r7, #0
 800a2bc:	fbc0 670a 	smlal	r6, r7, r0, sl
 800a2c0:	45d8      	cmp	r8, fp
 800a2c2:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800a2c6:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800a2ca:	4617      	mov	r7, r2
 800a2cc:	f301 010f 	ssat	r1, #16, r1
 800a2d0:	f824 1f02 	strh.w	r1, [r4, #2]!
 800a2d4:	d1c7      	bne.n	800a266 <D16_1CH_HTONS_VOL_HP+0x3e>
 800a2d6:	9901      	ldr	r1, [sp, #4]
 800a2d8:	f8c9 301c 	str.w	r3, [r9, #28]
 800a2dc:	9b00      	ldr	r3, [sp, #0]
 800a2de:	f8c9 0010 	str.w	r0, [r9, #16]
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	f8c9 5008 	str.w	r5, [r9, #8]
 800a2e8:	f8c9 100c 	str.w	r1, [r9, #12]
 800a2ec:	f8c9 2014 	str.w	r2, [r9, #20]
 800a2f0:	f8c9 3018 	str.w	r3, [r9, #24]
 800a2f4:	b003      	add	sp, #12
 800a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fa:	463a      	mov	r2, r7
 800a2fc:	4621      	mov	r1, r4
 800a2fe:	e7eb      	b.n	800a2d8 <D16_1CH_HTONS_VOL_HP+0xb0>
 800a300:	00030001 	.word	0x00030001
 800a304:	00010003 	.word	0x00010003
 800a308:	20000000 	.word	0x20000000

0800a30c <D24_1CH_HTONS_VOL_HP>:
 800a30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a310:	b089      	sub	sp, #36	; 0x24
 800a312:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a314:	6996      	ldr	r6, [r2, #24]
 800a316:	9304      	str	r3, [sp, #16]
 800a318:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800a31a:	9207      	str	r2, [sp, #28]
 800a31c:	6915      	ldr	r5, [r2, #16]
 800a31e:	6954      	ldr	r4, [r2, #20]
 800a320:	9606      	str	r6, [sp, #24]
 800a322:	6893      	ldr	r3, [r2, #8]
 800a324:	69d6      	ldr	r6, [r2, #28]
 800a326:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800a32a:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800a32e:	9a04      	ldr	r2, [sp, #16]
 800a330:	9705      	str	r7, [sp, #20]
 800a332:	2a00      	cmp	r2, #0
 800a334:	d07e      	beq.n	800a434 <D24_1CH_HTONS_VOL_HP+0x128>
 800a336:	f1a1 0b02 	sub.w	fp, r1, #2
 800a33a:	2700      	movs	r7, #0
 800a33c:	46a8      	mov	r8, r5
 800a33e:	f8cd b004 	str.w	fp, [sp, #4]
 800a342:	4655      	mov	r5, sl
 800a344:	46e3      	mov	fp, ip
 800a346:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800a440 <D24_1CH_HTONS_VOL_HP+0x134>
 800a34a:	46ba      	mov	sl, r7
 800a34c:	469c      	mov	ip, r3
 800a34e:	e055      	b.n	800a3fc <D24_1CH_HTONS_VOL_HP+0xf0>
 800a350:	7802      	ldrb	r2, [r0, #0]
 800a352:	78c3      	ldrb	r3, [r0, #3]
 800a354:	7841      	ldrb	r1, [r0, #1]
 800a356:	0212      	lsls	r2, r2, #8
 800a358:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800a35c:	440b      	add	r3, r1
 800a35e:	3002      	adds	r0, #2
 800a360:	b2d9      	uxtb	r1, r3
 800a362:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a366:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800a36a:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800a36e:	0c1b      	lsrs	r3, r3, #16
 800a370:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800a374:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a378:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800a37c:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800a380:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800a384:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800a388:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a38c:	4a2a      	ldr	r2, [pc, #168]	; (800a438 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800a38e:	fb23 b102 	smlad	r1, r3, r2, fp
 800a392:	4a2a      	ldr	r2, [pc, #168]	; (800a43c <D24_1CH_HTONS_VOL_HP+0x130>)
 800a394:	fb23 cb02 	smlad	fp, r3, r2, ip
 800a398:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800a39c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800a3a0:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	fb23 f702 	smuad	r7, r3, r2
 800a3aa:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800a3ae:	eb01 0208 	add.w	r2, r1, r8
 800a3b2:	1b12      	subs	r2, r2, r4
 800a3b4:	17d4      	asrs	r4, r2, #31
 800a3b6:	fba2 2305 	umull	r2, r3, r2, r5
 800a3ba:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a3be:	fb05 3304 	mla	r3, r5, r4, r3
 800a3c2:	f143 0300 	adc.w	r3, r3, #0
 800a3c6:	9c05      	ldr	r4, [sp, #20]
 800a3c8:	03da      	lsls	r2, r3, #15
 800a3ca:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a3ce:	f04f 0900 	mov.w	r9, #0
 800a3d2:	fbc4 8902 	smlal	r8, r9, r4, r2
 800a3d6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a3da:	9a01      	ldr	r2, [sp, #4]
 800a3dc:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	109b      	asrs	r3, r3, #2
 800a3e4:	f303 030f 	ssat	r3, #16, r3
 800a3e8:	f822 3f02 	strh.w	r3, [r2, #2]!
 800a3ec:	9b04      	ldr	r3, [sp, #16]
 800a3ee:	9201      	str	r2, [sp, #4]
 800a3f0:	f10a 0a01 	add.w	sl, sl, #1
 800a3f4:	459a      	cmp	sl, r3
 800a3f6:	44bc      	add	ip, r7
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	d00b      	beq.n	800a414 <D24_1CH_HTONS_VOL_HP+0x108>
 800a3fc:	f01a 0f01 	tst.w	sl, #1
 800a400:	d0a6      	beq.n	800a350 <D24_1CH_HTONS_VOL_HP+0x44>
 800a402:	78c2      	ldrb	r2, [r0, #3]
 800a404:	7883      	ldrb	r3, [r0, #2]
 800a406:	f810 1b04 	ldrb.w	r1, [r0], #4
 800a40a:	0212      	lsls	r2, r2, #8
 800a40c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800a410:	440b      	add	r3, r1
 800a412:	e7a5      	b.n	800a360 <D24_1CH_HTONS_VOL_HP+0x54>
 800a414:	4663      	mov	r3, ip
 800a416:	4645      	mov	r5, r8
 800a418:	46dc      	mov	ip, fp
 800a41a:	9807      	ldr	r0, [sp, #28]
 800a41c:	6141      	str	r1, [r0, #20]
 800a41e:	9906      	ldr	r1, [sp, #24]
 800a420:	6083      	str	r3, [r0, #8]
 800a422:	f8c0 c00c 	str.w	ip, [r0, #12]
 800a426:	61c6      	str	r6, [r0, #28]
 800a428:	6105      	str	r5, [r0, #16]
 800a42a:	6181      	str	r1, [r0, #24]
 800a42c:	2000      	movs	r0, #0
 800a42e:	b009      	add	sp, #36	; 0x24
 800a430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a434:	4621      	mov	r1, r4
 800a436:	e7f0      	b.n	800a41a <D24_1CH_HTONS_VOL_HP+0x10e>
 800a438:	00030001 	.word	0x00030001
 800a43c:	00060007 	.word	0x00060007
 800a440:	20000000 	.word	0x20000000

0800a444 <D32_1CH_HTONS_VOL_HP>:
 800a444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a448:	4692      	mov	sl, r2
 800a44a:	b087      	sub	sp, #28
 800a44c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a44e:	f8da 3018 	ldr.w	r3, [sl, #24]
 800a452:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800a456:	9304      	str	r3, [sp, #16]
 800a458:	f8da 4010 	ldr.w	r4, [sl, #16]
 800a45c:	f8da 8014 	ldr.w	r8, [sl, #20]
 800a460:	f8da 601c 	ldr.w	r6, [sl, #28]
 800a464:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a468:	f8da e00c 	ldr.w	lr, [sl, #12]
 800a46c:	9501      	str	r5, [sp, #4]
 800a46e:	f8da c020 	ldr.w	ip, [sl, #32]
 800a472:	2a00      	cmp	r2, #0
 800a474:	d07b      	beq.n	800a56e <D32_1CH_HTONS_VOL_HP+0x12a>
 800a476:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a47a:	4f3e      	ldr	r7, [pc, #248]	; (800a574 <D32_1CH_HTONS_VOL_HP+0x130>)
 800a47c:	f8cd c00c 	str.w	ip, [sp, #12]
 800a480:	9202      	str	r2, [sp, #8]
 800a482:	460d      	mov	r5, r1
 800a484:	46a1      	mov	r9, r4
 800a486:	4684      	mov	ip, r0
 800a488:	f8cd a014 	str.w	sl, [sp, #20]
 800a48c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a490:	ba49      	rev16	r1, r1
 800a492:	b2c8      	uxtb	r0, r1
 800a494:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800a498:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800a49c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800a4a0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a4a4:	0e09      	lsrs	r1, r1, #24
 800a4a6:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800a4aa:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800a4ae:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a4b2:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800a4b6:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800a4ba:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800a4be:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a4c2:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800a4c6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a4ca:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a4ce:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800a4d2:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800a4d6:	4a28      	ldr	r2, [pc, #160]	; (800a578 <D32_1CH_HTONS_VOL_HP+0x134>)
 800a4d8:	fb20 e202 	smlad	r2, r0, r2, lr
 800a4dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a4e0:	fb2a 2101 	smlad	r1, sl, r1, r2
 800a4e4:	4a25      	ldr	r2, [pc, #148]	; (800a57c <D32_1CH_HTONS_VOL_HP+0x138>)
 800a4e6:	fb20 3302 	smlad	r3, r0, r2, r3
 800a4ea:	4a25      	ldr	r2, [pc, #148]	; (800a580 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800a4ec:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	fb20 f003 	smuad	r0, r0, r3
 800a4f6:	4b23      	ldr	r3, [pc, #140]	; (800a584 <D32_1CH_HTONS_VOL_HP+0x140>)
 800a4f8:	fb2a 0303 	smlad	r3, sl, r3, r0
 800a4fc:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800a500:	9c03      	ldr	r4, [sp, #12]
 800a502:	eb02 0009 	add.w	r0, r2, r9
 800a506:	eba0 0008 	sub.w	r0, r0, r8
 800a50a:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800a50e:	fba0 0104 	umull	r0, r1, r0, r4
 800a512:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a516:	fb04 110b 	mla	r1, r4, fp, r1
 800a51a:	f141 0100 	adc.w	r1, r1, #0
 800a51e:	9c01      	ldr	r4, [sp, #4]
 800a520:	0388      	lsls	r0, r1, #14
 800a522:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a526:	f04f 0900 	mov.w	r9, #0
 800a52a:	fbc0 8904 	smlal	r8, r9, r0, r4
 800a52e:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800a532:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800a536:	f300 000f 	ssat	r0, #16, r0
 800a53a:	9902      	ldr	r1, [sp, #8]
 800a53c:	f825 0b02 	strh.w	r0, [r5], #2
 800a540:	428d      	cmp	r5, r1
 800a542:	4690      	mov	r8, r2
 800a544:	d1a2      	bne.n	800a48c <D32_1CH_HTONS_VOL_HP+0x48>
 800a546:	f8dd a014 	ldr.w	sl, [sp, #20]
 800a54a:	464c      	mov	r4, r9
 800a54c:	f8ca 3008 	str.w	r3, [sl, #8]
 800a550:	9b04      	ldr	r3, [sp, #16]
 800a552:	f8ca e00c 	str.w	lr, [sl, #12]
 800a556:	2000      	movs	r0, #0
 800a558:	f8ca 601c 	str.w	r6, [sl, #28]
 800a55c:	f8ca 4010 	str.w	r4, [sl, #16]
 800a560:	f8ca 2014 	str.w	r2, [sl, #20]
 800a564:	f8ca 3018 	str.w	r3, [sl, #24]
 800a568:	b007      	add	sp, #28
 800a56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56e:	4642      	mov	r2, r8
 800a570:	e7ec      	b.n	800a54c <D32_1CH_HTONS_VOL_HP+0x108>
 800a572:	bf00      	nop
 800a574:	20000000 	.word	0x20000000
 800a578:	00060003 	.word	0x00060003
 800a57c:	000a000c 	.word	0x000a000c
 800a580:	000c000a 	.word	0x000c000a
 800a584:	00030006 	.word	0x00030006

0800a588 <D48_1CH_HTONS_VOL_HP>:
 800a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58c:	4613      	mov	r3, r2
 800a58e:	461c      	mov	r4, r3
 800a590:	b087      	sub	sp, #28
 800a592:	4625      	mov	r5, r4
 800a594:	4626      	mov	r6, r4
 800a596:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800a598:	9205      	str	r2, [sp, #20]
 800a59a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a59c:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800a5a0:	9501      	str	r5, [sp, #4]
 800a5a2:	4680      	mov	r8, r0
 800a5a4:	6a35      	ldr	r5, [r6, #32]
 800a5a6:	6918      	ldr	r0, [r3, #16]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	9304      	str	r3, [sp, #16]
 800a5ac:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800a5b0:	68a3      	ldr	r3, [r4, #8]
 800a5b2:	9502      	str	r5, [sp, #8]
 800a5b4:	68e4      	ldr	r4, [r4, #12]
 800a5b6:	2a00      	cmp	r2, #0
 800a5b8:	f000 808c 	beq.w	800a6d4 <D48_1CH_HTONS_VOL_HP+0x14c>
 800a5bc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a5c0:	4d45      	ldr	r5, [pc, #276]	; (800a6d8 <D48_1CH_HTONS_VOL_HP+0x150>)
 800a5c2:	9203      	str	r2, [sp, #12]
 800a5c4:	468c      	mov	ip, r1
 800a5c6:	e898 0044 	ldmia.w	r8, {r2, r6}
 800a5ca:	f108 0806 	add.w	r8, r8, #6
 800a5ce:	ba52      	rev16	r2, r2
 800a5d0:	ba76      	rev16	r6, r6
 800a5d2:	b2d7      	uxtb	r7, r2
 800a5d4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a5d8:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800a5dc:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a5e0:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800a5e4:	0e12      	lsrs	r2, r2, #24
 800a5e6:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800a5ea:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800a5ee:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a5f2:	fa5f fb86 	uxtb.w	fp, r6
 800a5f6:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a5fa:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800a5fe:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800a602:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800a606:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800a60a:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a60e:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800a612:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800a616:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a61a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a61e:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800a622:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a626:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a62a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a62e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800a632:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800a636:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800a63a:	4a28      	ldr	r2, [pc, #160]	; (800a6dc <D48_1CH_HTONS_VOL_HP+0x154>)
 800a63c:	fb2a 4202 	smlad	r2, sl, r2, r4
 800a640:	4927      	ldr	r1, [pc, #156]	; (800a6e0 <D48_1CH_HTONS_VOL_HP+0x158>)
 800a642:	fb27 2201 	smlad	r2, r7, r1, r2
 800a646:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a64a:	fb26 2201 	smlad	r2, r6, r1, r2
 800a64e:	4925      	ldr	r1, [pc, #148]	; (800a6e4 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800a650:	fb2a 3401 	smlad	r4, sl, r1, r3
 800a654:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800a658:	fb27 4403 	smlad	r4, r7, r3, r4
 800a65c:	4b22      	ldr	r3, [pc, #136]	; (800a6e8 <D48_1CH_HTONS_VOL_HP+0x160>)
 800a65e:	fb26 4403 	smlad	r4, r6, r3, r4
 800a662:	2101      	movs	r1, #1
 800a664:	fb2a fa01 	smuad	sl, sl, r1
 800a668:	4b20      	ldr	r3, [pc, #128]	; (800a6ec <D48_1CH_HTONS_VOL_HP+0x164>)
 800a66a:	fb27 a703 	smlad	r7, r7, r3, sl
 800a66e:	4b20      	ldr	r3, [pc, #128]	; (800a6f0 <D48_1CH_HTONS_VOL_HP+0x168>)
 800a670:	fb26 7303 	smlad	r3, r6, r3, r7
 800a674:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800a678:	9e02      	ldr	r6, [sp, #8]
 800a67a:	9f01      	ldr	r7, [sp, #4]
 800a67c:	4410      	add	r0, r2
 800a67e:	eba0 0009 	sub.w	r0, r0, r9
 800a682:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800a686:	fba0 0106 	umull	r0, r1, r0, r6
 800a68a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a68e:	fb06 110a 	mla	r1, r6, sl, r1
 800a692:	f141 0100 	adc.w	r1, r1, #0
 800a696:	0308      	lsls	r0, r1, #12
 800a698:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800a69c:	f04f 0a00 	mov.w	sl, #0
 800a6a0:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800a6a4:	4657      	mov	r7, sl
 800a6a6:	10b8      	asrs	r0, r7, #2
 800a6a8:	f300 000f 	ssat	r0, #16, r0
 800a6ac:	f82c 0b02 	strh.w	r0, [ip], #2
 800a6b0:	0048      	lsls	r0, r1, #1
 800a6b2:	9903      	ldr	r1, [sp, #12]
 800a6b4:	458c      	cmp	ip, r1
 800a6b6:	4691      	mov	r9, r2
 800a6b8:	d185      	bne.n	800a5c6 <D48_1CH_HTONS_VOL_HP+0x3e>
 800a6ba:	9d05      	ldr	r5, [sp, #20]
 800a6bc:	616a      	str	r2, [r5, #20]
 800a6be:	9a04      	ldr	r2, [sp, #16]
 800a6c0:	6128      	str	r0, [r5, #16]
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	60ab      	str	r3, [r5, #8]
 800a6c6:	60ec      	str	r4, [r5, #12]
 800a6c8:	f8c5 e01c 	str.w	lr, [r5, #28]
 800a6cc:	61aa      	str	r2, [r5, #24]
 800a6ce:	b007      	add	sp, #28
 800a6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d4:	464a      	mov	r2, r9
 800a6d6:	e7f0      	b.n	800a6ba <D48_1CH_HTONS_VOL_HP+0x132>
 800a6d8:	20000000 	.word	0x20000000
 800a6dc:	000f000a 	.word	0x000f000a
 800a6e0:	00060003 	.word	0x00060003
 800a6e4:	00150019 	.word	0x00150019
 800a6e8:	00190015 	.word	0x00190015
 800a6ec:	00030006 	.word	0x00030006
 800a6f0:	000a000f 	.word	0x000a000f

0800a6f4 <D64_1CH_HTONS_VOL_HP>:
 800a6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f8:	b089      	sub	sp, #36	; 0x24
 800a6fa:	4614      	mov	r4, r2
 800a6fc:	9207      	str	r2, [sp, #28]
 800a6fe:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a700:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800a704:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800a708:	6992      	ldr	r2, [r2, #24]
 800a70a:	9206      	str	r2, [sp, #24]
 800a70c:	68e2      	ldr	r2, [r4, #12]
 800a70e:	9201      	str	r2, [sp, #4]
 800a710:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a712:	9203      	str	r2, [sp, #12]
 800a714:	6a22      	ldr	r2, [r4, #32]
 800a716:	69e5      	ldr	r5, [r4, #28]
 800a718:	68a6      	ldr	r6, [r4, #8]
 800a71a:	9204      	str	r2, [sp, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 80b0 	beq.w	800a882 <D64_1CH_HTONS_VOL_HP+0x18e>
 800a722:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a726:	4f58      	ldr	r7, [pc, #352]	; (800a888 <D64_1CH_HTONS_VOL_HP+0x194>)
 800a728:	9305      	str	r3, [sp, #20]
 800a72a:	9102      	str	r1, [sp, #8]
 800a72c:	f850 2b08 	ldr.w	r2, [r0], #8
 800a730:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a734:	ba52      	rev16	r2, r2
 800a736:	fa93 f993 	rev16.w	r9, r3
 800a73a:	b2d4      	uxtb	r4, r2
 800a73c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800a740:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800a744:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a748:	9901      	ldr	r1, [sp, #4]
 800a74a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a74e:	0e12      	lsrs	r2, r2, #24
 800a750:	44ab      	add	fp, r5
 800a752:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a756:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800a75a:	fa5f f289 	uxtb.w	r2, r9
 800a75e:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800a762:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800a766:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800a76a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a76e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a772:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800a776:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800a77a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800a77e:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800a782:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800a786:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800a78a:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800a78e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800a792:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800a796:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a79a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a79e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a7a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7a6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a7aa:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800a7ae:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a7b2:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800a7b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a7ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800a7be:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800a7c2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a7c6:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800a7ca:	4b30      	ldr	r3, [pc, #192]	; (800a88c <D64_1CH_HTONS_VOL_HP+0x198>)
 800a7cc:	fb2b 1303 	smlad	r3, fp, r3, r1
 800a7d0:	492f      	ldr	r1, [pc, #188]	; (800a890 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800a7d2:	fb24 3301 	smlad	r3, r4, r1, r3
 800a7d6:	492f      	ldr	r1, [pc, #188]	; (800a894 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800a7d8:	fb22 3301 	smlad	r3, r2, r1, r3
 800a7dc:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a7e0:	fb2e 390a 	smlad	r9, lr, sl, r3
 800a7e4:	4b2c      	ldr	r3, [pc, #176]	; (800a898 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800a7e6:	fb2b 6603 	smlad	r6, fp, r3, r6
 800a7ea:	fb2e 6613 	smladx	r6, lr, r3, r6
 800a7ee:	4b2b      	ldr	r3, [pc, #172]	; (800a89c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800a7f0:	fb24 6603 	smlad	r6, r4, r3, r6
 800a7f4:	fb22 6313 	smladx	r3, r2, r3, r6
 800a7f8:	f04f 0a01 	mov.w	sl, #1
 800a7fc:	9301      	str	r3, [sp, #4]
 800a7fe:	fb2b fb0a 	smuad	fp, fp, sl
 800a802:	4b27      	ldr	r3, [pc, #156]	; (800a8a0 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800a804:	fb24 ba03 	smlad	sl, r4, r3, fp
 800a808:	4b26      	ldr	r3, [pc, #152]	; (800a8a4 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800a80a:	fb22 a203 	smlad	r2, r2, r3, sl
 800a80e:	4b26      	ldr	r3, [pc, #152]	; (800a8a8 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800a810:	fb2e 2603 	smlad	r6, lr, r3, r2
 800a814:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800a818:	eb0a 020c 	add.w	r2, sl, ip
 800a81c:	9c04      	ldr	r4, [sp, #16]
 800a81e:	9903      	ldr	r1, [sp, #12]
 800a820:	eba2 0208 	sub.w	r2, r2, r8
 800a824:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a828:	fba2 2304 	umull	r2, r3, r2, r4
 800a82c:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a830:	fb04 3309 	mla	r3, r4, r9, r3
 800a834:	f143 0300 	adc.w	r3, r3, #0
 800a838:	02da      	lsls	r2, r3, #11
 800a83a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a83e:	f04f 0900 	mov.w	r9, #0
 800a842:	fbc1 8902 	smlal	r8, r9, r1, r2
 800a846:	9902      	ldr	r1, [sp, #8]
 800a848:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800a84c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a850:	f302 020f 	ssat	r2, #16, r2
 800a854:	9b05      	ldr	r3, [sp, #20]
 800a856:	f821 2b02 	strh.w	r2, [r1], #2
 800a85a:	4299      	cmp	r1, r3
 800a85c:	9102      	str	r1, [sp, #8]
 800a85e:	46d0      	mov	r8, sl
 800a860:	f47f af64 	bne.w	800a72c <D64_1CH_HTONS_VOL_HP+0x38>
 800a864:	9a07      	ldr	r2, [sp, #28]
 800a866:	9901      	ldr	r1, [sp, #4]
 800a868:	60d1      	str	r1, [r2, #12]
 800a86a:	9906      	ldr	r1, [sp, #24]
 800a86c:	6096      	str	r6, [r2, #8]
 800a86e:	2000      	movs	r0, #0
 800a870:	61d5      	str	r5, [r2, #28]
 800a872:	f8c2 c010 	str.w	ip, [r2, #16]
 800a876:	f8c2 a014 	str.w	sl, [r2, #20]
 800a87a:	6191      	str	r1, [r2, #24]
 800a87c:	b009      	add	sp, #36	; 0x24
 800a87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a882:	46c2      	mov	sl, r8
 800a884:	4622      	mov	r2, r4
 800a886:	e7ee      	b.n	800a866 <D64_1CH_HTONS_VOL_HP+0x172>
 800a888:	20000000 	.word	0x20000000
 800a88c:	001c0015 	.word	0x001c0015
 800a890:	000f000a 	.word	0x000f000a
 800a894:	00060003 	.word	0x00060003
 800a898:	0024002a 	.word	0x0024002a
 800a89c:	002e0030 	.word	0x002e0030
 800a8a0:	00030006 	.word	0x00030006
 800a8a4:	000a000f 	.word	0x000a000f
 800a8a8:	0015001c 	.word	0x0015001c

0800a8ac <D80_1CH_HTONS_VOL_HP>:
 800a8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	b089      	sub	sp, #36	; 0x24
 800a8b4:	4686      	mov	lr, r0
 800a8b6:	6918      	ldr	r0, [r3, #16]
 800a8b8:	9000      	str	r0, [sp, #0]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	461c      	mov	r4, r3
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	9302      	str	r3, [sp, #8]
 800a8c2:	6983      	ldr	r3, [r0, #24]
 800a8c4:	9306      	str	r3, [sp, #24]
 800a8c6:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800a8ca:	69c3      	ldr	r3, [r0, #28]
 800a8cc:	68c0      	ldr	r0, [r0, #12]
 800a8ce:	9207      	str	r2, [sp, #28]
 800a8d0:	9001      	str	r0, [sp, #4]
 800a8d2:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a8d4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a8d6:	9003      	str	r0, [sp, #12]
 800a8d8:	6a20      	ldr	r0, [r4, #32]
 800a8da:	9004      	str	r0, [sp, #16]
 800a8dc:	2a00      	cmp	r2, #0
 800a8de:	f000 80d2 	beq.w	800aa86 <D80_1CH_HTONS_VOL_HP+0x1da>
 800a8e2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a8e6:	4869      	ldr	r0, [pc, #420]	; (800aa8c <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800a8e8:	9205      	str	r2, [sp, #20]
 800a8ea:	461c      	mov	r4, r3
 800a8ec:	f8de 5000 	ldr.w	r5, [lr]
 800a8f0:	f8de 2004 	ldr.w	r2, [lr, #4]
 800a8f4:	f8de 3008 	ldr.w	r3, [lr, #8]
 800a8f8:	f10e 0e0a 	add.w	lr, lr, #10
 800a8fc:	ba6d      	rev16	r5, r5
 800a8fe:	ba52      	rev16	r2, r2
 800a900:	fa93 fb93 	rev16.w	fp, r3
 800a904:	b2ee      	uxtb	r6, r5
 800a906:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800a90a:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800a90e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a912:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800a916:	eb04 0a07 	add.w	sl, r4, r7
 800a91a:	0e2d      	lsrs	r5, r5, #24
 800a91c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800a920:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800a924:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800a928:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800a92c:	b2d5      	uxtb	r5, r2
 800a92e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800a932:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800a936:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800a93a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a93e:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800a942:	0e12      	lsrs	r2, r2, #24
 800a944:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800a948:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800a94c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a950:	fa5f f48b 	uxtb.w	r4, fp
 800a954:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800a958:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800a95c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800a960:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800a964:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800a968:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a96c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800a970:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800a974:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a978:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a97c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a980:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a984:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a988:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a98c:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800a990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a994:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800a998:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a99c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a9a0:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800a9a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800a9a8:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800a9ac:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800a9b0:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800a9b4:	4d36      	ldr	r5, [pc, #216]	; (800aa90 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800a9b6:	9f01      	ldr	r7, [sp, #4]
 800a9b8:	fb23 7505 	smlad	r5, r3, r5, r7
 800a9bc:	4f35      	ldr	r7, [pc, #212]	; (800aa94 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800a9be:	fb29 5507 	smlad	r5, r9, r7, r5
 800a9c2:	4f35      	ldr	r7, [pc, #212]	; (800aa98 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800a9c4:	fb28 5507 	smlad	r5, r8, r7, r5
 800a9c8:	4f34      	ldr	r7, [pc, #208]	; (800aa9c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800a9ca:	fb22 5507 	smlad	r5, r2, r7, r5
 800a9ce:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a9d2:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800a9d6:	4d32      	ldr	r5, [pc, #200]	; (800aaa0 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800a9d8:	fb23 cc05 	smlad	ip, r3, r5, ip
 800a9dc:	4d31      	ldr	r5, [pc, #196]	; (800aaa4 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800a9de:	fb29 cc05 	smlad	ip, r9, r5, ip
 800a9e2:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800a9e6:	fb28 c505 	smlad	r5, r8, r5, ip
 800a9ea:	4f2f      	ldr	r7, [pc, #188]	; (800aaa8 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800a9ec:	fb22 5507 	smlad	r5, r2, r7, r5
 800a9f0:	4f2e      	ldr	r7, [pc, #184]	; (800aaac <D80_1CH_HTONS_VOL_HP+0x200>)
 800a9f2:	fb26 5507 	smlad	r5, r6, r7, r5
 800a9f6:	f04f 0a01 	mov.w	sl, #1
 800a9fa:	9501      	str	r5, [sp, #4]
 800a9fc:	fb23 fa0a 	smuad	sl, r3, sl
 800aa00:	4b2b      	ldr	r3, [pc, #172]	; (800aab0 <D80_1CH_HTONS_VOL_HP+0x204>)
 800aa02:	fb29 a903 	smlad	r9, r9, r3, sl
 800aa06:	4d2b      	ldr	r5, [pc, #172]	; (800aab4 <D80_1CH_HTONS_VOL_HP+0x208>)
 800aa08:	fb28 9805 	smlad	r8, r8, r5, r9
 800aa0c:	4d2a      	ldr	r5, [pc, #168]	; (800aab8 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800aa0e:	fb22 8205 	smlad	r2, r2, r5, r8
 800aa12:	4b2a      	ldr	r3, [pc, #168]	; (800aabc <D80_1CH_HTONS_VOL_HP+0x210>)
 800aa14:	fb26 2c03 	smlad	ip, r6, r3, r2
 800aa18:	9b00      	ldr	r3, [sp, #0]
 800aa1a:	9d04      	ldr	r5, [sp, #16]
 800aa1c:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800aa20:	4453      	add	r3, sl
 800aa22:	461a      	mov	r2, r3
 800aa24:	9b02      	ldr	r3, [sp, #8]
 800aa26:	f8cd a008 	str.w	sl, [sp, #8]
 800aa2a:	1ad2      	subs	r2, r2, r3
 800aa2c:	17d7      	asrs	r7, r2, #31
 800aa2e:	fba2 2305 	umull	r2, r3, r2, r5
 800aa32:	fb05 3307 	mla	r3, r5, r7, r3
 800aa36:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800aa3a:	f143 0300 	adc.w	r3, r3, #0
 800aa3e:	9d03      	ldr	r5, [sp, #12]
 800aa40:	029a      	lsls	r2, r3, #10
 800aa42:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aa46:	2700      	movs	r7, #0
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	fbc5 6702 	smlal	r6, r7, r5, r2
 800aa4e:	10ba      	asrs	r2, r7, #2
 800aa50:	9300      	str	r3, [sp, #0]
 800aa52:	f302 020f 	ssat	r2, #16, r2
 800aa56:	9b05      	ldr	r3, [sp, #20]
 800aa58:	f821 2b02 	strh.w	r2, [r1], #2
 800aa5c:	4299      	cmp	r1, r3
 800aa5e:	f47f af45 	bne.w	800a8ec <D80_1CH_HTONS_VOL_HP+0x40>
 800aa62:	4623      	mov	r3, r4
 800aa64:	9907      	ldr	r1, [sp, #28]
 800aa66:	9801      	ldr	r0, [sp, #4]
 800aa68:	60c8      	str	r0, [r1, #12]
 800aa6a:	9a00      	ldr	r2, [sp, #0]
 800aa6c:	f8c1 c008 	str.w	ip, [r1, #8]
 800aa70:	4608      	mov	r0, r1
 800aa72:	61cb      	str	r3, [r1, #28]
 800aa74:	610a      	str	r2, [r1, #16]
 800aa76:	f8c1 a014 	str.w	sl, [r1, #20]
 800aa7a:	9906      	ldr	r1, [sp, #24]
 800aa7c:	6181      	str	r1, [r0, #24]
 800aa7e:	2000      	movs	r0, #0
 800aa80:	b009      	add	sp, #36	; 0x24
 800aa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa86:	f8dd a008 	ldr.w	sl, [sp, #8]
 800aa8a:	e7eb      	b.n	800aa64 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800aa8c:	20000000 	.word	0x20000000
 800aa90:	002d0024 	.word	0x002d0024
 800aa94:	001c0015 	.word	0x001c0015
 800aa98:	000f000a 	.word	0x000f000a
 800aa9c:	00060003 	.word	0x00060003
 800aaa0:	0037003f 	.word	0x0037003f
 800aaa4:	00450049 	.word	0x00450049
 800aaa8:	00490045 	.word	0x00490045
 800aaac:	003f0037 	.word	0x003f0037
 800aab0:	00030006 	.word	0x00030006
 800aab4:	000a000f 	.word	0x000a000f
 800aab8:	0015001c 	.word	0x0015001c
 800aabc:	0024002d 	.word	0x0024002d

0800aac0 <D128_1CH_HTONS_VOL_HP>:
 800aac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac4:	b093      	sub	sp, #76	; 0x4c
 800aac6:	4614      	mov	r4, r2
 800aac8:	9211      	str	r2, [sp, #68]	; 0x44
 800aaca:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800aacc:	6912      	ldr	r2, [r2, #16]
 800aace:	9203      	str	r2, [sp, #12]
 800aad0:	4622      	mov	r2, r4
 800aad2:	4615      	mov	r5, r2
 800aad4:	6964      	ldr	r4, [r4, #20]
 800aad6:	9406      	str	r4, [sp, #24]
 800aad8:	4614      	mov	r4, r2
 800aada:	6992      	ldr	r2, [r2, #24]
 800aadc:	9210      	str	r2, [sp, #64]	; 0x40
 800aade:	68ea      	ldr	r2, [r5, #12]
 800aae0:	9204      	str	r2, [sp, #16]
 800aae2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800aae4:	69e6      	ldr	r6, [r4, #28]
 800aae6:	920d      	str	r2, [sp, #52]	; 0x34
 800aae8:	68a4      	ldr	r4, [r4, #8]
 800aaea:	6a2a      	ldr	r2, [r5, #32]
 800aaec:	9405      	str	r4, [sp, #20]
 800aaee:	920e      	str	r2, [sp, #56]	; 0x38
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 8145 	beq.w	800ad80 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800aaf6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800aafa:	930f      	str	r3, [sp, #60]	; 0x3c
 800aafc:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800addc <D128_1CH_HTONS_VOL_HP+0x31c>
 800ab00:	9107      	str	r1, [sp, #28]
 800ab02:	f100 0310 	add.w	r3, r0, #16
 800ab06:	4699      	mov	r9, r3
 800ab08:	f1a9 0110 	sub.w	r1, r9, #16
 800ab0c:	c90e      	ldmia	r1, {r1, r2, r3}
 800ab0e:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800ab12:	ba49      	rev16	r1, r1
 800ab14:	ba52      	rev16	r2, r2
 800ab16:	ba5b      	rev16	r3, r3
 800ab18:	fa90 fa90 	rev16.w	sl, r0
 800ab1c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800ab20:	b2cc      	uxtb	r4, r1
 800ab22:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800ab26:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800ab2a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800ab2e:	0e09      	lsrs	r1, r1, #24
 800ab30:	4426      	add	r6, r4
 800ab32:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800ab36:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800ab3a:	b2d0      	uxtb	r0, r2
 800ab3c:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800ab40:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800ab44:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800ab48:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800ab4c:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800ab50:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800ab54:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800ab58:	0e12      	lsrs	r2, r2, #24
 800ab5a:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800ab5e:	9701      	str	r7, [sp, #4]
 800ab60:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800ab64:	4627      	mov	r7, r4
 800ab66:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800ab6a:	9702      	str	r7, [sp, #8]
 800ab6c:	b2da      	uxtb	r2, r3
 800ab6e:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800ab72:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800ab76:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800ab7a:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800ab7e:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800ab82:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ab86:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800ab8a:	0e1b      	lsrs	r3, r3, #24
 800ab8c:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800ab90:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800ab94:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800ab98:	fa5f f38a 	uxtb.w	r3, sl
 800ab9c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800aba0:	960a      	str	r6, [sp, #40]	; 0x28
 800aba2:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800aba6:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800abaa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800abae:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800abb2:	950b      	str	r5, [sp, #44]	; 0x2c
 800abb4:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800abb8:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800abbc:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800abc0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800abc4:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800abc8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800abcc:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800abd0:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800abd4:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800abd8:	9308      	str	r3, [sp, #32]
 800abda:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800abde:	9b01      	ldr	r3, [sp, #4]
 800abe0:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800abe4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800abe8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800abec:	9b02      	ldr	r3, [sp, #8]
 800abee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abf2:	9302      	str	r3, [sp, #8]
 800abf4:	9b08      	ldr	r3, [sp, #32]
 800abf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abfa:	9308      	str	r3, [sp, #32]
 800abfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abfe:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ac02:	950c      	str	r5, [sp, #48]	; 0x30
 800ac04:	461d      	mov	r5, r3
 800ac06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac08:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ac0c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ac10:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800ac14:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	9b02      	ldr	r3, [sp, #8]
 800ac1c:	9202      	str	r2, [sp, #8]
 800ac1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac22:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ac26:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ac2a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800ac2e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ac32:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800ac36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ac3a:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800ac3e:	9b08      	ldr	r3, [sp, #32]
 800ac40:	9f01      	ldr	r7, [sp, #4]
 800ac42:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800ac46:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ac4a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ac4e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ac52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800ac56:	46be      	mov	lr, r7
 800ac58:	0a96      	lsrs	r6, r2, #10
 800ac5a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800ac5e:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800ac62:	4f49      	ldr	r7, [pc, #292]	; (800ad88 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800ac64:	9a04      	ldr	r2, [sp, #16]
 800ac66:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800ac6a:	4a48      	ldr	r2, [pc, #288]	; (800ad8c <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800ac6c:	fb2a ee02 	smlad	lr, sl, r2, lr
 800ac70:	4a47      	ldr	r2, [pc, #284]	; (800ad90 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800ac72:	fb21 ee02 	smlad	lr, r1, r2, lr
 800ac76:	4a47      	ldr	r2, [pc, #284]	; (800ad94 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800ac78:	fb24 ee02 	smlad	lr, r4, r2, lr
 800ac7c:	4a46      	ldr	r2, [pc, #280]	; (800ad98 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800ac7e:	9f02      	ldr	r7, [sp, #8]
 800ac80:	fb27 ee02 	smlad	lr, r7, r2, lr
 800ac84:	4a45      	ldr	r2, [pc, #276]	; (800ad9c <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800ac86:	fb20 ee02 	smlad	lr, r0, r2, lr
 800ac8a:	4a45      	ldr	r2, [pc, #276]	; (800ada0 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800ac8c:	fb23 e702 	smlad	r7, r3, r2, lr
 800ac90:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800ac94:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800ac98:	9f01      	ldr	r7, [sp, #4]
 800ac9a:	4a42      	ldr	r2, [pc, #264]	; (800ada4 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800ac9c:	46bc      	mov	ip, r7
 800ac9e:	9f05      	ldr	r7, [sp, #20]
 800aca0:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800aca4:	4a40      	ldr	r2, [pc, #256]	; (800ada8 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800aca6:	fb2a cc02 	smlad	ip, sl, r2, ip
 800acaa:	4f40      	ldr	r7, [pc, #256]	; (800adac <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800acac:	fb21 cc07 	smlad	ip, r1, r7, ip
 800acb0:	4f3f      	ldr	r7, [pc, #252]	; (800adb0 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800acb2:	fb24 cc07 	smlad	ip, r4, r7, ip
 800acb6:	4f3f      	ldr	r7, [pc, #252]	; (800adb4 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800acb8:	9a02      	ldr	r2, [sp, #8]
 800acba:	fb22 cc07 	smlad	ip, r2, r7, ip
 800acbe:	4f3e      	ldr	r7, [pc, #248]	; (800adb8 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800acc0:	fb20 cc07 	smlad	ip, r0, r7, ip
 800acc4:	4f3d      	ldr	r7, [pc, #244]	; (800adbc <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800acc6:	fb23 c707 	smlad	r7, r3, r7, ip
 800acca:	f8df c114 	ldr.w	ip, [pc, #276]	; 800ade0 <D128_1CH_HTONS_VOL_HP+0x320>
 800acce:	fb25 720c 	smlad	r2, r5, ip, r7
 800acd2:	f04f 0b01 	mov.w	fp, #1
 800acd6:	9204      	str	r2, [sp, #16]
 800acd8:	9f01      	ldr	r7, [sp, #4]
 800acda:	fb27 fb0b 	smuad	fp, r7, fp
 800acde:	4f38      	ldr	r7, [pc, #224]	; (800adc0 <D128_1CH_HTONS_VOL_HP+0x300>)
 800ace0:	fb2a ba07 	smlad	sl, sl, r7, fp
 800ace4:	4f37      	ldr	r7, [pc, #220]	; (800adc4 <D128_1CH_HTONS_VOL_HP+0x304>)
 800ace6:	fb21 aa07 	smlad	sl, r1, r7, sl
 800acea:	4f37      	ldr	r7, [pc, #220]	; (800adc8 <D128_1CH_HTONS_VOL_HP+0x308>)
 800acec:	fb24 aa07 	smlad	sl, r4, r7, sl
 800acf0:	4f36      	ldr	r7, [pc, #216]	; (800adcc <D128_1CH_HTONS_VOL_HP+0x30c>)
 800acf2:	9a02      	ldr	r2, [sp, #8]
 800acf4:	fb22 a707 	smlad	r7, r2, r7, sl
 800acf8:	4a35      	ldr	r2, [pc, #212]	; (800add0 <D128_1CH_HTONS_VOL_HP+0x310>)
 800acfa:	fb20 7702 	smlad	r7, r0, r2, r7
 800acfe:	4a35      	ldr	r2, [pc, #212]	; (800add4 <D128_1CH_HTONS_VOL_HP+0x314>)
 800ad00:	fb23 7702 	smlad	r7, r3, r2, r7
 800ad04:	4b34      	ldr	r3, [pc, #208]	; (800add8 <D128_1CH_HTONS_VOL_HP+0x318>)
 800ad06:	fb25 7303 	smlad	r3, r5, r3, r7
 800ad0a:	9305      	str	r3, [sp, #20]
 800ad0c:	9b03      	ldr	r3, [sp, #12]
 800ad0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ad10:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800ad14:	4473      	add	r3, lr
 800ad16:	461a      	mov	r2, r3
 800ad18:	9b06      	ldr	r3, [sp, #24]
 800ad1a:	f8cd e018 	str.w	lr, [sp, #24]
 800ad1e:	1ad2      	subs	r2, r2, r3
 800ad20:	17d1      	asrs	r1, r2, #31
 800ad22:	fba2 2304 	umull	r2, r3, r2, r4
 800ad26:	fb04 3301 	mla	r3, r4, r1, r3
 800ad2a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800ad2e:	f143 0300 	adc.w	r3, r3, #0
 800ad32:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ad34:	021a      	lsls	r2, r3, #8
 800ad36:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	fbc4 0102 	smlal	r0, r1, r4, r2
 800ad40:	108a      	asrs	r2, r1, #2
 800ad42:	9907      	ldr	r1, [sp, #28]
 800ad44:	f302 020f 	ssat	r2, #16, r2
 800ad48:	005b      	lsls	r3, r3, #1
 800ad4a:	f821 2b02 	strh.w	r2, [r1], #2
 800ad4e:	9303      	str	r3, [sp, #12]
 800ad50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad52:	9107      	str	r1, [sp, #28]
 800ad54:	4299      	cmp	r1, r3
 800ad56:	f109 0910 	add.w	r9, r9, #16
 800ad5a:	f47f aed5 	bne.w	800ab08 <D128_1CH_HTONS_VOL_HP+0x48>
 800ad5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ad60:	9905      	ldr	r1, [sp, #20]
 800ad62:	6091      	str	r1, [r2, #8]
 800ad64:	9904      	ldr	r1, [sp, #16]
 800ad66:	60d1      	str	r1, [r2, #12]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	61d6      	str	r6, [r2, #28]
 800ad6c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ad6e:	9a03      	ldr	r2, [sp, #12]
 800ad70:	611a      	str	r2, [r3, #16]
 800ad72:	2000      	movs	r0, #0
 800ad74:	f8c3 e014 	str.w	lr, [r3, #20]
 800ad78:	6199      	str	r1, [r3, #24]
 800ad7a:	b013      	add	sp, #76	; 0x4c
 800ad7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad80:	f8dd e018 	ldr.w	lr, [sp, #24]
 800ad84:	e7eb      	b.n	800ad5e <D128_1CH_HTONS_VOL_HP+0x29e>
 800ad86:	bf00      	nop
 800ad88:	00780069 	.word	0x00780069
 800ad8c:	005b004e 	.word	0x005b004e
 800ad90:	00420037 	.word	0x00420037
 800ad94:	002d0024 	.word	0x002d0024
 800ad98:	001c0015 	.word	0x001c0015
 800ad9c:	000f000a 	.word	0x000f000a
 800ada0:	00060003 	.word	0x00060003
 800ada4:	00880096 	.word	0x00880096
 800ada8:	00a200ac 	.word	0x00a200ac
 800adac:	00b400ba 	.word	0x00b400ba
 800adb0:	00be00c0 	.word	0x00be00c0
 800adb4:	00c000be 	.word	0x00c000be
 800adb8:	00ba00b4 	.word	0x00ba00b4
 800adbc:	00ac00a2 	.word	0x00ac00a2
 800adc0:	00030006 	.word	0x00030006
 800adc4:	000a000f 	.word	0x000a000f
 800adc8:	0015001c 	.word	0x0015001c
 800adcc:	0024002d 	.word	0x0024002d
 800add0:	00370042 	.word	0x00370042
 800add4:	004e005b 	.word	0x004e005b
 800add8:	00690078 	.word	0x00690078
 800addc:	20000000 	.word	0x20000000
 800ade0:	00960088 	.word	0x00960088

0800ade4 <PDM_Filter_Init>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	2240      	movs	r2, #64	; 0x40
 800ade8:	4604      	mov	r4, r0
 800adea:	2100      	movs	r1, #0
 800adec:	300c      	adds	r0, #12
 800adee:	f000 f9f8 	bl	800b1e2 <memset>
 800adf2:	493b      	ldr	r1, [pc, #236]	; (800aee0 <PDM_Filter_Init+0xfc>)
 800adf4:	483b      	ldr	r0, [pc, #236]	; (800aee4 <PDM_Filter_Init+0x100>)
 800adf6:	f000 f971 	bl	800b0dc <CRC_Lock>
 800adfa:	8822      	ldrh	r2, [r4, #0]
 800adfc:	8963      	ldrh	r3, [r4, #10]
 800adfe:	4938      	ldr	r1, [pc, #224]	; (800aee0 <PDM_Filter_Init+0xfc>)
 800ae00:	8925      	ldrh	r5, [r4, #8]
 800ae02:	86a3      	strh	r3, [r4, #52]	; 0x34
 800ae04:	2801      	cmp	r0, #1
 800ae06:	f04f 0300 	mov.w	r3, #0
 800ae0a:	bf18      	it	ne
 800ae0c:	2100      	movne	r1, #0
 800ae0e:	2a01      	cmp	r2, #1
 800ae10:	6461      	str	r1, [r4, #68]	; 0x44
 800ae12:	86e5      	strh	r5, [r4, #54]	; 0x36
 800ae14:	61a3      	str	r3, [r4, #24]
 800ae16:	6123      	str	r3, [r4, #16]
 800ae18:	6163      	str	r3, [r4, #20]
 800ae1a:	60e3      	str	r3, [r4, #12]
 800ae1c:	6263      	str	r3, [r4, #36]	; 0x24
 800ae1e:	61e3      	str	r3, [r4, #28]
 800ae20:	6223      	str	r3, [r4, #32]
 800ae22:	6423      	str	r3, [r4, #64]	; 0x40
 800ae24:	d918      	bls.n	800ae58 <PDM_Filter_Init+0x74>
 800ae26:	2003      	movs	r0, #3
 800ae28:	2302      	movs	r3, #2
 800ae2a:	8862      	ldrh	r2, [r4, #2]
 800ae2c:	2a01      	cmp	r2, #1
 800ae2e:	d91d      	bls.n	800ae6c <PDM_Filter_Init+0x88>
 800ae30:	2140      	movs	r1, #64	; 0x40
 800ae32:	2300      	movs	r3, #0
 800ae34:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ae36:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800ae3a:	6862      	ldr	r2, [r4, #4]
 800ae3c:	bf04      	itt	eq
 800ae3e:	6421      	streq	r1, [r4, #64]	; 0x40
 800ae40:	460b      	moveq	r3, r1
 800ae42:	b11a      	cbz	r2, 800ae4c <PDM_Filter_Init+0x68>
 800ae44:	f043 0310 	orr.w	r3, r3, #16
 800ae48:	6423      	str	r3, [r4, #64]	; 0x40
 800ae4a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	8722      	strh	r2, [r4, #56]	; 0x38
 800ae50:	b908      	cbnz	r0, 800ae56 <PDM_Filter_Init+0x72>
 800ae52:	3380      	adds	r3, #128	; 0x80
 800ae54:	6423      	str	r3, [r4, #64]	; 0x40
 800ae56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae58:	4d23      	ldr	r5, [pc, #140]	; (800aee8 <PDM_Filter_Init+0x104>)
 800ae5a:	d010      	beq.n	800ae7e <PDM_Filter_Init+0x9a>
 800ae5c:	782a      	ldrb	r2, [r5, #0]
 800ae5e:	2a01      	cmp	r2, #1
 800ae60:	d027      	beq.n	800aeb2 <PDM_Filter_Init+0xce>
 800ae62:	8862      	ldrh	r2, [r4, #2]
 800ae64:	2a01      	cmp	r2, #1
 800ae66:	f04f 0001 	mov.w	r0, #1
 800ae6a:	d8e1      	bhi.n	800ae30 <PDM_Filter_Init+0x4c>
 800ae6c:	d001      	beq.n	800ae72 <PDM_Filter_Init+0x8e>
 800ae6e:	4618      	mov	r0, r3
 800ae70:	e7de      	b.n	800ae30 <PDM_Filter_Init+0x4c>
 800ae72:	2220      	movs	r2, #32
 800ae74:	4618      	mov	r0, r3
 800ae76:	6422      	str	r2, [r4, #64]	; 0x40
 800ae78:	4613      	mov	r3, r2
 800ae7a:	2160      	movs	r1, #96	; 0x60
 800ae7c:	e7da      	b.n	800ae34 <PDM_Filter_Init+0x50>
 800ae7e:	7829      	ldrb	r1, [r5, #0]
 800ae80:	2900      	cmp	r1, #0
 800ae82:	d1ee      	bne.n	800ae62 <PDM_Filter_Init+0x7e>
 800ae84:	4919      	ldr	r1, [pc, #100]	; (800aeec <PDM_Filter_Init+0x108>)
 800ae86:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800aef4 <PDM_Filter_Init+0x110>
 800ae8a:	4f19      	ldr	r7, [pc, #100]	; (800aef0 <PDM_Filter_Init+0x10c>)
 800ae8c:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800ae90:	684a      	ldr	r2, [r1, #4]
 800ae92:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800ae96:	ea02 0007 	and.w	r0, r2, r7
 800ae9a:	4303      	orrs	r3, r0
 800ae9c:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800aea0:	4413      	add	r3, r2
 800aea2:	f841 3f04 	str.w	r3, [r1, #4]!
 800aea6:	428e      	cmp	r6, r1
 800aea8:	d1f2      	bne.n	800ae90 <PDM_Filter_Init+0xac>
 800aeaa:	2001      	movs	r0, #1
 800aeac:	7028      	strb	r0, [r5, #0]
 800aeae:	2300      	movs	r3, #0
 800aeb0:	e7bb      	b.n	800ae2a <PDM_Filter_Init+0x46>
 800aeb2:	490e      	ldr	r1, [pc, #56]	; (800aeec <PDM_Filter_Init+0x108>)
 800aeb4:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800aef4 <PDM_Filter_Init+0x110>
 800aeb8:	4f0d      	ldr	r7, [pc, #52]	; (800aef0 <PDM_Filter_Init+0x10c>)
 800aeba:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800aebe:	684a      	ldr	r2, [r1, #4]
 800aec0:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800aec4:	ea02 0007 	and.w	r0, r2, r7
 800aec8:	4303      	orrs	r3, r0
 800aeca:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800aece:	4413      	add	r3, r2
 800aed0:	f841 3f04 	str.w	r3, [r1, #4]!
 800aed4:	428e      	cmp	r6, r1
 800aed6:	d1f2      	bne.n	800aebe <PDM_Filter_Init+0xda>
 800aed8:	2300      	movs	r3, #0
 800aeda:	702b      	strb	r3, [r5, #0]
 800aedc:	e7c1      	b.n	800ae62 <PDM_Filter_Init+0x7e>
 800aede:	bf00      	nop
 800aee0:	b5e8b5cd 	.word	0xb5e8b5cd
 800aee4:	f407a5c2 	.word	0xf407a5c2
 800aee8:	2000077c 	.word	0x2000077c
 800aeec:	1ffffffc 	.word	0x1ffffffc
 800aef0:	000ffc00 	.word	0x000ffc00
 800aef4:	3ff00000 	.word	0x3ff00000

0800aef8 <PDM_Filter_setConfig>:
 800aef8:	4b66      	ldr	r3, [pc, #408]	; (800b094 <PDM_Filter_setConfig+0x19c>)
 800aefa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d001      	beq.n	800af04 <PDM_Filter_setConfig+0xc>
 800af00:	2004      	movs	r0, #4
 800af02:	4770      	bx	lr
 800af04:	b530      	push	{r4, r5, lr}
 800af06:	880a      	ldrh	r2, [r1, #0]
 800af08:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800af0a:	ed2d 8b04 	vpush	{d8-d9}
 800af0e:	4604      	mov	r4, r0
 800af10:	460d      	mov	r5, r1
 800af12:	1e51      	subs	r1, r2, #1
 800af14:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800af18:	2906      	cmp	r1, #6
 800af1a:	b083      	sub	sp, #12
 800af1c:	6420      	str	r0, [r4, #64]	; 0x40
 800af1e:	d91a      	bls.n	800af56 <PDM_Filter_setConfig+0x5e>
 800af20:	2008      	movs	r0, #8
 800af22:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800af26:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800af2a:	4299      	cmp	r1, r3
 800af2c:	d07e      	beq.n	800b02c <PDM_Filter_setConfig+0x134>
 800af2e:	f113 0f0c 	cmn.w	r3, #12
 800af32:	da2a      	bge.n	800af8a <PDM_Filter_setConfig+0x92>
 800af34:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800af38:	3040      	adds	r0, #64	; 0x40
 800af3a:	80ab      	strh	r3, [r5, #4]
 800af3c:	8622      	strh	r2, [r4, #48]	; 0x30
 800af3e:	886b      	ldrh	r3, [r5, #2]
 800af40:	8663      	strh	r3, [r4, #50]	; 0x32
 800af42:	b920      	cbnz	r0, 800af4e <PDM_Filter_setConfig+0x56>
 800af44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af4a:	6423      	str	r3, [r4, #64]	; 0x40
 800af4c:	2000      	movs	r0, #0
 800af4e:	b003      	add	sp, #12
 800af50:	ecbd 8b04 	vpop	{d8-d9}
 800af54:	bd30      	pop	{r4, r5, pc}
 800af56:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800af58:	4291      	cmp	r1, r2
 800af5a:	d06c      	beq.n	800b036 <PDM_Filter_setConfig+0x13e>
 800af5c:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800af60:	f023 0301 	bic.w	r3, r3, #1
 800af64:	4313      	orrs	r3, r2
 800af66:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800af6a:	6423      	str	r3, [r4, #64]	; 0x40
 800af6c:	2970      	cmp	r1, #112	; 0x70
 800af6e:	f003 030f 	and.w	r3, r3, #15
 800af72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800af76:	d066      	beq.n	800b046 <PDM_Filter_setConfig+0x14e>
 800af78:	2b06      	cmp	r3, #6
 800af7a:	f200 8089 	bhi.w	800b090 <PDM_Filter_setConfig+0x198>
 800af7e:	e8df f003 	tbb	[pc, r3]
 800af82:	4f52      	.short	0x4f52
 800af84:	3d43494c 	.word	0x3d43494c
 800af88:	46          	.byte	0x46
 800af89:	00          	.byte	0x00
 800af8a:	2b33      	cmp	r3, #51	; 0x33
 800af8c:	dc32      	bgt.n	800aff4 <PDM_Filter_setConfig+0xfc>
 800af8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800af90:	f002 020f 	and.w	r2, r2, #15
 800af94:	3a01      	subs	r2, #1
 800af96:	2a06      	cmp	r2, #6
 800af98:	d872      	bhi.n	800b080 <PDM_Filter_setConfig+0x188>
 800af9a:	493f      	ldr	r1, [pc, #252]	; (800b098 <PDM_Filter_setConfig+0x1a0>)
 800af9c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800afa0:	ed92 9a00 	vldr	s18, [r2]
 800afa4:	ed92 8a07 	vldr	s16, [r2, #28]
 800afa8:	9001      	str	r0, [sp, #4]
 800afaa:	ee07 3a90 	vmov	s15, r3
 800afae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afb2:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800afb6:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800afba:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800afbe:	f001 fa43 	bl	800c448 <powf>
 800afc2:	eddf 0a36 	vldr	s1, [pc, #216]	; 800b09c <PDM_Filter_setConfig+0x1a4>
 800afc6:	eef0 8a40 	vmov.f32	s17, s0
 800afca:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800afce:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800afd2:	f001 fa39 	bl	800c448 <powf>
 800afd6:	ee28 8a28 	vmul.f32	s16, s16, s17
 800afda:	ee28 0a00 	vmul.f32	s0, s16, s0
 800afde:	f001 fa0d 	bl	800c3fc <roundf>
 800afe2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800afe6:	88ab      	ldrh	r3, [r5, #4]
 800afe8:	882a      	ldrh	r2, [r5, #0]
 800afea:	9801      	ldr	r0, [sp, #4]
 800afec:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800aff0:	8723      	strh	r3, [r4, #56]	; 0x38
 800aff2:	e7a3      	b.n	800af3c <PDM_Filter_setConfig+0x44>
 800aff4:	2333      	movs	r3, #51	; 0x33
 800aff6:	3040      	adds	r0, #64	; 0x40
 800aff8:	80ab      	strh	r3, [r5, #4]
 800affa:	e79f      	b.n	800af3c <PDM_Filter_setConfig+0x44>
 800affc:	4b28      	ldr	r3, [pc, #160]	; (800b0a0 <PDM_Filter_setConfig+0x1a8>)
 800affe:	64a3      	str	r3, [r4, #72]	; 0x48
 800b000:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800b004:	2000      	movs	r0, #0
 800b006:	e792      	b.n	800af2e <PDM_Filter_setConfig+0x36>
 800b008:	4b26      	ldr	r3, [pc, #152]	; (800b0a4 <PDM_Filter_setConfig+0x1ac>)
 800b00a:	64a3      	str	r3, [r4, #72]	; 0x48
 800b00c:	e7f8      	b.n	800b000 <PDM_Filter_setConfig+0x108>
 800b00e:	4b26      	ldr	r3, [pc, #152]	; (800b0a8 <PDM_Filter_setConfig+0x1b0>)
 800b010:	64a3      	str	r3, [r4, #72]	; 0x48
 800b012:	e7f5      	b.n	800b000 <PDM_Filter_setConfig+0x108>
 800b014:	4b25      	ldr	r3, [pc, #148]	; (800b0ac <PDM_Filter_setConfig+0x1b4>)
 800b016:	64a3      	str	r3, [r4, #72]	; 0x48
 800b018:	e7f2      	b.n	800b000 <PDM_Filter_setConfig+0x108>
 800b01a:	4b25      	ldr	r3, [pc, #148]	; (800b0b0 <PDM_Filter_setConfig+0x1b8>)
 800b01c:	64a3      	str	r3, [r4, #72]	; 0x48
 800b01e:	e7ef      	b.n	800b000 <PDM_Filter_setConfig+0x108>
 800b020:	4b24      	ldr	r3, [pc, #144]	; (800b0b4 <PDM_Filter_setConfig+0x1bc>)
 800b022:	64a3      	str	r3, [r4, #72]	; 0x48
 800b024:	e7ec      	b.n	800b000 <PDM_Filter_setConfig+0x108>
 800b026:	4b24      	ldr	r3, [pc, #144]	; (800b0b8 <PDM_Filter_setConfig+0x1c0>)
 800b028:	64a3      	str	r3, [r4, #72]	; 0x48
 800b02a:	e7e9      	b.n	800b000 <PDM_Filter_setConfig+0x108>
 800b02c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800b02e:	4291      	cmp	r1, r2
 800b030:	f47f af7d 	bne.w	800af2e <PDM_Filter_setConfig+0x36>
 800b034:	e783      	b.n	800af3e <PDM_Filter_setConfig+0x46>
 800b036:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800b03a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800b03e:	4299      	cmp	r1, r3
 800b040:	d023      	beq.n	800b08a <PDM_Filter_setConfig+0x192>
 800b042:	2000      	movs	r0, #0
 800b044:	e773      	b.n	800af2e <PDM_Filter_setConfig+0x36>
 800b046:	2b06      	cmp	r3, #6
 800b048:	d822      	bhi.n	800b090 <PDM_Filter_setConfig+0x198>
 800b04a:	e8df f003 	tbb	[pc, r3]
 800b04e:	1316      	.short	0x1316
 800b050:	070a0d10 	.word	0x070a0d10
 800b054:	04          	.byte	0x04
 800b055:	00          	.byte	0x00
 800b056:	4b19      	ldr	r3, [pc, #100]	; (800b0bc <PDM_Filter_setConfig+0x1c4>)
 800b058:	64a3      	str	r3, [r4, #72]	; 0x48
 800b05a:	e7d1      	b.n	800b000 <PDM_Filter_setConfig+0x108>
 800b05c:	4b18      	ldr	r3, [pc, #96]	; (800b0c0 <PDM_Filter_setConfig+0x1c8>)
 800b05e:	64a3      	str	r3, [r4, #72]	; 0x48
 800b060:	e7ce      	b.n	800b000 <PDM_Filter_setConfig+0x108>
 800b062:	4b18      	ldr	r3, [pc, #96]	; (800b0c4 <PDM_Filter_setConfig+0x1cc>)
 800b064:	64a3      	str	r3, [r4, #72]	; 0x48
 800b066:	e7cb      	b.n	800b000 <PDM_Filter_setConfig+0x108>
 800b068:	4b17      	ldr	r3, [pc, #92]	; (800b0c8 <PDM_Filter_setConfig+0x1d0>)
 800b06a:	64a3      	str	r3, [r4, #72]	; 0x48
 800b06c:	e7c8      	b.n	800b000 <PDM_Filter_setConfig+0x108>
 800b06e:	4b17      	ldr	r3, [pc, #92]	; (800b0cc <PDM_Filter_setConfig+0x1d4>)
 800b070:	64a3      	str	r3, [r4, #72]	; 0x48
 800b072:	e7c5      	b.n	800b000 <PDM_Filter_setConfig+0x108>
 800b074:	4b16      	ldr	r3, [pc, #88]	; (800b0d0 <PDM_Filter_setConfig+0x1d8>)
 800b076:	64a3      	str	r3, [r4, #72]	; 0x48
 800b078:	e7c2      	b.n	800b000 <PDM_Filter_setConfig+0x108>
 800b07a:	4b16      	ldr	r3, [pc, #88]	; (800b0d4 <PDM_Filter_setConfig+0x1dc>)
 800b07c:	64a3      	str	r3, [r4, #72]	; 0x48
 800b07e:	e7bf      	b.n	800b000 <PDM_Filter_setConfig+0x108>
 800b080:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800b0d8 <PDM_Filter_setConfig+0x1e0>
 800b084:	eeb0 9a48 	vmov.f32	s18, s16
 800b088:	e78e      	b.n	800afa8 <PDM_Filter_setConfig+0xb0>
 800b08a:	886b      	ldrh	r3, [r5, #2]
 800b08c:	8663      	strh	r3, [r4, #50]	; 0x32
 800b08e:	e759      	b.n	800af44 <PDM_Filter_setConfig+0x4c>
 800b090:	2000      	movs	r0, #0
 800b092:	e746      	b.n	800af22 <PDM_Filter_setConfig+0x2a>
 800b094:	b5e8b5cd 	.word	0xb5e8b5cd
 800b098:	0800d118 	.word	0x0800d118
 800b09c:	42000000 	.word	0x42000000
 800b0a0:	08009465 	.word	0x08009465
 800b0a4:	08009345 	.word	0x08009345
 800b0a8:	080095f5 	.word	0x080095f5
 800b0ac:	08009e39 	.word	0x08009e39
 800b0b0:	08009b99 	.word	0x08009b99
 800b0b4:	08009979 	.word	0x08009979
 800b0b8:	0800978d 	.word	0x0800978d
 800b0bc:	0800a445 	.word	0x0800a445
 800b0c0:	0800a30d 	.word	0x0800a30d
 800b0c4:	0800a229 	.word	0x0800a229
 800b0c8:	0800aac1 	.word	0x0800aac1
 800b0cc:	0800a8ad 	.word	0x0800a8ad
 800b0d0:	0800a6f5 	.word	0x0800a6f5
 800b0d4:	0800a589 	.word	0x0800a589
 800b0d8:	00000000 	.word	0x00000000

0800b0dc <CRC_Lock>:
 800b0dc:	4a17      	ldr	r2, [pc, #92]	; (800b13c <CRC_Lock+0x60>)
 800b0de:	6813      	ldr	r3, [r2, #0]
 800b0e0:	b410      	push	{r4}
 800b0e2:	f023 0301 	bic.w	r3, r3, #1
 800b0e6:	4c16      	ldr	r4, [pc, #88]	; (800b140 <CRC_Lock+0x64>)
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	b933      	cbnz	r3, 800b0fc <CRC_Lock+0x20>
 800b0ee:	4b15      	ldr	r3, [pc, #84]	; (800b144 <CRC_Lock+0x68>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0f6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b0fa:	d00f      	beq.n	800b11c <CRC_Lock+0x40>
 800b0fc:	4a12      	ldr	r2, [pc, #72]	; (800b148 <CRC_Lock+0x6c>)
 800b0fe:	2301      	movs	r3, #1
 800b100:	6013      	str	r3, [r2, #0]
 800b102:	6813      	ldr	r3, [r2, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d1fc      	bne.n	800b102 <CRC_Lock+0x26>
 800b108:	4b10      	ldr	r3, [pc, #64]	; (800b14c <CRC_Lock+0x70>)
 800b10a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b10e:	6018      	str	r0, [r3, #0]
 800b110:	6818      	ldr	r0, [r3, #0]
 800b112:	1a08      	subs	r0, r1, r0
 800b114:	fab0 f080 	clz	r0, r0
 800b118:	0940      	lsrs	r0, r0, #5
 800b11a:	4770      	bx	lr
 800b11c:	4a0c      	ldr	r2, [pc, #48]	; (800b150 <CRC_Lock+0x74>)
 800b11e:	2301      	movs	r3, #1
 800b120:	6013      	str	r3, [r2, #0]
 800b122:	6813      	ldr	r3, [r2, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1fc      	bne.n	800b122 <CRC_Lock+0x46>
 800b128:	4b0a      	ldr	r3, [pc, #40]	; (800b154 <CRC_Lock+0x78>)
 800b12a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b12e:	6018      	str	r0, [r3, #0]
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	1a40      	subs	r0, r0, r1
 800b134:	fab0 f080 	clz	r0, r0
 800b138:	0940      	lsrs	r0, r0, #5
 800b13a:	4770      	bx	lr
 800b13c:	e0002000 	.word	0xe0002000
 800b140:	e0042000 	.word	0xe0042000
 800b144:	5c001000 	.word	0x5c001000
 800b148:	40023008 	.word	0x40023008
 800b14c:	40023000 	.word	0x40023000
 800b150:	58024c08 	.word	0x58024c08
 800b154:	58024c00 	.word	0x58024c00

0800b158 <__errno>:
 800b158:	4b01      	ldr	r3, [pc, #4]	; (800b160 <__errno+0x8>)
 800b15a:	6818      	ldr	r0, [r3, #0]
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	2000058c 	.word	0x2000058c

0800b164 <__libc_init_array>:
 800b164:	b570      	push	{r4, r5, r6, lr}
 800b166:	4e0d      	ldr	r6, [pc, #52]	; (800b19c <__libc_init_array+0x38>)
 800b168:	4c0d      	ldr	r4, [pc, #52]	; (800b1a0 <__libc_init_array+0x3c>)
 800b16a:	1ba4      	subs	r4, r4, r6
 800b16c:	10a4      	asrs	r4, r4, #2
 800b16e:	2500      	movs	r5, #0
 800b170:	42a5      	cmp	r5, r4
 800b172:	d109      	bne.n	800b188 <__libc_init_array+0x24>
 800b174:	4e0b      	ldr	r6, [pc, #44]	; (800b1a4 <__libc_init_array+0x40>)
 800b176:	4c0c      	ldr	r4, [pc, #48]	; (800b1a8 <__libc_init_array+0x44>)
 800b178:	f001 fe6c 	bl	800ce54 <_init>
 800b17c:	1ba4      	subs	r4, r4, r6
 800b17e:	10a4      	asrs	r4, r4, #2
 800b180:	2500      	movs	r5, #0
 800b182:	42a5      	cmp	r5, r4
 800b184:	d105      	bne.n	800b192 <__libc_init_array+0x2e>
 800b186:	bd70      	pop	{r4, r5, r6, pc}
 800b188:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b18c:	4798      	blx	r3
 800b18e:	3501      	adds	r5, #1
 800b190:	e7ee      	b.n	800b170 <__libc_init_array+0xc>
 800b192:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b196:	4798      	blx	r3
 800b198:	3501      	adds	r5, #1
 800b19a:	e7f2      	b.n	800b182 <__libc_init_array+0x1e>
 800b19c:	0800d35c 	.word	0x0800d35c
 800b1a0:	0800d35c 	.word	0x0800d35c
 800b1a4:	0800d35c 	.word	0x0800d35c
 800b1a8:	0800d360 	.word	0x0800d360

0800b1ac <malloc>:
 800b1ac:	4b02      	ldr	r3, [pc, #8]	; (800b1b8 <malloc+0xc>)
 800b1ae:	4601      	mov	r1, r0
 800b1b0:	6818      	ldr	r0, [r3, #0]
 800b1b2:	f000 b86d 	b.w	800b290 <_malloc_r>
 800b1b6:	bf00      	nop
 800b1b8:	2000058c 	.word	0x2000058c

0800b1bc <free>:
 800b1bc:	4b02      	ldr	r3, [pc, #8]	; (800b1c8 <free+0xc>)
 800b1be:	4601      	mov	r1, r0
 800b1c0:	6818      	ldr	r0, [r3, #0]
 800b1c2:	f000 b817 	b.w	800b1f4 <_free_r>
 800b1c6:	bf00      	nop
 800b1c8:	2000058c 	.word	0x2000058c

0800b1cc <memcpy>:
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	1e43      	subs	r3, r0, #1
 800b1d0:	440a      	add	r2, r1
 800b1d2:	4291      	cmp	r1, r2
 800b1d4:	d100      	bne.n	800b1d8 <memcpy+0xc>
 800b1d6:	bd10      	pop	{r4, pc}
 800b1d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1e0:	e7f7      	b.n	800b1d2 <memcpy+0x6>

0800b1e2 <memset>:
 800b1e2:	4402      	add	r2, r0
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d100      	bne.n	800b1ec <memset+0xa>
 800b1ea:	4770      	bx	lr
 800b1ec:	f803 1b01 	strb.w	r1, [r3], #1
 800b1f0:	e7f9      	b.n	800b1e6 <memset+0x4>
	...

0800b1f4 <_free_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	d045      	beq.n	800b288 <_free_r+0x94>
 800b1fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b200:	1f0c      	subs	r4, r1, #4
 800b202:	2b00      	cmp	r3, #0
 800b204:	bfb8      	it	lt
 800b206:	18e4      	addlt	r4, r4, r3
 800b208:	f000 f91a 	bl	800b440 <__malloc_lock>
 800b20c:	4a1f      	ldr	r2, [pc, #124]	; (800b28c <_free_r+0x98>)
 800b20e:	6813      	ldr	r3, [r2, #0]
 800b210:	4610      	mov	r0, r2
 800b212:	b933      	cbnz	r3, 800b222 <_free_r+0x2e>
 800b214:	6063      	str	r3, [r4, #4]
 800b216:	6014      	str	r4, [r2, #0]
 800b218:	4628      	mov	r0, r5
 800b21a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b21e:	f000 b910 	b.w	800b442 <__malloc_unlock>
 800b222:	42a3      	cmp	r3, r4
 800b224:	d90c      	bls.n	800b240 <_free_r+0x4c>
 800b226:	6821      	ldr	r1, [r4, #0]
 800b228:	1862      	adds	r2, r4, r1
 800b22a:	4293      	cmp	r3, r2
 800b22c:	bf04      	itt	eq
 800b22e:	681a      	ldreq	r2, [r3, #0]
 800b230:	685b      	ldreq	r3, [r3, #4]
 800b232:	6063      	str	r3, [r4, #4]
 800b234:	bf04      	itt	eq
 800b236:	1852      	addeq	r2, r2, r1
 800b238:	6022      	streq	r2, [r4, #0]
 800b23a:	6004      	str	r4, [r0, #0]
 800b23c:	e7ec      	b.n	800b218 <_free_r+0x24>
 800b23e:	4613      	mov	r3, r2
 800b240:	685a      	ldr	r2, [r3, #4]
 800b242:	b10a      	cbz	r2, 800b248 <_free_r+0x54>
 800b244:	42a2      	cmp	r2, r4
 800b246:	d9fa      	bls.n	800b23e <_free_r+0x4a>
 800b248:	6819      	ldr	r1, [r3, #0]
 800b24a:	1858      	adds	r0, r3, r1
 800b24c:	42a0      	cmp	r0, r4
 800b24e:	d10b      	bne.n	800b268 <_free_r+0x74>
 800b250:	6820      	ldr	r0, [r4, #0]
 800b252:	4401      	add	r1, r0
 800b254:	1858      	adds	r0, r3, r1
 800b256:	4282      	cmp	r2, r0
 800b258:	6019      	str	r1, [r3, #0]
 800b25a:	d1dd      	bne.n	800b218 <_free_r+0x24>
 800b25c:	6810      	ldr	r0, [r2, #0]
 800b25e:	6852      	ldr	r2, [r2, #4]
 800b260:	605a      	str	r2, [r3, #4]
 800b262:	4401      	add	r1, r0
 800b264:	6019      	str	r1, [r3, #0]
 800b266:	e7d7      	b.n	800b218 <_free_r+0x24>
 800b268:	d902      	bls.n	800b270 <_free_r+0x7c>
 800b26a:	230c      	movs	r3, #12
 800b26c:	602b      	str	r3, [r5, #0]
 800b26e:	e7d3      	b.n	800b218 <_free_r+0x24>
 800b270:	6820      	ldr	r0, [r4, #0]
 800b272:	1821      	adds	r1, r4, r0
 800b274:	428a      	cmp	r2, r1
 800b276:	bf04      	itt	eq
 800b278:	6811      	ldreq	r1, [r2, #0]
 800b27a:	6852      	ldreq	r2, [r2, #4]
 800b27c:	6062      	str	r2, [r4, #4]
 800b27e:	bf04      	itt	eq
 800b280:	1809      	addeq	r1, r1, r0
 800b282:	6021      	streq	r1, [r4, #0]
 800b284:	605c      	str	r4, [r3, #4]
 800b286:	e7c7      	b.n	800b218 <_free_r+0x24>
 800b288:	bd38      	pop	{r3, r4, r5, pc}
 800b28a:	bf00      	nop
 800b28c:	20000890 	.word	0x20000890

0800b290 <_malloc_r>:
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	1ccd      	adds	r5, r1, #3
 800b294:	f025 0503 	bic.w	r5, r5, #3
 800b298:	3508      	adds	r5, #8
 800b29a:	2d0c      	cmp	r5, #12
 800b29c:	bf38      	it	cc
 800b29e:	250c      	movcc	r5, #12
 800b2a0:	2d00      	cmp	r5, #0
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	db01      	blt.n	800b2aa <_malloc_r+0x1a>
 800b2a6:	42a9      	cmp	r1, r5
 800b2a8:	d903      	bls.n	800b2b2 <_malloc_r+0x22>
 800b2aa:	230c      	movs	r3, #12
 800b2ac:	6033      	str	r3, [r6, #0]
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	bd70      	pop	{r4, r5, r6, pc}
 800b2b2:	f000 f8c5 	bl	800b440 <__malloc_lock>
 800b2b6:	4a21      	ldr	r2, [pc, #132]	; (800b33c <_malloc_r+0xac>)
 800b2b8:	6814      	ldr	r4, [r2, #0]
 800b2ba:	4621      	mov	r1, r4
 800b2bc:	b991      	cbnz	r1, 800b2e4 <_malloc_r+0x54>
 800b2be:	4c20      	ldr	r4, [pc, #128]	; (800b340 <_malloc_r+0xb0>)
 800b2c0:	6823      	ldr	r3, [r4, #0]
 800b2c2:	b91b      	cbnz	r3, 800b2cc <_malloc_r+0x3c>
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	f000 f83d 	bl	800b344 <_sbrk_r>
 800b2ca:	6020      	str	r0, [r4, #0]
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	f000 f838 	bl	800b344 <_sbrk_r>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d124      	bne.n	800b322 <_malloc_r+0x92>
 800b2d8:	230c      	movs	r3, #12
 800b2da:	6033      	str	r3, [r6, #0]
 800b2dc:	4630      	mov	r0, r6
 800b2de:	f000 f8b0 	bl	800b442 <__malloc_unlock>
 800b2e2:	e7e4      	b.n	800b2ae <_malloc_r+0x1e>
 800b2e4:	680b      	ldr	r3, [r1, #0]
 800b2e6:	1b5b      	subs	r3, r3, r5
 800b2e8:	d418      	bmi.n	800b31c <_malloc_r+0x8c>
 800b2ea:	2b0b      	cmp	r3, #11
 800b2ec:	d90f      	bls.n	800b30e <_malloc_r+0x7e>
 800b2ee:	600b      	str	r3, [r1, #0]
 800b2f0:	50cd      	str	r5, [r1, r3]
 800b2f2:	18cc      	adds	r4, r1, r3
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	f000 f8a4 	bl	800b442 <__malloc_unlock>
 800b2fa:	f104 000b 	add.w	r0, r4, #11
 800b2fe:	1d23      	adds	r3, r4, #4
 800b300:	f020 0007 	bic.w	r0, r0, #7
 800b304:	1ac3      	subs	r3, r0, r3
 800b306:	d0d3      	beq.n	800b2b0 <_malloc_r+0x20>
 800b308:	425a      	negs	r2, r3
 800b30a:	50e2      	str	r2, [r4, r3]
 800b30c:	e7d0      	b.n	800b2b0 <_malloc_r+0x20>
 800b30e:	428c      	cmp	r4, r1
 800b310:	684b      	ldr	r3, [r1, #4]
 800b312:	bf16      	itet	ne
 800b314:	6063      	strne	r3, [r4, #4]
 800b316:	6013      	streq	r3, [r2, #0]
 800b318:	460c      	movne	r4, r1
 800b31a:	e7eb      	b.n	800b2f4 <_malloc_r+0x64>
 800b31c:	460c      	mov	r4, r1
 800b31e:	6849      	ldr	r1, [r1, #4]
 800b320:	e7cc      	b.n	800b2bc <_malloc_r+0x2c>
 800b322:	1cc4      	adds	r4, r0, #3
 800b324:	f024 0403 	bic.w	r4, r4, #3
 800b328:	42a0      	cmp	r0, r4
 800b32a:	d005      	beq.n	800b338 <_malloc_r+0xa8>
 800b32c:	1a21      	subs	r1, r4, r0
 800b32e:	4630      	mov	r0, r6
 800b330:	f000 f808 	bl	800b344 <_sbrk_r>
 800b334:	3001      	adds	r0, #1
 800b336:	d0cf      	beq.n	800b2d8 <_malloc_r+0x48>
 800b338:	6025      	str	r5, [r4, #0]
 800b33a:	e7db      	b.n	800b2f4 <_malloc_r+0x64>
 800b33c:	20000890 	.word	0x20000890
 800b340:	20000894 	.word	0x20000894

0800b344 <_sbrk_r>:
 800b344:	b538      	push	{r3, r4, r5, lr}
 800b346:	4c06      	ldr	r4, [pc, #24]	; (800b360 <_sbrk_r+0x1c>)
 800b348:	2300      	movs	r3, #0
 800b34a:	4605      	mov	r5, r0
 800b34c:	4608      	mov	r0, r1
 800b34e:	6023      	str	r3, [r4, #0]
 800b350:	f7f6 f9f2 	bl	8001738 <_sbrk>
 800b354:	1c43      	adds	r3, r0, #1
 800b356:	d102      	bne.n	800b35e <_sbrk_r+0x1a>
 800b358:	6823      	ldr	r3, [r4, #0]
 800b35a:	b103      	cbz	r3, 800b35e <_sbrk_r+0x1a>
 800b35c:	602b      	str	r3, [r5, #0]
 800b35e:	bd38      	pop	{r3, r4, r5, pc}
 800b360:	200124ec 	.word	0x200124ec

0800b364 <siprintf>:
 800b364:	b40e      	push	{r1, r2, r3}
 800b366:	b500      	push	{lr}
 800b368:	b09c      	sub	sp, #112	; 0x70
 800b36a:	ab1d      	add	r3, sp, #116	; 0x74
 800b36c:	9002      	str	r0, [sp, #8]
 800b36e:	9006      	str	r0, [sp, #24]
 800b370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b374:	4809      	ldr	r0, [pc, #36]	; (800b39c <siprintf+0x38>)
 800b376:	9107      	str	r1, [sp, #28]
 800b378:	9104      	str	r1, [sp, #16]
 800b37a:	4909      	ldr	r1, [pc, #36]	; (800b3a0 <siprintf+0x3c>)
 800b37c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b380:	9105      	str	r1, [sp, #20]
 800b382:	6800      	ldr	r0, [r0, #0]
 800b384:	9301      	str	r3, [sp, #4]
 800b386:	a902      	add	r1, sp, #8
 800b388:	f000 f8b6 	bl	800b4f8 <_svfiprintf_r>
 800b38c:	9b02      	ldr	r3, [sp, #8]
 800b38e:	2200      	movs	r2, #0
 800b390:	701a      	strb	r2, [r3, #0]
 800b392:	b01c      	add	sp, #112	; 0x70
 800b394:	f85d eb04 	ldr.w	lr, [sp], #4
 800b398:	b003      	add	sp, #12
 800b39a:	4770      	bx	lr
 800b39c:	2000058c 	.word	0x2000058c
 800b3a0:	ffff0208 	.word	0xffff0208

0800b3a4 <_vsiprintf_r>:
 800b3a4:	b500      	push	{lr}
 800b3a6:	b09b      	sub	sp, #108	; 0x6c
 800b3a8:	9100      	str	r1, [sp, #0]
 800b3aa:	9104      	str	r1, [sp, #16]
 800b3ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3b0:	9105      	str	r1, [sp, #20]
 800b3b2:	9102      	str	r1, [sp, #8]
 800b3b4:	4905      	ldr	r1, [pc, #20]	; (800b3cc <_vsiprintf_r+0x28>)
 800b3b6:	9103      	str	r1, [sp, #12]
 800b3b8:	4669      	mov	r1, sp
 800b3ba:	f000 f89d 	bl	800b4f8 <_svfiprintf_r>
 800b3be:	9b00      	ldr	r3, [sp, #0]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	701a      	strb	r2, [r3, #0]
 800b3c4:	b01b      	add	sp, #108	; 0x6c
 800b3c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3ca:	bf00      	nop
 800b3cc:	ffff0208 	.word	0xffff0208

0800b3d0 <vsiprintf>:
 800b3d0:	4613      	mov	r3, r2
 800b3d2:	460a      	mov	r2, r1
 800b3d4:	4601      	mov	r1, r0
 800b3d6:	4802      	ldr	r0, [pc, #8]	; (800b3e0 <vsiprintf+0x10>)
 800b3d8:	6800      	ldr	r0, [r0, #0]
 800b3da:	f7ff bfe3 	b.w	800b3a4 <_vsiprintf_r>
 800b3de:	bf00      	nop
 800b3e0:	2000058c 	.word	0x2000058c

0800b3e4 <_vsiscanf_r>:
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	b09a      	sub	sp, #104	; 0x68
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	461e      	mov	r6, r3
 800b3ec:	4608      	mov	r0, r1
 800b3ee:	f44f 7301 	mov.w	r3, #516	; 0x204
 800b3f2:	4615      	mov	r5, r2
 800b3f4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b3f8:	9100      	str	r1, [sp, #0]
 800b3fa:	9104      	str	r1, [sp, #16]
 800b3fc:	f7f4 fef2 	bl	80001e4 <strlen>
 800b400:	4b09      	ldr	r3, [pc, #36]	; (800b428 <_vsiscanf_r+0x44>)
 800b402:	9309      	str	r3, [sp, #36]	; 0x24
 800b404:	2100      	movs	r1, #0
 800b406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b40a:	9001      	str	r0, [sp, #4]
 800b40c:	9005      	str	r0, [sp, #20]
 800b40e:	910d      	str	r1, [sp, #52]	; 0x34
 800b410:	9112      	str	r1, [sp, #72]	; 0x48
 800b412:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b416:	462a      	mov	r2, r5
 800b418:	4633      	mov	r3, r6
 800b41a:	4669      	mov	r1, sp
 800b41c:	4620      	mov	r0, r4
 800b41e:	f000 f9bd 	bl	800b79c <__ssvfiscanf_r>
 800b422:	b01a      	add	sp, #104	; 0x68
 800b424:	bd70      	pop	{r4, r5, r6, pc}
 800b426:	bf00      	nop
 800b428:	0800c061 	.word	0x0800c061

0800b42c <vsiscanf>:
 800b42c:	4613      	mov	r3, r2
 800b42e:	460a      	mov	r2, r1
 800b430:	4601      	mov	r1, r0
 800b432:	4802      	ldr	r0, [pc, #8]	; (800b43c <vsiscanf+0x10>)
 800b434:	6800      	ldr	r0, [r0, #0]
 800b436:	f7ff bfd5 	b.w	800b3e4 <_vsiscanf_r>
 800b43a:	bf00      	nop
 800b43c:	2000058c 	.word	0x2000058c

0800b440 <__malloc_lock>:
 800b440:	4770      	bx	lr

0800b442 <__malloc_unlock>:
 800b442:	4770      	bx	lr

0800b444 <__ssputs_r>:
 800b444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b448:	688e      	ldr	r6, [r1, #8]
 800b44a:	429e      	cmp	r6, r3
 800b44c:	4682      	mov	sl, r0
 800b44e:	460c      	mov	r4, r1
 800b450:	4690      	mov	r8, r2
 800b452:	4699      	mov	r9, r3
 800b454:	d837      	bhi.n	800b4c6 <__ssputs_r+0x82>
 800b456:	898a      	ldrh	r2, [r1, #12]
 800b458:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b45c:	d031      	beq.n	800b4c2 <__ssputs_r+0x7e>
 800b45e:	6825      	ldr	r5, [r4, #0]
 800b460:	6909      	ldr	r1, [r1, #16]
 800b462:	1a6f      	subs	r7, r5, r1
 800b464:	6965      	ldr	r5, [r4, #20]
 800b466:	2302      	movs	r3, #2
 800b468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b46c:	fb95 f5f3 	sdiv	r5, r5, r3
 800b470:	f109 0301 	add.w	r3, r9, #1
 800b474:	443b      	add	r3, r7
 800b476:	429d      	cmp	r5, r3
 800b478:	bf38      	it	cc
 800b47a:	461d      	movcc	r5, r3
 800b47c:	0553      	lsls	r3, r2, #21
 800b47e:	d530      	bpl.n	800b4e2 <__ssputs_r+0x9e>
 800b480:	4629      	mov	r1, r5
 800b482:	f7ff ff05 	bl	800b290 <_malloc_r>
 800b486:	4606      	mov	r6, r0
 800b488:	b950      	cbnz	r0, 800b4a0 <__ssputs_r+0x5c>
 800b48a:	230c      	movs	r3, #12
 800b48c:	f8ca 3000 	str.w	r3, [sl]
 800b490:	89a3      	ldrh	r3, [r4, #12]
 800b492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b496:	81a3      	strh	r3, [r4, #12]
 800b498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a0:	463a      	mov	r2, r7
 800b4a2:	6921      	ldr	r1, [r4, #16]
 800b4a4:	f7ff fe92 	bl	800b1cc <memcpy>
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4b2:	81a3      	strh	r3, [r4, #12]
 800b4b4:	6126      	str	r6, [r4, #16]
 800b4b6:	6165      	str	r5, [r4, #20]
 800b4b8:	443e      	add	r6, r7
 800b4ba:	1bed      	subs	r5, r5, r7
 800b4bc:	6026      	str	r6, [r4, #0]
 800b4be:	60a5      	str	r5, [r4, #8]
 800b4c0:	464e      	mov	r6, r9
 800b4c2:	454e      	cmp	r6, r9
 800b4c4:	d900      	bls.n	800b4c8 <__ssputs_r+0x84>
 800b4c6:	464e      	mov	r6, r9
 800b4c8:	4632      	mov	r2, r6
 800b4ca:	4641      	mov	r1, r8
 800b4cc:	6820      	ldr	r0, [r4, #0]
 800b4ce:	f000 ff41 	bl	800c354 <memmove>
 800b4d2:	68a3      	ldr	r3, [r4, #8]
 800b4d4:	1b9b      	subs	r3, r3, r6
 800b4d6:	60a3      	str	r3, [r4, #8]
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	441e      	add	r6, r3
 800b4dc:	6026      	str	r6, [r4, #0]
 800b4de:	2000      	movs	r0, #0
 800b4e0:	e7dc      	b.n	800b49c <__ssputs_r+0x58>
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	f000 ff4f 	bl	800c386 <_realloc_r>
 800b4e8:	4606      	mov	r6, r0
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	d1e2      	bne.n	800b4b4 <__ssputs_r+0x70>
 800b4ee:	6921      	ldr	r1, [r4, #16]
 800b4f0:	4650      	mov	r0, sl
 800b4f2:	f7ff fe7f 	bl	800b1f4 <_free_r>
 800b4f6:	e7c8      	b.n	800b48a <__ssputs_r+0x46>

0800b4f8 <_svfiprintf_r>:
 800b4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fc:	461d      	mov	r5, r3
 800b4fe:	898b      	ldrh	r3, [r1, #12]
 800b500:	061f      	lsls	r7, r3, #24
 800b502:	b09d      	sub	sp, #116	; 0x74
 800b504:	4680      	mov	r8, r0
 800b506:	460c      	mov	r4, r1
 800b508:	4616      	mov	r6, r2
 800b50a:	d50f      	bpl.n	800b52c <_svfiprintf_r+0x34>
 800b50c:	690b      	ldr	r3, [r1, #16]
 800b50e:	b96b      	cbnz	r3, 800b52c <_svfiprintf_r+0x34>
 800b510:	2140      	movs	r1, #64	; 0x40
 800b512:	f7ff febd 	bl	800b290 <_malloc_r>
 800b516:	6020      	str	r0, [r4, #0]
 800b518:	6120      	str	r0, [r4, #16]
 800b51a:	b928      	cbnz	r0, 800b528 <_svfiprintf_r+0x30>
 800b51c:	230c      	movs	r3, #12
 800b51e:	f8c8 3000 	str.w	r3, [r8]
 800b522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b526:	e0c8      	b.n	800b6ba <_svfiprintf_r+0x1c2>
 800b528:	2340      	movs	r3, #64	; 0x40
 800b52a:	6163      	str	r3, [r4, #20]
 800b52c:	2300      	movs	r3, #0
 800b52e:	9309      	str	r3, [sp, #36]	; 0x24
 800b530:	2320      	movs	r3, #32
 800b532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b536:	2330      	movs	r3, #48	; 0x30
 800b538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b53c:	9503      	str	r5, [sp, #12]
 800b53e:	f04f 0b01 	mov.w	fp, #1
 800b542:	4637      	mov	r7, r6
 800b544:	463d      	mov	r5, r7
 800b546:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b54a:	b10b      	cbz	r3, 800b550 <_svfiprintf_r+0x58>
 800b54c:	2b25      	cmp	r3, #37	; 0x25
 800b54e:	d13e      	bne.n	800b5ce <_svfiprintf_r+0xd6>
 800b550:	ebb7 0a06 	subs.w	sl, r7, r6
 800b554:	d00b      	beq.n	800b56e <_svfiprintf_r+0x76>
 800b556:	4653      	mov	r3, sl
 800b558:	4632      	mov	r2, r6
 800b55a:	4621      	mov	r1, r4
 800b55c:	4640      	mov	r0, r8
 800b55e:	f7ff ff71 	bl	800b444 <__ssputs_r>
 800b562:	3001      	adds	r0, #1
 800b564:	f000 80a4 	beq.w	800b6b0 <_svfiprintf_r+0x1b8>
 800b568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b56a:	4453      	add	r3, sl
 800b56c:	9309      	str	r3, [sp, #36]	; 0x24
 800b56e:	783b      	ldrb	r3, [r7, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	f000 809d 	beq.w	800b6b0 <_svfiprintf_r+0x1b8>
 800b576:	2300      	movs	r3, #0
 800b578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b57c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b580:	9304      	str	r3, [sp, #16]
 800b582:	9307      	str	r3, [sp, #28]
 800b584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b588:	931a      	str	r3, [sp, #104]	; 0x68
 800b58a:	462f      	mov	r7, r5
 800b58c:	2205      	movs	r2, #5
 800b58e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b592:	4850      	ldr	r0, [pc, #320]	; (800b6d4 <_svfiprintf_r+0x1dc>)
 800b594:	f7f4 fe34 	bl	8000200 <memchr>
 800b598:	9b04      	ldr	r3, [sp, #16]
 800b59a:	b9d0      	cbnz	r0, 800b5d2 <_svfiprintf_r+0xda>
 800b59c:	06d9      	lsls	r1, r3, #27
 800b59e:	bf44      	itt	mi
 800b5a0:	2220      	movmi	r2, #32
 800b5a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b5a6:	071a      	lsls	r2, r3, #28
 800b5a8:	bf44      	itt	mi
 800b5aa:	222b      	movmi	r2, #43	; 0x2b
 800b5ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b5b0:	782a      	ldrb	r2, [r5, #0]
 800b5b2:	2a2a      	cmp	r2, #42	; 0x2a
 800b5b4:	d015      	beq.n	800b5e2 <_svfiprintf_r+0xea>
 800b5b6:	9a07      	ldr	r2, [sp, #28]
 800b5b8:	462f      	mov	r7, r5
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	250a      	movs	r5, #10
 800b5be:	4639      	mov	r1, r7
 800b5c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5c4:	3b30      	subs	r3, #48	; 0x30
 800b5c6:	2b09      	cmp	r3, #9
 800b5c8:	d94d      	bls.n	800b666 <_svfiprintf_r+0x16e>
 800b5ca:	b1b8      	cbz	r0, 800b5fc <_svfiprintf_r+0x104>
 800b5cc:	e00f      	b.n	800b5ee <_svfiprintf_r+0xf6>
 800b5ce:	462f      	mov	r7, r5
 800b5d0:	e7b8      	b.n	800b544 <_svfiprintf_r+0x4c>
 800b5d2:	4a40      	ldr	r2, [pc, #256]	; (800b6d4 <_svfiprintf_r+0x1dc>)
 800b5d4:	1a80      	subs	r0, r0, r2
 800b5d6:	fa0b f000 	lsl.w	r0, fp, r0
 800b5da:	4318      	orrs	r0, r3
 800b5dc:	9004      	str	r0, [sp, #16]
 800b5de:	463d      	mov	r5, r7
 800b5e0:	e7d3      	b.n	800b58a <_svfiprintf_r+0x92>
 800b5e2:	9a03      	ldr	r2, [sp, #12]
 800b5e4:	1d11      	adds	r1, r2, #4
 800b5e6:	6812      	ldr	r2, [r2, #0]
 800b5e8:	9103      	str	r1, [sp, #12]
 800b5ea:	2a00      	cmp	r2, #0
 800b5ec:	db01      	blt.n	800b5f2 <_svfiprintf_r+0xfa>
 800b5ee:	9207      	str	r2, [sp, #28]
 800b5f0:	e004      	b.n	800b5fc <_svfiprintf_r+0x104>
 800b5f2:	4252      	negs	r2, r2
 800b5f4:	f043 0302 	orr.w	r3, r3, #2
 800b5f8:	9207      	str	r2, [sp, #28]
 800b5fa:	9304      	str	r3, [sp, #16]
 800b5fc:	783b      	ldrb	r3, [r7, #0]
 800b5fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b600:	d10c      	bne.n	800b61c <_svfiprintf_r+0x124>
 800b602:	787b      	ldrb	r3, [r7, #1]
 800b604:	2b2a      	cmp	r3, #42	; 0x2a
 800b606:	d133      	bne.n	800b670 <_svfiprintf_r+0x178>
 800b608:	9b03      	ldr	r3, [sp, #12]
 800b60a:	1d1a      	adds	r2, r3, #4
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	9203      	str	r2, [sp, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	bfb8      	it	lt
 800b614:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b618:	3702      	adds	r7, #2
 800b61a:	9305      	str	r3, [sp, #20]
 800b61c:	4d2e      	ldr	r5, [pc, #184]	; (800b6d8 <_svfiprintf_r+0x1e0>)
 800b61e:	7839      	ldrb	r1, [r7, #0]
 800b620:	2203      	movs	r2, #3
 800b622:	4628      	mov	r0, r5
 800b624:	f7f4 fdec 	bl	8000200 <memchr>
 800b628:	b138      	cbz	r0, 800b63a <_svfiprintf_r+0x142>
 800b62a:	2340      	movs	r3, #64	; 0x40
 800b62c:	1b40      	subs	r0, r0, r5
 800b62e:	fa03 f000 	lsl.w	r0, r3, r0
 800b632:	9b04      	ldr	r3, [sp, #16]
 800b634:	4303      	orrs	r3, r0
 800b636:	3701      	adds	r7, #1
 800b638:	9304      	str	r3, [sp, #16]
 800b63a:	7839      	ldrb	r1, [r7, #0]
 800b63c:	4827      	ldr	r0, [pc, #156]	; (800b6dc <_svfiprintf_r+0x1e4>)
 800b63e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b642:	2206      	movs	r2, #6
 800b644:	1c7e      	adds	r6, r7, #1
 800b646:	f7f4 fddb 	bl	8000200 <memchr>
 800b64a:	2800      	cmp	r0, #0
 800b64c:	d038      	beq.n	800b6c0 <_svfiprintf_r+0x1c8>
 800b64e:	4b24      	ldr	r3, [pc, #144]	; (800b6e0 <_svfiprintf_r+0x1e8>)
 800b650:	bb13      	cbnz	r3, 800b698 <_svfiprintf_r+0x1a0>
 800b652:	9b03      	ldr	r3, [sp, #12]
 800b654:	3307      	adds	r3, #7
 800b656:	f023 0307 	bic.w	r3, r3, #7
 800b65a:	3308      	adds	r3, #8
 800b65c:	9303      	str	r3, [sp, #12]
 800b65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b660:	444b      	add	r3, r9
 800b662:	9309      	str	r3, [sp, #36]	; 0x24
 800b664:	e76d      	b.n	800b542 <_svfiprintf_r+0x4a>
 800b666:	fb05 3202 	mla	r2, r5, r2, r3
 800b66a:	2001      	movs	r0, #1
 800b66c:	460f      	mov	r7, r1
 800b66e:	e7a6      	b.n	800b5be <_svfiprintf_r+0xc6>
 800b670:	2300      	movs	r3, #0
 800b672:	3701      	adds	r7, #1
 800b674:	9305      	str	r3, [sp, #20]
 800b676:	4619      	mov	r1, r3
 800b678:	250a      	movs	r5, #10
 800b67a:	4638      	mov	r0, r7
 800b67c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b680:	3a30      	subs	r2, #48	; 0x30
 800b682:	2a09      	cmp	r2, #9
 800b684:	d903      	bls.n	800b68e <_svfiprintf_r+0x196>
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0c8      	beq.n	800b61c <_svfiprintf_r+0x124>
 800b68a:	9105      	str	r1, [sp, #20]
 800b68c:	e7c6      	b.n	800b61c <_svfiprintf_r+0x124>
 800b68e:	fb05 2101 	mla	r1, r5, r1, r2
 800b692:	2301      	movs	r3, #1
 800b694:	4607      	mov	r7, r0
 800b696:	e7f0      	b.n	800b67a <_svfiprintf_r+0x182>
 800b698:	ab03      	add	r3, sp, #12
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	4622      	mov	r2, r4
 800b69e:	4b11      	ldr	r3, [pc, #68]	; (800b6e4 <_svfiprintf_r+0x1ec>)
 800b6a0:	a904      	add	r1, sp, #16
 800b6a2:	4640      	mov	r0, r8
 800b6a4:	f3af 8000 	nop.w
 800b6a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b6ac:	4681      	mov	r9, r0
 800b6ae:	d1d6      	bne.n	800b65e <_svfiprintf_r+0x166>
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	065b      	lsls	r3, r3, #25
 800b6b4:	f53f af35 	bmi.w	800b522 <_svfiprintf_r+0x2a>
 800b6b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6ba:	b01d      	add	sp, #116	; 0x74
 800b6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c0:	ab03      	add	r3, sp, #12
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	4622      	mov	r2, r4
 800b6c6:	4b07      	ldr	r3, [pc, #28]	; (800b6e4 <_svfiprintf_r+0x1ec>)
 800b6c8:	a904      	add	r1, sp, #16
 800b6ca:	4640      	mov	r0, r8
 800b6cc:	f000 fa2c 	bl	800bb28 <_printf_i>
 800b6d0:	e7ea      	b.n	800b6a8 <_svfiprintf_r+0x1b0>
 800b6d2:	bf00      	nop
 800b6d4:	0800d174 	.word	0x0800d174
 800b6d8:	0800d17a 	.word	0x0800d17a
 800b6dc:	0800d17e 	.word	0x0800d17e
 800b6e0:	00000000 	.word	0x00000000
 800b6e4:	0800b445 	.word	0x0800b445

0800b6e8 <_sungetc_r>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	1c4b      	adds	r3, r1, #1
 800b6ec:	4614      	mov	r4, r2
 800b6ee:	d103      	bne.n	800b6f8 <_sungetc_r+0x10>
 800b6f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	8993      	ldrh	r3, [r2, #12]
 800b6fa:	f023 0320 	bic.w	r3, r3, #32
 800b6fe:	8193      	strh	r3, [r2, #12]
 800b700:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b702:	6852      	ldr	r2, [r2, #4]
 800b704:	b2cd      	uxtb	r5, r1
 800b706:	b18b      	cbz	r3, 800b72c <_sungetc_r+0x44>
 800b708:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b70a:	4293      	cmp	r3, r2
 800b70c:	dd08      	ble.n	800b720 <_sungetc_r+0x38>
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	1e5a      	subs	r2, r3, #1
 800b712:	6022      	str	r2, [r4, #0]
 800b714:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b718:	6863      	ldr	r3, [r4, #4]
 800b71a:	3301      	adds	r3, #1
 800b71c:	6063      	str	r3, [r4, #4]
 800b71e:	e7e9      	b.n	800b6f4 <_sungetc_r+0xc>
 800b720:	4621      	mov	r1, r4
 800b722:	f000 fdb9 	bl	800c298 <__submore>
 800b726:	2800      	cmp	r0, #0
 800b728:	d0f1      	beq.n	800b70e <_sungetc_r+0x26>
 800b72a:	e7e1      	b.n	800b6f0 <_sungetc_r+0x8>
 800b72c:	6921      	ldr	r1, [r4, #16]
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	b151      	cbz	r1, 800b748 <_sungetc_r+0x60>
 800b732:	4299      	cmp	r1, r3
 800b734:	d208      	bcs.n	800b748 <_sungetc_r+0x60>
 800b736:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b73a:	42a9      	cmp	r1, r5
 800b73c:	d104      	bne.n	800b748 <_sungetc_r+0x60>
 800b73e:	3b01      	subs	r3, #1
 800b740:	3201      	adds	r2, #1
 800b742:	6023      	str	r3, [r4, #0]
 800b744:	6062      	str	r2, [r4, #4]
 800b746:	e7d5      	b.n	800b6f4 <_sungetc_r+0xc>
 800b748:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b74c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b750:	6363      	str	r3, [r4, #52]	; 0x34
 800b752:	2303      	movs	r3, #3
 800b754:	63a3      	str	r3, [r4, #56]	; 0x38
 800b756:	4623      	mov	r3, r4
 800b758:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	2301      	movs	r3, #1
 800b760:	e7dc      	b.n	800b71c <_sungetc_r+0x34>

0800b762 <__ssrefill_r>:
 800b762:	b510      	push	{r4, lr}
 800b764:	460c      	mov	r4, r1
 800b766:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b768:	b169      	cbz	r1, 800b786 <__ssrefill_r+0x24>
 800b76a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b76e:	4299      	cmp	r1, r3
 800b770:	d001      	beq.n	800b776 <__ssrefill_r+0x14>
 800b772:	f7ff fd3f 	bl	800b1f4 <_free_r>
 800b776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b778:	6063      	str	r3, [r4, #4]
 800b77a:	2000      	movs	r0, #0
 800b77c:	6360      	str	r0, [r4, #52]	; 0x34
 800b77e:	b113      	cbz	r3, 800b786 <__ssrefill_r+0x24>
 800b780:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b782:	6023      	str	r3, [r4, #0]
 800b784:	bd10      	pop	{r4, pc}
 800b786:	6923      	ldr	r3, [r4, #16]
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	2300      	movs	r3, #0
 800b78c:	6063      	str	r3, [r4, #4]
 800b78e:	89a3      	ldrh	r3, [r4, #12]
 800b790:	f043 0320 	orr.w	r3, r3, #32
 800b794:	81a3      	strh	r3, [r4, #12]
 800b796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b79a:	e7f3      	b.n	800b784 <__ssrefill_r+0x22>

0800b79c <__ssvfiscanf_r>:
 800b79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	9144      	str	r1, [sp, #272]	; 0x110
 800b7aa:	9145      	str	r1, [sp, #276]	; 0x114
 800b7ac:	499f      	ldr	r1, [pc, #636]	; (800ba2c <__ssvfiscanf_r+0x290>)
 800b7ae:	91a0      	str	r1, [sp, #640]	; 0x280
 800b7b0:	f10d 0804 	add.w	r8, sp, #4
 800b7b4:	499e      	ldr	r1, [pc, #632]	; (800ba30 <__ssvfiscanf_r+0x294>)
 800b7b6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800ba34 <__ssvfiscanf_r+0x298>
 800b7ba:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b7be:	4606      	mov	r6, r0
 800b7c0:	4692      	mov	sl, r2
 800b7c2:	91a1      	str	r1, [sp, #644]	; 0x284
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	270a      	movs	r7, #10
 800b7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 812a 	beq.w	800ba26 <__ssvfiscanf_r+0x28a>
 800b7d2:	4655      	mov	r5, sl
 800b7d4:	f000 fd9e 	bl	800c314 <__locale_ctype_ptr>
 800b7d8:	f815 bb01 	ldrb.w	fp, [r5], #1
 800b7dc:	4458      	add	r0, fp
 800b7de:	7843      	ldrb	r3, [r0, #1]
 800b7e0:	f013 0308 	ands.w	r3, r3, #8
 800b7e4:	d01c      	beq.n	800b820 <__ssvfiscanf_r+0x84>
 800b7e6:	6863      	ldr	r3, [r4, #4]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	dd12      	ble.n	800b812 <__ssvfiscanf_r+0x76>
 800b7ec:	f000 fd92 	bl	800c314 <__locale_ctype_ptr>
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	781a      	ldrb	r2, [r3, #0]
 800b7f4:	4410      	add	r0, r2
 800b7f6:	7842      	ldrb	r2, [r0, #1]
 800b7f8:	0712      	lsls	r2, r2, #28
 800b7fa:	d401      	bmi.n	800b800 <__ssvfiscanf_r+0x64>
 800b7fc:	46aa      	mov	sl, r5
 800b7fe:	e7e3      	b.n	800b7c8 <__ssvfiscanf_r+0x2c>
 800b800:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b802:	3201      	adds	r2, #1
 800b804:	9245      	str	r2, [sp, #276]	; 0x114
 800b806:	6862      	ldr	r2, [r4, #4]
 800b808:	3301      	adds	r3, #1
 800b80a:	3a01      	subs	r2, #1
 800b80c:	6062      	str	r2, [r4, #4]
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	e7e9      	b.n	800b7e6 <__ssvfiscanf_r+0x4a>
 800b812:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b814:	4621      	mov	r1, r4
 800b816:	4630      	mov	r0, r6
 800b818:	4798      	blx	r3
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d0e6      	beq.n	800b7ec <__ssvfiscanf_r+0x50>
 800b81e:	e7ed      	b.n	800b7fc <__ssvfiscanf_r+0x60>
 800b820:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800b824:	f040 8082 	bne.w	800b92c <__ssvfiscanf_r+0x190>
 800b828:	9343      	str	r3, [sp, #268]	; 0x10c
 800b82a:	9341      	str	r3, [sp, #260]	; 0x104
 800b82c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800b830:	2b2a      	cmp	r3, #42	; 0x2a
 800b832:	d103      	bne.n	800b83c <__ssvfiscanf_r+0xa0>
 800b834:	2310      	movs	r3, #16
 800b836:	9341      	str	r3, [sp, #260]	; 0x104
 800b838:	f10a 0502 	add.w	r5, sl, #2
 800b83c:	46aa      	mov	sl, r5
 800b83e:	f815 1b01 	ldrb.w	r1, [r5], #1
 800b842:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b846:	2a09      	cmp	r2, #9
 800b848:	d922      	bls.n	800b890 <__ssvfiscanf_r+0xf4>
 800b84a:	2203      	movs	r2, #3
 800b84c:	4879      	ldr	r0, [pc, #484]	; (800ba34 <__ssvfiscanf_r+0x298>)
 800b84e:	f7f4 fcd7 	bl	8000200 <memchr>
 800b852:	b138      	cbz	r0, 800b864 <__ssvfiscanf_r+0xc8>
 800b854:	eba0 0309 	sub.w	r3, r0, r9
 800b858:	2001      	movs	r0, #1
 800b85a:	4098      	lsls	r0, r3
 800b85c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b85e:	4318      	orrs	r0, r3
 800b860:	9041      	str	r0, [sp, #260]	; 0x104
 800b862:	46aa      	mov	sl, r5
 800b864:	f89a 3000 	ldrb.w	r3, [sl]
 800b868:	2b67      	cmp	r3, #103	; 0x67
 800b86a:	f10a 0501 	add.w	r5, sl, #1
 800b86e:	d82b      	bhi.n	800b8c8 <__ssvfiscanf_r+0x12c>
 800b870:	2b65      	cmp	r3, #101	; 0x65
 800b872:	f080 809f 	bcs.w	800b9b4 <__ssvfiscanf_r+0x218>
 800b876:	2b47      	cmp	r3, #71	; 0x47
 800b878:	d810      	bhi.n	800b89c <__ssvfiscanf_r+0x100>
 800b87a:	2b45      	cmp	r3, #69	; 0x45
 800b87c:	f080 809a 	bcs.w	800b9b4 <__ssvfiscanf_r+0x218>
 800b880:	2b00      	cmp	r3, #0
 800b882:	d06c      	beq.n	800b95e <__ssvfiscanf_r+0x1c2>
 800b884:	2b25      	cmp	r3, #37	; 0x25
 800b886:	d051      	beq.n	800b92c <__ssvfiscanf_r+0x190>
 800b888:	2303      	movs	r3, #3
 800b88a:	9347      	str	r3, [sp, #284]	; 0x11c
 800b88c:	9742      	str	r7, [sp, #264]	; 0x108
 800b88e:	e027      	b.n	800b8e0 <__ssvfiscanf_r+0x144>
 800b890:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b892:	fb07 1303 	mla	r3, r7, r3, r1
 800b896:	3b30      	subs	r3, #48	; 0x30
 800b898:	9343      	str	r3, [sp, #268]	; 0x10c
 800b89a:	e7cf      	b.n	800b83c <__ssvfiscanf_r+0xa0>
 800b89c:	2b5b      	cmp	r3, #91	; 0x5b
 800b89e:	d06a      	beq.n	800b976 <__ssvfiscanf_r+0x1da>
 800b8a0:	d80c      	bhi.n	800b8bc <__ssvfiscanf_r+0x120>
 800b8a2:	2b58      	cmp	r3, #88	; 0x58
 800b8a4:	d1f0      	bne.n	800b888 <__ssvfiscanf_r+0xec>
 800b8a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b8a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8ac:	9241      	str	r2, [sp, #260]	; 0x104
 800b8ae:	2210      	movs	r2, #16
 800b8b0:	9242      	str	r2, [sp, #264]	; 0x108
 800b8b2:	2b6e      	cmp	r3, #110	; 0x6e
 800b8b4:	bf8c      	ite	hi
 800b8b6:	2304      	movhi	r3, #4
 800b8b8:	2303      	movls	r3, #3
 800b8ba:	e010      	b.n	800b8de <__ssvfiscanf_r+0x142>
 800b8bc:	2b63      	cmp	r3, #99	; 0x63
 800b8be:	d065      	beq.n	800b98c <__ssvfiscanf_r+0x1f0>
 800b8c0:	2b64      	cmp	r3, #100	; 0x64
 800b8c2:	d1e1      	bne.n	800b888 <__ssvfiscanf_r+0xec>
 800b8c4:	9742      	str	r7, [sp, #264]	; 0x108
 800b8c6:	e7f4      	b.n	800b8b2 <__ssvfiscanf_r+0x116>
 800b8c8:	2b70      	cmp	r3, #112	; 0x70
 800b8ca:	d04b      	beq.n	800b964 <__ssvfiscanf_r+0x1c8>
 800b8cc:	d826      	bhi.n	800b91c <__ssvfiscanf_r+0x180>
 800b8ce:	2b6e      	cmp	r3, #110	; 0x6e
 800b8d0:	d062      	beq.n	800b998 <__ssvfiscanf_r+0x1fc>
 800b8d2:	d84c      	bhi.n	800b96e <__ssvfiscanf_r+0x1d2>
 800b8d4:	2b69      	cmp	r3, #105	; 0x69
 800b8d6:	d1d7      	bne.n	800b888 <__ssvfiscanf_r+0xec>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	9342      	str	r3, [sp, #264]	; 0x108
 800b8dc:	2303      	movs	r3, #3
 800b8de:	9347      	str	r3, [sp, #284]	; 0x11c
 800b8e0:	6863      	ldr	r3, [r4, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	dd68      	ble.n	800b9b8 <__ssvfiscanf_r+0x21c>
 800b8e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b8e8:	0659      	lsls	r1, r3, #25
 800b8ea:	d407      	bmi.n	800b8fc <__ssvfiscanf_r+0x160>
 800b8ec:	f000 fd12 	bl	800c314 <__locale_ctype_ptr>
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	781a      	ldrb	r2, [r3, #0]
 800b8f4:	4410      	add	r0, r2
 800b8f6:	7842      	ldrb	r2, [r0, #1]
 800b8f8:	0712      	lsls	r2, r2, #28
 800b8fa:	d464      	bmi.n	800b9c6 <__ssvfiscanf_r+0x22a>
 800b8fc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	dc73      	bgt.n	800b9ea <__ssvfiscanf_r+0x24e>
 800b902:	466b      	mov	r3, sp
 800b904:	4622      	mov	r2, r4
 800b906:	a941      	add	r1, sp, #260	; 0x104
 800b908:	4630      	mov	r0, r6
 800b90a:	f000 fa1f 	bl	800bd4c <_scanf_chars>
 800b90e:	2801      	cmp	r0, #1
 800b910:	f000 8089 	beq.w	800ba26 <__ssvfiscanf_r+0x28a>
 800b914:	2802      	cmp	r0, #2
 800b916:	f47f af71 	bne.w	800b7fc <__ssvfiscanf_r+0x60>
 800b91a:	e01d      	b.n	800b958 <__ssvfiscanf_r+0x1bc>
 800b91c:	2b75      	cmp	r3, #117	; 0x75
 800b91e:	d0d1      	beq.n	800b8c4 <__ssvfiscanf_r+0x128>
 800b920:	2b78      	cmp	r3, #120	; 0x78
 800b922:	d0c0      	beq.n	800b8a6 <__ssvfiscanf_r+0x10a>
 800b924:	2b73      	cmp	r3, #115	; 0x73
 800b926:	d1af      	bne.n	800b888 <__ssvfiscanf_r+0xec>
 800b928:	2302      	movs	r3, #2
 800b92a:	e7d8      	b.n	800b8de <__ssvfiscanf_r+0x142>
 800b92c:	6863      	ldr	r3, [r4, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	dd0c      	ble.n	800b94c <__ssvfiscanf_r+0x1b0>
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	781a      	ldrb	r2, [r3, #0]
 800b936:	455a      	cmp	r2, fp
 800b938:	d175      	bne.n	800ba26 <__ssvfiscanf_r+0x28a>
 800b93a:	3301      	adds	r3, #1
 800b93c:	6862      	ldr	r2, [r4, #4]
 800b93e:	6023      	str	r3, [r4, #0]
 800b940:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b942:	3a01      	subs	r2, #1
 800b944:	3301      	adds	r3, #1
 800b946:	6062      	str	r2, [r4, #4]
 800b948:	9345      	str	r3, [sp, #276]	; 0x114
 800b94a:	e757      	b.n	800b7fc <__ssvfiscanf_r+0x60>
 800b94c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b94e:	4621      	mov	r1, r4
 800b950:	4630      	mov	r0, r6
 800b952:	4798      	blx	r3
 800b954:	2800      	cmp	r0, #0
 800b956:	d0ec      	beq.n	800b932 <__ssvfiscanf_r+0x196>
 800b958:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b95a:	2800      	cmp	r0, #0
 800b95c:	d159      	bne.n	800ba12 <__ssvfiscanf_r+0x276>
 800b95e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b962:	e05c      	b.n	800ba1e <__ssvfiscanf_r+0x282>
 800b964:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b966:	f042 0220 	orr.w	r2, r2, #32
 800b96a:	9241      	str	r2, [sp, #260]	; 0x104
 800b96c:	e79b      	b.n	800b8a6 <__ssvfiscanf_r+0x10a>
 800b96e:	2308      	movs	r3, #8
 800b970:	9342      	str	r3, [sp, #264]	; 0x108
 800b972:	2304      	movs	r3, #4
 800b974:	e7b3      	b.n	800b8de <__ssvfiscanf_r+0x142>
 800b976:	4629      	mov	r1, r5
 800b978:	4640      	mov	r0, r8
 800b97a:	f000 fb3f 	bl	800bffc <__sccl>
 800b97e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b984:	9341      	str	r3, [sp, #260]	; 0x104
 800b986:	4605      	mov	r5, r0
 800b988:	2301      	movs	r3, #1
 800b98a:	e7a8      	b.n	800b8de <__ssvfiscanf_r+0x142>
 800b98c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b98e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b992:	9341      	str	r3, [sp, #260]	; 0x104
 800b994:	2300      	movs	r3, #0
 800b996:	e7a2      	b.n	800b8de <__ssvfiscanf_r+0x142>
 800b998:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b99a:	06c3      	lsls	r3, r0, #27
 800b99c:	f53f af2e 	bmi.w	800b7fc <__ssvfiscanf_r+0x60>
 800b9a0:	9b00      	ldr	r3, [sp, #0]
 800b9a2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b9a4:	1d19      	adds	r1, r3, #4
 800b9a6:	9100      	str	r1, [sp, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	07c0      	lsls	r0, r0, #31
 800b9ac:	bf4c      	ite	mi
 800b9ae:	801a      	strhmi	r2, [r3, #0]
 800b9b0:	601a      	strpl	r2, [r3, #0]
 800b9b2:	e723      	b.n	800b7fc <__ssvfiscanf_r+0x60>
 800b9b4:	2305      	movs	r3, #5
 800b9b6:	e792      	b.n	800b8de <__ssvfiscanf_r+0x142>
 800b9b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	4630      	mov	r0, r6
 800b9be:	4798      	blx	r3
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d090      	beq.n	800b8e6 <__ssvfiscanf_r+0x14a>
 800b9c4:	e7c8      	b.n	800b958 <__ssvfiscanf_r+0x1bc>
 800b9c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b9c8:	3201      	adds	r2, #1
 800b9ca:	9245      	str	r2, [sp, #276]	; 0x114
 800b9cc:	6862      	ldr	r2, [r4, #4]
 800b9ce:	3a01      	subs	r2, #1
 800b9d0:	2a00      	cmp	r2, #0
 800b9d2:	6062      	str	r2, [r4, #4]
 800b9d4:	dd02      	ble.n	800b9dc <__ssvfiscanf_r+0x240>
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	6023      	str	r3, [r4, #0]
 800b9da:	e787      	b.n	800b8ec <__ssvfiscanf_r+0x150>
 800b9dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	4798      	blx	r3
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	d081      	beq.n	800b8ec <__ssvfiscanf_r+0x150>
 800b9e8:	e7b6      	b.n	800b958 <__ssvfiscanf_r+0x1bc>
 800b9ea:	2b04      	cmp	r3, #4
 800b9ec:	dc06      	bgt.n	800b9fc <__ssvfiscanf_r+0x260>
 800b9ee:	466b      	mov	r3, sp
 800b9f0:	4622      	mov	r2, r4
 800b9f2:	a941      	add	r1, sp, #260	; 0x104
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f000 fa0d 	bl	800be14 <_scanf_i>
 800b9fa:	e788      	b.n	800b90e <__ssvfiscanf_r+0x172>
 800b9fc:	4b0e      	ldr	r3, [pc, #56]	; (800ba38 <__ssvfiscanf_r+0x29c>)
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f43f aefc 	beq.w	800b7fc <__ssvfiscanf_r+0x60>
 800ba04:	466b      	mov	r3, sp
 800ba06:	4622      	mov	r2, r4
 800ba08:	a941      	add	r1, sp, #260	; 0x104
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f3af 8000 	nop.w
 800ba10:	e77d      	b.n	800b90e <__ssvfiscanf_r+0x172>
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ba18:	bf18      	it	ne
 800ba1a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800ba1e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800ba22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba26:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ba28:	e7f9      	b.n	800ba1e <__ssvfiscanf_r+0x282>
 800ba2a:	bf00      	nop
 800ba2c:	0800b6e9 	.word	0x0800b6e9
 800ba30:	0800b763 	.word	0x0800b763
 800ba34:	0800d17a 	.word	0x0800d17a
 800ba38:	00000000 	.word	0x00000000

0800ba3c <_printf_common>:
 800ba3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba40:	4691      	mov	r9, r2
 800ba42:	461f      	mov	r7, r3
 800ba44:	688a      	ldr	r2, [r1, #8]
 800ba46:	690b      	ldr	r3, [r1, #16]
 800ba48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	bfb8      	it	lt
 800ba50:	4613      	movlt	r3, r2
 800ba52:	f8c9 3000 	str.w	r3, [r9]
 800ba56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	460c      	mov	r4, r1
 800ba5e:	b112      	cbz	r2, 800ba66 <_printf_common+0x2a>
 800ba60:	3301      	adds	r3, #1
 800ba62:	f8c9 3000 	str.w	r3, [r9]
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	0699      	lsls	r1, r3, #26
 800ba6a:	bf42      	ittt	mi
 800ba6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ba70:	3302      	addmi	r3, #2
 800ba72:	f8c9 3000 	strmi.w	r3, [r9]
 800ba76:	6825      	ldr	r5, [r4, #0]
 800ba78:	f015 0506 	ands.w	r5, r5, #6
 800ba7c:	d107      	bne.n	800ba8e <_printf_common+0x52>
 800ba7e:	f104 0a19 	add.w	sl, r4, #25
 800ba82:	68e3      	ldr	r3, [r4, #12]
 800ba84:	f8d9 2000 	ldr.w	r2, [r9]
 800ba88:	1a9b      	subs	r3, r3, r2
 800ba8a:	42ab      	cmp	r3, r5
 800ba8c:	dc28      	bgt.n	800bae0 <_printf_common+0xa4>
 800ba8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	3300      	adds	r3, #0
 800ba96:	bf18      	it	ne
 800ba98:	2301      	movne	r3, #1
 800ba9a:	0692      	lsls	r2, r2, #26
 800ba9c:	d42d      	bmi.n	800bafa <_printf_common+0xbe>
 800ba9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800baa2:	4639      	mov	r1, r7
 800baa4:	4630      	mov	r0, r6
 800baa6:	47c0      	blx	r8
 800baa8:	3001      	adds	r0, #1
 800baaa:	d020      	beq.n	800baee <_printf_common+0xb2>
 800baac:	6823      	ldr	r3, [r4, #0]
 800baae:	68e5      	ldr	r5, [r4, #12]
 800bab0:	f8d9 2000 	ldr.w	r2, [r9]
 800bab4:	f003 0306 	and.w	r3, r3, #6
 800bab8:	2b04      	cmp	r3, #4
 800baba:	bf08      	it	eq
 800babc:	1aad      	subeq	r5, r5, r2
 800babe:	68a3      	ldr	r3, [r4, #8]
 800bac0:	6922      	ldr	r2, [r4, #16]
 800bac2:	bf0c      	ite	eq
 800bac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bac8:	2500      	movne	r5, #0
 800baca:	4293      	cmp	r3, r2
 800bacc:	bfc4      	itt	gt
 800bace:	1a9b      	subgt	r3, r3, r2
 800bad0:	18ed      	addgt	r5, r5, r3
 800bad2:	f04f 0900 	mov.w	r9, #0
 800bad6:	341a      	adds	r4, #26
 800bad8:	454d      	cmp	r5, r9
 800bada:	d11a      	bne.n	800bb12 <_printf_common+0xd6>
 800badc:	2000      	movs	r0, #0
 800bade:	e008      	b.n	800baf2 <_printf_common+0xb6>
 800bae0:	2301      	movs	r3, #1
 800bae2:	4652      	mov	r2, sl
 800bae4:	4639      	mov	r1, r7
 800bae6:	4630      	mov	r0, r6
 800bae8:	47c0      	blx	r8
 800baea:	3001      	adds	r0, #1
 800baec:	d103      	bne.n	800baf6 <_printf_common+0xba>
 800baee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800baf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf6:	3501      	adds	r5, #1
 800baf8:	e7c3      	b.n	800ba82 <_printf_common+0x46>
 800bafa:	18e1      	adds	r1, r4, r3
 800bafc:	1c5a      	adds	r2, r3, #1
 800bafe:	2030      	movs	r0, #48	; 0x30
 800bb00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb04:	4422      	add	r2, r4
 800bb06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb0e:	3302      	adds	r3, #2
 800bb10:	e7c5      	b.n	800ba9e <_printf_common+0x62>
 800bb12:	2301      	movs	r3, #1
 800bb14:	4622      	mov	r2, r4
 800bb16:	4639      	mov	r1, r7
 800bb18:	4630      	mov	r0, r6
 800bb1a:	47c0      	blx	r8
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	d0e6      	beq.n	800baee <_printf_common+0xb2>
 800bb20:	f109 0901 	add.w	r9, r9, #1
 800bb24:	e7d8      	b.n	800bad8 <_printf_common+0x9c>
	...

0800bb28 <_printf_i>:
 800bb28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bb30:	460c      	mov	r4, r1
 800bb32:	7e09      	ldrb	r1, [r1, #24]
 800bb34:	b085      	sub	sp, #20
 800bb36:	296e      	cmp	r1, #110	; 0x6e
 800bb38:	4617      	mov	r7, r2
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	4698      	mov	r8, r3
 800bb3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb40:	f000 80b3 	beq.w	800bcaa <_printf_i+0x182>
 800bb44:	d822      	bhi.n	800bb8c <_printf_i+0x64>
 800bb46:	2963      	cmp	r1, #99	; 0x63
 800bb48:	d036      	beq.n	800bbb8 <_printf_i+0x90>
 800bb4a:	d80a      	bhi.n	800bb62 <_printf_i+0x3a>
 800bb4c:	2900      	cmp	r1, #0
 800bb4e:	f000 80b9 	beq.w	800bcc4 <_printf_i+0x19c>
 800bb52:	2958      	cmp	r1, #88	; 0x58
 800bb54:	f000 8083 	beq.w	800bc5e <_printf_i+0x136>
 800bb58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bb60:	e032      	b.n	800bbc8 <_printf_i+0xa0>
 800bb62:	2964      	cmp	r1, #100	; 0x64
 800bb64:	d001      	beq.n	800bb6a <_printf_i+0x42>
 800bb66:	2969      	cmp	r1, #105	; 0x69
 800bb68:	d1f6      	bne.n	800bb58 <_printf_i+0x30>
 800bb6a:	6820      	ldr	r0, [r4, #0]
 800bb6c:	6813      	ldr	r3, [r2, #0]
 800bb6e:	0605      	lsls	r5, r0, #24
 800bb70:	f103 0104 	add.w	r1, r3, #4
 800bb74:	d52a      	bpl.n	800bbcc <_printf_i+0xa4>
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6011      	str	r1, [r2, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	da03      	bge.n	800bb86 <_printf_i+0x5e>
 800bb7e:	222d      	movs	r2, #45	; 0x2d
 800bb80:	425b      	negs	r3, r3
 800bb82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bb86:	486f      	ldr	r0, [pc, #444]	; (800bd44 <_printf_i+0x21c>)
 800bb88:	220a      	movs	r2, #10
 800bb8a:	e039      	b.n	800bc00 <_printf_i+0xd8>
 800bb8c:	2973      	cmp	r1, #115	; 0x73
 800bb8e:	f000 809d 	beq.w	800bccc <_printf_i+0x1a4>
 800bb92:	d808      	bhi.n	800bba6 <_printf_i+0x7e>
 800bb94:	296f      	cmp	r1, #111	; 0x6f
 800bb96:	d020      	beq.n	800bbda <_printf_i+0xb2>
 800bb98:	2970      	cmp	r1, #112	; 0x70
 800bb9a:	d1dd      	bne.n	800bb58 <_printf_i+0x30>
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	f043 0320 	orr.w	r3, r3, #32
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	e003      	b.n	800bbae <_printf_i+0x86>
 800bba6:	2975      	cmp	r1, #117	; 0x75
 800bba8:	d017      	beq.n	800bbda <_printf_i+0xb2>
 800bbaa:	2978      	cmp	r1, #120	; 0x78
 800bbac:	d1d4      	bne.n	800bb58 <_printf_i+0x30>
 800bbae:	2378      	movs	r3, #120	; 0x78
 800bbb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bbb4:	4864      	ldr	r0, [pc, #400]	; (800bd48 <_printf_i+0x220>)
 800bbb6:	e055      	b.n	800bc64 <_printf_i+0x13c>
 800bbb8:	6813      	ldr	r3, [r2, #0]
 800bbba:	1d19      	adds	r1, r3, #4
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	6011      	str	r1, [r2, #0]
 800bbc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e08c      	b.n	800bce6 <_printf_i+0x1be>
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	6011      	str	r1, [r2, #0]
 800bbd0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbd4:	bf18      	it	ne
 800bbd6:	b21b      	sxthne	r3, r3
 800bbd8:	e7cf      	b.n	800bb7a <_printf_i+0x52>
 800bbda:	6813      	ldr	r3, [r2, #0]
 800bbdc:	6825      	ldr	r5, [r4, #0]
 800bbde:	1d18      	adds	r0, r3, #4
 800bbe0:	6010      	str	r0, [r2, #0]
 800bbe2:	0628      	lsls	r0, r5, #24
 800bbe4:	d501      	bpl.n	800bbea <_printf_i+0xc2>
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	e002      	b.n	800bbf0 <_printf_i+0xc8>
 800bbea:	0668      	lsls	r0, r5, #25
 800bbec:	d5fb      	bpl.n	800bbe6 <_printf_i+0xbe>
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	4854      	ldr	r0, [pc, #336]	; (800bd44 <_printf_i+0x21c>)
 800bbf2:	296f      	cmp	r1, #111	; 0x6f
 800bbf4:	bf14      	ite	ne
 800bbf6:	220a      	movne	r2, #10
 800bbf8:	2208      	moveq	r2, #8
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc00:	6865      	ldr	r5, [r4, #4]
 800bc02:	60a5      	str	r5, [r4, #8]
 800bc04:	2d00      	cmp	r5, #0
 800bc06:	f2c0 8095 	blt.w	800bd34 <_printf_i+0x20c>
 800bc0a:	6821      	ldr	r1, [r4, #0]
 800bc0c:	f021 0104 	bic.w	r1, r1, #4
 800bc10:	6021      	str	r1, [r4, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d13d      	bne.n	800bc92 <_printf_i+0x16a>
 800bc16:	2d00      	cmp	r5, #0
 800bc18:	f040 808e 	bne.w	800bd38 <_printf_i+0x210>
 800bc1c:	4665      	mov	r5, ip
 800bc1e:	2a08      	cmp	r2, #8
 800bc20:	d10b      	bne.n	800bc3a <_printf_i+0x112>
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	07db      	lsls	r3, r3, #31
 800bc26:	d508      	bpl.n	800bc3a <_printf_i+0x112>
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	6862      	ldr	r2, [r4, #4]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	bfde      	ittt	le
 800bc30:	2330      	movle	r3, #48	; 0x30
 800bc32:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc36:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bc3a:	ebac 0305 	sub.w	r3, ip, r5
 800bc3e:	6123      	str	r3, [r4, #16]
 800bc40:	f8cd 8000 	str.w	r8, [sp]
 800bc44:	463b      	mov	r3, r7
 800bc46:	aa03      	add	r2, sp, #12
 800bc48:	4621      	mov	r1, r4
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7ff fef6 	bl	800ba3c <_printf_common>
 800bc50:	3001      	adds	r0, #1
 800bc52:	d14d      	bne.n	800bcf0 <_printf_i+0x1c8>
 800bc54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc58:	b005      	add	sp, #20
 800bc5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc5e:	4839      	ldr	r0, [pc, #228]	; (800bd44 <_printf_i+0x21c>)
 800bc60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bc64:	6813      	ldr	r3, [r2, #0]
 800bc66:	6821      	ldr	r1, [r4, #0]
 800bc68:	1d1d      	adds	r5, r3, #4
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6015      	str	r5, [r2, #0]
 800bc6e:	060a      	lsls	r2, r1, #24
 800bc70:	d50b      	bpl.n	800bc8a <_printf_i+0x162>
 800bc72:	07ca      	lsls	r2, r1, #31
 800bc74:	bf44      	itt	mi
 800bc76:	f041 0120 	orrmi.w	r1, r1, #32
 800bc7a:	6021      	strmi	r1, [r4, #0]
 800bc7c:	b91b      	cbnz	r3, 800bc86 <_printf_i+0x15e>
 800bc7e:	6822      	ldr	r2, [r4, #0]
 800bc80:	f022 0220 	bic.w	r2, r2, #32
 800bc84:	6022      	str	r2, [r4, #0]
 800bc86:	2210      	movs	r2, #16
 800bc88:	e7b7      	b.n	800bbfa <_printf_i+0xd2>
 800bc8a:	064d      	lsls	r5, r1, #25
 800bc8c:	bf48      	it	mi
 800bc8e:	b29b      	uxthmi	r3, r3
 800bc90:	e7ef      	b.n	800bc72 <_printf_i+0x14a>
 800bc92:	4665      	mov	r5, ip
 800bc94:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc98:	fb02 3311 	mls	r3, r2, r1, r3
 800bc9c:	5cc3      	ldrb	r3, [r0, r3]
 800bc9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bca2:	460b      	mov	r3, r1
 800bca4:	2900      	cmp	r1, #0
 800bca6:	d1f5      	bne.n	800bc94 <_printf_i+0x16c>
 800bca8:	e7b9      	b.n	800bc1e <_printf_i+0xf6>
 800bcaa:	6813      	ldr	r3, [r2, #0]
 800bcac:	6825      	ldr	r5, [r4, #0]
 800bcae:	6961      	ldr	r1, [r4, #20]
 800bcb0:	1d18      	adds	r0, r3, #4
 800bcb2:	6010      	str	r0, [r2, #0]
 800bcb4:	0628      	lsls	r0, r5, #24
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	d501      	bpl.n	800bcbe <_printf_i+0x196>
 800bcba:	6019      	str	r1, [r3, #0]
 800bcbc:	e002      	b.n	800bcc4 <_printf_i+0x19c>
 800bcbe:	066a      	lsls	r2, r5, #25
 800bcc0:	d5fb      	bpl.n	800bcba <_printf_i+0x192>
 800bcc2:	8019      	strh	r1, [r3, #0]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	6123      	str	r3, [r4, #16]
 800bcc8:	4665      	mov	r5, ip
 800bcca:	e7b9      	b.n	800bc40 <_printf_i+0x118>
 800bccc:	6813      	ldr	r3, [r2, #0]
 800bcce:	1d19      	adds	r1, r3, #4
 800bcd0:	6011      	str	r1, [r2, #0]
 800bcd2:	681d      	ldr	r5, [r3, #0]
 800bcd4:	6862      	ldr	r2, [r4, #4]
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	4628      	mov	r0, r5
 800bcda:	f7f4 fa91 	bl	8000200 <memchr>
 800bcde:	b108      	cbz	r0, 800bce4 <_printf_i+0x1bc>
 800bce0:	1b40      	subs	r0, r0, r5
 800bce2:	6060      	str	r0, [r4, #4]
 800bce4:	6863      	ldr	r3, [r4, #4]
 800bce6:	6123      	str	r3, [r4, #16]
 800bce8:	2300      	movs	r3, #0
 800bcea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcee:	e7a7      	b.n	800bc40 <_printf_i+0x118>
 800bcf0:	6923      	ldr	r3, [r4, #16]
 800bcf2:	462a      	mov	r2, r5
 800bcf4:	4639      	mov	r1, r7
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	47c0      	blx	r8
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	d0aa      	beq.n	800bc54 <_printf_i+0x12c>
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	079b      	lsls	r3, r3, #30
 800bd02:	d413      	bmi.n	800bd2c <_printf_i+0x204>
 800bd04:	68e0      	ldr	r0, [r4, #12]
 800bd06:	9b03      	ldr	r3, [sp, #12]
 800bd08:	4298      	cmp	r0, r3
 800bd0a:	bfb8      	it	lt
 800bd0c:	4618      	movlt	r0, r3
 800bd0e:	e7a3      	b.n	800bc58 <_printf_i+0x130>
 800bd10:	2301      	movs	r3, #1
 800bd12:	464a      	mov	r2, r9
 800bd14:	4639      	mov	r1, r7
 800bd16:	4630      	mov	r0, r6
 800bd18:	47c0      	blx	r8
 800bd1a:	3001      	adds	r0, #1
 800bd1c:	d09a      	beq.n	800bc54 <_printf_i+0x12c>
 800bd1e:	3501      	adds	r5, #1
 800bd20:	68e3      	ldr	r3, [r4, #12]
 800bd22:	9a03      	ldr	r2, [sp, #12]
 800bd24:	1a9b      	subs	r3, r3, r2
 800bd26:	42ab      	cmp	r3, r5
 800bd28:	dcf2      	bgt.n	800bd10 <_printf_i+0x1e8>
 800bd2a:	e7eb      	b.n	800bd04 <_printf_i+0x1dc>
 800bd2c:	2500      	movs	r5, #0
 800bd2e:	f104 0919 	add.w	r9, r4, #25
 800bd32:	e7f5      	b.n	800bd20 <_printf_i+0x1f8>
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1ac      	bne.n	800bc92 <_printf_i+0x16a>
 800bd38:	7803      	ldrb	r3, [r0, #0]
 800bd3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd42:	e76c      	b.n	800bc1e <_printf_i+0xf6>
 800bd44:	0800d185 	.word	0x0800d185
 800bd48:	0800d196 	.word	0x0800d196

0800bd4c <_scanf_chars>:
 800bd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd50:	4615      	mov	r5, r2
 800bd52:	688a      	ldr	r2, [r1, #8]
 800bd54:	4680      	mov	r8, r0
 800bd56:	460c      	mov	r4, r1
 800bd58:	b932      	cbnz	r2, 800bd68 <_scanf_chars+0x1c>
 800bd5a:	698a      	ldr	r2, [r1, #24]
 800bd5c:	2a00      	cmp	r2, #0
 800bd5e:	bf14      	ite	ne
 800bd60:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800bd64:	2201      	moveq	r2, #1
 800bd66:	608a      	str	r2, [r1, #8]
 800bd68:	6822      	ldr	r2, [r4, #0]
 800bd6a:	06d1      	lsls	r1, r2, #27
 800bd6c:	bf5f      	itttt	pl
 800bd6e:	681a      	ldrpl	r2, [r3, #0]
 800bd70:	1d11      	addpl	r1, r2, #4
 800bd72:	6019      	strpl	r1, [r3, #0]
 800bd74:	6817      	ldrpl	r7, [r2, #0]
 800bd76:	2600      	movs	r6, #0
 800bd78:	69a3      	ldr	r3, [r4, #24]
 800bd7a:	b1db      	cbz	r3, 800bdb4 <_scanf_chars+0x68>
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d107      	bne.n	800bd90 <_scanf_chars+0x44>
 800bd80:	682b      	ldr	r3, [r5, #0]
 800bd82:	6962      	ldr	r2, [r4, #20]
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	5cd3      	ldrb	r3, [r2, r3]
 800bd88:	b9a3      	cbnz	r3, 800bdb4 <_scanf_chars+0x68>
 800bd8a:	2e00      	cmp	r6, #0
 800bd8c:	d132      	bne.n	800bdf4 <_scanf_chars+0xa8>
 800bd8e:	e006      	b.n	800bd9e <_scanf_chars+0x52>
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d007      	beq.n	800bda4 <_scanf_chars+0x58>
 800bd94:	2e00      	cmp	r6, #0
 800bd96:	d12d      	bne.n	800bdf4 <_scanf_chars+0xa8>
 800bd98:	69a3      	ldr	r3, [r4, #24]
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d12a      	bne.n	800bdf4 <_scanf_chars+0xa8>
 800bd9e:	2001      	movs	r0, #1
 800bda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda4:	f000 fab6 	bl	800c314 <__locale_ctype_ptr>
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	4418      	add	r0, r3
 800bdae:	7843      	ldrb	r3, [r0, #1]
 800bdb0:	071b      	lsls	r3, r3, #28
 800bdb2:	d4ef      	bmi.n	800bd94 <_scanf_chars+0x48>
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	06da      	lsls	r2, r3, #27
 800bdb8:	bf5e      	ittt	pl
 800bdba:	682b      	ldrpl	r3, [r5, #0]
 800bdbc:	781b      	ldrbpl	r3, [r3, #0]
 800bdbe:	703b      	strbpl	r3, [r7, #0]
 800bdc0:	682a      	ldr	r2, [r5, #0]
 800bdc2:	686b      	ldr	r3, [r5, #4]
 800bdc4:	f102 0201 	add.w	r2, r2, #1
 800bdc8:	602a      	str	r2, [r5, #0]
 800bdca:	68a2      	ldr	r2, [r4, #8]
 800bdcc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bdd0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800bdd4:	606b      	str	r3, [r5, #4]
 800bdd6:	f106 0601 	add.w	r6, r6, #1
 800bdda:	bf58      	it	pl
 800bddc:	3701      	addpl	r7, #1
 800bdde:	60a2      	str	r2, [r4, #8]
 800bde0:	b142      	cbz	r2, 800bdf4 <_scanf_chars+0xa8>
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	dcc8      	bgt.n	800bd78 <_scanf_chars+0x2c>
 800bde6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bdea:	4629      	mov	r1, r5
 800bdec:	4640      	mov	r0, r8
 800bdee:	4798      	blx	r3
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	d0c1      	beq.n	800bd78 <_scanf_chars+0x2c>
 800bdf4:	6823      	ldr	r3, [r4, #0]
 800bdf6:	f013 0310 	ands.w	r3, r3, #16
 800bdfa:	d105      	bne.n	800be08 <_scanf_chars+0xbc>
 800bdfc:	68e2      	ldr	r2, [r4, #12]
 800bdfe:	3201      	adds	r2, #1
 800be00:	60e2      	str	r2, [r4, #12]
 800be02:	69a2      	ldr	r2, [r4, #24]
 800be04:	b102      	cbz	r2, 800be08 <_scanf_chars+0xbc>
 800be06:	703b      	strb	r3, [r7, #0]
 800be08:	6923      	ldr	r3, [r4, #16]
 800be0a:	441e      	add	r6, r3
 800be0c:	6126      	str	r6, [r4, #16]
 800be0e:	2000      	movs	r0, #0
 800be10:	e7c6      	b.n	800bda0 <_scanf_chars+0x54>
	...

0800be14 <_scanf_i>:
 800be14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be18:	469a      	mov	sl, r3
 800be1a:	4b74      	ldr	r3, [pc, #464]	; (800bfec <_scanf_i+0x1d8>)
 800be1c:	460c      	mov	r4, r1
 800be1e:	4683      	mov	fp, r0
 800be20:	4616      	mov	r6, r2
 800be22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be26:	b087      	sub	sp, #28
 800be28:	ab03      	add	r3, sp, #12
 800be2a:	68a7      	ldr	r7, [r4, #8]
 800be2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800be30:	4b6f      	ldr	r3, [pc, #444]	; (800bff0 <_scanf_i+0x1dc>)
 800be32:	69a1      	ldr	r1, [r4, #24]
 800be34:	4a6f      	ldr	r2, [pc, #444]	; (800bff4 <_scanf_i+0x1e0>)
 800be36:	2903      	cmp	r1, #3
 800be38:	bf08      	it	eq
 800be3a:	461a      	moveq	r2, r3
 800be3c:	1e7b      	subs	r3, r7, #1
 800be3e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800be42:	bf84      	itt	hi
 800be44:	f240 135d 	movwhi	r3, #349	; 0x15d
 800be48:	60a3      	strhi	r3, [r4, #8]
 800be4a:	6823      	ldr	r3, [r4, #0]
 800be4c:	9200      	str	r2, [sp, #0]
 800be4e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800be52:	bf88      	it	hi
 800be54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800be58:	f104 091c 	add.w	r9, r4, #28
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	bf8c      	ite	hi
 800be60:	197f      	addhi	r7, r7, r5
 800be62:	2700      	movls	r7, #0
 800be64:	464b      	mov	r3, r9
 800be66:	f04f 0800 	mov.w	r8, #0
 800be6a:	9301      	str	r3, [sp, #4]
 800be6c:	6831      	ldr	r1, [r6, #0]
 800be6e:	ab03      	add	r3, sp, #12
 800be70:	2202      	movs	r2, #2
 800be72:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800be76:	7809      	ldrb	r1, [r1, #0]
 800be78:	f7f4 f9c2 	bl	8000200 <memchr>
 800be7c:	9b01      	ldr	r3, [sp, #4]
 800be7e:	b330      	cbz	r0, 800bece <_scanf_i+0xba>
 800be80:	f1b8 0f01 	cmp.w	r8, #1
 800be84:	d15a      	bne.n	800bf3c <_scanf_i+0x128>
 800be86:	6862      	ldr	r2, [r4, #4]
 800be88:	b92a      	cbnz	r2, 800be96 <_scanf_i+0x82>
 800be8a:	6822      	ldr	r2, [r4, #0]
 800be8c:	2108      	movs	r1, #8
 800be8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be92:	6061      	str	r1, [r4, #4]
 800be94:	6022      	str	r2, [r4, #0]
 800be96:	6822      	ldr	r2, [r4, #0]
 800be98:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800be9c:	6022      	str	r2, [r4, #0]
 800be9e:	68a2      	ldr	r2, [r4, #8]
 800bea0:	1e51      	subs	r1, r2, #1
 800bea2:	60a1      	str	r1, [r4, #8]
 800bea4:	b19a      	cbz	r2, 800bece <_scanf_i+0xba>
 800bea6:	6832      	ldr	r2, [r6, #0]
 800bea8:	1c51      	adds	r1, r2, #1
 800beaa:	6031      	str	r1, [r6, #0]
 800beac:	7812      	ldrb	r2, [r2, #0]
 800beae:	701a      	strb	r2, [r3, #0]
 800beb0:	1c5d      	adds	r5, r3, #1
 800beb2:	6873      	ldr	r3, [r6, #4]
 800beb4:	3b01      	subs	r3, #1
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	6073      	str	r3, [r6, #4]
 800beba:	dc07      	bgt.n	800becc <_scanf_i+0xb8>
 800bebc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bec0:	4631      	mov	r1, r6
 800bec2:	4658      	mov	r0, fp
 800bec4:	4798      	blx	r3
 800bec6:	2800      	cmp	r0, #0
 800bec8:	f040 8086 	bne.w	800bfd8 <_scanf_i+0x1c4>
 800becc:	462b      	mov	r3, r5
 800bece:	f108 0801 	add.w	r8, r8, #1
 800bed2:	f1b8 0f03 	cmp.w	r8, #3
 800bed6:	d1c8      	bne.n	800be6a <_scanf_i+0x56>
 800bed8:	6862      	ldr	r2, [r4, #4]
 800beda:	b90a      	cbnz	r2, 800bee0 <_scanf_i+0xcc>
 800bedc:	220a      	movs	r2, #10
 800bede:	6062      	str	r2, [r4, #4]
 800bee0:	6862      	ldr	r2, [r4, #4]
 800bee2:	4945      	ldr	r1, [pc, #276]	; (800bff8 <_scanf_i+0x1e4>)
 800bee4:	6960      	ldr	r0, [r4, #20]
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	1a89      	subs	r1, r1, r2
 800beea:	f000 f887 	bl	800bffc <__sccl>
 800beee:	9b01      	ldr	r3, [sp, #4]
 800bef0:	f04f 0800 	mov.w	r8, #0
 800bef4:	461d      	mov	r5, r3
 800bef6:	68a3      	ldr	r3, [r4, #8]
 800bef8:	6822      	ldr	r2, [r4, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d03a      	beq.n	800bf74 <_scanf_i+0x160>
 800befe:	6831      	ldr	r1, [r6, #0]
 800bf00:	6960      	ldr	r0, [r4, #20]
 800bf02:	f891 c000 	ldrb.w	ip, [r1]
 800bf06:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d032      	beq.n	800bf74 <_scanf_i+0x160>
 800bf0e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bf12:	d121      	bne.n	800bf58 <_scanf_i+0x144>
 800bf14:	0510      	lsls	r0, r2, #20
 800bf16:	d51f      	bpl.n	800bf58 <_scanf_i+0x144>
 800bf18:	f108 0801 	add.w	r8, r8, #1
 800bf1c:	b117      	cbz	r7, 800bf24 <_scanf_i+0x110>
 800bf1e:	3301      	adds	r3, #1
 800bf20:	3f01      	subs	r7, #1
 800bf22:	60a3      	str	r3, [r4, #8]
 800bf24:	6873      	ldr	r3, [r6, #4]
 800bf26:	3b01      	subs	r3, #1
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	6073      	str	r3, [r6, #4]
 800bf2c:	dd1b      	ble.n	800bf66 <_scanf_i+0x152>
 800bf2e:	6833      	ldr	r3, [r6, #0]
 800bf30:	3301      	adds	r3, #1
 800bf32:	6033      	str	r3, [r6, #0]
 800bf34:	68a3      	ldr	r3, [r4, #8]
 800bf36:	3b01      	subs	r3, #1
 800bf38:	60a3      	str	r3, [r4, #8]
 800bf3a:	e7dc      	b.n	800bef6 <_scanf_i+0xe2>
 800bf3c:	f1b8 0f02 	cmp.w	r8, #2
 800bf40:	d1ad      	bne.n	800be9e <_scanf_i+0x8a>
 800bf42:	6822      	ldr	r2, [r4, #0]
 800bf44:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bf48:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bf4c:	d1bf      	bne.n	800bece <_scanf_i+0xba>
 800bf4e:	2110      	movs	r1, #16
 800bf50:	6061      	str	r1, [r4, #4]
 800bf52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf56:	e7a1      	b.n	800be9c <_scanf_i+0x88>
 800bf58:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bf5c:	6022      	str	r2, [r4, #0]
 800bf5e:	780b      	ldrb	r3, [r1, #0]
 800bf60:	702b      	strb	r3, [r5, #0]
 800bf62:	3501      	adds	r5, #1
 800bf64:	e7de      	b.n	800bf24 <_scanf_i+0x110>
 800bf66:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bf6a:	4631      	mov	r1, r6
 800bf6c:	4658      	mov	r0, fp
 800bf6e:	4798      	blx	r3
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d0df      	beq.n	800bf34 <_scanf_i+0x120>
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	05d9      	lsls	r1, r3, #23
 800bf78:	d50c      	bpl.n	800bf94 <_scanf_i+0x180>
 800bf7a:	454d      	cmp	r5, r9
 800bf7c:	d908      	bls.n	800bf90 <_scanf_i+0x17c>
 800bf7e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bf82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf86:	4632      	mov	r2, r6
 800bf88:	4658      	mov	r0, fp
 800bf8a:	4798      	blx	r3
 800bf8c:	1e6f      	subs	r7, r5, #1
 800bf8e:	463d      	mov	r5, r7
 800bf90:	454d      	cmp	r5, r9
 800bf92:	d029      	beq.n	800bfe8 <_scanf_i+0x1d4>
 800bf94:	6822      	ldr	r2, [r4, #0]
 800bf96:	f012 0210 	ands.w	r2, r2, #16
 800bf9a:	d113      	bne.n	800bfc4 <_scanf_i+0x1b0>
 800bf9c:	702a      	strb	r2, [r5, #0]
 800bf9e:	6863      	ldr	r3, [r4, #4]
 800bfa0:	9e00      	ldr	r6, [sp, #0]
 800bfa2:	4649      	mov	r1, r9
 800bfa4:	4658      	mov	r0, fp
 800bfa6:	47b0      	blx	r6
 800bfa8:	f8da 3000 	ldr.w	r3, [sl]
 800bfac:	6821      	ldr	r1, [r4, #0]
 800bfae:	1d1a      	adds	r2, r3, #4
 800bfb0:	f8ca 2000 	str.w	r2, [sl]
 800bfb4:	f011 0f20 	tst.w	r1, #32
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	d010      	beq.n	800bfde <_scanf_i+0x1ca>
 800bfbc:	6018      	str	r0, [r3, #0]
 800bfbe:	68e3      	ldr	r3, [r4, #12]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	60e3      	str	r3, [r4, #12]
 800bfc4:	eba5 0509 	sub.w	r5, r5, r9
 800bfc8:	44a8      	add	r8, r5
 800bfca:	6925      	ldr	r5, [r4, #16]
 800bfcc:	4445      	add	r5, r8
 800bfce:	6125      	str	r5, [r4, #16]
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	b007      	add	sp, #28
 800bfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd8:	f04f 0800 	mov.w	r8, #0
 800bfdc:	e7ca      	b.n	800bf74 <_scanf_i+0x160>
 800bfde:	07ca      	lsls	r2, r1, #31
 800bfe0:	bf4c      	ite	mi
 800bfe2:	8018      	strhmi	r0, [r3, #0]
 800bfe4:	6018      	strpl	r0, [r3, #0]
 800bfe6:	e7ea      	b.n	800bfbe <_scanf_i+0x1aa>
 800bfe8:	2001      	movs	r0, #1
 800bfea:	e7f2      	b.n	800bfd2 <_scanf_i+0x1be>
 800bfec:	0800d150 	.word	0x0800d150
 800bff0:	0800c15d 	.word	0x0800c15d
 800bff4:	0800c275 	.word	0x0800c275
 800bff8:	0800d1b7 	.word	0x0800d1b7

0800bffc <__sccl>:
 800bffc:	b570      	push	{r4, r5, r6, lr}
 800bffe:	780b      	ldrb	r3, [r1, #0]
 800c000:	2b5e      	cmp	r3, #94	; 0x5e
 800c002:	bf13      	iteet	ne
 800c004:	1c4a      	addne	r2, r1, #1
 800c006:	1c8a      	addeq	r2, r1, #2
 800c008:	784b      	ldrbeq	r3, [r1, #1]
 800c00a:	2100      	movne	r1, #0
 800c00c:	bf08      	it	eq
 800c00e:	2101      	moveq	r1, #1
 800c010:	1e44      	subs	r4, r0, #1
 800c012:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800c016:	f804 1f01 	strb.w	r1, [r4, #1]!
 800c01a:	42ac      	cmp	r4, r5
 800c01c:	d1fb      	bne.n	800c016 <__sccl+0x1a>
 800c01e:	b913      	cbnz	r3, 800c026 <__sccl+0x2a>
 800c020:	3a01      	subs	r2, #1
 800c022:	4610      	mov	r0, r2
 800c024:	bd70      	pop	{r4, r5, r6, pc}
 800c026:	f081 0401 	eor.w	r4, r1, #1
 800c02a:	54c4      	strb	r4, [r0, r3]
 800c02c:	1c51      	adds	r1, r2, #1
 800c02e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800c032:	2d2d      	cmp	r5, #45	; 0x2d
 800c034:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 800c038:	460a      	mov	r2, r1
 800c03a:	d006      	beq.n	800c04a <__sccl+0x4e>
 800c03c:	2d5d      	cmp	r5, #93	; 0x5d
 800c03e:	d0f0      	beq.n	800c022 <__sccl+0x26>
 800c040:	b90d      	cbnz	r5, 800c046 <__sccl+0x4a>
 800c042:	4632      	mov	r2, r6
 800c044:	e7ed      	b.n	800c022 <__sccl+0x26>
 800c046:	462b      	mov	r3, r5
 800c048:	e7ef      	b.n	800c02a <__sccl+0x2e>
 800c04a:	780e      	ldrb	r6, [r1, #0]
 800c04c:	2e5d      	cmp	r6, #93	; 0x5d
 800c04e:	d0fa      	beq.n	800c046 <__sccl+0x4a>
 800c050:	42b3      	cmp	r3, r6
 800c052:	dcf8      	bgt.n	800c046 <__sccl+0x4a>
 800c054:	3301      	adds	r3, #1
 800c056:	429e      	cmp	r6, r3
 800c058:	54c4      	strb	r4, [r0, r3]
 800c05a:	dcfb      	bgt.n	800c054 <__sccl+0x58>
 800c05c:	3102      	adds	r1, #2
 800c05e:	e7e6      	b.n	800c02e <__sccl+0x32>

0800c060 <__seofread>:
 800c060:	2000      	movs	r0, #0
 800c062:	4770      	bx	lr

0800c064 <_strtol_l.isra.0>:
 800c064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c068:	4680      	mov	r8, r0
 800c06a:	4689      	mov	r9, r1
 800c06c:	4692      	mov	sl, r2
 800c06e:	461e      	mov	r6, r3
 800c070:	460f      	mov	r7, r1
 800c072:	463d      	mov	r5, r7
 800c074:	9808      	ldr	r0, [sp, #32]
 800c076:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c07a:	f000 f947 	bl	800c30c <__locale_ctype_ptr_l>
 800c07e:	4420      	add	r0, r4
 800c080:	7843      	ldrb	r3, [r0, #1]
 800c082:	f013 0308 	ands.w	r3, r3, #8
 800c086:	d132      	bne.n	800c0ee <_strtol_l.isra.0+0x8a>
 800c088:	2c2d      	cmp	r4, #45	; 0x2d
 800c08a:	d132      	bne.n	800c0f2 <_strtol_l.isra.0+0x8e>
 800c08c:	787c      	ldrb	r4, [r7, #1]
 800c08e:	1cbd      	adds	r5, r7, #2
 800c090:	2201      	movs	r2, #1
 800c092:	2e00      	cmp	r6, #0
 800c094:	d05d      	beq.n	800c152 <_strtol_l.isra.0+0xee>
 800c096:	2e10      	cmp	r6, #16
 800c098:	d109      	bne.n	800c0ae <_strtol_l.isra.0+0x4a>
 800c09a:	2c30      	cmp	r4, #48	; 0x30
 800c09c:	d107      	bne.n	800c0ae <_strtol_l.isra.0+0x4a>
 800c09e:	782b      	ldrb	r3, [r5, #0]
 800c0a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c0a4:	2b58      	cmp	r3, #88	; 0x58
 800c0a6:	d14f      	bne.n	800c148 <_strtol_l.isra.0+0xe4>
 800c0a8:	786c      	ldrb	r4, [r5, #1]
 800c0aa:	2610      	movs	r6, #16
 800c0ac:	3502      	adds	r5, #2
 800c0ae:	2a00      	cmp	r2, #0
 800c0b0:	bf14      	ite	ne
 800c0b2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c0b6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c0ba:	2700      	movs	r7, #0
 800c0bc:	fbb1 fcf6 	udiv	ip, r1, r6
 800c0c0:	4638      	mov	r0, r7
 800c0c2:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c0c6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c0ca:	2b09      	cmp	r3, #9
 800c0cc:	d817      	bhi.n	800c0fe <_strtol_l.isra.0+0x9a>
 800c0ce:	461c      	mov	r4, r3
 800c0d0:	42a6      	cmp	r6, r4
 800c0d2:	dd23      	ble.n	800c11c <_strtol_l.isra.0+0xb8>
 800c0d4:	1c7b      	adds	r3, r7, #1
 800c0d6:	d007      	beq.n	800c0e8 <_strtol_l.isra.0+0x84>
 800c0d8:	4584      	cmp	ip, r0
 800c0da:	d31c      	bcc.n	800c116 <_strtol_l.isra.0+0xb2>
 800c0dc:	d101      	bne.n	800c0e2 <_strtol_l.isra.0+0x7e>
 800c0de:	45a6      	cmp	lr, r4
 800c0e0:	db19      	blt.n	800c116 <_strtol_l.isra.0+0xb2>
 800c0e2:	fb00 4006 	mla	r0, r0, r6, r4
 800c0e6:	2701      	movs	r7, #1
 800c0e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0ec:	e7eb      	b.n	800c0c6 <_strtol_l.isra.0+0x62>
 800c0ee:	462f      	mov	r7, r5
 800c0f0:	e7bf      	b.n	800c072 <_strtol_l.isra.0+0xe>
 800c0f2:	2c2b      	cmp	r4, #43	; 0x2b
 800c0f4:	bf04      	itt	eq
 800c0f6:	1cbd      	addeq	r5, r7, #2
 800c0f8:	787c      	ldrbeq	r4, [r7, #1]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	e7c9      	b.n	800c092 <_strtol_l.isra.0+0x2e>
 800c0fe:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c102:	2b19      	cmp	r3, #25
 800c104:	d801      	bhi.n	800c10a <_strtol_l.isra.0+0xa6>
 800c106:	3c37      	subs	r4, #55	; 0x37
 800c108:	e7e2      	b.n	800c0d0 <_strtol_l.isra.0+0x6c>
 800c10a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c10e:	2b19      	cmp	r3, #25
 800c110:	d804      	bhi.n	800c11c <_strtol_l.isra.0+0xb8>
 800c112:	3c57      	subs	r4, #87	; 0x57
 800c114:	e7dc      	b.n	800c0d0 <_strtol_l.isra.0+0x6c>
 800c116:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c11a:	e7e5      	b.n	800c0e8 <_strtol_l.isra.0+0x84>
 800c11c:	1c7b      	adds	r3, r7, #1
 800c11e:	d108      	bne.n	800c132 <_strtol_l.isra.0+0xce>
 800c120:	2322      	movs	r3, #34	; 0x22
 800c122:	f8c8 3000 	str.w	r3, [r8]
 800c126:	4608      	mov	r0, r1
 800c128:	f1ba 0f00 	cmp.w	sl, #0
 800c12c:	d107      	bne.n	800c13e <_strtol_l.isra.0+0xda>
 800c12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c132:	b102      	cbz	r2, 800c136 <_strtol_l.isra.0+0xd2>
 800c134:	4240      	negs	r0, r0
 800c136:	f1ba 0f00 	cmp.w	sl, #0
 800c13a:	d0f8      	beq.n	800c12e <_strtol_l.isra.0+0xca>
 800c13c:	b10f      	cbz	r7, 800c142 <_strtol_l.isra.0+0xde>
 800c13e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c142:	f8ca 9000 	str.w	r9, [sl]
 800c146:	e7f2      	b.n	800c12e <_strtol_l.isra.0+0xca>
 800c148:	2430      	movs	r4, #48	; 0x30
 800c14a:	2e00      	cmp	r6, #0
 800c14c:	d1af      	bne.n	800c0ae <_strtol_l.isra.0+0x4a>
 800c14e:	2608      	movs	r6, #8
 800c150:	e7ad      	b.n	800c0ae <_strtol_l.isra.0+0x4a>
 800c152:	2c30      	cmp	r4, #48	; 0x30
 800c154:	d0a3      	beq.n	800c09e <_strtol_l.isra.0+0x3a>
 800c156:	260a      	movs	r6, #10
 800c158:	e7a9      	b.n	800c0ae <_strtol_l.isra.0+0x4a>
	...

0800c15c <_strtol_r>:
 800c15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c15e:	4c06      	ldr	r4, [pc, #24]	; (800c178 <_strtol_r+0x1c>)
 800c160:	4d06      	ldr	r5, [pc, #24]	; (800c17c <_strtol_r+0x20>)
 800c162:	6824      	ldr	r4, [r4, #0]
 800c164:	6a24      	ldr	r4, [r4, #32]
 800c166:	2c00      	cmp	r4, #0
 800c168:	bf08      	it	eq
 800c16a:	462c      	moveq	r4, r5
 800c16c:	9400      	str	r4, [sp, #0]
 800c16e:	f7ff ff79 	bl	800c064 <_strtol_l.isra.0>
 800c172:	b003      	add	sp, #12
 800c174:	bd30      	pop	{r4, r5, pc}
 800c176:	bf00      	nop
 800c178:	2000058c 	.word	0x2000058c
 800c17c:	200005f0 	.word	0x200005f0

0800c180 <_strtoul_l.isra.0>:
 800c180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c184:	4680      	mov	r8, r0
 800c186:	4689      	mov	r9, r1
 800c188:	4692      	mov	sl, r2
 800c18a:	461e      	mov	r6, r3
 800c18c:	460f      	mov	r7, r1
 800c18e:	463d      	mov	r5, r7
 800c190:	9808      	ldr	r0, [sp, #32]
 800c192:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c196:	f000 f8b9 	bl	800c30c <__locale_ctype_ptr_l>
 800c19a:	4420      	add	r0, r4
 800c19c:	7843      	ldrb	r3, [r0, #1]
 800c19e:	f013 0308 	ands.w	r3, r3, #8
 800c1a2:	d130      	bne.n	800c206 <_strtoul_l.isra.0+0x86>
 800c1a4:	2c2d      	cmp	r4, #45	; 0x2d
 800c1a6:	d130      	bne.n	800c20a <_strtoul_l.isra.0+0x8a>
 800c1a8:	787c      	ldrb	r4, [r7, #1]
 800c1aa:	1cbd      	adds	r5, r7, #2
 800c1ac:	2101      	movs	r1, #1
 800c1ae:	2e00      	cmp	r6, #0
 800c1b0:	d05c      	beq.n	800c26c <_strtoul_l.isra.0+0xec>
 800c1b2:	2e10      	cmp	r6, #16
 800c1b4:	d109      	bne.n	800c1ca <_strtoul_l.isra.0+0x4a>
 800c1b6:	2c30      	cmp	r4, #48	; 0x30
 800c1b8:	d107      	bne.n	800c1ca <_strtoul_l.isra.0+0x4a>
 800c1ba:	782b      	ldrb	r3, [r5, #0]
 800c1bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c1c0:	2b58      	cmp	r3, #88	; 0x58
 800c1c2:	d14e      	bne.n	800c262 <_strtoul_l.isra.0+0xe2>
 800c1c4:	786c      	ldrb	r4, [r5, #1]
 800c1c6:	2610      	movs	r6, #16
 800c1c8:	3502      	adds	r5, #2
 800c1ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	fbb2 f2f6 	udiv	r2, r2, r6
 800c1d4:	fb06 fc02 	mul.w	ip, r6, r2
 800c1d8:	ea6f 0c0c 	mvn.w	ip, ip
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c1e2:	2f09      	cmp	r7, #9
 800c1e4:	d817      	bhi.n	800c216 <_strtoul_l.isra.0+0x96>
 800c1e6:	463c      	mov	r4, r7
 800c1e8:	42a6      	cmp	r6, r4
 800c1ea:	dd23      	ble.n	800c234 <_strtoul_l.isra.0+0xb4>
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	db1e      	blt.n	800c22e <_strtoul_l.isra.0+0xae>
 800c1f0:	4282      	cmp	r2, r0
 800c1f2:	d31c      	bcc.n	800c22e <_strtoul_l.isra.0+0xae>
 800c1f4:	d101      	bne.n	800c1fa <_strtoul_l.isra.0+0x7a>
 800c1f6:	45a4      	cmp	ip, r4
 800c1f8:	db19      	blt.n	800c22e <_strtoul_l.isra.0+0xae>
 800c1fa:	fb00 4006 	mla	r0, r0, r6, r4
 800c1fe:	2301      	movs	r3, #1
 800c200:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c204:	e7eb      	b.n	800c1de <_strtoul_l.isra.0+0x5e>
 800c206:	462f      	mov	r7, r5
 800c208:	e7c1      	b.n	800c18e <_strtoul_l.isra.0+0xe>
 800c20a:	2c2b      	cmp	r4, #43	; 0x2b
 800c20c:	bf04      	itt	eq
 800c20e:	1cbd      	addeq	r5, r7, #2
 800c210:	787c      	ldrbeq	r4, [r7, #1]
 800c212:	4619      	mov	r1, r3
 800c214:	e7cb      	b.n	800c1ae <_strtoul_l.isra.0+0x2e>
 800c216:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c21a:	2f19      	cmp	r7, #25
 800c21c:	d801      	bhi.n	800c222 <_strtoul_l.isra.0+0xa2>
 800c21e:	3c37      	subs	r4, #55	; 0x37
 800c220:	e7e2      	b.n	800c1e8 <_strtoul_l.isra.0+0x68>
 800c222:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c226:	2f19      	cmp	r7, #25
 800c228:	d804      	bhi.n	800c234 <_strtoul_l.isra.0+0xb4>
 800c22a:	3c57      	subs	r4, #87	; 0x57
 800c22c:	e7dc      	b.n	800c1e8 <_strtoul_l.isra.0+0x68>
 800c22e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c232:	e7e5      	b.n	800c200 <_strtoul_l.isra.0+0x80>
 800c234:	2b00      	cmp	r3, #0
 800c236:	da09      	bge.n	800c24c <_strtoul_l.isra.0+0xcc>
 800c238:	2322      	movs	r3, #34	; 0x22
 800c23a:	f8c8 3000 	str.w	r3, [r8]
 800c23e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c242:	f1ba 0f00 	cmp.w	sl, #0
 800c246:	d107      	bne.n	800c258 <_strtoul_l.isra.0+0xd8>
 800c248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24c:	b101      	cbz	r1, 800c250 <_strtoul_l.isra.0+0xd0>
 800c24e:	4240      	negs	r0, r0
 800c250:	f1ba 0f00 	cmp.w	sl, #0
 800c254:	d0f8      	beq.n	800c248 <_strtoul_l.isra.0+0xc8>
 800c256:	b10b      	cbz	r3, 800c25c <_strtoul_l.isra.0+0xdc>
 800c258:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c25c:	f8ca 9000 	str.w	r9, [sl]
 800c260:	e7f2      	b.n	800c248 <_strtoul_l.isra.0+0xc8>
 800c262:	2430      	movs	r4, #48	; 0x30
 800c264:	2e00      	cmp	r6, #0
 800c266:	d1b0      	bne.n	800c1ca <_strtoul_l.isra.0+0x4a>
 800c268:	2608      	movs	r6, #8
 800c26a:	e7ae      	b.n	800c1ca <_strtoul_l.isra.0+0x4a>
 800c26c:	2c30      	cmp	r4, #48	; 0x30
 800c26e:	d0a4      	beq.n	800c1ba <_strtoul_l.isra.0+0x3a>
 800c270:	260a      	movs	r6, #10
 800c272:	e7aa      	b.n	800c1ca <_strtoul_l.isra.0+0x4a>

0800c274 <_strtoul_r>:
 800c274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c276:	4c06      	ldr	r4, [pc, #24]	; (800c290 <_strtoul_r+0x1c>)
 800c278:	4d06      	ldr	r5, [pc, #24]	; (800c294 <_strtoul_r+0x20>)
 800c27a:	6824      	ldr	r4, [r4, #0]
 800c27c:	6a24      	ldr	r4, [r4, #32]
 800c27e:	2c00      	cmp	r4, #0
 800c280:	bf08      	it	eq
 800c282:	462c      	moveq	r4, r5
 800c284:	9400      	str	r4, [sp, #0]
 800c286:	f7ff ff7b 	bl	800c180 <_strtoul_l.isra.0>
 800c28a:	b003      	add	sp, #12
 800c28c:	bd30      	pop	{r4, r5, pc}
 800c28e:	bf00      	nop
 800c290:	2000058c 	.word	0x2000058c
 800c294:	200005f0 	.word	0x200005f0

0800c298 <__submore>:
 800c298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c29c:	460c      	mov	r4, r1
 800c29e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c2a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2a4:	4299      	cmp	r1, r3
 800c2a6:	d11d      	bne.n	800c2e4 <__submore+0x4c>
 800c2a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c2ac:	f7fe fff0 	bl	800b290 <_malloc_r>
 800c2b0:	b918      	cbnz	r0, 800c2ba <__submore+0x22>
 800c2b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2be:	63a3      	str	r3, [r4, #56]	; 0x38
 800c2c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c2c4:	6360      	str	r0, [r4, #52]	; 0x34
 800c2c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c2ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c2ce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c2d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c2d6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c2da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c2de:	6020      	str	r0, [r4, #0]
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	e7e8      	b.n	800c2b6 <__submore+0x1e>
 800c2e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c2e6:	0077      	lsls	r7, r6, #1
 800c2e8:	463a      	mov	r2, r7
 800c2ea:	f000 f84c 	bl	800c386 <_realloc_r>
 800c2ee:	4605      	mov	r5, r0
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	d0de      	beq.n	800c2b2 <__submore+0x1a>
 800c2f4:	eb00 0806 	add.w	r8, r0, r6
 800c2f8:	4601      	mov	r1, r0
 800c2fa:	4632      	mov	r2, r6
 800c2fc:	4640      	mov	r0, r8
 800c2fe:	f7fe ff65 	bl	800b1cc <memcpy>
 800c302:	f8c4 8000 	str.w	r8, [r4]
 800c306:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c30a:	e7e9      	b.n	800c2e0 <__submore+0x48>

0800c30c <__locale_ctype_ptr_l>:
 800c30c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c310:	4770      	bx	lr
	...

0800c314 <__locale_ctype_ptr>:
 800c314:	4b04      	ldr	r3, [pc, #16]	; (800c328 <__locale_ctype_ptr+0x14>)
 800c316:	4a05      	ldr	r2, [pc, #20]	; (800c32c <__locale_ctype_ptr+0x18>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	6a1b      	ldr	r3, [r3, #32]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	bf08      	it	eq
 800c320:	4613      	moveq	r3, r2
 800c322:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c326:	4770      	bx	lr
 800c328:	2000058c 	.word	0x2000058c
 800c32c:	200005f0 	.word	0x200005f0

0800c330 <__ascii_mbtowc>:
 800c330:	b082      	sub	sp, #8
 800c332:	b901      	cbnz	r1, 800c336 <__ascii_mbtowc+0x6>
 800c334:	a901      	add	r1, sp, #4
 800c336:	b142      	cbz	r2, 800c34a <__ascii_mbtowc+0x1a>
 800c338:	b14b      	cbz	r3, 800c34e <__ascii_mbtowc+0x1e>
 800c33a:	7813      	ldrb	r3, [r2, #0]
 800c33c:	600b      	str	r3, [r1, #0]
 800c33e:	7812      	ldrb	r2, [r2, #0]
 800c340:	1c10      	adds	r0, r2, #0
 800c342:	bf18      	it	ne
 800c344:	2001      	movne	r0, #1
 800c346:	b002      	add	sp, #8
 800c348:	4770      	bx	lr
 800c34a:	4610      	mov	r0, r2
 800c34c:	e7fb      	b.n	800c346 <__ascii_mbtowc+0x16>
 800c34e:	f06f 0001 	mvn.w	r0, #1
 800c352:	e7f8      	b.n	800c346 <__ascii_mbtowc+0x16>

0800c354 <memmove>:
 800c354:	4288      	cmp	r0, r1
 800c356:	b510      	push	{r4, lr}
 800c358:	eb01 0302 	add.w	r3, r1, r2
 800c35c:	d807      	bhi.n	800c36e <memmove+0x1a>
 800c35e:	1e42      	subs	r2, r0, #1
 800c360:	4299      	cmp	r1, r3
 800c362:	d00a      	beq.n	800c37a <memmove+0x26>
 800c364:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c368:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c36c:	e7f8      	b.n	800c360 <memmove+0xc>
 800c36e:	4283      	cmp	r3, r0
 800c370:	d9f5      	bls.n	800c35e <memmove+0xa>
 800c372:	1881      	adds	r1, r0, r2
 800c374:	1ad2      	subs	r2, r2, r3
 800c376:	42d3      	cmn	r3, r2
 800c378:	d100      	bne.n	800c37c <memmove+0x28>
 800c37a:	bd10      	pop	{r4, pc}
 800c37c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c380:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c384:	e7f7      	b.n	800c376 <memmove+0x22>

0800c386 <_realloc_r>:
 800c386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c388:	4607      	mov	r7, r0
 800c38a:	4614      	mov	r4, r2
 800c38c:	460e      	mov	r6, r1
 800c38e:	b921      	cbnz	r1, 800c39a <_realloc_r+0x14>
 800c390:	4611      	mov	r1, r2
 800c392:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c396:	f7fe bf7b 	b.w	800b290 <_malloc_r>
 800c39a:	b922      	cbnz	r2, 800c3a6 <_realloc_r+0x20>
 800c39c:	f7fe ff2a 	bl	800b1f4 <_free_r>
 800c3a0:	4625      	mov	r5, r4
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3a6:	f000 f821 	bl	800c3ec <_malloc_usable_size_r>
 800c3aa:	42a0      	cmp	r0, r4
 800c3ac:	d20f      	bcs.n	800c3ce <_realloc_r+0x48>
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	4638      	mov	r0, r7
 800c3b2:	f7fe ff6d 	bl	800b290 <_malloc_r>
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d0f2      	beq.n	800c3a2 <_realloc_r+0x1c>
 800c3bc:	4631      	mov	r1, r6
 800c3be:	4622      	mov	r2, r4
 800c3c0:	f7fe ff04 	bl	800b1cc <memcpy>
 800c3c4:	4631      	mov	r1, r6
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	f7fe ff14 	bl	800b1f4 <_free_r>
 800c3cc:	e7e9      	b.n	800c3a2 <_realloc_r+0x1c>
 800c3ce:	4635      	mov	r5, r6
 800c3d0:	e7e7      	b.n	800c3a2 <_realloc_r+0x1c>

0800c3d2 <__ascii_wctomb>:
 800c3d2:	b149      	cbz	r1, 800c3e8 <__ascii_wctomb+0x16>
 800c3d4:	2aff      	cmp	r2, #255	; 0xff
 800c3d6:	bf85      	ittet	hi
 800c3d8:	238a      	movhi	r3, #138	; 0x8a
 800c3da:	6003      	strhi	r3, [r0, #0]
 800c3dc:	700a      	strbls	r2, [r1, #0]
 800c3de:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c3e2:	bf98      	it	ls
 800c3e4:	2001      	movls	r0, #1
 800c3e6:	4770      	bx	lr
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	4770      	bx	lr

0800c3ec <_malloc_usable_size_r>:
 800c3ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3f0:	1f18      	subs	r0, r3, #4
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	bfbc      	itt	lt
 800c3f6:	580b      	ldrlt	r3, [r1, r0]
 800c3f8:	18c0      	addlt	r0, r0, r3
 800c3fa:	4770      	bx	lr

0800c3fc <roundf>:
 800c3fc:	ee10 0a10 	vmov	r0, s0
 800c400:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c404:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800c408:	2a16      	cmp	r2, #22
 800c40a:	dc15      	bgt.n	800c438 <roundf+0x3c>
 800c40c:	2a00      	cmp	r2, #0
 800c40e:	da08      	bge.n	800c422 <roundf+0x26>
 800c410:	3201      	adds	r2, #1
 800c412:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800c416:	d101      	bne.n	800c41c <roundf+0x20>
 800c418:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800c41c:	ee00 3a10 	vmov	s0, r3
 800c420:	4770      	bx	lr
 800c422:	4908      	ldr	r1, [pc, #32]	; (800c444 <roundf+0x48>)
 800c424:	4111      	asrs	r1, r2
 800c426:	4208      	tst	r0, r1
 800c428:	d0fa      	beq.n	800c420 <roundf+0x24>
 800c42a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c42e:	4113      	asrs	r3, r2
 800c430:	4403      	add	r3, r0
 800c432:	ea23 0301 	bic.w	r3, r3, r1
 800c436:	e7f1      	b.n	800c41c <roundf+0x20>
 800c438:	2a80      	cmp	r2, #128	; 0x80
 800c43a:	d1f1      	bne.n	800c420 <roundf+0x24>
 800c43c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	007fffff 	.word	0x007fffff

0800c448 <powf>:
 800c448:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c44c:	ed2d 8b04 	vpush	{d8-d9}
 800c450:	4ca7      	ldr	r4, [pc, #668]	; (800c6f0 <powf+0x2a8>)
 800c452:	b08a      	sub	sp, #40	; 0x28
 800c454:	eef0 8a40 	vmov.f32	s17, s0
 800c458:	eeb0 8a60 	vmov.f32	s16, s1
 800c45c:	f000 f958 	bl	800c710 <__ieee754_powf>
 800c460:	f994 5000 	ldrsb.w	r5, [r4]
 800c464:	1c6b      	adds	r3, r5, #1
 800c466:	eeb0 9a40 	vmov.f32	s18, s0
 800c46a:	4626      	mov	r6, r4
 800c46c:	d05f      	beq.n	800c52e <powf+0xe6>
 800c46e:	eeb4 8a48 	vcmp.f32	s16, s16
 800c472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c476:	d65a      	bvs.n	800c52e <powf+0xe6>
 800c478:	eef4 8a68 	vcmp.f32	s17, s17
 800c47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c480:	d721      	bvc.n	800c4c6 <powf+0x7e>
 800c482:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c48a:	d150      	bne.n	800c52e <powf+0xe6>
 800c48c:	2301      	movs	r3, #1
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	4b98      	ldr	r3, [pc, #608]	; (800c6f4 <powf+0x2ac>)
 800c492:	9301      	str	r3, [sp, #4]
 800c494:	ee18 0a90 	vmov	r0, s17
 800c498:	2300      	movs	r3, #0
 800c49a:	9308      	str	r3, [sp, #32]
 800c49c:	f7f4 f864 	bl	8000568 <__aeabi_f2d>
 800c4a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4a4:	ee18 0a10 	vmov	r0, s16
 800c4a8:	f7f4 f85e 	bl	8000568 <__aeabi_f2d>
 800c4ac:	4b92      	ldr	r3, [pc, #584]	; (800c6f8 <powf+0x2b0>)
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	2d02      	cmp	r5, #2
 800c4b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c4ba:	d032      	beq.n	800c522 <powf+0xda>
 800c4bc:	4668      	mov	r0, sp
 800c4be:	f000 fbea 	bl	800cc96 <matherr>
 800c4c2:	bb40      	cbnz	r0, 800c516 <powf+0xce>
 800c4c4:	e065      	b.n	800c592 <powf+0x14a>
 800c4c6:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800c6fc <powf+0x2b4>
 800c4ca:	eef4 8a69 	vcmp.f32	s17, s19
 800c4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d2:	d163      	bne.n	800c59c <powf+0x154>
 800c4d4:	eeb4 8a69 	vcmp.f32	s16, s19
 800c4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4dc:	d12e      	bne.n	800c53c <powf+0xf4>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	4b84      	ldr	r3, [pc, #528]	; (800c6f4 <powf+0x2ac>)
 800c4e4:	9301      	str	r3, [sp, #4]
 800c4e6:	ee18 0a90 	vmov	r0, s17
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	9308      	str	r3, [sp, #32]
 800c4ee:	f7f4 f83b 	bl	8000568 <__aeabi_f2d>
 800c4f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4f6:	ee18 0a10 	vmov	r0, s16
 800c4fa:	f7f4 f835 	bl	8000568 <__aeabi_f2d>
 800c4fe:	2200      	movs	r2, #0
 800c500:	2300      	movs	r3, #0
 800c502:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c506:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c50a:	2d00      	cmp	r5, #0
 800c50c:	d0d6      	beq.n	800c4bc <powf+0x74>
 800c50e:	4b7a      	ldr	r3, [pc, #488]	; (800c6f8 <powf+0x2b0>)
 800c510:	2200      	movs	r2, #0
 800c512:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c516:	9b08      	ldr	r3, [sp, #32]
 800c518:	b11b      	cbz	r3, 800c522 <powf+0xda>
 800c51a:	f7fe fe1d 	bl	800b158 <__errno>
 800c51e:	9b08      	ldr	r3, [sp, #32]
 800c520:	6003      	str	r3, [r0, #0]
 800c522:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c526:	f7f4 f877 	bl	8000618 <__aeabi_d2f>
 800c52a:	ee09 0a10 	vmov	s18, r0
 800c52e:	eeb0 0a49 	vmov.f32	s0, s18
 800c532:	b00a      	add	sp, #40	; 0x28
 800c534:	ecbd 8b04 	vpop	{d8-d9}
 800c538:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c53c:	eeb0 0a48 	vmov.f32	s0, s16
 800c540:	f000 fbb2 	bl	800cca8 <finitef>
 800c544:	2800      	cmp	r0, #0
 800c546:	d0f2      	beq.n	800c52e <powf+0xe6>
 800c548:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c550:	d5ed      	bpl.n	800c52e <powf+0xe6>
 800c552:	2301      	movs	r3, #1
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	4b67      	ldr	r3, [pc, #412]	; (800c6f4 <powf+0x2ac>)
 800c558:	9301      	str	r3, [sp, #4]
 800c55a:	ee18 0a90 	vmov	r0, s17
 800c55e:	2300      	movs	r3, #0
 800c560:	9308      	str	r3, [sp, #32]
 800c562:	f7f4 f801 	bl	8000568 <__aeabi_f2d>
 800c566:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c56a:	ee18 0a10 	vmov	r0, s16
 800c56e:	f7f3 fffb 	bl	8000568 <__aeabi_f2d>
 800c572:	f994 3000 	ldrsb.w	r3, [r4]
 800c576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c57a:	b923      	cbnz	r3, 800c586 <powf+0x13e>
 800c57c:	2200      	movs	r2, #0
 800c57e:	2300      	movs	r3, #0
 800c580:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c584:	e79a      	b.n	800c4bc <powf+0x74>
 800c586:	495e      	ldr	r1, [pc, #376]	; (800c700 <powf+0x2b8>)
 800c588:	2000      	movs	r0, #0
 800c58a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d194      	bne.n	800c4bc <powf+0x74>
 800c592:	f7fe fde1 	bl	800b158 <__errno>
 800c596:	2321      	movs	r3, #33	; 0x21
 800c598:	6003      	str	r3, [r0, #0]
 800c59a:	e7bc      	b.n	800c516 <powf+0xce>
 800c59c:	f000 fb84 	bl	800cca8 <finitef>
 800c5a0:	4605      	mov	r5, r0
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d173      	bne.n	800c68e <powf+0x246>
 800c5a6:	eeb0 0a68 	vmov.f32	s0, s17
 800c5aa:	f000 fb7d 	bl	800cca8 <finitef>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d06d      	beq.n	800c68e <powf+0x246>
 800c5b2:	eeb0 0a48 	vmov.f32	s0, s16
 800c5b6:	f000 fb77 	bl	800cca8 <finitef>
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	d067      	beq.n	800c68e <powf+0x246>
 800c5be:	ee18 0a90 	vmov	r0, s17
 800c5c2:	f7f3 ffd1 	bl	8000568 <__aeabi_f2d>
 800c5c6:	4680      	mov	r8, r0
 800c5c8:	ee18 0a10 	vmov	r0, s16
 800c5cc:	4689      	mov	r9, r1
 800c5ce:	f7f3 ffcb 	bl	8000568 <__aeabi_f2d>
 800c5d2:	eeb4 9a49 	vcmp.f32	s18, s18
 800c5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5da:	f994 4000 	ldrsb.w	r4, [r4]
 800c5de:	4b45      	ldr	r3, [pc, #276]	; (800c6f4 <powf+0x2ac>)
 800c5e0:	d713      	bvc.n	800c60a <powf+0x1c2>
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	e9cd 2300 	strd	r2, r3, [sp]
 800c5e8:	9508      	str	r5, [sp, #32]
 800c5ea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c5ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5f2:	2c00      	cmp	r4, #0
 800c5f4:	d0c2      	beq.n	800c57c <powf+0x134>
 800c5f6:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800c5fa:	ee17 0a90 	vmov	r0, s15
 800c5fe:	f7f3 ffb3 	bl	8000568 <__aeabi_f2d>
 800c602:	2c02      	cmp	r4, #2
 800c604:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c608:	e7c2      	b.n	800c590 <powf+0x148>
 800c60a:	2203      	movs	r2, #3
 800c60c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c610:	e9cd 2300 	strd	r2, r3, [sp]
 800c614:	9508      	str	r5, [sp, #32]
 800c616:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c61a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c61e:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c622:	b9fc      	cbnz	r4, 800c664 <powf+0x21c>
 800c624:	4b37      	ldr	r3, [pc, #220]	; (800c704 <powf+0x2bc>)
 800c626:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c62a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c632:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c636:	d553      	bpl.n	800c6e0 <powf+0x298>
 800c638:	eeb0 0a48 	vmov.f32	s0, s16
 800c63c:	f000 fb44 	bl	800ccc8 <rintf>
 800c640:	eeb4 0a48 	vcmp.f32	s0, s16
 800c644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c648:	d004      	beq.n	800c654 <powf+0x20c>
 800c64a:	4b2f      	ldr	r3, [pc, #188]	; (800c708 <powf+0x2c0>)
 800c64c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c650:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c654:	f996 3000 	ldrsb.w	r3, [r6]
 800c658:	2b02      	cmp	r3, #2
 800c65a:	d141      	bne.n	800c6e0 <powf+0x298>
 800c65c:	f7fe fd7c 	bl	800b158 <__errno>
 800c660:	2322      	movs	r3, #34	; 0x22
 800c662:	e799      	b.n	800c598 <powf+0x150>
 800c664:	4b29      	ldr	r3, [pc, #164]	; (800c70c <powf+0x2c4>)
 800c666:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c66a:	2200      	movs	r2, #0
 800c66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c670:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c674:	d5ee      	bpl.n	800c654 <powf+0x20c>
 800c676:	eeb0 0a48 	vmov.f32	s0, s16
 800c67a:	f000 fb25 	bl	800ccc8 <rintf>
 800c67e:	eeb4 0a48 	vcmp.f32	s0, s16
 800c682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c686:	d0e5      	beq.n	800c654 <powf+0x20c>
 800c688:	2200      	movs	r2, #0
 800c68a:	4b1d      	ldr	r3, [pc, #116]	; (800c700 <powf+0x2b8>)
 800c68c:	e7e0      	b.n	800c650 <powf+0x208>
 800c68e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c696:	f47f af4a 	bne.w	800c52e <powf+0xe6>
 800c69a:	eeb0 0a68 	vmov.f32	s0, s17
 800c69e:	f000 fb03 	bl	800cca8 <finitef>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	f43f af43 	beq.w	800c52e <powf+0xe6>
 800c6a8:	eeb0 0a48 	vmov.f32	s0, s16
 800c6ac:	f000 fafc 	bl	800cca8 <finitef>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	f43f af3c 	beq.w	800c52e <powf+0xe6>
 800c6b6:	2304      	movs	r3, #4
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	4b0e      	ldr	r3, [pc, #56]	; (800c6f4 <powf+0x2ac>)
 800c6bc:	9301      	str	r3, [sp, #4]
 800c6be:	ee18 0a90 	vmov	r0, s17
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	9308      	str	r3, [sp, #32]
 800c6c6:	f7f3 ff4f 	bl	8000568 <__aeabi_f2d>
 800c6ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6ce:	ee18 0a10 	vmov	r0, s16
 800c6d2:	f7f3 ff49 	bl	8000568 <__aeabi_f2d>
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6dc:	2300      	movs	r3, #0
 800c6de:	e7b7      	b.n	800c650 <powf+0x208>
 800c6e0:	4668      	mov	r0, sp
 800c6e2:	f000 fad8 	bl	800cc96 <matherr>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	f47f af15 	bne.w	800c516 <powf+0xce>
 800c6ec:	e7b6      	b.n	800c65c <powf+0x214>
 800c6ee:	bf00      	nop
 800c6f0:	2000075c 	.word	0x2000075c
 800c6f4:	0800d32f 	.word	0x0800d32f
 800c6f8:	3ff00000 	.word	0x3ff00000
 800c6fc:	00000000 	.word	0x00000000
 800c700:	fff00000 	.word	0xfff00000
 800c704:	47efffff 	.word	0x47efffff
 800c708:	c7efffff 	.word	0xc7efffff
 800c70c:	7ff00000 	.word	0x7ff00000

0800c710 <__ieee754_powf>:
 800c710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c714:	ee10 5a90 	vmov	r5, s1
 800c718:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800c71c:	ed2d 8b02 	vpush	{d8}
 800c720:	eeb0 8a40 	vmov.f32	s16, s0
 800c724:	eef0 8a60 	vmov.f32	s17, s1
 800c728:	f000 8293 	beq.w	800cc52 <__ieee754_powf+0x542>
 800c72c:	ee10 8a10 	vmov	r8, s0
 800c730:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800c734:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c738:	dc06      	bgt.n	800c748 <__ieee754_powf+0x38>
 800c73a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800c73e:	dd0a      	ble.n	800c756 <__ieee754_powf+0x46>
 800c740:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c744:	f000 8285 	beq.w	800cc52 <__ieee754_powf+0x542>
 800c748:	ecbd 8b02 	vpop	{d8}
 800c74c:	48d9      	ldr	r0, [pc, #868]	; (800cab4 <__ieee754_powf+0x3a4>)
 800c74e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c752:	f000 bab3 	b.w	800ccbc <nanf>
 800c756:	f1b8 0f00 	cmp.w	r8, #0
 800c75a:	da1d      	bge.n	800c798 <__ieee754_powf+0x88>
 800c75c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800c760:	da2c      	bge.n	800c7bc <__ieee754_powf+0xac>
 800c762:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c766:	db30      	blt.n	800c7ca <__ieee754_powf+0xba>
 800c768:	15fb      	asrs	r3, r7, #23
 800c76a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c76e:	fa47 f603 	asr.w	r6, r7, r3
 800c772:	fa06 f303 	lsl.w	r3, r6, r3
 800c776:	42bb      	cmp	r3, r7
 800c778:	d127      	bne.n	800c7ca <__ieee754_powf+0xba>
 800c77a:	f006 0601 	and.w	r6, r6, #1
 800c77e:	f1c6 0602 	rsb	r6, r6, #2
 800c782:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800c786:	d122      	bne.n	800c7ce <__ieee754_powf+0xbe>
 800c788:	2d00      	cmp	r5, #0
 800c78a:	f280 8268 	bge.w	800cc5e <__ieee754_powf+0x54e>
 800c78e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c792:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c796:	e00d      	b.n	800c7b4 <__ieee754_powf+0xa4>
 800c798:	2600      	movs	r6, #0
 800c79a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800c79e:	d1f0      	bne.n	800c782 <__ieee754_powf+0x72>
 800c7a0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c7a4:	f000 8255 	beq.w	800cc52 <__ieee754_powf+0x542>
 800c7a8:	dd0a      	ble.n	800c7c0 <__ieee754_powf+0xb0>
 800c7aa:	2d00      	cmp	r5, #0
 800c7ac:	f280 8254 	bge.w	800cc58 <__ieee754_powf+0x548>
 800c7b0:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800cab8 <__ieee754_powf+0x3a8>
 800c7b4:	ecbd 8b02 	vpop	{d8}
 800c7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7bc:	2602      	movs	r6, #2
 800c7be:	e7ec      	b.n	800c79a <__ieee754_powf+0x8a>
 800c7c0:	2d00      	cmp	r5, #0
 800c7c2:	daf5      	bge.n	800c7b0 <__ieee754_powf+0xa0>
 800c7c4:	eeb1 0a68 	vneg.f32	s0, s17
 800c7c8:	e7f4      	b.n	800c7b4 <__ieee754_powf+0xa4>
 800c7ca:	2600      	movs	r6, #0
 800c7cc:	e7d9      	b.n	800c782 <__ieee754_powf+0x72>
 800c7ce:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800c7d2:	d102      	bne.n	800c7da <__ieee754_powf+0xca>
 800c7d4:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c7d8:	e7ec      	b.n	800c7b4 <__ieee754_powf+0xa4>
 800c7da:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800c7de:	eeb0 0a48 	vmov.f32	s0, s16
 800c7e2:	d108      	bne.n	800c7f6 <__ieee754_powf+0xe6>
 800c7e4:	f1b8 0f00 	cmp.w	r8, #0
 800c7e8:	db05      	blt.n	800c7f6 <__ieee754_powf+0xe6>
 800c7ea:	ecbd 8b02 	vpop	{d8}
 800c7ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f2:	f000 ba4d 	b.w	800cc90 <__ieee754_sqrtf>
 800c7f6:	f000 fa50 	bl	800cc9a <fabsf>
 800c7fa:	b124      	cbz	r4, 800c806 <__ieee754_powf+0xf6>
 800c7fc:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800c800:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c804:	d117      	bne.n	800c836 <__ieee754_powf+0x126>
 800c806:	2d00      	cmp	r5, #0
 800c808:	bfbc      	itt	lt
 800c80a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800c80e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c812:	f1b8 0f00 	cmp.w	r8, #0
 800c816:	dacd      	bge.n	800c7b4 <__ieee754_powf+0xa4>
 800c818:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800c81c:	ea54 0306 	orrs.w	r3, r4, r6
 800c820:	d104      	bne.n	800c82c <__ieee754_powf+0x11c>
 800c822:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c826:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c82a:	e7c3      	b.n	800c7b4 <__ieee754_powf+0xa4>
 800c82c:	2e01      	cmp	r6, #1
 800c82e:	d1c1      	bne.n	800c7b4 <__ieee754_powf+0xa4>
 800c830:	eeb1 0a40 	vneg.f32	s0, s0
 800c834:	e7be      	b.n	800c7b4 <__ieee754_powf+0xa4>
 800c836:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800c83a:	3801      	subs	r0, #1
 800c83c:	ea56 0300 	orrs.w	r3, r6, r0
 800c840:	d104      	bne.n	800c84c <__ieee754_powf+0x13c>
 800c842:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c846:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c84a:	e7b3      	b.n	800c7b4 <__ieee754_powf+0xa4>
 800c84c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800c850:	dd6d      	ble.n	800c92e <__ieee754_powf+0x21e>
 800c852:	4b9a      	ldr	r3, [pc, #616]	; (800cabc <__ieee754_powf+0x3ac>)
 800c854:	429c      	cmp	r4, r3
 800c856:	dc06      	bgt.n	800c866 <__ieee754_powf+0x156>
 800c858:	2d00      	cmp	r5, #0
 800c85a:	daa9      	bge.n	800c7b0 <__ieee754_powf+0xa0>
 800c85c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800cac0 <__ieee754_powf+0x3b0>
 800c860:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c864:	e7a6      	b.n	800c7b4 <__ieee754_powf+0xa4>
 800c866:	4b97      	ldr	r3, [pc, #604]	; (800cac4 <__ieee754_powf+0x3b4>)
 800c868:	429c      	cmp	r4, r3
 800c86a:	dd02      	ble.n	800c872 <__ieee754_powf+0x162>
 800c86c:	2d00      	cmp	r5, #0
 800c86e:	dcf5      	bgt.n	800c85c <__ieee754_powf+0x14c>
 800c870:	e79e      	b.n	800c7b0 <__ieee754_powf+0xa0>
 800c872:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c876:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c87a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800cac8 <__ieee754_powf+0x3b8>
 800c87e:	eef1 6a40 	vneg.f32	s13, s0
 800c882:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800c886:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c88a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c88e:	eee7 7a40 	vfms.f32	s15, s14, s0
 800c892:	ee60 0a00 	vmul.f32	s1, s0, s0
 800c896:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800cacc <__ieee754_powf+0x3bc>
 800c89a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800c89e:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800cad0 <__ieee754_powf+0x3c0>
 800c8a2:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800c8a6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c8aa:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800cad4 <__ieee754_powf+0x3c4>
 800c8ae:	eeb0 6a67 	vmov.f32	s12, s15
 800c8b2:	eea0 6a07 	vfma.f32	s12, s0, s14
 800c8b6:	ee16 3a10 	vmov	r3, s12
 800c8ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c8be:	f023 030f 	bic.w	r3, r3, #15
 800c8c2:	ee00 3a90 	vmov	s1, r3
 800c8c6:	eee6 0a87 	vfma.f32	s1, s13, s14
 800c8ca:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c8ce:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800c8d2:	f025 050f 	bic.w	r5, r5, #15
 800c8d6:	ee07 5a10 	vmov	s14, r5
 800c8da:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c8de:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c8e2:	ee07 3a90 	vmov	s15, r3
 800c8e6:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c8ea:	3e01      	subs	r6, #1
 800c8ec:	ea56 0200 	orrs.w	r2, r6, r0
 800c8f0:	ee07 5a10 	vmov	s14, r5
 800c8f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c8f8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c8fc:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c900:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c904:	ee17 4a10 	vmov	r4, s14
 800c908:	bf08      	it	eq
 800c90a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800c90e:	2c00      	cmp	r4, #0
 800c910:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c914:	f340 8184 	ble.w	800cc20 <__ieee754_powf+0x510>
 800c918:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800c91c:	f340 80fc 	ble.w	800cb18 <__ieee754_powf+0x408>
 800c920:	eddf 7a67 	vldr	s15, [pc, #412]	; 800cac0 <__ieee754_powf+0x3b0>
 800c924:	ee28 0a27 	vmul.f32	s0, s16, s15
 800c928:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c92c:	e742      	b.n	800c7b4 <__ieee754_powf+0xa4>
 800c92e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800c932:	bfbf      	itttt	lt
 800c934:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800cad8 <__ieee754_powf+0x3c8>
 800c938:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c93c:	f06f 0217 	mvnlt.w	r2, #23
 800c940:	ee17 4a90 	vmovlt	r4, s15
 800c944:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800c948:	bfa8      	it	ge
 800c94a:	2200      	movge	r2, #0
 800c94c:	3b7f      	subs	r3, #127	; 0x7f
 800c94e:	4413      	add	r3, r2
 800c950:	4a62      	ldr	r2, [pc, #392]	; (800cadc <__ieee754_powf+0x3cc>)
 800c952:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800c956:	4294      	cmp	r4, r2
 800c958:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800c95c:	dd06      	ble.n	800c96c <__ieee754_powf+0x25c>
 800c95e:	4a60      	ldr	r2, [pc, #384]	; (800cae0 <__ieee754_powf+0x3d0>)
 800c960:	4294      	cmp	r4, r2
 800c962:	f340 80a5 	ble.w	800cab0 <__ieee754_powf+0x3a0>
 800c966:	3301      	adds	r3, #1
 800c968:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800c96c:	2400      	movs	r4, #0
 800c96e:	4a5d      	ldr	r2, [pc, #372]	; (800cae4 <__ieee754_powf+0x3d4>)
 800c970:	00a7      	lsls	r7, r4, #2
 800c972:	443a      	add	r2, r7
 800c974:	ee07 1a90 	vmov	s15, r1
 800c978:	ed92 7a00 	vldr	s14, [r2]
 800c97c:	4a5a      	ldr	r2, [pc, #360]	; (800cae8 <__ieee754_powf+0x3d8>)
 800c97e:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c982:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c986:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800c98a:	1049      	asrs	r1, r1, #1
 800c98c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800c990:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800c994:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800c998:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800c99c:	ee06 1a10 	vmov	s12, r1
 800c9a0:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800c9a4:	ee14 ca90 	vmov	ip, s9
 800c9a8:	ea02 0c0c 	and.w	ip, r2, ip
 800c9ac:	ee05 ca10 	vmov	s10, ip
 800c9b0:	eeb1 4a45 	vneg.f32	s8, s10
 800c9b4:	eee4 5a06 	vfma.f32	s11, s8, s12
 800c9b8:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c9bc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800caec <__ieee754_powf+0x3dc>
 800c9c0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800c9c4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800c9c8:	eee4 5a06 	vfma.f32	s11, s8, s12
 800c9cc:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800c9d0:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800c9d4:	eddf 5a46 	vldr	s11, [pc, #280]	; 800caf0 <__ieee754_powf+0x3e0>
 800c9d8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c9dc:	eddf 5a45 	vldr	s11, [pc, #276]	; 800caf4 <__ieee754_powf+0x3e4>
 800c9e0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c9e4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800cac8 <__ieee754_powf+0x3b8>
 800c9e8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c9ec:	eddf 5a42 	vldr	s11, [pc, #264]	; 800caf8 <__ieee754_powf+0x3e8>
 800c9f0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c9f4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800cafc <__ieee754_powf+0x3ec>
 800c9f8:	ee75 6a24 	vadd.f32	s13, s10, s9
 800c9fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ca00:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ca04:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800ca08:	eef0 7a65 	vmov.f32	s15, s11
 800ca0c:	eee3 6a87 	vfma.f32	s13, s7, s14
 800ca10:	eee5 7a05 	vfma.f32	s15, s10, s10
 800ca14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca18:	ee17 1a90 	vmov	r1, s15
 800ca1c:	4011      	ands	r1, r2
 800ca1e:	ee07 1a90 	vmov	s15, r1
 800ca22:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800ca26:	eddf 5a36 	vldr	s11, [pc, #216]	; 800cb00 <__ieee754_powf+0x3f0>
 800ca2a:	eea4 7a05 	vfma.f32	s14, s8, s10
 800ca2e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ca32:	ee27 7a24 	vmul.f32	s14, s14, s9
 800ca36:	eea7 7a86 	vfma.f32	s14, s15, s12
 800ca3a:	eeb0 6a47 	vmov.f32	s12, s14
 800ca3e:	eea5 6a27 	vfma.f32	s12, s10, s15
 800ca42:	ee16 1a10 	vmov	r1, s12
 800ca46:	4011      	ands	r1, r2
 800ca48:	ee06 1a90 	vmov	s13, r1
 800ca4c:	eee4 6a27 	vfma.f32	s13, s8, s15
 800ca50:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800cb04 <__ieee754_powf+0x3f4>
 800ca54:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ca58:	ee06 1a10 	vmov	s12, r1
 800ca5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca60:	eddf 7a29 	vldr	s15, [pc, #164]	; 800cb08 <__ieee754_powf+0x3f8>
 800ca64:	4929      	ldr	r1, [pc, #164]	; (800cb0c <__ieee754_powf+0x3fc>)
 800ca66:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ca6a:	4439      	add	r1, r7
 800ca6c:	edd1 7a00 	vldr	s15, [r1]
 800ca70:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca74:	ee07 3a90 	vmov	s15, r3
 800ca78:	eef0 0a47 	vmov.f32	s1, s14
 800ca7c:	4b24      	ldr	r3, [pc, #144]	; (800cb10 <__ieee754_powf+0x400>)
 800ca7e:	eee6 0a25 	vfma.f32	s1, s12, s11
 800ca82:	443b      	add	r3, r7
 800ca84:	ed93 5a00 	vldr	s10, [r3]
 800ca88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ca8c:	ee70 0a85 	vadd.f32	s1, s1, s10
 800ca90:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800ca94:	ee17 3a90 	vmov	r3, s15
 800ca98:	4013      	ands	r3, r2
 800ca9a:	ee07 3a90 	vmov	s15, r3
 800ca9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800caa2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800caa6:	eee6 7a65 	vfms.f32	s15, s12, s11
 800caaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800caae:	e70e      	b.n	800c8ce <__ieee754_powf+0x1be>
 800cab0:	2401      	movs	r4, #1
 800cab2:	e75c      	b.n	800c96e <__ieee754_powf+0x25e>
 800cab4:	0800d179 	.word	0x0800d179
 800cab8:	00000000 	.word	0x00000000
 800cabc:	3f7ffff7 	.word	0x3f7ffff7
 800cac0:	7149f2ca 	.word	0x7149f2ca
 800cac4:	3f800007 	.word	0x3f800007
 800cac8:	3eaaaaab 	.word	0x3eaaaaab
 800cacc:	36eca570 	.word	0x36eca570
 800cad0:	3fb8aa3b 	.word	0x3fb8aa3b
 800cad4:	3fb8aa00 	.word	0x3fb8aa00
 800cad8:	4b800000 	.word	0x4b800000
 800cadc:	001cc471 	.word	0x001cc471
 800cae0:	005db3d6 	.word	0x005db3d6
 800cae4:	0800d334 	.word	0x0800d334
 800cae8:	fffff000 	.word	0xfffff000
 800caec:	3e6c3255 	.word	0x3e6c3255
 800caf0:	3e53f142 	.word	0x3e53f142
 800caf4:	3e8ba305 	.word	0x3e8ba305
 800caf8:	3edb6db7 	.word	0x3edb6db7
 800cafc:	3f19999a 	.word	0x3f19999a
 800cb00:	3f763800 	.word	0x3f763800
 800cb04:	3f76384f 	.word	0x3f76384f
 800cb08:	369dc3a0 	.word	0x369dc3a0
 800cb0c:	0800d344 	.word	0x0800d344
 800cb10:	0800d33c 	.word	0x0800d33c
 800cb14:	3338aa3c 	.word	0x3338aa3c
 800cb18:	f040 8092 	bne.w	800cc40 <__ieee754_powf+0x530>
 800cb1c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800cb14 <__ieee754_powf+0x404>
 800cb20:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cb24:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800cb28:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb30:	f73f aef6 	bgt.w	800c920 <__ieee754_powf+0x210>
 800cb34:	15db      	asrs	r3, r3, #23
 800cb36:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800cb3a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cb3e:	4103      	asrs	r3, r0
 800cb40:	4423      	add	r3, r4
 800cb42:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cb46:	4947      	ldr	r1, [pc, #284]	; (800cc64 <__ieee754_powf+0x554>)
 800cb48:	3a7f      	subs	r2, #127	; 0x7f
 800cb4a:	4111      	asrs	r1, r2
 800cb4c:	ea23 0101 	bic.w	r1, r3, r1
 800cb50:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800cb54:	ee07 1a10 	vmov	s14, r1
 800cb58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800cb5c:	f1c2 0217 	rsb	r2, r2, #23
 800cb60:	4110      	asrs	r0, r2
 800cb62:	2c00      	cmp	r4, #0
 800cb64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb68:	bfb8      	it	lt
 800cb6a:	4240      	neglt	r0, r0
 800cb6c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800cb70:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc68 <__ieee754_powf+0x558>
 800cb74:	ee17 3a10 	vmov	r3, s14
 800cb78:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cb7c:	f023 030f 	bic.w	r3, r3, #15
 800cb80:	ee07 3a10 	vmov	s14, r3
 800cb84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb88:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800cb8c:	eddf 7a37 	vldr	s15, [pc, #220]	; 800cc6c <__ieee754_powf+0x55c>
 800cb90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb94:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800cb98:	eddf 6a35 	vldr	s13, [pc, #212]	; 800cc70 <__ieee754_powf+0x560>
 800cb9c:	eeb0 0a67 	vmov.f32	s0, s15
 800cba0:	eea7 0a26 	vfma.f32	s0, s14, s13
 800cba4:	eeb0 6a40 	vmov.f32	s12, s0
 800cba8:	eea7 6a66 	vfms.f32	s12, s14, s13
 800cbac:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cbb0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cbb4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800cc74 <__ieee754_powf+0x564>
 800cbb8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800cc78 <__ieee754_powf+0x568>
 800cbbc:	eea7 6a26 	vfma.f32	s12, s14, s13
 800cbc0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800cc7c <__ieee754_powf+0x56c>
 800cbc4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800cbc8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800cc80 <__ieee754_powf+0x570>
 800cbcc:	eea6 6a87 	vfma.f32	s12, s13, s14
 800cbd0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800cc84 <__ieee754_powf+0x574>
 800cbd4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800cbd8:	eeb0 6a40 	vmov.f32	s12, s0
 800cbdc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800cbe0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cbe4:	eeb0 7a46 	vmov.f32	s14, s12
 800cbe8:	ee77 6a66 	vsub.f32	s13, s14, s13
 800cbec:	ee20 6a06 	vmul.f32	s12, s0, s12
 800cbf0:	eee0 7a27 	vfma.f32	s15, s0, s15
 800cbf4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800cbf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbfc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cc00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cc04:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cc08:	ee10 3a10 	vmov	r3, s0
 800cc0c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800cc10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc14:	da1a      	bge.n	800cc4c <__ieee754_powf+0x53c>
 800cc16:	f000 f8b1 	bl	800cd7c <scalbnf>
 800cc1a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800cc1e:	e5c9      	b.n	800c7b4 <__ieee754_powf+0xa4>
 800cc20:	4a19      	ldr	r2, [pc, #100]	; (800cc88 <__ieee754_powf+0x578>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	dd02      	ble.n	800cc2c <__ieee754_powf+0x51c>
 800cc26:	eddf 7a19 	vldr	s15, [pc, #100]	; 800cc8c <__ieee754_powf+0x57c>
 800cc2a:	e67b      	b.n	800c924 <__ieee754_powf+0x214>
 800cc2c:	d108      	bne.n	800cc40 <__ieee754_powf+0x530>
 800cc2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cc32:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800cc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3a:	f6ff af7b 	blt.w	800cb34 <__ieee754_powf+0x424>
 800cc3e:	e7f2      	b.n	800cc26 <__ieee754_powf+0x516>
 800cc40:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800cc44:	f73f af76 	bgt.w	800cb34 <__ieee754_powf+0x424>
 800cc48:	2000      	movs	r0, #0
 800cc4a:	e78f      	b.n	800cb6c <__ieee754_powf+0x45c>
 800cc4c:	ee00 3a10 	vmov	s0, r3
 800cc50:	e7e3      	b.n	800cc1a <__ieee754_powf+0x50a>
 800cc52:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cc56:	e5ad      	b.n	800c7b4 <__ieee754_powf+0xa4>
 800cc58:	eeb0 0a68 	vmov.f32	s0, s17
 800cc5c:	e5aa      	b.n	800c7b4 <__ieee754_powf+0xa4>
 800cc5e:	eeb0 0a48 	vmov.f32	s0, s16
 800cc62:	e5a7      	b.n	800c7b4 <__ieee754_powf+0xa4>
 800cc64:	007fffff 	.word	0x007fffff
 800cc68:	3f317218 	.word	0x3f317218
 800cc6c:	35bfbe8c 	.word	0x35bfbe8c
 800cc70:	3f317200 	.word	0x3f317200
 800cc74:	3331bb4c 	.word	0x3331bb4c
 800cc78:	b5ddea0e 	.word	0xb5ddea0e
 800cc7c:	388ab355 	.word	0x388ab355
 800cc80:	bb360b61 	.word	0xbb360b61
 800cc84:	3e2aaaab 	.word	0x3e2aaaab
 800cc88:	43160000 	.word	0x43160000
 800cc8c:	0da24260 	.word	0x0da24260

0800cc90 <__ieee754_sqrtf>:
 800cc90:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cc94:	4770      	bx	lr

0800cc96 <matherr>:
 800cc96:	2000      	movs	r0, #0
 800cc98:	4770      	bx	lr

0800cc9a <fabsf>:
 800cc9a:	ee10 3a10 	vmov	r3, s0
 800cc9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cca2:	ee00 3a10 	vmov	s0, r3
 800cca6:	4770      	bx	lr

0800cca8 <finitef>:
 800cca8:	ee10 3a10 	vmov	r3, s0
 800ccac:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800ccb0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ccb4:	bfac      	ite	ge
 800ccb6:	2000      	movge	r0, #0
 800ccb8:	2001      	movlt	r0, #1
 800ccba:	4770      	bx	lr

0800ccbc <nanf>:
 800ccbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ccc4 <nanf+0x8>
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	7fc00000 	.word	0x7fc00000

0800ccc8 <rintf>:
 800ccc8:	b513      	push	{r0, r1, r4, lr}
 800ccca:	ee10 1a10 	vmov	r1, s0
 800ccce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ccd2:	0ddc      	lsrs	r4, r3, #23
 800ccd4:	3c7f      	subs	r4, #127	; 0x7f
 800ccd6:	2c16      	cmp	r4, #22
 800ccd8:	dc46      	bgt.n	800cd68 <rintf+0xa0>
 800ccda:	b32b      	cbz	r3, 800cd28 <rintf+0x60>
 800ccdc:	2c00      	cmp	r4, #0
 800ccde:	ee10 2a10 	vmov	r2, s0
 800cce2:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800cce6:	da21      	bge.n	800cd2c <rintf+0x64>
 800cce8:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800ccec:	425b      	negs	r3, r3
 800ccee:	4a21      	ldr	r2, [pc, #132]	; (800cd74 <rintf+0xac>)
 800ccf0:	0a5b      	lsrs	r3, r3, #9
 800ccf2:	0d09      	lsrs	r1, r1, #20
 800ccf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccf8:	0509      	lsls	r1, r1, #20
 800ccfa:	430b      	orrs	r3, r1
 800ccfc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800cd00:	ee07 3a90 	vmov	s15, r3
 800cd04:	edd2 6a00 	vldr	s13, [r2]
 800cd08:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800cd0c:	ed8d 7a01 	vstr	s14, [sp, #4]
 800cd10:	eddd 7a01 	vldr	s15, [sp, #4]
 800cd14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cd18:	ee17 3a90 	vmov	r3, s15
 800cd1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd20:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800cd24:	ee00 3a10 	vmov	s0, r3
 800cd28:	b002      	add	sp, #8
 800cd2a:	bd10      	pop	{r4, pc}
 800cd2c:	4b12      	ldr	r3, [pc, #72]	; (800cd78 <rintf+0xb0>)
 800cd2e:	4123      	asrs	r3, r4
 800cd30:	4219      	tst	r1, r3
 800cd32:	d0f9      	beq.n	800cd28 <rintf+0x60>
 800cd34:	085b      	lsrs	r3, r3, #1
 800cd36:	4219      	tst	r1, r3
 800cd38:	d006      	beq.n	800cd48 <rintf+0x80>
 800cd3a:	ea21 0203 	bic.w	r2, r1, r3
 800cd3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cd42:	fa43 f404 	asr.w	r4, r3, r4
 800cd46:	4322      	orrs	r2, r4
 800cd48:	4b0a      	ldr	r3, [pc, #40]	; (800cd74 <rintf+0xac>)
 800cd4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cd4e:	ed90 7a00 	vldr	s14, [r0]
 800cd52:	ee07 2a90 	vmov	s15, r2
 800cd56:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd5a:	edcd 7a01 	vstr	s15, [sp, #4]
 800cd5e:	ed9d 0a01 	vldr	s0, [sp, #4]
 800cd62:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cd66:	e7df      	b.n	800cd28 <rintf+0x60>
 800cd68:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cd6c:	d3dc      	bcc.n	800cd28 <rintf+0x60>
 800cd6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cd72:	e7d9      	b.n	800cd28 <rintf+0x60>
 800cd74:	0800d34c 	.word	0x0800d34c
 800cd78:	007fffff 	.word	0x007fffff

0800cd7c <scalbnf>:
 800cd7c:	b508      	push	{r3, lr}
 800cd7e:	ee10 2a10 	vmov	r2, s0
 800cd82:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800cd86:	ed2d 8b02 	vpush	{d8}
 800cd8a:	eef0 0a40 	vmov.f32	s1, s0
 800cd8e:	d004      	beq.n	800cd9a <scalbnf+0x1e>
 800cd90:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cd94:	d306      	bcc.n	800cda4 <scalbnf+0x28>
 800cd96:	ee70 0a00 	vadd.f32	s1, s0, s0
 800cd9a:	ecbd 8b02 	vpop	{d8}
 800cd9e:	eeb0 0a60 	vmov.f32	s0, s1
 800cda2:	bd08      	pop	{r3, pc}
 800cda4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cda8:	d21c      	bcs.n	800cde4 <scalbnf+0x68>
 800cdaa:	4b1f      	ldr	r3, [pc, #124]	; (800ce28 <scalbnf+0xac>)
 800cdac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ce2c <scalbnf+0xb0>
 800cdb0:	4298      	cmp	r0, r3
 800cdb2:	ee60 0a27 	vmul.f32	s1, s0, s15
 800cdb6:	db10      	blt.n	800cdda <scalbnf+0x5e>
 800cdb8:	ee10 2a90 	vmov	r2, s1
 800cdbc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800cdc0:	3b19      	subs	r3, #25
 800cdc2:	4403      	add	r3, r0
 800cdc4:	2bfe      	cmp	r3, #254	; 0xfe
 800cdc6:	dd0f      	ble.n	800cde8 <scalbnf+0x6c>
 800cdc8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800ce30 <scalbnf+0xb4>
 800cdcc:	eeb0 0a48 	vmov.f32	s0, s16
 800cdd0:	f000 f834 	bl	800ce3c <copysignf>
 800cdd4:	ee60 0a08 	vmul.f32	s1, s0, s16
 800cdd8:	e7df      	b.n	800cd9a <scalbnf+0x1e>
 800cdda:	eddf 7a16 	vldr	s15, [pc, #88]	; 800ce34 <scalbnf+0xb8>
 800cdde:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800cde2:	e7da      	b.n	800cd9a <scalbnf+0x1e>
 800cde4:	0ddb      	lsrs	r3, r3, #23
 800cde6:	e7ec      	b.n	800cdc2 <scalbnf+0x46>
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	dd06      	ble.n	800cdfa <scalbnf+0x7e>
 800cdec:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800cdf0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800cdf4:	ee00 3a90 	vmov	s1, r3
 800cdf8:	e7cf      	b.n	800cd9a <scalbnf+0x1e>
 800cdfa:	f113 0f16 	cmn.w	r3, #22
 800cdfe:	da06      	bge.n	800ce0e <scalbnf+0x92>
 800ce00:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ce04:	4298      	cmp	r0, r3
 800ce06:	dcdf      	bgt.n	800cdc8 <scalbnf+0x4c>
 800ce08:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800ce34 <scalbnf+0xb8>
 800ce0c:	e7de      	b.n	800cdcc <scalbnf+0x50>
 800ce0e:	3319      	adds	r3, #25
 800ce10:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800ce14:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800ce18:	eddf 7a07 	vldr	s15, [pc, #28]	; 800ce38 <scalbnf+0xbc>
 800ce1c:	ee07 3a10 	vmov	s14, r3
 800ce20:	ee67 0a27 	vmul.f32	s1, s14, s15
 800ce24:	e7b9      	b.n	800cd9a <scalbnf+0x1e>
 800ce26:	bf00      	nop
 800ce28:	ffff3cb0 	.word	0xffff3cb0
 800ce2c:	4c000000 	.word	0x4c000000
 800ce30:	7149f2ca 	.word	0x7149f2ca
 800ce34:	0da24260 	.word	0x0da24260
 800ce38:	33000000 	.word	0x33000000

0800ce3c <copysignf>:
 800ce3c:	ee10 3a10 	vmov	r3, s0
 800ce40:	ee10 2a90 	vmov	r2, s1
 800ce44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce48:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	ee00 3a10 	vmov	s0, r3
 800ce52:	4770      	bx	lr

0800ce54 <_init>:
 800ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce56:	bf00      	nop
 800ce58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce5a:	bc08      	pop	{r3}
 800ce5c:	469e      	mov	lr, r3
 800ce5e:	4770      	bx	lr

0800ce60 <_fini>:
 800ce60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce62:	bf00      	nop
 800ce64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce66:	bc08      	pop	{r3}
 800ce68:	469e      	mov	lr, r3
 800ce6a:	4770      	bx	lr
